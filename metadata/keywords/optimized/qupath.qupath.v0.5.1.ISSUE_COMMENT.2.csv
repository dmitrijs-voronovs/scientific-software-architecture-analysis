quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"I have kept meaning to try the Weka plugin, but never seemed to get around to it! This sounds like an excellent chance to test it out.; Somewhat related, I am not sure I understand exactly what you are measuring, but if you are measuring ""the amount of white space"" in your tissue, I have a couple of suggestions.; 1. Create a macro that sends your annotation areas to ImageJ, which can then create detection objects from a mask created to detect below/above a certain ""white"" threshold.; 2a. Built in, create a smallish annotation that includes significant whitespace and your tissue of interest. Next use the Analyze->Preprocessing->Estimate stain vectors to both set your background to the mode (first popup), and secondly set one stain vector as best you can to line up with your detections, and the other you can pretty much ignore.; ![step1](https://cloud.githubusercontent.com/assets/23145209/23876638/b0997bee-07fb-11e7-9c2a-434dacaddead.JPG); 2b. Use the Analyze->Region Identification->Positive Pixel Count (experimental) with very a very low threshold for the stain vector you used in the previous step, and an absurdly high threshold for your second vector which we will ignore. I would iterate a few times on a VERY small area, as this is very computationally intensive, and the program tends to respond very slowly for me after running it on a large area.; 2c. Once you have your settings and run the pixel count on your annotation, you can use your pixel area and the total area to get a percentage of total pixels that are below threshold. In the case of my image, I used the hematoxylin vector, so I multiplied the negative pixel count times the area of my pixels (seen under the image tab, Pixel Width and Pixel Height) and used that to obtain a percentage of non-tissue area within my annotation. You can see that in the Excel window, and that it roughly matches up with what you can see in the annotation.; ![step2](https://cloud.githubusercontent.com/assets/23145209/23877031/93cf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286257042:399,detect,detection,399,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286257042,3,['detect'],"['detect', 'detection', 'detections']"
Safety,"I have seen the same error before, but not since updating to JDK 14 (which will be a minimum requirement for v0.2.0, since it greatly simplifies building by including jpackage). To avoid the error with JDK 11-13, I think you'd need to change the build script to include more modules with jlink.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436#issuecomment-612953950:181,avoid,avoid,181,https://qupath.github.io,https://github.com/qupath/qupath/issues/436#issuecomment-612953950,1,['avoid'],['avoid']
Safety,"I have seen the tiny rectangle appear whenever I use the brush tool in 'subtract' mode (with the ```Alt``` key down), and remove the entire area. However, in that case it is just a display thing - and the rectangle quickly disappears. But based on your post I've just checked and I can reproduce it using *Subtract selected annotations*... in which case the rectangle can hang around for longer. It still *does* disappear (sometimes...) if I select it, then start drawing a new annotation - but not entirely consistently. What I think is happening is this:; * Whenever a ROI is effectively removed (either with the brush tool or subtraction), it results in a rectangle at location (0, 0) with zero width and zero height - this is nevertheless still drawn on screen; * When removing with the brush tool, a sanity check is applied to see if the resulting ROI has no area - and if so, the object is removed (e.g. [see here](https://github.com/qupath/qupath/blob/61a382e1e345e671b3fde32da08e03f08f4f7bcf/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/AbstractPathDraggingROITool.java#L100)); * This sanity check isn't applied with the *Subtract selected annotations* command... so the 'empty' ROI does not result in the object being automatically removed; * Sometimes the sanity check can be triggered later... but it entirely clear when and why. I've flagged this as a bug, since something here is definitely not right and should be fixed. I do think that there is a broader issue with the usefulness of the commands for combining annotations; these can and should behave more predictably. It may not be helped by the fact that for a long time (before release) QuPath didn't support multiple objects being selected simultaneously, and much of the original code was written back in those days; as you can imagine, this was quite limiting. You're completely right about support for subtracting multiple annotations being tricky from a how-to-present-this-to-the-user point of view. I will give thi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/78#issuecomment-302926092:805,sanity check,sanity check,805,https://qupath.github.io,https://github.com/qupath/qupath/issues/78#issuecomment-302926092,1,['sanity check'],['sanity check']
Safety,"I have the same problem with CZI files. . Pete answered with this - i didnt try to find if my settings were FL instead of brightfield yet, but most of the suggestions i tested already. It did not help. Here the suggestions: . This happens whenever QuPath is unable to detect any cores. There are a few reasons why this may occur:. The Image type is wrong (e.g. set to fluorescence rather than brightfield) - this can be seen after clicking on the Image tab on the left. There is a screenshot here.; The specified TMA core diameter is either too large or too small. QuPath determines the expected TMA grid from 'complete' cores, which have a diameter within a small tolerance of the value set in the dialog box. If no cores fall within this tolerance, the grid cannot be found.; The intensity threshold is either too high or too low (but it is automatically determined from the data, and I don't see any reason in your image why it would be determined wrongly). If the image type is set correctly, then I would try increasing and decreasing the TMA core diameter to see if this gives any improvements. If not, then there may be some issue happening internally when trying to read from the CZI file - although I have not seen such a problem before. The contents of View → Show log may be helpful to track down the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282308795:268,detect,detect,268,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282308795,1,['detect'],['detect']
Safety,"I have tried to write several lines of code to get the subimage:. def imagelist = server.getSubImageList(); print(""Note: .vsi image list detected"" +imagelist); def project = getProject() //usually is null if no project opened; print(project); if (project != null){; def entries = project.getImageList(); }; def aSubImg = imagelist.getAt(4) ; print(aSubImg) //Series 4 (20x_04); def aSubImgPath = server.getSubImagePath(aSubImg); print(aSubImgPath) //file:/D:/QMDownload/6/BatchII%2024%20h%206%23_20190314.vsi#4. But now I can not find a way to set the subimage as active, so as to use the server to do further stuff on current active subimage",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/296#issuecomment-475876274:137,detect,detected,137,https://qupath.github.io,https://github.com/qupath/qupath/issues/296#issuecomment-475876274,1,['detect'],['detected']
Safety,"I haven't been able to replicate this issue. If I set the stains with the following script; ```groovy; setImageType('BRIGHTFIELD_OTHER');; setColorDeconvolutionStains('{""Name"" : ""My strange stains"", ""Stain 1"" : ""Orange"", ""Values 1"" : ""0.012 0.276 0.961"", ""Stain 2"" : ""Black"", ""Values 2"" : ""0.631 0.631 0.451 "", ""Stain 3"" : ""Purple"", ""Values 3"" : ""0.304 0.922 0.239"", ""Background"" : "" 255 255 255 ""}');; ```; Then all three turn up under _Subcellular spot detection_ as options. There is some logic for identifying which stains to show/hide:; https://github.com/qupath/qupath/blob/b4a442535b2bd8169aacf16ecf6aac61004971b0/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L673-L681; But I don't see why black is failing in your case, unless it has wrongly been identified as a 'residual' stain (i.e. there are only two stains, and it represents what is left over).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/304#issuecomment-518016965:672,detect,detect,672,https://qupath.github.io,https://github.com/qupath/qupath/issues/304#issuecomment-518016965,1,['detect'],['detect']
Safety,"I just want to use qupath by script. ```; private String lastOpenPath = """";; private ImageServer<BufferedImage> server;; private ImageData<BufferedImage> imageData;; private ObjectDetector<BufferedImage> detector;; private Collection<PathObject> cells;; public double threshold, thresholdPositive, expansions = 5;; public int threadNum = 4;; public String positiveMode = ""Cell: DAB OD mean"";; public Collection<PathObject> cellSegmentation(; String imagePath,; double x, double y,; double width, double height; ) throws IOException {. if (!imagePath.equals(lastOpenPath)) {; server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; imageData = new ImageData<>(server, ImageData.ImageType.BRIGHTFIELD_H_DAB);; lastOpenPath = imagePath;; }. RectangleROI roi = new RectangleROI(x, y, width, height);; ROI dup_roi =roi.duplicate();; PathAnnotationObject object = new PathAnnotationObject();; object.setROI(dup_roi);; imageData.getHierarchy().getSelectionModel().setSelectedObject(object);. PositiveCellDetection watershedDetector = new PositiveCellDetection();; watershedDetector.params.addDoubleParameter(""threshold"", ""Threshold"", threshold, null, ""Intensity threshold - detected nuclei must have a mean intensity >= threshold"");; watershedDetector.params.addDoubleParameter(""thresholdPositive1"", ""Threshold 1+"", thresholdPositive, null, 0, 1.5);. //ParameterList params = watershedDetector.getDefaultParameterList(imageData);; AbstractPluginRunner.setNumThreadsRequested(threadNum);; PluginRunner<BufferedImage> runner = new CommandLinePluginRunner<BufferedImage>(imageData,false);; watershedDetector.runPlugin(runner,null);; cells = imageData.getHierarchy().getSelectionModel().getSelectedObject().getChildObjects();. return cells;; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/389#issuecomment-568362506:204,detect,detector,204,https://qupath.github.io,https://github.com/qupath/qupath/issues/389#issuecomment-568362506,2,['detect'],"['detected', 'detector']"
Safety,"I like it! Seems to work well. Tiny thing: it looks like `Pattern pattern = Pattern.compile(""[a-zA-Z&&[^Ee]]+"");` is called on every validation of the text field. Since `Pattern` instances are immutable (according to the javadocs), I think this should be initialized outside as a `private final static` variable to avoid the unnecessary overhead.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/668#issuecomment-791375357:315,avoid,avoid,315,https://qupath.github.io,https://github.com/qupath/qupath/pull/668#issuecomment-791375357,1,['avoid'],['avoid']
Safety,I like that solution - and clever use of `concatChannels` to make the script more concise. . It would be interesting to compare it with `applyColorTransforms()` where you pass all the `ColorTransform` objects and avoid `concatChannels()`. I have a feeling that would result in a more concise JSON representation but I'm not certain. There is an unpleasantness in how transformed `ImageServer` tend to include the metadata from all the servers they wrap in the JSON representation. My guess is that the use of `concatChannels()` may result in the same metadata being duplicated multiple times - and also the same image being opened twice when it is used - although even if that happens it should be harmless. I suggest providing both `TransformedServerBuilder.applyColorTransforms(ColorTransform... transforms)` and `TransformedServerBuilder.applyColorTransforms(Collection<? extends ColorTransform> transforms)` for convenience. What is the name given to any new channel generated in this way?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184:213,avoid,avoid,213,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260286184,1,['avoid'],['avoid']
Safety,"I looked at the image and there are two main problems:; * The pixel size is completely off (169.3 μm). It looks like it was converted from a 'dots per inch' value used for printing resolution, but doesn't relate to the actual size of anything in the image.; * The background is values in your script are much too low. Draw a rectangle in one of the small 'white' areas and double-click on the 'Background' values under the 'Image' tab to set them. The first of these is the bigger problem. I don't know the source of your image, but ideally you'd be able to go back to it and save the file in a format that preserves the pixel size information properly. > Note: **Please** do not post [the same question](https://forum.image.sc/t/cell-detection-not-working-prob-because/24807) in multiple places. As described [here](https://github.com/qupath/qupath/wiki/Getting-help) and [here](https://github.com/qupath/qupath/issues/new/choose), GitHub issues is intended for bug reports and not for questions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/305#issuecomment-483056604:735,detect,detection-not-working-prob-because,735,https://qupath.github.io,https://github.com/qupath/qupath/issues/305#issuecomment-483056604,1,['detect'],['detection-not-working-prob-because']
Safety,"I missed that, I don't understand the workflow enough and there may be a bug here. But there may also be a workaround through the link I posted. The medium-term plan is to replace the detection classifier (building on the milestones, not v0.1.2) so if there's a workaround at all for training across images then I would not plan to fix this issue but rather invest the time in developing the improved command (both for reasons outlined in https://github.com/qupath/qupath/issues/343 and to better unify the code with the pixel classifier).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530510840:184,detect,detection,184,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530510840,1,['detect'],['detection']
Safety,"I really like your draft. It seems the most beautiful, design-wise. The `ImageServerStub` solution in the end may just work as a helper for writing ""good"" fast scripts, exposing exactly where the image files are absolutely needed. I made a small comment on your draft PR about the metadata, as i feel that is an important info to access *offline*. But in the end, if that was sorted out, that solution would be a drop-in replacement to mine. As you said, at last it will come down to which one is the most maintainable. I see pros and cons in both: `ImageServerStub` offers a solution that is segregated in one file, but then requires to punch multiple small holes in QP interface in order to use it; `lazy-server` distributes the code responsibility to multiple classes and requires to be careful in future development of QuPath so that it does not end up requesting for the server when it is not really useful. In the latter case it is due to the solution having a silent behaviour. However, since everything is managed internally in the lazy approach, in the future it may create less problems surging from punching holes in QuPath's interface. Ultimately, I think your solution is better maintainable-wise, granted that a few things are managed:; * have the retrieval of the image server be loud in logs. Perhaps even with some traceback to what portion of code triggered it?; * expose a `getCurrentMetadata()` function to avoid having to do `getServer().getMetadata()`; * check qupath code that requested for the server but may not need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846:1427,avoid,avoid,1427,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846,1,['avoid'],['avoid']
Safety,"I see the same - I don't think it was the case before v0.1.2 was released (I developed it on a Mac and think I'd have noticed...). So my guess is that some macOS update in between could be responsible, but I'm not certain. As a workaround, under the _Preferences_ try turning on the option _Use tile brush_. This will change the behavior of the brush if you happen to be using superpixels... but otherwise it shouldn't. However, it _will_ avoid the attempted use of a custom cursor, which appears to be what is causing the trouble.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/194#issuecomment-409582139:439,avoid,avoid,439,https://qupath.github.io,https://github.com/qupath/qupath/issues/194#issuecomment-409582139,1,['avoid'],['avoid']
Safety,"I tested performance using CMU-1.svs.; I used a very basic thresholder and simple classifier trained for 3 classes, saved for both classification and probability output - then ran the script at the bottom. Using a Mac Studio (2022) with M1 Max and 32 GB RAM the processing time was:. | v0.3.0 | v0.4.0-SNAPSHOT |; | ------------- | ------------- |; | 593.9 s | 60.1 s |. Results identical as far as I can tell. So... quite a substantial difference :). Cell detection took close to 30s, with 326 498 cells detected,. ```groovy; def checkpoints = [:]. setImageType('BRIGHTFIELD_H_E'); setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 255 255 255""}'). clearAllObjects(). checkpoints << ['Tissue detection': System.currentTimeMillis()]. createAnnotationsFromPixelClassifier(""Tissue detection"", 10000.0, 0.0, ""INCLUDE_IGNORED""). checkpoints << ['Cell detection': System.currentTimeMillis()]. selectAnnotations(); runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 1.0, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}'). for (classifier in ['Some probability', 'Some classification']) {. // Create annotation measurements; checkpoints << [""Annotation measurements for $classifier"": System.currentTimeMillis()]; selectAnnotations(); addPixelClassifierMeasurements(classifier, classifier); ; // Create cell measurements; checkpoints << [""Cell measurements for $classifier"": System.currentTimeMillis()]; selectCells(); addPixelClassifierMeasurements(classifier, classifier); }; checkpoints << [""Done"": System.currentT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584:457,detect,detection,457,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584,5,['detect'],"['detected', 'detection']"
Safety,"I think I do get the point, but want to ensure it's clear what exactly should be solved here, as I suspect there are alternative approached to consider. For example, I quickly drafted a rough alternative at https://github.com/qupath/qupath/pull/1489. This simply delays loading images until the `ImageServer` is requested. It has the advantages of being simpler (no need for different 'Run' actions), doesn't introduce any new `ImageServerStub` class, and avoids failure if pixels are requested. It probably has disadvantages too, as calling code needs to be more careful not to request the server at all (even for metadata), to avoid triggering the image to be loaded. I'm not sure which is best, but we should go with the most maintainable solution that solves the main problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875:456,avoid,avoids,456,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875,2,['avoid'],"['avoid', 'avoids']"
Safety,"I think all of those things may be correct.; If you collapse the rectangle in the Hierarchy tab, do you see two cells ""outside"" of the rectangle (although they are are mostly inside of it?; Edit, or the two cells that are parents to your hand drawn cells are somehow invisible? :). What shows up when you highlight the parent polygon? I am guessing that the polygons are your detected cells, and the AWTs are your hand-drawn, within that hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/259#issuecomment-457722556:376,detect,detected,376,https://qupath.github.io,https://github.com/qupath/qupath/issues/259#issuecomment-457722556,1,['detect'],['detected']
Safety,I think it requires the fix in JavaFX - which appears to be coming soon. Adding shortcuts to the dialogs throughout QuPath would be a rather large task and add further messiness to the code that I'd rather avoid... Does v0.1.2 have the same problem?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-507206796:206,avoid,avoid,206,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-507206796,1,['avoid'],['avoid']
Safety,"I think the closest you can get is the median whole cell measurements, at the moment. Of course, if you can script it, you can generate that information easily! All of the base values should exist, you would just have to do the calculations. Depending on your experience, though, it might be easier to export the detection measurements to Excel or R. Actually, re-reading, if you mean a cell by cell measurement of IRQ (based on the pixel values for each individual cell), you might need to use ImageJ scripts? I am not sure about that one. Overall IQR of all detections shouldn't be too hard though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/236#issuecomment-433478046:313,detect,detection,313,https://qupath.github.io,https://github.com/qupath/qupath/issues/236#issuecomment-433478046,2,['detect'],"['detection', 'detections']"
Safety,"I think the main problem is that your TIFF file was saved with incorrect pixel size information. Without that information it is very difficult to find settings that will work, though it is possible. Note that each one of your pixels is expected to be 163 um in size. Your entire image is about 0.2 meters in size. If you are using the ImageJ server, everything needs to be in pixels instead, though since you have a requestedPixelSize entry, I am guessing that is not the case here. If you are using a BioFormats server (see Image tab), you can get started with these settings, though I have not optimized them at all. ```; setImageType('BRIGHTFIELD_H_DAB');; createSelectAllObject(true);; setColorDeconvolutionStains('{""Name"" : ""H-DAB"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.81041 0.56974 0.13652 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26524 0.50132 0.8236 "", ""Background"" : "" 254 190 154 ""}');; selectAnnotations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 300.0, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 600.0, ""minAreaMicrons"": 10000.0, ""maxAreaMicrons"": 8.0E7, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 1000.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; ```. Note the extremely large values in most measurements. It would be better to fix the pixel sizes in ImageJ, though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/305#issuecomment-483056585:948,detect,detect,948,https://qupath.github.io,https://github.com/qupath/qupath/issues/305#issuecomment-483056585,2,['detect'],"['detect', 'detectionImageBrightfield']"
Safety,"I think the parallelisation makes sense. When moving to a stream, shouldn't we use `filter` *at least* once, rather than rely on `forEach`?. (If looks like `filter` could be used twice and the results added to the `pending` collection - avoiding the need to make it concurrent - but not sure if that's cleaner or not).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1504#issuecomment-2082341842:237,avoid,avoiding,237,https://qupath.github.io,https://github.com/qupath/qupath/pull/1504#issuecomment-2082341842,1,['avoid'],['avoiding']
Safety,"I think the video is showing exactly this issue: https://github.com/qupath/qupath/issues/894; It relates to opening a subset of images *outside of a project* using Bio-Formats in v0.3.1 and v0.3.2, when QuPath hangs. Not all svs files are affected, it depends upon how labels/macro images are stored inside. Some other formats (e.g. .vsi, .lif) suffer the issue too. I've already fixed that and the fix will be in the next release. Because that particular bug is related to the UI, I don't think it should have any impact when called from the command line - so I think it's different from the original tiling issue here. I'm really interested to find out of the tiling issue is avoided when using QuPath v0.3.0. There was a change in how tiles are requested in parallel in QuPath v0.3.1 and v0.3.2. This didn't directly *cause* the UI problem, but it revealed its existence (because the UI code was requesting tiles from an image after it was closed, and that caused the hang). Intermittent issues like the tiling one here do sound like parallelisation is somehow involved, but the initial error on this thread is strange.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057173906:678,avoid,avoided,678,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057173906,1,['avoid'],['avoided']
Safety,"I think this is an issue of naming/documentation, not behavior. If the caller knows that their string can be converted to a `File`, then it's very easy for them to just call `new File(String)` first and use `getNameWithoutExtension(File)`. But the current behavior is consistent and useful for cases where this isn't the desired result. Although the naming isn't great, `getNameWithoutExtension(String)` does not specify the name to be a *file*name. Although it's natural for the user to think it would be, I don't think the method should silently assume that. Also, QuPath can work with images where the URL doesn't relate to a file system file, or this method could be called with a String that contains characters that are invalid for a filename. I don't *think* `new File(String)` throws an exception in that case, but I'm not certain and behavior might be platform-dependent. For these reasons I would prefer to either; * Rename the method to `stripExtension(String)` (but deprecate the original for removal in the future); * Keep the original but improve the javadoc. (There is also a major refactoring currently under way, so I'm reluctant to merge other PRs in the short term to avoid conflicts.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476:1187,avoid,avoid,1187,https://qupath.github.io,https://github.com/qupath/qupath/pull/1275#issuecomment-1621077476,1,['avoid'],['avoid']
Safety,"I tried reproducing the error a few times with that classifier with 4 GB of RAM and I wasn't able to reproduce it. I bumped up the resolution to `1,01 µm/px` and two `OutOfMemoryError` came up with only one stacktrace (this happened without any GC or cache clearing; didn't try with it enabled either). **This was running on 0.3.2**, I can give it a try on newer versions if any relevant parts have changed in the code. I've attached the whole classifier below (it's just a simple thersholder to filter out the background). I think the original analysis was done with 6 GB or 8 GB of RAM but I also had other scripts with `qupath.imagej.detect.cells.WatershedCellDetection` running and I can't say for 100% certainty whether it was the Pixel Classifier, Cell Counting or both which caused OutOfMemoryErrors. ```; ERROR: OutOfMemoryError: Java heap space. ERROR: qupath.opencv.tools.OpenCVTools.matToBufferedImage(OpenCVTools.java:765); qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:115); qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); qupath.lib.images.servers.AbstractTileableImageServer$$Lambda$1691/0x0000000800796740.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); qupath.lib.analysis.images.ContourTracing.traceGeometriesImpl(ContourTracing.java:1157); qupath.lib.analysis.images.ContourTracing.traceGeometries(ContourTracing.java:1143); qupath.lib.analysis.images.ContourTracing.lambda$traceGeometriesImpl$9(ContourT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500:637,detect,detect,637,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500,1,['detect'],['detect']
Safety,"I tried the script and below is the part of the result where I recognize the channels. The wavelength matches the naming, but no colors are mentioned. I also searched the whole script result for blue and green, but nothing were found. EmissionWavelength=""455.0"" EmissionWavelengthUnit=""nm"" ID=""Channel:7:0"" Name=""DAPI"" SamplesPerPixel=""1""><DetectorSettings Binning=""1x1"" ID=""Detector:0:7""/><LightPath/></Channel><Channel EmissionWavelength=""518.0"" EmissionWavelengthUnit=""nm"" ID=""Channel:7:1"" Name=""FITC"" SamplesPerPixel=""1""><DetectorSettings Binning=""1x1"" ID=""Detector:0:7""/><LightPath/></Channel><Channel EmissionWavelength=""565.0"" EmissionWavelengthUnit=""nm"" ID=""Channel:7:2"" Name=""TRITC"" SamplesPerPixel=""1""><DetectorSettings Binning=""1x1"" ID=""Detector:0:7""/><LightPath/></Channel><Channel ID=""Channel:7:3"" Name=""CY5"" SamplesPerPixel=""1""><DetectorSettings Binning=""1x1""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/361#issuecomment-531192852:340,Detect,DetectorSettings,340,https://qupath.github.io,https://github.com/qupath/qupath/issues/361#issuecomment-531192852,7,['Detect'],"['Detector', 'DetectorSettings']"
Safety,"I tried to modify the script proposed in #97 for the case demonstrated in the following figure:. ![02](https://user-images.githubusercontent.com/20478730/33174622-18c2a36e-d059-11e7-9972-ee1a58d4fe01.PNG). Script:; ```; import javax.imageio.ImageIO; import qupath.lib.regions.RegionRequest. // Define resolution - 1.0 means full size; double downsample = 1.0. // Create output directory inside the project; def dirOutput = buildFilePath(""XXX/TESTFOLDER""); mkdirs(dirOutput). // Write the nuclei; def server = getCurrentImageData().getServer(); def path = server.getPath(); for (Polygon in selectDetections()){; // Stop if Run -> Kill running script is pressed ; if (Thread.currentThread().isInterrupted()); break; // Write the image; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, Polygon.getROI())); ImageIO.write(img, 'PNG', new File(dirOutput, Polygon.getName() + '.png')); }; print('Done!'); ```; I substituted _core_ from the original script with _Polygon_ and `getTMACoreList()` with `selectDetections()` to make it working for detections. . There is no error message in the script but it doesn´t work. Does anyone have an advice? Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346617281:1065,detect,detections,1065,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346617281,1,['detect'],['detections']
Safety,I want to get the percentage or quantify the DAB membrane staining cells. Could you please tell me how can I use cell+membrane detection tool?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/227#issuecomment-428253931:127,detect,detection,127,https://qupath.github.io,https://github.com/qupath/qupath/issues/227#issuecomment-428253931,1,['detect'],['detection']
Safety,"I wanted to switch the measurement table histogram to use JavaFX yesterday, using observable values and making them persistent, but didn't have the time / concentration / will to actually do it. That would give more customisation control - there is no real reason they need to use the `Parameter` stuff (which is primarily to make it easier to write scriptable commands, like cell detection, without needing to code the whole UI). Feel free to make that change. Or, the easy one, just clip a maximum number of histogram bins in the code and log a warning if the user requests something unreasonable that we don't use.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1541#issuecomment-2162260361:381,detect,detection,381,https://qupath.github.io,https://github.com/qupath/qupath/issues/1541#issuecomment-2162260361,1,['detect'],['detection']
Safety,"I was looking into this, and ways to classify multiple sets of cells within an image, and found one way that may or may not be useful here.; Massive disclaimer, this does not work for using the ""Create Detection Classifier,"" but does work for the script Peter wrote to perform classifications based on features. I'll add a copy in at the end. 1. Create an annotation around the cells you want to generate in a certain way (sometimes I want to create larger cells for muscles vs smaller for other tissues), then generate your cells for each annotation.; 2. This step could use a short script from Peter (select all cells within a certain annotation class), but if you select a given subset of cells by picking one annotation (usually easy enough by clicking on that annotation in the hierarchy and shift+clicking) you can then add a dummy measurement to those cells using settings in the Compute Intensity Features (or a script, probably) that you do not need for classification. In my case I chose Hue-Mean.; 3. Include Hue-Mean in your classification script as a measurement it checks for the presence of, and if not found, the classifier does not even try to classify those cells. I tested this by adding Hue-Mean, Saturation-Min, and Saturation-Max to three different sets of cells, and was able to run 3 different classifiers on all of my cells, and only have the correct cells (the ones with the dummy measurement) receive the results of the correct classification.; I'm sure this is somewhat complicated by the TMAs and dealing with multiple cores, and I haven't had a chance to figure out how to make that work since you can't draw an annotation to include multiple TMA cores, but maybe this could prove useful as a stepping stone for running multiple classifiers within a TMA. Here is the code for the dummy Hue-Mean classifier (specifically run at 0.50 µm). I have muddled around in the code here, and I think this is working because I never create a ""def"" for my ""baseClass"" of ""Tumor."" Ther",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-289248209:202,Detect,Detection,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-289248209,1,['Detect'],['Detection']
Safety,"I wasn't sure whether select annotations/detections had to be called before the actual processing but if it can be avoived it is great as depending on how many objects you have it might be slow. yes it is generating one file per slide with the idea of deleting everything once the analysis is over for the slide (although this bit of code is commented now). . outAnnoationsStatFname = ""H://""+strfnameTrim+""_steatosis_annotations.txt"". This is the line creating the variable holding the filename. . It is not an issue of size (I thought about that too) because if you limit the analysis to the first 10 tiles for every slide you are dealing with files of <100K. Although the complete file it should be < 20MB.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357016567:41,detect,detections,41,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357016567,1,['detect'],['detections']
Safety,"I would definitely recommend doing the export with ImageJ if you can, using the [ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) and a very simple ImageJ macro like this one. ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```. You'll need to make sure that the export directory exists before running it. Still, if you do it this way then if you open the resulting TIFF within ImageJ you should find that the pixel sizes are preserved - and even the information regarding where in the image the region was taken (look under *Image &rarr; Properties* in ImageJ). This isn't stored if you export in any other format (e.g. PNG, JPEG). Even if you don't need it currently, this at least gives the possibility that you could relate any detected regions etc. that come from processing the TIFF back to where they came from in the original, whole slide image. You can also modify the export resolution by changing the 'Downsample factor' in the macro runner.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-317354440:795,detect,detected,795,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-317354440,1,['detect'],['detected']
Safety,"I would first check the log file (View-> show log), but it does look like you might have run out of memory. . It is also possible that *sometimes* the detection creation functions run into problems with ""small"" tiles, and the entire process stops. To get around this (or test for it) I would recommend choosing slightly different settings in your Simple Tissue Detection (more smoothing, requested pixel size change, etc.).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/115#issuecomment-343274362:151,detect,detection,151,https://qupath.github.io,https://github.com/qupath/qupath/issues/115#issuecomment-343274362,2,"['Detect', 'detect']","['Detection', 'detection']"
Safety,"I would safely estimate 200+ .qpdata files, and all .qpdata files are saved right below their respective .tifs in their respective folders.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461120253:8,safe,safely,8,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461120253,1,['safe'],['safely']
Safety,"I'll close this issue, since I think most things that can and will be fixed now have been:. * CZI images can now be read with QuPath, as described [here](https://github.com/qupath/qupath/wiki/Supported-image-formats#zeiss-czi) - thanks to the work of OME with [Bio-Formats 5.3.0](https://www.openmicroscopy.org/site/support/bio-formats5.3/about/whats-new.html).; * Cell detection in fluorescence images now gives the option to select the detection channel, and more sensible defaults; * The Brightness/Contrast tricks mentioned above are now documented more fully on the [wiki](https://github.com/qupath/qupath/wiki/Changing-colors); * Most RGB ```.mrxs``` files should be readable, although unfortunately 16-bit or JPEG-XR-compressed files are not and there are no immediate plans to add this support within QuPath. However, if OpenSlide or Bio-Formats are able to support these images, then QuPath will benefit through its use of these libraries.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-266718638:370,detect,detection,370,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-266718638,2,['detect'],['detection']
Safety,"I'll merge this now to avoid having too many conflicts to resolve, and to have more time to try it in combination with all the other v0.6.0 changes. I'd still be grateful for anyone interested to test this!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2275920618:23,avoid,avoid,23,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2275920618,1,['avoid'],['avoid']
Safety,"I'm afraid I don't have much experience of handling dependencies on Linux. There is a little more information the binaries were created at https://github.com/qupath/qupath/issues/2. Basically I compiled it on Ubuntu 16.04 and have not tested it on 14.04. The possibilities that I can think of that might help would be:; * Try a newer version of Ubuntu if possible.; * Make sure Java is installed in Ubuntu. I don't think this should be necessary (since it is included in the QuPath download)... but perhaps.; * Try removing any ```.jar``` files connected to OpenSlide / OpenCV / JInput / JPen from within QuPath (the libraries should be mentioned in the ```qupath-***.jar``` file name). Apart from the Java Runtime Environment (JRE) itself, these are the parts that depend on native libraries. QuPath should still work without them, but will miss some features - such as whole slide image handling and classification. If the JRE is not the problem then hopefully this would enable QuPath to start, and you can recover some of the missing functionality by downloading [extensions](https://github.com/qupath/qupath/wiki/Extensions) that don't require native libraries.; * Try compiling QuPath from source from within Eclipse. You may find this easier to set up using Oracle's Java Development Kit than OpenJDK... but both should work.; * Try launching QuPath from the command line, setting the ```java.library.path``` variable and possibly using a different JRE if required... figuring out how to do this could be tricky, although [this](https://github.com/qupath/qupath/issues/27) may help a little bit. I hope something in there might be useful. If you are able to find a solution, it would be great if you could post it here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/51#issuecomment-280861844:1010,recover,recover,1010,https://qupath.github.io,https://github.com/qupath/qupath/issues/51#issuecomment-280861844,1,['recover'],['recover']
Safety,"I'm afraid not, since `The crash happened outside the Java Virtual Machine in native code.` it will probably be very hard to debug. The actual problem has happened outside of QuPath, and the best QuPath can do is to try to avoid calling the problematic code. Such errors have been quite common when using OpenCV, and it is a constant battle to eliminate them as far as possible... I will look out for it, but since the TensorFlow code is still at a very early and experimental stage (and not part of the public release) I'm afraid it really isn't something I'm able to support at this stage. If you are able to replicate it with a minimal sequence of steps and/or find any solution, please do let me know.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630152060:223,avoid,avoid,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630152060,1,['avoid'],['avoid']
Safety,"I'm afraid that would be tricky... you'll definitely need access to the raw pixels. To achieve this after detection, it's best _not_ to choose _Smooth boundaries_ in the cell detection parameters, to keep the contours as close as possible to their original shapes... then you could potentially loop through every cell, extract the pixels for the cell, create a binary mask for the nucleus and another for the cell, and work from there. Or alternatively you could write an entirely new cell detection (e.g. with ImageJ or OpenCV). Another option would be to look at exporting the pixels, and the cell ROIs as labelled images (with unique integer labels for each cell). Then you can potentially tackle the task in Python or R. Whichever way you choose it's not entirely straightforward, and calculating the values efficiently for large numbers of cells would be a further challenge. So... it's technically possible, but would require quite a lot of effort.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/236#issuecomment-433483920:106,detect,detection,106,https://qupath.github.io,https://github.com/qupath/qupath/issues/236#issuecomment-433483920,3,['detect'],['detection']
Safety,"I'm not sure about this. It has been a long time, but I think the reason I excluded sum from non-nucleus measurements is because it is common for people to train classifiers using all features. Because cell expansion is only distance-based, I felt that sum measurements outside the nucleus could be extremely unreliable. Also, the sum depends upon the resolution at which the measurement is calculated; for the default cell detection, this is the detection resolution, but that might not be what the user expects. The need for a nucleus sum, however, seemed sufficiently common that it should be included - and the nucleus ROI is likely to be more reliable, which reduces the problems slightly. I realise it's a judgement call and people may disagree. I'm reluctant to change the built-in cell detection, since the current behavior hasn't changed across releases and any modifications can impact classifiers. I'd rather we focus on moving away to alternative cell detection methods, and decouple measurement from detection to improve flexibility.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1454#issuecomment-1909779883:424,detect,detection,424,https://qupath.github.io,https://github.com/qupath/qupath/issues/1454#issuecomment-1909779883,5,['detect'],['detection']
Safety,"I'm not sure what you mean by 'hierarchy export'?; I think it would probably be good to have a column in the detection table giving the name of the TMA core containing the detection. A column to add the immediate 'parent' object could also be helpful. I suspect that trying to put more information concerning the hierarchy into the table could be confusing (since some detections might be at lower levels in the hierarchy than others), but I'll give it some thought. I suspect @Svidro is much more familiar with R than I am, but if you are happy with R then I would suggest trying out some scripting in QuPath with Groovy. There is a bit of documentation in the Wiki (starting [here](https://github.com/qupath/qupath/wiki/Writing-custom-scripts)). It may take a little while to become familiar with QuPath's data structures, but I think Groovy has quite a nice syntax and [IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) can help considerably. With even a little bit of scripting, you are no longer limited by the tables QuPath gives, but you can export your data any way you like... for use in R or elsewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-290309875:109,detect,detection,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-290309875,3,['detect'],"['detection', 'detections']"
Safety,"I'm not sure which approach is preferable to solve this. I have the feeling there will always be a need for an alternative to whichever default approach we take. As usual, the workaround would be a script. Here's one that shows how to get much more control over which distances are calculated, here using all detections without a parent that is a detection:. ```groovy; def detections = getDetectionObjects().findAll {!it.getParent()?.isDetection()}. def stroma = detections.findAll {it.getPathClass() == getPathClass('Stroma')}; def other = detections.findAll {it.getPathClass() == getPathClass('Other')}. def pixelWidth = getCurrentServer().getPixelCalibration().getPixelWidthMicrons(); def pixelHeight = getCurrentServer().getPixelCalibration().getPixelHeightMicrons(). DistanceTools.centroidToCentroidDistance2D(; detections, other, pixelWidth, pixelHeight, ""Distance to Other µm""; ); DistanceTools.centroidToCentroidDistance2D(; detections, stroma, pixelWidth, pixelHeight, ""Distance to Stroma µm""; ); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1550#issuecomment-2283437122:309,detect,detections,309,https://qupath.github.io,https://github.com/qupath/qupath/issues/1550#issuecomment-2283437122,7,['detect'],"['detection', 'detections']"
Safety,"I'm still busy with optimising the parameters for the positive cell detection such as nucleaus DAB mean/max or cytoplasm or cell. After a serie of runs on single ROI, Qupath fails again with the same 'problem' out of memory. Which is likely to be false 'cause I still have 3.5 gb RAM free and its the only program open. When I close the program and open it, it works a gain, but after a ten-fold runs it 'crashes' again.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344193230:68,detect,detection,68,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344193230,1,['detect'],['detection']
Safety,"I've added a PR that is intended to address this... although its main focus is on another related bug: https://github.com/qupath/qupath/pull/1070. > Visualizing objects overlaid onto images shouldn't result in substantial lag. Ideally it shouldn't, but if it does I wouldn't say it's necessarily a bug... since QuPath is already needing to do a *lot* of stuff to get acceptable performance across a wide range of scenarios. Specifically here:; * For a downsample >= 1, repainting detections caches tiles and multiple resolution levels for performance - this is why QuPath can handle millions of objects.; * For downsample < 1, repainting happens for all detections in the field of view (like for annotations) for improved appearance without nasty bitmap-upsampling artefacts. This is inevitably laggier than using cached tiles, but caching itself has considerable overhead in terms of memory and worse appearance. I think this tradeoff makes sense, since details really matter when viewing the image at high magnification but the number of objects visible should be limited (possibly thousands, but not millions). However it does mean that if you have a large enough monitor, many detections, and a downsample value slightly less than 1, performance there certainly can be a noticeable lag... and object connections make this worse by meaning that thousands more lines need to be rendered. However, investigating this revealed that QuPath was painting all the connections twice, which certainly wasn't helping things :). So the PR fixes the double-painting bug. Along the way, it adds a spatial cache that enables QuPath to be a bit smarter about which connections it paints. The main reason for this change is to overcome an issue with long connections sometimes being broken at some resolutions:. ### Old behavior:; ![connection_bug-1](https://user-images.githubusercontent.com/4690904/194024037-795fceaa-e542-4c67-8fa2-84e6a8aca691.png). ### New behavior:; ![connection_fix-1](https://user-images.g",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189:480,detect,detections,480,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189,2,['detect'],['detections']
Safety,"I've added a new preference so that this can be turned on/off, to help us explore if we like it or not. (If it stays, we might need to tweak the behavior a bit to make detections easier to see in other ways - especially cells, where the boundaries may be too faint currently). <img width=""549"" alt=""Dynamic thickness"" src=""https://github.com/user-attachments/assets/72f3efa3-d3f6-4d47-a79e-13defcc96248"">",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1623#issuecomment-2333206629:168,detect,detections,168,https://qupath.github.io,https://github.com/qupath/qupath/pull/1623#issuecomment-2333206629,1,['detect'],['detections']
Safety,"I've been thinking about this, and made an attempt to get the best of both worlds: https://github.com/qupath/qupath/pull/676. I remain reluctant to do too much parsing, since as long as the string is passed to Groovy it's quite possible to parse it within the script itself. But I see the risk in allowing misspelled arguments. I hope this approach is a suitable compromise, but I don't do a huge amount of command line stuff so not sure if I've broken some convention along the way. Curious as to what you think...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-794360793:289,risk,risk,289,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-794360793,1,['risk'],['risk']
Safety,"I've discussed this with @melvingelbard and we propose to change the export to a single csv/tsv table that includes class and name as optional columns, and avoids the 'header' information in the current export format. I suspect that the main usefulness of this is to support spatial analysis outside QuPath, or import points from other sources. Following the instructions in the tutorial to create duplicate images, or using the annotation export methods in the docs, there shouldn't be any need to rely on this method of saving/loading points for training.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-597155651:156,avoid,avoids,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-597155651,1,['avoid'],['avoids']
Safety,"I've flagged this as a duplicate, since it sounds the same as the issue linked to by @Svidro. I've given the details there, and potential direction for how it might be addressed in the long term. In this case, it might be possible to improve matters by ensuring that all entries in the 'hierarchy' tab are first closed - or that there are no child objects. Then the results in the annotation table can be sorted by area, and all the top entries (with low areas) selected in one go. In the longer term, the better way to handle this would be to write a script that finds all the annotations with an area below a specified threshold, and removes them directly from the object hierarchy. Using a script it is possible to avoid the need for selecting the annotations in the GUI entirely, and get *much* better performance. Clearly this is a bit more work to begin with, but I highly recommend working through the scripting parts on the Wiki if you haven't done so already - this is the kind of application where scripting can be invaluable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/86#issuecomment-317358116:718,avoid,avoid,718,https://qupath.github.io,https://github.com/qupath/qupath/issues/86#issuecomment-317358116,1,['avoid'],['avoid']
Safety,"I've had a quick look at the code and it should be possible to make some minor improvements to help with this, although it isn't a completely trivial fix. The main reason is that opacity = 0 is not equivalent to not painting anything; there is an *Always show selected objects* preference (on by default) that means selected objects should always be painted. So the object-painting code cannot be switched off entirely, and the various other painting optimizations need to be navigated carefully. The behavior you are seeing is also somewhat zoom-dependent, because detections are painted directly when upsampling - but otherwise they are painted once and cached. So if you zoom out a little, I'd hope that any lag you notice would be temporary at most. There are lots of possible permutations of options (showing/hiding detections/annotations, filled, unfilled, selected/unselected, global opacity option & per-overlay opacity option, zoom) - the most common of these have already been optimized to some degree, but the specific scenario you point out hasn't yet. > Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix. The lag should be no more than what occurs whenever opacity is not zero - and I'd expect that someone using QuPath will generally want to see their objects at some point. Therefore if it's a major issue for anyone, I'd expect QuPath to already be unusable for them. If this is the only problem they encounter, there is already an easy fix with a shortcut (turn off the detections with `D`).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-926350763:566,detect,detections,566,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-926350763,3,['detect'],['detections']
Safety,"I've made a PR at https://github.com/qupath/qupath/pull/1195. It involved entirely changing how the Groovy syntax highlighting works, and adding support for a few other Groovy features (like using colors to indicate `""string $interpolation""`, or numeric values). It doesn't handle everything, because that would require fully parsing the code too avoid getting mixed up (e.g. mistaking a division operator for the start of a slashy string). The code was very fiddly to write, so I wouldn't be surprised to learn its broken in some places - but as far as I can tell, it's better than the previous version. @Rdornier if you've time to check it out, please let me know if there are problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176#issuecomment-1357429790:347,avoid,avoid,347,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176#issuecomment-1357429790,1,['avoid'],['avoid']
Safety,"I've made an update that will be included in v0.1.2 so that QuPath can recover more gracefully if it finds that OpenSlide cannot be loaded. Previously, it recovered only the first time... but subsequent attempts to open images were thwarted by a particularly nasty error - which caused the trouble you found. Therefore while it still remains a mystery why OpenSlide cannot be used on one of your computers, at least there should be no need to manually disable OpenSlide through renaming from now on. (Note: I'd recommend uninstalling QuPath before installing the update, since otherwise it is likely that the current files, renamed and not, will hang around within Windows... they shouldn't cause trouble, but uninstalling manually can help make sure.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35#issuecomment-268797552:71,recover,recover,71,https://qupath.github.io,https://github.com/qupath/qupath/issues/35#issuecomment-268797552,2,['recover'],"['recover', 'recovered']"
Safety,"I've made some progress. After cell detection, I did _Analyze → Calculate features → Add intensity features (experimental)._, with a pixel size of 1 um. I chose Red, Green, and Blue, and Mean. Then the following code:. ```; import qupath.lib.objects.classes.PathClass; import qupath.lib.objects.classes.PathClassFactory. def Brown = PathClassFactory.getPathClass(""Brown""); def Red = PathClassFactory.getPathClass(""Red""); def Purple = PathClassFactory.getPathClass(""Purple""); def Teal = PathClassFactory.getPathClass(""Teal""). def rmean = ""ROI: 1.00 µm per pixel: Red: Mean""; def gmean = ""ROI: 1.00 µm per pixel: Green: Mean""; def bmean = ""ROI: 1.00 µm per pixel: Blue: Mean"". for (def cell :getCellObjects()) {; ; double r = cell.getMeasurementList().getMeasurementValue(rmean); double g = cell.getMeasurementList().getMeasurementValue(gmean); double b = cell.getMeasurementList().getMeasurementValue(bmean); ; if (isBrown(r,g,b)); cell.setPathClass(Brown). else if (isPurple(r,g,b)) ; cell.setPathClass(Purple). else if (isTeal(r,g,b)); cell.setPathClass(Teal). else if (isRed(r,g,b)) ; cell.setPathClass(Red). }; ```. the `isBrown()`, etc. functions just do some simple thresholding of the r,g,b values to decide what color a cell is stained. I'm still tweaking those functions, but it's working pretty well (white outlines are unclassified cells, the rest are outlined in the appropriate color):. ![5-plex snapshot](https://user-images.githubusercontent.com/3537118/37124548-9755fc06-221d-11e8-93c5-dc4f02dd68ac.png). I think this will work well enough for my application (we'll be presenting this data as a platform presentation at USCAP in Vancouver in a couple weeks, if anyone is interested in multiplex IHC).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/155#issuecomment-371327542:36,detect,detection,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/155#issuecomment-371327542,1,['detect'],['detection']
Safety,I've updated these limits in v0.2.1. Hopefully that is enough to avoid this issue resurfacing.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-644847539:65,avoid,avoid,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-644847539,1,['avoid'],['avoid']
Safety,"If I understand correctly, then everything is actually behaving as it is supposed to... adding a new object that is inside an existing one (even a cell) gets positioned 'below' it. So... it might not be what you wanted, but it is correct - right?. If you don't need the cell boundaries (or associated measurements) then by reducing the 'cell expansion' parameter to zero during detection you can create a 'nucleus detector' only, which may help avoid confusion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/259#issuecomment-457854313:378,detect,detection,378,https://qupath.github.io,https://github.com/qupath/qupath/issues/259#issuecomment-457854313,3,"['avoid', 'detect']","['avoid', 'detection', 'detector']"
Safety,"If I understand correctly, this PR is to make the top title change on hover but *not* the bottom one - because the top one can be expanded/collapsed, but the bottom one can't. https://github.com/qupath/qupath/assets/4690904/d115720b-3ace-41b2-b7e7-017cb21cc4c7. tbh I'd never noticed this or seen it as problematic. If you think it needs a fix, then should it not go into `qupath-fxtras`? This is the new home to [`simplifyTitledPane`](https://github.com/qupath/qupath-fxtras/blob/4a88b9b427ae6c9a17c33702c06f0c536cad6915/src/main/java/qupath/fx/utils/FXUtils.java#L550)... but then you'd need to load an external .css (like with the simplify method), e.g.; ```java; public void makeNonCollapsible(TitledPane pane) {; pane.setCollapsible(false);; // Whatever other styling is needed here; }; ```. Hard-coding a reference to the CSS class feels a bit brittle to me, and is tied very much to QuPath in a way that is unusable elsewhere. And I imagine we'll end up with inconsistencies as we'll forget / extension writers won't know to add this style class... which to me seems potentially worse. You could also change `main.css` to avoid any change on hover at all, but personally I think it looks quite nice and helps titles stand out. Was there any particular user complaint or confusion caused by the default JavaFX approach of slightly changing the behavior on hover, regardless of the 'collapsible' status?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919:1129,avoid,avoid,1129,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919,1,['avoid'],['avoid']
Safety,"If I understand correctly, this is expected behavior. If you run cell or tissue detection inside an object, then the existing contents of that object will be removed and the results of running the command will be added instead. This is the best way that I could think of to make the behavior predictable and (generally) unobtrusive. Otherwise, if you ran either command multiple times you would end up having multiple tissue annotations or cell objects relating to the same structures in the image. To get around this, you'd need to explicitly delete the older objects... which would be laborious if you want to run the same command multiple times to test out different settings. Also, in this specific example, by detecting cells first and then tissue you could very easily end up with cells within a TMA core being located outside the tissue region... which could be rather confusing. For these reasons, if you want both tissue annotations *and* cell detections, then you should create the tissue first and then detect the cells inside the tissue. If you want, you can delete the tissue annotations afterwards but keep the cells (e.g. *Objects &rarr; Delete... &rarr; Delete all annotations*). As described in #59, if the goal is to have the core name exported along with the individual cell measurements then that can be done by scripting. There are lots of ways to approach this in a script, although I can't think of a way currently to get that specific output without writing a script.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/60#issuecomment-290307913:80,detect,detection,80,https://qupath.github.io,https://github.com/qupath/qupath/issues/60#issuecomment-290307913,5,"['detect', 'predict']","['detect', 'detecting', 'detection', 'detections', 'predictable']"
Safety,"If atomicity of the operation is what worries you, i could implement a method that does it safely, very similarly to what you do with `.qpproj` files.; 1. `write <file>.tmp` (if it already exists, it will just overwrite it). If this fails, you have the previous `<file>`; 2. `rm <file>.backup --if-exists`. If this fails, you have the `<file.tmp>` and `<file>` as the newest versions; 3. `mv <file> <file>.backup` (works as we are sure the target doesn't exists already). If this fails, you have the `<file.tmp>` as the newest version; 4. `mv <file>.tmp <file>` (same, as the previous operation worked). If this fails, you have the `<file.backup>` as the backup version; 5. `rm <file>.backup`, if desired. > could you give the full stack trace for what exception you get without these changes?. The ""problem"" is that there is no exception thrown. It just fails on step 3 and/or 4 because `source` is identified as the same file as `target`, so it just [does not do anything](https://github.com/openjdk/jdk/blob/cbfddf4e1d3ff8dddb95bcb9242b31c175b768fc/src/java.base/windows/classes/sun/nio/fs/WindowsFileCopy.java#L363). As if the `target` was the `source`.; This means that a project saved on an SFTP server will always end up with three files, `project.qpproj`, `project.qpproj.backup` and `project.qpproj.tmp`, where the latter is the ""real"" project.; But it also means that when a project is saving the image data it does the following if there was a previous backup:; * `mv <pathData> <pathBackup>` -> **FAILS** : `<pathBackup>`now has the older backup saved, while `<pathData>` still exists.; * `write <pathData>` -> dangerous operation: if it fails for whatever reason, the only saved state is the one from an older backup. > Is there any easy way for us to replicate the issue?. Not that I know of. You have to connect to an SFTP server with windows to do this. Finally, i think `DefaultProject.java` could be the only source file that would need to be modified to improve SSH support from win",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1449#issuecomment-1898959824:91,safe,safely,91,https://qupath.github.io,https://github.com/qupath/qupath/pull/1449#issuecomment-1898959824,1,['safe'],['safely']
Safety,"If the images are being rescanned, can they be saved as .ndpi? Or what is the scanner being used?. As a format .tif can be very variable inside, and I'm afraid I can't really predict what may have gone wrong without a sample image. Different software can write .tif images in very different ways. However, there have been discussions here about Leica images (usually .scn) that appear pink, and this seems to be an issue with Bio-Formats, e.g. https://github.com/qupath/qupath/issues/141 and https://github.com/ome/bioformats/issues/2811. I think it is likely that the issue is related to this, and not actually a bug in QuPath itself. If it worked in v0.1.2 then perhaps QuPath was at that time using OpenSlide rather than Bio-Formats to open the image (or else an earlier version of Bio-Formats with different behavior). I suggest three possible options:; * Try to use a different file format, or write the .tif image in a different way; * Add the image to a project in v0.2.0-m5, and when doing so specify the 'server'. Try both Bio-Formats and OpenSlide to see if either works.; * If under the 'Image' tab in QuPath, you see the words 'Bio-Formats server' then you can report it to the Bio-Formats team",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/374#issuecomment-551070262:175,predict,predict,175,https://qupath.github.io,https://github.com/qupath/qupath/issues/374#issuecomment-551070262,1,['predict'],['predict']
Safety,"If you are looking at H&E, I usually found it best to divide up the tissue; using superpixels, add texture and color measurements, then classify based; on the measurements. Once your areas are classified, there is a command to merge them all into; new annotations, which you can then perform Positive pixel or Cell; detection on. A combination of two of the steps described above. On Mar 18, 2018 10:36 AM, ""geodza"" <notifications@github.com> wrote:. > Well, as promised; > I had an opportunity to test Your script on a bigger amount of glasses.; > It seems that everything is fine; > I will now start a new project with a new staining, probably ~100 glasses,; > with analytics fully based on QuPath; > Still need to understand, how to analyse stroma in H&E staining :); > But anyway, I am really grateful for Your advice. If ill be able to; > publish my results, I will let You know!; > I`ll close this topic as the solution was found.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/157#issuecomment-374020816>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-UInIm1YbnApmIKVlfq9PPDSVpZfks5tfpsjgaJpZM4Sl4d_>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374022361:316,detect,detection,316,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374022361,1,['detect'],['detection']
Safety,"If you are referring to the core, that should be part of the ""Name"" column, or first column, in the detections measurements list (my first entry shows up as A-12 - Negative). If you want to apply the name of the TMA, you would have to do that when you import the other TMA patient data, I think.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289487421:100,detect,detections,100,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289487421,1,['detect'],['detections']
Safety,"If you are still running into problems, I would be interested in whether they also show up with a freshly opened QuPath instance (create ROIs, save and close, open, run cell detection). The tests in my last post showed that I could run a fairly large cell detection (570k cells) with only 2GB of RAM allowed, as long as it was the first thing I did after opening QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343607120:174,detect,detection,174,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343607120,2,['detect'],['detection']
Safety,"If you can provide more information about when it does/doesn't happen that would be helpful. Also if you have seen it across different versions of the software and different methods of generating detections (e.g. using the built-in cell detection instead). And also if it persists after restarting QuPath. Since you mention pixel classification, I wonder if it is still active in the background. (When v0.2.0-m10 becomes available you will be able to use VisualVM to profile it and see what might be causing slowdowns... but it doesn't work easily with v0.2.0-m9)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614159617:196,detect,detections,196,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614159617,2,['detect'],"['detection', 'detections']"
Safety,"If you could provide a screenshot of what you are looking at (cell detections/annotations+the classifier dialog) and a copy of the log (View->Show Log), that would help the troubleshooting a bit. Occasionally the classifier does run into errors and those show up in the log (unless that is what you meant by details).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418390877:67,detect,detections,67,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418390877,1,['detect'],['detections']
Safety,"If you don't have a huge number of cores, and could tolerate just manually annotating and deleting certain regions, that might be the easiest way... draw around the region you don't want (*after* detecting cells/superpixels or whatever your previous step was) and press *Backspace* to delete the annotation - and then choose *No* when asked about keeping descendent objects. Based on the description, my guess is you're using *Positive cell detection*. You might also try to create a classifier (as described [here](https://github.com/qupath/qupath/wiki/Classifying-objects)) and leave it up to the classifier to find the areas of carbon based on whatever features have been calculated; for example, you could assign classifications for *Carbon* and *Valid* (or whatever other category names you want to use). Then delete the carbon areas and reapply the positive/negative classifications using something like the following script:. ```groovy; carbon = getDetectionObjects().findAll {it.getPathClass() == getPathClass('Carbon')}; removeObjects(carbon, true); setCellIntensityClassifications('Nucleus: DAB OD mean', 0.2); ```. If this doesn't work well enough, then you can tell QuPath to calculate new features for each cell using *Analyze &rarr; Calculate features &rarr; Add intensity features (experimental)*; I'd suggest adding the mean values for red, green and blue as a starting point and see if that's enough. Otherwise, if you're able to provide an example image and say a bit more about what steps are involved in your analysis then maybe we can think of other ways.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/172#issuecomment-388539146:196,detect,detecting,196,https://qupath.github.io,https://github.com/qupath/qupath/issues/172#issuecomment-388539146,2,['detect'],"['detecting', 'detection']"
Safety,"If you upload a sample slide I could probably generate a sample script... but from the image it seems like either _Analyze->Region Identification->Positive Pixel Count_ within an annotation (you might try searching https://groups.google.com/forum/#!forum/qupath-users), or _Analyze-> Cell Analysis-> Cell Detection_ (https://github.com/qupath/qupath/wiki/Detecting-objects) with Optical Density chosen instead of Hematoxylin should give decent results. SLICs might also give you a simple way to detect area, and then if you add more measurements to them (Add Intensity Measurements) relating to texture (Haralick, etc) you might be able to automatically distinguish between tumor and stroma. If you want to play around with that, it's also under _Region Identification->Tiles and Superpixels_. https://github.com/qupath/qupath/issues/121 has an example.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372155003:355,Detect,Detecting-objects,355,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372155003,2,"['Detect', 'detect']","['Detecting-objects', 'detect']"
Safety,"If you use VisualVM then you should be able to find exactly what takes time. Thumbnail generation can't safely be done in parallel because there's no guarantee the images will be pyramidal, so there is a high risk of out of memory errors. That being said, I'm not certain thumbnail generation is the problem. If it's once per day, there could be some issue associated with update checking... but I can't see why that would be a problem and it wouldn't happen with the project is requested. VisualVM should resolve it one way or another in any case. One other thing: is there anything conventional about where the project/images are stored? The need for a reboot makes me think there could be an operating system component. I've never seen it myself and don't recall anyone having reported it before.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1325599611:104,safe,safely,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1325599611,2,"['risk', 'safe']","['risk', 'safely']"
Safety,"If you zoom in more, by default the brush will be effectively smaller and so it's easier to select a region without changing the shape. Of you change just switch to the *Move* tool to select another region by double-clicking on it, without any risk of changing its shape. You can toggle between tools by just pressing `M` and `B`. In general, you might find 'locking' annotations helpful - that helps avoid changing them accidentally, and also allows you to draw _new_ regions inside an existing annotation with the brush. To do so, select the annotation and then right-click on it, and choose *Annotations &rarr; Lock*. Finally, if you are doing a lot of painstaking annotations be sure to save regularly (*Ctrl + S*)... or consider trying the beta/pre-release version [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html). Installation is a bit more awkward, but it does provide (limited) undo support along with many other improvements - so may be worth it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/179#issuecomment-399201573:244,risk,risk,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/179#issuecomment-399201573,2,"['avoid', 'risk']","['avoid', 'risk']"
Safety,"ImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: IOException exception reading file:/Volumes/Storage/Work/SLIDESCANS/190512_OLYMPUS_YKA_Batch/CRUK_YKA_16.1D_tam_2_20190513.vsi#1: x=9728, y=34816, w=512, h=512, z=0, t=0, downsample=1; at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199); at java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:162); at java.base",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:7818,Detect,DetectionPluginTools,7818,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,2,['Detect'],"['DetectionPluginTools', 'DetectionRunnable']"
Safety,"In ImageJ it's quick, but as Pete mentioned, you can't actually save the file as a .nd2 file (unless there is a plugin that I do not know of!). If you use FIJI, you can save as an OME-TIFF, which will open with the Bio-Formats server, thus avoiding the threading problem (I think) that Pete mentioned above, so I would recommend that. Open FIJI/ImageJ, then File->Open your .nd2 file.; Then go to Image-> Properties, and change your XY pixel sizes to whatever you want.; ![change pixel size 1](https://user-images.githubusercontent.com/23145209/38470206-591f7e0c-3b14-11e8-8588-0952d4715b42.JPG); ![change pixel size 2](https://user-images.githubusercontent.com/23145209/38470212-5d7bdad6-3b14-11e8-97d9-586637de7659.JPG). Save as the OME-TIFF type, which for me was all the way at the bottom of the Save as... menu. I looked into a couple of other programs to try to edit the metadata while still keeping the file as .nd2, but did not have any success with nip or XnView. If you do convert, definitely keep both versions of the file! While the TIFF will have pixel sizes, it will not have most of the other metadata contained in the .nd2 files, such as microscope settings.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379565929:240,avoid,avoiding,240,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379565929,1,['avoid'],['avoiding']
Safety,"In OpenSlide we're working on some build system changes which may help here. OpenSlide Java has already been converted to Meson and OpenSlide will follow soon. Afterward I'm hoping to convert winbuild to a Meson project that can build a unified DLL with most of the dependencies statically linked, since Meson has good support for that. That could be a good starting point for doing similar builds for Linux and macOS. We've generally avoided putting OpenSlide Java into package managers so far. It's not really maintained and the API probably shouldn't be considered ""stable"" in its current form. I wasn't aware of JEP 424; thanks for the pointer. I've filed https://github.com/openslide/openslide-java/issues/50 to track possibly switching to it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1358055896:435,avoid,avoided,435,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1358055896,1,['avoid'],['avoided']
Safety,"In case this is still an issue for one of your projects, I think the best workaround would be to run each of the individual classifiers and the distance to detections right after it by script using. https://forum.image.sc/t/scripting-json-classifiers-in-qupath-0-2-0-m9/34614/2. followed by detectionCentroidDistances(). Both functions tend to run pretty fast, so it shouldn't be too problematic to write or run. *Note that if you run detectionCentroidDistances again after running the full classifier, that will overwrite things you don't want to overwrite, but as long as each of the base classes are named differently, the measurements should stack up nicely and independently.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/405#issuecomment-596597264:156,detect,detections,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/405#issuecomment-596597264,3,['detect'],"['detectionCentroidDistances', 'detections']"
Safety,"In the end it actually worked great - a substantial amount of the paper we are about to submit made use of positive pixel detection (QuPath is referenced!). Tau is normally more heterogenously shaped than pTDP-43, I don't use it routinely as I work on ALS. When using the positive pixel count tool I only quantified user-defined annotations, so I could choose where to place them and avoid any bits of crud on the slide. Tweaking the colour deconvolution for your DAB channel might help. If there's a lot of background I would try raising the primary Ab dilution. Regardless of the antibody, I find that incubating the primary overnight at 4'C pretty much always gives the best signal with minimal background. . Regarding the settings, I basically just played around with the parameters until I found settings that struck a balance between being specific enough and not taking too much time to complete after clicking run. I then copied the generated script and applied it to every section. Hope this helps!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391834425:122,detect,detection,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391834425,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"In the second video tutorial I talk about different cell detection parameters, and the impact they have on detection - this may help with optimizing the detection a bit further: https://petebankhead.github.io/qupath/2018/08/22/qupath-video-tutorials.html. It's hard to judge without seeing an example image, but it's quite possible that QuPath's generic cell detection isn't accurate enough for your application. In this case, it might require a custom detection method (e.g. with an ImageJ macro or script) to get the results you want, although that may involve a considerable amount of work and image processing. I'd definitely recommend exploring what can be achieved by adjusting the parameters first. For more information about setting cells as positive/negative (regardless of cell type), see https://petebankhead.github.io/qupath/tips/2018/03/22/setting-positive.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/231#issuecomment-431261059:57,detect,detection,57,https://qupath.github.io,https://github.com/qupath/qupath/issues/231#issuecomment-431261059,5,['detect'],['detection']
Safety,"Interesting, I can get the file, and when I look inside it, I see the same .qpdata structure as ones I have with only annotations, but when I load it there are no annotations. I am unsure if the reason I do not get any annotations is related to your problem, or something else related to regional settings/commas/periods. One last try before I leave this for Pete... sometimes cells can get trapped ""outside"" of the annotations, and you need to force an update. I honestly forget when this happens, but I have an example of it right now where the Annotations tab shows the annotation with no cells, and the Hierarchy tab shows the annotation at the top (but empty) and a list of polygons below it, all on the first level. In order to resolve the above case, you can either select and ""jiggle"" the annotation slightly, or to be more precise, use the following script to try and force it to update. Be aware it may seem to freeze if you have a large number of detections. For ~600,000 detections it took about 10-15 minutes on my fairly fast computer since it only runs on one CPU core. https://gist.github.com/Svidro/5829ba53f927e79bb6e370a6a6747cfd#file-force-update-selected-annotation-groovy",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365453095:958,detect,detections,958,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365453095,2,['detect'],['detections']
Safety,"Interesting, I hadn't seen that challenge. . I notice the image you reference is a jpeg. If that is the case, the min size is 5pixels? That seems rather small for defining a cell. I saw on the website a mention of the images being 40x. . The other settings in the watershed cell detection part of your script do suggest that you are running your detection in pixels.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-620678819:279,detect,detection,279,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-620678819,2,['detect'],['detection']
Safety,"It certainly is, although there are different methods for doing so. It mostly involves how much overlap you want your users to have in terms of annotations.; 1. Have all images on a server, and all QuPath projects on the client computers. This means each person will have access to the same images, but will not share any cell generation or annotations. Safest and easiest to set up, but probably least useful.; 2. Map the same network drive to the image location on all client computers (say, S: drive for your server), and use the same shared QuPath directory (say, Q: drive) created for each project on every computer. This would mean that every user would have access to all images and modifications done through QuPath, but there are some fairly heavy caveats here.; 2A. There is NO file copy protection AT ALL. All users would have equal access to overwriting the current .qpdata file, and for all I know, they might attempt to save two different versions at the same time, creating a mess. ; 2B. If your .qpdata files are large (can get up to 3GB or so fairly easily with SLICs) you may have network bandwidth problems accessing both images and data files. Actually, access to the images alone could be problematic depending on your hardware. Multiple users accessing data on a single hard drive through a 1gigabit network connection can cause slowdowns in refresh rate.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/100#issuecomment-328936155:354,Safe,Safest,354,https://qupath.github.io,https://github.com/qupath/qupath/issues/100#issuecomment-328936155,1,['Safe'],['Safest']
Safety,"It could be I was thinking of the pre-tiling days for cell detection, or maybe SLICs and subcellular detections on large images? And yes, I'm probably not typical :) Never used CZI images, so I have no idea about the effect of those. Anyway, giving a few things a shot. One thing I already noticed is that when I zip around an image and cap out the available memory that way, I tend to run into detection problems. However, as you say, this isn't a hardware memory limit problem, as I can lower the memory cap down to 2GB on a fairly large image (Annotation area 1.3x10^8 um^2) and have it run successfully, but slowly. If I fill up those 2 GB by looking around the image, though, it failed it's cell detection. Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.ut",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:59,detect,detection,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,4,['detect'],"['detection', 'detections']"
Safety,It depends what kind of object you added the features to - but you can create measurement tables with _Measure &rarr; Show annotation measurements_ or _Measure &rarr; Show detection measurements_ and save the results from either table. See also [Exporting results](https://github.com/qupath/qupath/wiki/Exporting-results) on the wiki.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/183#issuecomment-403232897:172,detect,detection,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/183#issuecomment-403232897,1,['detect'],['detection']
Safety,"It is possible, but depends on how regular the sequential sections are. I have seen it done before, but the registration was not done in QuPath. You can definitely take whole sets of objects and alter their position by translation and rotation, but determining how much of a translation and rotation are needed are somewhat up to you. In short, I would recommend finding an external solutions to match up your images as perfectly as possible, and then you can copy and paste your detections between images, and use ""Add Intensity Features"" for whole cell measurements [or a script ](https://gist.github.com/Svidro/68dd668af64ad91b2f76022015dd8a45#file-nuclear-and-cytoplasmic-color-vector-means-groovy) for cytoplams/nuclear measurements to generate values using the new image data. Further information, though much of it references each other.; https://github.com/qupath/qupath/issues/171; https://github.com/qupath/qupath/issues/162. A couple of posts on image registration in general.; https://groups.google.com/forum/#!searchin/qupath-users/registration%7Csort:date/qupath-users/5-JMvmCKRBo/6NeAyDwsBQAJ; https://groups.google.com/forum/#!searchin/qupath-users/registration%7Csort:date/qupath-users/VLJL6UCXqEk/lvu6LO0bBAAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/178#issuecomment-398618472:480,detect,detections,480,https://qupath.github.io,https://github.com/qupath/qupath/issues/178#issuecomment-398618472,1,['detect'],['detections']
Safety,"It looks like OpenSlide may need to be recompiled (maybe with a different libtiff) to handle these files. In the meantime, it should be possible to get QuPath to use an alternative version of OpenSlide by removing the OpenSlide-related files from QuPath, and amending the ```java.library.path``` used when launching QuPath if needed. I do not have much experience of handling native libraries with Java on Linux, but Issue #27 may be of some use for reference. Basically you can launch QuPath from the command line and set ```-Djava.library.path``` or modify the ```QuPath.cfg``` file. If you would prefer to avoid this, as a shortcut do either of these two methods work?. * Install the Bio-Formats extension, as described [here](https://github.com/qupath/qupath-bioformats-extension), to use Bio-Formats as an alternative; * Copy ```libopenslide.so.0``` from your working OpenSlide distribution to replace the corresponding file in your QuPath installation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/65#issuecomment-296463668:609,avoid,avoid,609,https://qupath.github.io,https://github.com/qupath/qupath/issues/65#issuecomment-296463668,1,['avoid'],['avoid']
Safety,"It may work if it is 8-bit RGB (i.e. three channels), and does not use JPEG-XR compression. However if the original data is 16-bit, or has more channels, then there is the risk of a considerable loss of information on conversion. It would be fantastic if the company behind the format could offer a solution - ideally through Bio-Formats (since QuPath and many other software applications already support Bio-Formats). Otherwise, it is sadly the case that people depending on certain scanners using proprietary file formats may not be able to analyze their data with QuPath, or open source tools.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-406624163:172,risk,risk,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-406624163,1,['risk'],['risk']
Safety,"It seems like the easiest way to resolve the minor issue would be swapping the for loop/tiles to detections, if that works with the imagewritertools.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/62#issuecomment-293124108:97,detect,detections,97,https://qupath.github.io,https://github.com/qupath/qupath/issues/62#issuecomment-293124108,1,['detect'],['detections']
Safety,"It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:; ```groovy; // Print the current memory situation; def runtime = Runtime.getRuntime(); double scale = 1.0/1024.0/1024.0; print 'Max memory (MB): ' + (runtime.maxMemory() * scale); print 'Total memory (MB): ' + (runtime.totalMemory() * scale); print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache; javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }; ```. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355845333:1462,detect,detection,1462,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355845333,1,['detect'],['detection']
Safety,"It sounds like maybe you used *Create tiles* or one of the superpixel commands?. If so, these don't produce any features/measurements by default, as required by the classifier. You can add some by running *Analyze &rarr; Calculate features &rarr; Add intensity features*.; But be warned... you generally need to choose the *Process all: Detections* option after you press *Run*. Otherwise the features might be calculated for something else (e.g. the annotation containing your tiles/superpixels... but not the tiles/superpixels themselves).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-293362848:337,Detect,Detections,337,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-293362848,1,['Detect'],['Detections']
Safety,"It sounds like the QuPath window only is being shared, but not the entire screen - and you need to share the entire screen for it to work. I use a Mac myself, and I find I always need to share the entire screen if I want to demo something in QuPath and have all the windows appear. I also avoid using full screen mode with QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/693#issuecomment-812052355:289,avoid,avoid,289,https://qupath.github.io,https://github.com/qupath/qupath/issues/693#issuecomment-812052355,1,['avoid'],['avoid']
Safety,"It sounds like you need a simple, one-line script that contains your settings. QuPath should already record these settings for you under the 'Workflow' tab. Double-clicking an entry there should open/run the corresponding command with the appropriate settings... but this is only available for commands you've already run for the current image. To transfer settings across an image, press *Create script*. The automatically-generated script will probably contain too many lines, but you can simply delete the ones you don't want; for example, just keep the last line if the last thing you did was run the cell counting algorithm. The script you end up with probably looks something like this:; ```groovy; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');; ```. You can then save this as a file with the extension ```.groovy``` and drag it onto QuPath again to open it. Press *Run &rarr; Run* from the top menubar to apply it. There is some more information under https://github.com/qupath/qupath/wiki/From-workflows-to-scripts",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/105#issuecomment-333905568:730,detect,detect,730,https://qupath.github.io,https://github.com/qupath/qupath/issues/105#issuecomment-333905568,2,['detect'],"['detect', 'detectionImageBrightfield']"
Safety,"It will only show up when your pixels have a size. Your previous post showed that your images were missing metadata indicating what size each pixel was, so that option would not have been useful. Also, it is essentially a downsampling option, to make the cell detection run more smoothly.; https://www.youtube.com/watch?v=Hh-53Uqik-Y; Another description:; https://forum.image.sc/t/qupath-intro-choose-your-own-analysis-adventure/27906/12. Finally, questions like this should be directed to the forum, not the issues page.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/357#issuecomment-527537199:260,detect,detection,260,https://qupath.github.io,https://github.com/qupath/qupath/issues/357#issuecomment-527537199,1,['detect'],['detection']
Safety,"It would help to have the script to go off of, but there's a good chance you aren't selecting the annotation as part of the script (before running cell detection). I am not sure why your annotation export would contain no results if you have annotations. More info!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/268#issuecomment-467658427:152,detect,detection,152,https://qupath.github.io,https://github.com/qupath/qupath/issues/268#issuecomment-467658427,1,['detect'],['detection']
Safety,"It would help to see your Workflow script, as I am not really sure what you mean in your first paragraph. Perhaps you were using the Points Tool?. It also sounds like you might be running into a lack of memory error, but I don't have enough information about your computer to help there either. QuPath requires significant resources (RAM) to run large scale cell detections and the program is failing to run Positive cell detection might indicate a problem there. Another possibility is that by default it only runs the cell detection on the ROIs that you have selected. If you want to run Positive cell detection on everything, you would need to make sure you have either nothing or everything selected.; I'm not sure I can be much more help without your [Workflow](https://github.com/qupath/qupath/wiki/Workflows) or more exact information about the steps you took.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342841570:363,detect,detections,363,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342841570,4,['detect'],"['detection', 'detections']"
Safety,"It's definitely not too basic a question... I haven't personally needed anything quite like this, and unfortunately can't think of any really elegant way to do it currently. However, I think it should be possible in an inelegant way. This is how I would suggest:. * First unlock you annotation (it’s locked by default during simple tissue detection). Either select it, right click and choose *Annotations &rarr; Unlock*, or else run the following script to unlock all annotations in the image. ```groovy; getAnnotationObjects().each {it.setLocked(false)}; ```. * Create separation lines using the brush tool with the 'Alt' key pressed (to put it into eraser mode). This won't entirely solve the problem, because the resulting split region will still be treated as one 'object' - giving one set of measurements, and taking one classification… but it’s a start. * Split the multi-part (area) annotation into separate polygons. The following script should do this (be sure to save your data before trying it, in case it doesn’t give the result that you want). ```groovy; import static qupath.lib.roi.PathROIToolsAwt.splitAreaToPolygons; import qupath.lib.roi.AreaROI; import qupath.lib.objects.PathAnnotationObject. // Get all the annotations; def annotations = getAnnotationObjects(). // Prepare to add/remove annotations in batch; def toAdd = []; def toRemove = []. // Loop through the annotations, preparing to make changes; for (annotation in annotations) {; def roi = annotation.getROI(); // If we have an area, prepare to remove it - ; // and add the separated polygons; if (roi instanceof AreaROI) {; toRemove << annotation; for (p in splitAreaToPolygons(roi)[1]) {; toAdd << new PathAnnotationObject(p, annotation.getPathClass()); }; }; }. // Perform the changes; removeObjects(toRemove, true); addObjects(toAdd); ```. * Set a classification for each new polygon, to help identify it later. * If you do not need/want to do a cell analysis, try *Analyze &rarr; Region identification &rarr; Positiv",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/99#issuecomment-328360122:339,detect,detection,339,https://qupath.github.io,https://github.com/qupath/qupath/issues/99#issuecomment-328360122,1,['detect'],['detection']
Safety,"It's definitely possible, as long as each annotation is of some manageable size (which it is here). A couple of blog posts are relevant:; * https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html; * https://petebankhead.github.io/qupath/scripting/2018/03/07/script-extracting-image-regions-to-imagej.html. For the first one, you can remove the `ImageIO.write(imgMask, 'PNG', fileMask)` bit if you don't need a binary image (which wouldn't be very meaningful here...). For the second you'd need to uncomment the `//IJ.save(imp, '/path/to/save.tif')` part, choose a sensible output name, and avoid showing the image through ImageJ. It should be possible to _Run &rarr; Run for project_ in both cases, so long as your image files all have distinct names. A recent script from Sara might help too: https://groups.google.com/d/msg/qupath-users/aHcikTZF9HE/dkcn0BoFBwAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/233#issuecomment-431887783:632,avoid,avoid,632,https://qupath.github.io,https://github.com/qupath/qupath/issues/233#issuecomment-431887783,1,['avoid'],['avoid']
Safety,"It's hard to tell much here without a clearer idea of what 'a lot of rather large and complex annotations' means, but it may very well be that there are too many vertices that that slows down the rendering too much (on the JavaFX application thread, same as the menus and rest of the GUI). If so it isn't really a bug, but more pushing QuPath with a different application than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences in object types, and why it's not really intended to have very large numbers of annotations. You might try having fewer vertices somehow, perhaps with _Objects &rarr; Simplify annotation shape_ or splitting larger annotations into smaller ones (since annotations outside the field of view do not need to be rendered). Or write a script that periodically converts annotations you won't need to change any more into detections. Or try to leave parts of the image that are particularly complex _unannotated_, and then interpret the unannotated region appropriately later. (I was actually looking into this today for completely different reasons, and may be able to improve the annotation handling somewhat... but it doesn't help you now)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461569891:920,detect,detections,920,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461569891,1,['detect'],['detections']
Safety,"It's not totally clear to me whether this is something best approached using QuPath or Fiji. Factors to consider would be:. * Is there a DAPI channel? If so, QuPath's cell detection could give a head start.; * Is 'detecting peaks in each color channel' a suitable way to determine whether a cell is positive? This would depend on whether the staining is localized in each cell (e.g. in the nucleus, or dispersed elsewhere).; * Are you using (part of) a whole slide image?. Apart from that, [this ImageJ forum post](http://forum.imagej.net/t/counting-double-labeled-cells-in-fiji/3832/2?u=petebankhead) might help to get started.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/98#issuecomment-327718940:172,detect,detection,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/98#issuecomment-327718940,2,['detect'],"['detecting', 'detection']"
Safety,"It's tempting, but it feels risky. The choice of `round` and `floor` when converting pixel coordinates has been problematic in the past, e.g. see https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089. I'm not 100% sure, but I think switching this behavior could break or confuse other things whenever we want to try to ensure we obtain a consistent image size.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1528#issuecomment-2124476822:28,risk,risky,28,https://qupath.github.io,https://github.com/qupath/qupath/pull/1528#issuecomment-2124476822,1,['risk'],['risky']
Safety,Ive just downloaded and re-installed on my mac and its working now! What a pallava! I think I was tried to add extensions on the mac where they weren't needed and it seems to be working now. Ive just had a look at some tissue detections and it seems to be functional! I will continue using the software and would you mind if I checked in again if I continue having problems?. Thank you again,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/135#issuecomment-357061650:226,detect,detections,226,https://qupath.github.io,https://github.com/qupath/qupath/issues/135#issuecomment-357061650,1,['detect'],['detections']
Safety,"I’ve tried to replicate this, but couldn’t (albeit on my Mac). Which platform are you running on?. There can indeed be trouble when trying to save very large detection measurement tables; a String is generated first then written to a file. The rationale was that this meant the same code could be used to generate data for copying to clipboard... but if the String ends up exceeding the maximum length permitted by Java, then it fails. Anyhow, I understand that's not the trouble here. Does it make any difference is you save the detections first, then the annotations?. The option of last resort is probably to just write the export code operating on the detections directly. That would at least give maximum flexibility, and should be reasonably concise with Groovy. If you decide to go that way the following might help:; ```groovy; def fileOutput = new File(buildFilePath(PROJECT_BASE_DIR, 'detections.txt')). // Get the detections; def detections = getDetectionObjects(). // Get the names, in an ordered set; def names = new LinkedHashSet<>(); detections.each {names.addAll(it.getMeasurementList().getMeasurementNames())}. // Loop through objects & names; fileOutput.text = String.join('\t', names); df = new java.text.DecimalFormat('#.###'); detections.each { detection ->; // Map measurements for the object to a suitably-formatted string; def values = names.collect({name -> df.format(detection.getMeasurementList().getMeasurementValue(name))}); fileOutput << String.join('\t', values) << System.lineSeparator(); }. print 'Done!'; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357019559:158,detect,detection,158,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357019559,10,['detect'],"['detection', 'detections']"
Safety,"JC02UjlE2keamNPfGPyTA13hxoJ6aI6fRjs8P6PPD3ag1gjsZJuHqXh28XIp9ClIy6uiD9WiE2a29pnEogefoBAUSjm8iBfMR0HcxqAtG_TdnAk0f4Y8BA4E5sVwzFhbDhm_alns-l7jx4c65825lN1brlaamgEFYOcr-bx0yB5-ONuFLKVRdD6nCGWcI1iPAsoohE7nnVhyPIYtURWpKQ/https%3A%2F%2Fgithub.com%2Fsuzeteguarda> you could try posting your question on the forum at https://forum.image.sc/tag/qupath<https://secure-web.cisco.com/13_E9lRMQxY8xtZmKYPnw2mmwaiElPiHzTIMUOwQH_-6FzgRz4LkCsf_cFjrfUWLwo9750a0MmRr_eXTVN0eusQkomn-qYLuoCcVIKhtD0lyGLisH8Fxc-WFZwGzOR3GcJ4WLvQ2nVTFF7JEFSGly69C9pq9zGxJ69U6IM5ck9ofp9vkUV14NNMWH0h1u9pMUi3qXwaLEHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:2567,avoid,avoid,2567,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['avoid'],['avoid']
Safety,JPEG export; I can confirm the 'small issue'.; It is fixed with a sanity check in build().; @petebankhead Do you think this is suitable?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/688#issuecomment-811887705:66,sanity check,sanity check,66,https://qupath.github.io,https://github.com/qupath/qupath/pull/688#issuecomment-811887705,1,['sanity check'],['sanity check']
Safety,Just in case that's useful (I may be late...) I use a readerpool in bigdataviewer-bioformats. I used the class from here:. https://www.dbtsai.com/blog/2013/java-concurrent-dynamic-object-pool-for-non-thread-safe-objects-using-blocking-queue/. It's working great so far. One thing to take care of is to put tile reading in between a `pool.acquire()` and `pool.recycle(reader)` statements:. https://github.com/BIOP/bigdataviewer-bioformats/blob/bfb48be52694ffebaa03fbbe6339ac509aab66ea/src/main/java/ch/epfl/biop/bdv/bioformats/bioformatssource/BioFormatsBdvSourceUnsignedShort.java#L119-L157,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1001474808:207,safe,safe-objects-using-blocking-queue,207,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1001474808,1,['safe'],['safe-objects-using-blocking-queue']
Safety,"Just to get things started, you do not need to select anything before saving! I always have those two commands at the end of my scripts, and they are not related to what has been selected, it is just a full list of everything that shows up when you look in ""Show detection measurements"" or ""Show annotation measurements"" in the Measure menu. I wonder if you remove the selectDetections if maybe that will help things, since selecting all of the detections might cause a slowdown that messes up the save measurements command. You also might try the guiscript=true command at the top of your script, which seems to help some of the cases where the script doesn't allow a command to finish before trying the next one. Is it generating one file for every slide image?; Could you show us the part of your script where outDetectionsStatFname is created?. The only issues I have ever had with the saveDetectionMeasurements were when the output was over 2GB, and it doesn't sound like the issue here, so I am not sure what is happening.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357000908:263,detect,detection,263,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357000908,2,['detect'],"['detection', 'detections']"
Safety,"Last commit avoids showing all the extra color transforms if the `ImageType` is `FLUORESCENCE`. This makes the behaviour of RGB and non-RGB fluorescence images consistent *except* with the limitation that channel colors cannot be adjusted for RGB images: they remain fixed to red, green & blue. However, the same transforms are displayed in the Brightness/Contrast dialog and channel names can be changed. Hopefully this is an improvement on the situation in v0.5.x and before, where channel names were fixed and many (usually irrelevant) 'channels' were displayed in the dialog. Screenshots below show the color is unavailable, while the name can be set. If the transforms are desirable, but the images aren't brightfield, then the `ImageType` can be set to `OTHER`. ### With `ImageType.FLUORESCENCE`; <img width=""330"" alt=""Renaming 'FLUORESCENCE' image"" src=""https://github.com/user-attachments/assets/eda6e7c6-c508-4364-9211-3c41f034d47d"">. ### With `ImageType.OTHER`; <img width=""330"" alt=""Renaming 'OTHER' image"" src=""https://github.com/user-attachments/assets/8014d5e8-9e11-481b-b69d-c74baa4fe309"">",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1659#issuecomment-2382998283:12,avoid,avoids,12,https://qupath.github.io,https://github.com/qupath/qupath/pull/1659#issuecomment-2382998283,1,['avoid'],['avoids']
Safety,"Latest commit adds more options to restrict where live pixel classifier prediction is calculated. Previously, it could be restricted to annotations - but using their full bounding box. This could sometimes still result in very large regions being processed. ![annotations_bounds](https://user-images.githubusercontent.com/4690904/195979231-ee656727-83dd-4569-80d7-318beb8c4c6f.png). Now it's also possible to restrict using the annotation ROI directly (i.e. the ROI shape intersects the tiled region that may be processed). This can reduce the amount of processing required substantially in some cases. ![annotations_only](https://user-images.githubusercontent.com/4690904/195979232-ef0c6862-d715-47b9-a022-0f4267f1c47c.png). Both options still exist, since the more complex calculations to restrict the predicted regions could *potentially* slow things down in some cases.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279704970:72,predict,prediction,72,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279704970,2,['predict'],"['predicted', 'prediction']"
Safety,"Merged now - alongside https://github.com/qupath/qupath/pull/975 this should resolve the issue with labeled image export in two ways: avoiding 'smooth' (area averaging) interpolation when it shouldn't be used, and fixing its behavior for integer images when it is used. https://github.com/qupath/qupath/issues/961 should be handled later in a separate PR. Thanks again for the bug report and PR!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/964#issuecomment-1142018795:134,avoid,avoiding,134,https://qupath.github.io,https://github.com/qupath/qupath/pull/964#issuecomment-1142018795,1,['avoid'],['avoiding']
Safety,"Mmh yes and no.; Git must have added the renaming of my local `ViewTrackerAnalysisCommand.java` to the commit somehow, which will probably be part of a future commit.. I'll close this PR and re-open it without the file renaming (to avoid weird behaviour).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/558#issuecomment-659502340:232,avoid,avoid,232,https://qupath.github.io,https://github.com/qupath/qupath/pull/558#issuecomment-659502340,1,['avoid'],['avoid']
Safety,"More specifically for the coherence features, OD sum (you can have an OD sum sum, if you add up the total of each pixel's OD sum value, as opposed to the OD sum mean which is the average of each pixel's OD sum) will be the total optical density, and the tile diameter appears to be a circle/square around the centroid of the detection. Here I ran the coherence twice on OD sum where i had a very dark center of the cell. Notice that the sum/mean go up as I shrink the ""tile"" size to only fit inside the nucleus.; ![coherence](https://user-images.githubusercontent.com/23145209/42643926-29b98578-85af-11e8-9c33-385e5588d7e3.JPG); The most dramatic change is in the minimum, once the entire tile would fit inside of the dark ""nucleus."". In general you might want to use that instead of smoothing, if you want ALL of the pixels around a detection out to a certain distance included in the measurement (tissue based measurements).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-404557901:325,detect,detection,325,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-404557901,2,['detect'],['detection']
Safety,"Most things are possible with a (possibly-complicated) script, but there is no easy way to do what you describe in QuPath. Detecting positive and negative cells in different images and combining the results could potentially cause practical problems in terms of partially overlapping cells, which might have differing positive/negative classifications depending upon staining localization and intensity... resulting in a confusing or unexpected result. Therefore, to avoid this situation, it is not supported. I would suggest applying your detection using optical density sum, but adjusting the other parameters to try to obtain a better result. In particular, . * Increasing/decreasing 'Threshold' under *Intensity parameters*; * Either increasing 'Background radius', or setting the value to zero (to eliminate background subtraction altogether) - this is mostly relevant if the cells in the image is particularly large or densely-packed. Use of the brightness/contrast tool (as described [here](https://github.com/qupath/qupath/wiki/Changing-colors#the-brightnesscontrast-tool)) to separate stains, along with the pixel intensity values shown in the bottom right of the viewer, can help figure out appropriate values for the intensity threshold. This can also help you see how cleanly the hematoxylin and DAB have been separated. If the stain separation is not particularly good, the documentation on [Estimating stain vectors](https://github.com/qupath/qupath/wiki/Preprocessing#estimate-stain-vectors) and [CD3 analysis](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis#estimate-stain-vectors-watch) show how this may be improved. Your other option for Ki67 would be to use *Fast cell counts* - as documented for [CD3](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis). This gives another method of detection that may sometimes perform better (and sometimes less well). But since it only creates a single point for each cell (rather than detecting the full cell), it is best used for ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-275932246:123,Detect,Detecting,123,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-275932246,3,"['Detect', 'avoid', 'detect']","['Detecting', 'avoid', 'detection']"
Safety,"My experience with ISH makes me prefer straight measurement of estimated spot count versus using or creating H-scores. Sets of numbers representing+1 to +4 can be useful to distinguish populations with both high and low members versus a medium number of spots, but once you want to compare samples by a single number you might be better off with the spot count Mean/Median/Standard deviation, since those are all probably one or two lines of code. Plus I am not sure how well the new version of the H-score would compare to older publications, even if the math was adjusted to a 0-300 scale. I second using the Brightfield (other) when eliminating yellow areas like that for brightfield ISH. Sometimes once you have enough colors, though, you have to apply multiple sets of measurements to the ISH spots (select the subcellular detections, pick your color vectors, Add Intensity Measurements), and then filter them in a script, and update a ""Filtered Red Estimated Num spots"" or something like that. Two color brightfield ISH with red blood cells in the background gets to be a real pain. For a first pass you could try moving the color vectors in Estimate color vectors to something like :; ![image](https://user-images.githubusercontent.com/23145209/36652180-ed8010a8-1a61-11e8-8d09-d639962fd706.png); One vector picks up as much red as possible, and one to get ""the rest"" of what is in your sample. They do not need to be the same as when you did the cell detection. Picking up Groovy isn't bad if you understand programming basics like variables, if/for loops, etc. The main trick (for me) is learning the QuPath specific functions to use, and making use of either Gists, the forums, or IntelliJ to figure out how doable my plans actually are! I mostly just modify other people's scripts. I'm trying to fill out some of what I have learned in my Gists as I go along. On the image, it looks like you are missing quite a few of the smaller spots. If that isn't intentional, I would try turning off a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368380554:828,detect,detections,828,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368380554,1,['detect'],['detections']
Safety,Nested record patterns seem a feature I would rather avoid,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1603#issuecomment-2311817615:53,avoid,avoid,53,https://qupath.github.io,https://github.com/qupath/qupath/pull/1603#issuecomment-2311817615,1,['avoid'],['avoid']
Safety,"No problem, glad it's fixed! I'll close the issue. Yes, sometimes it's not entirely clear even to me whether some commands require selecting annotations or detections. I don't recall exactly what I was thinking when I wrote it, but the idea may have been that it operates on the detections *within* specific annotations... i.e. not indiscriminately merging detections regardless of the annotations they are inside. This makes some sense if you have multiple pieces of tissue as different annotations and don't want a single disconnected region to be generated that spans across them. The best way to find out what should be selected is to run the command without anything selected at all. The popup dialog should then only give you valid options (here, *Annotations* or *Entire image*).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704#issuecomment-816710295:156,detect,detections,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/704#issuecomment-816710295,3,['detect'],['detections']
Safety,"No problem, it is also challenging to advise correctly without having the full image, so thank you for that!; Changing channels should be possible with the 1/2/3/4 keys, but you can only do this once you have picked color vectors. They do not update ""live."". I am not sure what you mean by question 2, but hopefully the script below improves things for you, and I am sure if you play around with the values you can improve it even further!. Here is what I came up with for settings that seem to work for cell detection in the main bulk of your tissue:; ```; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""red blue"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.18752 0.65887 0.72851 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.72191 0.55664 0.41109 "", ""Background"" : "" 255 255 255 ""}');; selectAnnotations();; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.27, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 2.0, ""minAreaMicrons"": 30.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.6, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: DAB OD mean"", ""thresholdPositive1"": 0.4, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');; ```; ![image](https://user-images.githubusercontent.com/23145209/50290376-79864380-0439-11e9-86dc-7b4375cee119.png); ![image](https://user-images.githubusercontent.com/23145209/50290399-873bc900-0439-11e9-937b-7dc5c5ce1139.png). A couple of things to note about this, some cells in certain sections of your sample are so dark that they basically show up as all colors. That makes them very difficult to distinguish, although it might be possible to exclude them or classify them as a third type if it is important enough. The script ab",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/250#issuecomment-449019237:509,detect,detection,509,https://qupath.github.io,https://github.com/qupath/qupath/issues/250#issuecomment-449019237,3,['detect'],"['detect', 'detection', 'detectionImageBrightfield']"
Safety,"No, see for example https://github.com/qupath/qupath/issues/122 and also [this blog post](https://petebankhead.github.io/qupath/2019/08/21/scripting-in-v020.html#serialization--json). > **Please avoid creating issues for anything other than bug reports; use [the forum](http://forum.image.sc/tags/qupath/) instead.**; > ; > <img width=""696"" alt=""Issues"" src=""https://user-images.githubusercontent.com/4690904/71262757-5afea500-2338-11ea-8c14-91f68652c70b.png"">",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/390#issuecomment-567951991:195,avoid,avoid,195,https://qupath.github.io,https://github.com/qupath/qupath/issues/390#issuecomment-567951991,1,['avoid'],['avoid']
Safety,"Not all commands currently show up in the workflow viewer. You would almost certainly want something like selectAnnotations() before your watershed cell detection (unless you want to manually select something before you run the script), and runClassifier(""classifierlocation"") for the classification. More on that here:; https://groups.google.com/d/msg/qupath-users/dgAabXK0eBU/W4Ex4KiQDAAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/272#issuecomment-469470464:153,detect,detection,153,https://qupath.github.io,https://github.com/qupath/qupath/issues/272#issuecomment-469470464,1,['detect'],['detection']
Safety,"Not currently... do you think off is a better default? My thinking is that:. * names often aren't used (might be different for you); * most people won't know names can be displayed at all if they are not revealed by default; * pressing `n` doesn't cost much. It might well become persistent in the next release, but for now it's not worth the risk of getting it wrong and introducing late bugs.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/499#issuecomment-632639493:343,risk,risk,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/499#issuecomment-632639493,1,['risk'],['risk']
Safety,"Not entirely sure what you are looking at or want to accomplish, but maybe these will help:; https://github.com/qupath/qupath/issues/126; Using subcellular detections, and expanding on the current classification setup:; https://github.com/qupath/qupath/issues/146. In general, it sounds like you will want to use some sort of subcellular detection, and then classify based on the number or total intensity of subcellular objects?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-400041117:156,detect,detections,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-400041117,2,['detect'],"['detection', 'detections']"
Safety,"Not sure if this is what you are interested in, and I only did a quick run at different types of measurements, but I:; 1. Converted the image to a tiff so that I could have pixel measurements (necessary for Subcellular detections); 2. Created a whole image annotation; 3. Converted that into a cell; 4. Fixed up my color vectors and ran a subcellular detection on DAB (did not really do a great job there); 5. Add Intensity Features-most of them; Found that the residual did a decent job of picking out what I think are the extraneous black dots. I imagine there are better color vector sets that you could use to identify those areas, and eliminate them from analysis. Not sure if this is what you are looking for though before I go too crazy with it.; ![image](https://user-images.githubusercontent.com/23145209/40504972-bc8c1fd4-5f47-11e8-8377-630411164e51.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391819273:219,detect,detections,219,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391819273,2,['detect'],"['detection', 'detections']"
Safety,"Not sure, it looks like you could mean two different things. I don't think you can really turn the superpixels into pathCellObjects since there is no nucleus/cytoplasm, though you could possibly use the XY centroids of each superpixel, create a small circle there, and then convert it plus it's parent superpixel into a cell. Alternatively, if you want to run cell detection, you should be able to selectAnnotations(); and then run your cell detection command. Sum the results in the annotation tab, or use a script to select only the annotations of a particular class and then use mergeSelectedAnnotations();; See here: https://gist.github.com/Svidro/8f9c06e2c8bcae214cdd7aa9afe57c50#file-a-selection-guide-groovy; That could at least get you one annotation per class, and make it easier to read out the results. Another option might be to generate all of the cells and then classify them by their parent annotation's class. Might need an image or something to be more help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/261#issuecomment-458183899:365,detect,detection,365,https://qupath.github.io,https://github.com/qupath/qupath/issues/261#issuecomment-458183899,2,['detect'],['detection']
Safety,"OK, so should I discard the PR? If this is the only issue occuring with `NumericMeasurementList`, it means that this class doesn't have to be thread-safe, so performance can be saved by keeping the current implementation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943759245:149,safe,safe,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943759245,1,['safe'],['safe']
Safety,"OK, the code left is just the middle button, without side-to-side tool selection and without the debounce code. One [comment I left in](https://github.com/qupath/qupath/pull/1037/files#diff-fd4ad143f25db1ea49822496a62940abb1e550675d0a394acb80298892dbf7e8R1079-R1081) is this:. > // As part of MouseEvent.ANY, both MOUSE_RELEASED and MOUSE_PRESSED can be generated (and detected) separately, so maybe worth adding MOUSE_RELEASED to ignoreTypes?. For me, pressing the middle button quickly is what generated extra MOUSE_RELEASED events, which would then need to be filtered somewhere within ; ```; 		stage.getScene().addEventFilter(MouseEvent.ANY, e -> {; 		}; ```; Instead, I added `MouseEvent.MOUSE_RELEASED` to your `ignoreTypes` but left [the original line](https://github.com/qupath/qupath/pull/1037/files#diff-fd4ad143f25db1ea49822496a62940abb1e550675d0a394acb80298892dbf7e8R1080) commented out. If this is OK, I'll remove the line and amend my comment to mention `MouseEvent.MOUSE_RELEASED` is to do with pressing the middle button multiple times.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1313413034:369,detect,detected,369,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1313413034,1,['detect'],['detected']
Safety,"Oh dear, sorry, I see now I didn't reply to this (although I was away from QuPath at the time and I think we discussed it elsewhere...). I recall at the time I wondered about how this would impact supporting RGB/non-RGB images with the same command and also maintaining scripting compatibility. In the meantime, the code has diverged rather a lot and other issues with _Simple Tissue Detection_ have emerged, e.g.; * https://github.com/qupath/qupath/issues/124; * https://github.com/qupath/qupath/issues/248. I'm reluctant to try to resolve the code conflicts to incorporate this small change that may complicate scripting compatibility whenever it looks like the whole simple detection command really needs a thorough overhaul. There are now also other ways to gain more control over tissue detection, e.g.; * https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html; * the pixel classifier (not yet complete, but I hope it will become a 'standard' way). The pixel classifier is also being designed to support different kinds of classification, which could eventually also include a simple threshold applied to an original or transformed image. It has the benefit of allowing the classification to be applied at a higher resolution through tiling, and to interactively show preliminary results (e.g. with a threshold slider). I think that this is needed in the longer term, and _Simple tissue detection_ will move into retirement. Sorry again for not replying here sooner. If this change is still of interest to you, please feel free to reopen the issue. To integrate it, we'd need to; * update the code to be compatible with the current codebase; * test the impact on scripts created before/after the change",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-518571384:677,detect,detection,677,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-518571384,2,['detect'],['detection']
Safety,"Oh no, please keep the PR for now!. I'll check it out in more detail soon - but you've demonstrated that there is a concurrency bug with the measurement list. It just wouldn't have arisen if the Delaunay command wasn't buggy too. Similarly, the performance probably wouldn't have changed noticeably if the Delaunay command wasn't problematic... so this may not be a major issue in other contexts. One thing to check would be 'Add smoothed measurements' with lots of cells, since this should add a lot of measurements in parallel - but I think only one thread should be accessing each measurement list. Therefore I hope synchronization doesn't cause substantial overhead. . In any case, I think `MeasurementList` implementations *should* be thread-safe - so we should address this in either v0.5.1 or v0.6.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771:747,safe,safe,747,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771,1,['safe'],['safe']
Safety,"Oh, definitely not too complicated, as we don't really know what the rest of the slides look like. Your method is far more robust, and if there are other dark blotches or other unwanted clumps of cell pellets/detritus on the images, a classifier would be able to pick that up, while simple tissue detection will simply look for ""anything"" that is ""dark."" . It does go to show how QuPath has multiple ways to accomplish the same task though, depending on your needs!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349101867:297,detect,detection,297,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349101867,1,['detect'],['detection']
Safety,"Oh. I think I see... though I am not certain of how easy that will be. One thing to look into is smoothed measurements. _Analyze->Calculate features->Add smoothed features_. As long as your hotspots are roughly the same size, you should be able to get a smoothed measurement that peaks in small subsets of cells at the ""center"" of your hotspot. Unfortunately, I am not sure how to proceed from there without some kind of data. I am thinking you could perform a cluster analysis in R based on the XY coordinates.. or maybe a classifier. I am pretty sure there is no built in way for QuPath to handle this, but it sounds like the sort of thing that could definitely be done with scripting. Without scripting, you could do the _Add smoothed features_, and then _Measure->Show measurement maps_ and select one of your smoothed features (you may be able to do this without the smoothing, depending on your data/images). You should be able to visually find the hotspots, and could then use the ""Points tool"" to mark the center of each hot spot manually. Adding a different classification of spot for each type of marker would get you a set of points of various classifications, which you could then use to compare distances. If your images are fluorescent, and you can split the channels, you might be able to run simple tissue detection on each individual channel to get centroid coordinates for hotspots (sufficient gaussian blur). Also, if you were to simplify the question to ""how many immune cells are within X um of my hotspot"" you could generate the annotation, import it, then _Objects->Expand Annotations_ and count how many immune cells are within that expanded annotation (which could all be automated). It would no doubt be a bit trickier than that if you are dealing with overlapping hotspots. There may be other ways as well, but that's be best first stab going in blind.; If you are able to open a thread on the forum or share an image I might be able to be more specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-400134063:1322,detect,detection,1322,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-400134063,1,['detect'],['detection']
Safety,"Ok first i ran this script in Qupath. selectAnnotations();; getDetectionObjects() each {detection -> detection.setName(detection.getParent().getName())}; removeMeasurements(qupath.lib.objects.PathCellObject, ""Cell: Channel 1 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 std dev"", ""Nucleus: Channel 2 max - Smoothed (FWHM 25 µm)"", ""Cell: Eccentricity"", ""Cytoplasm: Channel 4 mean"", ""Nucleus: Eccentricity"", ""Cell: Channel 3 min"", ""Cell: Channel 1 min"", ""Cell: Circularity - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 mean"", ""Cell: Channel 4 std dev"", ""Nucleus: Channel 3 range"", ""Cytoplasm: Channel 4 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 sum - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 range - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 range - Smoothed (FWHM 25 µm)"", ""Nucleus: Circularity - Smoothed (FWHM 25 µm)"", ""Cell: Channel 3 max"", ""Cytoplasm: Channel 4 std dev"", ""Nucleus: Channel 1 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 min"", ""Nucleus: Channel 4 mean - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 min"", ""Nucleus: Max caliper - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 sum"", ""Nearby detection counts (radius 25 µm)"", ""Cell: Channel 2 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 4 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 mean"", ""Cell: Max caliper - Smoothed (FWHM 25 µm)"", ""Cell: Channel 1 min - Smoothed (FWHM 25 µm)"", ""Smoothed denominator (local density, FWHM 25 µm)"", ""Cell: Channel 1 std dev"", ""Cell: Perimeter - Smoothed (FWHM 25 µm)"", ""Nucleus/Cell area ratio - Smoothed (FWHM 25 µm)"", ""Cell: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 1 mean"", ""Nucleus: Channel 3 max"", ""Cell: Max caliper"", ""Nucleus: Channel 3 sum - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 min"", ""Cytoplasm: Channel 4 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 max - Smoothed (FWHM 25 µm)"", ""Nucleus: Eccentricity - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 std dev"", ""N",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391785100:88,detect,detection,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391785100,3,['detect'],['detection']
Safety,"Ok, I tested the ""Offline TMA Data Viewer"" (not sure what to call this method!). I exported TMA data (qptma) for all 6 TMA slides. I loaded one file in the TMA Data Viewer in a new QuPath instance which seem to load data for all the qptma files present in the folder ! is that expected behavior ?. With this method the table is very smooth. It makes sense to work offline if I want to look at the combined data from multiple TMAs after completing the cell detection and classification. I opened one of the qptma file using notepad. I did not see any measurements or survival data in the file content - however the TMA Data Viewer was able to populate all the columns including measurements. Where is the data being pulled from ? what kind of magic is this. I may also have discovered additional bug(s):. 1. I am seeing columnImage is null error in the log at loading - everything seem to work regardless. The same error is thrown everytime I toggle ""Group by ID"" as well.; ```; ERROR: QuPath exception: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; at qupath.lib.gui.tma.TMASummaryViewer.lambda$refreshTableData$66(TMASummaryViewer.java:1463); ```; 2. In the log I also noticed ```WARN: Unable to find censored column - survival data will be uncensored``` - not sure why ? ; ```; INFO: Update check for https://github.com/qupath/qupath; WARN: You need to enable the startup script in the Preferences if you want to run it; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: Predicate set to: null; INFO: Parsed 84 from HS-1_Scan1.ome.tif.qptma (84 total); INFO: Parsed 84 from HS-2_Scan1.ome.tif.qptma (168 total); INFO: Parsed 84 from HS-3_Scan1.ome.tif.qptma (252 total); INFO: Parsed 84 from HS-4_Scan1.ome.tif.qptma (336 total)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901:456,detect,detection,456,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901,1,['detect'],['detection']
Safety,"Ok, looks like by first applying ""Analyze -> Cell analysis -> Cell detection"" I was able to generate features for Classification. Using ""Analyze -> Calculate features -> Add intensity features (experimental)"" did not provide features. Thanks a lot!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-293365471:67,detect,detection,67,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-293365471,1,['detect'],['detection']
Safety,"Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:. 1) I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma. In Qupath:; For every image of the folder:; 2) In QuPath - perform cell detection; 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); 4) Export detections with annotation into .roi file. In Fiji:; For every image of the folder:; 5) open .roi file; 6) --> discriminate tumor and stroma; 7) perform DNA-damage focus analysis in tumor and stroma separately (algorithm potentially uses other Plugins); 8) Finished. So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. So, do you think, something like this is possible?. Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. Best regards and thank you; Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401542503:316,detect,detection,316,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401542503,2,['detect'],"['detection', 'detections']"
Safety,"Okay. Will look forward to the new version.; Thank you for your help, Pete. Best regards,; Kathy Yee. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Tuesday, June 9, 2020 at 11:50 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). I'll close this issue, v0.2.1 should be available next week containing this and some other minor fixes. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-641435861&data=02%7C01%7Ckyee%40umc.edu%7C9d731bc401b64e12fc1608d80c953380%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637273182238802631&sdata=35kLxw2W6caULJz3%2BBpsA14p3ff4jQMudfZyvd2fDBk%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNE2ZSFDWOSMQL5V6SOTRVZR43ANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C9d731bc401b64e12fc1608d80c953380%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637273182238812636&sdata=euPaoon04N%2F82Kf22ZIMOfEzWDQjc4LmxotHQSNCcaA%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-641438041:647,safe,safelinks,647,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-641438041,2,['safe'],['safelinks']
Safety,"One idea may be to forego cell detection (at least as a first step), and instead create square tiles or superpixels, add intensity/texture features to them, and then classify these. There is then a *Tile classification to annotations* command to merge the classified tiles. Cells could optionally be detected inside the annotations at the end, if still required. Alternatively, you could use *Extensions &rarr; ImageJ &rarr; Send region to ImageJ* to get a (possibly heavily downsampled) version of the image into ImageJ. The cells will be passed along too on an ImageJ overlay, with colors and names set according to their original classification. Then it becomes an ImageJ scripting/macro problem to combine these into regions - maybe using distance or voronoi transforms. *Plugins &rarr; Send ROI to QuPath* can be use to send back annotations to QuPath, if they are needed. In the event that you don't really care about the cell boundaries, you can open up the *Point* tool (three circles) and choose *Convert detections to points* first to get centroids only before sending them to ImageJ. I'm not sure if either of these do what you need, and the second may be a bit overly complicated. Could you say a bit more about the aim?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/70#issuecomment-298747073:31,detect,detection,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/70#issuecomment-298747073,3,['detect'],"['detected', 'detection', 'detections']"
Safety,"One other thing... I find that the easiest way to avoid detecting outside the annotation is to modify the ImageJ macro, rather than do post-processing in QuPath. You can take advantage of the fact that, for any non-rectangular region, QuPath sends the ROI to ImageJ as well. And so ImageJ's *Edit &rarr; Clear Outside* can help. (In practice, it can be a bit more tricky than that... you might need to complicate your macro with checks to see whether there is a ROI present in the first place, and you might need to use *Edit &rarr; Selection &rarr; Select None* and *Edit &rarr; Selection &rarr; Restore Selection* within your macro if you find that you need to do some processing prior to using *Clear Outside*.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288508331:50,avoid,avoid,50,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288508331,2,"['avoid', 'detect']","['avoid', 'detecting']"
Safety,"One problem I have occasionally seen with CZI is that a request for the *entire* image is made whenever only a small part is needed. This inevitably causes memory problems, but I have not yet been able to investigate when and why this might happen only for specific images. In the meantime I'd rather avoid suggesting that a huge amount of memory is required to use QuPath; it shouldn't be. Certainly with less memory available there may be problems if running something especially intensive (e.g. cell detection, even subcellular detection) across very large regions, but in that case the easiest solution is simply to restrict the analysis to smaller regions. But yes, if you can spare a few more GB it would be very good to increase what is available to QuPath. For what it's worth, my laptop has 16 GB RAM and I give about 8 GB to QuPath, although I've also used 4 GB for analysis (or less for just browsing and annotation). There are also some more memory-related tips at https://github.com/qupath/qupath/wiki/Troubleshooting#setting-memory-limits. It would be good to confirm whether the trouble only occurs when working with cell detection on large regions (at least hundreds of thousands of cells). My suspicion is that this isn't the case, and it is more likely to be related to the current patchy support for CZI - which is something I hope can be improved within the next few months. But I could be wrong on this if the behavior is fine whenever only small regions are considered.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343393030:301,avoid,avoid,301,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343393030,4,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"One reason I ask is that, depending upon the expected localization, there might be an argument for making the intensity measurements in a very small circular/rectangular region at the highest resolution, so as to make a measurement just around the cell centroid - not across the full region. The other reason is that I'm currently quite interested in adding the ability to detect different stains by providing sample colors - without any color deconvolution step. I'm not sure how relevant or helpful it would be here though.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/155#issuecomment-371256921:373,detect,detect,373,https://qupath.github.io,https://github.com/qupath/qupath/issues/155#issuecomment-371256921,1,['detect'],['detect']
Safety,"Ooh, that is good to know! I hadn't realized the tissue detection did not use the colors at all. That nixes the entire first paragraph of my first comment!. And to add on to Peter's last comment, I frequently calculate tissue area in R after the fact, using a sum of the cell areas in each core, or create a second set of cells temporarily with a larger cell expansion if the density is low (large enough that the fake cells fill in most of the tissue space) to get a fairly accurate measure of the tissue area in order to generate a positive cells/mm^2 value. And if the significant yellowing is the primary culprit, a difference just +/- 1 on the threshold could make a huge difference as long as the background is consistent.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282515393:56,detect,detection,56,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282515393,1,['detect'],['detection']
Safety,"Oooh, mergeAnnotations looks great. I was going to say that I have been trying to avoid selecting, but didn't realize there was an easy workaround for the merge in this case!; Edit: The first two worked for me as well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354865710:82,avoid,avoid,82,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354865710,1,['avoid'],['avoid']
Safety,"Oooh, that script would have been useful a few times! I have wanted the ability to split ROIs, though I don't recall why at the moment. If the tissue regions are visually distinct, this forum thread might also give you a way to automatically create the regions from your simple tissue detection, though it will never be perfect! Also, the more features you use, the larger sample size you will need, and I don't know how well that will work with your data set. Image quality/lighting also needs to be similar throughout :). https://groups.google.com/forum/#!topic/qupath-users/gm0YYJxSriA. edit: woah, I triggered some kind of title effect with the formatting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/99#issuecomment-328362033:285,detect,detection,285,https://qupath.github.io,https://github.com/qupath/qupath/issues/99#issuecomment-328362033,1,['detect'],['detection']
Safety,"Ooops, I misread part of your question. I do not know of any way to merge the two detection measurements from either side of a square, if you figure it out please let me know!. The best suggestion I can offer there is to make your tile sizes as large as ImageJ can handle on a per-tile basis.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286897156:82,detect,detection,82,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286897156,1,['detect'],['detection']
Safety,"Oops, I somehow missed the followup question. I don't use any particular packages just to calculate areas, it's pretty much just a use of the base sum function. I'm certain there are more elegant ways to do this using functions, but I only have basic programming experience so for loops it is!; ```; path = ""Your file path here""; setwd(path); outFile <-""test areas.csv"". #Replace .txt with whatever identifier will pick up all of the files you want to analyze. Detections or Annotations are common choices; file.names <- dir(path,pattern = "".txt""). #an empty frame to place data into; Areas <- data.frame(). #simple for loop to read each file and keep a sum of the cell areas.; for(i in 1:length(file.names)){; data.raw <- read_delim(file.names[i],""\t"", escape_double = FALSE, trim_ws = TRUE). #place the file names in the first column; Sample = tools::file_path_sans_ext(file.names[i]); Areas[i,1]<-Sample. #Sum of cell areas here. Add extra lines for mean of intensity/OD, etc; Areas[i,2]<-sum(data.raw$""Cell: Area""). }; Areas$""Area mm^2""<- Areas$V2/1000000. #set row names to F if you don't want a numbered list as the first column; write.csv(Areas, outFile, row.names=T); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-290314163:461,Detect,Detections,461,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-290314163,1,['Detect'],['Detections']
Safety,"Oops, my mistake. That's what I get for always posting as I wake up!. I have found them useful in SLIC classifications to automatically detect different types of tissue... and that is about it. Which ones are useful and why, I don't really know as I tend to feed them into classifiers and have not yet found a way to extract information from the classifier regarding which measurements were most useful. It was mostly trial and error based on what worked. Edit: The top discriminating features sounds like... a fantastic feature!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424748214:136,detect,detect,136,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424748214,1,['detect'],['detect']
Safety,"Oops, yes, he did say that in the first post. I think my wires got crossed while reading the forum post on automating the ImageJ macro runner across images. It is interesting that his import (and more importantly export) works for a single slide. I am still wondering if it not working in batch mode means that something isn't being given time to complete. @erexhepa When running it for a single slide, once all of the imported ROIs are in place, can you then use getDetectionObjects (on it's own as a separate script or menu command) to target anything? Does the Measure->Show detection measurements populate as soon as the script is complete?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357388634:578,detect,detection,578,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357388634,1,['detect'],['detection']
Safety,"PathCellObject, ""Cell: Channel 1 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 std dev"", ""Nucleus: Channel 2 max - Smoothed (FWHM 25 µm)"", ""Cell: Eccentricity"", ""Cytoplasm: Channel 4 mean"", ""Nucleus: Eccentricity"", ""Cell: Channel 3 min"", ""Cell: Channel 1 min"", ""Cell: Circularity - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 mean"", ""Cell: Channel 4 std dev"", ""Nucleus: Channel 3 range"", ""Cytoplasm: Channel 4 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 sum - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 range - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 range - Smoothed (FWHM 25 µm)"", ""Nucleus: Circularity - Smoothed (FWHM 25 µm)"", ""Cell: Channel 3 max"", ""Cytoplasm: Channel 4 std dev"", ""Nucleus: Channel 1 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 min"", ""Nucleus: Channel 4 mean - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 min"", ""Nucleus: Max caliper - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 sum"", ""Nearby detection counts (radius 25 µm)"", ""Cell: Channel 2 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 4 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 mean"", ""Cell: Max caliper - Smoothed (FWHM 25 µm)"", ""Cell: Channel 1 min - Smoothed (FWHM 25 µm)"", ""Smoothed denominator (local density, FWHM 25 µm)"", ""Cell: Channel 1 std dev"", ""Cell: Perimeter - Smoothed (FWHM 25 µm)"", ""Nucleus/Cell area ratio - Smoothed (FWHM 25 µm)"", ""Cell: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 1 mean"", ""Nucleus: Channel 3 max"", ""Cell: Max caliper"", ""Nucleus: Channel 3 sum - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 min"", ""Cytoplasm: Channel 4 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 max - Smoothed (FWHM 25 µm)"", ""Nucleus: Eccentricity - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 std dev"", ""N",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391785100:1134,detect,detection,1134,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391785100,1,['detect'],['detection']
Safety,"Perhaps something making use of the hierarchy? The Detection Centroid Distances should apply to all detections **except for detections that are child objects of other detections**. ; This would exclude subcellular detections from the run, and would keep the logic working. However at that point it could work for both detections and cells?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1550#issuecomment-2283403451:51,Detect,Detection,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/1550#issuecomment-2283403451,6,"['Detect', 'detect']","['Detection', 'detections']"
Safety,"Pete and Svidro:. That's got it! Thanks both so much for your help. . I have one final question. The subcellular spot detection seems to be picking up yellow in addition to red. After designating the ROI and doing a cell count, I used the Analyze > Preprocessing > Estimate stain vectors command, selected ""Auto"", then OK. The program picks up the red spots, beautifully, but also seems to pick up some aberrant yellow pigment. Here are a few images:; ![image](https://user-images.githubusercontent.com/36250970/36645494-c2c50a14-1a37-11e8-9932-2b15b61a5e31.png). ![image](https://user-images.githubusercontent.com/36250970/36645503-d0a0d780-1a37-11e8-9e32-3dca42a8ec52.png). Any thoughts on how to avoid detection of the yellow pigment?. Thanks again for this program and your help!!. Jim",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368337080:118,detect,detection,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368337080,3,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"Pete, . Thank you deeply for the complete explanation and information regarding this. . I will now consider this as closed myself, but will most likely continue (at my own risk, as you say) working on this feature as I sincerely do believe it to be useful, and will find a way without changing anything in QuPath. I am aware it will break at one point or another but for the benefit of our users it will be worth to maintain. . Thank you for all the time and effort explaining this to me, and for the scripting alternatives you have provided which I am sure we will be making use of. 😃",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632682362:172,risk,risk,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632682362,1,['risk'],['risk']
Safety,Please avoid creating issues for anything other than bug reports; [use the forum instead](http://forum.image.sc/tags/qupath/).; ![image](https://user-images.githubusercontent.com/23145209/73910566-914ea000-4864-11ea-8072-8310ead5efb2.png),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/397#issuecomment-582753754:7,avoid,avoid,7,https://qupath.github.io,https://github.com/qupath/qupath/issues/397#issuecomment-582753754,1,['avoid'],['avoid']
Safety,"Positive cell detection only works on the first go. Other ways to do it involve using the Classify by specific feature option under the Classify menu and choosing your cutoff there, while choosing the cutoff for your specific measurement for the given cell type (IE choose tumor as the input, and then positive tumor or negative tumor as the output). You may have to create the extra classes. The other way involves a one line script that classifies as positive or negative by the value you input. . setCellIntensityClassifications(""Cytoplasm: DAB OD mean"", 0.15)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/64#issuecomment-293464289:14,detect,detection,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/64#issuecomment-293464289,1,['detect'],['detection']
Safety,"Potentially, with a bit of effort. It's easier if you can avoid needing to handle mouse clicks etc., and don't mind simply placing the circle at the center of the current field of view. You can always then move it afterwards if you need to refine the position manually, using the existing *Move* tool. A similar processing for creating a rectangle is described on [this blog post](https://petebankhead.github.io/qupath/scripting/2018/03/09/script-create-fixed-size-region.html). `RectangleROI` appears twice in that script. If you just replace it with `EllipseROI` in both places it should do the job (and of course change the `PathClass` bit if you want). The `sizeMicrons` value specified in the script should correspond to the diameter.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/158#issuecomment-376154987:58,avoid,avoid,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/158#issuecomment-376154987,1,['avoid'],['avoid']
Safety,"Preview & QuPath both look ok to me:. ![Screenshot 2020-10-23 at 20 49 48](https://user-images.githubusercontent.com/4690904/97047805-6bdc0080-1571-11eb-8a78-f2ec9652945c.png). I do have a homebrew install as well:. ![Screenshot 2020-10-23 at 20 52 12](https://user-images.githubusercontent.com/4690904/97048049-ba899a80-1571-11eb-8751-6dc0394469e5.png). ----. Thanks very much for the link, I'll check your build scripts - I think it is already safe to say they are a lot more sophisticated than anything used for QuPath! I'm afraid I'm one of the people who has spent too long with Java and Python... Do you think there would be any sense in trying to include libvips with QuPath? We could put some work into that from our side - especially if it would help us incorporate OpenSlide more reliably into QuPath while also giving access to some of libvips' other functionality (like faster image pyramid-writing?) - but I'm not sure if there are reasons that's a bad idea.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715571233:446,safe,safe,446,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715571233,1,['safe'],['safe']
Safety,"Project contains total of 6 TMA slides. Each contains approximately ~80 cores. A few cores are marked as missing per slide due to not enough tissue or missing information. I have a total of approximately ~400 valid cores in the project, each slide may contain multiple cores per subject id. I tested the Measure -> show TMA measurements. This means I can only load the data for the active image. The table does work with a tiny bit of scrolling lag - very little. If I open the same image without detections the table is smooth. . I have about ~ 13 classes. I am working with 7 channel multiplex image hence each detection has 116 measurements (shape and intensity)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954:497,detect,detections,497,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954,2,['detect'],"['detection', 'detections']"
Safety,"QuPath gives the tools to do all kinds of things, but some are easier than others. Distinct commands (e.g. cell detection) can be combined with others (e.g. classifying cells as positive or negative, interactive machine learning) for particular applications (e.g. scoring Ki-67). But these or other commands could be combined in different ways for different applications. QuPath doesn't have a 'Ki-67 scoring' algorithm in particular, but it has the pieces that can be used to create and customize one. _However_... there are a lot of things that I _wouldn't_ try with QuPath's built in commands only, and mitosis detection in H&E is one of them. I'd say the detection task is too difficult and specialized for QuPath's generic cell detection currently. Solving that is a substantial research project in itself (and the subject of some [grand challenges](https://mitos-atypia-14.grand-challenge.org)). That's one of the reasons why QuPath supports scripts and extensions: it's possible to create highly specialist algorithms elsewhere, and either integrate them into QuPath or at least visualize the results through QuPath. Therefore some of the ways in which QuPath can help are:; * for manual counting; * for exporting manual counts as 'ground truth' into a format that can be used to help create a new algorithm, using whatever image processing / machine learning / deep learning libraries and tools you like; * for visualizing the results of an algorithm directly in the context of a whole slide image (using QuPath's objects, classifications & visualization tools to help); * as the platform for running and sharing any algorithm you might create (if it's implemented as a QuPath script or extension). The first of these is pretty laborious, while the last three will take some effort and knowledge on the image analysis side. That's the side I come from... I created QuPath because I needed the tools myself to write new algorithms, and then to share them with pathologists and other researchers",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414438828:112,detect,detection,112,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414438828,4,['detect'],['detection']
Safety,"Quick addition. Defining an area using a polygon no longer works for the in-built detection, just when running a stardist script:. ![image](https://github.com/qupath/qupath/assets/154437026/9e4ba23a-f54a-4742-8a5c-ec10b063f7f2). ```; ERROR: Error processing Polygon (7616, 10604, 2099, 1863); java.io.IOException: java.lang.InterruptedException; at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:911); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.p",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:82,detect,detection,82,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['detect'],['detection']
Safety,"Quick update: there are no longer any plans to make QuPath OpenJDK 15-compatible. The next release is intended to be >= March 2021, by which time OpenJDK 16 should be available and there is a risk things will have changed again. However, jpackage is an intended feature for 16 so should be more stable... and worth updating for. In the meantime, QuPath v0.2.* is only intended to be built with OpenJDK 14. QuPath's code should be compatible with Java 11; OpenJDK 14 is required only for jpackage. From an IDE, it should run with other Java versions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/615#issuecomment-757141337:192,risk,risk,192,https://qupath.github.io,https://github.com/qupath/qupath/issues/615#issuecomment-757141337,1,['risk'],['risk']
Safety,R: Error running plugin: java.lang.OutOfMemoryError: Java heap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Sourc,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:1317,detect,detect,1317,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,1,['detect'],['detect']
Safety,"Regarding the script, are you merging two different annotation classes two different ways? Or merging the same annotation twice? Are you running the cell detection command in the script immediately after the second merge? That could be a big problem if so. You have two merge statements, each done a different way. If you are actually running the script as is, you are probably running into the same problem as before, where one merge has not completed when the second starts running, and everything is getting ""bugged out."" If that is the case (and you are running your cell detection in the script right after the second merge), you may want the thread sleep command from https://github.com/qupath/qupath/issues/129. I am not certain, but I have a feeling that this has more to do with the shape of your annotation causing cell detection a problem than the merge statement. . When I have had something like this happen (cell detection starts running, but no cells show up in the annotation tab), it does not always show an error in the log, but the first thing to do would be to check the View->Show log to see if there is an error message there. If there is, great, that might be useful. On the other hand, if there is nothing, it may just be the cell detection not completing, but without causing any errors. . If none of the above helps, could you paste your .qpdata file as a .log file (rename the file extension), with ONLY the annotations saved. It should be quite small. I would like to try importing it onto another dummy whole slide image just to try running cell detection to see if the shape of the annotation is causing problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365346916:154,detect,detection,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365346916,6,['detect'],['detection']
Safety,"So I confirm that all access to any mutable variable should be synchronized. From ""Concurrency in Practice"":. > Whenever more than one thread accesses a given state variable, and one of them might write to it, they all must coordinate their access to it using synchronization. I can refactor `NumericMeasurementList` to make it thread-safe.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478:335,safe,safe,335,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478,1,['safe'],['safe']
Safety,"So I just had this problem on a project today! I can't post the data, but what I did was roughly what I described above, but with a slight twist. We had a purple cytoplasmic stain along with hematoxylin for the nuclei, and finally a DAB stain that was also nuclear. . I changed the DAB vector to the purple stain (in Analyze>Estimate Stain vectors) and created a hybrid vector between the DAB and hematoxylin for the hematoxylin vector. . I then ran a standard Cell Detection using ; 1. Hematoxylin OD for nuclei ; 2. Exclude DAB checked (DAB now being all of the background purple) and ; 3. a Threshold of .05; and obtained quite good results.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-276200635:466,Detect,Detection,466,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-276200635,1,['Detect'],['Detection']
Safety,"So I took a quick run at it, and came up with a few options.; First off, due to your somewhat off-white background, I would definitely use something like:; ```; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.69602 0.66056 0.28145 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.47625 0.62539 0.61811 "", ""Background"" : "" 224 224 224 ""}');; ```. Next I drew a square that had some DAB and non DAB stained areas and tested the following **with the annotation selected**:; ```; runPlugin('qupath.imagej.detect.tissue.PositivePixelCounterIJ', '{""downsampleFactor"": 1, ""gaussianSigmaMicrons"": 0.5, ""thresholdStain1"": 0.1, ""thresholdStain2"": 0.2, ""addSummaryMeasurements"": true}');; ```. Alternatively you could try superpixels, which I like, but would also require a classification step. For now you can use the Measure->Show measurment maps command to look at what values you could use for a classifier. Again **with the annotation selected**:; ```; runPlugin('qupath.imagej.superpixels.SLICSuperpixelsPlugin', '{""sigmaMicrons"": 1.0, ""spacingMicrons"": 10.0, ""maxIterations"": 10, ""regularization"": 0.25, ""adaptRegularization"": false, ""useDeconvolved"": false}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 0.25, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": true, ""colorStain3"": false, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": false, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; ```. You can also choose a larger size for your SLICs if you want to do more of a tissue structure analysis. Smaller is usually better if you are looking for color differences though. Another options is just using the cell detection mentioned above:; ```; selectAn",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372875465:577,detect,detect,577,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372875465,1,['detect'],['detect']
Safety,"Some assorted responses:. * You say 'QuPath did it again', but it’s not clear if QuPath is actually doing what it is supposed to in deleting objects. I already described that you should not do automated counts in the same region after manual counting. Did you read my explanation above? If it does not describe your situation, please be more specific. https://github.com/qupath/qupath/issues/112#issuecomment-342941759. * QuPath is written in Java, and is therefore limited by the amount of memory assigned to it on first startup, or under *Help &rarr; Show setup options*. Additional memory being available on the computer doesn’t change this; QuPath won't use it. * My best guess remains that the memory problems are related to the handling of CZI images - which is something I will investigate, but I have very little free time currently and it may take a while. It is not a format I have used much myself, and I have very little relevant data that I can use to test it properly. * If you want to investigate this yourself, try doing simple processing steps using images in another file format (e.g. Aperio or Hamamatsu - maybe from http://openslide.cs.cmu.edu/download/openslide-testdata/). If the problem persists then my guess is wrong, and it is not reliant on file format. But then if you describe your exact steps I may be able to reproduce the issue. * If you are optimizing positive classification settings, re-running the cell detection would be a horribly slow way to do it. Running this one-line script and adjusting the values should be *much* faster:; ```groovy; setCellIntensityClassifications('Nucleus: DAB OD mean', 0.2); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344522051:1439,detect,detection,1439,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344522051,1,['detect'],['detection']
Safety,"Sorry my suggestions haven't been more useful! Also, I do get an empty text file with Name only when I export detection files and there are no detections present. . Is there any chance you could perform a `def detections = getDetections()` and then print out detections.size to make sure that the detections are there to be exported, directly before the export? Just trying to eliminate possibilities. I haven't run into this problem on Windows yet, but would love to know what is causing it in case I do!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357025283:110,detect,detection,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357025283,5,['detect'],"['detection', 'detections']"
Safety,"Sounds like a potential memory leak, but I'm not aware of any that would cause this. > I still have 15GB free. Is this available to QuPath, or only to the operating system? You can track QuPath's memory use with *View &rarr; Show memory monitor* (although this won't include anything JavaCPP does... which mostly means things connected with pixel/object classifiers). There are some instructions for making more memory available to QuPath [here](https://qupath.readthedocs.io/en/stable/docs/reference/faqs.html#set-max-memory). If you're comfortable digging deeper, [VisualVM](https://visualvm.github.io) is extremely helpful for tracking memory in any running Java application (and is what I'd use if I could replicate the issue). Apart from that, how are you running positive cell detection - interactively, or from a script? How do you define the regions within which cells are detected?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932368906:783,detect,detection,783,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932368906,2,['detect'],"['detected', 'detection']"
Safety,"Strange... if you install gradle separately, then you can also use `gradle clean jpackage` (i.e. avoid relying upon gradle wrapper). I'm not sure if that'll help. I have limited experience using Linux, and none using CentOS. I don't know whether JavaFX 18 (used by QuPath now) is compatible with CentOS 7 so even if you overcome the building issue, I don't know if it will run.; * https://github.com/qupath/qupath/issues/825; * https://github.com/qupath/qupath/issues/949",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/950#issuecomment-1096162506:97,avoid,avoid,97,https://qupath.github.io,https://github.com/qupath/qupath/issues/950#issuecomment-1096162506,1,['avoid'],['avoid']
Safety,"Thank yo for the reply and your re-repeat :) of what you had already told me. I admit that I am really bad at understanding this part. This is what I think I understand:. The approach we used creates an issue with the way `ImageDisplay` is currently implemented because saving display settings to the .qpdata file is not good practice? ; But doing this via scripting is OK because it's less important if scripts break upon QuPath updates?. The risk is that if these are made public, other people could call upon these methods, and that would break something in the GUI whenever changes will be made to the code?. Currently there is no other way than to use `ImageDisplay` to set these properties for the channels (and save and recall them) which is bad because this will be revised in the future?. Let me know what I got wrong there if you have time. I think that in the meantime I will test a script to do what we used to be able to do, and dive into the wonderful world of Reflection for my sake.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632635935:444,risk,risk,444,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632635935,1,['risk'],['risk']
Safety,"Thank you Pete. Kathy. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:11 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). This looks like a simple bug, albeit one that has existed for some months at least - weirdly without being reported before. Should be fixed in the next minor release, but I first need to check it in more detail. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640758278&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716768343&sdata=I6ByW3NeHWrDm7VTBAvpv2MpkhL6TLrhVIKQdriYgAA%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNEYF5JGJNVJRBCHLL3DRVULSZANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716773334&sdata=3J8BiWMPaBCV6Q7lr8IOEGiTxaRqEaq2AUvxwH2crGY%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640759146:675,safe,safelinks,675,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640759146,2,['safe'],['safelinks']
Safety,"Thank you Svidro,. Thank you for your answer. I will try your suggested way. I didnt find your answer in the github chat. I am not familiar with ; github yet - didnt know, it is possible to have a conversation that does ; not appear in the issue. how did u do that?. Best. David. Am 29/01/2017 um 21:04 schrieb Svidro:; >; > My usual method for this type of situation would be to use ; > Analyze>Cell Analysis>Cell detection with ""make measurements"" checked ; > (using Hematoxylin OD since that is giving you the best cell detection).; >; > Then run Classify>Classify By Specific Feature with whatever cutoff ; > you were using in the positive cell detection that gave you good ; > positive/negative separation.; > classify ; > <https://cloud.githubusercontent.com/assets/23145209/22407407/a1b3e02c-e61a-11e6-8ab8-8929d9b98c32.JPG>; >; > It may not be exactly what you wanted, but it is not too many steps ; > and should give similar results, I believe. Note that the Classify By ; > Specific Feature does not show up in the workflow at this time, but I ; > seem to remember it being scriptable manually.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/46#issuecomment-275941788>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEcJu_dREsL0cqgibZHAb2Vy12MWjks5rXPDdgaJpZM4Lw1_o>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; Geschäftsführer:; - David Haumann, Thomas Schenker, Sergey Biniaminov. _________________________________; Diese E-Mail und jeder übermittelte Anhang enthält gesetz",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-276000050:415,detect,detection,415,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-276000050,3,['detect'],['detection']
Safety,"Thank you both for answering! @Svidro and @petebankhead ; I started all over again, so I don't have the workflow anymore. Nevertheless, what I meant was that I used indeed the pointing tool. I had two populations, one negative and one positive. After I ran the positive cell detection, the negative population was gone. And unfortunately, there is no undo button. My goal was indeed compare the manual counting and the automated counting. For optimization. I don't know whether the error is the lack of RAM, I checked and i have 3,3GB available. And I only have 4 ROI's in one image. When I run the analysis, I make sure nothing is selected and choose the option 'all annotation'. It might be, but it might be not, because sometimes it also does not analyse only 1 ROI, but other times it does. However, the log it says 'memory error'. the programs that are running on my computer besides Qupaht are google chrome (1tab), one note with an excel file, and file explorer. ![capture](https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG); ![capture2](https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG); ![capture3](https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG). I really don't know why sometimes it works or not, but i'll be more careful in what I'll do.; Unfortunately, there was also no backup file in the folder after the failure of saving.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343227944:275,detect,detection,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343227944,1,['detect'],['detection']
Safety,"Thank you for taking your time into understanding our problem and coming up with possible alternative solutions!. I absolutely get your notes on the classifier. I assumed that the ObjectClassifier would _never_ need to read pixels because it currently only uses the detections' measurements. Surely the code must be changed in preparation of the advent of the `FeatureExtractor`. And for this, using `ProjectImageEntry.readHierarchy()` is probably the better option.; > [...] creating a classifier without needing to go through the UI [...]. I am not sure about this, though. You often want to leverage the live-update feature when creating a classifier. That is one of the most handy feature when tweaking a classifier. If that option was removed, it would be unfortunate. -------------------------. However i think you missed a point. The major issue this PR wants to address is the ability to a script in batch as fast as possible (and when it is possible); > an alternative approach [...] that doesn't involve any big API changes - and which can be used when you can know in advance that the image doesn't need to be accessed. Just to be clear, this PR's only API change is adding in [`ProjectImageEntry.java:L195`](https://github.com/qupath/qupath/pull/1488/files#diff-14ed5cabf5566ab4eb5d1ae31a25d75c8dd49e3c50e1cc05ce10ff21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the be",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:266,detect,detections,266,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['detect'],['detections']
Safety,"Thank you for the feedback. Unfortunately it cannot be consistently reproduced. True, I am messing with the stain vectors, working with 2-plex brightfield IHC. Knowing it is just a matter of visualization and brightness/contrast and that does not affect analysis sounds safe to close this issue. Best wishes,; Carlos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/464#issuecomment-622329244:270,safe,safe,270,https://qupath.github.io,https://github.com/qupath/qupath/issues/464#issuecomment-622329244,1,['safe'],['safe']
Safety,"Thank you for your reference, but I have some problems when I run it.; ----------------------------------------------------------------------; import qupath.lib.gui.ImageWriterTools; import qupath.lib.gui.QuPathGUI; import qupath.lib.gui.viewer.OverlayOptions; import qupath.lib.regions.RegionRequest; import qupath.lib.scripting.QPEx. // Aim for an output resolution of approx 20 µm/pixel; double requestedPixelSize = 20. // Create the output directory, if required; def path = QPEx.buildFilePath(QPEx.PROJECT_BASE_DIR, ""export""); QPEx.mkdirs(path). // Get the imageData & server; def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 162, ""requestedDownsample"": 1.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 500.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');. // Get the file name from the current server; def name = server.getShortServerName(). // We need to get the display settings (colors, line thicknesses, opacity etc.) from the current viewer, if available; def overlayOptions = QuPathGUI.getInstance() == null ? new OverlayOptions() : QuPathGUI.getInstance().getViewer().getOverlayOptions(). // Calculate downsample factor depending on the requested pixel size; double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); def request = RegionRequest.createInstance(imageData.getServerPath(), downsample, 0, 0, server.getWidth(), server.getHeight()). // Write output image, with and without overlay; def dir = new File(path); def fileImage = new File(dir, name + "".jpg""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420287639:943,detect,detect,943,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420287639,1,['detect'],['detect']
Safety,"Thank you very much for your help, but I have a new problem. How can I save the results to my local disk? ; ------------------------------------------script---------------------------------------; import static qupath.lib.scripting.QP.*; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 162, ""requestedDownsample"": 1.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 500.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; ---------------------------------------------error---------------------------------------; 04:25:18.186 [main] [INFO ] QuPath - Launching QuPath with args: /oamp/bio/QuPath/0.1.2/command/9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg, -script, 2.groovy; Script result: false; ------------------------------------------------------------------------------------------; thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/213#issuecomment-419363485:519,detect,detect,519,https://qupath.github.io,https://github.com/qupath/qupath/issues/213#issuecomment-419363485,1,['detect'],['detect']
Safety,"Thank you very much, Svidro, DHaumannHSA and petebankhead for your quick and helpful answers! Very much appreciated! I did not know tissue detection did not use colors! Very interesting! ; By ""manual"" I was referring to the section on TMA CD3 analysis. I followed all these steps precisely (including estimation of stain vectors). The setting is also on Brightfield. The values given for the background/whitespace at the bottom of the Image tab on the left are around 223,215,213 in my case. By playing around with these numbers in my settings I eventually managed to get better results that are ok to work with. Thank you very much everybody once again.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282548616:139,detect,detection,139,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282548616,1,['detect'],['detection']
Safety,"Thank you, this was pretty fast!. Accordingly to my testing it works all okay and pretty safe. I think the idea to write as soon as something is being modified is worth it. The fact that now it requires that the images are opened & modified at least once is not a problem. I think we can put up with it for the time being and leave it for some future adjustment, if needed. However i think you got something off: it should be possible to write the imagedata if the server was never loaded. The problem is not that the image name is always written to the ImageData's file, as that does not make the metadata different from the old ones when the name was kept as is.; The issue is that, when writing the `.qpdata`, it wants to know the ImageServer unique identifier and summary. Both of these cannot have changed without the server being loaded first (the unique identifier possibly yes if it uses the filepath, but in that case moving the image folder after the ImageData was saved would have the same result).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548:89,safe,safe,89,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548,1,['safe'],['safe']
Safety,"Thank you. Alan. From: Pete <notifications@github.com>; Sent: Tuesday, April 28, 2020 12:38 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: Alan Jerusalmi <ajerusalmi@bioaihealth.com>; Mention <mention@noreply.github.com>; Subject: Re: [qupath/qupath] Issue staring QuPath 0.2.0 m9 or m10 (#458). @ajerusalmi<https://github.com/ajerusalmi> the error is caused by the old Weka extension being installed. This is compatible with v0.1.2, but not v0.2.0. Two things you can do:. * delete the Weka extension; to find its location, go to Edit → Preferences and check the 'QuPath user directory'; * use Edit → Reset preferences to reset the location of the user directory in QuPath, so the extension will not be found. I will close this issue since it is not a bug, however a change has been made for v0.2.0-m11 to enable QuPath to recover better in cases like this, see #454<https://github.com/qupath/qupath/issues/454>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/458#issuecomment-620375806>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AO6FMERJ4NRH6754WL7Q6ELROZMSBANCNFSM4MSNUQHQ>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/458#issuecomment-620601601:832,recover,recover,832,https://qupath.github.io,https://github.com/qupath/qupath/issues/458#issuecomment-620601601,1,['recover'],['recover']
Safety,"Thank you. Of course I could not get these dimensions directly from the mirax file either (easily), but since the tiff file was generated 'as-is' from mirax, and since I know how these glass slides look like physically, the 'padded' version is 1:1 to the glass, so naturally what QuPath shows me is not something I consider the whole slide, thus cropped. I did consider these workarounds, but most of them include some effort from the pathologist's side - probably a no go. Re-generating the whole database of 5+years of data is something I would like to avoid. Thanks for the exhaustive list and your effort.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631311540:555,avoid,avoid,555,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631311540,1,['avoid'],['avoid']
Safety,"Thanks @MakarowMax, I haven't seen this error before but I am able to replicate it when I chance to the *Logistic Regression* classifier. I can change to *Artificial Neural Network* without problems. Is this also true for you?. It's curious because I am fairly sure I have used *Logistic Regression* without errors in the past; I'm not sure if it depends upon operating system or if any recent updates might be causing the trouble. In any case, the error occurs deep within OpenCV - and unfortunately there is no possibility to capture the exception within QuPath before the Java Virtual Machine shuts down. In the past, the only solution I could find to OpenCV errors like this has been to avoid calling the crashing code. In this case, that would mean removing the *Logistic Regression* option. I haven't found it to be terribly useful (even when it worked) so I don't think this would be a big loss; I personally prefer *Artificial Neural Network* (and sometimes *Random Trees*). *K Nearest Neighbor* really only makes sense when training using point annotations (when given a large number of samples it is too slow). What do you think? Does it happen to you with other classifier types as well?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-579836335:691,avoid,avoid,691,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-579836335,1,['avoid'],['avoid']
Safety,"Thanks @MichaelSNelson! The main idea here is to support adding text but without really specifying what that has to be... so someone could use it in the way you describe for clustering, but could use it for something else entirely. The use cases I'm thinking of here are really; * teaching, where an object annotation could be some useful explanatory text; * recording thoughts... where an object (or full image) annotation could be some comment on the image or analysis, e.g. *'excluded because of quality issues'*, or *'annotated by Pete on a rainy Tuesday'* etc. But it could also be a link to a website, a GitHub repository, or even even the text for a script used for the processing. For these, it needs to display nicely - hence the html support. > Extra intention: make it possible to export a summary markdown report, including image thumbnails. This could be used to give a portable, readable summary of an entire project in html. That could be handy, e.g. when asking a pathologist to QC a lot of annotations. For analysis-oriented things like the clustering application, it's already technically possible to use; ```groovy; getSelectedObject().storeMetadataValue('My key', 'My value'); fireHierarchyUpdate(); ```; currently, but only because of Groovy's laxity (the methods are `protected`) - and it won't show up in any results tables. It will also have all the detections-suddenly-use-a-whole-lot-more-memory issue, so *really* isn't to be encouraged at the moment. Nevertheless, exposing access to the arbitrary metadata map an official part of the API could be another new feature.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703:1374,detect,detections-suddenly-use-a-whole-lot-more-memory,1374,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703,1,['detect'],['detections-suddenly-use-a-whole-lot-more-memory']
Safety,"Thanks @NicoKiaru that sounds pretty similar to what I've tried to do here. As far as I can see, my implementation is working ok so I'll stick with it for now. One minor difference is that my version restricts creating new readers to a single background thread, since I found that sometimes (although rarely) constructing many reader simultaneously had really bad performance, as all the constructors got stuck parsing XML. By ensuring readers are created sequentially, I avoid blocking for too long when tile reading is substantially faster than reader initializing: if a thread wants a reader, it puts in its request. If there's a reader available, it gets that immediately. If not (and the max reader limit isn't reached) a background thread goes off to create a new reader. The original thread will then wait for the next available reader - which *might* be the one initialized because of its request, but it might also be one that has since become available. Waiting time is minimized in any case. I also added some `Cleaner` support from Java 9 to handle the fact that it's easy to miss closing an `ImageServer` properly. PS. Since the recycling is really important, should you do it in a `finally` block?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1002502877:472,avoid,avoid,472,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1002502877,1,['avoid'],['avoid']
Safety,"Thanks @Rylern and @alanocallaghan - good call making me right the tests, that helped identify and fix some bugs, and address some suboptimal behavior concerning rounding and out-of-range values. > Is there a reason for defining the BufferedImageNormalizer interface, instead of just using [Function<BufferedImage, BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) or [UnaryOperator<BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html)?. I've updated this to use [`BufferedImageOp`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/image/BufferedImageOp.html), which then; 1. allows the classes to be used directly with [`Graphics2D.drawImage`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/Graphics2D.html#drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)).; 2. makes it possible to control whether in-place image conversion is used. Potentially one of the other standard Java interfaces could be used, but I want to avoid giving the impression that it's a good idea to use arbitrary methods or lambda expressions. These can be convenient for testing, but will fail when images are added to a project - because we need the methods to be JSON-serializable. The JSON serialization is taken care of through the `ImageServers` class, and we have to explicitly register every normalization class so that it can be used within a project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698:1084,avoid,avoid,1084,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698,1,['avoid'],['avoid']
Safety,"Thanks @Rylern this looks good & brings up a couple of minor questions for you, @alanocallaghan and @finglis; * How 'deep' should we search for extensions (i.e. how many sub-directories)?; * Should there be any way to override the depth?. Currently in this PR I think it will search 4 subdirectories deep, and there is no option to override this because the field is `final`. If it *wasn't* `final` then the following script should work:; ```groovy; // Prints, even though it's private; println qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH. // Try to set; qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH = 5. // Print again; println qupath.lib.gui.ExtensionClassLoader.MAX_EXTENSION_JARS_DEPTH; ```; and that would allow the user to sneakily adjust the depth in a startup script. I've sometimes found such sneaky scripts to be useful - mostly when a user wants to do something I hadn't thought to make in the public API - but I'm not sure if we want to permit or block it. Either way, the script only works because of Groovy's relaxed attitude to private variables - so it's risky for the user to do such things. If no one has strong opinions, I can just merge the PR as it currently is. But it's worth knowing that the choice of `final`/`non-final` has this implication, since Groovy is our scripting language.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1461#issuecomment-1934393163:1104,risk,risky,1104,https://qupath.github.io,https://github.com/qupath/qupath/pull/1461#issuecomment-1934393163,1,['risk'],['risky']
Safety,"Thanks @Svidro ; @bjtho08 note that v0.2.0-m2 uses a different location for user preferences to avoid conflicting with v0.1.3. Have you checked that the relevant preferences are the same, e.g. those under _tools &rarr; Multi-touch gestures_?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479519382:96,avoid,avoid,96,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479519382,1,['avoid'],['avoid']
Safety,"Thanks @ajay1685 the PR above should address most of this, and a couple of other bugs I spotted (like measurements not updating if cores were moved on the image). Please let me know if you notice any significant problems with this. Because the TMA data viewer is unmaintained, I think there is an above-average risk of unreported/unnoticed bugs so I've added a warning now as well. You can double-click on it to make it go away. <img width=""1006"" alt=""TMA data viewer"" src=""https://user-images.githubusercontent.com/4690904/197327977-4298edd4-13f3-41d3-b99c-6f95be821ff9.png"">. In the longer term, I think it should be removed or rewritten. Rewritten would be preferable, but it's really a matter of capacity... as the software gets bigger, there are so many different parts to maintain and I haven't worked with TMAs myself in years.; (In that regard, new QuPath jobs to be advertised next week - please share them widely!). Regarding performance, I couldn't replicate any sluggishness - it was very smooth for me, but then I was only using 'toy' datasets based on generating a grid on a regular whole slide image. If you can provide more info to replicate the sluggishness then I could have a quick look into that, but for now I hope the main issues are fixed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1287672102:311,risk,risk,311,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1287672102,1,['risk'],['risk']
Safety,"Thanks @tp81! It might take me a bit of time to look at this in detail, because I've switched focus temporarily to finish some papers. First thoughts: I've also had the issue of having to click on the viewer to activate it for backspace to work, I agree it would be best to avoid this. Minor concerns are; * it introduces public methods, and I'd rather reduce this as much as possible; * if it basically duplicates some code elsewhere, perhaps some refactoring elsewhere could promote reuse. There is also a bit of JavaFX/macOS weirdness when it comes to single-key accelerators (i.e. not requiring Cmd+Something to run a menu item). I'm not sure if it's relevant here but anything accelerator-related takes some extra cross-platform testing. I've assigned it to a v0.4.0 milestone to remind us to try to get this functionality in that release (tentatively planned for early next year).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/830#issuecomment-957188687:274,avoid,avoid,274,https://qupath.github.io,https://github.com/qupath/qupath/pull/830#issuecomment-957188687,1,['avoid'],['avoid']
Safety,"Thanks @zindy I'll try to have a look later. First thought is that I'd rather *not* have the second commit, unless you have a clear need for a public `getPreviouslySelectedTool()` method?. In general, I'd rather shrink the API and make it more stable, and avoid adding public methods just-in-case. But it could be added if it is really needed somewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219437840:256,avoid,avoid,256,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219437840,1,['avoid'],['avoid']
Safety,"Thanks Benjamin, and I'm glad the macro functionality is useful!. I thought I knew the reason for the issues you are seeing, but upon quickly looking at the code I realise that I do not. There is an enigmatic statement [here](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L368) that color transforms are ```// Not supported in batch mode, so disable option to avoid confusion``` although I don't recall why... There's also a [hard-coded limit](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L229) whereby the macro runner rejects an image with more than 5000x5000 pixels... although the wisdom of this specific limit may also be questionable. I'll look into it, but at the minute it looks like both issues represent 'intended behavior, albeit not desired behavior (by the developer or anyone else)'. Not sure what the right word for that is. In the meantime, depending upon how happy you are with Groovy/Java/the ImageJ API, it would be possible to create a Groovy script to run in QuPath that grabs regions from the image, converts them into ```ImagePlus``` objects for ImageJ, performs whatever processing is required using ImageJ (or even OpenCV or other dependencies if you prefer), and optionally sends back results as the ```PathObjects``` that QuPath requires. There is considerably more effort involved in setting this up for the first time and learning the main methods required (IntelliJ is more or less essential to get auto-complete and link up to the source code), but has the reward of giving you far more ability to customize the analysis and how the results are returned. I have used this approach a lot. If you would like to try this out, the code within [```ImageJMacroRunner.java```](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java) may help to get st",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68#issuecomment-297931966:438,avoid,avoid,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/68#issuecomment-297931966,1,['avoid'],['avoid']
Safety,"Thanks Svidro and ClnSchlssr - yes, it is mostly 'expected behavior'. You can also work around it slightly by drawing a polygon inside your annotation, and then switch to the brush tool to edit it (using the shortcuts 'p' and 'b' to switch tools). The polygon is able to create the new annotation, and when clicking inside the new polygon with the brush tool then it should be selected (rather than the original annotation). But I think locking annotations is the best solution, since this also prevents you from accidentally moving the annotation within which the tiles were created. Some commands (e.g. cell detection) automatically lock the annotations that they are run inside, but 'Create tiles' doesn't. It probably should. As Svidro mentions, the need for annotations to be completely inside other annotations to 'capture' further objects is really important... there is some explanation for it at https://github.com/qupath/qupath/wiki/Object-hierarchies",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/50#issuecomment-280862813:610,detect,detection,610,https://qupath.github.io,https://github.com/qupath/qupath/issues/50#issuecomment-280862813,1,['detect'],['detection']
Safety,"Thanks a lot for your answer. So running the following code when opening a new image is relatively painless:; `// Get access to the display info for each channel; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().getAvailableChannels(). // Set the range for the 4 channelsf; channels[0].setMinDisplay(0); channels[0].setMaxDisplay(255); channels[1].setMinDisplay(0); channels[1].setMaxDisplay(255); channels[2].setMinDisplay(0); channels[2].setMaxDisplay(255); channels[3].setMinDisplay(0); channels[3].setMaxDisplay(255). // Set the LUT color for the first channel & repaint; channels[0].setLUTColor(0, 0, 255); channels[1].setLUTColor(255, 255, 255); channels[2].setLUTColor(0, 255, 0); channels[3].setLUTColor(255, 0, 0). // Ensure the updates are visible; viewer.repaintEntireImage(). // Usually a good idea to print something, so we know it finished; print 'Done!'`. Regarding the pink staining actually it doesn't look like it's the label. It might just be a very low resolution scan, probably brightfield used by the scanner to detect the coverslip and slide.; Do you think it would need a Bio-Formats update for QuPath to access the label image? Or is this something that could be implemented directly in QuPath? The label must be somewhere in the `.scn` as I can see it if I open the image in imageJ, or other softwares (Definiens, Halo, ImageScope...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409927029:1058,detect,detect,1058,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409927029,1,['detect'],['detect']
Safety,"Thanks again, Pete!. I've tried it now and it updates both um/pixel and magnification, but I can't get it to work with the further script - probably because I'm doing some beginner mistake in the script setup - my programming ""knowledge"" is limited to cut and paste:). I run this and get the following error log (see below):. // Set the magnification & pixel size (be cautious!!!); def metadata = getCurrentImageData().getServer().getOriginalMetadata(); metadata.magnification = 40; metadata.pixelWidthMicrons = 0.25; metadata.pixelHeightMicrons = 0.25. setImageType('BRIGHTFIELD_H_DAB');; Thread.sleep(100); setColorDeconvolutionStains('{""Name"" : ""H-DAB TMA40x"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.82788 0.53885 0.15571 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.15891 0.36799 0.91615 "", ""Background"" : "" 210 208 209 ""}');; Thread.sleep(100); runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; Thread.sleep(100); selectAnnotations();; Thread.sleep(100); runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 14.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.09, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; Thread.sleep(100). Error log:. INFO: Starting script at Thu Sep 27 09:20:09 CEST 2018; ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.g",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:872,detect,detect,872,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['detect'],['detect']
Safety,"Thanks everyone for the feedback - I'll merge this for now to avoid making too much of a mess while merging other PRs, but might return to it later.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1279727287:62,avoid,avoid,62,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1279727287,1,['avoid'],['avoid']
Safety,"Thanks for considering the request. I think it would still be nice to be able to re-name within the hierarchy view. The pattern could be homologous to as in the ""Annotations"" view where under the ""Hierarchy"" view (right-click --> set-properties), so that users can predict and expect the behavior that they have already learned in the ""Annotations"" view ~ just as you suggested above.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-481330513:265,predict,predict,265,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-481330513,1,['predict'],['predict']
Safety,"Thanks for doing this! I've looked through the proposed changes, thoughts are below:. * For `getAllObjects()`, I suggest replacing; ```java; return objList.parallelStream().filter(e -> e.getClass() != PathRootObject.class).toArray(PathObject[]::new);; ```; with; ```java; return objList.parallelStream().filter(e -> e != hierarchy.getRootObject()).toArray(PathObject[]::new);; ```; because *conceivably* the root object might one day be subclassed or someone may have smuggled a `PathRootObject` wrongly into the hierarchy. (One could also use `e.isRootObject()`, which would handle the case of multiple root objects differently - the main thing is to avoid relying on class equality). * `selectAllObjects()` appears in both `QP` and `Commands` - can these be harmonized to avoid repetition?. * Specify in the javadoc for `selectAllObjects` that the root object is excluded. * We should avoid `OperationNotSupportedException` (doesn't seem intended for this use). * I'm not sure `PathObjectTransform` needs a new class; it could be added to `QP`. At least, it is currently confusing that `transformObject(s)` exists both in `PathObjectTransform` and in `PathObjectTools` (even though I understand the rationale in keeping `PathObjectTools` distinct, since the new method works on a hierarchy). Relatedly:; * `transformObjects` should take a `PathObjectHierarchy` if it doesn't require an `ImageData`; * I think 2 variations should exist that accept an `AffineTransform` or an `AffineTransformation` - since a list of `Number` is harder for a user (even if helpful for scripting). Although then I wonder... would a builder become a better way to handle it?. * An important use case is when we may want to transform *all* the objects in a hierarchy *and maintain the hierarchical relationships*. I think this requires a separate code path that recursively transforms all child objects, assigning them to the appropriately-transformed new parent object.; * A similar use case would be wanting to transfor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:652,avoid,avoid,652,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,3,['avoid'],['avoid']
Safety,"Thanks for logging this after our chat about it, I agree QuPath should provide this option somewhere. I thought the LUT method was cleverer (and more effort to get working...), and it avoids some of the 'my image is all black' bug reports that otherwise ensue when exporting grayscale images that all have low pixel values and previewing them in the operating system's default viewer. But Iit is indeed a bit annoying that it requires setting the `mode` to `L` when using PIL - and also requires getting that option somehow passed through to PIL if using some library on top of it (like `imageio`). I'll try to get an optional alternative for the next QuPath release that can just output grayscale labelled images instead.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/993#issuecomment-1159781538:184,avoid,avoids,184,https://qupath.github.io,https://github.com/qupath/qupath/issues/993#issuecomment-1159781538,1,['avoid'],['avoids']
Safety,"Thanks for the answer! I already tried this but I only could differ in; tumor cells between positive and negative. Is it possible to differ also; between positive and negative cells in the other classes I created in the; same step?. Le 12 avr. 2017 5:36 AM, ""Svidro"" <notifications@github.com> a écrit :. > Positive cell detection only works on the first go. Other ways to do it; > involve using the Classify by specific feature option under the Classify; > menu and choosing your cutoff there, while choosing the cutoff for your; > specific measurement for the given cell type (IE choose tumor as the input,; > and then positive tumor or negative tumor as the output). You may have to; > create the extra classes. The other way involves a one line script that; > classifies as positive or negative by the value you input.; >; > setCellIntensityClassifications(""Cytoplasm: DAB OD mean"", 0.15); >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/64#issuecomment-293464289>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AaDxoxUmBjQg_4-trBFaetrGH61sBP2-ks5rvEapgaJpZM4M641S>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/64#issuecomment-293474681:321,detect,detection,321,https://qupath.github.io,https://github.com/qupath/qupath/issues/64#issuecomment-293474681,1,['detect'],['detection']
Safety,"Thanks for the beta suggestion, I will check it out! . I attached an example of the data - it does not seem too different from some of the examples online. . ![image](https://user-images.githubusercontent.com/1241691/40502889-50725814-5f5a-11e8-9ffb-3f662387fa64.png). Curious, do you offer or plan to offer a supervised learning-based object detection tool, sort of like Ilastik? I develop a 3D image segmentation tool ITK-SNAP (for MRIs, CTs) and we have been successful with using random forests for segmentation. User paints some examples and the software extrapolates to the rest of the image. Unlike Ilastik we don't have the user generate engineered features, but just train using neighboring intensity values and let the random forest figure out which features are important and which aren't. The random forest code (C++) is fairly self-contained in case it is of any interest:. https://sourceforge.net/p/c3d/git/ci/master/tree/itkextras/RandomForest/. Thanks again,; Paul",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391804783:343,detect,detection,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391804783,1,['detect'],['detection']
Safety,"Thanks for the clear description & example - could you have a look at the pull request to see if that resolves the problem? If you're able to test it with all your thousands of ROIs that would be great, in case any new badness has been introduced. My hope is that this will only be important for updating 'old' ROIs, since anything new created in v0.2.0 from now on will use JTS from an earlier stage and avoid the Shape &rarr; Geometry pain. (Side note is interesting, I'll check it out!)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/434#issuecomment-610230010:405,avoid,avoid,405,https://qupath.github.io,https://github.com/qupath/qupath/issues/434#issuecomment-610230010,1,['avoid'],['avoid']
Safety,"Thanks for the quick reply. I just want to run the simple tissue detection plugin and then save the result. `runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 0, ""requestedDownsample"": 5.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 5000.0, ""darkBackground"": true, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');`. This is the automated script for my operation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/200#issuecomment-411335497:65,detect,detection,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/200#issuecomment-411335497,2,['detect'],"['detect', 'detection']"
Safety,"Thanks for the quick response. Converting to composite works. Is it an option to let QuPath do this automatically when the image type is set to Fluorescence? And for the standard ""Cell Detection"" the RGB Data was not a problem.; I overlooked the .cellConstrainScale(1.5) option.; You are right about the data not being the RAW data. This RAW data was lost by the researcher.; Thanks for the great program. We like QuPath a lot!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/686#issuecomment-804230107:185,Detect,Detection,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/686#issuecomment-804230107,1,['Detect'],['Detection']
Safety,"Thanks for the the snapshot, it looks like this issue: https://github.com/qupath/qupath/issues/80. If so, then the detection is bad but the actual counts of what is detected should be correct. I'm afraid this is an inherent limitation of the background estimation used by QuPath's cell detection. I describe the reason in some more detail and make suggestions at https://github.com/qupath/qupath/issues/80#issuecomment-305385370",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/318#issuecomment-494726466:115,detect,detection,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/318#issuecomment-494726466,3,['detect'],"['detected', 'detection']"
Safety,"Thanks for your answer. . For segmentation I use **DoG superpixel creator** which gives nice results on detecting individual nuclei. . Afterwards I try to use the one line macro as proposed in #85 : ; `saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle())`; to save the detected nuclei as separate image file. One exampel is shown in the follwoing screenshot (2 nuclei of interest):. ![01](https://user-images.githubusercontent.com/20478730/33028565-92f4738c-ce16-11e7-8fe5-88f1325027d2.PNG). However, the macro does only save annotations and segmented nculei are not classified as annotations (as objects/detections). . Is there a way to transfer the type/class of segmented nuclei to annotation type/class? This would make the macro work (I guess).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-345747414:104,detect,detecting,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-345747414,3,['detect'],"['detected', 'detecting', 'detections']"
Safety,"Thanks for your answer.; I tried to follow your tips, but I am a bit lost with the different steps and how to perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:127,Detect,Detect,127,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,3,"['Detect', 'detect']","['Detect', 'Detection', 'detection']"
Safety,"Thanks for your answers and trying to open them. I think I have always used bioformats to open .scn images. Regarding the different ROIs, I have to say that previously, I have managed to open .scn images with different ROIs. In QuPath, they would open as different images in the image list tab, which is fine to work with. But the bug.scn file is not >300 ROIs, it is meant to be a normal slide scan, and for some reason it seems to detect each tile as an individual ROI. It is frustrating to see that it opens fine in ImageScope, but not in QuPath... if this is a bioformat issue perhaps I should post on the bioformat page then... ps: I appreciate that mrx and scn files are annoying to work with, but there are unfortunately very common file types in the research/academic world at least...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/300#issuecomment-483588755:433,detect,detect,433,https://qupath.github.io,https://github.com/qupath/qupath/issues/300#issuecomment-483588755,1,['detect'],['detect']
Safety,Thanks for your reply Pete. . I have classified the cells before creating a detection classifier. Still its void classifier after wards.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-531642422:76,detect,detection,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-531642422,1,['detect'],['detection']
Safety,"Thanks! Changing this solved it. I'm now trying to quantify the number of dots as a ratio of nuclear:cytoplasmic location. I'm using the script at the bottom of this page:. https://github.com/qupath/qupath/wiki/Spot-detection. This tells me the location of the spot when it is selected. However, I want to know the number of nuclear vs cytoplasmic dots when the cell is selected. I guess the nearest measure of this (using the above script) is just the Nuclear DAB OD mean vs Cytoplasmic DAB mean, but I'd like to know the actual number of dots as a nuclear:cytoplasmic ratio if possible?. Apologies if this is a simple question!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346583086:216,detect,detection,216,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346583086,1,['detect'],['detection']
Safety,Thanks! this indeed solve the issue. I guess it would be nice to have an option to force QuPath to draw the grid even if the cores are not detected in a similar manner to what the script does.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-476218275:139,detect,detected,139,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-476218275,1,['detect'],['detected']
Safety,"Thanks, I made a small change to reinstate the imports that had been converted to starred imports* & fixed a few of my old formatting/doc issues. I can't replicate the bug on my Mac - if I drag a URL from chrome, the dragboard contains both a URL and a String - but good if it solves the problem somewhere. *-I've consistently avoided them & convinced my IntelliJ to stop doing it automatically - can discuss later if we want to change that policy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1730992725:327,avoid,avoided,327,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1730992725,1,['avoid'],['avoided']
Safety,"Thanks, I understand better now that the bug is connected to deserializing. I see that your JSON uses an 'old' (pre-v0.4) syntax:; ```json; { ""name"": ""Example"", ""parentClass"": {""name"": ""Parent""}, ""colorRGB"": 0}; ```; If I run the following in v0.4.3; ```groovy; def pc = getDerivedPathClass(getPathClass(""First""), ""Second""); println GsonTools.getInstance(true).toJson(pc); ```; I see; ```json; {; ""names"": [; ""First"",; ""Second""; ],; ""color"": [117, 210, 222]; }; ```; which was changed in v0.4 for better readability and easier support in other languages. Also, for deserializing you should use `gson = GsonTools.getInstance()` rather than `new Gson()`, because QuPath installs its own `TypeAdapters` to handle custom classes, including `PathClass`. So I implemented these changes in your script, randomizing the class names to avoid being thwarted by caching:; ```groovy; import qupath.lib.objects.classes.PathClass. for (useLegacyJson in [true, false]) {. String parentName = Math.random() as String; String childName = Math.random() as String; String json; if (useLegacyJson); json = """"""{ ""name"": ""${childName}"", ""parentClass"": {""name"": ""${parentName}""}, ""colorRGB"": 0}""""""; else; json = """"""{ ""names"": [""${parentName}"", ""${childName}""], ""color"": [0, 1, 2]}""""""; ; def gson = GsonTools.getInstance(); PathClass pathClass = gson.fromJson(json, PathClass.class); pathClass = PathClass.getSingleton(pathClass); PathClass parent1 = pathClass.getParentClass(); PathClass parent2 = PathClass.fromString(parentName); ; if (useLegacyJson); println ""With legacy JSON""; else; println ""With v0.4 JSON""; println(""getSingleton: "" + parent1.hashCode() + "" ("" + parent1 + "")""); println(""fromString: "" + parent2.hashCode() + "" ("" + parent2 + "")""); println(""Are equal: "" + (parent1===parent2)) ; println ""----------""; }; ```; From a typical run I see; ```; INFO: With legacy JSON; INFO: getSingleton: 1714766410 (0.07271672325316691); INFO: fromString: 2014375544 (0.07271672325316691); INFO: Are equal: false; INFO: --",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670267778:827,avoid,avoid,827,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670267778,1,['avoid'],['avoid']
Safety,"Thanks, I'll need to find time to explore this in more detail - it probably reveals an ugliness in how QuPath handles viewer interactions. I worry a bit about adding new event handlers, because it can become confusing which is called and when. Note that the move tool (as with other tools) defines a [`mousePressed(MouseEvent)`](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/MoveTool.java#L73) method. Conceivably, this or some other tool might do something with a middle button press. If so, then it might be hard to predict which method will actually be called. It's quite possible that both would be called. One way to ensure that one method is called before another `EventHandler` is to use an [`EventFilter`](https://docs.oracle.com/javafx/2/events/filters.htm)... although adding multiple event filters would presumably lead to the same kind of confusion regarding *their* order. For global application behavior that doesn't need to be customized, then I think it's best to include the logic in a single `EventHandler` or `EventFilter` rather than adding multiple ones. Having both an `EventFilter` and an `EventHandler` is fine because then we know the filter will be called first, but having more than one of either of them attached to a UI component is where the confusion starts. For that reason, my guess (without looking in detail!) is that the tool toggling should be implemented using an `EventFilter` attached to the scene (not viewer, because it's global to the application), somewhere [around here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1046). Where exactly would depend upon whether the middle click should switch the tool when the UI is blocked or not. Either way, you should probably make sure to consume the event after it has performed the switch. However I'm not sure... since I reached this conclusion by thinking about it rather than testing anything.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586:571,predict,predict,571,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586,1,['predict'],['predict']
Safety,"Thanks, can you try the QuPath v0.5.0 release candidate - https://github.com/qupath/qupath/releases/tag/v0.5.0-rc1 ?. This behaves different from v0.4.4, using OpenSlide to read the image. To me, it appears to behave properly - although has the limitation that if you add more than one of the dicom files, then the same image is effectively duplicated in the project. I'm not sure if that's expected or acceptable, but addressing it is probably not straightforward. Dicom is the only format I know that behaves in this way, and QuPath tries to avoid having to treat formats as a special case (relying upon OpenSlide or Bio-Formats to untangle the meaning of the image file paths provided).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1397#issuecomment-1773053854:544,avoid,avoid,544,https://qupath.github.io,https://github.com/qupath/qupath/issues/1397#issuecomment-1773053854,1,['avoid'],['avoid']
Safety,"Thanks, it is great to be able to go through the z-stacks. I find the viewer very responsive compared to other image analysis/viewing softwares!. The script to adjust fluorescence contrast is a fairly good/quick option to adjust the settings. One question though: is it possible to also adjust manually the default colours for each channels within the same script? I've tried something like `channels[0].setColor(color)` but it is not working.... do you know which code would do the trick?. Another question related to the `.scn` format. The first image is the label but appears all pink. Do you know a way of seeing the actual label? (which would normally display in other viewers, and wouldn't be pink). And the label doesn't seem recognised as a label by QuPath but is showing in the image list, I guess it could be possible to avoid this?. Many thanks",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409745698:831,avoid,avoid,831,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409745698,1,['avoid'],['avoid']
Safety,"Thanks, the command is unfinished & needs more attention at some point, but the fact it works for 'below threshold' is probably why I've never seen the issue (and it seemed to work for me when I tried it). > Side note: Classify Detections, when working off of a loaded classifier, seems to try to do something, then fails with a whole lot of:; `WARN: Classification Unclassified is invalid! Will be set to null instead`. Does it fail or is it just wordy? Because warnings aren't errors, this alone does not necessarily mean it fails.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/403#issuecomment-588528261:228,Detect,Detections,228,https://qupath.github.io,https://github.com/qupath/qupath/issues/403#issuecomment-588528261,1,['Detect'],['Detections']
Safety,"Thanks, there seems to be an issue with Bio-Formats reading the files, either not recognising them as pyramidal or only extracting the lowest resolution level. The contents of the 'Image' tab would give more useful information about what exactly is being read. There were recently issues with Aperio files reported at https://github.com/ome/bioformats/issues/3757; QuPath v0.3.2 reverts back to Bio-Formats 6.7.0 to try to avoid this specific issue but perhaps something related is going wrong. Forcing OpenSlide to be used as the reader rather than Bio-Formats may help: https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/14. Apart from that, I'd need an example failing image to be able to investigate further - but even then I'm not sure that this is a bug that can be fixed in QuPath. To get things working, it may require the problematic files to be supported in Bio-Formats. However... > If I run the code on the same image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. That does sounds strange. Assuming it's true, then I'm probably wrong in attributing it to Bio-Formats and it could indeed be a QuPath bug. But I'm afraid I have no way to exploring or fixing it. It would be helpful to know which QuPath versions works and which fail to be able to identify the problem more precisely. If I had to make a complete guess, it *might* have some connection with https://github.com/qupath/qupath/issues/894; If so, it *might* already be fixed if you [build from source](https://qupath.readthedocs.io/en/stable/docs/reference/building.html). I'd be interested if that's the case, but I don't recommend to using the current snapshot version (subject to change at any moment) - so would suggest reverting to the last working version instead. But I really am guessing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057108089:423,avoid,avoid,423,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057108089,1,['avoid'],['avoid']
Safety,"Thanks, this definitely needs changed. My guess is it happened while I was trying to lift the limit of measured channels (previously it was fixed at 8). Now that channel names can be stored, do you think this should be used in the measurements, e.g. 'DAPI (C1)' rather than the number alone? If so, I'd say this should be consistent between intensity measurements & cell detection and both ought to be updated. Any classifiers that use older names would break, but that may not be so bad... inasmuch as it's not a good idea to reuse classifiers across versions (at least where there has been major changes in between). It _does_ mean that channel names must be correct from the start. So they should be more easily fix-able than they currently are. One concern I had about doing this was that channel names could be weird, or wrong, or duplicated, or empty... but perhaps appending 'C1', 'C2' etc. is enough to mitigate this potential issue. Or 'Channel 1' etc. but the names risk becoming even more long and unwieldy. > Additionally, I am not sure if this feature could be parallelized?. It already is... should should see a difference if you reduce the number of parallel threads to 1. Or is there something I've missed?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-479346732:371,detect,detection,371,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-479346732,2,"['detect', 'risk']","['detection', 'risk']"
Safety,"Thanks, this is an interesting idea and certainly seems to help in the scenario you describe. I'm apprehensive about merging quickly because it would be quite a significant change, and add complexity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a cl",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:653,detect,detections,653,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,1,['detect'],['detections']
Safety,"Thanks, this is some excellent detective work!. Closing in favor of https://github.com/qupath/qupath/pull/1476 for v0.5.1 because it is simpler (and written based on the info you posted here), but we may revisit it as this is more listener-friendly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1462#issuecomment-1973332453:31,detect,detective,31,https://qupath.github.io,https://github.com/qupath/qupath/pull/1462#issuecomment-1973332453,1,['detect'],['detective']
Safety,"Thanks, this looks like a bug in the Bio-Formats extension. I can replicate the problem with the attached image. I've tracked it down to one line [here](https://github.com/qupath/qupath-bioformats-extension/blob/master/src/main/java/qupath/lib/images/servers/BioFormatsImageServer.java#L670) - presumably `mergeChannels` contains some logic to treat 4-channel 8-bit images are ARGB. If I open the image in ImageJ and save it as a multichannel image then all 4 channels are measured, as they should be. So it's not an inherent limitation in the cell detection. If I'm correct, most other combinations of channel numbers and bit-depths should be fine... It should be a fairly straightforward fix. I'm travelling at the moment, but will have a look soon.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/164#issuecomment-380835137:549,detect,detection,549,https://qupath.github.io,https://github.com/qupath/qupath/issues/164#issuecomment-380835137,1,['detect'],['detection']
Safety,"That is a tricky one. If your staining is DAB, have you tried _Analyze-> Cell Analysis->Cell+Membrane detection?_; Another option might be more of an area analysis. In other words, use QuPath to define areas (by SLICs/tiling) high in concentration of your membrane stain, then calculate the number of nuclei within those areas plus the average value of your membrane stain.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/227#issuecomment-428235577:102,detect,detection,102,https://qupath.github.io,https://github.com/qupath/qupath/issues/227#issuecomment-428235577,1,['detect'],['detection']
Safety,"That is correct, and as far as I know it is the only possible behavior for the simple tissue detection command. I have always added any extra annotations after that first step. . If you do not want that behavior, you could also create an ImageJ script that does something similar, and then run it on all existing annotations. Assuming the ImageJ script was set up correctly (downsampling to fit ImageJ's file size requirements, etc), you could use Thresholding+Analyze Particles and then return the created outlines as annotation objects. . That is actually more like what I do for fluorescent tissue detection, and it can work fairly well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-441513852:93,detect,detection,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-441513852,2,['detect'],['detection']
Safety,That is true for the TMA core export and my Tissue annotation but not for the txt output for all cells.; I'm referring to the Detection measurements for every core = single cells. Under the Name column it only says PathCellObject.; I've completed the cell analysis again and this is still the case.; Any suggestions appreciated.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289505578:126,Detect,Detection,126,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289505578,1,['Detect'],['Detection']
Safety,"That looks like the sort of thing that Simple Tissue Detection might work for with the correct settings. Something around 220 threshold maybe, with a medium requested pixel size and minimum area (keep setting these lower until you are picking up all of what you want). Also you will probably want to uncheck Single annotation. The requested pixel size is probably the most important measurement to play around with if you use this method. David beat me to it! His method is also probably better in the long run, though this gives another, slightly simpler method. I would also be careful about using too many features in your classifier, or at least make sure your training set is significantly larger than the number of features you use!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349094523:53,Detect,Detection,53,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349094523,1,['Detect'],['Detection']
Safety,"That sounds like it might be possible, as long as the mitotic nuclei are distinct enough visually to easily distinguish, but in the case of the Ki67 detection, that was done with DAB staining so the same method would not work on H&E slides. It is simply detecting ""brown"" in the cell. Perhaps a higher Hematoxylin OD or something similar would work for your H&E slides. It sounds very similar to things done with deep learning already, but may be possible with either a scripted classifier or the classifier function in QuPath as long as you can give it a big enough training set. . Though, this seems like less of a QuPath technical issue, and more of a [question for the forum](https://groups.google.com/forum/#!forum/qupath-users).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414434663:149,detect,detection,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414434663,2,['detect'],"['detecting', 'detection']"
Safety,"That's awesome. Thank you!. I will try to implement it with JTS, then.; However the implication is that ""Polygons do not contain their boundary"", correct? Does that mean that if I'm testing if a point `p` is inside the boundary or **on** the boundary, i should check that `JVT.Geometry.covers(p) || JVT.Geometry.intersects(p)`, right?. I'm saying this because of what the DE-9IM article says about the `contains`/`withIn` predicates; > This issue is caused by the final clause of the Contains definition above: ""at least one point of the interior of B lies in the interior of A"". For this case, the predicate Covers has more intuitive semantics (see definition), avoiding boundary considerations.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578:663,avoid,avoiding,663,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578,1,['avoid'],['avoiding']
Safety,"The ""Pixel value"" label has since been removed as well, to avoid wasting more vertical space.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1270#issuecomment-1600861461:59,avoid,avoid,59,https://qupath.github.io,https://github.com/qupath/qupath/pull/1270#issuecomment-1600861461,1,['avoid'],['avoid']
Safety,"The Brightness/Contrast dialog shows there are 4 channels, but 3 are turned off; the TMA dearrayer won't be affected by which channels are turned on/off there though. For such images, it uses [an average projection of all the channels](https://github.com/qupath/qupath/blob/v0.1.2/qupath-processing-ij/src/main/java/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.java#L237). It will most likely have correctly auto-set the image type as 'Fluorescence', but it's always worth checking under the 'Image' tab (in case this was changed / the auto detection of image type was turned off).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-410631215:330,detect,detect,330,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-410631215,2,['detect'],"['detect', 'detection']"
Safety,The TMA core is now included in the detection table in QuPath v0.2.0-m3 (and likely earlier milestones...).,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-518574610:36,detect,detection,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-518574610,1,['detect'],['detection']
Safety,"The backup will only show up, I think, if you have successfully saved the; file at least once. It isn't an autosave feature. Regarding the memory, 3.3 GB is quite low. For small scale testing I; usually got away with 16GB, and for larger projects 64+. I am not sure,; but you may be able to circumvent this somewhat by running each of your 4; ROIs in turn, and saving after each. On Nov 9, 2017 9:23 AM, ""Eline8"" <notifications@github.com> wrote:. > Thank you both for answering! @Svidro <https://github.com/svidro> and; > @petebankhead <https://github.com/petebankhead>; > I started all over again, so I don't have the workflow anymore.; > Nevertheless, what I meant was that I used indeed the pointing tool. I had; > two populations, one negative and one positive. After I ran the positive; > cell detection, the negative population was gone. And unfortunately, there; > is no undo button.; >; > My goal was indeed compare the manual counting and the automated counting.; > For optimization.; >; > I don't know whether the error is the lack of RAM, I checked and i have; > 3,3GB available. And I only have 4 ROI's in one image. When I run the; > analysis, I make sure nothing is selected and choose the option 'all; > annotation'. It might be, but it might be not, because sometimes it also; > does not analyse only 1 ROI, but other times it does. However, the log it; > says 'memory error'. the programs that are running on my computer besides; > Qupaht are google chrome (1tab), one note with an excel file, and file; > explorer.; >; > [image: capture]; > <https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG>; > [image: capture2]; > <https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG>; > [image: capture3]; > <https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG>; >; > I really don't know why sometimes it works or not, but i'll be more; > careful",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343229740:800,detect,detection,800,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343229740,1,['detect'],['detection']
Safety,"The behavior has been unchanged in v0.2.0 milestones for many months (without previous complaint) and it is now too late to make any substantial change before v0.2.0. QuPath v0.1.2 handled projects in a much simpler way, but this is insufficient for many recent and planned features for which a single local file path isn't enough to identify an image. v0.2.0 therefore stores both the absolute and relative paths. If the relative path to the project file is maintained, QuPath will show a dialog and prepopulate the necessary changes to the absolute paths to update the project. The user only has to accept these changes and the project will be updated. This should allow everything to be 'corrected' immediately when the project is opened. If the absolute paths were *not* updated, then resolving relative paths every time they are required would be rather a lot more complex, and could result in projects being silently updated in unexpected ways (e.g. when changing an image name, trigging the project file to be rewritten). The current behavior aims to strike a compromise between being easy to use and not causing unexpected problems. To avoid the 'update URIs' dialog in am multi-user setting, each user can duplicate the *project.qpproj* file and use the duplicate as their own view on it, i.e. they open and update the project file to contain the absolute paths relevant to them. To facilitate this, when dragging a project directory on top of QuPath one can choose the precise file to open from a drop-down list. There is also a *Recent Projects* option to reopen the last project. > **Please respect the request to use image.sc for questions and discussions, not GitHub.**; > ![bug report](https://user-images.githubusercontent.com/4690904/80976463-68b25400-8e1b-11ea-8c19-739a35dd4942.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/468#issuecomment-623497951:1144,avoid,avoid,1144,https://qupath.github.io,https://github.com/qupath/qupath/issues/468#issuecomment-623497951,1,['avoid'],['avoid']
Safety,"The core images are loaded in a background thread, and there is a 5 second timeout associated with this - see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L254). One possibility is that the timeout isn't generous enough in your case, and the cores are not being loaded fast enough. I don't know why that would be the case... it might be to do with the computer specifications, where the image is located (a network share?), or the access time required for the specific file format. Another option is that there are just too many cores. That is my best guess, since the scrollbar thumb on the right in your screenshot looks very small. There is a limit to the size of the cache used to store the TMA cores to reduce the risk of memory errors, see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L133) for the location in the code. Currently there is no way to increase the size of the cache through the user interface to support more cores in the grid view. Although, as is often the case, there is a way through a script. You could try running this to double the cache size to see if it helps.; ```groovy; qupath.lib.gui.commands.TMAGridView.MAX_CACHE_SIZE = 500; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-326105429:75,timeout,timeout,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-326105429,3,"['risk', 'timeout']","['risk', 'timeout']"
Safety,"The darkish background seems to be causing QuPath to estimate the wrong image type; double-click where it says 'Fluorescence' in the left tab of your screenshot, and change this to something more appropriate. Then reopen the cell detection command and the correct options should appear. (There is some more explanation of this at the start of the new [video tutorials](https://petebankhead.github.io/qupath/2018/08/22/qupath-video-tutorials.html))",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/226#issuecomment-426971226:230,detect,detection,230,https://qupath.github.io,https://github.com/qupath/qupath/issues/226#issuecomment-426971226,1,['detect'],['detection']
Safety,"The following image and script show the differences in how objects might be requested from the object hierarchy. The tests that each cell object passes contribute to the classification assigned, so that; * if two cells have the same color you can assume they were returned by the same methods; * if two cells have different colors, then at least one cell was returned by at least one method that didn't return the other cell (e.g. it intersects the selected ROI, but isn't completely covered by it). ![image](https://github.com/user-attachments/assets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:777,detect,detections,777,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,2,['detect'],['detections']
Safety,"The interface will generally use the second color vector as its detection channel for the subcellular detection, so make sure that color vector is set to your fast red. If you need to do 2 color, I recommend setting the image type to Brightfield Other, though that has its own dangers! You are not locked into using DAB. I think changing the name of the color vector also changes the description in the subcellular detection dialog.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346389148:64,detect,detection,64,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346389148,3,['detect'],['detection']
Safety,"The last commit adds a toolbar button to show detection 'connections' (neighbors based on a Delaunay triangulation):. ![image](https://github.com/user-attachments/assets/90878352-9335-4163-aa36-9f1517225b31). This was previously available under the *View* command, but only actively did anything if the *Delaunay cluster features 2D* command had been run. Now, it can be used at any time and will show connecting lines for cells (if available), or detections (if there are no cells). Currently, it is only a visual tool - using the new features require scripts such as those described above.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1597#issuecomment-2305236713:46,detect,detection,46,https://qupath.github.io,https://github.com/qupath/qupath/pull/1597#issuecomment-2305236713,2,['detect'],"['detection', 'detections']"
Safety,The last commit should avoid showing an error message unnecessarily.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/503#issuecomment-633205314:23,avoid,avoid,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/503#issuecomment-633205314,1,['avoid'],['avoid']
Safety,"The latter will only provide features depending on what boxes are checked, and only for the detections you choose (cells, SLICS, whatever you happen to have selected, etc). I don't know that it will work if you just have large annotations, but if you choose annotations after running it, it will look ""inside"" all annotations for detections to apply the Calculate Features to. ; Edit: Whoops, nix that last part, finally got around to playing with it and reminding myself how it works. It will apply the measurements to the annotation, but if you are classifying detections, the measurements you created will not show up as they would only be part of the annotation itself, as Peter first said. You also need to have one or more ""Basic Features"" selected in order for it to generate something off of the Color Transforms you select.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/63#issuecomment-293368367:92,detect,detections,92,https://qupath.github.io,https://github.com/qupath/qupath/issues/63#issuecomment-293368367,3,['detect'],['detections']
Safety,"The minus key on my main keyboard and the minus key on my number pad both cause; zooming-in / increased magnification. Both of my + keys don’t do anything. From: MicroscopyRA <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 1:26 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). Right, that was the first part, sorry for lack of clarity. Num lock on or off has no impact. ""The + and - keys no the num pad do nothing when I use them."". —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640795671&data=02%7C01%7Ckyee%40umc.edu%7C3f6606e691e84856b92008d80bd9728c%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272375844340509&sdata=PdIW4tJzmYbxH24BlWci00hk0WXzvZf6SoWFDKxEnks%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNEZE2DLPTDWWMJINGMLRVUUM3ANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C3f6606e691e84856b92008d80bd9728c%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272375844350502&sdata=80Q8pB3Tqf9csexrlxWph406VYzvfheP775lDTJ9y6Q%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640799956:759,safe,safelinks,759,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640799956,2,['safe'],['safelinks']
Safety,"The other option, if the stain is overlapping the nucleus significantly, is to just use the subcellular detection tool (again with a smaller cell expansion), and set a threshold based on the amount of area that shows up ""pink.""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/83#issuecomment-314861290:104,detect,detection,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/83#issuecomment-314861290,1,['detect'],['detection']
Safety,"The path is now a URI, which is useful in distinguishing between a local file and something else (e.g. image hosted with OMERO). Additionally, a URI might have some additional info (query or fragment) necessary to distinguish a specific image found within the same file. The critical thing is that the path should be unique for each image because it is used for caching image tiles, but it isn't safe to assume that it is a valid path to a local file. Probably `buildFilePath` happened to work before because the path _was_ usually a path to a local file (albeit sometimes with an extra identifier appended for Bio-Formats) but it wasn't really intended to. Its main purpose was to build paths relative to the project directory*. I'm not sure what the purpose of `buildFilePath(path)` is in your script, but it probably now needs replaced with something else. Otherwise, even if the URI thing was dealt with your script wouldn't work with OMERO-hosted files (and probably others read by Bio-Formats). > *-Although projects aren't now guaranteed to be local directories either, since a project is now an interface which would be implemented in some other way...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/289#issuecomment-474156600:396,safe,safe,396,https://qupath.github.io,https://github.com/qupath/qupath/issues/289#issuecomment-474156600,1,['safe'],['safe']
Safety,"The reason I chose the more general 'Object classification' is thinking about the future. Even though the existing commends mostly focus on object classification for detections only, future commands might not be. And extensions might add commands to classify in a different way. For example, here's a script that adds a basic command to classify annotations based on the shape of the ROI:; ```groovy; import javafx.application.Platform; import javafx.scene.control.MenuItem; import qupath.lib.gui.QuPathGUI; import qupath.lib.gui.dialogs.Dialogs; import qupath.lib.objects.PathObject; import qupath.lib.objects.classes.PathClass. commandName = ""Classify annotations"". Platform.runLater {; installCommand(); Dialogs.showInfoNotification(commandName, ""Command installed!""); }. def installCommand() {; def menu = QuPathGUI.getInstance().getMenu(""Classify > Object classification"", false); def mi = menu.getItems(); .stream(); .filter(m -> commandName.equals(m.getText())); .findAny().orElse(null); if (mi == null) {; mi = new MenuItem(commandName); menu.getItems().add(mi); }; mi.setOnAction {e -> classifyAnnotations()}; }. def classifyAnnotations() {; def imageData = QuPathGUI.getInstance().getImageData(); def annotations = imageData == null ? [] : imageData.getHierarchy().getAnnotationObjects(); if (annotations.isEmpty()) {; Dialogs.showWarningNotification(""Classify annotations"", ""No annotations found!""); return; }; for (def annotation in annotations); classifySingleAnnotation(annotation); imageData.getHierarchy().fireObjectClassificationsChangedEvent(this, annotations); }. def classifySingleAnnotation(PathObject pathObject) {; def roiName = pathObject.getROI()?.getRoiName(); pathObject.setPathClass(PathClass.getInstance(roiName)); }; ```. I think it makes sense for such classifiers to be added to a single *Object classification* submenu, rather than split between *Detection* and *Annotation* (also, there might one day be a need to classify *TMA cores*, which don't fit into either cat",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110:166,detect,detections,166,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110,1,['detect'],['detections']
Safety,"The safest way is probably to use Docker or something similiar. ons. 22. sep. 2021, 17:38 skrev Pete ***@***.***>:. > Ah ok, then I'm afraid I have no idea and no way to reproduce the problem.; > It is working for me on all my test systems (but I haven't got CentOS; > installed anywhere).; >; > I can't see any obvious clues to a problem within QuPath's code from the; > error. The versions of Java, JavaFX and jpackage have been updated for; > v0.3.0, not sure if that is related.; >; > One option would be to try building from source; > <https://qupath.readthedocs.io/en/stable/docs/reference/building.html>; > using a different JDK, or launch using ./gradlew run (which would skip; > the jpackage part).; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/825#issuecomment-925047351>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AH7WSL62XZNUGJTSADEHNB3UDHZ6HANCNFSM5ERSPAHA>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.; >; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825#issuecomment-925051403:4,safe,safest,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/825#issuecomment-925051403,1,['safe'],['safest']
Safety,"The title of this issue is issue looks quite dramatic, but I don't understand what the error is at all. Can you explain further? Was cell detection applied to a brightfield image with the image type set to 'Fluorescence'?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/153#issuecomment-370398858:138,detect,detection,138,https://qupath.github.io,https://github.com/qupath/qupath/issues/153#issuecomment-370398858,1,['detect'],['detection']
Safety,"There are a couple of ways to approach this, and it somewhat depends on how you are handling your analysis and what you are analyzing. With more information I might be able to be more specific. If your DAB staining is cytoplasmic (immune markers?) and you are having trouble with accurate positivity due to the carbon spots, you can use subcellular detection to find the spots, then subtract out the contribution of the spots from that cell for a new mean OD. Use a color vector set like below, perform the subcellular detection on the ""black"" channel. With the area of black spots times the mean DAB contribution within each spot, you could create a sum which could then be deducted from the DAB stain within the cell (also mean times area). Specifics depend on staining!. Blue is often a great way of picking up these spots, but while you could alter your annotation area to exclude the black spots (SLICs/classify/merge, very processing intensive), your Cell Expansion can still allow the cytoplasm to occupy these areas outside of your annotation. `setColorDeconvolutionStains('{""Name"" : ""CarbonDetection"", ""Stain 1"" : ""Black"", ""Values 1"" : ""0.57132 0.63886 0.51521 "", ""Stain 2"" : ""NotBlack"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');`. You can change color vectors as much as you want throughout your experiment, so you do not need to change the image type to H&E, the above line in a script can be modified for whatever color vectors you want.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/172#issuecomment-387779230:349,detect,detection,349,https://qupath.github.io,https://github.com/qupath/qupath/issues/172#issuecomment-387779230,2,['detect'],['detection']
Safety,"There is a shape simplification step used when viewing annotations at a lower resolution, to avoid needing to paint all the vertices frequently. I'm not sure why it is failing in this case. Does the issue occur only when combined with your code, or also when QuPath is used alone?; Can you provide any steps to reproduce, or files containing annotations that exhibit this behavior?. Just in case, note that ROIs are supposed to be immutable - so if any exterior code violates that (e.g. by manipulating private fields with ROIs) then the result would be Bad.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/416#issuecomment-601616473:93,avoid,avoid,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/416#issuecomment-601616473,1,['avoid'],['avoid']
Safety,"There should be a variety of ways to do this in a script. One would be selecting each annotation in turn using getAnnotationObjects() and looping through them. For each annotation you generate your detections, output detections, then clear detections.; Another way could be to use a loop to a classification for each annotation (Class1, Class2, etc) and then you will end up with one data file, but the detection entries would be easily separable based on the classification column.; In version 1.3, there is a column that names the parent annotation for each detection, which could also be used to select certain detections without creating a classification.; Version 1.3 installation instructions (it is a test version!) can be found here: https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/225#issuecomment-427051030:198,detect,detections,198,https://qupath.github.io,https://github.com/qupath/qupath/issues/225#issuecomment-427051030,6,['detect'],"['detection', 'detections']"
Safety,"There's a description of how I've done it in the past in the [Scientific Reports paper](https://www.nature.com/articles/s41598-017-17204-5). In particular, see the [Supplementary material](https://static-content.springer.com/esm/art%3A10.1038%2Fs41598-017-17204-5/MediaObjects/41598_2017_17204_MOESM1_ESM.pdf) - especially around p 13. The supplementary material also shows a really elaborate script on p15... but actually it's *much* simpler now:; ```groovy; setCellIntensityClassifications('Cell: DAB OD max', 0.35); ```. However, all of that is too complicated If you are will to draw regions of interest, and don't need to bother with separating out epithelial/non-epithelial cells (which may be really difficult and not accurate enough in brightfield images for PD-L1). In that case, it should be much easier to simply run *Positive cell detection* as described [here](https://github.com/qupath/qupath/wiki/Detecting-objects). The only thing you should need to chnage is the measurement at the bottom (*Nucleus: DAB OD mean* probably isn't right, *Cell: DAB OD max* or *Cell: DAB OD mean* should do better).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/161#issuecomment-375336894:843,detect,detection,843,https://qupath.github.io,https://github.com/qupath/qupath/issues/161#issuecomment-375336894,2,"['Detect', 'detect']","['Detecting-objects', 'detection']"
Safety,"Thinking a bit more, a compromise option could be:; * keep the primary selected object if it's still selected in the new group, and; * set the primary selected object if there is only one object in the selection group, but not if there is more than one. Might be safer than selecting an object at random, and reduce the instances where the primary selected object is null slightly. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869219402:263,safe,safer,263,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869219402,1,['safe'],['safer']
Safety,"This happens whenever QuPath is unable to detect any cores. There are a few reasons why this may occur:. * The *Image type* is wrong (e.g. set to fluorescence rather than brightfield) - this can be seen after clicking on the *Image* tab on the left. There is a screenshot [here](https://github.com/qupath/qupath/wiki/Preprocessing#viewing-the-default-stain-vectors).; * The specified TMA core diameter is either too large or too small. QuPath determines the expected TMA grid from 'complete' cores, which have a diameter within a small tolerance of the value set in the dialog box. If no cores fall within this tolerance, the grid cannot be found.; * The intensity threshold is either too high or too low (but it is automatically determined from the data, and I don't see any reason in your image why it would be determined wrongly). If the image type is set correctly, then I would try increasing and decreasing the *TMA core diameter* to see if this gives any improvements. If not, then there may be some issue happening internally when trying to read from the CZI file - although I have not seen such a problem before. The contents of *View &rarr; Show log* may be helpful to track down the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/48#issuecomment-276482533:42,detect,detect,42,https://qupath.github.io,https://github.com/qupath/qupath/issues/48#issuecomment-276482533,1,['detect'],['detect']
Safety,"This is a very shoddy way of doing the detections per annotation, and is written for version 1.2 where the default names might not be unique. 1.3 could simply use the annotation name instead of incremental numbers. If the annotations were all uniquely (manually) named, that could potentially be used for the file name.; https://gist.github.com/Svidro/5e4c29630e8d2ef36988184987d1028f#file-export-detections-per-annotation-groovy. Note that this is very slow and poorly written :) It would be much more elegant to write out the detection measurements that had already been created by using getChildObjects... but this was something I could easily do!. Good luck and let me know if you have any questions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/234#issuecomment-432762268:39,detect,detections,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/234#issuecomment-432762268,3,['detect'],"['detection', 'detections', 'detections-per-annotation-groovy']"
Safety,"This is intended behavior rather than a bug, although I'm not sure if it is the *right* intended behavior. The ability to load points wasn't really intended for this purpose - rather, it's an easy way to exchange points with other software (e.g. someone writes a Python script and wants to visualize detected locations within QuPath). The current implementation is agnostic regarding whether a name or classification is set during export. The current *best* way to export/import annotations is using a method described at https://qupath.readthedocs.io/en/latest/docs/advanced/exporting_annotations.html (probably GeoJSON). This should preserve the class (if not, then that *would* be a bug). With that in mind, I don't know if it's better to 1) add complexity to the save/load command to support classes, or 2) remove those buttons altogether (since I suspect it is rarely used for its original purpose, and points can be loaded by scripting anyway). What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/410#issuecomment-597049593:300,detect,detected,300,https://qupath.github.io,https://github.com/qupath/qupath/issues/410#issuecomment-597049593,1,['detect'],['detected']
Safety,"This is kinda related but probably deserves it's own question. But I was wondering if there was a way to show the child objects inside the viewer for Tiles?. Here is a picture of my object hierarchy and current viewer:; ![children objects of tiles are not shown in viewer](https://user-images.githubusercontent.com/28576964/185491229-dc4943de-b770-4f1f-8117-7141399bee4f.png). I want all the children objects (which are detections/tiles) to be shown inside each tile:; ![selected children objects of tiles are not shown in viewer](https://user-images.githubusercontent.com/28576964/185491329-3c2123ad-214e-41ba-b8f3-787496c100ea.png). I tried changing child objects from tiles to detections, but they won't show in the viewer unless I click on each of the children individually. Is there a setting I am missing to show all child objects inside of tiles?. Thank you again for your help. EDIT: Actually this works fine after reloading the data. Sorry, you can ignore this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219943848:420,detect,detections,420,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219943848,2,['detect'],['detections']
Safety,"This is somewhat by design (in that the command history only logs things that are relevant to batch processing, and generally avoids GUI-related commands for showing/hiding things). Nevertheless, certainly there needs to be some way to script either the display or export of annotation measurements.... and currently there isn't. My feeling is that whenever you run *Show Annotation Measurements* this shouldn't be recorded (because it's purely a display thing, which shouldn't happen in a batch script), but if you press *Save* then the export of the annotation measurements should be recorded in the command history. What do you think? Would this do what you need, or do you think it's also necessary to be able to script showing the table as well?. In the meantime, my way to handle needing to run the same interactive command repeatedly across multiple images in a project is to open the images one at a time while keeping keep *View &rarr; Show command list* open, and turning off the *Auto close* option. It's not optimal, but at least that way there's no need to return to the menus too often. ![command_list](https://cloud.githubusercontent.com/assets/4690904/20482972/917901e2-afe7-11e6-9474-1818edb79985.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-261927806:126,avoid,avoids,126,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-261927806,1,['avoid'],['avoids']
Safety,"This is the macro shown above, included as an example:; ```java; /*; * ImageJ macro to apply an automated threshold to detect a single region.; * You will need to return the active Roi to see the results in QuPath.; */. // Define method (e.g. ""Triangle"", ""Otsu""...); method = ""Otsu"";. // Check if the image has a property specifying a dark background; // Override this by setting the value to true or false; if (Property.get(""qupath.image.background"")==""dark""); darkBackground = true;; else; darkBackground = false;. // Ensure 8-bit grayscale; resetMinAndMax();; run(""8-bit"");. // Create Roi from threshold; if (darkBackground); setAutoThreshold(method + "" dark"");; else; setAutoThreshold(method);; run(""Create Selection"");; ```; This effectively makes it possible to apply any of ImageJ's auto thresholding methods to any region of an image (or the entire image) - adapting for brightfield or fluorescence based on the image type. The resolution and channel can be specified from within QuPath's UI when the region is being sent.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1682#issuecomment-2425148249:119,detect,detect,119,https://qupath.github.io,https://github.com/qupath/qupath/pull/1682#issuecomment-2425148249,1,['detect'],['detect']
Safety,This isn't a bug - by default annotations created this way are 'locked' to reduce the risk of editing them accidentally. There is some more information about locking [here](https://github.com/qupath/qupath/wiki/Working-with-objects#editing--locking-objects). You can right-click on the image and choose *Annotations &rarr; Unlock* if you need to be able to edit a locked annotation.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/82#issuecomment-314169636:86,risk,risk,86,https://qupath.github.io,https://github.com/qupath/qupath/issues/82#issuecomment-314169636,1,['risk'],['risk']
Safety,"This isn't actually a bug... showing/hiding the names is an `overlay option`. These are not global, and none are persistent. They are like showing/hiding detections or annotations, which are also not persistent. There is probably an argument for making them persistent, but this gets tricky because multiple non-identical instances of [OverlayOptions](https://github.com/qupath/qupath/blob/42cedef3d9252f974f77d2af6d3d3445081406c9/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/OverlayOptions.java) can exist - in which case QuPath would need to distinguish between which options are persistent and which aren't. This would be doable, but would take a bit of thought. I don't really want to introduce several more persistent preferences at this stage, immediately before the stable release, when the current behavior is not actually buggy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/499#issuecomment-632624472:154,detect,detections,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/499#issuecomment-632624472,1,['detect'],['detections']
Safety,"This looks expected to me, and not a bug. The image will be opened using the server defined within the project. The script simply re-opens the same image using Bio-Formats. If you are generating a project, you can specify the *Image provider* to be Bio-Formats at that point, thereby avoiding the need to use the script at all.; https://qupath.readthedocs.io/en/latest/docs/tutorials/projects.html#add-images",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/658#issuecomment-754589459:284,avoid,avoiding,284,https://qupath.github.io,https://github.com/qupath/qupath/issues/658#issuecomment-754589459,1,['avoid'],['avoiding']
Safety,"This looks good and very useful! Nice touches with auto-updating the image name based on the delimiter, and auto-disabling the column include/exclude as needed :). Some small things:; * Beware invalid characters in the fields... if the filename contains commas, the entire table becomes shifted if exporting as .csv. It appears to work properly (at least in MS Excel) if the name is enclosed in ""inverted commas"". There are rules for this [here](https://en.wikipedia.org/wiki/Comma-separated_values#Basic_rules).; * Avoid including spaces when before/after the delimiter.; * Try to get the controls to align at the right, and fill the entire space at the bottom of the dialog. For example, for the combo boxes you'll need to set the max width to Double.MAX_VALUE and (assuming you're using a GridPane) some other grow/fill properties (I forget which).; * Rename 'Choose path' to 'Choose...' and 'Output File' to 'Output file' (for capitalization consistency), and add tooltip text to this row.; * Change 'Apply on' to 'Export type' or similar. Try adding 'Image' as an option, i.e. the root object, and perhaps also TMA cores. 'Image' should probably be the default.; * Add tooltip to the 'Output File' option (and rename to 'Output file' for consistency); * Fix the tooltip for 'Columns to exclude' (says 'include'); * Revise the javadocs for 'ProjectDialogs'; add for getSourceItems, and standardize for createImageChoicePane (i.e. use the `@param` tags). Not essential at this point, but after playing with it a bit I think there would be a way to improve the control even further: the choice of columns could be a CheckComboBox, which is populated *if* the user presses a *Populate* button. This needs to be an explicit choice, because it would require opening all the currently-selected images to figure out which column headings are available... and this may be slow. Perhaps not worth the effort for now, having this at all will be a major improvement!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/425#issuecomment-606125263:516,Avoid,Avoid,516,https://qupath.github.io,https://github.com/qupath/qupath/pull/425#issuecomment-606125263,1,['Avoid'],['Avoid']
Safety,"This relates to https://github.com/qupath/qupath/issues/1634. Because CUDA detection and PyTorch downloading is all performed by DeepJavaLibrary, we are very limited in what we can do on the QuPath side. Then there is the issue of how Java loads native library dependencies - and especially the platform-specific fun of how *sub*-dependencies are handled. And the potential interference of environment variables or other things that could be installed. It is, in short, hard. The page on the docs is currently our best 'general' approach to help with this, based on many hours trying to find something workable across computers: https://qupath.readthedocs.io/en/stable/docs/deep/gpu.html#gpu-support. We will continue to try to improve this, but I'll close the issue because I don't think there is any clearly-defined QuPath bug here that we can address. To try to avoid fragmenting the discussion in multiple places, I suggest posting on the forum. There are more users active on the forum who might potentially be able to help from their own experience, and there are already some related discussions, e.g. https://forum.image.sc/search?q=qupath%20gpu%20order%3Alatest",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057:75,detect,detection,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"This was the WatershedCellDetection, for some reason, I have gotten this type of tiling variability on ~10% of my files. . setImageType('UNSET');; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 235, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 10000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 50.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');; runClassifier('/Users/elijahedmondson/Desktop/Projects/MetH/classifiers/MetH.qpclassifier');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759 "", ""Background"" : "" 255 255 255 ""}');",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80#issuecomment-305265833:428,detect,detect,428,https://qupath.github.io,https://github.com/qupath/qupath/issues/80#issuecomment-305265833,3,['detect'],"['detect', 'detectionImageBrightfield']"
Safety,TileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bi,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:1890,detect,detect,1890,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,1,['detect'],['detect']
Safety,"To answer your question, when I do the debug seting in imagej I can se ethat the threshold fails quite extremely. Perhaps it's becasue the threshold expects a light image on a dark bkrd. Or, it could be due to the other channels in my image, some of which are extremely noisy and really ought to be excluded from the threshold calculation. I think it would be useful if we could perform simple processing (brightness/contrast) on the core image before it's sent to imJ for core detection.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-411736810:478,detect,detection,478,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-411736810,1,['detect'],['detection']
Safety,"To clarify, since you know more coding than I do, you are replacing an ROI of the exact same coordinates with a pathCellObject.; Here is the code from somewhere on the forum: https://gist.github.com/Svidro/5829ba53f927e79bb6e370a6a6747cfd#file-change-annotations-into-cell-objects-groovy. That script is designed to target second ""level"" annotations as it was written to ignore the top level annotation and convert hand drawn annotations within into cells. You will probably want to change line 8:. `def targets = getObjects{return it.getLevel()!=1 && it.isAnnotation()}`. to use something like ""getAnnotationObjects()"" if you do not have any annotation hierarchy.; If your area is too large, the subcellular detection may fail (it will be obvious if it happens, you get no segmentation). I have had it work successfully over very large areas, but on a whole slide, I had to create subdivisions. I am not 100% sure what the limits are. If you run into that problem, you could also create your annotation area, tile it, and then convert the tiles into cells.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-392080198:709,detect,detection,709,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-392080198,1,['detect'],['detection']
Safety,Unfortunately I only have a linux system... Does the ome.tif from the attached tar.gz in https://github.com/libvips/libvips/issues/3397 look fine in those viewers (exported with QuPath)? . Perhaps the image is exported differently on linux or maybe those viewers are able to detect and correct it.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1254#issuecomment-1481590484:275,detect,detect,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/1254#issuecomment-1481590484,1,['detect'],['detect']
Safety,"Unless you can automate detection of the tumor area by texture for each (in which case you can handle every image independently anyway), I can't think of an easy way to do that with un-adjusted images within QuPath unless you already knew the X-Y shift and rotational angle change each time. That said, there is software out there that can automatically align whole slide samples, though this can often be a time consuming process (depending on the resolution/computer speed/etc). . This thread has some additional info: https://groups.google.com/forum/#!searchin/qupath-users/slidematch%7Csort:date/qupath-users/XNdaWK_9Ex4/-w8T4cqGBAAJ; and some other recommended free software: https://groups.google.com/forum/#!searchin/qupath-users/slidematch%7Csort:date/qupath-users/VLJL6UCXqEk/c9j-RCMVBAAJ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/171#issuecomment-384084486:24,detect,detection,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/171#issuecomment-384084486,1,['detect'],['detection']
Safety,"Upon further reflection, my understanding is that you likely ran positive cell detection in a ROI that was the 'parent object' for the negative point class - but not the positive class - which is why the negative points only disappeared*. When you run cell detection with a 'parent object' selected, then any 'child objects' inside it will automatically be deleted, and replaced with the detected cells. This is *usually* the right/most intuitive thing that should happen, and is not a bug. If this didn’t happen, then you if ran the cell detection command twice with the same parent selected, you would end up having every cell counted twice - not to mention the strange things that might happen with overlapping objects if you were to run other tiling/superpixel commands. It's not clear to me what was the purpose of doing manual counts followed by automated counts within the exact same region, but (as you've found) it is something that is not supported. You *could* do it the opposite way (i.e. automated counts followed by manual counts). However, if it was my goal to compare manual and automated cell counting then I would do the automatic counts in duplicate project and keep the data separated. Furthermore, you can do automated counts and then select 'Convert detections to points' within the 'Points tool' to initialize the (manually-editable) points that can subsequently be modified to generate 'semi-automated counts'. With regard to being unable to reopen a data file, this is something that has been reported some months ago (e.g. #58), but I'm not aware of it being an ongoing problem - or at least not one I have ever been able to reproduce. If QuPath fails to write a complete data file, then you should find that a '.qpdata.backup' file exits somewhere inside your project/data folder. If you strip the '.backup' data part from the file name, then it should be possible to recover the last saved version. > *-Information about the object hierarchy is at https://github.com/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342941759:79,detect,detection,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342941759,4,['detect'],"['detected', 'detection']"
Safety,"WOW!; Thanks for the great answer!; Unfortunately I am not currently at home; I was only able to test it on my notebook, which sometimes crashes.; Still, thanks to You I got a very good result:; https://i.imgur.com/3eaQ7s1.jpg; All the positive areas are detected and the % of positive staining in selected area is also calculated (the main idea is to show that the expression of positive staining changes depending on the cancers grade).; I will only be able to take an adequate try in a couple of days.; Anyway, I am very grateful!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-373134413:255,detect,detected,255,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-373134413,1,['detect'],['detected']
Safety,"Well, clearly I didn't actually read the error message, sorry... looks like it's OpenCV and not OpenSlide that seems to be triggering the trouble.; Could you replace `openslide` with `opencv` in those last instructions...?. Or if you are feeling particularly bold you could also try switching to the `java9` branch on my fork, where I am trying out a different version of OpenCV - which might possibly avoid the problem entirely.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368861735:402,avoid,avoid,402,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368861735,1,['avoid'],['avoid']
Safety,"Well, you can avoid both reflection and scripting if you go to [QPEx](https://github.com/qupath/qupath/blob/6ebd4a296e05b89bca3466a14a7d7cf79eb3fad4/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java#L336).... but no absolute promises that won't be broken in the future either :). Ok, I will explain some more and hope it will be sufficient. QuPath is divided into modules. This modular design is a work-in-progress, but it is essential to keep the design coherent/improve it where possible. `ImageDisplay` requires JavaFX. That means that using it in *any* module will bring in a (quite huge) JavaFX dependency to that module. That means the core modules (which are currently completely ignorant of JavaFX) cannot use `ImageDisplay`... or they suddenly become dependent upon a whole host of other stuff. This is problematic if wanting to use some QuPath jars in other contexts in the future. Of course, `ImageData` exists in a core module. Currently, these means that if serializing the `ImageDisplay` inside the `ImageData`, the `ImageData` ends up storing a JSON version of something that it cannot possibly de-json-ify. This is tolerable, but not ideal. More critically, it also means that nothing in core modules can really work with the current display or channel settings. Perhaps they would like to, e.g. to export RGB image regions. Ideally this would not be restricted to modules that have JavaFX access. It also complicates things like the ImageJ macro runner... currently, this can either be free from JavaFX or capable of incorporating color transforms/channel info - but not both. There are good reasons to want both https://github.com/qupath/qupath/issues/68. Also, it means that changing the brightness and contrast ultimately requires deserializing/serializing the whole data file - which might be large. There are likely far better/more efficient/faster ways to store these settings in a project, not the data file. This would not only be arguably a a better design, but ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:14,avoid,avoid,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,1,['avoid'],['avoid']
Safety,"When importing images to a QuPath project, there is a space to input arguments. Inserting `--no-crop` there will avoid using the OpenSlide bounds. I don't consider this to be a bug, because other software *already* handles the bounds differently. For example, I remember that QuPath started cropping by default because failing to do so gave different image dimensions when using Bio-Formats and OpenSlide. Cropping actually improved consistency, and removed enormous amounts of unnecessary whitespace. The original commit is at https://github.com/qupath/qupath/commit/52c9c32fa2add760d1338b1b81b2c0c6eed8908b. I think it would be more problematic and inconsistent if QuPath started exporting coordinates with a different origin for some images from that seen in the viewer, and then if there was a wish to import the regions in a project where Bio-Formats (rather than OpenSlide) was the default then it wouldn't be easy to identify or fix the problem. > Exports should be wrt. the original image dimensions, so that other SW can work with the data without OpenSlide dependency. That doesn't work for the reasons given above (i.e. at least one other very popular image-reading library will 'crop' at least some relevant formats automatically anyway). I'm curious as to what other software this causes an issue with that doesn't use OpenSlide. > Or, the offset information should be exported along with annotations. May be preferable, but would be awkward because the annotation export aims to follow the GeoJSON spec. Potentially all objects would need to store that info, or else they would need to be export as a `FeatureCollection` with an additional custom property. The second sounds preferably, but would remain very QuPath-specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1630759354:113,avoid,avoid,113,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1630759354,1,['avoid'],['avoid']
Safety,"When splitting annotations by lines, my expectation is that the thickness will usually be 0. Supporting different units risks increasing the code complexity considerably, because the command must also be scriptable and then somehow the units need to incorporated into any script. Additionally, QuPath is moving towards greater generality. It is increasingly used for images where µm is an inappropriate unit, so I'm reluctant to add additional code that assumes µm as the only alternative to pixels. And a properly generic system will take a lot more effort to develop (not helped by the fact that Java has no built-in support for converting units... it's a recurring theme, e.g. [here](https://jcp.org/en/jsr/detail?id=385), but as far as I'm aware there are a multiple implementations and it's not clear which, if any, we should use). This also affects the sparse image server: at the point the dialog is shown, we don't know if the pixel size is available in µm for the regions that will be required to generate the server. Furthermore, the dialog itself is [auto-generated from a `ParameterList`](https://github.com/qupath/qupath/blob/main/qupath-extension-processing/src/main/java/qupath/process/gui/commands/CreateTrainingImageCommand.java#L90), which limits the ability to toggle between units. Added to that, I'm not terribly happy with the generation of 'dynamic' training images generally; the code is really complex (since the images can be quite heterogeneous), and performance can be poor whenever many images need to be accessed to create the final result. Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. I'll leave this open for a while in case there are further comments, but my feeling is that the development-and-maintainence-time-to-benefit ratio isn't favorable enough to work on this in the core QuPath software; there are too many higher priorities, and if I'd rather focus efforts on simplicity, maintain",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932:120,risk,risks,120,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932,1,['risk'],['risks']
Safety,"When you run the *Estimate stain vectors*, it is good to have the smallest region selected that contains 'a bit of everything' (red staining, nuclei, background - although probably not the yellow pigment here). If the region selected is large, then QuPath will need to scale it down and then may give a less good estimate. You can also set individual stains manually by drawing very small rectangles around an area containing the stain, and then double-clicking the name of the stain under the *Image* tab. Ideally, a really good estimate would allow you to set a higher intensity threshold and still detect what you want - but not what you don't. However it is quite possible that no settings really achieve this. Since I understand you are looking at counts - and not intensity values - you *could* set the image type to be *Brightfield (other)* and then this activates the 'third' stain color. You could then set that based upon a small rectangle drawn in a yellow area. QuPath will then try to separate this as an extra stain. This will certainly negatively impact intensity measurements, and I'm not sure if it's a good idea. Nevertheless, the meaningfulness of intensity measurements in this kind of image is probably pretty limited anyway, so it is perhaps worth a try to see if it results in much better detection of what you can see by eye really should be detected. In the future, I'm wondering if it would be better to create a machine learning approach in QuPath for tasks like this, i.e. something more 'learn-by-example' (like with training the tumor/stroma cell distinction), rather than relying on color deconvolution. I think the current approach may be too simple, because there are always little anomalies or artefacts that can play havoc with trying to set a threshold for detection. What do you think? Are there any other changes/additions that would help here?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368339801:601,detect,detect,601,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368339801,4,['detect'],"['detect', 'detected', 'detection']"
Safety,"When you save the classifier, QuPath really just saves what it needs to apply the classification - but it doesn't store all the information about where exactly the training information came from. That's why you aren't able to load the classifier again and update it... not enough information has been saved in the ```.qpclassifier``` file to make that possible. The ```.qpclassifier``` file should therefore be considered 'locked-down', since you can't really change that classifier again directly. Fortunately, so long as you've saved the data for each image as you went along (including your annotations), you can work around this. To do so, you start by creating a new detection classifier and starting to train it by adding annotations and setting their classifications on any image. Then if you open each of the images you previously annotated for training, QuPath will look for any annotated regions and (optionally) add them to the training as well. Using this approach, you end up with a whole new classifier - but it can be based on the old training, plus whatever you want to add. This is ok if you only used one or two images for training in the past, but it could be a bit annoying if you annotated lots of images in a project. In this case, there is a shortcut that you can use. Click on *Advanced options* in the *Create detection classifier* window and select the ```More...``` button on the right. If you choose *Rebuild training from project* QuPath will then loop through *all* the images in the project and use any annotations it finds to train the new classifier. For your other question, the classifier is applied across the entire slide that is currently open - so that means that the classification will be updated for all TMA cores that are on the current slide (but *not* TMA cores that are on a different slide!). When you train the classifier and open a new image, you have the option to retain your training (i.e. continue to build a classifier, using all the information f",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288491139:672,detect,detection,672,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288491139,1,['detect'],['detection']
Safety,"Whenever everything is classified as positive, it usually means the wording is not quite right in the description of the feature (which is going to be from your example, not the script). For example, if I change my fluorescent example to read ""Surbcellular:"" all of my spots become classified as 15+. For your brightfield images, it is probably something like Subcellular: DAB: etc. If you have trouble getting it just right, you can try using:; https://gist.github.com/Svidro/5e4c29630e8d2ef36988184987d1028f#file-print-a-list-of-detection-object-measurements; It will print out a list in your script window which you can directly copy and paste. Edit: I also fixed an incorrect ""pathCellObject"" that was in the Gist version of the script. Oops.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-366458274:531,detect,detection-object-measurements,531,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-366458274,1,['detect'],['detection-object-measurements']
Safety,"While there is still no way to classify easily by intensities through the GUI, starting from [v0.1.2](https://github.com/qupath/qupath/releases/tag/v0.1.2) several new functions make it very easy by scripting, e.g. [this one](https://github.com/qupath/qupath/blob/master/qupath-core-processing/src/main/java/qupath/lib/scripting/QP.java#L1156). For example, to classify all cells as negative, 1+, 2+ or 3+ according to nuclear DAB staining, you may use; ```groovy; setCellIntensityClassifications(""Nucleus: DAB OD mean"", 0.2, 0.4, 0.6); ```. Or to classify cells as positive or negative after running the new subcellular detection command, you could try; ```groovy; setCellIntensityClassifications(""Subcellular: DAB: Num spots estimated"", 2.5); ```. Finally, a more sophisticated example where the classifications for all cells are first reset, and then a reclassification according to intensity for tumor cells applied:; ```groovy; // Reset all existing intensity classifications; resetIntensityClassifications(). // Select all tumor objects; def tumor = getPathClass(""Tumor""); def tumorObjects = getObjects({p -> tumor.isAncestorOf(p.getPathClass())}). // Apply intensity classification; setIntensityClassifications(tumorObjects, ""Nucleus: DAB OD mean"", 0.2, 0.4, 0.6). // Fire an update event to see the results; fireHierarchyUpdate(); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-269880806:621,detect,detection,621,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-269880806,1,['detect'],['detection']
Safety,"Would it be possible to allow all 3 stain vectors in Brightfield Other regardless of what they are named? Occasionally I have wanted to detect Hematoxylin within more complex samples as well, though I can get away with renaming it Htx. The logic isn't listed anywhere other than the code, so anyone else trying to get Hematoxylin subcellular detections in a 3-4 color brightfield image could struggle. Also, I _think_ black was actually the residual channel (there was a large amount of silver stain in the image), I renamed it thinking that I might get around ignoring the residual channel that way. If the program can somehow tell that was the residual channel without the name Residual or being in the 3rd position, that might have been it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/304#issuecomment-518018293:136,detect,detect,136,https://qupath.github.io,https://github.com/qupath/qupath/issues/304#issuecomment-518018293,2,['detect'],"['detect', 'detections']"
Safety,"Wow, thanks, that replicates the issue for me too. This sounds like a bug / intuitive behavior within the Delaunay triangulation. It's concerning that measurements can be added multiple times to the same objects. It suggests that the results might not be fully deterministic, depending upon the status of the object hierarchy and precisely which annotations are selected. I'm reluctant to fix the underlying issue in a 0.0.x release, but we should try to replace the command entirely. An implementation with [`DelaunayTools`](https://github.com/qupath/qupath/blob/df81345068455f09f42f50e97dc7b69a591e27f7/qupath-core/src/main/java/qupath/lib/analysis/DelaunayTools.java#L77) should be cleaner than the current OpenCV-based one. **As I understand it, this shows that the existing Delaunay command should not be used for nested annotations that contain detections.**. Single annotations, or annotations arranged in a 'flat' way (so that the same detection is not a descendent of more than one selected annotation) should be ok.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902:851,detect,detections,851,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902,2,['detect'],"['detection', 'detections']"
Safety,"Yeah, I didn't come across that myself yet trying a few images, are we using a version of JTS that at least has the exception code to avoid infinite loops?. Aside from style it all looks good and correct to me, but I wouldn't necessarily use that as strong evidence that it is :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1520#issuecomment-2104178205:134,avoid,avoid,134,https://qupath.github.io,https://github.com/qupath/qupath/pull/1520#issuecomment-2104178205,1,['avoid'],['avoid']
Safety,"Yeah, I don't think it's possible without boxing - and better to avoid that. Although since they aren't identical, could you add a corresponding test for the doubles function?. It would also be good to extend the test to handle different channels... One a good way to do that is to create an RGB `BufferedImage` and then draw onto it with `Graphics2D`, after setting the foreground color to be `Color.GREEN` (for example). Similar code is at https://github.com/qupath/qupath/blob/67a1ed7ead8e28c54d120b21d08b7d41562eb8c3/qupath-core/src/test/java/qupath/lib/awt/common/TestBufferedImageTools.java#L176 but the type should be `BufferedImage.TYPE_INT_ARGB`. Sorry to keep adding more, but I think the code is looking good - and it'll be nice to have it more well-tested than many other methods.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385:65,avoid,avoid,65,https://qupath.github.io,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385,1,['avoid'],['avoid']
Safety,"Yeah, I was over-enthusiastic in converting `Collectors.toList()` to simply use `toList()` when updating to Java 17 - this problem has emerged a few times. See https://github.com/qupath/qupath/commit/1710f51e7846b9b85367da2a716a8b67c8805e92 for more info. The reason I didn't just undo it is that `Collectors.toList()` *also* seems to be wrong - at least inasmuch as it makes no guarantees of mutability: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Collectors.html#toList(); So the fact it worked previously was kind of incidental or accidental. Therefore my thinking was that we could stick with `Stream.toList()` where that works, and then where mutability is required we use instead; ```java; stream.collect(Collectors.toCollection(ArrayList::new)); ```. I hadn't spotted this as a failure case, so we certainly should change it - but I think better to make the change that explicitly generates an `ArrayList` to avoid relying upon the happenstance of `Collectors.toList()` being mutable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1282#issuecomment-1648260545:950,avoid,avoid,950,https://qupath.github.io,https://github.com/qupath/qupath/pull/1282#issuecomment-1648260545,1,['avoid'],['avoid']
Safety,"Yeah, I'm not generally a fan of very dockable UIs myself... and there's no native JavaFX support. Lots of docking makes me thing of complex IDEs, which I'd expect only a minority of QuPath users to feel comfortable with (I'm not sure if I'm even one of them, and I use complex IDEs all the time). An entire UI overhaul is certainly a good idea, but much more long term - I'm thinking here about stuff we could do within the next couple of weeks that would meaningfully improve the UX. Meanwhile, the PR shows me there are definite bugs with my proposed approach - at least when it comes to stuff like cell detection, when windows change focus before the processing is complete. The fact that is broken suggests the underlying code to run parallel tasks ought to be strengthened though, so I'm tempted to persist a bit longer with the PR - irrespective of whether we end up exposing the 'detachable viewer' part through the UI or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1709739777:607,detect,detection,607,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1709739777,1,['detect'],['detection']
Safety,"Yeah, I'm working with the detection measurements in R and can calculate IQR on those, but I was interested in the cell by cell pixel IQR values.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/236#issuecomment-433480694:27,detect,detection,27,https://qupath.github.io,https://github.com/qupath/qupath/issues/236#issuecomment-433480694,1,['detect'],['detection']
Safety,"Yep, just counting the direct children, one level below the annotation.; ![image](https://user-images.githubusercontent.com/23145209/51791450-15e9e700-2158-11e9-9eb8-18eb6b59e11e.png). Kinda shows it as well. Almost every annotation has one child annotation. Except one of the lowest ones, and some of those have 0 children. It doesn't matter if the objects are cells, it just counts direct child objects. Which is nice, since it prevents subcellular detections from being counted! That could get crazy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/259#issuecomment-457855609:451,detect,detections,451,https://qupath.github.io,https://github.com/qupath/qupath/issues/259#issuecomment-457855609,1,['detect'],['detections']
Safety,"Yes - If I run the cell detection within each core (instead of within the annotation) then the core name is in the txt export. Thanks.; There are a couple of reasons that I would want to know which single cells are within my annotations, so the hierarchy export would be a useful enhancement in the future. ; Overall, great work!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289692872:24,detect,detection,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289692872,1,['detect'],['detection']
Safety,"Yes, I did run into some of the same problems with the external measurements since the ImageJ macro runner takes squares, not the actual annotation. The advantage here is QuPath's heriarchy system, where everything ""outside"" of the annotation will show up separately (not underneath in the tree), and can be selected and deleted. Probably easier to do this after you go to the annotations tab, CTRL-A (or whatever to select all) and then go to the Objects menu and ""Merge annotations."" Then you get only one annotation and all of the external detections in the Hierarchy tab. This makes it easy to once again select all, deselect your annotation, and delete all of the ""outside"" detection areas. Downside, merging all of the tiles does NOT actually do what you might hope, and mesh them all into one contiguous annotation. It does add them all together, however, which lets you use the show annotation measurements to see the sum totals of all of your annotation tiles. You will see better after you do it once.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286849866:543,detect,detections,543,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286849866,2,['detect'],"['detection', 'detections']"
Safety,"Yes, in a project, start from LuCa-7color_[17572,60173]_3x3component_data.tif, define two annotations with the Region class like this:; ![Screenshot from 2024-02-29 15-14-35](https://github.com/qupath/qupath/assets/60394504/b5c78607-282b-403f-9296-ace2af0a91ad). Then Classify, Training Images, Create Training images, default parameters, and it creates this image:; ![image](https://github.com/qupath/qupath/assets/60394504/1741642f-d89b-4790-bc4f-0fe5130a80c9). Then this script throws the error:. ```groovy; setImageType('FLUORESCENCE');; selectAnnotations();; runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImage"":""DAPI"",""requestedPixelSizeMicrons"":0.1,""backgroundRadiusMicrons"":4.0,""backgroundByReconstruction"":true,""medianRadiusMicrons"":1.0,""sigmaMicrons"":2.5,""minAreaMicrons"":11.0,""maxAreaMicrons"":400.0,""threshold"":1000.0,""watershedPostProcess"":true,""cellExpansionMicrons"":5.0,""includeNuclei"":true,""smoothBoundaries"":true,""makeMeasurements"":true}'); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1465#issuecomment-1971362682:589,detect,detect,589,https://qupath.github.io,https://github.com/qupath/qupath/pull/1465#issuecomment-1971362682,2,['detect'],"['detect', 'detectionImage']"
Safety,"Yes, it will try to select the object you already have created. If you want to draw within the annotation object (square) you have created, right click on it, drop down to Annotations, and select ""Lock."" Otherwise, it thinks you are trying to fill in the annotation you already have created. One way to see this is, with the annotation unlocked, hold down Alt and draw with the brush tool. You will see you are creating holes in your annotation now. One important thing to note when creating annotations within annotations, is that if your second brush tool annotation exits the first annotation, none of the detections within will be considered part of the brush tool annotation. This is probably most important when dealing with TMAs, because if the region you draw leaves the TMA circle, it is treated as being entirely outside!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/50#issuecomment-278506606:609,detect,detections,609,https://qupath.github.io,https://github.com/qupath/qupath/issues/50#issuecomment-278506606,1,['detect'],['detections']
Safety,"Yes, lots more things are package private now to try to trim things down and have fewer public things moving. The thinking with `ObjectMeasurements` is that it really should be tied to QuPath's built-in cell measurement command, since this is the only place it's currently used. But future cell detection commands deserve better measurements. Because the functionality is pretty limited, I'd suggest just copying the code into your own package if you want it. For similar functionality for other cell detection methods, I myself plan to use JTS - since this avoids ImageJ's need to rasterize things when making measurements. (Since this isn't a bug, I'd really rather use image.sc...)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/466#issuecomment-622346953:295,detect,detection,295,https://qupath.github.io,https://github.com/qupath/qupath/issues/466#issuecomment-622346953,3,"['avoid', 'detect']","['avoids', 'detection']"
Safety,"Yes, that is correct. Assuming you want to see what was detected, you'll need to use `writeImageRegionWithOverlay`. There's an example at https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420282401:56,detect,detected,56,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420282401,1,['detect'],['detected']
Safety,"Yes, the trouble comes from the background estimate whenever a large region is broken up into tiles for processing. The technique QuPath is using to estimate the background is 'opening by reconstruction'; this starts out by estimating the background locally for every pixel, and then propagating this information throughout the tile. The propagation is helpful most of the time, since this handles cases where there may be quite a lot of texture in the background quite well; and usually it doesn't propagate very far. But it's not helpful all of the time... particularly where there are substantial differences in the amount of 'background' (or staining outside nuclei) within tiles and between neighboring tiles. So my suggestion would also be to either set the background radius very high, or set it to zero to turn off background estimation entirely. The second option is likely better if you can still find nucleus detection settings that work. Depending upon what you want to do next, you might also try the 'Fast cell counts' command. It is much simpler and does not provide nearly so much information, but it also does not handle background in the same way.... so gives an alternative.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80#issuecomment-305385370:920,detect,detection,920,https://qupath.github.io,https://github.com/qupath/qupath/issues/80#issuecomment-305385370,1,['detect'],['detection']
Safety,"Yes, this is a known issue and intended behavior... but only because of a bug in OpenCV's Java bindings when QuPath was originally being developed, which meant any attempt to serialize a classifier was doomed to fail badly. Serializing the full training data and parameters required to rebuild the classifier was the only workaround I could find at the time. This is no longer a blocker thanks to updates in OpenCV and the switch to use JavaCPP. I've started to create entirely separate wrappers to support serializing/deserializing classifiers using JSON in the context of pixel classification. My proposed/intended fix is to use these with the detection classifier as well, but of course this will break backwards compatibility and I would therefore like to combine it with more thorough changes to how the detection classification works. Also, since the current approach is not critically broken I didn't want to start the task until everything was aligned to see it through to completion. Making the pixel classifier serializable/deserializable is a higher priority.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/343#issuecomment-515174436:646,detect,detection,646,https://qupath.github.io,https://github.com/qupath/qupath/issues/343#issuecomment-515174436,2,['detect'],['detection']
Safety,"Yes, this is important and should be addressed to avoid confusion. (I think _File &rarr; Revert_ can be used to 'update' the data by reading it from the [now changed] data file, but this isn't documented...)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/340#issuecomment-513528764:50,avoid,avoid,50,https://qupath.github.io,https://github.com/qupath/qupath/issues/340#issuecomment-513528764,1,['avoid'],['avoid']
Safety,"Yes, under the View → Zoom... → Zoom in/out is where I encountered the reverse behavior.; I am working on a Mac. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:56 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). I understand the issue is with the specific commands under View → Zoom... → Zoom in/out (I've tested only on a Mac, but assume the unexpected behavior is common across platforms - it was also weird in m10, but not v0.1.2... I didn't check any others). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640781128&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=2kWkyYCdApiRUWM942pRiwOnNoXy8SWGjV0e%2FyE0DuE%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNE5SPRUYX7RMNYZKOFTRVUQ5LANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=pU%2BYSYbllDKbPfdTG%2FD921yLOmUpYsg0rDDoywDA3bE%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640783525:805,safe,safelinks,805,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640783525,2,['safe'],['safelinks']
Safety,"You are both correct. It’s a multi channel image, and some of the channels; are noisy. Secondly, in dev debug mode I can see that the initial threshold; fails. What should I do so that it just uses the red channel to find cores (I need; other colors downstream)?. On Mon, Aug 6, 2018 at 01:34 Pete <notifications@github.com> wrote:. > The Brightness/Contrast dialog shows there are 4 channels, but 3 are; > turned off; the TMA dearrayer won't be affected by which channels are; > turned on/off there though. For such images, it uses an average; > projection of all the channels; > <https://github.com/qupath/qupath/blob/v0.1.2/qupath-processing-ij/src/main/java/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.java#L237>; > .; >; > It will most likely have correctly auto-set the image type as; > 'Fluorescence', but it's always worth checking under the 'Image' tab (in; > case this was changed / the auto detection of image type was turned off).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/196#issuecomment-410631215>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAcFTCZOP0VOb--7eOugusLtmVZlM1HUks5uN_-xgaJpZM4VvdxT>; > .; >; -- ; Rishi Rawat",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-410763976:676,detect,detect,676,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-410763976,2,['detect'],"['detect', 'detection']"
Safety,"You can see the awkward way I do this on Windows via the link in my last post. Basically, as far as I can recall `System.loadLibrary` will check if a library is loaded, and if not then it will look on the Java library path for it. However if that library has a sub-dependency then the Java library path becomes irrelevant... and the search for sub-dependencies will be system dependent*. Therefore if you explicitly load the sub-dependencies first, they will already be available whenever `System.loadLibrary` is needed for the main library you wanted in the first place - and the less controllable, system-dependent search can be avoided. Somewhat inconveniently, in this case there are sub-dependencies and sub-dependencies of sub-dependencies... so figuring out the order in which they need to be loaded isn't entirely straightforward. It feels like there should be a far more elegant way to do this, but I haven't found it. *-This may mean searching in the directory from which QuPath was launched, so copying the library files there could be an easy workaround - I'm not entirely sure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/355#issuecomment-527729451:631,avoid,avoided,631,https://qupath.github.io,https://github.com/qupath/qupath/issues/355#issuecomment-527729451,1,['avoid'],['avoided']
Safety,"You could try running the script below to brutally reset the histograms:; ```groovy; def display = getCurrentViewer().getImageDisplay(); display.cachedHistogramMaps.clear(); display.histogramMap.clear(); ```; It might help you avoid a restart, but I'm not sure...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/131#issuecomment-355843907:227,avoid,avoid,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/131#issuecomment-355843907,1,['avoid'],['avoid']
Safety,"You may want to open a [forum ](https://groups.google.com/forum/#!forum/qupath-users)thread where you can show some examples. Most examples I have seen of identifying TILs in HE staining were using deep learning, but if you can figure out a way to identify them among the rest of your cells, you should be able to do it. Extracting the data into a single worksheet is fairly easy, and can been seen in the following two links:; https://petebankhead.github.io/qupath/scripting/2018/03/04/script-annotation-export.html; https://petebankhead.github.io/qupath/scripting/2018/03/05/script-annotation-results-merge.html. I generally use SLICs to classify sub-annotation areas, then merge them into annotations (after some smoothing) to separate out tissues for cell detection. Aand I got horribly distracted by laser problems and Pete beat me to it :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/262#issuecomment-458656502:760,detect,detection,760,https://qupath.github.io,https://github.com/qupath/qupath/issues/262#issuecomment-458656502,1,['detect'],['detection']
Safety,"You need an instance of [`PathClass`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core/src/main/java/qupath/lib/objects/classes/PathClass.java). *But*, you should never call the construction for `PathClass` directly. There is some explanation [here](https://groups.google.com/d/msg/qupath-users/44HBd-5nbaQ/VHbENs9TBAAJ). Something like this should work:; ```groovy; def tumor = getPathClass('Tumor'); def stroma = getPathClass('Stroma'); getAnnotationObjects().eachWithIndex { annotation , i ->; if (i % 2 == 0); annotation.setPathClass(tumor); else; annotation.setPathClass(stroma); }; fireHierarchyUpdate(); ```; But you can change the text to be whatever you want, rather than `Tumor` and `Stroma` (although probably best to avoid colons`:` in any name, since these are typically used to separate *sub*-classifications). Regarding finding available methods, I've just added a [blog post](https://petebankhead.github.io/qupath/scripting/2018/03/16/script-print-methods-and-fields.html) with a bit more info. If you are happy to use IntelliJ, that's probably easiest.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/158#issuecomment-373683258:737,avoid,avoid,737,https://qupath.github.io,https://github.com/qupath/qupath/issues/158#issuecomment-373683258,1,['avoid'],['avoid']
Safety,"You should get null for any tiles or annotations with no class set, and Tumor, or whatever class is set for any annotations with a set class. If the tiles do not have a class, they will return null. . If the tiles are detections, and have a parent annotation with a class name, you should be able to use something like for all detections, p= detection.getParent() followed by p.getPathClass() being assigned to a value in order to find out what the parent annotation's class was. I am not sure this works if you have converted all of the tiles to annotations (maybe it does!).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/62#issuecomment-293101449:218,detect,detections,218,https://qupath.github.io,https://github.com/qupath/qupath/issues/62#issuecomment-293101449,3,['detect'],"['detection', 'detections']"
Safety,"[OD](https://en.wikipedia.org/wiki/Absorbance) is usually used for brightfield images while intensity is used for fluorescence images due to the way the light is measured (how much passes through your sample versus how much is emitted). Sums and averages are exactly that based on all pixels, though usually applied to the detection area in question (a single SLIC, a single cell, or a single nucleus, etc). If you had a 2 pixel detection of 1 OD and 0.5 OD, it would have a OD sum of 1.5 and an average of 0.75. The distance value after the measurements using add intensity features determines how finely the features are calculated. Smaller values tend to take longer but be more accurate, and I almost always use my pixel size (height or width) for any _Add intensity features._. Smoothing, as far as I can tell, is a straight radius for inclusion, calculated from the centroid of the detection object to the centroid of all other detection objects. I tested this using the scale bar at 20um and two cells that were about 22um apart (center to center), and gradually expanded the radius until the smoothed features became a mix of the two (Nearby detection counts for each became 1). The radius is a hard limit, while the smoothing is applied over a FWHM gradient as mentioned in Pete's link. In that example, if the two cells were 22um apart and I performed a 22um smoothing, they would have less of an impact on each other's ""smoothed"" values than if they were only 5um apart. A cell with a centroid at 23um away would have 0 impact on another cell's measurements, while a cell that was 22um away would have about half of the impact of a cell that was almost right on top of the original cell. Every cell's smoothed features are calculated independently, imagine drawing a quick circle around each cell and calculating the smoothed features based on what centroids are inside that circle.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-404545796:323,detect,detection,323,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-404545796,5,['detect'],['detection']
Safety,"a lot of badly-classified data that you then need to remember to ignore later. However, it does then require being able to estimate in advance which cores should be classified together. 4. If you want to use a separate classifier for every core, you could try a more drastic approach of exporting every core as a separate image. To do this, first dearray your slide. Then, you can use [Extension &rarr; ImageJ &rarr; ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) to export each image. You need a very simple macro, like the one below:; ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```; where you’ll need to change the path to be something more suitable for your computer. It takes advantage of the fact that the ‘title’ of the image sent to ImageJ is the same as the TMA core, so using this as the filename can help you identify the core afterwards. > This may give you individual core images that are a bit big... you can change ""tif” to “jpg” to decrease the file size, or you can set the ""Downsample factor” value to 2 to export a lower-resolution image. The advantage of using “tif” is that the micron information is preserved, while if you use “jpg” then this is lost. After doing this export you can then import all your core images into a new project. You’ll almost certainly want to use scripting for batch processing in this case, and there will be another couple of things to do (e.g. apply dearraying to detect a single core in each image, or use *Objects &rarr; Create full image annotation* to give you a region in which to detect cells). ---. Personally, I think Option 1 is the ‘cleanest’ solution, but may be very time-consuming. All the others would give some kind of data management headache - but maybe it is worth it. Of course, there may also be more creative solutions that I haven’t considered. I would be interested to know what you choose in the end. Good luck!. Pete. PS. Thanks for the positive feedback!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:3999,detect,detect,3999,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,2,['detect'],['detect']
Safety,"aMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 2.11 seconds); INFO: Processing complete in 2.15 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 3.01 seconds); INFO: Processing complete in 3.03 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Smoothing using TMA cores; INFO: Processing complete in 0.18 seconds; INFO: Completed!; INFO: ; qupath.lib.plugins.objects.SmoothFeaturesPlugin {""fwhmMicrons"": 25.0, ""smoothWithinClasses"": false, ""useLegacyNames"": false}; INFO: Measurement mapper limits for Smoothed: 25 µm: Nucleus/Cell area ratio: 0.12291267514228821, 0.4222889840602875; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:4100,detect,detect,4100,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detect']
Safety,"actually there is. You can use a script that exporte your annotations. runs the simple tissue detection, re-imports your annotations, then substracts everything of simple tissue detection of your ROI. . Then finally you have your annotations with simple tissue detection inside. ; That requires quite some scripting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-460298789:94,detect,detection,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-460298789,3,['detect'],['detection']
Safety,"ageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: IOException exception reading file:/Volumes/Storage/Work/SLIDESCANS/190512_OLYMPUS_YKA_Batch/CRUK_YKA_16.1D_tam_2_20190513.vsi#1: x=9728, y=34816, w=512, h=512, z=0, t=0, downsample=1; at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199); at java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:162); at java.base/sun.nio.ch.FileChannelImpl.read",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:7861,Detect,DetectionPluginTools,7861,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['Detect'],['DetectionPluginTools']
Safety,"agej.superpixels.SLICSuperpixelsPlugin', '{""sigmaMicrons"": 1.0, ""spacingMicrons"": 10.0, ""maxIterations"": 10, ""regularization"": 0.25, ""adaptRegularization"": false, ""useDeconvolved"": false}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 0.25, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": true, ""colorStain3"": false, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": false, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; ```. You can also choose a larger size for your SLICs if you want to do more of a tissue structure analysis. Smaller is usually better if you are looking for color differences though. Another options is just using the cell detection mentioned above:; ```; selectAnnotations();; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.25, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 15.0, ""maxAreaMicrons"": 60.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: DAB OD mean"", ""thresholdPositive1"": 0.2690789473684211, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');; ```. Which yielded the following for my square. You may want to tweak the DAB threshold value, and you can always create your own classifier as well based on more data than just the Nucleus DAB OD mean (https://github.com/qupath/qupath/wiki/Classifying-objects):; ![image](https://user-images.githubusercontent.com/23145209/37378645-52636d20-26ed-11e8-88ac-5401852cb5bc.png). It r",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372875465:2040,detect,detect,2040,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372875465,1,['detect'],['detect']
Safety,"ah right, Svidro! simple tissue detection is the much faster and more convenient way to do it! I was thinking to complicated ^-^",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349097979:32,detect,detection,32,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349097979,1,['detect'],['detection']
Safety,"alse); def mi = menu.getItems(); .stream(); .filter(m -> commandName.equals(m.getText())); .findAny().orElse(null); if (mi == null) {; mi = new MenuItem(commandName); menu.getItems().add(mi); }; mi.setOnAction {e -> classifyAnnotations()}; }. def classifyAnnotations() {; def imageData = QuPathGUI.getInstance().getImageData(); def annotations = imageData == null ? [] : imageData.getHierarchy().getAnnotationObjects(); if (annotations.isEmpty()) {; Dialogs.showWarningNotification(""Classify annotations"", ""No annotations found!""); return; }; for (def annotation in annotations); classifySingleAnnotation(annotation); imageData.getHierarchy().fireObjectClassificationsChangedEvent(this, annotations); }. def classifySingleAnnotation(PathObject pathObject) {; def roiName = pathObject.getROI()?.getRoiName(); pathObject.setPathClass(PathClass.getInstance(roiName)); }; ```. I think it makes sense for such classifiers to be added to a single *Object classification* submenu, rather than split between *Detection* and *Annotation* (also, there might one day be a need to classify *TMA cores*, which don't fit into either category). Also, the top of the *Train object classifier* dialog makes it possible to select different types of objects to classify. <img width=""418"" alt=""Train object classifier"" src=""https://github.com/qupath/qupath/assets/4690904/d6977ca8-a018-4d33-bd7c-f31eed611749"">. Admittedly, these are all detections or subtypes of detection... but that's because I couldn't think of a good workflow to use them for annotations (since you're using annotations to train the classifier, how should QuPath distinguish between which annotations are for training and which should be classified...?). The internal representation of the object classifier is capable of specifying the type of object it should be applied to, even though we have no easy way to interactively create annotation classifiers through the user interface, or examples where that is actually used. Perhaps more usefully, w",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110:1880,Detect,Detection,1880,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110,1,['Detect'],['Detection']
Safety,"apper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: IOException exception reading file:/Volumes/Storage/Work/SLIDESCANS/190512_OLYMPUS_YKA_Batch/CRUK_YKA_16.1D_tam_2_20190513.vsi#1: x=9728, y=34816, w=512, h=512, z=0, t=0, downsample=1; at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.e",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:7700,detect,detect,7700,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detect']
Safety,"as a script that doesn't follow the borders you drew quite so tightly, but will classify area by the nearest cell, seen here: https://gist.github.com/petebankhead/e23393125fa57fe91c67f5003cbea3e2. You may be looking for something more like superpixel segmentation and classification, however, if you want to create regions that follow the general tissue outline more closely. I have used this several times to create annotations that separate two different types of tissue, either based on texture or coloration. It can be a bit tricky, however, and requires a bit of troubleshooting and decisions on what measurements to apply to the SLICs. Based on your image, the difference is fairly clear-cut and you might be able to get away with something as simple as OD Sum.; The specific tool is _Analyze->Region Identification->Tiles and superpixels_ and then either DoG or SLIC Superpixel segmentation. I tend to prefer SLICs for tissue segementation. Note that this WILL remove all detections (your cells, in this case) and should generally be done before any cell creation in a script. Essentially it makes a jigsaw puzzle of the selected annotation based on the flow of the colors in the tissue. ; ![image](https://user-images.githubusercontent.com/23145209/47020475-4b6d4600-d10e-11e8-8ec7-fccdd85860c6.png). You can then apply color measurements to each of those tiles and then classify them. ; ![image](https://user-images.githubusercontent.com/23145209/47020737-e1a16c00-d10e-11e8-868c-9d1255766fce.png). Finally you could merge all classified SLICs (which are detections) back into annotations using the _Tile classifications to annotations_ in the same menu, and perform cell detection within the new annotations. These annotations will have your area measurements as normal. If you want to apply a sum of all Tumor etc areas to the parent annotation, that will require another script. I am pretty sure this is discussed in more detail on the forums somewhere including scripts. *Runs and hides*",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/229#issuecomment-430244183:985,detect,detections,985,https://qupath.github.io,https://github.com/qupath/qupath/issues/229#issuecomment-430244183,3,['detect'],"['detection', 'detections']"
Safety,concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:4524,detect,detect,4524,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,4,"['Detect', 'detect']","['DetectionPluginTools', 'DetectionRunnable', 'detect']"
Safety,"cripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1288); at qupath.lib.gui.scripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1237); at javafx.concurrent.Task$TaskCallable.call(Task.java:1425); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""det",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3092,detect,detect,3092,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detect']
Safety,"ction.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Training size: org.bytedeco.javacpp.opencv_core$Size[address=0x608000811620,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x608000811620,deallocatorAddress=0x13aaec9c0]]; INFO: Responses size: org.bytedeco.javacpp.opencv_core$Size[address=0x60800080d2a0,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x60800080d2a0,deallocatorAddress=0x13aaec9c0]]; INFO: RTrees classifier termination criteria: org.bytedeco.javacpp.opencv_core$TermCriteria[address=0x608000816130,position=0,limit=1,capacity=1,dea",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:4055,detect,detect,4055,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detect']
Safety,"dCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 2.11 seconds); INFO: Processing complete in 2.15 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 3.01 seconds); INFO: Processing complete in 3.03 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Smoothing using TMA cores; INFO: Processing complete in 0.18 seconds; INFO: Completed!; INFO: ; qupath.lib.plugins.objects.SmoothFeaturesPlugin {""fwhmMicrons"": 25.0, ""smoothWithinClasses"": false, ""useLegacyNames"": false}; INFO: Measurement mapper limits for Smoothed: 25 µm: Nucleus/Cell area ratio: 0.12291267514228821, 0.4222889840602875; INFO: Adding Area (AWT) to hierarchy; INFO: ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:3975,detect,detected,3975,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detected']
Safety,dImageServer.java:90); at qupath.lib.images.servers.CroppedImageServer.readRegion(CroppedImageServer.java:39); at qupath.lib.images.servers.SparseImageServer.readTile(SparseImageServer.java:265); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$prerequestTiles$2(AbstractTileableImageServer.java:462); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.prerequestTiles(AbstractTileableImageServer.java:464); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:295); at qupath.lib.images.servers.AbstractTileableImageServer.readRegion(AbstractTileableImageServer.java:60); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:863); at qupath.imagej.tools.IJTools.convertToImagePlus(IJTools.java:902); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:216); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at java.base/java.util.concurrent.locks.ReentrantLock$Sync.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.locks.ReentrantLock.lockInterruptibly(Unknown Source); at java.base/java.util.concurrent.ArrayBlockingQueue.put(Unknown Source); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(BioFormatsImageServer.java:1411); at qupath.lib.images.servers.bioformats.BioForma,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583:2008,Detect,DetectionPluginTools,2008,https://qupath.github.io,https://github.com/qupath/qupath/issues/1443#issuecomment-1864490583,2,['Detect'],"['DetectionPluginTools', 'DetectionRunnable']"
Safety,"dObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected object; def completelyCovered = PathObjectTools.filterByROICovers(roi, allDetections); println ""Num completely covered: \t${completelyCovered.size()}"". // Set classifications for visualization; allDetections.each {it.classifications = []}; childObjects.each{it.classifications += ['child']}; regionObjects.each{it.classifications += ['region']}; hierarchyWithin.each{it.classifications += ['within']}; nucleusCentroidWithin.each{it.classif",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1943,Detect,Detections,1943,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['Detect'],['Detections']
Safety,"de until it does what I want. ```; import qupath.lib.objects.classes.PathClass; import qupath.lib.objects.classes.PathClassFactory; import qupath.lib.scripting.QP. // Parameters to modify; List<String> includeClassesWithName = [""Tumor"", ""Stroma""] as List<String>; def feature = ""Nucleus: DAB OD mean""; def threshold = 0.1; def feature2 = ""ROI: 0.50 µm per pixel: Hue: Mean""; //def threshold2 = 0; // Check what base classifications we should be worried about; // It's possible to specify 'All', or select specific classes and exclude others; def doAll = includeClassesWithName.contains(""All""); def includeClasses = [null]; //def Stroma = PathClassFactory.getPathClass(""Stroma""); def Positive = PathClassFactory.getPathClass(""Positive""); def Negative = PathClassFactory.getPathClass(""Negative""); //def DualPos = PathClassFactory.getPathClass(""Dual Positive""); if (!doAll) {; for (String n : includeClassesWithName); includeClasses.add(PathClassFactory.getPathClass(n)); }. // Loop through all detections; for (def pathObject : QP.getDetectionObjects()) {. // Get the base classification; PathClass baseClass = pathObject.getPathClass(); if (baseClass != null); baseClass = baseClass.getBaseClass(); else if (PathClassFactory.isPositiveClass(baseClass) || PathClassFactory.isNegativeClass(baseClass)); // In the event that we have a positive or negative classification that lacks a base class,; // this implies that the base class should be null; baseClass = ""Tumor""; // Apply classification, if required; if (doAll || includeClasses.contains(baseClass)) {. // Check if we have a measurement - if not, assign the base class; double val = pathObject.getMeasurementList().getMeasurementValue(feature); if (Double.isNaN(val)) {; pathObject.setPathClass(baseClass); continue; }; double val2 = pathObject.getMeasurementList().getMeasurementValue(feature2); if (Double.isNaN(val2)) {; pathObject.setPathClass(baseClass); continue; }. // Set positive or negative class; if (val >= threshold ){; pathObject.set",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-289248209:3092,detect,detections,3092,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-289248209,1,['detect'],['detections']
Safety,"dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Requesting region for stain vector editing: ; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 989 nuclei detected (processing time: 1.90 seconds); INFO: Processing complete in 1.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackg",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:2191,detect,detect,2191,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detect']
Safety,"define the part of an image and downsampling factor to use, and then writing that out... so the idea is the same. Therefore you could use that to modify the original tiling script. After importing ```ImageWriterTools``` at the top, the main thing to do is to change the contents of the ```try``` block, e.g. something like the following:. ```groovy. ...; import qupath.lib.gui.ImageWriterTools. ...; try {; // Put at top of file for neater code...; ext = "".jpg""; imageData = getCurrentImageData(); overlayOptions = getCurrentViewer().getOverlayOptions(); ; // Write out the region with overlay; String name = String.format(""%s (d=%.2f, x=%d, y=%d, w=%d, h=%d, z=%d).%s"", serverName, downsample, xi, yi, wi, hi, z, ext); File file = new File(dirOutput, name); ImageWriterTools.writeImageRegionWithOverlay(imageData, overlayOptions, request, file.getAbsolutePath()). // Print progress; counter++; println(""Written tile "" + counter + "" to "" + file.getAbsolutePath()); }; ...; ```; This should include all detections and annotations. If you need TMA cores to be displayed too, then some modification would be required... although then *File &rarr; Export TMA data* is usually a better choice in most cases. Note, here I set the output format to JPEG to get smaller file sizes. The original script wrote ImageJ TIFF images, which used lossless compression and had more image properties set (e.g. pixel sizes in microns) - at the cost of writing much larger files. If you want similar ImageJ TIFFs, but with the overlay drawn on top, then the changes are a bit more awkward and require going more into the details or how images are handled by Java and QuPath. The following should work (at least for RGB images):. ```groovy; ...; try {; // Read the image region; ImagePlus imp = server.readImagePlusRegion(request).getImage(false). // Get the hierarchy overlay (could put at top of the file); def hierarchyOverlay = getCurrentViewer().getOverlayLayer(qupath.lib.gui.viewer.overlays.HierarchyOverlay.class).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-273680833:1340,detect,detections,1340,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-273680833,1,['detect'],['detections']
Safety,"e caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `getImage(int series)`, and so having a separate API that assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `HnE_3_1x1component_data.tif` example, we don't know for sure what. I think we should go back to thinking about the *ideal* design here, based upon what needs to be reusable - and also what are the simplest and safest changes that can be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the byte",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:3408,safe,safest,3408,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['safe'],['safest']
Safety,"e diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?) and remove them - thereby allowing you to avoid the memory and computational requirements of storing and classifying them. Therefore while there is some overhead involved in QuPath using objects rather than pixels in the way that *ilastik* and *Trainable Weka segmentation* do, QuPath's use of objects is sufficiently efficient and optimized that I think it offers a viable alternative in many cases.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:3650,avoid,avoid,3650,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['avoid'],['avoid']
Safety,"e testing. As described by @carlocastoldi the server is loaded whenever *any* change to the metadata is made. The server can be loaded more often might be expected, sometimes for subtle, hard-to-address reasons. Some relevant facts:; * `ImageServerMetadata` *isn't usually saved with an image when it is first added to a project*. This only happens the first time the data file is saved.; * The `ImageServerMetadata` is updated as soon as an image is opened in a project to ensure that the name specified in the project matches that in the server metadata. This triggers the server to be loaded if; * The `ImageServerMetadata` isn't available, or; * The `ImageServerMetadata` is available, but contains the wrong name (e.g. the name was changed in a project, but then the data file wasn't saved afterwards); * *Run for project* will always force the `ImageServer` to be loaded, because it will always save the data - and this act of saving requires the `ImageServer`. So you can only get advantages if you avoid *Run for project*, e.g. by using *Run for project (without save)* instead.; * We can't rely on not saving if there have been no changes, because the script editor now automatically fires a hierarchy change after completion. This means QuPath *always* thinks that the script may have changed the `ImageData`, so `ImageData.isChanged()` returns true. We didn't used to do this, but then we had to keep telling users to add `fireHierarchyUpdate()` at the end of many otherwise simple-looking scripts, and that was a pain for everyone. This basically means that lazy-loading only works if the data for an image has been saved at least once, and the user hasn't messed around too much with image names within their project. The 'easy' way to trigger an image to be saved once is to do a 'Run for project' script - even if the script doesn't do anything. This should be enough to prompt the `ImageServerMetadata` to become embedded within the project. Although it should also usually happen in ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037:1072,avoid,avoid,1072,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037,1,['avoid'],['avoid']
Safety,"e the parent cell as each one is processed. I only know how to do the latter. You already have the loop for all cells from the previous example, and a loop for all clusters from the first. I will start with the loop for all clusters since I have some idea how that would work. Note that this does not summarize stain OD or actual spot area, just estimated spot count. It also only works if the second stain is labeled as DAB! After that, you should have the two values you need to get your ratio. ```; import qupath.lib.scripting.QP; def NuclearSum = ""Nuclear Spot Sum""; def CytoSum = ""Cytoplasmic Spot Sum"". //Probably not necessary when using putMeasurement, but I liked to have this loop for completeness, plus it will reset all values to zero when rerunning the script.; for (def cell : QP.getDetectionObjects()) {; def ml = cell.getMeasurementList(); ml.putMeasurement(NuclearSum, 0); ml.putMeasurement(CytoSum, 0); ml.closeList(); }; def clusters = getObjects({p -> p.class == qupath.imagej.detect.cells.SubcellularDetection.SubcellularObject.class}). // Loop through clusters; for (c in clusters) {; // Each subcellular detection can have one parent; def cell = c.getParent(). def ml = cell.getMeasurementList(); ; //Important note: This value (Num Spots) will be heavily influenced by the Estimated Spot Size when running the; //subcellular detection command. you may instead want to use the Area measurement which you can find; //by clicking on a subcellular detection; double thisCluster = c.getMeasurementList().getMeasurementValue(""Num spots""). //find out if this subcellular detection is nuclear or cytoplasmic, then add the area of that detection to the cell measurement; def location = c.getPathClass().getName(). if ([""Nuclear""].contains(location)) {; double nuclear = cell.getMeasurementList().getMeasurementValue(NuclearSum);; nuclear = nuclear+thisCluster; ml.putMeasurement(NuclearSum, nuclear); ml.closeList(); }; if ([""Cytoplasmic""].contains(location)) {; double cyto = cell.getM",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-347208202:1455,detect,detect,1455,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-347208202,1,['detect'],['detect']
Safety,"e without cropping, then the tiff dimensions will inevitably agree. `tiffinfo` is meaningful for .scn because the original format itself is tiff-based, so no conversion is needed. As shown in that example, it's possible that the true dimensions stored in the original file are the ones you get *after* cropping with OpenSlide's bounds, not before. I can't check the dimensions of any .mrxs image with other software as I don't have any viewer for mrxs files that isn't using OpenSlide (and ImageScope failed to open it). There is supposedly a free viewer from the company behind the .mrxs format, but it requires too much personal info to install so I don't want to use it. There are some [links here](https://qupath.readthedocs.io/en/0.4/docs/intro/formats.html#mrxs-3d-histech) that may help give some idea what it's not exactly my favorite file format for whole slide scans. I have seen examples of mrxs images where failing to crop results in very excessive padding (and the associated computational problems), so I still thing cropping / avoiding padding is the more appropriate choice for QuPath to make as a default... and the .scn example demonstrates that it's the right choice there. In conclusion, it sounds like:; * QuPath isn't doing anything weird or buggy - it's behaving as it should here; * You can use QuPath with your pyramidal tiffs, no matter how they are generated (as long as they can be opened by either OpenSlide and Bio-Formats); * You can use QuPath with the mrxs images used to generate tiffs if you do **one** of the following; * generate the tiffs to give the cropped/unpadded region, e.g.; * using [`libvips` and `autocrop`](https://github.com/openslide/openslide/wiki/OpenSlideAndVIPS#slide-bounds); * using QuPath itself (to write an ome-tiff); * import into QuPath with the `--no-crop` option; * correct the coordinates as required when switching between software depending upon whether it adds padding or not; * You *may* be able to use QuPath with other software a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631272136:1402,avoid,avoiding,1402,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631272136,1,['avoid'],['avoiding']
Safety,"e@77accd0e: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 200 height = 193 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for L:\basic\divg\CEMM-Lexor\SannetH\1. SANNE\Project 2. IHC Validation PICCOLO and COIN\Qupath PICCOLO\R-PICCOLO-16_CDX2-88_20x.tiff; INFO: Estimating H-DAB staining; INFO: Image data set to ImageData: Brightfield (H-DAB), R-PICCOLO-16_CDX2-88_20x; INFO: Will (re)compute TMA grid...; INFO: Processing complete in 1.26 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:1603,detect,detect,1603,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detect']
Safety,eap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:1438,detect,detect,1438,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,7,"['Detect', 'detect']","['DetectionPluginTools', 'DetectionRunnable', 'DetectorWrapper', 'detect']"
Safety,"ects' inside it will automatically be deleted, and replaced with the detected cells. This is *usually* the right/most intuitive thing that should happen, and is not a bug. If this didn’t happen, then you if ran the cell detection command twice with the same parent selected, you would end up having every cell counted twice - not to mention the strange things that might happen with overlapping objects if you were to run other tiling/superpixel commands. It's not clear to me what was the purpose of doing manual counts followed by automated counts within the exact same region, but (as you've found) it is something that is not supported. You *could* do it the opposite way (i.e. automated counts followed by manual counts). However, if it was my goal to compare manual and automated cell counting then I would do the automatic counts in duplicate project and keep the data separated. Furthermore, you can do automated counts and then select 'Convert detections to points' within the 'Points tool' to initialize the (manually-editable) points that can subsequently be modified to generate 'semi-automated counts'. With regard to being unable to reopen a data file, this is something that has been reported some months ago (e.g. #58), but I'm not aware of it being an ongoing problem - or at least not one I have ever been able to reproduce. If QuPath fails to write a complete data file, then you should find that a '.qpdata.backup' file exits somewhere inside your project/data folder. If you strip the '.backup' data part from the file name, then it should be possible to recover the last saved version. > *-Information about the object hierarchy is at https://github.com/qupath/qupath/wiki/Object-hierarchies But from a quick look it seems that 'point' objects do not behave in the way you might expect, in that it appears that a point object is the child of a region if the *first* point is inside that region - and adding subsequent points (inside or outside the region) doesn't change this rel",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342941759:1272,detect,detections,1272,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342941759,1,['detect'],['detections']
Safety,"edCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Training size: org.bytedeco.javacpp.opencv_core$Size[address=0x608000811620,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x608000811620,deallocatorAddress=0x13aaec9c0]]; INFO: Responses size: org.bytedeco.javacpp.opencv_core$Size[address=0x60800080d2a0,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x60800080d2a0,deallocatorAddress=0x13aaec9c0]]; INFO: RTrees classifier termination criteria: org.bytedeco.javacpp.opencv_core$TermCriteria[address=0x608000816130,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocat",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:4093,detect,detectionImageFluorescence,4093,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detectionImageFluorescence']
Safety,"ei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Requesting region for stain vector editing: ; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 989 nuclei detected (processing time: 1.90 seconds); INFO: Processing complete in 1.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 2.11 seconds); INFO: Processing complete in 2.15 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:2958,detect,detectionImageBrightfield,2958,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detectionImageBrightfield']
Safety,"eka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixel",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2154,Detect,Detections,2154,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['Detect'],['Detections']
Safety,"ell: Circularity"", ""Cytoplasm: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 sum"", ""Nucleus: Channel 2 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 3 mean"", ""Cell: Channel 3 std dev"", ""Cytoplasm: Channel 2 max"", ""Nucleus: Channel 3 min - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 1 min"", ""Nucleus: Channel 4 mean"", ""Nucleus: Channel 1 max"", ""Cell: Channel 3 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 range"", ""Cell: Area - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 max"", ""Nucleus: Perimeter"", ""Cytoplasm: Channel 2 mean"", ""Cytoplasm: Channel 4 max"", ""Cytoplasm: Channel 3 mean - Smoothed (FWHM 25 µm)"", ""Cell: Channel 1 max - Smoothed (FWHM 25 µm)"", ""Cell: Area"", ""Nucleus: Max caliper"", ""Cell: Channel 2 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Area - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 sum - Smoothed (FWHM 25 µm)"", ""Cell: Channel 2 max"", ""Nucleus: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Nucleus/Cell area ratio"", ""Cytoplasm: Channel 1 std dev"", ""Cytoplasm: Channel 2 min - Smoothed (FWHM 25 µm)"", ""Cell: Min caliper"", ""Cell: Channel 3 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 range"", ""Nucleus: Channel 2 min - Smoothed (FWHM 25 µm)"");. //create dectection results//; saveDetectionMeasurements('D:IFproject_0_19', ). this resulted in a text file being saved with the core name, then i opened it in excel and deleted all remaining columns until i was left with ""class"", ""cell channel 1 mean""-""cell channel 4 mean""; (I am not actually interested in channel 4, that is my nuclear stain).; i sorted the table by 'class' and separated tumor and stroma cell detections, i counted the number of detections for each class type and and summed the intensities for each channel. i divided the intensity for each channel by the totally number of detections in that class. Just to obtain a simple relative amount of the marker within that tissue type.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391785100:5857,detect,detections,5857,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391785100,3,['detect'],['detections']
Safety,"equestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Requesting region for stain vector editing: ; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 989 nuclei detected (processing time: 1.90 seconds); INFO: Processing complete in 1.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 2.11 seconds); INFO: Processing complete in 2.15 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:2794,detect,detected,2794,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detected']
Safety,"er with a training set and the classifier command, or creating your own, exact value, classifier. The slower way of doing this is creating your own classifier through the menu system, which Pete shows:; https://github.com/qupath/qupath/wiki/Object-classifications; about half way down the page. Using that setup, you can generate positive cells for each channel and a set of dual positive cells. My preferred method is using a script to classify. The following script is a toned down version of one Pete has posted elsewhere, but it generally gets the job done. Plus you can expand it out as much as you want using the code that is currently there. Want to classify based on two features? Add a ""def myNewFeature"" and a new ""double val2"" line inside the for loop. You can make the if statments as convoluted as you have the time or desire for, and it is much easier than changing things through the menu classification system.; ```. import qupath.lib.objects.classes.PathClass; import qupath.lib.objects.classes.PathClassFactory. def Positive = PathClassFactory.getPathClass(""Positive""); def Negative = PathClassFactory.getPathClass(""Negative""). //I honestly forget the exact text for the given fluorescence features; //but feature would be one of those; def feature = ""Channel 2: Mean intensity""; def threshold = 0.1; def threshold2 = 1.5. // Loop through all detections *** Change this to getCellObjects() or getTileObjects() if you have a mix of both and only want to classify one type; resetDetectionClassifications(); for (def pathObject : getDetectionObjects()) {. // Get the measurement value(s); double val = pathObject.getMeasurementList().getMeasurementValue(feature). // Set positive or negative class; if (val < threshold || val > threshold2){; pathObject.setPathClass(Positive); }else pathObject.setPathClass(Negative); }; ```; Hopefully that gets you started, let me know if you need anything else!; Edit: Oh, and _Measure->Show annotation measurements_ should get you the data you need",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/126#issuecomment-351212559:2458,detect,detections,2458,https://qupath.github.io,https://github.com/qupath/qupath/issues/126#issuecomment-351212559,1,['detect'],['detections']
Safety,"erience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores need to be selected for the command to work), but in this case there's an alternative:; ```groovy; annotations = getAnnotationObjects().findAll {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeAnnotations(annotations); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```; For me all three of these methods seem to work, at least in my simple example.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:1767,Avoid,Avoid,1767,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,3,"['Avoid', 'avoid', 'detect']","['Avoid', 'avoid', 'detection']"
Safety,"esenting+1 to +4 can be useful to distinguish populations with both high and low members versus a medium number of spots, but once you want to compare samples by a single number you might be better off with the spot count Mean/Median/Standard deviation, since those are all probably one or two lines of code. Plus I am not sure how well the new version of the H-score would compare to older publications, even if the math was adjusted to a 0-300 scale. I second using the Brightfield (other) when eliminating yellow areas like that for brightfield ISH. Sometimes once you have enough colors, though, you have to apply multiple sets of measurements to the ISH spots (select the subcellular detections, pick your color vectors, Add Intensity Measurements), and then filter them in a script, and update a ""Filtered Red Estimated Num spots"" or something like that. Two color brightfield ISH with red blood cells in the background gets to be a real pain. For a first pass you could try moving the color vectors in Estimate color vectors to something like :; ![image](https://user-images.githubusercontent.com/23145209/36652180-ed8010a8-1a61-11e8-8d09-d639962fd706.png); One vector picks up as much red as possible, and one to get ""the rest"" of what is in your sample. They do not need to be the same as when you did the cell detection. Picking up Groovy isn't bad if you understand programming basics like variables, if/for loops, etc. The main trick (for me) is learning the QuPath specific functions to use, and making use of either Gists, the forums, or IntelliJ to figure out how doable my plans actually are! I mostly just modify other people's scripts. I'm trying to fill out some of what I have learned in my Gists as I go along. On the image, it looks like you are missing quite a few of the smaller spots. If that isn't intentional, I would try turning off all of the check boxes, lowering the min spot size, and make use of the clusters as all of those get combined into the Num spots estimated.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368380554:1459,detect,detection,1459,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368380554,1,['detect'],['detection']
Safety,"esult in substantial lag. Ideally it shouldn't, but if it does I wouldn't say it's necessarily a bug... since QuPath is already needing to do a *lot* of stuff to get acceptable performance across a wide range of scenarios. Specifically here:; * For a downsample >= 1, repainting detections caches tiles and multiple resolution levels for performance - this is why QuPath can handle millions of objects.; * For downsample < 1, repainting happens for all detections in the field of view (like for annotations) for improved appearance without nasty bitmap-upsampling artefacts. This is inevitably laggier than using cached tiles, but caching itself has considerable overhead in terms of memory and worse appearance. I think this tradeoff makes sense, since details really matter when viewing the image at high magnification but the number of objects visible should be limited (possibly thousands, but not millions). However it does mean that if you have a large enough monitor, many detections, and a downsample value slightly less than 1, performance there certainly can be a noticeable lag... and object connections make this worse by meaning that thousands more lines need to be rendered. However, investigating this revealed that QuPath was painting all the connections twice, which certainly wasn't helping things :). So the PR fixes the double-painting bug. Along the way, it adds a spatial cache that enables QuPath to be a bit smarter about which connections it paints. The main reason for this change is to overcome an issue with long connections sometimes being broken at some resolutions:. ### Old behavior:; ![connection_bug-1](https://user-images.githubusercontent.com/4690904/194024037-795fceaa-e542-4c67-8fa2-84e6a8aca691.png). ### New behavior:; ![connection_fix-1](https://user-images.githubusercontent.com/4690904/194024122-00080b78-b59b-4b8f-bf0d-aa990683268c.png). Together, I'm not certain whether or not you'll see a substantial improvement in performance - but these changes addres",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189:1181,detect,detections,1181,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069#issuecomment-1268167189,1,['detect'],['detections']
Safety,"g.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); Caused by null at qupath.lib.images.servers.BioFormatsImageServer.getTimePoint(BioFormatsImageServer.java:930); at qupath.imagej.images.servers.BufferedImagePlusServer.getTimePoint(BufferedImagePlusServer.java:173); at qupath.imagej.helpers.IJTools.calibrateImagePlus(IJTools.java:220); at qupath.imagej.images.servers.BufferedImagePlusServer.readImagePlusRegion(BufferedImagePlusServer.java:241); at qupath.imagej.detect.tissue.SimpleTissueDetection2$GlobalThresholder.runDetection(SimpleTissueDetection2.java:158); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:120); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); INFO: Processing complete in 4,20 seconds; INFO: Completed with error java.lang.NullPointerException; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:11312,detect,detect,11312,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['detect'],['detect']
Safety,"his case it was not problematic that the green region extended outside of the tissue since there were no cells of interest in this “white space”. But ideally it would also fallow the “cut”. - I always start with lining the tumor border (blue) and then I extend it 500µm to get the green one. After this I perform the cell detection in the green one (but the blue one always disappears) after this I run the classifier and when this is completed I ‘expand’ my green annotation with -500µm to get the blue one again and after this I ‘expand the blue one with -500µm to get the black one. I think it may be better that the green and blue would be hollow rings around the outside of the black one. Since we want to measure cells in three different regions: in the tumor center (500 µm from the tumor border) (black), in the invasive front (area between the green and black annotation) and in the tumor (blue).But as of now I don’t know if it is possible to establish this?. - We want to count every immune cell in the tumor (+ and -) but not the tumor cells. In the beginning I tried “Positive cell detection” but when using this command, the software also counted a lot of cells that weren’t immune cells. That is why I switched to the classifier, I am very pleased with the results the classifier is giving me. We are scoring 7 different staining’s (70 samples per staining) and I would like to train the classifier for each staining but within a staining I would like to apply the same classifier for each sample. - In total it will be around 500 images. - I am just starting and trying some things out. I will try to create the annotations before cell detection, but as I have mentioned above: I start with the blue annotation and then I extend it 500µm to get the green one. But when I want to perform the cell detection the first annotation (blue) disappears. So I thought it was nog possible to perform a cell detection in overlapping annotation, or is there a way I can overcome this?. Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411026150:1384,detect,detection,1384,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411026150,4,['detect'],['detection']
Safety,"hy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected object; def completelyCovered = PathObjectTools.filterByROICovers(roi, allDetections); println ""Num completely covered: \t${completelyCovered.size()}"". // Set classifications for visualization; allDetections.each {it.classifications = []}; childObjects.each{it.classifications += ['child']}; regionObjects.each{it.classifications += ['region']}; hierarchyWithin.each{it.classifications += ['within']}; nucleusCentroidWithin.each{it.classifications += ['nucleus-centroid']}; centroidWithin.each{it.classifications += ['roi-centroid']}; intersecting.each{it.classifications += ['intersecting']}; completelyCovered.each{it.classifications += ['covered']}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:2137,Detect,Detections,2137,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,2,['Detect'],['Detections']
Safety,"i initially started with the detection measurements and manually summarized what i wanted to take from that on excel, but i have ~900 cores to analyze and thought their must be a more efficient way. Can this step be automated?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391780670:29,detect,detection,29,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391780670,1,['detect'],['detection']
Safety,"icult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be more useful:. > INFO: Processing complete in 55.47 seconds; INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.05, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; ERROR: Error reading image region; at loci.formats.tiff.IFD.getIFDLongArray(IFD.java:411); at loci.formats.tiff.IFD.getStripByteCounts(IFD.java:805); at loci.formats.tiff.TiffParser.getTile(TiffParser.java:682)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:2296,detect,detect,2296,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,2,['detect'],"['detect', 'detectionImageBrightfield']"
Safety,"ierarchy. The tests that each cell object passes contribute to the classification assigned, so that; * if two cells have the same color you can assume they were returned by the same methods; * if two cells have different colors, then at least one cell was returned by at least one method that didn't return the other cell (e.g. it intersects the selected ROI, but isn't completely covered by it). ![image](https://github.com/user-attachments/assets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting RO",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1064,detect,detections,1064,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['detect'],['detections']
Safety,"il.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansio",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3332,Detect,DetectionPluginTools,3332,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,2,['Detect'],"['DetectionPluginTools', 'DetectionRunnable']"
Safety,"ing by the downsample. However, the coordinates need to be integers - which makes me uneasy about what happens if the downsample is something like 4.23452345.; Should I be rounding or flooring when I scale up the coordinates?; And can I be sure that QuPath will do the right thing when it scales them back down, so that I get the original coordinates I wanted again...?. If not, then it seems I might get off-by-one errors and slightly unexpected results. If I want a 256 x 256 pixel region, I might end up with a 255 x 256 pixel region... which would be annoying. It seems that I can round or floor when scaling up, and then round or floor when scaling down, but I wasn't completely sure which I should be doing so I created a quick Python simulation to test what happens: https://gist.github.com/petebankhead/2d4a21cb69f3b68c8f8fa14475723647. Based on this, it seems I need to round in both directions... which was maybe a predictable conclusion for the more mathematically confident, but I wasn't sure of it's what QuPath does internally* and we can't count on users necessarily knowing that. (*However*, note that if the downsample is < 1 then all the methods fail...). I think it would be nice to resolve the ambiguity somehow, although adding an extra method; ```java; public T readLevel(int level, int x, int y, int width, int height, int z, int t);; ```; looks like a horrible explosion of ints. A possibly-simpler alternative might be to support something like this:; ```java; public T readScaledRegion(double downsample, int outputX, int outputY, int outputWidth, int outputHeight, int z, int t);; ```; where the coordinates are defined according to the output image, but the downsample isn't fixed to *have* to be a pyramidal level. Thinking about it, that could potentially be implemented more simply with another default method added to the interface that ultimately just called `readRegion`. The main trouble is that I don't know what to call the method. I'll keep thinking and try to ad",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089:1430,predict,predictable,1430,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089,1,['predict'],['predictable']
Safety,"ing e.g. a `sort_keys.txt` file with a list of the keys that are used. The purpose of `ResourceManager` (for me at least) is that it supports having several named resources, typically implementations of a specific serializable class. So we might have something like this:. ```java; class SortingKeys {; List<String> keys;. List<String> getKeys() {; return Collections.unmodifiableList(keys);; }. }. var sortingManager = project.getResources(""resources/sorting_keys"", SortingKeys.class, ""json"");; var sortKeys = sortingManager.contains(""sortKeys"") ? sortingManager.getResource(""sortKeys).getKeys() : Collections.emtpyList();; ```; but then it is still 'unconventional' to use a `Manager` when we only have a single resource with a fixed name (here, `""sortKeys""`). ---. What not use the alternative approach of extending the `Project` interface to implement [`MetadataStore`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/MetadataStore.java#L37) - or adding `String` metadata support similar to how it already works with [`ProjectImageEntry`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/projects/ProjectImageEntry.java#L49)?. Then the UI can store keys as a list of strings easily, with any key of its choosing and the result serialized within the project. To me, a `Map<String, String>` feels simpler and more intuitive. The advantages I see of a `Manager` are:; 1. It avoids adding to the `project.qpproj` file size (in case someone attempts to add ridiculously-large strings); 2. The sort order wouldn't be lost if a project is saved in an older version of QuPath. But these are only an issue of the `Map` is serialized directly within `project.qpproj`. We *could* potentially overcome both of these by storing the `Map` in a separate `.json` file anyway within `resources/sorting` - without needing to rely on `Manager` to do so. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470:2494,avoid,avoids,2494,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470,1,['avoid'],['avoids']
Safety,into build/qupath; LICENSE PATH: /home/gordon/src/qupath/license-unknown.txt; > Task :clean; > Task :qupath-core:clean; > Task :qupath-core-processing:clean; > Task :qupath-experimental:clean; > Task :qupath-extension-bioformats:clean; > Task :qupath-extension-omero:clean; > Task :qupath-extension-openslide:clean; > Task :qupath-extension-pen:clean; > Task :qupath-extension-processing:clean; > Task :qupath-extension-script-editor:clean; > Task :qupath-extension-svg:clean; > Task :qupath-extension-tensorflow:clean UP-TO-DATE; > Task :qupath-gui-fx:clean. > Task :qupath-core:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-gui-fx:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-extension-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details. > Task :qupath-experimental:compileJava; Note: /home/gordon/src/qupath/qupath-experimental/src/main/java/qupath/lib/gui/align/ImageAlignmentPane.java uses or overrides a deprecated API.; Note: Recompile with -Xlint:deprecation for details. > Task :qupath-extension-bioformats:compileJava; > Task :qupath-extension-omero:compileJava; > Task :qupath-extension-openslide:compileJava; > Task :qupath-extension-pen:compileJava; > Task :qupath-extension-script-editor:compileJava; > Task :qupath-extension,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:2517,unsafe,unsafe,2517,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['unsafe'],['unsafe']
Safety,"ion.getROI(). tw = (int) roi.getBoundsWidth(); th = (int) roi.getBoundsHeight(). if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; //if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500)){; //print result; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");; //IJ.run(imp, ""Median..."", ""radius=5"");; IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; // python code for normalisation and structure convolution; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");; //getHistogram(values, counts, 256); IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");; ; rm = RoiManager;; rm = RoiManager.getInstance(); ; ; if((rm==null) || (rm.getCount()<1)){; print(""No objects found""); }else{; //print rm.getCount(); //RoiManager.roiManager(""count""); //rm.runCommand(imp,""Measure"");; //rm.runCommand(imp,""Update"");; IJ.run(imp, ""Send Overlay to QuPath"", ""choose_object_type=Detection include_measurements"");. // Get a suitable file name; //String name = String.format(""%s (d=%.2f, x=%d, y=%d, w=%d, h=%d, z=%d).%s"", serverName, downsample, xi, yi, wi, hi, z, ext); // Create an output file; //File file = new File(dirOutput, name); // Save the image; //IJ.save(imp, file.getAbsolutePath()); // Print progress; //imp.show() ; rm.reset() ; ; }; ; //counter++; imp2 = IJ.getImage();; imp2.close();; }; ; }. ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357429324:2330,Detect,Detection,2330,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357429324,1,['Detect'],['Detection']
Safety,"is makes sense, but are there use cases where it would not be appropriate?. I can't think of any myself... however, if you run a command like; ```; selectAnnotations(); ```; then if there is more than 1 annotation available, the one that will become the 'primary' selected annotation is (from the user's perspectively) essentially random. Randomness doesn't feel good in this scenario, but neither does seemingly not having a selected object when you can plainly see that you definitely have selected object**s** (as is currently the case). > Or at least to me, this does not make sense. Not only does it quickly become more complex, but I personally don't believe a larger ROI is any more important than a smaller one. Perhaps it depends on the context. Good! Inasmuch as I don't like the idea much either. Its only benefit really is that it makes the choice non-random. I think sometimes it would 'feel' like the right choice, e.g. imagine if you have one large tissue annotation and two little annotations inside. I think making the large one the primary selection would feel somehow intuitive. But if, on the other hand, you have three annotations of similar size and importance I agree it doesn't make much sense. And it's probably better not to introduce too much predictable-but-dubious behavior, lest *someone* make it a key part of their workflow... So yeah, I think the size-based idea can be discarded. > I am not sure about null, but if having a primary selected object is important, not having one could throw a meaningful error rather than returning null. Hmmm, that sounds like it could work for code internal to QuPath, as long as it always checks both for `getSelectedObject()` and `getSelectedObjects()`. Although if calling either method in a script, the ambiguity and potential for confusion remains. Although then the question resurfaces, is it better to just leave things as they are?. In any case, the proposed change is implemented at https://github.com/qupath/qupath/pull/759",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869217737:1305,predict,predictable-but-dubious,1305,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869217737,1,['predict'],['predictable-but-dubious']
Safety,"is that it makes the sub-class “Tumour: Positive” but not “Stroma: Positive” and I can’t understand how to create this. Many tanks again, I’ll work on the nuclei shape more extensively later on. Lucia. From: Svidro <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Thursday, 18 October 2018 at 19:40; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Montorsi, Lucia"" <lucia.montorsi@kcl.ac.uk>, Author <author@noreply.github.com>; Subject: Re: [qupath/qupath] Elongated nuclei not correctly detected (#231). For the nuclei, I would recommend starting a thread on the forum where you can post some pictures, that sounds like more of a image analysis problem. 20X might also be challenging with truly thin, elongated nuclei. Even more challenging if the Hamamatsu defaults to saving with JPEG compression (bad for analysis, great for file size). You can both classify regions and cellular populations, so you can subdivide your sample into ""tumor"" and ""stroma"" annotations first, and then perform positive cell detection within each of those (or however many classifications you want). Another option is using derived classes, so that you would first classify by tumor and stroma, then classify the cells as positive or negative within those classifications: https://github.com/qupath/qupath/wiki/Object-classifications<https://emea01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fwiki%2FObject-classifications&data=01%7C01%7Clucia.montorsi%40kcl.ac.uk%7Cc0fb04b4d26e44a6d0fa08d63529246a%7C8370cf1416f34c16b83c724071654356%7C0&sdata=UQryuEzaf5zSNRtDGv8hrkp%2FfCUaV5EV%2FABLyh8vxoY%3D&reserved=0>. Either way, you can then ignore the stromal positive cells in the data processing (merge populations) however you want, or create a step that re-classifies any Stroma-positive to Stroma-negative, etc. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://emea01.safelin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/231#issuecomment-431292156:1178,detect,detection,1178,https://qupath.github.io,https://github.com/qupath/qupath/issues/231#issuecomment-431292156,1,['detect'],['detection']
Safety,"is there a solution for batch processing with qupath script?; below code partly work and export the original picture with detected cells overlay but it does not export the created density map overlay (which is showing in the content view). import qupath.imagej.tools.IJTools; import qupath.lib.gui.images.servers.RenderedImageServer; import qupath.lib.gui.viewer.overlays.HierarchyOverlay; import qupath.lib.regions.RegionRequest; import qupath.lib.analysis.heatmaps.ColorModels; import qupath.lib.analysis.heatmaps.ColorModels.DisplayBand; import qupath.lib.analysis.heatmaps.DensityMaps; import qupath.lib.analysis.heatmaps.DensityMaps.DensityMapBuilder; import qupath.lib.analysis.heatmaps.DensityMaps.DensityMapParameters ; import qupath.lib.analysis.heatmaps.DensityMaps;; import qupath.lib.objects.classes.PathClass;; import qupath.lib.analysis.heatmaps.ColorModels.ColorModelBuilder; import static qupath.lib.gui.scripting.QPEx.*. double downsample = 1; String path = buildFilePath(PROJECT_BASE_DIR, 'rendered', getProjectEntry().getImageName() +'-smc'+ '.png'); def viewer = getCurrentViewer(); def imageData = getCurrentImageData(); def options = viewer.getOverlayOptions(). def display = new qupath.lib.display.ImageDisplay(imageData); def params = new DensityMaps.DensityMapParameters(); def map = new DensityMaps.DensityMapBuilder(params); def server = new RenderedImageServer.Builder(imageData); .display(display); .downsamples(downsample); .layers(); .build(); ; // Write or display the rendered image; if (path != null) {; mkdirs(new File(path).getParent()); writeImage(server, path); } else; IJTools.convertToImagePlus(server, RegionRequest.createInstance(server)).getImage().show()",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1636869774:122,detect,detected,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1636869774,1,['detect'],['detected']
Safety,"ith consolidating the last portion of the code into a parallel stream, but it is not much faster than the original code for one parentROI. In my case, I want to calculate the intersections for multiple ROIs with the tile, so it was easier for me to write the code similar to the snippet below:. ```; //		have to make all these ""final"" temp variables.... probably a better way; 		double finalYMin = yMin;; 		double finalXMin = xMin;; 		boolean finalByColumn = byColumn;; 		Map<Integer, Geometry> finalColumnParents = columnParents;; 		boolean finalByRow = byRow;; 		Map<Integer, Geometry> finalRowParents = rowParents;; 		List<ROI> tileROIs = Collections.synchronizedList(new ArrayList<>());; 		var plane = parentROI.getImagePlane();; 		AtomicInteger nullInterExcepetions = new AtomicInteger(0);; 		IntStream.range(0, nx).parallel().forEach(xi -> {; 			double x = finalXMin + xi * w - overlap;; //			A very hacky way to consolidate the code into 1 loop.; //			Atomic Reference doesn't behave when getting hit by multiple streams setting potentially different values for each stream...; 			Geometry outerGeometryLocal = finalByColumn ? finalColumnParents.getOrDefault(xi, geometry) : geometry;; 			IntStream.range(0, ny).parallel().forEach(yi -> {; 				double y = finalYMin + yi * h - overlap;; 				Geometry geometryLocal = finalByRow ? finalRowParents.getOrDefault(yi, geometry) : outerGeometryLocal;. 				// Create the tile; 				var rect = GeometryTools.createRectangle(x, y, w + overlap * 2, h + overlap * 2);; 				Geometry inter = intersect(rect, geometryLocal);; 				if(inter==null) {; 					nullInterExcepetions.incrementAndGet();; 					return;; 				}; 				ROI roi = GeometryTools.geometryToROI(inter, plane);; 				tileROIs.add(roi);; 			});; 		});. 		if (nullInterExcepetions.get() > 0) {; 			logger.warn(""Tiles lost during tiling: {}"", nullInterExcepetions.get());; 			logger.warn(""You may be able to avoid tiling errors by calling 'Simplify shape' on any complex annotations first."");; 		}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298:1973,avoid,avoid,1973,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298,1,['avoid'],['avoid']
Safety,"ity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a classifier without needing to go through the UI, in a way that doesn't involve any big API changes - and which can be used when you can *know* in advance that the image doesn't need to be accessed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:1554,avoid,avoids,1554,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,1,['avoid'],['avoids']
Safety,"lassifier trained for 3 classes, saved for both classification and probability output - then ran the script at the bottom. Using a Mac Studio (2022) with M1 Max and 32 GB RAM the processing time was:. | v0.3.0 | v0.4.0-SNAPSHOT |; | ------------- | ------------- |; | 593.9 s | 60.1 s |. Results identical as far as I can tell. So... quite a substantial difference :). Cell detection took close to 30s, with 326 498 cells detected,. ```groovy; def checkpoints = [:]. setImageType('BRIGHTFIELD_H_E'); setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 255 255 255""}'). clearAllObjects(). checkpoints << ['Tissue detection': System.currentTimeMillis()]. createAnnotationsFromPixelClassifier(""Tissue detection"", 10000.0, 0.0, ""INCLUDE_IGNORED""). checkpoints << ['Cell detection': System.currentTimeMillis()]. selectAnnotations(); runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 1.0, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}'). for (classifier in ['Some probability', 'Some classification']) {. // Create annotation measurements; checkpoints << [""Annotation measurements for $classifier"": System.currentTimeMillis()]; selectAnnotations(); addPixelClassifierMeasurements(classifier, classifier); ; // Create cell measurements; checkpoints << [""Cell measurements for $classifier"": System.currentTimeMillis()]; selectCells(); addPixelClassifierMeasurements(classifier, classifier); }; checkpoints << [""Done"": System.currentTimeMillis()]; resetSelection(); println 'Done!'. def entries = checkpoints.entrySet",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584:1080,detect,detect,1080,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584,1,['detect'],['detect']
Safety,"let@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding 'a way to calculate the intensity for fluorescence above a threshold' do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:. * Using Send region to ImageJ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like this one<https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html>; * Using a script, macro or Simple tissue detection to generate the QuPath annotation first, then within QuPath calling Analyze → Calculate features → Add intensity features (experimental). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/187#issuecomment-407034348>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AnjxC6_wpAcAAwaZNs36171_gwZkNzouks5uJburgaJpZM4VYHCt>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407035378:1813,detect,detection,1813,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407035378,1,['detect'],['detection']
Safety,"ll trigger a lot of costly checks and events. Calling `addObjects` and passing a list should do much better. So the loop above could become; ```groovy; def pathObjects = []; for (i = 0; i <num_rois; i++) {; // The rest of the stuff, as above; pathObjects << new PathDetectionObject(roi); }; addObjects(pathObjects); ```; If this still doesn't perform well enough, and you don't mind deleting anything that might already exist on the hierarchy, using the following instead of `addObjects()` should perform better still:; ```groovy; clearAllObjects(); getCurrentHierarchy().getRootObject().addPathObjects(pathObjects); fireHierarchyUpdate(); ```. Anyhow, the reason I think that it should work one way or another is that you can generate similar numbers of vertices running the cell detection in QuPath itself. In that case, various tricks are used to help, e.g.; * Contours are smoothed after detection, and then simplified to reduce the numbers of vertices that need to be drawn; * Image tiles representing the objects are drawn on demand and cached - similar to having a pyramidal image, but one where the tiles are quickly created only when needed; * When viewing the image at a sufficiently low resolution, QuPath will check if a detection is well represented by a single pixel or rectangle and just draw that instead (to avoid the effort of handling all the vertices). You could do the polygon simplification on the OpenCV side, perhaps with `approxPolyDP`, or else on the QuPath side after already generating the polygon, using [`ShapeSimplifier.simplifyPolygon(PolygonROI polygon, final double altitudeThreshold)`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core/src/main/java/qupath/lib/roi/experimental/ShapeSimplifier.java#L145). Despite all that, I haven't tried doing this exact conversion before and my guess is that you might have a problem with having really really huge text files. If that's the case then it could be the bottleneck... but that can be solved too if necessary.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-357045269:1404,detect,detection,1404,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-357045269,3,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"ll was returned by at least one method that didn't return the other cell (e.g. it intersects the selected ROI, but isn't completely covered by it). ![image](https://github.com/user-attachments/assets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROI",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1309,Detect,Detections,1309,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['Detect'],['Detections']
Safety,"lls from the previous example, and a loop for all clusters from the first. I will start with the loop for all clusters since I have some idea how that would work. Note that this does not summarize stain OD or actual spot area, just estimated spot count. It also only works if the second stain is labeled as DAB! After that, you should have the two values you need to get your ratio. ```; import qupath.lib.scripting.QP; def NuclearSum = ""Nuclear Spot Sum""; def CytoSum = ""Cytoplasmic Spot Sum"". //Probably not necessary when using putMeasurement, but I liked to have this loop for completeness, plus it will reset all values to zero when rerunning the script.; for (def cell : QP.getDetectionObjects()) {; def ml = cell.getMeasurementList(); ml.putMeasurement(NuclearSum, 0); ml.putMeasurement(CytoSum, 0); ml.closeList(); }; def clusters = getObjects({p -> p.class == qupath.imagej.detect.cells.SubcellularDetection.SubcellularObject.class}). // Loop through clusters; for (c in clusters) {; // Each subcellular detection can have one parent; def cell = c.getParent(). def ml = cell.getMeasurementList(); ; //Important note: This value (Num Spots) will be heavily influenced by the Estimated Spot Size when running the; //subcellular detection command. you may instead want to use the Area measurement which you can find; //by clicking on a subcellular detection; double thisCluster = c.getMeasurementList().getMeasurementValue(""Num spots""). //find out if this subcellular detection is nuclear or cytoplasmic, then add the area of that detection to the cell measurement; def location = c.getPathClass().getName(). if ([""Nuclear""].contains(location)) {; double nuclear = cell.getMeasurementList().getMeasurementValue(NuclearSum);; nuclear = nuclear+thisCluster; ml.putMeasurement(NuclearSum, nuclear); ml.closeList(); }; if ([""Cytoplasmic""].contains(location)) {; double cyto = cell.getMeasurementList().getMeasurementValue(CytoSum);; cyto = cyto+thisCluster; ml.putMeasurement(CytoSum, cyto); ml.clo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-347208202:1585,detect,detection,1585,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-347208202,1,['detect'],['detection']
Safety,"lowing error log (see below):. // Set the magnification & pixel size (be cautious!!!); def metadata = getCurrentImageData().getServer().getOriginalMetadata(); metadata.magnification = 40; metadata.pixelWidthMicrons = 0.25; metadata.pixelHeightMicrons = 0.25. setImageType('BRIGHTFIELD_H_DAB');; Thread.sleep(100); setColorDeconvolutionStains('{""Name"" : ""H-DAB TMA40x"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.82788 0.53885 0.15571 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.15891 0.36799 0.91615 "", ""Background"" : "" 210 208 209 ""}');; Thread.sleep(100); runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; Thread.sleep(100); selectAnnotations();; Thread.sleep(100); runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 14.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.09, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; Thread.sleep(100). Error log:. INFO: Starting script at Thu Sep 27 09:20:09 CEST 2018; ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:1292,detect,detect,1292,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['detect'],['detect']
Safety,"lusters from the first. I will start with the loop for all clusters since I have some idea how that would work. Note that this does not summarize stain OD or actual spot area, just estimated spot count. It also only works if the second stain is labeled as DAB! After that, you should have the two values you need to get your ratio. ```; import qupath.lib.scripting.QP; def NuclearSum = ""Nuclear Spot Sum""; def CytoSum = ""Cytoplasmic Spot Sum"". //Probably not necessary when using putMeasurement, but I liked to have this loop for completeness, plus it will reset all values to zero when rerunning the script.; for (def cell : QP.getDetectionObjects()) {; def ml = cell.getMeasurementList(); ml.putMeasurement(NuclearSum, 0); ml.putMeasurement(CytoSum, 0); ml.closeList(); }; def clusters = getObjects({p -> p.class == qupath.imagej.detect.cells.SubcellularDetection.SubcellularObject.class}). // Loop through clusters; for (c in clusters) {; // Each subcellular detection can have one parent; def cell = c.getParent(). def ml = cell.getMeasurementList(); ; //Important note: This value (Num Spots) will be heavily influenced by the Estimated Spot Size when running the; //subcellular detection command. you may instead want to use the Area measurement which you can find; //by clicking on a subcellular detection; double thisCluster = c.getMeasurementList().getMeasurementValue(""Num spots""). //find out if this subcellular detection is nuclear or cytoplasmic, then add the area of that detection to the cell measurement; def location = c.getPathClass().getName(). if ([""Nuclear""].contains(location)) {; double nuclear = cell.getMeasurementList().getMeasurementValue(NuclearSum);; nuclear = nuclear+thisCluster; ml.putMeasurement(NuclearSum, nuclear); ml.closeList(); }; if ([""Cytoplasmic""].contains(location)) {; double cyto = cell.getMeasurementList().getMeasurementValue(CytoSum);; cyto = cyto+thisCluster; ml.putMeasurement(CytoSum, cyto); ml.closeList(); }; ; } ; println(""Done summarizing""). ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-347208202:1807,detect,detection,1807,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-347208202,4,['detect'],['detection']
Safety,"n be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about about extensive refactoring of `BioFormatsImageServer` because I've written so many subtly broken versions of it myself throughout in QuPath's history :) It's really hard to get 'right'; the previous version was messy, but the code seemed to work pretty reliably (well, except for [this...](https://forum.image.sc/t/qupath-stardist-extension-error-with-large-images/80221/19)). ---. I realise it's *incredibly hard* (/ impossible) to write this without failing examples, and most public examples *won't* fail because we get lucky with the different series types. My guess is that .czi is one of the more awkward formats. Based on that, I found another failing example here: https://zenodo.org/record/7149674. Specifically, check out the label and macro images with the PR vs. in QuPath v0.4.4. In this case, the problem is ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:4505,safe,safest,4505,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['safe'],['safest']
Safety,"nRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Requesting region for stain vector editing: ; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 989 nuclei detected (processing time: 1.90 seconds); INFO: Processing complete in 1.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 2.11 seconds); INFO: Processing complete in 2.15 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 2443 nuclei detected (processing time: 3.01 seconds); INFO: Processing complete in 3.03 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Optical density sum"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 4",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:3382,detect,detected,3382,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detected']
Safety,odeTile(CellSensReader.java:1042); at loci.formats.in.CellSensReader.openBytes(CellSensReader.java:549); at loci.formats.FormatReader.openBytes(FormatReader.java:884); at loci.formats.ImageReader.openBytes(ImageReader.java:444); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.ReaderWrapper.openBytes(ReaderWrapper.java:334); at loci.formats.gui.BufferedImageReader.openImage(BufferedImageReader.java:86); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:648); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:61); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:166); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:19); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:536); at qupath.imagej.helpers.IJTools.convertToImagePlus(IJTools.java:573); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:156); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:120); at qupath.imagej.objects.PathImagePlus.getImage(PathImagePlus.java:47); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:269); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:10970,detect,detect,10970,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,4,"['Detect', 'detect']","['DetectionPluginTools', 'DetectionRunnable', 'detect']"
Safety,"of settings that were used in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, p",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1178,detect,detection,1178,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,1,['detect'],['detection']
Safety,on-omero:clean; > Task :qupath-extension-openslide:clean; > Task :qupath-extension-pen:clean; > Task :qupath-extension-processing:clean; > Task :qupath-extension-script-editor:clean; > Task :qupath-extension-svg:clean; > Task :qupath-extension-tensorflow:clean UP-TO-DATE; > Task :qupath-gui-fx:clean. > Task :qupath-core:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-gui-fx:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-extension-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details. > Task :qupath-experimental:compileJava; Note: /home/gordon/src/qupath/qupath-experimental/src/main/java/qupath/lib/gui/align/ImageAlignmentPane.java uses or overrides a deprecated API.; Note: Recompile with -Xlint:deprecation for details. > Task :qupath-extension-bioformats:compileJava; > Task :qupath-extension-omero:compileJava; > Task :qupath-extension-openslide:compileJava; > Task :qupath-extension-pen:compileJava; > Task :qupath-extension-script-editor:compileJava; > Task :qupath-extension-svg:compileJava; > Task :compileJava; > Task :processResources; > Task :classes; > Task :copyChangelog; > Task :qupath-core:processResources; > Task :qupath-core:classes; > Task :qupath-core:jar; > Task :qupath-core-processing:processResources; > Task :qupa,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:2775,unsafe,unsafe,2775,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['unsafe'],['unsafe']
Safety,"ons everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected object; def completelyCovered = PathObjectTools.filterByROICovers(roi, allDetections); println ""Num completely covered: \t${completelyCovered.size()}"". // Set classifications for visualization; allDetections.each {it.classifications = []}",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1741,Detect,Detections,1741,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['Detect'],['Detections']
Safety,"opic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FA5G6YB3KO5IO3F2PMFLETCDYCPOOXAVCNFSM4NF3XJJKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCNZZGEZDQMBYGEZQ>.; You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>; The information in this e-mail is intended only for the person to whom it is addressed. If you believe this e-mail was sent to you in error and the e-mail contains patient information, please contact the Mass General Brigham Compliance HelpLine at https://www.massgeneralbrigham.org/complianceline <https://www.massgeneralbrigham.org/complianceline> .; Please note that this e-mail is not secure (encrypted). If you do not wish to continue communication over unencrypted e-mail, please notify the sender of this message immediately. Continuing to send or respond to e-mail after receiving this message means you understand and accept this risk and wish to continue to communicate over unencrypted e-mail.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:4378,risk,risk,4378,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['risk'],['risk']
Safety,"otation(PathObject pathObject) {; def roiName = pathObject.getROI()?.getRoiName(); pathObject.setPathClass(PathClass.getInstance(roiName)); }; ```. I think it makes sense for such classifiers to be added to a single *Object classification* submenu, rather than split between *Detection* and *Annotation* (also, there might one day be a need to classify *TMA cores*, which don't fit into either category). Also, the top of the *Train object classifier* dialog makes it possible to select different types of objects to classify. <img width=""418"" alt=""Train object classifier"" src=""https://github.com/qupath/qupath/assets/4690904/d6977ca8-a018-4d33-bd7c-f31eed611749"">. Admittedly, these are all detections or subtypes of detection... but that's because I couldn't think of a good workflow to use them for annotations (since you're using annotations to train the classifier, how should QuPath distinguish between which annotations are for training and which should be classified...?). The internal representation of the object classifier is capable of specifying the type of object it should be applied to, even though we have no easy way to interactively create annotation classifiers through the user interface, or examples where that is actually used. Perhaps more usefully, we plan to enable the use of deep learning models for classification - and these don't have the complication of needing annotations for training. Much of the code to enable this has already been written, but we need to figure out how best to link it up to the user interface and provide meaningful models for the feature to be useful. When it *is* useful, I expect it to become *very* useful. QuPath's best features probably don't exist yet, but we try to design the software thinking far enough into the future so that they can be added... For that reason, if the fact that most commands under *Object classification* currently only work for detections is confusing, I think we need some other way to resolve that confusion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110:3522,detect,detections,3522,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110,1,['detect'],['detections']
Safety,"otations. You can go through and set all the ‘Missing’ cores to be available, and all the available cores to be ‘Missing’. Then train up a new classifier, and export the results again.; This way you can use multiple classifiers. It’s not very elegant at all, and I’m not sure that I would recommend it… but it is an option.; > If you try this, you could toggle the ‘Missing’ status in a script or manually. If you do it manually, I’d suggest opening the ‘Hierarchy’ tab on the left of the screen, and selecting the first core. Make sure you have clicked somewhere inside the main viewer to activate it, then use the arrow keys to move around the TMA grid, and press ‘backspace’ to toggle the ‘Missing’ status. Because the default settings mean that selected cores are shown as yellow, rather than dark/light blue, having the ‘Hierarchy’ tab open is useful to show you whether the selected core is missing or not. 3. You could do something similar to the above, but set the ‘missing’ status before cell detection… so you end up without any cells in the cores that shouldn’t be included. This helps avoid generating a lot of badly-classified data that you then need to remember to ignore later. However, it does then require being able to estimate in advance which cores should be classified together. 4. If you want to use a separate classifier for every core, you could try a more drastic approach of exporting every core as a separate image. To do this, first dearray your slide. Then, you can use [Extension &rarr; ImageJ &rarr; ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) to export each image. You need a very simple macro, like the one below:; ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```; where you’ll need to change the path to be something more suitable for your computer. It takes advantage of the fact that the ‘title’ of the image sent to ImageJ is the same as the TMA core, so using this as the filename can help y",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:2403,detect,detection,2403,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['detect'],['detection']
Safety,"perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile. Anyway, thanks a lot for your help, I am going to play more with QuPath to test all the other possibilities!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:1389,avoid,avoid,1389,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"rage of additional metadata, i.e. pixel sizes and coordinates.; */. import ij.IJ; import ij.ImagePlus; import qupath.imagej.images.servers.ImagePlusServer; import qupath.imagej.images.servers.ImagePlusServerBuilder; import qupath.lib.images.servers.ImageServer; import qupath.lib.regions.RegionRequest; import qupath.lib.scripting.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels = 5000 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 10 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput = ""G:\\Image Dump"" // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!. int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 1000 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> serverOriginal = QP.getCurrentImageData().getServer(). // Get an ImagePlus server; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = serverOriginal.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsa",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-315148862:1343,avoid,avoid,1343,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-315148862,2,['avoid'],['avoid']
Safety,"read] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] [INFO ] q.lib.scripting.DefaultScriptEditor - Loading script file /home/bl/ip/QuPath/app/TestJep.groovy; 02:40:28.109 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean red (from Java): 86.81525; 02:40:28.121 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean green (from Java): 72.492275; 02:40:28.124 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean blue (from Java): 68.141675; 02:40:28.624 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Started JEP: jep.Jep@6bc4b2e2; ImportError: numpy.core.multiarray failed to import; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f930536d03f, pid=27357, tid=0x00007f932091e700; #; # JRE version: OpenJDK Runtime Environment (8.0_111-b14) (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14); # Java VM: OpenJDK 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [jep.so+0x1a03f] convert_jndarray_pyndarray+0x5bf; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/bl/ip/QuPath/app/hs_err_pid27357.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #. [1]+ Aborted (core dumped) ./QuPath; ```. I am thinking that this might be worth bringing up with the JEP developers. I am going to spend a little more time playing with J",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:9427,detect,detected,9427,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['detect'],['detected']
Safety,"rialization quite easy if it's required in a script anyway... except if things are circular. Which brings me to... * `exportObjectsAsSerialized` looks like it doesn't actually use the transformed list; it also potentially allows circular references via parents/children, which could be confusing and/or buggy. I don't think we need this method if we are discouraging serialization (although I could be wrong... especially if we find a way to use it internally for convenience). * *If* `importObjectsFromSerialized` is in the public API, I think it should handle things other than lists, e.g. individual objects, arrays of objects, collections. But I'd prefer to expose it in the public API only if its benefits are clear enough. * It looks like `.qpdata` is being used for serialized object lists. We really shouldn't add a new file type with the same extension. Rather, we *can* read objects from an existing `.qpdata` file using [`PathIO.readHierarchy(File)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/io/PathIO.java#L410) - this should work even if the server is unavailable itself. The ability to import from old `.qpdata` files is important, but I'd like to avoid encouraging anyone to write `.qpdata` files other than those handled internally within projects (to make it easier for us to replace the format in the future). * A common use case will be transferring objects between images in the same project. Ideally this would be possible without exporting/importing, but rather simply choosing the project entry for import. Internally, this can use [`ProjectImageEntry.readHierarchy()`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/projects/ProjectImageEntry.java#L210).; * Adding this to the UI is tricky, since navigating long lists of project entries is awkward.... could it be supported by dragging an entry from the project list onto a viewer?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:4019,avoid,avoid,4019,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,1,['avoid'],['avoid']
Safety,ries from /home/gordon/src/qupath/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /home/gordon/src/qupath/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /home/gordon/src/qupath/license-unknown.txt; > Task :clean; > Task :qupath-core:clean; > Task :qupath-core-processing:clean; > Task :qupath-experimental:clean; > Task :qupath-extension-bioformats:clean; > Task :qupath-extension-omero:clean; > Task :qupath-extension-openslide:clean; > Task :qupath-extension-pen:clean; > Task :qupath-extension-processing:clean; > Task :qupath-extension-script-editor:clean; > Task :qupath-extension-svg:clean; > Task :qupath-extension-tensorflow:clean UP-TO-DATE; > Task :qupath-gui-fx:clean. > Task :qupath-core:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-gui-fx:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: Some input files use unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-extension-processing:compileJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details. > Task :qupath-experimental:compileJava; Note: /home/gordon/src/qupath/qupath-experimental/src/main/java/qupath/lib/gui/align/ImageAlignmentPane.java uses or overrides a deprecated API.; Note: Recompile with -Xlint:deprecation for d,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:2250,unsafe,unsafe,2250,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['unsafe'],['unsafe']
Safety,"riptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); Caused by null at qupath.lib.images.servers.BioFormatsImageServer.getTimePoint(BioFormatsImageServer.java:930); at qupath.imagej.images.servers.BufferedImagePlusServer.getTimePoint(BufferedImagePlusServer.java:173); at qupath.imagej.helpers.IJTools.calibrateImagePlus(IJTools.java:220); at qupath.imagej.images.servers.BufferedImagePlusServer.readImagePlusRegion(BufferedImagePlusServer.java:241); at qupath.imagej.detect.tissue.SimpleTissueDetection2$GlobalThresholder.runDetection(SimpleTissueDetection2.java:158); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:120); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); INFO: Processing complete in 4,20 seconds; INFO: Completed with error java.lang.NullPointerException; INFO: ; qupath.imagej.detect.tissue.SimpleTissueDetection2 {""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:11436,Detect,DetectionPluginTools,11436,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,4,"['Detect', 'detect']","['DetectionPluginTools', 'DetectionRunnable', 'detect']"
Safety,"rizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: Requesting region for stain vector editing: ; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 989 nuclei detected (processing time: 1.90 seconds); INFO: Processing complete in 1.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": fals",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:2230,detect,detectionImageBrightfield,2230,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detectionImageBrightfield']
Safety,"s a continual fight to avoid very expensive processing every time an object changed - because `resolveHierarchy()` was effectively being called automatically, and lots of things needed to update. I thinks this shows event system is *very* overdue a major revision. > I'm sure there is reason behind it, but here a hierarchy changed event is emitted, instead of an object added event. From your post and my failing memory, I suspect that the idea was that the 'object added' event would just handle a single object, but if multiple objects were added then we fired a more general structure change event. I guess this was because, when adding a single object, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`. What it be sufficient to change the problematic condition to this?. ```java; // Try to avoid calling too often; 		if (undoingOrRedoing || event.isChanging() || maxUndoHierarchySize.get() <= 0); 			return;. 		// During processing, we have ParallelTileObjec",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:1190,safe,safer,1190,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,1,['safe'],['safer']
Safety,"s); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; #; # A fatal error has been detected by the Java Runtime Environment:; [thread 50032 also had an error]; #; # SIGSEGV (0xb) at pc=0x00007f6271c2df1e, pid=49988, tid=50030; #; # JRE version: OpenJDK Runtime Environment AdoptOpenJDK (14.0.1+7) (build 14.0.1+7); # Java VM: OpenJDK 64-Bit Server VM AdoptOpenJDK (14.0.1+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0x8af1e] __libc_malloc+0x11e; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/gordon/src/qupath/core.49988); #; # An error report file with more information is saved as:; # /home/gordon/src/qupath/hs_err_pid49988.log; [thread 50020 also had an error]; #; # If you would like to submit a bug report, please visit:; # https://github.com/AdoptOpenJDK/openjdk-support/issues; #; [1] 49988 abort (core dumped) ./build/dist/QuPath-0.2.0-m12/bin/QuPath-0.2.0-m12; ```. The build I currently have with `-Ptensorflow-cpu=true` is working, including the wand tool and stardist.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:2457,detect,detected,2457,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,2,"['abort', 'detect']","['abort', 'detected']"
Safety,"scn file are pyramidal. I only selected the ""only tissue"" images (corresponding to the maximum magnification/resolution) to run the project on. ; ![selected for project](https://user-images.githubusercontent.com/47432131/53500012-2949e400-3a6f-11e9-8ebe-f29757c2d817.JPG); There are no objects in the Hierarchy or on the image; ![hierarchy](https://user-images.githubusercontent.com/47432131/53500109-50a0b100-3a6f-11e9-8577-d70b98b49a08.JPG); However, the script is running and detecting objects as you can see in the script editor. I added the ""merging annotation results"" script and now the merged txt file has all the annotations, although the single txt files still don't. Which is fine, since I only want the merged file.; ![exported txt file](https://user-images.githubusercontent.com/47432131/53500335-bbea8300-3a6f-11e9-9e55-76e6e881da5f.JPG); Now I want to know if there was a way to have the original image name exported with the annotations instead of the maximum resolution image name.; ![image name](https://user-images.githubusercontent.com/47432131/53500384-d45a9d80-3a6f-11e9-82ce-83c16e53627f.JPG); And if you could help me modify the merging annotation script so that instead of prompting for a directory file it saves the merged annotations on the project file directly. Do I have to replace; def dirResults = QuPathGUI.getSharedDialogHelper().promptForDirectory(); with; def dirResults = buildFilePath(PROJECT_BASE_DIR, 'annotation results'); ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/268#issuecomment-467906370:479,detect,detecting,479,https://qupath.github.io,https://github.com/qupath/qupath/issues/268#issuecomment-467906370,1,['detect'],['detecting']
Safety,"sed in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, positive cell density).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1499,detect,detection,1499,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,5,['detect'],"['detect', 'detection']"
Safety,"ser-images.githubusercontent.com/16352785/33573958-c45aa460-d937-11e7-8d4f-1d13d89a5e61.png). Change the image type in the image tab into ""Brightfield H&E"". ; Then feed it with statistics. ; Analyse > Calculate features > add intensity features. Use these checkboxes: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574028-0b866eb4-d938-11e7-820d-3629d339a516.png). and run it for detections. . Next step is to train a classifier to detect the spheroids: First create a class ""Spheroid"" in the annotation tab by rightclick onto the list of classes: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574089-3396762e-d938-11e7-8665-d2eef84ae60b.png). Then use the polygon and draw a circle around spheroids can set class of the polygon to ""Spheproid""; and paint polygon in the whitespace and set class to other or whitespace: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574170-7e522f3c-d938-11e7-9a84-d75add61bf04.png). Now go to menue ""Classify"" > ""create detection classifier"". ; Press advanced options and then ""use all"". Then build and apply. ; ![grafik](https://user-images.githubusercontent.com/16352785/33574202-9c0ac8a4-d938-11e7-822b-a9706b8cf600.png). The first result looks like that: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574227-a943d70e-d938-11e7-84a0-f4aef4baa9b1.png). after enough training you can convert the spheroid reagions into real regions of interest and afterwards for example count cells: . That is done by: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574256-c49afc1c-d938-11e7-8dfc-f03f1967c133.png). choose only spheroids to be converted to roi: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574300-e2ee9d72-d938-11e7-9130-871b14ac3036.png). The image looks like that now: ; ![grafik](https://user-images.githubusercontent.com/16352785/33574325-f333fc72-d938-11e7-961f-0bafbeda1595.png). the brown areas are the speroid ROIs. ; You can now rund celldetect",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349092952:1262,detect,detection,1262,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349092952,1,['detect'],['detection']
Safety,"ssets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1488,Detect,Detections,1488,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['Detect'],['Detections']
Safety,"st intuitive thing that should happen, and is not a bug. If this didn’t happen, then you if ran the cell detection command twice with the same parent selected, you would end up having every cell counted twice - not to mention the strange things that might happen with overlapping objects if you were to run other tiling/superpixel commands. It's not clear to me what was the purpose of doing manual counts followed by automated counts within the exact same region, but (as you've found) it is something that is not supported. You *could* do it the opposite way (i.e. automated counts followed by manual counts). However, if it was my goal to compare manual and automated cell counting then I would do the automatic counts in duplicate project and keep the data separated. Furthermore, you can do automated counts and then select 'Convert detections to points' within the 'Points tool' to initialize the (manually-editable) points that can subsequently be modified to generate 'semi-automated counts'. With regard to being unable to reopen a data file, this is something that has been reported some months ago (e.g. #58), but I'm not aware of it being an ongoing problem - or at least not one I have ever been able to reproduce. If QuPath fails to write a complete data file, then you should find that a '.qpdata.backup' file exits somewhere inside your project/data folder. If you strip the '.backup' data part from the file name, then it should be possible to recover the last saved version. > *-Information about the object hierarchy is at https://github.com/qupath/qupath/wiki/Object-hierarchies But from a quick look it seems that 'point' objects do not behave in the way you might expect, in that it appears that a point object is the child of a region if the *first* point is inside that region - and adding subsequent points (inside or outside the region) doesn't change this relationship. This is potentially a bug... or at least unintuitive behavior that may well change in a future release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342941759:1895,recover,recover,1895,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342941759,1,['recover'],['recover']
Safety,"t, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`. What it be sufficient to change the problematic condition to this?. ```java; // Try to avoid calling too often; 		if (undoingOrRedoing || event.isChanging() || maxUndoHierarchySize.get() <= 0); 			return;. 		// During processing, we have ParallelTileObjects changing to show which part of the image is being handled; 		// - but we don't want to record these; 		if (!event.getChangedObjects().isEmpty() && event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject)); 			return;; ```. From a quick try, I think that's enough to fix #1487 but you're deeper into the code than me. The `ParallelTileObjects` are the squares that appear during certain commands, like cell detection, to indicate what is happening. I expect that we could *dramatically* simplify `PathObjectHierarchyEvent` for future versions - but if we can make undo/redo less bad with a small change, that would be excellent.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:2089,avoid,avoid,2089,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"thanks again @petebankhead. That was the issue. I'm posting the code in case somebody else is interested. . ```; if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");. IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");. // code for normalisation and preprocessing prior to segmentation. IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");. RoiManager manager = RoiManager.getInstance();; if (manager == null); manager = new RoiManager(). if((manager==null) || (manager.getCount()<1)){; print(""No object detected""); }else{; ; // call IJ roi to qupath roi conversion; def ijROIs = QUPath_Send_Overlay_to_QuPath.createPathObjectsFromROIs(imp,; manager.getRoisAsArray(),; serverOriginal,; (double) 4,; true,true,0,0,0). for (annotationIJ in ijROIs) {; def roiIter = annotationIJ.getROI(); def pathObject3 = new PathDetectionObject(roiIter); addObject(pathObject3); }. manager.reset(); ; }; ; //print QP.detectionObjects.lastIndexOf(); ; counter++; imp2 = IJ.getImage();; imp2.close(); ; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357668235:1284,detect,detected,1284,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357668235,2,['detect'],"['detected', 'detectionObjects']"
Safety,"through channels; for (def channel in server.getMetadata().getChannels()) {; // Extract the channel name; def channelName = channel.name; ; // Skip some channels; if ('DAPI' in channelName || 'Autofluorescence' in channelName); continue; ; // Create a classification name from the channel; // Here, I take the first bit up until any whitespace; def classificationName = channelName.split()[0]. // Define the measurement we want; def measurementName = ""Cell: $channelName mean""; ; // Calculate some threshold from the measurement; // Here, just the mean; double threshold = cells.measurements[measurementName].average(); ; // Append a classification to all the cells above the threshold; cells.each { cell ->; if (cell.measurements[measurementName] > threshold); cell.classifications += [classificationName]; }; }. // Figure update (could do this automatically...); fireHierarchyUpdate(); ```. Closer inspection reveals a few Groovy tricks at work:. * `List.each { }` as a shorter alternative to for loops; * Avoid explicitly calling getters (e.g. `channel.name` rather than `channel.getName()`, `cell.measurements` rather than `cell.getMeasurements()` or - previously in QuPath - `cell.getMeasurementList()`; * Getting from a map using `map[key]` syntax (rather than `map.get(key)`; * Calling a method on a list to get it applied to all elements... so `cells.measurements[measurementName].average()` first extracts all the measurements, then averages them; * Sneakily applying a `setClassifications()` again by accessing it like a property - and using collection concatenation with `=+` to join the old classifications to the new ones; * this works in the opposite direction, with `-=` to remove one or more classifications. The changes have been made without introducing any changes to QuPath's data files, since `PathClass` and `MeasurementList` are still doing the main work, it's just that there are now alternative ways to interact with them. They are designed to map well with Groovy tricks, whi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235:1902,Avoid,Avoid,1902,https://qupath.github.io,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235,1,['Avoid'],['Avoid']
Safety,"tive cells in different images and combining the results could potentially cause practical problems in terms of partially overlapping cells, which might have differing positive/negative classifications depending upon staining localization and intensity... resulting in a confusing or unexpected result. Therefore, to avoid this situation, it is not supported. I would suggest applying your detection using optical density sum, but adjusting the other parameters to try to obtain a better result. In particular, . * Increasing/decreasing 'Threshold' under *Intensity parameters*; * Either increasing 'Background radius', or setting the value to zero (to eliminate background subtraction altogether) - this is mostly relevant if the cells in the image is particularly large or densely-packed. Use of the brightness/contrast tool (as described [here](https://github.com/qupath/qupath/wiki/Changing-colors#the-brightnesscontrast-tool)) to separate stains, along with the pixel intensity values shown in the bottom right of the viewer, can help figure out appropriate values for the intensity threshold. This can also help you see how cleanly the hematoxylin and DAB have been separated. If the stain separation is not particularly good, the documentation on [Estimating stain vectors](https://github.com/qupath/qupath/wiki/Preprocessing#estimate-stain-vectors) and [CD3 analysis](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis#estimate-stain-vectors-watch) show how this may be improved. Your other option for Ki67 would be to use *Fast cell counts* - as documented for [CD3](https://github.com/qupath/qupath/wiki/TMA-CD3-analysis). This gives another method of detection that may sometimes perform better (and sometimes less well). But since it only creates a single point for each cell (rather than detecting the full cell), it is best used for defined regions of interest... when you don't need to use the full cell information to train QuPath to distinguish between tumor and non-tumor cells.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-275932246:1816,detect,detection,1816,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-275932246,2,['detect'],"['detecting', 'detection']"
Safety,"to make that possible. The ```.qpclassifier``` file should therefore be considered 'locked-down', since you can't really change that classifier again directly. Fortunately, so long as you've saved the data for each image as you went along (including your annotations), you can work around this. To do so, you start by creating a new detection classifier and starting to train it by adding annotations and setting their classifications on any image. Then if you open each of the images you previously annotated for training, QuPath will look for any annotated regions and (optionally) add them to the training as well. Using this approach, you end up with a whole new classifier - but it can be based on the old training, plus whatever you want to add. This is ok if you only used one or two images for training in the past, but it could be a bit annoying if you annotated lots of images in a project. In this case, there is a shortcut that you can use. Click on *Advanced options* in the *Create detection classifier* window and select the ```More...``` button on the right. If you choose *Rebuild training from project* QuPath will then loop through *all* the images in the project and use any annotations it finds to train the new classifier. For your other question, the classifier is applied across the entire slide that is currently open - so that means that the classification will be updated for all TMA cores that are on the current slide (but *not* TMA cores that are on a different slide!). When you train the classifier and open a new image, you have the option to retain your training (i.e. continue to build a classifier, using all the information from the old slide that you are closing and also the new slide that you are opening) or not (i.e. discard all the training information from the slide that was previously open). Again, the ```More...``` button can be useful. You can use it to find out how many objects have been used for training for each image in the project (*Show traini",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288491139:1335,detect,detection,1335,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288491139,1,['detect'],['detection']
Safety,"tor$ProjectTask.call(DefaultScriptEditor.java:1237); at javafx.concurrent.Task$TaskCallable.call(Task.java:1425); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3214,detect,detect,3214,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detect']
Safety,"tyle: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Openslide: Property not available: openslide.objective-power; INFO: Test reading thumbnail with openslide: passed (BufferedImage@77accd0e: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 200 height = 193 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for L:\basic\divg\CEMM-Lexor\SannetH\1. SANNE\Project 2. IHC Validation PICCOLO and COIN\Qupath PICCOLO\R-PICCOLO-16_CDX2-88_20x.tiff; INFO: Estimating H-DAB staining; INFO: Image data set to ImageData: Brightfield (H-DAB), R-PICCOLO-16_CDX2-88_20x; INFO: Will (re)compute TMA grid...; INFO: Processing complete in 1.26 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}; INFO: 1165 nuclei detected (processing time: 3.94 seconds); INFO: Processing complete in 3.98 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigma",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:1478,detect,detected,1478,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['detect'],['detected']
Safety,"ub.io/qupath/2018/03/19/qupath-updates.html#classification-lists-are-stored-in-projects. ### Current situation (v0.1.2) & planned changes; Currently, the class list is saved in the preferences - and not any individual project or data file. In the next release, I plan that the class list will be saved in the preferences as _also_ in the project. Furthermore, it will be possible to import class lists from different projects. I hadn't realised when I was writing it at first how long or complex the class lists would become... and I understand that losing a long list can be very frustrating. ### The class list & object classes in the image; The classes actually applied in the image _don't_ need to correspond to the class list. The purpose of the class list is only to provide a way to assign classes to annotations manually. It's very possible to have objects with other classes in the image; this happens often (e.g. with 'Positive cell detection' you can get cells with 'Positive' and 'Negative' classes - but these don't need to appear in the class list for it to work). ### The uniqueness of classes; If you create a new class in the class list and it has _exactly_ the same name as a previous one, then it should refer to _exactly_ the same class. If the class doesn't exist, it will be created. But if it exists anywhere in the image, then the existing class with that name will be used. This is important for how QuPath does things. Unfortunately, the rule is _very_ strict. Any difference in class name (e.g. different capitalization, spaces) results in a different class. So it is necessary to be very careful when doing this. > I _think_ the color for the class is random. I may have changed that for the next version to make the color pseudo-random, but consistently the same if the same name is typed (making it easier to identify discrepancies). I'll have to check the code to make sure if I made this change or only thought about it... ### What to do in the short term; There are t",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/243#issuecomment-437784159:1081,detect,detection,1081,https://qupath.github.io,https://github.com/qupath/qupath/issues/243#issuecomment-437784159,1,['detect'],['detection']
Safety,"ugh I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/130#issuecomment-355845333>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AhgDyN_FkkG6m9PVrCtutL6J2PYQHVfHks5tIRihgaJpZM4RUCsS>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:2172,detect,detection,2172,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['detect'],['detection']
Safety,"ulty is with how the [hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) handles annotations that overlap... that can make knowing that's inside what a bit awkward, and not always very intuitive. There may be a manual way to do want you want through the user interface, but I suspect it could be quite laborious. Since this looks like it could be generally useful for others as well, my mind always turns to whether it would be cleaner to write a script or add a new command to the software instead... I have a few questions to check if I understand correctly what you need:; * What are the final outputs you want? Is it the number of immune cells per mm^2 or something else?; * Is it problematic that the green region extends outside the tissue?; * Do you have a strong opinion on having the outer areas (here, green and blue) containing _everything_ (i.e. black nested inside blue, then blue inside green), or would it be acceptable/preferable if each area was independent and non-overlapping (i.e. the black area would be one polygon, but the green and blue would be more like 'hollow rings' around the outside)?; * Does the _Positive cell detection_ work directly (e.g. if you've got hematoxylin and DAB staining, and you just need a count based on cells where DAB is evident), or do you really need a classifier?; * If you _do_ need a classifier, do you need to train it new for every image - or do you plan to train it once, and then apply the same classifier for every image?; * Roughly how many images do you need to analyze in this way? (e.g. tens, hundreds, thousands... to get a rough idea of how automated the approach ultimately needs to be); * Have you already got a lot of existing annotations / cells that you need to reuse, or are you just starting? Usually adding new annotations when there are already a lot of cells can be _very_ slow, and it might be easier to create the annotations first before doing the cell detection. But potentially either way could work.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411011755:1971,detect,detection,1971,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411011755,1,['detect'],['detection']
Safety,"ureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Completed with error java.lang.OutOfMemoryError: Java heap space; INFO: ; qupath.imagej.detect.cells.WatershedCellDetection {""detectionImageFluorescence"": 1, ""requestedPixelSizeMicrons"": 0.1, ""backgroundRadiusMicrons"": 0.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 0.9, ""minAreaMicrons"": 6.0, ""maxAreaMicrons"": 150.0, ""threshold"": 2000.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 3.0, ""includeNuclei"":",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:3375,Detect,DetectionPluginTools,3375,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['Detect'],['DetectionPluginTools']
Safety,"using MSYS2 building openslide is simply calling ./configure && make &&; make install avoiding winbuild.sh/cross compilation. Did you rebuild pixman; or other openslide dependencies from source on Linux?. Am So., 17. Jan. 2021 um 18:52 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> thanks for the suggestion, I; > haven't looked into this - what would it involve and what would it solve?; > Currently, 'official' Windows builds are available for OpenSlide and seem; > to work fine. It is portability on Mac/Linux that poses the biggest problem; > (especially since pixman included in the last LTS Ubuntu release causes; > trouble).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-761851656>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZGYDJUF6JH7JKL7LHRDS2MPVPANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-761857622:86,avoid,avoiding,86,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-761857622,1,['avoid'],['avoiding']
Safety,"v0.2.0-m11 now tries to recover more gracefully when this happens. It can't resolve the problematic overlap, but at least it doesn't lose the other cells. I'll close this issue because I think it is now as fixed as it is going to be (the whole overlapping code may be revised before v1.0.0), but feel free to reopen if you find it reoccurs.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-621609187:24,recover,recover,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-621609187,1,['recover'],['recover']
Safety,va:697); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.gui.scripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1288); at qupath.lib.gui.scripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1237); at javafx.concurrent.Task$TaskCallable.call(Task.java:1425); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); Caused by Java heap space at ij.process.FloatProcessor.snapshot(FloatProcessor.java:240); at ij.process.FloatProcessor.convolve(FloatProcessor.java:1069); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:600); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:997); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:362); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:123); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834); INFO: Complete,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/316#issuecomment-493938867:2971,detect,detect,2971,https://qupath.github.io,https://github.com/qupath/qupath/issues/316#issuecomment-493938867,1,['detect'],['detect']
Safety,"ver: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] [INFO ] q.lib.scripting.DefaultScriptEditor - Loading script file /home/bl/ip/QuPath/app/TestJep.groovy; 02:40:28.109 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean red (from Java): 86.81525; 02:40:28.121 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean green (from Java): 72.492275; 02:40:28.124 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean blue (from Java): 68.141675; 02:40:28.624 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Started JEP: jep.Jep@6bc4b2e2; ImportError: numpy.core.multiarray failed to import; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f930536d03f, pid=27357, tid=0x00007f932091e700; #; # JRE version: OpenJDK Runtime Environment (8.0_111-b14) (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14); # Java VM: OpenJDK 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [jep.so+0x1a03f] convert_jndarray_pyndarray+0x5bf; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/bl/ip/QuPath/app/hs_err_pid27357.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #. [1]+ Aborted (core dumped) ./QuPath; ```. I am thinking that this might be worth bringing up with the JEP developers. I am going to spend a little more time playing with JEP by itself in order to see if I run into any similar issues.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:10319,Abort,Aborted,10319,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['Abort'],['Aborted']
Safety,"was running a script but it never finishes. ```; setImageType('BRIGHTFIELD_H_E');; setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 244 244 244""}');; createSelectAllObject(true);; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: Eosin OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6000000000000001, ""singleThreshold"": true}');. ```; If I run individually, exit, restart and run another it always works. It is when I try to run this on multiple slides without restarting that I run into trouble.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-939591061:352,detect,detect,352,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-939591061,2,['detect'],"['detect', 'detectionImageBrightfield']"
Safety,"y to create margins for the; annotations. I do not run out of memory, but using the memory monitor I; notice a sawtooth pattern whe is the freezes happen. Perhaps it will run better if run from the command line since it no longer; will have to compete with the application thread?. I will set up a more powerful computer tomorrow. Perhaps that will handle; the problem. 7. feb. 2019 20:46 skrev ""Pete"" <notifications@github.com>:. It's hard to tell much here without a clearer idea of what 'a lot of rather; large and complex annotations' means, but it may very well be that there; are too many vertices that that slows down the rendering too much (on the; JavaFX application thread, same as the menus and rest of the GUI). If so it; isn't really a bug, but more pushing QuPath with a different application; than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences; in object types, and why it's not really intended to have very large; numbers of annotations. You might try having fewer vertices somehow, perhaps with *Objects →; Simplify annotation shape* or splitting larger annotations into smaller; ones (since annotations outside the field of view do not need to be; rendered). Or write a script that periodically converts annotations you; won't need to change any more into detections. Or try to leave parts of the; image that are particularly complex *unannotated*, and then interpret the; unannotated region appropriately later. (I was actually looking into this today for completely different reasons,; and may be able to improve the annotation handling somewhat... but it; doesn't help you now). —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub; <https://github.com/qupath/qupath/issues/267#issuecomment-461569891>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/Af9pL416T51gEDAwcX1cjYHyo1TwguiQks5vLIKAgaJpZM4anysq>; .",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461575920:1543,detect,detections,1543,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461575920,1,['detect'],['detections']
Safety,"ylib; jniopencv_ml : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_ml.dylib; opencv_imgproc@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_imgproc.405.dylib; jniopencv_dnn : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_dnn.dylib; jnijavacpp : 	/Users/pbankhea/.javacpp/cache/javacpp-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/javacpp/macosx-x86_64/libjnijavacpp.dylib; jniopenblas : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniopenblas.dylib; quadmath@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libquadmath.0.dylib; openblas_nolapack@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libopenblas_nolapack.0.dylib; opencv_core@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_core.405.dylib; jniopenblas_nolapack : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libjniopenblas_nolapack.dylib; jniopencv_imgproc : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libjniopencv_imgproc.dylib; openblas@.0 : 	/Users/pbankhea/.javacpp/cache/openblas-0.3.19-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/openblas/macosx-x86_64/libopenblas.0.dylib; opencv_dnn@.405 : 	/Users/pbankhea/.javacpp/cache/opencv-4.5.5-1.5.7-SNAPSHOT-macosx-x86_64.jar/org/bytedeco/opencv/macosx-x86_64/libopencv_dnn.405.dylib; ```. The `-Dorg.bytedeco.javacpp.maxPhysicalBytes=0` workaround does avoid the problem, but I haven't implemented it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980:3200,avoid,avoid,3200,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1023042980,1,['avoid'],['avoid']
Security," * 'Requesting attention', e.g. forcing the app to the front; * A small, unobtrusive progress bar that can be 'always on top' (even if QuPath isn't). I'm not sure adding one option to the batch script dialog will be enough to solve the problem, and adding many becomes a lot more clutter and effort to maintain. To overcome that, my initial idea was to provide the option of adding a 'batch script listener' to the script editor. . So you could add a listener using something like this (in Groovy):; ```groovy; def scriptEditor = getQuPath().getScriptEditor(); scriptEditor.addBatchScriptListener(e -> {; if (e.isLastScript()) {; // Do something... beep, email, whatever; java.awt.Toolkit.defaultToolkit.beep(); }; }); ```. The thing is that the listeners would be cumulative, so you'd likely want to just add one on startup and leave it (rather than add multiple listeners and then have them all firing when scripts are run). But then it becomes harder to turn it on/off the listener's behavior. Nevertheless, this approach would make it possible to add small extensions that offer different kinds of behavior, controlled via preferences or something else. So you could have a preference allowing the user to choose the audio file they want played on completion, for example.... but still, remembering to turn the option on and off could be a pain, since it wouldn't be easy to incorporate it as a checkbox in the batch processing dialog itself. While writing this, another option I've thought of is to make more info about the current script accessible within the script itself. So it might look like this:. ```groovy; if (getScriptInfo().isBatchProcessing() && getScriptInfo().isLastScript()) {; // Do something... beep, email, whatever; java.awt.Toolkit.defaultToolkit.beep(); }; ```. So any notification would be something pasted at the end of the script itself. It's like @MichaelSNelson's approach except avoids worrying so much about the last file being uniquely named. What do you all think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1029#issuecomment-1200084804:1903,access,accessible,1903,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029#issuecomment-1200084804,1,['access'],['accessible']
Security," > Hi David,; > Since this is through GitHub, I don't have any your contact address to ; > get in touch privately, and any email replies to this thread are shown ; > here <https://github.com/qupath/qupath/issues/45> (can also ; > edit/delete through that link). However, if you'd like to follow up on ; > this maybe you could send me a private message on ResearchGate?; > Thanks,; > Pete; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/45#issuecomment-275047111>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEfakb3PrwmDrXw9e2ycOiIbRa12rks5rVwcggaJpZM4Lrcx8>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; Geschäftsführer:; - David Haumann, Thomas Schenker, Sergey Biniaminov. _________________________________; Diese E-Mail und jeder übermittelte Anhang enthält gesetzlich geschützte; und vertrauliche Informationen. Wenn diese E-Mail nicht für Sie bestimmt ist,; bitten wir Sie, sie an uns zurückzusenden und anschließend von Ihrem Computersystem; zu löschen. Nicht für Sie bestimmte E-Mails und Anhänge dürfen Sie weder nutzen; noch verarbeiten oder Dritten zugänglich machen, gleich in welcher Form. This email including any attachments contains privileged and confidential; information. If you are not an intended recipient, please return the email; to us and then delete it from your computer system. You may neither use nor; edit any such emails including attachments received due to an error in; transmission, nor make them accessible to third parties in any manner whatsoever.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-275055657:1810,confidential,confidential,1810,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-275055657,2,"['access', 'confidential']","['accessible', 'confidential']"
Security," GUI:; We can see that the path was a combination of two paths, this is the problem. >> RMD_slide2ims_Entry; 23:18:18.288 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, D:\\QMDownload\\5\\Leica_scn\\Leica-Fluorescence-1.scn, -script, D:\\QMDownload\\5\\tpc9321172_2c3b_4e82_b55c_7ae4380fda4b.groovy ; 23:18:18.368 [main] [ERROR] q.lib.images.servers.FileFormatInfo - Checking Big TIFF images currently not supported!!! ; 23:18:18.428 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1 ; WARNING: An illegal reflective access operation has occurred ; WARNING: Illegal reflective access by com.esotericsoftware.kryo.util.UnsafeUtil (file:/C:/Program%20Files/QuPath-0.2.0-m1/app/kryo-2.24.0.jar) to constructor java.nio.DirectByteBuffer(long,int,java.lang.Object) ; WARNING: Please consider reporting this to the maintainers of com.esotericsoftware.kryo.util.UnsafeUtil ; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations ; WARNING: All illegal access operations will be denied in a future release ; 23:18:19.436 [main] [WARN ] loci.formats.Memoizer - deleting invalid memo file: D:\QMDownload\5\Leica_scn\.Leica-Fluorescence-1.scn.bfmemo ; com.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 458; Serialization trace:; service (loci.formats.in.OperettaReader); readers (loci.formats.ImageReader); reader (loci.formats.DimensionSwapper); reader (loci.formats.FileStitcher); helper (loci.formats.in.FilePatternReader); readers (loci.formats.ImageReader) ; 	at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:119) ; 	at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:641) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:375) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:289) ; 	at com.es",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472915452:1005,access,access,1005,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472915452,3,['access'],['access']
Security," I run in QuPath 0.1.2,error appeared:. print(getQuPath().getBuildString()). ERROR: Error at line 15: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getQuPath() is applicable for argument types: () values: []; Possible solutions: getAt(java.lang.String), getClass(). ERROR: Script error; at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:415); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$000(GroovyScriptEngineImpl.java:97); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$2.invokeMethod(GroovyScriptEngineImpl.java:329); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:69); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:158); at Script7.run(Script7.groovy:15); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473503394:1535,access,access,1535,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473503394,1,['access'],['access']
Security," Zoom from MicroDimensions is Windows-only, I suspect it may be using the Windows-only software libraries provided by [Zeiss](http://www.zeiss.com/microscopy/int/products/microscope-software/zen/czi.html) and [3D Histech](http://www.3dhistech.com/downloads). Since these are not open source (as far as I am aware), they [wouldn't be compatible with QuPath's GPL license](https://www.gnu.org/licenses/gpl-faq.html#GPLAndPlugins). Therefore including them would require a change to QuPath's license, and result in extra functionality being available on Windows but not on other platforms... and for these reasons it would really be a last resort. Nevertheless, if you or anyone at your place of work would like to give it a try, creating such an extension may be a [reasonable solution for internal use](https://www.gnu.org/licenses/gpl-faq.html#GPLRequireSourcePostedPublic). The biggest effort required is likely to be in being able to access the pixels from the native libraries within Java, but if that problem is solved then I could certainly help with the relatively small final step of integrating the result with QuPath. Still, hopefully Bio-Formats will be able to provide a solution for `*.czi` files in the near future - I'll post an update here and [Google Groups](https://groups.google.com/d/forum/qupath-users) whenever I see it. If so, that only leaves non-RGB `*.mrxs`. There may be a way to merge separated monochrome TIFFs into a single multi-channel TIFF using [Bio-Formats](http://www.openmicroscopy.org/site/support/bio-formats5.2/supported-formats.html)... although I'm not sure. Alternatively, [Pannoramic Viewer](http://www.3dhistech.com/pannoramic_viewer) may have alternative export options not present in CaseViewer. If neither of these approaches are suitable, I can imagine a new custom image reader within QuPath that is able to automatically concatenate the multiple channels of a TIFF, assuming that they are stored in the same directory with a standard naming scheme (e",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-258467053:1067,access,access,1067,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-258467053,1,['access'],['access']
Security, com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3057); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3283); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2997); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$2(GlassSceneDnDEventHandler.java:108); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:104); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$11(GlassViewEventHandler.java:766); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:765); at com.sun.glass.ui.View.handleDragDrop(View.java:713); at com.sun.glass.ui.View.notifyDragDrop(View.java:1042); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at qupath.lib.projects.DefaultProject.loadPathClasses(DefaultProject.java:1130); at qupath.lib.projects.DefaultProject.loadProject(DefaultProject.java:1086); at qupath.lib.projects.DefaultProject.loadFromFile(DefaultProject.java:17,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708516373:2022,Access,AccessController,2022,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708516373,1,['Access'],['AccessController']
Security," object of a hierarchy to transform the entire hierarchy easily and intuitively.; ; * I don't think we should give a serialize export option in the menus. We should move away from Java serialization as much as possible, and discourage anyone from use it; we should still support it for import though. Groovy make serialization quite easy if it's required in a script anyway... except if things are circular. Which brings me to... * `exportObjectsAsSerialized` looks like it doesn't actually use the transformed list; it also potentially allows circular references via parents/children, which could be confusing and/or buggy. I don't think we need this method if we are discouraging serialization (although I could be wrong... especially if we find a way to use it internally for convenience). * *If* `importObjectsFromSerialized` is in the public API, I think it should handle things other than lists, e.g. individual objects, arrays of objects, collections. But I'd prefer to expose it in the public API only if its benefits are clear enough. * It looks like `.qpdata` is being used for serialized object lists. We really shouldn't add a new file type with the same extension. Rather, we *can* read objects from an existing `.qpdata` file using [`PathIO.readHierarchy(File)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/io/PathIO.java#L410) - this should work even if the server is unavailable itself. The ability to import from old `.qpdata` files is important, but I'd like to avoid encouraging anyone to write `.qpdata` files other than those handled internally within projects (to make it easier for us to replace the format in the future). * A common use case will be transferring objects between images in the same project. Ideally this would be possible without exporting/importing, but rather simply choosing the project entry for import. Internally, this can use [`ProjectImageEntry.readHierarchy()`](https://github.com",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:3444,expose,expose,3444,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,1,['expose'],['expose']
Security," to https://github.com/openmicroscopy/bioformats/issues/2811. I don't see any way to resolve it within QuPath, and it requires a fix on the Bio-Formats side. If you just need to check what the label shows, you could try the script I posted at https://github.com/qupath/qupath/issues/141#issuecomment-358951720 - but it really is a terrible hack, which at best shows an image that looks a bit more plausible. As @rleigh-codelibre points out at https://github.com/openmicroscopy/bioformats/issues/2811#issuecomment-359474813 it doesn't restore the _right_ pixels, merely ones that are less obviously wrong. At best, it might be enough to see more or less what the image should contain without needing to open a new application... but it isn't a proper solution. When I look at the images you posted above with `tiffinfo`, it's clear that the _Photometric Interpretation_ stored in the file really is _YCbCr_ and my hack-y script overrides this. ---. For setting the color, you could try this:; ```groovy; // Set the LUT color for the first channel & repaint; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().getAvailableChannels(). channels[0].setLUTColor(50, 200, 250). viewer.repaintEntireImage(); ```; where the three numbers are red, green & blue values (0-255). On a related note, `tiffinfo` also shows the file contains this for the main image:; ```; <channelSettings>; <channel index=""0"" name=""DAPI"" rgb=""#0000ff"" counterstain=""true"" spacingZ=""1000"" />; <channel index=""1"" name=""DsRED"" rgb=""#ffffff"" spacingZ=""1000"" />; <channel index=""2"" name=""Spectrum Green"" rgb=""#00ff00"" spacingZ=""1000"" />; <channel index=""3"" name=""Spectrum Far Red"" rgb=""#ff0000"" spacingZ=""1000"" />; </channelSettings>; ```; I can't see anywhere that Bio-Formats has parsed the channel names and colors, and this isn't currently accessible to QuPath. If the `LeicaSCNReader` were to be updated, and it was possible to get that information included, it could be handy in improving the default colors.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409882684:1874,access,accessible,1874,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409882684,1,['access'],['accessible']
Security,", 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, fma, vzeroupper, clflush, clflushopt; Processor Information for all 6 processors :; Max Mhz: 3000, Current Mhz: 3000, Mhz Limit: 3000. Memory: 4k page, system-wide physical 7966M (772M free); TotalPageFile size 23838M (AvailPageFile size 7045M); current process WorkingSet (physical memory assigned to process): 3284M, peak: 3876M; current process commit charge (""private bytes""): 6219M, peak: 6444M. vm_info: OpenJDK 64-Bit Server VM (17.0.8+7) for windows-amd64 JRE (17.0.8+7), built on Jul 18 2023 21:02:32 by ""admin"" with MS VC++ 16.7 (VS2019). END. From: Pete ***@***.***>; Sent: Thursday, November 2, 2023 2:08 PM; To: qupath/qupath ***@***.***>; Cc: Farias Da Guarda, Suzete Nascimento ***@***.***>; Mention ***@***.***>; Subject: Re: [qupath/qupath] Load training in object classifier -> QuPath crashes (#493). External Email - Use Caution. @suzeteguarda<https://secure-web.cisco.com/15zJZ1AC2HfUFv9L0mLItqMCfEQMcq1aVBJmggNtWQuQ1aMdkxQL4M8DQsziZIjbQclRsiUgnd4btBVr7WmNM9GAmb5IdGegWqzsNoLW7i0t8ZduDtcd418DQ9BIIDpRAJC02UjlE2keamNPfGPyTA13hxoJ6aI6fRjs8P6PPD3ag1gjsZJuHqXh28XIp9ClIy6uiD9WiE2a29pnEogefoBAUSjm8iBfMR0HcxqAtG_TdnAk0f4Y8BA4E5sVwzFhbDhm_alns-l7jx4c65825lN1brlaamgEFYOcr-bx0yB5-ONuFLKVRdD6nCGWcI1iPAsoohE7nnVhyPIYtURWpKQ/https%3A%2F%2Fgithub.com%2Fsuzeteguarda> you could try posting your question on the forum at https://forum.image.sc/tag/qupath<https://secure-web.cisco.com/13_E9lRMQxY8xtZmKYPnw2mmwaiElPiHzTIMUOwQH_-6FzgRz4LkCsf_cFjrfUWLwo9750a0MmRr_eXTVN0eusQkomn-qYLuoCcVIKhtD0lyGLisH8Fxc-WFZwGzOR3GcJ4WLvQ2nVTFF7JEFSGly69C9pq9zGxJ69U6IM5ck9ofp9vkUV14NNMWH0h1u9pMUi3qXwaLEHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:1360,secur,secure-web,1360,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['secur'],['secure-web']
Security,.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: TiffDelegateReader initializing /home/joelrv/Downloads/test_pyramid.tif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; INFO: Returning server: Bio-Formats for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; ERROR: java.lang.OutOfMemoryError: Java heap space; WARN: Fallback to requesting thumbnail directly...; ERROR: QuPath exception; WARN: Tile request exception; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathView,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:8412,Access,AccessController,8412,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['Access'],['AccessController']
Security,".com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/roi/PolygonROI.java) for polygons. The most useful constructor is:; ```groovy; public PolygonROI(float[] x, float[] y, int c, int z, int t); ```; For ```c```, ```z``` and ```t``` (channel, z-slide & time point) you can probably use ```-1```, ```0```, ```0``` by default. . After creating your polygon ROI, then create a [```PathAnnotationObject```](https://github.com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java) with the ROI:; ```groovy; public PathAnnotationObject(ROI pathROI); ```. and finally you can add this annotation to the hierarchy simply with; ```groovy; addObject(annotation); ```. I have some memory of Aperio ImageScope having a concept of layers, and also 'negative' regions; I don't know if this would also be in your XML. If so, these may not have exact matches inside QuPath, but there are various tricks you could use if you find they are needed (e.g. combining or subtracting ROIs, adding them to the hierarchy in different ways, setting names, classifications or colors etc.). If you haven't already, I suggest checking out the Wiki for [Writing custom scripts](https://github.com/qupath/qupath/wiki/Writing-custom-scripts) and [Advanced scripting with IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ), which can help with writing the code and accessing the QuPath source. Finally, it may also be useful to know that, if you want to use any other Java libraries to help, then you can drag the required Jar file onto QuPath to copy it into QuPath's extensions directory. Even if the Jar isn't a 'real' QuPath extension, this means that it will still be available on QuPath's classpath when running the script. This could be useful if your XML parsing code is already contained in a Jar, or if you want to add another library (e.g. ```groovy-xml.jar```) to help with scripting the parsing. Hopefully that helps to get started.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/61#issuecomment-290912225:2148,access,accessing,2148,https://qupath.github.io,https://github.com/qupath/qupath/issues/61#issuecomment-290912225,1,['access'],['accessing']
Security,".dispatchBubblingEvent(CompositeEventDispatcher.java:59); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3144); 	at javafx.scene.Scene$DnDGesture.processTargetEnterOver(Scene.java:3316); 	at javafx.scene.Scene$DropTargetListener.dragEnter(Scene.java:3024); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragEnter$0(GlassSceneDnDEventHandler.java:83); 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragEnter(GlassSceneDnDEventHandler.java:77); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragEnter$9(GlassViewEventHandler.java:733); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragEnter(GlassViewEventHandler.java:732); 	at com.sun.glass.ui.View.handleDragEnter(View.java:684); 	at com.sun.glass.ui.View.notifyDragEnter(View.java:1020); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); 	at java.base/java.lang.Thread.run(Thread.java:833); 13:36:13.428 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); 13:36:13.788 [JavaFX Application Threa",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846:1823,Access,AccessController,1823,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846,1,['Access'],['AccessController']
Security,.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3890); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127). The annotations were all created using earlier versions (all of them were created in m9). Annotations that I create in m10 are editable.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/456#issuecomment-619374801:3795,secur,security,3795,https://qupath.github.io,https://github.com/qupath/qupath/issues/456#issuecomment-619374801,2,"['Access', 'secur']","['AccessController', 'security']"
Security,".more stuff...]. Current thread (0x00007f594d8d5540): JavaThread ""tile-exporter10"" daemon [_thread_in_vm, id=314754, stack(0x00007f4ec1aaf000,0x00007f4ec1bb0000)]. Stack: [0x00007f4ec1aaf000,0x00007f4ec1bb0000], sp=0x00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljav",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1500,secur,security,1500,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['secur'],['security']
Security,"0f4Y8BA4E5sVwzFhbDhm_alns-l7jx4c65825lN1brlaamgEFYOcr-bx0yB5-ONuFLKVRdD6nCGWcI1iPAsoohE7nnVhyPIYtURWpKQ/https%3A%2F%2Fgithub.com%2Fsuzeteguarda> you could try posting your question on the forum at https://forum.image.sc/tag/qupath<https://secure-web.cisco.com/13_E9lRMQxY8xtZmKYPnw2mmwaiElPiHzTIMUOwQH_-6FzgRz4LkCsf_cFjrfUWLwo9750a0MmRr_eXTVN0eusQkomn-qYLuoCcVIKhtD0lyGLisH8Fxc-WFZwGzOR3GcJ4WLvQ2nVTFF7JEFSGly69C9pq9zGxJ69U6IM5ck9ofp9vkUV14NNMWH0h1u9pMUi3qXwaLEHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FA5G6YB3KO5IO3F2PMFLETCDYCPOOXAVCNFSM4NF3XJJKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5W",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:2646,secur,secure-web,2646,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['secur'],['secure-web']
Security,"4); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3856); at javafx.scene.Scene.processMouseEvent(Scene.java:1851); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2584); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127); ```; The `Threshold` command works fine and seems to divide the annotation according to the slightly visible overlay, and so does the `Export map` command (so all good).; _________; ### If the value is >= 10; Clicking on `Find hotspot`, `Threshold` and `Export map` directly gives me the long open_cv error message copied above. It might be important to note that when the density radius value is switched back and forth between > and < 10, the density map overlay stops updating someti",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872890572:4738,Access,AccessController,4738,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872890572,1,['Access'],['AccessController']
Security,":; # C [libc.so.6+0x9a23b] __libc_malloc+0x12b. [...more stuff...]. Current thread (0x00007f594d8d5540): JavaThread ""tile-exporter10"" daemon [_thread_in_vm, id=314754, stack(0x00007f4ec1aaf000,0x00007f4ec1bb0000)]. Stack: [0x00007f4ec1aaf000,0x00007f4ec1bb0000], sp=0x00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1442,Secur,SecureClassLoader,1442,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['Secur'],['SecureClassLoader']
Security,"; ```; qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(Lqupath/lib/images/servers/TileRequest;IIZLjava/awt/image/ColorModel;)Ljava/awt/image/BufferedImage;+249; ```; which is definitely a new line connected with how tiles are paralleled in QuPath's Bio-Formats reading since v0.3.1. However, the bigger context is very mysterious:; ```; # Problematic frame:; # C [libc.so.6+0x9a23b] __libc_malloc+0x12b. [...more stuff...]. Current thread (0x00007f594d8d5540): JavaThread ""tile-exporter10"" daemon [_thread_in_vm, id=314754, stack(0x00007f4ec1aaf000,0x00007f4ec1bb0000)]. Stack: [0x00007f4ec1aaf000,0x00007f4ec1bb0000], sp=0x00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1061,secur,security,1061,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['secur'],['security']
Security,"> > Can I ask how did you edited cfg file in terminal?; > ; > First, locate `.cfg` file. On a Mac, you’ll need to right-click on QuPath.app and choose Show package contents. The config file is inside the Contents/app directory. Open the terminal, type ` sudo nano pathtoqupath/QuPath-0.2.3.cfg`. Enter password and edit this line at the end: `java-options=-XX:MaxRAMPercentage=50`. In my case I set it to 85 instead of 50 % of available RAM. That's great. It worked! Thanks so much :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-1431663502:302,password,password,302,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-1431663502,1,['password'],['password']
Security,"> > When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it; > ; > It is used with _View → Show slide label_ - but is really only relevant for some file formats (although useful when relevant).; > ; > It's inspired by the 'associated images' provided by [OpenSlide here](https://openslide.org/api/python/#openslide.OpenSlide.associated_images) - since otherwise QuPath would have had no way to provide access to the label etc. But it doesn't map so easily to images from other readers, including Bio-Formats, which doesn't identify label images as being different. Do you know a way to test it? This *Show slide label* window always indicates ""No label available"" with the images I have. Apart from that, I think this pull request can be merged. The bio-format and omero ice image servers seem to be working with these new changes. I may still have to clean the code a bit but I think having the OMERO extension working properly is more important for now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1706263104:486,access,access,486,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1706263104,1,['access'],['access']
Security,"> About the rest, am I correct if a recap of what you ask is:; > * Metadata parsing is fragmented between `BioFormatsImageServer` and `OMEReaderWrapper` / `OMETileReader`. This should not happen. Metadata should be requested only once and not lazily. Yes. See https://downloads.openmicroscopy.org/images/Vectra-QPTIFF/perkinelmer/PKI_fields/ and `HnE_3_1x1component_data.tif` for an example where it is a problem. This contains a 32-bit float image, along with an 8-bit thumbnail. If I try to open the thumbnail with this PR it fails, I believe because it is using a mixture of metadata (i.e. assuming that it has enough bytes for 32-bit data, and failing with an `ArrayIndexOutOfBoundsException`. > * One tile reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:733,access,accessing,733,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['access'],['accessing']
Security,"> Another weird behaviour (not sure if this is intended) of the new version: if I drag an drop fluorescent images (.scn or .vsi) (not tried with chromogenic) to qupath without having pre-created a project, it only opens the label/macro image without letting me access to higher resolution images.... There's an explanation [here](https://forum.image.sc/t/third-milestone-on-the-path-to-qupath-v0-2-0/27953/7). > Yes forcing doesn't really change anything. Something odd going on... I eventually manage to open things and create a project to work on but sometimes it requires several attempts of closing the software and opening it again.. bit random.; I've tried the same files on 0.2.0 m2 and m3. This happens only in m3. I might have seen similar behavior some weeks ago, but rarely and it hasn't reappeared for me so that I thought it was resolved. Basically, QuPath wasn't using Bio-Formats when it should have been... sometimes. I haven't managed to find a way to reproduce it, but will keep looking. In m3, the type of the ImageServer is stored in the project to ensure that the same one is used again in the future (i.e. not OpenSlide once, then Bio-Formats the next time). Therefore if it fails to get the right type the first time, the image won't open the next time either. > Regarding the projects, would it not be possible for QuPath to create some sort of temporary project automatically when it requires it? which would be deleted if the image gets closed. I think this has the potential to make things more confusing... in this case, I think a better solution is to present a dialog enabling the image to be selected whenever multiple images are in the same file _and_ a project is not being used (like when the Bio-Formats plugin is used with Fiji). But implementing this takes time I don't currently have.... and I'd rather encourage people to use projects anyway in general (although of course these need to work...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518120494:261,access,access,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518120494,1,['access'],['access']
Security,"> But does the Macro image show anything? Or is it there?. Thanks. I can indeed see it under the Image tab under ""Series 1 (label)"" (I did not know about this). But access from the pull down menu and label pop-up viewer is not working, which remains an issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-731459267:165,access,access,165,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-731459267,1,['access'],['access']
Security,"> Can I ask how did you edited cfg file in terminal?. First, locate `.cfg` file. On a Mac, you’ll need to right-click on QuPath.app and choose Show package contents.; The config file is inside the Contents/app directory.; Open the terminal, type ` sudo nano pathtoqupath/QuPath-0.2.3.cfg`. Enter password and edit this line at the end:; `java-options=-XX:MaxRAMPercentage=50`. In my case I set it to 85 instead of 50 % of available RAM.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-1430091897:296,password,password,296,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-1430091897,1,['password'],['password']
Security,"> However, based on the exception, I think the problem is that the [names ArrayList of the AbstractNumericMeasurementList class](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L102) is accessed from multiple threads without synchronization. Using a CopyOnWriteArrayList instead of an ArrayList may solve this issue. I think the list shouldn't be directly accessed elsewhere, and the `put` method (which calles `list.add`) is synchronized. Maybe the issue is that the `clear()` method isn't synchronized?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936207910:295,access,accessed,295,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936207910,2,['access'],['accessed']
Security,"> I can ask them to share a QuPath project if it's useful to you. That would be useful because I was not able to replicate the issue (on MacOS, I will try on Linux later). However, based on the exception, I think the problem is that the [names ArrayList of the AbstractNumericMeasurementList class](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L102) is accessed from multiple threads without synchronization. Using a `CopyOnWriteArrayList` instead of an `ArrayList` may solve this issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936164001:465,access,accessed,465,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936164001,1,['access'],['accessed']
Security,"> I can't replicate the bug on my Mac - if I drag a URL from chrome, the dragboard contains both a URL and a String - but good if it solves the problem somewhere. Yeah I suspect it's a Linux issue, either way I think trying to handle Strings as URLs is about the best we can do, as long as it shows the right kind of error. > *-I've consistently avoided [starred imports] & convinced my IntelliJ to stop doing it automatically - can discuss later if we want to change that policy. I don't pay any heed to imports; they're automatically hidden for me. The only strong argument I've been exposed to on the topic was that having a) a license and b) every imported class/static method right at the top of the file means that every file you open, you need to page down a couple of times before reading any code. If there was a risk of ambiguity I might be more concerned, but I think when there's a collision Java forces you to use a fully qualified name?. Anyways I think the license and imports are auto-hidden for me, so this doesn't really matter",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1731105750:586,expose,exposed,586,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1731105750,1,['expose'],['exposed']
Security,> I have access to the first user files. I don't understand which files. I couldn't see which screenshot in the PDF demonstrated there was a problem.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1309256243:9,access,access,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1309256243,1,['access'],['access']
Security,"> I'm apprehensive about trying to make the code too clever, and confusing people more by the menu changing when they click it. Yeah that makes sense! Maybe context sensitive isn't the way to go. Thank you for considering it though! :). > If the core issue is that the common things are too hard to access, would simply moving Show/hide higher up the menu be a solution?. This could definitely work as well. I would be super happy to have a one menu access for ""Add/Remove"", in the same vibe as ""Estimate stain vectors"" was given its own high-leven location instead of a submenu.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1644#issuecomment-2406685530:299,access,access,299,https://qupath.github.io,https://github.com/qupath/qupath/issues/1644#issuecomment-2406685530,2,['access'],['access']
Security,"> It is a slightly scary change to make since it is so core. Yes, i get it. It's better being cautious here!. > When ImageServer metadata is written in a project and when it isn't (I see it missing sometimes, which has previously been irrelevant since it's generated when the ImageServer is built... but becomes much more important if the server isn't necessarily built). what I would say that in that case it would load the server, read the metadata and write them in the `.qpproj` file for future accesses. I wouldn't assure that `ImageData.getServerMetadata()` never loads the image server. It avoids it as long as it is possible, otherwise it will. > What happens when a script changes the metadata, but the server itself hasn't been read (e.g. setting channel names or pixel size). Again, if `ImageData.updateServerMetadata()` i would actually load the server()+update `qpproj` file. Avoid doing it lazily, as that would easily lead to unexpected states for the users. > How exceptions are handled when lazy loading fails. What's wrong in behaving the same as when an exception occurs while creating an `ImageServer`?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2271091629:499,access,accesses,499,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2271091629,1,['access'],['accesses']
Security,"> Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:; > ; > I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma; > In Qupath:; > For every image of the folder:; > 2) In QuPath - perform cell detection; > 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); > 4) Export detections with annotation into .roi file. Ok, you don't describe your images being whole slide images - so I assume they can be read into ImageJ fully and without problems. In that case, you might try this QuPath script:; https://gist.github.com/petebankhead/8d541effc8898d6a07edd4ed95b6929c. Keep in mind that a `.roi` file contains a single region; as far as I'm aware, a `.zip` file is needed for all the QuPath objects to be represented in a way ImageJ can access all in one go. > So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. Ok, but please keep in mind that ImageJ has existed in some form for more than 30 years, and has had input from many fantastically knowledgeable people both in terms of development and documentation. There has been a huge amount of volunteer effort, alongside many components and plugins developed as part of larger, funded projects. On the other hand, QuPath was created and documented essentially by one person and has only been available for a couple of years. The same person also wrote all the wiki, the [blog](https:",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:900,access,access,900,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['access'],['access']
Security,"> One option for Show/Hide would be to have the right click menu be context sensitive:; > ; > * If one or multiple classifications are selected and visible, the context menu becomes ""Hide selected classes"" (Instead of show/Hide > Hide classes in viewer); > * If one or multiple classifications are selected and hidden, the context menu becomes ""Show selected classes"" (Instead of show/Hide > Show classes in viewer). What about if multiple classifications are selected, some shown and some hidden?. I'm apprehensive about trying to make the code too clever, and confusing people more by the menu changing when they click it. If the core issue is that the common things are too hard to access, would simply moving `Show/hide` higher up the menu be a solution?. My hesitation with that is that currently the top part of the menu (above the divider) is all concerned with adding/removing classifications. So `Show/Hide` would have to go to the *very* top, to avoid interrupting this logical grouping... and, as you say, spacebar does that job, so `Add/Remove` might be needed more often.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679:685,access,access,685,https://qupath.github.io,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679,1,['access'],['access']
Security,"> So solving this will likely require any any info you can get from VisualVM's CPU sampling. Since I wasn't sure which outputs to provide you with from VisualVM, I made a quick recording of the profiling as it ran while QuPath was loading the project: https://youtu.be/_GHn556qEAk. I wasn't able to get the profiler to work, despite installing a 64 bit version of Java 17, but the sampler and all other tools seemed to work. I've uploaded the thread and heap dumps to: https://drive.google.com/drive/folders/1akRolrnUwbryc3YMSRR_aXhJ5H6AgBWO?usp=sharing. > QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches.; v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this could potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. Based on my limited interpretation of the VisualVM results, I'd say that you're right. The lowest-level QuPath method I could find which was responsible for the ~4 minute load time is `qupath.lib.io.UriUpdater$SingleUriItem.getStatus()` which invokes `java.nio.file.File.exists()`. ![image](https://user-images.githubusercontent.com/52012166/203870112-0ecd0822-7efd-4360-af2e-0858b8a03df7.png). My guess is that there is some kind of checking going on, comparing the URI listed in the project, with the file path, to verify that each project entry is pointing to the correct image, and that's what's taking up CPU time. > I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166:851,access,access,851,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166,1,['access'],['access']
Security,"> Synchronizing getNameMap() might fix it?. I think **all** access to `names` should be synchronized. If it's not the case, lines 207 and 241 could be executed at the same time for example. But this may drops the performances of the class. I will read more about concurrency in Java to exactly know what to do in such situations. Switching to `CopyOnWriteArrayList` is not necessary if all access are synchronized.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936371496:60,access,access,60,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936371496,2,['access'],['access']
Security,"> That is a very large classifier. Do you get the same error with both ANN and Decision Trees? When removing one scale?. Yep, I get the same error for both ANN and Decision Trees. When I drop scales until one succeeds, the other succeeds also. >Is there any chance you can replicate the problem with a more manageable/minimal dataset - preferably of publicly-accessible images?. Understandable; I'm working on creating a dataset from images that be publicly available regardless at the I2K conference. Will post a link shortly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092033821:359,access,accessible,359,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092033821,1,['access'],['accessible']
Security,"> When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it. It is used with *View &rarr; Show slide label* - but is really only relevant for some file formats (although useful when relevant). It's inspired by the 'associated images' provided by [OpenSlide here](https://openslide.org/api/python/#openslide.OpenSlide.associated_images) - since otherwise QuPath would have had no way to provide access to the label etc. But it doesn't map so easily to images from other readers, including Bio-Formats, which doesn't identify label images as being different.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1691948394:476,access,access,476,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1691948394,1,['access'],['access']
Security,"> the same first user credentials were used to install both QuPath's. I guess maybe that's the issue. . QuPath is using Java's `Preferences` class: https://docs.oracle.com/en/java/javase/11/docs/api/java.prefs/java/util/prefs/Preferences.html. Specifically, it's going through `Preferences.userRoot()`, which according to Java's docs should be *'the root preference node for the calling user'*: https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/prefs/PathPrefs.java#L475. I think the Cellpose extension is doing the same. I've no idea what miniconda does, or if it's relevant here. I'm not sure what happens when the credentials used for installation are different from those used to run the software - but providing an .exe in addition to an .msi is intended to help in scenarios when one isn't suitable (usually a lack of admin access for installation). Based on all that, do you still think QuPath should be doing something differently?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1302330711:866,access,access,866,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1302330711,1,['access'],['access']
Security,"> try accessing the images some other way before opening them in QuPath (e.g. through Windows Explorer), in case 'pre-warning' the OS is somehow useful. I think this is it! I opened the folder containing the images in explorer, and set the thumbnail size to ""large icons"" via `view > large icons`. This would generate thumbnails for all files that are currently displayed on screen. After those were generated, I scrolled down, so that the remaining files would also have their thumbnails generated. Then, I launched the QuPath project in 0.4.1, and the load time was nearly instantaneous. Which, while resolving the issue, also means that the issue exists outside of QuPath. So, for some reason, the thumbnail previews are lost after a period of time, and don't seem to coincide with closing the folder or restarting the computer. The first thing I attempted to preserve thumbnails was to ensure ""Always show icons, never thumbnails"" in the folder options was unchecked, however it already was by default:; ![image](https://user-images.githubusercontent.com/52012166/211071879-ac70ef62-925f-4fe5-8ec3-10763d391393.png); Toggling this field didn't seem to have any impact on project loading performance, since in either case, the thumbnails were already generated (just replaced with an icon if the box is checked).; Next, under Windows performance options, I noticed ""save taskbar thumbnail previews"" was unchecked by default. I've checked it, and so far, I don't seem to have trouble loading projects that already have thumbnails generated in explorer. ; ![image](https://user-images.githubusercontent.com/52012166/211072664-c211658b-7aa6-435d-8067-830b4e1620b1.png). I'll continue to test other projects and rebooting my computer, to confirm if this has resolved the issue. TL;DR: **Check ""save taskbar thumbnail previews"" under Windows performance options. Subsequent loads of the project should now be much faster**. EDIT: So far, this fix persists after rebooting the system. EDIT 2: I've opened",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580:6,access,accessing,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580,1,['access'],['accessing']
Security,"@mezwick Hashes aren't currently generated or made available. Making a release remains a fairly laborious and manual process. Although the builds themselves are now generated automatically using GitHub Actions, I have to download and check these run on each platform and then upload again. And write all the release notes, tag the version etc. There can also be some extra renaming required, since `jpackage` (used for the build) has some awkwardness connected to artefact naming and 0.x.x versions that affects some platforms but not others (e.g. I think macOS forbids 0.x.x versions, so this needs worked around; also, it needs to be possible for people to have multiple versions installed for reproducibility). It's already a real pain to do, and I don't want to add any more manual steps if I can avoid it. It would be strongly preferable to automate the whole process a bit more, using [Upload to Release](https://github.com/marketplace/actions/upload-to-release) to avoid the download/upload requirement, and somehow include hashes (e.g. using the links from @KrisJanssen's last post) at that point. This seems to me at least a bit awkward to set up though, since the upload action is only triggered when a release is made. The [build workflow](https://github.com/qupath/qupath/blob/v0.3.2/.github/workflows/jpackage.yml) would have to be quite a bit more complex (e.g. to handle cross-platform filenames/content types for the builds, as well as different artefact compression methods). I'd also still need to retain the ability to check the release manually on each platform *before* the release itself is created, because creating the release is what triggers any update notifications... and after the release has been tagged is a bad time to identify some platform-specific breakage. These tend to happen with every release, e.g. because some dialog ends up misbehaving on Ubuntu but looks fine everywhere else. I strongly suspect I'd mess it up quite a few times before (hopefully) getting i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1027#issuecomment-1208071371:9,Hash,Hashes,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027#issuecomment-1208071371,2,"['Hash', 'hash']","['Hashes', 'hashes']"
Security,"@petebankhead : I can certainly understand you need to carefully balance workload. As our organization is somewhat rigorous regarding this topic I have looked into things further and it seems you mercifully use an accessible installer solution and as such I have been able to build it from source in full. This way, we can perform static code review and use an internally built binary, currently removing the need to obtain the hash from you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1027#issuecomment-1208463614:214,access,accessible,214,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027#issuecomment-1208463614,2,"['access', 'hash']","['accessible', 'hash']"
Security,"@petebankhead Hi, thanks for the prompt and clear response. Their website is a little unclear about obtaining the data. There is a link on their page to a directory listing where you can download individual images. You unfortunately have to sign in to their site I believe to access this. These files are listed [here](http://ptak.felk.cvut.cz/Medical/dataset_ANHIR/images/), and the password can be seen on [this page](https://anhir.grand-challenge.org/Download/) after signing in. Edit: It's worth noting that this happens with many images, and the example is just one of them.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-620643098:276,access,access,276,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-620643098,2,"['access', 'password']","['access', 'password']"
Security,"@petebankhead and @melvingelbard , sorry for the late response. I will use image.sc for feature requests if that is more suitable. (I thought it might be easy for you to track features and interlink them with commit ids here). I can access the numbers by double clicking, thanks for pointing that out. That should help a little. It would be nice to see at least 2 decimal places near the slider for the 32 float images (with low intensity values). I am not sure if it will hurt to have 2 decimal places when the values are greater than 10, or will it somehow affect the usability of the slider. Your suggestion might be better, to have 2 decimal places when the value is < 10, and 1 decimal place otherwise. Thanks for looking into this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/669#issuecomment-786174872:233,access,access,233,https://qupath.github.io,https://github.com/qupath/qupath/issues/669#issuecomment-786174872,1,['access'],['access']
Security,"@saudet since my machine is CentOS 7, I decided to build the code from scratch (as you can see in my Stackoverflow error). Running what you mentioned on the binary file found in tar of the QuPath results in this other error:. ```; drwxrwxrwt. 62 root root 20K Apr 11 18:07 ..; -rw-r--r--. 1 jalal cs-grad 152M Apr 11 18:10 gradle-7.4.2-all.zip; drwxr-xr-x. 8 jalal cs-grad 4.0K Apr 11 19:16 .; -rw-r--r--. 1 jalal cs-grad 6.4K Apr 11 19:16 EGFR SSM TCGA LUAD.csv; [jalal@goku downloads]$ cd QuPath/; [jalal@goku QuPath]$ ls; total 4.0K; drwxr-xr-x. 4 jalal cs-grad 66 Jan 17 03:51 lib; drwxr-xr-x. 2 jalal cs-grad 49 Jan 17 03:51 bin; drwxr-xr-x. 4 jalal cs-grad 40 Jan 17 03:51 .; drwxr-xr-x. 8 jalal cs-grad 4.0K Apr 11 19:16 ..; [jalal@goku QuPath]$ cd bin/; [jalal@goku bin]$ JAVA_TOOL_OPTIONS=-Dorg.bytedeco.javacpp.nopointergc=true ./QuPath; Picked up JAVA_TOOL_OPTIONS: -Dorg.bytedeco.javacpp.nopointergc=true; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 8:47:07 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 20:47:08.384 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 20:47:08.673 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 20:47:08.674 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:8487): Gdk-WARNING **: 20:47:09.200: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 20:47:09.626 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007f79411f0c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f82287f5329]; /lib64/libstdc++.so.6(_",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018:969,access,access,969,https://qupath.github.io,https://github.com/qupath/qupath/issues/949#issuecomment-1095746018,1,['access'],['access']
Security,"Actually, looking at Ilaskit, I would probably start with trying to run that through QuPath (point the ImageJ plugins directory to the correct place in Preferences). Some modules are not compatible, but if that one is, it would probably be the way to go for segmentation. If it works, just find the largest tiles ImageJ can handle at a time, assuming you can store your training set for QuPath to access on each call.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286559987:397,access,access,397,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286559987,1,['access'],['access']
Security,"Ah yes! Forgot about the hashes, should be an easy fix",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1366#issuecomment-1747765767:25,hash,hashes,25,https://qupath.github.io,https://github.com/qupath/qupath/pull/1366#issuecomment-1747765767,1,['hash'],['hashes']
Security,"Ah, I was also using the OpenSlide example to see if it worked. If you can somehow send me an example file with the problem I'd be happy to investigate. Although it sounds like it is outside the domain of QuPath, which depends on either OpenSlide or Bio-Formats to access the pixels. (If it looks ok when opened by Bio-Formats in Fiji (www.fiji.sc) then it might be a QuPath thing again, although not one I've seen before.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358746900:265,access,access,265,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358746900,1,['access'],['access']
Security,"Ah, sorry, I probably should have mentioned, it might not be your laptop...; One of the dangers with using Positive Pixel detection is the strain it puts on the program when updating the screen with many very finely defined areas. I would recommend turning OFF all detection visualizations, then moving the screen to the location you want to see, then turning detection visualizations back on (might be the D or H key? I don't have access right now and forget). Turn them off again before you want to move the screen to a new position. It is somewhat cumbersome, but usually prevents my program from crashing. . In fact, the program is not usually crashing, but just very slowly rendering the entire image again. Though depending on your system it might sometimes take an hour or so! If you use Superpixels or Cell detection, this is not usually a problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-373141585:432,access,access,432,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-373141585,1,['access'],['access']
Security,"Ah, thanks @melvingelbard - so it *is* OpenCV-related. That's really good to know, seems to confirm my suspicions although I have no clue why. It also seems to be specifically the `org.bytedeco.opencv.global.opencv_imgproc` class - assuming object classifiers are working, then `opencv_core` and `opencv_ml` must be ok. If you still have access to the computer, you could check if pixel classifiers work - since they use `opencv_imgproc` as well. If they do, perhaps the problem is more restricted. If launched from a command line, there might be more detailed errors emitted at some point. On Windows, that can be done simply by using the console exe launcher. On a Mac, it means running something like this from a terminal `/Applications/QuPath.app/Contents/MacOS/QuPath` (exact path might need changed).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-873087104:338,access,access,338,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-873087104,1,['access'],['access']
Security,"An alternative could be to smuggle in an implementation of stored sorting with a `Manager`, but that seems like a bit of abuse of the existing facilities. The obvious way to make one change that permits any future extensions is to add a `Map<[String?], [Object?]>`, but that's got its own set of problems (security would be a big one).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2140050177:306,secur,security,306,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2140050177,1,['secur'],['security']
Security,"As I mentioned (each time you brought this up :) ) the approach you have taken creates a dependency on `ImageDisplay` that I *really* do not want to be stuck with. It creates an awkward confusion between the GUI and core code that will be a maintenance headache, and would greatly complicate trying to implement a better design later. I added the alternative scripting methods that I linked to before precisely because you asked for it. Running that for a project is the solution I propose. It uses `ImageDisplay` internally (because it has to), but doesn't expose this publicly. Romain's comment wasn't a question, it seemed you had a solution you were satisfied with, and I received no reply to the changes I made for you except for 👍 so it remains very unclear to me what you want...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632627020:558,expose,expose,558,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632627020,1,['expose'],['expose']
Security,"Below is the command-line output if I run from command line instead of GUI:; We can see that the path was a combination of two paths, this is the problem. >> RMD_slide2ims_Entry; 23:18:18.288 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, D:\\QMDownload\\5\\Leica_scn\\Leica-Fluorescence-1.scn, -script, D:\\QMDownload\\5\\tpc9321172_2c3b_4e82_b55c_7ae4380fda4b.groovy ; 23:18:18.368 [main] [ERROR] q.lib.images.servers.FileFormatInfo - Checking Big TIFF images currently not supported!!! ; 23:18:18.428 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1 ; WARNING: An illegal reflective access operation has occurred ; WARNING: Illegal reflective access by com.esotericsoftware.kryo.util.UnsafeUtil (file:/C:/Program%20Files/QuPath-0.2.0-m1/app/kryo-2.24.0.jar) to constructor java.nio.DirectByteBuffer(long,int,java.lang.Object) ; WARNING: Please consider reporting this to the maintainers of com.esotericsoftware.kryo.util.UnsafeUtil ; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations ; WARNING: All illegal access operations will be denied in a future release ; 23:18:19.436 [main] [WARN ] loci.formats.Memoizer - deleting invalid memo file: D:\QMDownload\5\Leica_scn\.Leica-Fluorescence-1.scn.bfmemo ; com.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 458; Serialization trace:; service (loci.formats.in.OperettaReader); readers (loci.formats.ImageReader); reader (loci.formats.DimensionSwapper); reader (loci.formats.FileStitcher); helper (loci.formats.in.FilePatternReader); readers (loci.formats.ImageReader) ; 	at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:119) ; 	at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:641) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:375) ; 	at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$Obje",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472915452:631,access,access,631,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472915452,2,['access'],['access']
Security,"Brilliant, thanks @zindy! Very reassuring to have any fixes validated, I hope v0.4.2 can last longer than v0.4.0 and v0.4.1 :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1202#issuecomment-1381855920:60,validat,validated,60,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202#issuecomment-1381855920,1,['validat'],['validated']
Security,"Cheers, I put literally zero thought into what we need and not, though some of it definitely looked fishy. I figured it wasn't worth thinking about if it wasn't going to work in principle anyways. The associated image class is useless yeah, it's just a String with a getBufferedImage method. No idea why they use a String -> String HashMap for that. Also renamed ""Openslide"" to ""OpenSlide"" in the server(builder) classes for consistency, which I hope doesn't break anything",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1715236828:332,Hash,HashMap,332,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1715236828,1,['Hash'],['HashMap']
Security,"Closing this issue after discussion with @melvingelbard... it's not something we plan to do, and would be very apprehensive about including the change even if someone else implemented it. As I mentioned above, the consistency thing has some (partly historic) reasons. We only started adding spinners recently; the underlying rationale has been that sliders are used when the range is known in advance, spinners are used when it's not... New commands will endeavour to apply this rule more consistently, and old commands will either be either removed or updated. Regarding spinners and mouse wheel input, I think this really would need to be implemented in JavaFX directly. There are ostensibly easy ways to add support by attaching a scroll listener, in my experience to date this can open a whole can of worms... basically, scroll events can differ a lot depending upon the input device/platform (not to mention 'natural' scrolling in some cases, which can flip the direction). Therefore I think the risk is too high of creating something that inadvertently makes the user experience *worse* for many, and we would have no way to test all the relevant platforms to check this. I presume the JavaFX developers have reasons for not implementing this directly yet - perhaps related to the reason I give. But in any case, they would have access to potentially more platform-specific information to enable a robust implementation. For these reasons, I'm afraid I don't think we can/should act on this feature request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/495#issuecomment-641183465:1335,access,access,1335,https://qupath.github.io,https://github.com/qupath/qupath/issues/495#issuecomment-641183465,1,['access'],['access']
Security,"Closing this now... still not possible to rename in the *Hierarchy* view (sorry), but at least in v0.2.0 one can now access a consistent annotations menu by right-clicking on the viewer. This gives another way to set the properties, in addition to choosing from the *Annotations* tab or pressing `Enter`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-632222754:117,access,access,117,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-632222754,1,['access'],['access']
Security,"CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3144); 	at javafx.scene.Scene$DnDGesture.processTargetEnterOver(Scene.java:3316); 	at javafx.scene.Scene$DropTargetListener.dragEnter(Scene.java:3024); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragEnter$0(GlassSceneDnDEventHandler.java:83); 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragEnter(GlassSceneDnDEventHandler.java:77); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragEnter$9(GlassViewEventHandler.java:733); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragEnter(GlassViewEventHandler.java:732); 	at com.sun.glass.ui.View.handleDragEnter(View.java:684); 	at com.sun.glass.ui.View.notifyDragEnter(View.java:1020); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); 	at java.base/java.lang.Thread.run(Thread.java:833); 13:36:13.428 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); 13:36:13.788 [J",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846:1793,Access,AccessController,1793,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846,1,['Access'],['AccessController']
Security,"ConstructorAccessorImpl.newInstance(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.get(Unknown Source); at java.base/java.util.ServiceLoader$3.next(Unknown Source); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:104); at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1601); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:1059); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:60); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Unknown Source); 17:02:49.461 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; 17:02:49.798 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 17:02:49.798 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 17:02:52.272 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Current version 0.2.3, latest stable releas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/615#issuecomment-725509556:1936,secur,security,1936,https://qupath.github.io,https://github.com/qupath/qupath/issues/615#issuecomment-725509556,1,['secur'],['security']
Security,"Dear Pete,. Sounds good. From the outside, maybe I can give two remarks that might be helpful to consider:. Because QuPath is your ""baby"", you are thinking a lot about how to include outside functionality (ImageJ) into QuPath. At the same time, you say rightly, ImageJ has much more documentation and support, and more users and more diverse users. Maybe it might be a good project to access QuPath from ImageJ, either the whole GUI, but even better, just its functional structures, by writing a ImageJ Plugin. And I guess, you would not necessarily need to do that yourself, because it might be easier to find someone to help, because there is more people experienced with writing ImageJ Plugins. QuPath itself is really good for Digital Pathology, and Digital Pathology is booming. A lot of people probably already gave you very positive feedback. This means, there must be ways to get more funding for that project and then you can actually hire people to do the programming. But somehow I think, you might have thought about that already. If there is anything I can help with (unfortunately not programming a software), I would like to support.; Best Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401763074:385,access,access,385,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401763074,1,['access'],['access']
Security,"Dear Pete,. thank you very much for your fast reply!. Regarding *.mrxs files, the problems occur only with multichannel fluorescence images. Brightfield images open without a problem. Here is an example:. ![brightfield_example](https://cloud.githubusercontent.com/assets/23238491/19998070/e2515342-a26a-11e6-8f3d-8c2746210dc1.jpg). Indeed, as we can see, OpenSlide is used to access the *.mrxs file. Regarding the fluorescence files, all of the requirements that you stated above are fulfilled for my files. QuPath opens them using ImageJ. When I use ImageJ (or in my case, Fiji) to open them directly, the behaviour is the same: access is only possbile at the most coarse resolution. Both *.czi and *.mrxs can be exported as tiff files from their viewers (ZEN2 and CaseViewer). The monochrome tiffs can be opened in QuPath. However, when I joined three of these monochrome files in an RGB file, my first attempt at opening it in QuPath failed. I am going to keep experimenting. However, I wanted to point out that the technology to open multichannel *.czi and *.mrxs files already exists because it is implemented in a free viewer application called ""Zoom v2.0.0"", available from MicroDimensions (https://micro-dimensions.com/zoom/). We have been providing some slides for them over the last years to test their algorithms. They might be interested in a scientific cooperation. We can also provide test slides (image data) via our file transfer system for you if you give me an e-mail address. Best regards,. Arnulf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-258370511:376,access,access,376,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-258370511,2,['access'],['access']
Security,"Dispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757); 	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485); 	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762); 	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:352); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:275); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$300(GlassViewEventHandler.java:388); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:387); 	at com.sun.glass.ui.View.handleMouseEvent(View.java:555); 	at com.sun.glass.ui.View.notifyMouse(View.java:937); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:40:13.846 [JavaFX Application Thread] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] [INFO ] q.lib",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:7793,Access,AccessController,7793,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['Access'],['AccessController']
Security,"Do these colors look more plausible to you?. ![scn_tile](https://user-images.githubusercontent.com/4690904/35150761-7e875fbe-fd13-11e7-98c2-21a026638c2b.jpg). My suspicion is that the photometric interpretation is causing the trouble. Here's a (very hack-y) QuPath script that looks to pull out some tiles after having switched the photometric interpretation from Y_CB_CR to RGB. ```groovy; import ij.ImagePlus; import ij.process.ColorProcessor; import loci.formats.in.LeicaSCNReader; import loci.formats.tiff.IFD; import loci.formats.tiff.PhotoInterp; import loci.formats.tiff.TiffParser; import qupath.lib.images.servers.BioFormatsImageServer; import qupath.lib.scripting.QPEx. // Access the current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. // Try to get the TIFF parser (this takes a bit of a search?); // Assume that we have a LeicaSCNReader somewhere; def reader = server.manager.getPrimaryReader(server, server.filePath); while (!(reader instanceof LeicaSCNReader)); reader = reader.getReader(); reader = reader as LeicaSCNReader; def tiffParser = reader.tiffParser as TiffParser. // Get tile size; int w = reader.getOptimalTileWidth(); int h = reader.getOptimalTileHeight(). // Loop through the IFDs and see if we can extract an image, somehow; for (ifd in tiffParser.getIFDs()) {; try {; // Check the original photometric interpretation; print 'Original photometric interpretation: ' + (ifd.getPhotometricInterpretation()); // Hack to artificially set it to RGB; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); def bytes = tiffParser.getTile(ifd, null, 0, 0); // Convert to an ImageJ image for display; int[] rgb = new int[w*h]; for (int i = 0; i < w*h; i++) {; int r = bytes[i]; int g = bytes[w*h+i]; int b = bytes[w*h*2+i]; rgb[i] = (r << 16) + (g << 8) + b; }; def cp = new ColorProcessor(w, h, rgb); new ImagePlus(""Tile"", cp).show(); } catch (Exception e) {; print e.getLocalizedMessage(); }; }; ```. If this is correct, h",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358951720:683,Access,Access,683,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358951720,1,['Access'],['Access']
Security,"Does the View->Show log give you any information when this happens? . I am not sure in your case, but if you are running the full script I wonder if it isn't the cell detection rather than the classifier that is erroring out. I don't believe the classifier runs in tiles, it should apply to the entire image at once, and only after the cell detection part of the script is completed. Memory might be an issue there, though there used to be some possible edge cases with very small tiles (where the tile clips the edge of the tissue and a very tiny region is generated) causing problems. I usually was able to get around that by changing the Simple Tissue detection settings, as it was incredibly rare. The logs should help determine what is happening. You said randomly, so this means you can't reproduce it on any single slide running it twice? Are the images QuPath is accessing stored across a potentially busy or slow network?. As an aside, you are running both a classifier in the cell detection (Positive cell detection with three thresholds), and again with a trained classifier?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355477217:871,access,accessing,871,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355477217,1,['access'],['accessing']
Security,"EHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FA5G6YB3KO5IO3F2PMFLETCDYCPOOXAVCNFSM4NF3XJJKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCNZZGEZDQMBYGEZQ>.; You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>; The information in this e-mail is intended only for the person to whom it is addressed. If you believe this e-mail was sent to you in error and the e-mail contains patient information, please contact the Mass General Brigham Compliance HelpLine at https://www.massgeneralbrigham.org/complianceline <https://www.massgeneralbrigham.org/complianc",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:3120,secur,secure-web,3120,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['secur'],['secure-web']
Security,EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runL,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:7348,secur,security,7348,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['secur'],['security']
Security,"Excellent, thanks - can confirm that; ```; ./gradlew clean run; ```; doesn't include the javadocs, but; ```; ./gradlew clean getJavadocs run; ```; does. And they are also included with; ```; ./gradlew clean jpackage; ```; Only minor comment is that `getJavadocs` doesn't seem a very gradle-ish task name and isn't so descriptive (use `gradlew tasks` to see all those that are available). What do you think of; ```; assembleJavadocs Copies the Javadoc jars to a directory for access within QuPath; ```; ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1518#issuecomment-2097819235:475,access,access,475,https://qupath.github.io,https://github.com/qupath/qupath/pull/1518#issuecomment-2097819235,1,['access'],['access']
Security,"FO: Completed!; INFO: ; qupath.imagej.superpixels.SLICSuperpixelsPlugin {""sigmaMicrons"": 1.0, ""spacingMicrons"": 5.0, ""maxIterations"": 20, ""regularization"": 0.9, ""adaptRegularization"": true}; INFO: Processing complete in 4.87 seconds; INFO: Completed!; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:741); at java.base/java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1045); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintSpecifiedObjects(PathHierarchyPaintingHelper.java:161); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:219); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1670); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Thread.java:834); INFO: ; qupath.lib.algorithms.IntensityFeaturesPlugin {""pixelSizeMicrons"": 0.227, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""channel1"": true, ""channel2"": true, ""channel3"": true, ""doMean"": true, ""doStdDev"": false, ""doMinMax"": false, ""doMedian"": true, ""doHaralick"": false, ""haralickMin"": 0.0, ""haralickMax"": 1.0, ""haralickDistance"": 1, ""haralickBins"": 32}; INFO: Processing complete in 0.34 seconds; INFO: Completed!`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/307#issuecomment-484610786:1955,secur,security,1955,https://qupath.github.io,https://github.com/qupath/qupath/issues/307#issuecomment-484610786,2,"['Access', 'secur']","['AccessController', 'security']"
Security,"Fantastic, that's a relief, thanks!; I saw those errors tile width/height too, only with MRXS files... but yes, they don't seem to cause trouble. For reference, this is what happened:; I recompiled OpenSlide for Mac back for v0.0.7, to address issues related to opening MRXS files with certain types of compression (possibly BMP or PNG). However, I appear to have accidentally included the previous versions of the library + dependencies in the Mac download, possibly because the machine on which I finally compiled the Mac version of QuPath for distribution had cached the original libraries, which had the same version number (since they traced back to the same version of OpenSlide). So v0.1.1 was the first download to actually contain the Mac OpenSlide updates intended for v0.0.7. And it turned out that those updates were missing a couple of required files, but which were available on my development machines... lulling me into a false sense of security that all was well. Anyhow, I've now repackaged OpenSlide + dependencies, added in the license notices for the additional required files, and bumped up the version number to 3.1.4_2 to make it clear which OpenSlide should be included in all future versions of QuPath compiled for Mac - regardless of machine. Outcome:; * OpenSlide included with the Mac distribution of v0.1.1 should be able to handle slightly more kinds of image than previous versions... but in the overwhelming majority of cases, it will look the same; * None of this matters for QuPath running on anything other than Mac; * I was never going to figure out there was a problem on my own, since it was working for me... so thanks for letting me know!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265679401:953,secur,security,953,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265679401,1,['secur'],['security']
Security,"Fixed by ; * https://github.com/qupath/qupath/pull/1124; * https://github.com/qupath/qupath/pull/1125. Extra comment on the memory: the limit affects Java, but JavaCPP can potentially access more memory. Therefore the most memory-hungry thing (pixel classification) isn't strictly subject to the same limit. It should still be possible to specify the memory in the preferences on Windows/Linux, but this needs checked.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/986#issuecomment-1308396263:184,access,access,184,https://qupath.github.io,https://github.com/qupath/qupath/issues/986#issuecomment-1308396263,1,['access'],['access']
Security,"For 1. you didn't need to install OpenSlide yourself - just excluding/disabling Bio-Formats is enough, and QuPath should default to using OpenSlide. This has support for at least [some .scn](https://openslide.org/formats/leica/) files, but not necessarily all of them and I guess not yours. > Note: This is true for Windows, Mac and some variations of Linux. The default version of OpenSlide might not work currently on all kinds of Linux. For 2. I fully understand you need the full-resolution image; my point is that it may not be the full-resolution image that you have opened. If there are multiple images in the file and you drag it onto QuPath, then one of these multiple images will be displayed - but it might not be the full-resolution image you want. I describe in my last answer how you can access the other images in the file from within QuPath (either under the 'Image' tab or through a project). Nevertheless, if you need to rely on Bio-Formats then the 'pink' issue has to be resolved, and the problem appears to be in Bio-Formats and not QuPath. If it hasn't been fixed yet, then if you are able to export your image in another format (e.g. .svs) then this may help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435651179:802,access,access,802,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435651179,1,['access'],['access']
Security,"Forcing it to use the red channel would require modifying the code for the dearrayer. This would not be easy to do in a straightforward way that doesn't break existing scripts for other users. It is difficult to help you further without access to your image, and just a screenshot showing one channel and no illustration of what 'the initial threshold fails' looks like. Did you use the script that I wrote for you when you asked a similar question in #77 ? You didn't reply. Can it not be used in this case?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-410767203:237,access,access,237,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-410767203,1,['access'],['access']
Security,"Good way to win my support with the password ;). Ok, it took a while but I am reasonably sure it's a Bio-Formats issue. I also couldn't find a problem with the `RandomAccessInputStream`, but it turns out that this isn't the code that's being called; rather it calls instead ; https://github.com/ome/ome-common-java/blob/94fe420a95f7859839e09e84185bc31107ba0b72/src/main/java/loci/common/RandomAccessInputStream.java#L590. I didn't trace through the (rather more complicated) logic but I can confirm with a debugger that this consistently returns a NULL at the end of the image name with the `SISReader`... including for other SIS files that I found posted on image.sc. Taking QuPath (mostly) out of the equation, this script demonstrates that the null occurs:; ```groovy; import loci.formats.MetadataTools. def path = ""/path/to/image.tif"". def reader = new loci.formats.ImageReader(); reader.setMetadataStore(MetadataTools.createOMEXMLMetadata()); reader.setId(path). def name = reader.getMetadataStore().getImageName(0); println ""Name: ${name} (length = ${name?.length()})""; if (name && name[-1] == (char)0); println 'NULL found to terminate string'; ```. With that in mind, I think it may be worth reporting to the Bio-Formats team to see if they consider this to be wrong or not. On the QuPath side, it *could* check for NULL at the point when the image name is requested from Bio-Formats. I feel like this would remove any weirdness at its source. It might be possible to smuggle a NULL into the results table some other way, but I don't see an obvious path to achieving that... so I don't think the copy-to-clipboard thing should be changed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/573#issuecomment-664566676:36,password,password,36,https://qupath.github.io,https://github.com/qupath/qupath/issues/573#issuecomment-664566676,1,['password'],['password']
Security,"Good! To answer your question:. ```QP``` is inside the 'core' modules, which means it doesn't know anything about the GUI. ```QPEx``` is a subclass of ```QP``` that lives inside the GUI module - which has access to all the core modules too. Therefore ```QPEx``` adds extra GUI-related methods (e.g. to request the QuPathGUI instance, or viewers) that aren't available within ```QP```. *Potentially*, if you only rely on ```QP```, you could run a script headlessly, and completely independent of the QuPath GUI. If instead you run your scripts from QuPath directly, then you may as well use ```QPEx```. It should do the same, but also give you access to more stuff if you need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/102#issuecomment-332441466:205,access,access,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/102#issuecomment-332441466,2,['access'],['access']
Security,"Haha, I mean the ability to have access to a list! It has always been something I missed in more complex classifiers. . Thanks for the link, it has been a while since i used Weka, but I may give that a try the next time I want to trim down or adjust my input selection.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424771491:33,access,access,33,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424771491,1,['access'],['access']
Security,"Hi @MarkZaidi I agree with @MichaelSNelson that that sounds like a very large classifier... large enough that I think it would be reasonable for QuPath not to support it, although ideally it wouldn't fail with an exception. I can't really feasibly use the 'steps to reproduce'. Is there any chance you can replicate the problem with a more manageable/minimal dataset - preferably of publicly-accessible images?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092019624:392,access,accessible,392,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092019624,1,['access'],['accessible']
Security,"Hi @vladpopovici . There's more info about this behavior on the user forum [here](https://forum.image.sc/t/qupath-is-cropping-white-background-in-whole-slide-image-how-to-avoid-this-behavior/40853/2). Basically, you'll need to get the bounding box coordinates from OpenSlide. You can do this either from within a Groovy script in QuPath, or later by accessing OpenSlide through Python. Pete. PS. I'll close this as an issue because the [forum](http://forum.image.sc/tag/qupath) is really the best place for non-bug-related QuPath questions. PPS. Nice to see QuPath could be useful for you, I recognize your name from [this](https://doi.org/10.1093/bioinformatics/btx027) :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/820#issuecomment-919160755:350,access,accessing,350,https://qupath.github.io,https://github.com/qupath/qupath/issues/820#issuecomment-919160755,1,['access'],['accessing']
Security,"Hi Adam, the problem is access to the images - for which I can see you're using a custom extension, and not something that's part of QuPath itself. I got an email about this issue a while back; the conclusion then was that if you can access the .svs image files directly, rather than via the extension, the problem should go away. I'll close the issue here because it isn't really within QuPath itself. If you can send me an email (or track me down on ResearchGate, LinkedIn, Twitter or elsewhere) then I can discuss it further there. The missing annotations thing is a bit of a mystery, and may or may not be connected. If you can find a way to reproduce it please let me know.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/174#issuecomment-390186531:24,access,access,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/174#issuecomment-390186531,2,['access'],['access']
Security,"Hi Georgia,; Could you try using _Edit &rarr; Reset Preferences_?; If that resolves the issue then I think the QuPath isn't able to find some path to scripts. I'm not sure why (maybe a directory is missing or located on a server that isn't accessible?) and it shouldn't cause an error like this so I'll investigate anyway on the QuPath side.; If the doesn't resolve it then I'm not sure what the problem could be.... does it happen with all projects or just one?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/373#issuecomment-549758228:240,access,accessible,240,https://qupath.github.io,https://github.com/qupath/qupath/issues/373#issuecomment-549758228,1,['access'],['accessible']
Security,"Hi Sorry for the delay, I replicated the steps with a clean installation no plugins and saw the same access to the files. I went to the registry and it shows the paths for the first user that installed QuPath, . did a quick search and it seems that it can be a problem with the msix packages, ; https://techcommunity.microsoft.com/t5/msix/registry-keys-created-after-installation-and-left-behind-after/m-p/1802357. [QuPath Clean installation.pdf](https://github.com/qupath/qupath/files/9973964/QuPath.Clean.installation.pdf)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1309180858:101,access,access,101,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1309180858,1,['access'],['access']
Security,"Hi Svidro,; thank you for your suggestions. The problem is, that I need all the 4 channels to analyze co-expression of markers. Hence, exporting every image twice is not feasible (and too slow). ; Could you explain to me why is it so problematic to access more than 3 channels? . Cheers,; Mario",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/49#issuecomment-278264549:249,access,access,249,https://qupath.github.io,https://github.com/qupath/qupath/issues/49#issuecomment-278264549,1,['access'],['access']
Security,"Hi again,. I compiled the pete-java11 branch (after some ubuntu debugging). Sadly I had to compile it on a local laptop with low memory (until I get back to the lab). So take this into account (the log suggest that RAM is the problem on this machine). Here are my file links:. cropped : https://owncloud.ulb.ac.be/index.php/s/ReltLIepwxOZ2RK; fullsize : https://owncloud.ulb.ac.be/index.php/s/VhuHZheRNHgdUqk; PASSWORD: qupathBug ; Expires: march 17 2019. On my main machine I noticed that when opening the cropped version, qupath opens it after some minutes of intensive cpu calculations. This seems to suggest that qupath is precomputing something instead of directly opening the file. I tried opening my files and those from NHPatterson. As of yet it seems to still not be working. LOG DUMP; ```; INFO: Bio-Formats version 6.0.0; ERROR: Could not load OpenSlide native libraries; at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2660); at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829); at java.base/java.lang.System.loadLibrary(System.java:1867); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.openslide.OpenslideServerBuilder.<clinit>(OpenslideServerBuilder.java:87); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62); at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getIn",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:410,PASSWORD,PASSWORD,410,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['PASSWORD'],['PASSWORD']
Security,"Hi all, . I have pushed a solution to this on my fork this morning (link [here)](https://github.com/melvingelbard/qupath-forked/tree/scriptArgs). It uses Picocli to parse the unmatched args (as @zindy mentioned I believe), which are then accessible through the `args` variable in the current running script. `args` is a simple `String[]`, so no fancy further parsing is performed on it. Not sure whether that was the original plan..; What do you think of this implementation?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741805565:238,access,accessible,238,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741805565,1,['access'],['accessible']
Security,"Hi, had similar issues as we have multiple backups of our files on different external hardrives. It is possible however to reassign the letter of each hardrive by going into administrative tools, see below. Open the Start menu, and type ""Administrative Tools"" in the search box. Click it in the list that appears and then double-click ""Computer Management."" Enter your administrator password if Windows asks for it. Click the ""Disk Management"" link, and then click your external hard drive's assigned disk. Right-click the disk and click ""Change Drive Letters and Paths."". Click the ""Change"" button and click ""Assign the Following Drive Letter."" Click the new letter to assign to your external hard drive and click ""OK"" to save your change. This way as long as the files and folder structures within the hardrive remain the same all that you need to change is the letter of the hardrive so that it is the same as the original that it was stored on.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/114#issuecomment-487867515:383,password,password,383,https://qupath.github.io,https://github.com/qupath/qupath/issues/114#issuecomment-487867515,1,['password'],['password']
Security,"Hi, joining a bit late.... part of one of the suggestions above contained:; ```groovy; getDetectionObjects().parallelStream().forEach({Polygon ->; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, Polygon.getROI())); ImageIO.write(img, 'JPEG', new File(dirOutput, Polygon.getName() + '.jpg')); }); ```. If you want to keep that kind of concise way of looping, `eachWithIndex` might help. The corresponding part might look something like this:; ```groovy; getDetectionObjects().eachWithIndex {pathObject, index ->; def img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, pathObject.getROI())); def name = pathObject.getDisplayedName() + '_' + index + '.jpg'; ImageIO.write(img, 'JPEG', new File(dirOutput, name)); }; ```. I also used `getDisplayedName()`; if no name has been set, this will try to come up with something else useful for that object (e.g. the classification). And I added `def`, which you don't really need but it keeps the variables local (otherwise you could likely access them after the loop).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346934805:1037,access,access,1037,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346934805,1,['access'],['access']
Security,"Hi, this looks to be the same issue as #74 . It should only affect images that are being read with ImageJ, because of the way in which a cropped region is extracted (when you're unlucky, a second thread might call ```setRoi``` at an inopportune moment). One potential quick fix in the code could be to make [this method](https://github.com/qupath/qupath/blob/v0.1.2/qupath-extension-ij/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L175) synchronized, although this could be refined a bit further. To the best of my knowledge, images accessed any other way (including all whole slide images) should be unaffected. This should be fixed in the next QuPath update. In the meantime, restricting the number of threads should work too.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/110#issuecomment-336955291:549,access,accessed,549,https://qupath.github.io,https://github.com/qupath/qupath/issues/110#issuecomment-336955291,1,['access'],['accessed']
Security,Hi; Computer: Dell Latitude with touchpad. No graphics tablet/pen used at the moment. The firs error message was created using the wand. While playing around with the bit a bit I managed to get a slightly different error message... `ERROR: QuPath exception: Points of LinearRing do not form a closed linestring; at org.locationtech.jts.geom.LinearRing.validateConstruction(LinearRing.java:90); at org.locationtech.jts.geom.LinearRing.<init>(LinearRing.java:85); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:356); at org.locationtech.jts.geom.GeometryFactory.createLinearRing(GeometryFactory.java:343); at org.locationtech.jts.util.GeometricShapeFactory.createEllipse(GeometricShapeFactory.java:231); at qupath.lib.gui.viewer.tools.BrushTool.createShape(BrushTool.java:489); at qupath.lib.gui.viewer.tools.BrushTool.getUpdatedObject(BrushTool.java:326); at qupath.lib.gui.viewer.tools.BrushTool.mouseDragged(BrushTool.java:302); at qupath.lib.gui.viewer.tools.AbstractPathTool.lambda$registerTool$0(AbstractPathTool.java:333); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchCha,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561071266:352,validat,validateConstruction,352,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561071266,1,['validat'],['validateConstruction']
Security,"Hmmm, this isn't a scenario I ever had to deal with myself... it looks like an unfortunate limitation of how the project arranges ```.qpdata``` files simply according to the image name stored for the entry in the image. There's no 'good' way to fix it currently, unless you're willing to put all your images in separate projects... which would kind of defeat the purpose of using a project. So you could try this as a workaround:. ```groovy; guiscript=true. // Get QuPath & project; def qupath = getQuPath(); def project = qupath.getProject(). // Loop through images, setting the name; // (actually accessing a private field... therefore 'bad'); project.getImageList().each {; def path = it.getServerPath(); int ind = path.lastIndexOf(':'); def scene = path[ind+1..-1]; def name = new File(path[0..ind-2]).getName(); it.putMetadataValue('Slide_ID', name); it.imageName = name + ' (' + scene + ')'; print it.imageName; }. // Need to set to null first to force update; qupath.setProject(null); qupath.setProject(project). // Be very careful is you use this to write the project!; // The logic is a bit weird and it will probably overwrite ; // the existing project - so duplicate your .qpproj file to be safer; //qupath.lib.projects.ProjectIO.writeProject(project); ```. Basically, this should rename the images in the project to include both the original file name and the scene. This should then be used by QuPath when arranging the ```.qpdata``` files afterwards. It won't automatically update the names of any existing data files - this would have to be done manually. It has the added bonus of setting the 'Slide_ID' keyword; if you right-click on the project, you can then choose to *Sort by &rarr; Slide ID*.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332598953:599,access,accessing,599,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332598953,1,['access'],['accessing']
Security,"Hmmm, well the problem certainly seems to be related to OpenCV being unable to load. Perhaps the binaries from JavaCPP are not supported on your system? But then it would be weird if the pre-build QuPath can use them (e.g. via the wand tool, pixel/object classifiers)... Is there any reason you need to build from source, rather than use the pre-built binaries?. Since I'm unable to replicate the problem on any computer I have access to, I'm really not sure I can help much further. Anything else I suggest to try would be a complete guess.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633265261:428,access,access,428,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633265261,1,['access'],['access']
Security,"How bad is this really...?. I remember from conversations with @melvingelbard that validating numbers in a text field is far from straightforward... at least if trying to handle `+-.,e`. These might be used for valid numbers, but at the point they are typed the text may not be a valid number. He wrote [this method](https://github.com/qupath/qupath-fxtras/blob/007d91581049d7fd9439fd233211dcecf44d8fef/src/main/java/qupath/fx/utils/FXUtils.java#L260) to help sort that. ControlsFX doesn't handle this so well: you can see it in the preference pane, built using ControlsFX. Find a numeric field, e.g. `Brush diameter`. You can type `50` but you *cannot* type `-50` in the usual way. But you *can* type `50` and then go back to add the `-` (or even `+`). It seems to use a validation that is much too eager. I find this to be more annoying and problematic, so the `ParameterPanelFX` errs on the side of 'type anything, it's up to you for it to make sense'. The main thing is that we shouldn't through exceptions too quickly. But you could try switching the parameter pane to use Melvin's method linked above and see if it behaves better. In any case, I think a solution belongs in `qupath-fxtras` since it is so fiddly. For the number of bins, you can set an upper limit on the parameter - but this will have the effect of using a slider instead. That might be fine in this case; if you need more customisation, then it'd be better to avoid `Parameter` altogether and just got straight to JavaFX (which could be preferable for the measurement table histograms since then it'd be easier to make the selections persistent).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1541#issuecomment-2162178336:83,validat,validating,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/1541#issuecomment-2162178336,2,['validat'],"['validating', 'validation']"
Security,"However, I haven't got that to work with _all_ plugins and functionality of Fiji because of conflicts in dependencies... or perhaps just because I don't know enough about the ImageJ2 API. That might well be solvable if it turns out to be necessary, but it hasn't been something I've needed myself or anyone else has asked for yet (that I recall). Direct export of ROIs only wouldn't help most QuPath applications, for the reasons outlined above (i.e. most are for whole slide images, in which case you'll need to scale the image as well - and then exporting the pixels as well as the ROIs is necessary, which _is_ possible). But I appreciate that it makes sense in your case. Just to be clear: you should be able to run the script unchanged across your entire folder if you just add all the images to a QuPath project, and choose _Run &rarr; Run for project (without save)_ from the QuPath script editor. Because that script doesn't make changes, there's no point saving the (same) results after running the script to update the `.qpdata` files... although it also shouldn't matter if you do. Regarding documentation, at the time of the QuPath's release I was in the process of leaving the university where I wrote it, and lacked the time and resources to document the API and find somewhere to host it; also, I didn't consider it stable enough at that point anyway, and planned to continue working on it. For reasons largely beyond my control this wasn't possible, unfortunately, but you can access a lot of the existing Javadocs through setting up scripting with IntelliJ (and indeed a similar process works to set up IntelliJ for Groovy scripting with Fiji). In a couple of months I will start a new position and be able to manage QuPath as a more active open source project - and be a bit stricter with myself about compiling the Javadocs and finding a home for them. In the meantime, there is some additional documentation and developments described on [my blog](https://petebankhead.github.io).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401622161:2012,access,access,2012,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401622161,1,['access'],['access']
Security,"I am sorry, I must have missed this message!. In my case, I was thinking to help extensions I use to take full advantage of this new feature. Specifically, I was looking into [`qupath-extension-abba`](), but the only thing stopping me from being able to port it is that [it checks](https://github.com/BIOP/qupath-extension-abba/blob/main/src/main/java/qupath/ext/biop/abba/AtlasImporter.java#L203) whether the current image is rotated or not. If it is, it applies a transformation to the imported ROIs. I guess interrogating specific image server is unfeasible (i.e. using `rotated_server.getRotation()`), however we could perhaps avoid requesting for the server if it can't be interrogated. Hence why I was thinking to expose the builders: extensions/scripts can decide whether to make the server concrete based on their implementation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2396452661:720,expose,expose,720,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2396452661,1,['expose'],['expose']
Security,"I attempted to replicate this on a standard system (Win10 Pro, no active directory, no abnormal group policy) and was not able to. The normal user with the admin installed QuPath was not able to access any of the admin folders, nor could they see projects that had been opened/created by the admin user.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1309474176:195,access,access,195,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1309474176,1,['access'],['access']
Security,"I do not have access to a TMA at the moment but are those cores set to ""missing"" (they would have a lighter core outline)?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-326020294:14,access,access,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-326020294,1,['access'],['access']
Security,"I don't recall any memoization-related changes in v0.3.0-SNAPSHOT, except for the fact it will be using a different JDK and updated version of Bio-Formats itself. Unless I'm missing a key part, the git blame suggests the memoization code was last changed 2 years ago. v0.2 made a change from v0.1.2 to no longer store the .bfmemo files in the same directory as the image, because this was causing problems for some users and confusion with new files being generated unexpectedly. Since v0.2, you can specify a memoization directory in the preferences, and also a memoization time in ms. If the time is <= 0, then no memoization files should be created. Otherwise, a file will be [generated either in the specified directory or in a temp directory](https://github.com/qupath/qupath/blob/dev-0.3/qupath-extension-bioformats/src/main/java/qupath/lib/images/servers/bioformats/BioFormatsImageServer.java#L1314). Could it be that you have a directory set in the preferences? If you don't, I would expect the memoization files to be temporary and automatically removed. In any case, the warning you see has been [logged by Bio-Formats](https://github.com/ome/bioformats/blob/25645389e076a7bd0011e04c4dd8982c0f0614ed/components/formats-bsd/src/loci/formats/Memoizer.java#L923). I don't know why it is unable to delete the file, but my guess is that it relates in some way to https://github.com/ome/bioformats/issues/3659 and the fact QuPath is now using Java 16. This is likely to cause various memoization problems involving kyro. I can think of two potential workarounds:; * Add `--illegal-access=warn` to the Java options for QuPath (based on [this](https://openjdk.java.net/jeps/396)); * Turn off memoization entirely, at least by default. I'm not sure which is preferable; neither feels great. I think you should be able to try the first option by editing the `.cfg` file - if you try, please let me know if it works",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717#issuecomment-828490219:1585,access,access,1585,https://qupath.github.io,https://github.com/qupath/qupath/issues/717#issuecomment-828490219,1,['access'],['access']
Security,"I don't think changing the extension of .qpdata files works here, and this may be the source of not being able to access it - would need to zip up the original file. But note that the cell count is never shown when an annotation is *classified* in that location in QuPath v0.1.2. It's also not an ideal place to get this number, because it is not actually a cell count but rather a count of the number of *direct child objects*. This should be the same as the cell count if there are no other objects (e.g. nested annotations), but otherwise it may not be. In my own QuPath fork I've added a detection count to the main built-in measurements for all annotations, which looks deeper through the hierarchy to get all cells - even if they are inside nested annotations. This works also for unclassified cells, but in v0.1.2 counts are only provided if the cells are classified. As a workaround in v0.1.2 you could set your cells to have any arbitrary class, e.g.; ```groovy; getCellObjects().each { it.setPathClass(getPathClass('My cell')) }; fireHierarchyUpdate(); ```; Then they should at least appear in any annotation measurement tables.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365536462:114,access,access,114,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365536462,1,['access'],['access']
Security,"I edited the code to try that but I still got the following error: . ````; ERROR: Error: startup failed:; Script53.groovy: 45: unable to resolve class ImagePlusServer ; @ line 45, column 17.; ImagePlusServer server = ImagePlusServerBuilder.ensureImagePlusWholeSlideServer(serverOriginal); ^. 1 error. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:596); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:767); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:697); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1034); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-484643330:781,access,access,781,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-484643330,1,['access'],['access']
Security,"I explored a bit more, and it turns out that I had already done most of the difficult part in storing annotation descriptions, and what remains is to make them accessible. I had a quick look (the code is on my fork of QuPath) and can add descriptions to both the images and the annotations. Currently, the annotation descriptions are just displayed as a tooltip under the 'Annotations' tab; they need a better home eventually. I won't get a chance to look further for at least the next few days, but to answer your questions:. > Do you save description data to the image files or to the qpproj file?. Currently to the `.qpproj` file. This is just JSON and can be opened in any text editor. > Are the annotations stored to the project or to the image?. In the `.qpdata` file. This is a binary file, which is in a trickier format (using Java serialization). Potentially these files can be large and complex, storing the relationship between millions of objects (annotations, cells...). But in your case they might be very small, and easily parse-able in a script.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-364498226:160,access,accessible,160,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-364498226,1,['access'],['accessible']
Security,"I guess that is some GLX problem. X11 forwarding with GL has its own set of quirks. This might be of interest:; askubuntu.com/questions/745135/how-to-enable-indirect-glx-contexts-iglx-in-ubuntu-14-04-lts-with-nvidia-gfx. BTW, we are running a similar setup but use xrdp to provide remote access to Windows and Linux machines via RDP. It works with qupath (but graphic output is not accelerated, of course).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/109#issuecomment-360180072:288,access,access,288,https://qupath.github.io,https://github.com/qupath/qupath/issues/109#issuecomment-360180072,1,['access'],['access']
Security,"I had a quick look on my local version of the code, where I've been exploring new things. Here's a screenshot:. ![image_descriptions](https://user-images.githubusercontent.com/4690904/35859449-04d0dfd2-0b38-11e8-9696-f549f97208d4.jpg). I've added the description to the 'Project' tab rather than the 'Image' tab, so that it can be accessible without actually opening the image at all. In this instance, the description that is shown depends upon which image entry is *selected* (i.e. blue), which is potentially different from the image that is actually opened. The 'opened' image is now highlighted with bold text to make it clearer (n this case, they are the same image). I hope that feels intuitive, but I guess it needs tested. My reason for doing it that way is that I thought it would be useful to give the option of checking the description before deciding whether or not to open the image. I've also been looking into several other changes, including the ability to set metadata values for individual images (you can see the options on the popup menu). This means a project can have multiple image sets, and you can sort them to get a tree-like structure. (Admittedly it's a small tree, since it only goes one level deep...). Do these changes look like they would help for your applications?. Adding descriptions to annotations would be a more 'core' change, that would affect the .qpdata files. So I'll need to think a bit more about how to achieve it, although I certainly agree it could be very useful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-363409447:331,access,accessible,331,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-363409447,1,['access'],['accessible']
Security,"I had the issue of not being able to delete extensions when QuPath was running. Somewhere in the loading process of the extension the ClassLoader (?) was never closed which left the operating system thinking that the file is still open by some process. I just closed the ClassLoader after initializing the extension, which allowed me to then delete the extension. . Unsure if closing the ClassLoader has consequences such as not being access the Resource files or such?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1419#issuecomment-1803479767:435,access,access,435,https://qupath.github.io,https://github.com/qupath/qupath/pull/1419#issuecomment-1803479767,1,['access'],['access']
Security,"I had wanted to play with something like this for a while now, and this post finally got me going! It took some time as I am not great with Java, but I have put together a two part system that is independent of the .qpdata file, though you could certainly enhance it's usefulness with annotations. To start (assuming you have a project with an image), you would create an ""Explore"" (capitalized) folder within your project folder, at the same level as the ""data"" folder. Then run the ""Location file creator"" and select the views that you would want the student to cycle through, in order, while writing a text file referencing each location (which will be labeled 1,2,3, etc.).; Once you have both the text file and the object file saved to your Explore folder, anyone currently looking at an image should be able to run the Slide Explore script which takes the text file and the object file with the views, and allows the user to read and cycle through the various views that were set up. I created a sample for JP2K-33003-1 if anyone wants to try it out and give some feedback. Once I am a little better with Java, I would like to change the Next/Previous buttons into hyperlinks in the text, but I am not quite there yet :). Scripts at: https://gist.github.com/Svidro/86fb224d69484ae5955631ce68d27054. The test image can be accessed at: http://openslide.cs.cmu.edu/download/openslide-testdata/Aperio/JP2K-33003-1.svs; The "".log"" file needs to be renamed to "".obj"" as I cannot post that file directly otherwise. I am sure there are a lot of improvements that could be made, and any feedback is welcome. [JP2K-33003-1.txt](https://github.com/qupath/qupath/files/1715587/JP2K-33003-1.txt). [JP2K-33003-1.log](https://github.com/qupath/qupath/files/1715588/JP2K-33003-1.log)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-364849591:1327,access,accessed,1327,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-364849591,1,['access'],['accessed']
Security,"I have an issue with certain ome.tiff images not opening in QuPath. In the command line console, Im receiving the Java error: NegativeArraySizeException and when I try to edit in the command line, it will not allow me to and I dont know how to access that. If you have any help or advice to get these images open, please let me know",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/437#issuecomment-1410779242:244,access,access,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/437#issuecomment-1410779242,1,['access'],['access']
Security,"I like it! Seems to work well. Tiny thing: it looks like `Pattern pattern = Pattern.compile(""[a-zA-Z&&[^Ee]]+"");` is called on every validation of the text field. Since `Pattern` instances are immutable (according to the javadocs), I think this should be initialized outside as a `private final static` variable to avoid the unnecessary overhead.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/668#issuecomment-791375357:133,validat,validation,133,https://qupath.github.io,https://github.com/qupath/qupath/pull/668#issuecomment-791375357,1,['validat'],['validation']
Security,"I marked the comments that I completely understood as resolved. About the rest, am I correct if a recap of what you ask is:; * Metadata parsing is fragmented between `BioFormatsImageServer` and `OMEReaderWrapper` / `OMETileReader`. This should not happen. Metadata should be requested only once and not lazily. * One tile reader should support accessing only one `series`. * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. However I didn't understand where the `OMEPixelParser` class would be in all of this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1713942917:344,access,accessing,344,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1713942917,1,['access'],['accessing']
Security,"I may have to wait until I get home for this to actually work correctly, or Pete can fix it, but mostly you want to change the way you choose the objects you get, since I don't know if you have several annotations, or one giant merged annotation. A script from a while back here: https://gist.github.com/Svidro/68dd668af64ad91b2f76022015dd8a45#file-cell-summary-measurements-to-annotation-groovy; Shows how to add the sum of the positive areas to the annotation, though I don't recall at the moment how to access the annotation's area in a script. I'm sure I have done it before, but most of my QuPath stuff is at home (~8 hours from now). All you would need at the end of this script (within each annotation loop) is to divide your new value by the total area and multiply by 100, if desired. Be very careful doing this, however, as little things like your cell expansion radius can have a dramatic effect on this value depending on the density of your cells! And sometimes depending on the perimeter of your annotation as the cells can stretch outside of your annotation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/159#issuecomment-375386261:506,access,access,506,https://qupath.github.io,https://github.com/qupath/qupath/issues/159#issuecomment-375386261,1,['access'],['access']
Security,"I originally saved the classifier in a shared folder on our work network.. my colleague and I both copied and pasted the file from there onto our desktops (to make it faster to locate when loading it through QuPath). I've had no problems with it at all prior to this week! My colleague has now left but I'll ask her to try it from the shared folder tomorrow and see if that fixes the issue. I've just tried loading it from the original folder but having the same issue fixable by closing and reopening. . The error message that pops up says: 'QuPath has encountered a problem, sorry. If you can replicate it, please notify a developer. java.security.PrivelegedActionException: java.lang.Exception: std::exception: bad allocation'. Thanks both for your help! Pete I will email you the qpclassifier file now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/160#issuecomment-375345642:641,secur,security,641,https://qupath.github.io,https://github.com/qupath/qupath/issues/160#issuecomment-375345642,1,['secur'],['security']
Security,"I really like your draft. It seems the most beautiful, design-wise. The `ImageServerStub` solution in the end may just work as a helper for writing ""good"" fast scripts, exposing exactly where the image files are absolutely needed. I made a small comment on your draft PR about the metadata, as i feel that is an important info to access *offline*. But in the end, if that was sorted out, that solution would be a drop-in replacement to mine. As you said, at last it will come down to which one is the most maintainable. I see pros and cons in both: `ImageServerStub` offers a solution that is segregated in one file, but then requires to punch multiple small holes in QP interface in order to use it; `lazy-server` distributes the code responsibility to multiple classes and requires to be careful in future development of QuPath so that it does not end up requesting for the server when it is not really useful. In the latter case it is due to the solution having a silent behaviour. However, since everything is managed internally in the lazy approach, in the future it may create less problems surging from punching holes in QuPath's interface. Ultimately, I think your solution is better maintainable-wise, granted that a few things are managed:; * have the retrieval of the image server be loud in logs. Perhaps even with some traceback to what portion of code triggered it?; * expose a `getCurrentMetadata()` function to avoid having to do `getServer().getMetadata()`; * check qupath code that requested for the server but may not need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846:330,access,access,330,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846,2,"['access', 'expose']","['access', 'expose']"
Security,I recently found resources like this:. Release hash:; https://github.com/MCJack123/ghaction-Generate-Release-Hashes. Release signing:; https://wiki.debian.org/Creating%20signed%20GitHub%20releases (which equally allows one to verify a given download),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1027#issuecomment-1200433309:47,hash,hash,47,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027#issuecomment-1200433309,2,"['Hash', 'hash']","['Hashes', 'hash']"
Security,"I think both read and write access should be synchronized. Right now, [line 142](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L142) and [line 241](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L241) can be executed at the same time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936234982:28,access,access,28,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936234982,1,['access'],['access']
Security,"I think that I hadn't really appreciated that using the list as key in the map would result in `equals` being called and checking all elements. The purpose was to ensure that identical string lists aren't duplicated for all objects - since there can be millions, which could easily cost hundreds of MB overhead. Basically, we'd like measurements to be accessible like `Map<String, double>`, but that doesn't exist in Java, and `Map<String, Double>` would have much more overhead. Therefore instead we use `List<String>` and either `float[]` or `double[]`, where entries in the list correspond to entries in the array. *Most* of the time, objects will have the same keys/strings - but this isn't enforced (and won't be true when measurements are being added, since the list will be growing). Therefore we want to be able to check when lists are duplicated, and use one instead. The current design is probably very suboptimal, but it's quite core to QuPath (for performance, memory use and serialization) so any major change would need to be very carefully checked.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943353414:352,access,accessible,352,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943353414,1,['access'],['accessible']
Security,"I think you're right about the pink image not being the label, but are you able to access the label through ImageJ using Bio-Formats, or some other way? When I open it with Fiji, I can't see a label for either of the two images linked to above. If a label is found, it should appear in QuPath under the 'Image' tab and 'Associated images'.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409928556:83,access,access,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409928556,1,['access'],['access']
Security,"I understand, it is hard to capture the idea. Overall I see that after installing QuPath using the "".msi"" in two different users in the same computer when opening QuPath in the second one I notice that I have access to the first user files. . I'll proceed to close this ticket, Thanks",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1309223445:209,access,access,209,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1309223445,1,['access'],['access']
Security,I was also wondering how to do this. Looking into the doc how it could be programatically accessed for read/write operations. I will keep updated if I find something,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/122#issuecomment-349589480:90,access,accessed,90,https://qupath.github.io,https://github.com/qupath/qupath/issues/122#issuecomment-349589480,1,['access'],['accessed']
Security,"I'd rather not expose more than necessary. What would it solve?. (I seem to have introduced a big bug in `PathIO`, so currently working on this... v0.6.0-SNAPSHOT isn't in a very usable state right now)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2278151773:15,expose,expose,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2278151773,1,['expose'],['expose']
Security,"I'll merge the PR anyway, because it solves the problem of not being able to access the log message counts - so that bit is great. The minimum size looks good too, so if there's a way to enforce it as the minimum rather than preferred then that would be useful in a future PR.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439:77,access,access,77,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439,1,['access'],['access']
Security,"I'm afraid my access to systems running Linux is pretty limited, but I hope to give it a bit more attention in a few weeks... In the meantime, I'd suggest trying to build QuPath from source. You could try it from the main repo here (which [involves eclipse + Maven in a fairly cumbersome way](https://github.com/qupath/qupath/issues/84)), or from my fork [here](https://github.com/petebankhead/qupath). On my fork I've tried to greatly streamline the process of building the software using [Gradle](https://github.com/petebankhead/qupath#building-qupath-with-gradle), which should also make it easier to investigate the changes that may be necessary to get it to really work cross-platform. This might also help: https://github.com/qupath/qupath/issues/51",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368320960:14,access,access,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368320960,1,['access'],['access']
Security,"I'm afraid not. QuPath give access to a range of classifiers from OpenCV and (optionally, with the extension installed) Weka - any parallelization would need to happen in those libraries, and depending on the algorithm might not help much. QuPath is also designed to make it possible to add new classifiers, so potentially newer, faster ones might be added one day... if someone makes them. I'd suggest trying to reduce your number of training objects and/or features. In the case of cells (for example), neighboring cells often have very similar features and including many similar cells probably doesn't help much... and it may even cause harm, by requiring even more training objects to learn something else. There are discussions about training classifiers [here](https://groups.google.com/d/msg/qupath-users/MpsK44RCZcE/xE3nX4aJCAAJ) and [here](https://groups.google.com/d/msg/qupath-users/qM_JtrEW1dI/Jeb5iMRnAQAJ). I also discuss a bit about improving the results when using the same training objects but fewer features [here](https://youtu.be/uj28wJSmntU?list=PL4ta8RxZklWk_O_Z7K0bZlhmHtaH73vlh). I do plan to make some changes that should improve how quickly an existing classifier is reloaded (even if it does not change the training time), described [here](https://groups.google.com/d/msg/qupath-users/EkQNKOqUBVE/UqB0tcL8AQAJ). But it's a fairly substantial change and a matter of finding enough time...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/206#issuecomment-416021080:28,access,access,28,https://qupath.github.io,https://github.com/qupath/qupath/issues/206#issuecomment-416021080,1,['access'],['access']
Security,"I'm afraid that would be tricky... you'll definitely need access to the raw pixels. To achieve this after detection, it's best _not_ to choose _Smooth boundaries_ in the cell detection parameters, to keep the contours as close as possible to their original shapes... then you could potentially loop through every cell, extract the pixels for the cell, create a binary mask for the nucleus and another for the cell, and work from there. Or alternatively you could write an entirely new cell detection (e.g. with ImageJ or OpenCV). Another option would be to look at exporting the pixels, and the cell ROIs as labelled images (with unique integer labels for each cell). Then you can potentially tackle the task in Python or R. Whichever way you choose it's not entirely straightforward, and calculating the values efficiently for large numbers of cells would be a further challenge. So... it's technically possible, but would require quite a lot of effort.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/236#issuecomment-433483920:58,access,access,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/236#issuecomment-433483920,1,['access'],['access']
Security,"I'm afraid that, as an open-source project, we don't have the time or resources to provide code signing certificates at this time. We'd potentially need certificates for all operating systems, and it's not something we can work on right now. We provide full instructions to build QuPath from the source code, so if it helps your IT department could build a version themselves, rather than relying on the downloads here: https://qupath.readthedocs.io/en/stable/docs/reference/building.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1605#issuecomment-2312201023:104,certificate,certificates,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/1605#issuecomment-2312201023,2,['certificate'],['certificates']
Security,"I'm travelling and without access to a proper computer this week, but will try to write a brief description when I get back. I have used smoothed features often, but not really the other two. There is more information on smoothed features at https://github.com/qupath/qupath/wiki/Classifying-objects",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-403948004:27,access,access,27,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-403948004,1,['access'],['access']
Security,"I've repeated the issue several times but not always (I know this doesn't make sense but I don't know how to explain it). Here is an example of error message that I have been getting when it has not worked:. ```; INFO: Bio-Formats version 6.2.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.2.0) (17 ms); INFO: Loaded extension Experimental commands (9 ms); INFO: Loaded extension ImageJ extension (49 ms); INFO: Loaded extension JPen extension (15 ms); INFO: Loaded extension OpenCV extensions (2 ms); INFO: Loaded extension Rich script editor extension (161 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: 190804; WARN: Unable to obtain full image format info for file:/C:/pathtoimage***.scn (null)WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; WARN: Unable to open UriImageSupport (class qupath.lib.images.servers.openslide.OpenslideServerBuilder) support=2.5builders=1; WARN: Unable to open file:/C:/pathtoimage***.scn with OpenSlide: Couldn't locate TIFF directory for quickhash; ```. Seems like it tried to open with openslide while it should have used bioformats?. Another weird behaviour (not sure if this is intended) of the new version: if I drag an drop fluorescent images (.scn or .vsi) (not tried with chromogenic) to qupath without having pre-created a project, it only opens the label/macro image without letting me access to higher resolution images....",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518022687:1538,access,access,1538,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518022687,1,['access'],['access']
Security,"If you want help with a particular project, please post more information over at https://groups.google.com/forum/#!forum/qupath-users. I would recommend at least copy of your workflow script (https://github.com/qupath/qupath/wiki/Workflows) so we know what you have tried and/or are trying. And perhaps some small jpeg images so we know what you are looking at (if allowed by confidentiality).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/161#issuecomment-375335956:376,confidential,confidentiality,376,https://qupath.github.io,https://github.com/qupath/qupath/issues/161#issuecomment-375335956,1,['confidential'],['confidentiality']
Security,"If you wanted to use all of the images. I would generally use either a random sub-selection, or eyeball it and include as much variation as possible. Strongly positive, strongly negative, a few weird ones. Then build the training from that, and save it as a .qpclassifier. Then start a new project for the whole set of images. At that point you only need to use runClassifier(""C:\\here is my path\\here is my classifier.qpclassifier) in a script to access the classification. . The primary reason to keep the old project separate is in case you decide the classifier needs tweaking or an additional class, or whatever. Then you can go back to the classifier project, add in some new training objects, rebuild training from project, and create another classifier file. Run that file on the ""real"" project, and compare results.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530545951:449,access,access,449,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530545951,1,['access'],['access']
Security,"In the `QuPath.cfg` file of your installation, under `[JavaOptions]`, the exact line to add is; ```; java-options=--illegal-access=warn; ```; I've just tried this and it has resolved another problem that I expect to be related (the inability to add metadata to project entries in the current v0.3.0-SNAPSHOT).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717#issuecomment-829898314:124,access,access,124,https://qupath.github.io,https://github.com/qupath/qupath/issues/717#issuecomment-829898314,1,['access'],['access']
Security,"In the meantime, I see at the bottom of the panel on the left *Image list (3)*. If you double-click on that, you should see another two images - and you can double click on each of them to see how they look. From the few .scn files I've seen, the 'default' that opens up usually isn't the whole slide scan that you probably want, and it's necessary to go to the *Image list* to access it. You can also remove the Bio-Formats extension from your QuPath extensions directory, so as to let OpenSlide have a go. Maybe it has more success.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358634515:378,access,access,378,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358634515,1,['access'],['access']
Security,"Indeed I had only one of the 2 `.jar` files in the folder. Sorry about this and thanks a lot for your help. I also see 3 images. 1 is thumbnail, 1 is low-resolution pre-scan, the other is high magnification scan. The default contrasts settings are indeed very bad with these images, but it's fine once adjusted. I guess the high number of pixels with 0 values would come from empty regions... Is it possible somehow to set predefined values that would work by default on every similar files in the future? (forcing QuPath not to auto adjust would probably do the trick..., or to ignore those 0 values when adjusting the settings). These images can contain sometimes a maximum projection + z-stacks (it is the case of the biggest of the 2 images for example). Do you know if it is possible to access these z-stacks? Do you know how it would chose the stack? It seem to be taking the maximum projection by default be haven't checked enough images to be sure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409243439:792,access,access,792,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409243439,1,['access'],['access']
Security,Is an sha256 hash available for the current Qupath (0.3.2) release? (specifically the windows distribution?),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1027#issuecomment-1207982738:13,hash,hash,13,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027#issuecomment-1207982738,1,['hash'],['hash']
Security,"It certainly is, although there are different methods for doing so. It mostly involves how much overlap you want your users to have in terms of annotations.; 1. Have all images on a server, and all QuPath projects on the client computers. This means each person will have access to the same images, but will not share any cell generation or annotations. Safest and easiest to set up, but probably least useful.; 2. Map the same network drive to the image location on all client computers (say, S: drive for your server), and use the same shared QuPath directory (say, Q: drive) created for each project on every computer. This would mean that every user would have access to all images and modifications done through QuPath, but there are some fairly heavy caveats here.; 2A. There is NO file copy protection AT ALL. All users would have equal access to overwriting the current .qpdata file, and for all I know, they might attempt to save two different versions at the same time, creating a mess. ; 2B. If your .qpdata files are large (can get up to 3GB or so fairly easily with SLICs) you may have network bandwidth problems accessing both images and data files. Actually, access to the images alone could be problematic depending on your hardware. Multiple users accessing data on a single hard drive through a 1gigabit network connection can cause slowdowns in refresh rate.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/100#issuecomment-328936155:272,access,access,272,https://qupath.github.io,https://github.com/qupath/qupath/issues/100#issuecomment-328936155,6,['access'],"['access', 'accessing']"
Security,"It looks likely that the data file is corrupt; unfortunately, without access to this we would not be able to replicate the issue. You can find the file under *Open directory... &rarr; Project entry...*; it will be called data.qpdata. This issue may be related: https://github.com/qupath/qupath/issues/512; See also the reference to a .bkp file that may be created when saving. You may also simply move/delete the data.qpdata file. This will remove all image data for that image from the project, so you'd then have to generate the superpixels again.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/607#issuecomment-693259996:70,access,access,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/607#issuecomment-693259996,1,['access'],['access']
Security,"It might be... there's no built-in option to do so, but see https://github.com/qupath/qupath/issues/57#issuecomment-288491139 for possible workarounds (which in your case would really involve duplicating and merging your projects). The following script _might_ work; as far as I know it does the right thing, but I haven't exactly tested it very much:; ```groovy; // Paths to training files (here, both relative to the current project); paths = [; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training.qptrain'),; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training2.qptrain'),; ]. // Path to output training file; pathOutput = buildFilePath(PROJECT_BASE_DIR, 'training', 'merged.qptrain'). // Count mostly helps to ensure we're adding with unique keys; count = 0. // Loop through training files; def result = null; for (path in paths) {; // .qptrain files just have one object but class isn't public, so ; // we take the first one that is deserialized; new File(path).withObjectInputStream {; saved = it.readObject(); }; // Add the training objects, appending an extra number which ; // (probably, unless very unfortunate with image names?) means they are unique; map = new HashMap<>(saved.getMap()); if (result == null) {; result = saved; result.clear(); }; for (entry in map.entrySet()); result.put(entry.getKey() + '-' + count, entry.getValue()); count++; }. // Check how big the map is & what it contains; print result.size(); print result.getMap().keySet().each { println it }. // Write out a new training file; new File(pathOutput).withObjectOutputStream {; it.writeObject(result); }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/256#issuecomment-455564256:1183,Hash,HashMap,1183,https://qupath.github.io,https://github.com/qupath/qupath/issues/256#issuecomment-455564256,1,['Hash'],['HashMap']
Security,It seems YouTube changed the access settings a while ago - they should be visible again now. (Note that the wiki hasn't been updated since QuPath v0.1.2 - the current documentation is at https://qupath.readthedocs.io/ ),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/955#issuecomment-1105367880:29,access,access,29,https://qupath.github.io,https://github.com/qupath/qupath/issues/955#issuecomment-1105367880,1,['access'],['access']
Security,"It should be possible to do the conversion. In v0.2.0-m2 you can get the key information with; ```groovy; print getCurrentServer().dumpMetadata(); ```; or, very unofficially (i.e. by accessing private fields...), this:; ```groovy; def x = getCurrentServer().boundsX; def y = getCurrentServer().boundsY; ```. The next step would be to apply a translation... the affine transform [here](https://forum.image.sc/t/interactive-image-alignment/23745/9?u=petebankhead) shows one way to approach that. Although in general you can translate a ROI with; ```groovy; translated = roi.translate(-100, -200); ```; so long as the `TranslatableROI` interface is implemented (I think it always is....)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/291#issuecomment-477356033:183,access,accessing,183,https://qupath.github.io,https://github.com/qupath/qupath/issues/291#issuecomment-477356033,1,['access'],['accessing']
Security,"It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:; ```groovy; // Print the current memory situation; def runtime = Runtime.getRuntime(); double scale = 1.0/1024.0/1024.0; print 'Max memory (MB): ' + (runtime.maxMemory() * scale); print 'Total memory (MB): ' + (runtime.totalMemory() * scale); print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache; javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }; ```. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355845333:914,access,access,914,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355845333,1,['access'],['access']
Security,"It wasn't, but it will be now. I have rarely looked at the label myself, but if it is useful then I will think some more about a way to access it more quickly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/36#issuecomment-268778034:136,access,access,136,https://qupath.github.io,https://github.com/qupath/qupath/issues/36#issuecomment-268778034,1,['access'],['access']
Security,"It's a long time since I wrote that bit (and I probably should have used `Set.of(...)` instead of the `HashSet`...), but I'm not sure that adding `MOUSE_RELEASED` would be correct. The purpose of the `EventFilter` in general is to block UI events under some circumstances, e.g. when a script is running. We'd want mouse pressed & released events to be blocked (and not ignored... since ignoring them would let them through. I realise that's not entirely intuitive naming...). To make minimal changes I think you'd just need to check for the event you want and leave the rest as it was, e.g.; ```java; ...; } else if (e.getEventType() == MouseEvent.MOUSE_CLICKED && e.getButton() == MouseButton.MIDDLE) {; ...; }; ```. (Not certain I've understood, since that comment is only from reading - not running)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1313439231:103,Hash,HashSet,103,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1313439231,1,['Hash'],['HashSet']
Security,"It's not possible to try an additional classifier directly through the user interface, but that is just because the functionality the user interface gives access to is necessarily very limited. QuPath gives the tools to solve many problems like this, but constructing the specific solutions could still take a lot of work. It is hard to judge without seeing any images, but it sounds like one or more research projects to figure out how to approach the analysis, develop the techniques and write the necessary code. There is no built-in command to do all of what is needed here, but that is why it is also possible to write scripts and extensions for QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-453001561:155,access,access,155,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-453001561,1,['access'],['access']
Security,"Library(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:748); 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 13:20:08.256 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 13:20:17.509 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Calling Platform.exit();; ```. In Centos 6, I found some information about the error message ""j java.lang.Object.<clinit>()V+0"" : this may be a stack problem. I tried to change the thread stack size with -Xss in QuPath.cfg [JVMOptions], but I can not do it : . ```; 13:11:03.460 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; QuPath Error invoking method.; QuPath Failed to launch JVM; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:2982,Xss,Xss,2982,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['Xss'],['Xss']
Security,Manager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3856); at javafx.scene.Scene.processMouseEvent(Scene.java:1851); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2584); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/752#issuecomment-866148194:5151,secur,security,5151,https://qupath.github.io,https://github.com/qupath/qupath/issues/752#issuecomment-866148194,2,"['Access', 'secur']","['AccessController', 'security']"
Security,"No, it does look like a separate threading issue in my opinion. I just thought of mentioning it in case someone else experienced the same. I can only see this threading bug happen with the MacBook Pro I have access to, which is the same computer having the original OpenCV issue..",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-874159943:208,access,access,208,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-874159943,1,['access'],['access']
Security,"Ofcourse!; I see from the log now that all the objects were unclassified.; So I understand why I don't see any colours. But as the structures are quiet different I would think that it should be able to come up whit a classifier right?; ![image](https://user-images.githubusercontent.com/36917491/45081418-75871d80-b0f7-11e8-9ed9-373228da976e.png). Log-file:; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Openslide: Property not available: openslide.objective-power; INFO: Test reading thumbnail with openslide: passed (BufferedImage@77accd0e: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 200 height = 193 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for L:\basic\divg\CEMM-Lexor\SannetH\1. SANNE\Project 2. IHC Validation PICCOLO and COIN\Qupath PICCOLO\R-PICCOLO-16_CDX2-88_20x.tiff; INFO: Estimating H-DAB staining; INFO: Image data set to ImageData: Brightfield (H-DAB), R-PICCOLO-16_CDX2-88_20x; INFO: Will (re)compute TMA grid...; INFO: Processing complete in 1.26 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoot",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:879,Validat,Validation,879,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,1,['Validat'],['Validation']
Security,"Oh no, please keep the PR for now!. I'll check it out in more detail soon - but you've demonstrated that there is a concurrency bug with the measurement list. It just wouldn't have arisen if the Delaunay command wasn't buggy too. Similarly, the performance probably wouldn't have changed noticeably if the Delaunay command wasn't problematic... so this may not be a major issue in other contexts. One thing to check would be 'Add smoothed measurements' with lots of cells, since this should add a lot of measurements in parallel - but I think only one thread should be accessing each measurement list. Therefore I hope synchronization doesn't cause substantial overhead. . In any case, I think `MeasurementList` implementations *should* be thread-safe - so we should address this in either v0.5.1 or v0.6.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771:569,access,accessing,569,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1944052771,1,['access'],['accessing']
Security,"Ok. So this is intended. I guess there is no plan for a ""convert to 0.2.0"" for older projects that may benefit from the new features. Is there an easy way to access the x, y dimensions of the whole slide image without the bounding box in order to calculate the translation?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/291#issuecomment-475032443:158,access,access,158,https://qupath.github.io,https://github.com/qupath/qupath/issues/291#issuecomment-475032443,1,['access'],['access']
Security,"Okay. Will look forward to the new version.; Thank you for your help, Pete. Best regards,; Kathy Yee. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Tuesday, June 9, 2020 at 11:50 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). I'll close this issue, v0.2.1 should be available next week containing this and some other minor fixes. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-641435861&data=02%7C01%7Ckyee%40umc.edu%7C9d731bc401b64e12fc1608d80c953380%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637273182238802631&sdata=35kLxw2W6caULJz3%2BBpsA14p3ff4jQMudfZyvd2fDBk%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNE2ZSFDWOSMQL5V6SOTRVZR43ANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C9d731bc401b64e12fc1608d80c953380%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637273182238812636&sdata=euPaoon04N%2F82Kf22ZIMOfEzWDQjc4LmxotHQSNCcaA%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-641438041:1403,authoriz,authorized,1403,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-641438041,1,['authoriz'],['authorized']
Security,"One more thing: should we expose the builders in `qupath.lib.images.servers.ImageServers.*` so that you can test what kind of `ImageServer` is being used, if the builder is available?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2278093823:26,expose,expose,26,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2278093823,1,['expose'],['expose']
Security,"One of the things I have often preferred about QuPath is how neatly it arranges most of the windows into a single UI, where I don't have to fight with ""is what I want to use on top and accessible"" like with Fiji and MicroManager etc. . If implemented, there really should be ways to quickly and easily organize the windows, like the Tile and Cascade options in Fiji. > Is there a need to have the same image open in multiple viewers?. This has been one of the things I have often wanted to be able to do for multiplex images (along with synchronize for panning). Having the same image open, but with different sets of channels visible in each MultiView. . It was something I remember being able to do in earlier versions that has since been removed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708749225:185,access,accessible,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708749225,1,['access'],['accessible']
Security,"Preview & QuPath both look ok to me:. ![Screenshot 2020-10-23 at 20 49 48](https://user-images.githubusercontent.com/4690904/97047805-6bdc0080-1571-11eb-8a78-f2ec9652945c.png). I do have a homebrew install as well:. ![Screenshot 2020-10-23 at 20 52 12](https://user-images.githubusercontent.com/4690904/97048049-ba899a80-1571-11eb-8751-6dc0394469e5.png). ----. Thanks very much for the link, I'll check your build scripts - I think it is already safe to say they are a lot more sophisticated than anything used for QuPath! I'm afraid I'm one of the people who has spent too long with Java and Python... Do you think there would be any sense in trying to include libvips with QuPath? We could put some work into that from our side - especially if it would help us incorporate OpenSlide more reliably into QuPath while also giving access to some of libvips' other functionality (like faster image pyramid-writing?) - but I'm not sure if there are reasons that's a bad idea.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715571233:829,access,access,829,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715571233,1,['access'],['access']
Security,"QuPath does not include any code that directly relates to the GPU - everything happens through OpenCV/JavaCPP (and sometimes also PyTorch/TensorFlow/DJL). If you search for `the provided PTX was compiled with an unsupported toolchain` you should find lots of discussions separately from QuPath; it seems that the issue is normally related to the driver. I tried to replicate the issue with the only Windows computer I have access to (including a GeForce 1060) and could not - it runs without errors, and `DnnTools.isCudaAvailable()` returns true. > Given that issue https://github.com/qupath/qupath/issues/841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?. I don't think that can be relevant here. I'm not sure that there is any bug here that can be fixed within QuPath. I have seen such error messages before, but the solution was always to update my graphics card driver. Have you tried this?. Note that QuPath v0.4.0 gives a range of options for deep learning, but CUDA incompatibilities will mean that probably not all can work at once (e.g. I could get PyTorch with GPU acceleration today by installing CUDA 11.7, but TensorFlow seems to require 11.3... I'm not sure there's a combination that gets both working together). I don't see that there's really anything much more we can do apart from simply removing the option of GPU acceleration altogether and not documenting it as an option - but that seems a shame when often it does work. > I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Because QuPath doesn't directly access the GPU, please check the .jar files within each installation. I don't know what the problem could be, unless it is somehow related to the inclusion of some Deep Java Library dependencies - or if you have other extensions installed that are",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127:423,access,access,423,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127,1,['access'],['access']
Security,"QuPath tries to have as few customizations as possible for specific file formats (almost none...), relying only on what OpenSlide and Bio-Formats provide. If images in the same format end up opening differently in QuPath, then it is most likely because there is something in the file that causes OpenSlide or Bio-Formats to handle them differently*. The Bio-Formats and OpenSlide teams have done an incredible job in support many formats to date, but of course they are under no obligation to do so. Unlike the software developed by the vendors themselves, who have access to the full details of their proprietary formats, open projects often need to make educated guesses to try to figure out how to read the files. In my opinion, if someone has a proprietary file format then it should be up to them to help ensure it is supported in open software... _if_ they want that to be possible. It's perfectly legitimate for them to decide that they don't want their format to be open, but in that case potential customers for whom this matters need to find this out.... ideally before paying a lot of money for something they will be unable to use fully. Presumably Bio-Formats don't have a specification for the .scn format (on the website it is listed as [something they would like to have](https://docs.openmicroscopy.org/bio-formats/6.0.1/formats/leica-scn.html)) and they have also [blogged on mrxs](http://blog.openmicroscopy.org/file-formats/community/2016/01/06/format-support/). It seems really unfortunate that formats that are common in the research community aren't always well supported in open software. Ultimately it's really only the people behind the formats that can change this... I hope that greater awareness of the underlying reasons might help the research community exert pressure in the right direction - in the way that the Bio-Formats blog post describes. >*-Although it is always possible that there is a bug in QuPath causing the trouble... but if some work and some don't, wit",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/300#issuecomment-483601172:566,access,access,566,https://qupath.github.io,https://github.com/qupath/qupath/issues/300#issuecomment-483601172,1,['access'],['access']
Security,"Slightly off QuPath- I don't know what scanner you are using, but if you have access to it, I think most should have a brightfield compensation image adjustment setting (it takes a picture of a blank slide and adjusts). We had some yellowing in ours after some software updates, and that took care of the background.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282609510:78,access,access,78,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282609510,1,['access'],['access']
Security,"So I confirm that all access to any mutable variable should be synchronized. From ""Concurrency in Practice"":. > Whenever more than one thread accesses a given state variable, and one of them might write to it, they all must coordinate their access to it using synchronization. I can refactor `NumericMeasurementList` to make it thread-safe.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478:22,access,access,22,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1941504478,3,['access'],"['access', 'accesses']"
Security,"Sorry @MichaelSNelson I entirely missed this until @finglis mentioned it :). > One of the things I have often preferred about QuPath is how neatly it arranges most of the windows into a single UI, where I don't have to fight with ""is what I want to use on top and accessible"" like with Fiji and MicroManager etc.; > ; > If implemented, there really should be ways to quickly and easily organize the windows, like the Tile and Cascade options in Fiji. I strongly agree - if you try https://github.com/qupath/qupath/pull/1318 I'd be curious as to whether you think it gets the balance ok. > > Is there a need to have the same image open in multiple viewers?; > ; > This has been one of the things I have often wanted to be able to do for multiplex images (along with synchronize for panning). Having the same image open, but with different sets of channels visible in each MultiView.; > ; > It was something I remember being able to do in earlier versions that has since been removed. I don't remember that ever being there by design, but it certainly could have been there as a bug :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1713712459:264,access,accessible,264,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1713712459,1,['access'],['accessible']
Security,"Thank You for the quick response, will do!. > On 22 Mar 2018, at 15:56, Svidro <notifications@github.com> wrote:; > ; > If you want help with a particular project, please post more information over at https://groups.google.com/forum/#!forum/qupath-users <https://groups.google.com/forum/#!forum/qupath-users>; > I would recommend at least copy of your workflow script (https://github.com/qupath/qupath/wiki/Workflows <https://github.com/qupath/qupath/wiki/Workflows>) so we know what you have tried and/or are trying.; > ; > And perhaps some small jpeg images so we know what you are looking at (if allowed by confidentiality).; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/161#issuecomment-375335956>, or mute the thread <https://github.com/notifications/unsubscribe-auth/Aj62c1nfD8q8Q2p2iSVzMVUc7IyXMSaWks5tg7uagaJpZM4S3MDO>.; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/161#issuecomment-375336673:610,confidential,confidentiality,610,https://qupath.github.io,https://github.com/qupath/qupath/issues/161#issuecomment-375336673,1,['confidential'],['confidentiality']
Security,"Thank you Pete. Kathy. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:11 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). This looks like a simple bug, albeit one that has existed for some months at least - weirdly without being reported before. Should be fixed in the next minor release, but I first need to check it in more detail. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640758278&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716768343&sdata=I6ByW3NeHWrDm7VTBAvpv2MpkhL6TLrhVIKQdriYgAA%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNEYF5JGJNVJRBCHLL3DRVULSZANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716773334&sdata=3J8BiWMPaBCV6Q7lr8IOEGiTxaRqEaq2AUvxwH2crGY%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640759146:1427,authoriz,authorized,1427,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640759146,1,['authoriz'],['authorized']
Security,"Thank you both for your response. I would preferably like to run the software on the mac but have access to PC too if this is more suitable . The original files I wanted to work with were TMAs with multiple scenes but I cannot even open a jpg file. I am at home now and I am on my mac and it is still not opening the jpg files. . Thank you for looking into addressing the qupath bio-formats extension. In the meantime, should I need to download any extensions to run the software on the mac? I know in your tutorial for start ups you suggest you do but I have had no joy with this . Thank you again",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/135#issuecomment-357053806:98,access,access,98,https://qupath.github.io,https://github.com/qupath/qupath/issues/135#issuecomment-357053806,1,['access'],['access']
Security,"Thanks @MichaelSNelson! The main idea here is to support adding text but without really specifying what that has to be... so someone could use it in the way you describe for clustering, but could use it for something else entirely. The use cases I'm thinking of here are really; * teaching, where an object annotation could be some useful explanatory text; * recording thoughts... where an object (or full image) annotation could be some comment on the image or analysis, e.g. *'excluded because of quality issues'*, or *'annotated by Pete on a rainy Tuesday'* etc. But it could also be a link to a website, a GitHub repository, or even even the text for a script used for the processing. For these, it needs to display nicely - hence the html support. > Extra intention: make it possible to export a summary markdown report, including image thumbnails. This could be used to give a portable, readable summary of an entire project in html. That could be handy, e.g. when asking a pathologist to QC a lot of annotations. For analysis-oriented things like the clustering application, it's already technically possible to use; ```groovy; getSelectedObject().storeMetadataValue('My key', 'My value'); fireHierarchyUpdate(); ```; currently, but only because of Groovy's laxity (the methods are `protected`) - and it won't show up in any results tables. It will also have all the detections-suddenly-use-a-whole-lot-more-memory issue, so *really* isn't to be encouraged at the moment. Nevertheless, exposing access to the arbitrary metadata map an official part of the API could be another new feature.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703:1502,access,access,1502,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005#issuecomment-1180644703,1,['access'],['access']
Security,"Thanks @charleshugo QuPath's object classifiers aren't intended to be trained with so many cells. I would strongly recommend using far fewer and smaller training annotations. The actual `RTrees` classifiers are implemented in C++ (by OpenCV). After QuPath has generated the training data, the training itself is performed inside OpenCV and in accessible to QuPath. As far as I am aware, this is single-threaded in OpenCV and cannot be changed in QuPath. Similarly, JSON generation and parsing is performed with the help of the Gson library, so performance depends somewhat on Gson. GeoJSON is a standard for representing geometries; I think it solves a different problem from Parquet. In QuPath, it is primarily intended to facilitate exchanging annotations, where choosing an existing open format is strongly desirable for interoperability (rather than trying to define a new standard others have to follow). Performance should not be an issue with several hundred/thousand objects (the common scenario), but it will inevitably be slow to export to export millions of cells as GeoJSON. If you don't need geometry information, you could export much more efficiently features/classifications/centroids only (e.g. through [a measurement table](https://qupath.readthedocs.io/en/stable/docs/tutorials/exporting_measurements.html)). Alternatively, if you need a highly optimized solution or a custom format then you can implement one using a QuPath script or extension. I'd like to close this issue because I think there is no bug in QuPath. The best place for discussing the use of the software or suggested improvements is http://forum.image.sc/tag/qupath. >If you'd like to add a separate GitHub issue for the minimized windows, please fill in the bug report template. I have seen some issues on Ubuntu with Windows not being in the correct place, but not on Windows or macOS. I cannot tell if it is a problem that QuPath can solve, or if it is an issue in JavaFX. But the issue I have seen does not mak",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-950106875:343,access,accessible,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-950106875,1,['access'],['accessible']
Security,"Thanks a lot for your answer. So running the following code when opening a new image is relatively painless:; `// Get access to the display info for each channel; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().getAvailableChannels(). // Set the range for the 4 channelsf; channels[0].setMinDisplay(0); channels[0].setMaxDisplay(255); channels[1].setMinDisplay(0); channels[1].setMaxDisplay(255); channels[2].setMinDisplay(0); channels[2].setMaxDisplay(255); channels[3].setMinDisplay(0); channels[3].setMaxDisplay(255). // Set the LUT color for the first channel & repaint; channels[0].setLUTColor(0, 0, 255); channels[1].setLUTColor(255, 255, 255); channels[2].setLUTColor(0, 255, 0); channels[3].setLUTColor(255, 0, 0). // Ensure the updates are visible; viewer.repaintEntireImage(). // Usually a good idea to print something, so we know it finished; print 'Done!'`. Regarding the pink staining actually it doesn't look like it's the label. It might just be a very low resolution scan, probably brightfield used by the scanner to detect the coverslip and slide.; Do you think it would need a Bio-Formats update for QuPath to access the label image? Or is this something that could be implemented directly in QuPath? The label must be somewhere in the `.scn` as I can see it if I open the image in imageJ, or other softwares (Definiens, Halo, ImageScope...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409927029:118,access,access,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409927029,2,['access'],['access']
Security,"Thanks for the detailed response Peter. That's a great starting point. ; As a follow up, is there a good place to learn about how to access QuPath data from the groovy scripting interface? Perhaps a list of the available data stored in various objects and the methods that can be used to access them? The examples are a great start, and have been very good at interpreting the kinds of things we're hoping to do, but it can be hard to go beyond them (short of diving deeper into the QuPath code itself).; The software has been very impressive so far - great interface and the scripting capability makes it feel quite extensible. Best,; Colin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-273939189:133,access,access,133,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-273939189,2,['access'],['access']
Security,Thanks for the reply. I think I actually figured out why it wasn't working before. The refresh method's accessibility was changed in javafx from Java 8u60 and onwards. I didn't realize but I was running an older JRE on Eclipse and thus the compilation error.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/87#issuecomment-316820068:104,access,accessibility,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/87#issuecomment-316820068,1,['access'],['accessibility']
Security,"Thanks for your answer, no worries.; I have additional questions regarding .scn files:. - Using the following script:; `// Get access to the display info for each channel; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().getAvailableChannels(); // Set the range for the 4 channelsf; channels[0].setMinDisplay(0); channels[0].setMaxDisplay(255); channels[1].setMinDisplay(0); channels[1].setMaxDisplay(255); channels[2].setMinDisplay(0); channels[2].setMaxDisplay(255); channels[3].setMinDisplay(0); channels[3].setMaxDisplay(255); // Set the LUT color for the first channel & repaint; channels[0].setLUTColor(0, 0, 255); channels[1].setLUTColor(255, 255, 255); channels[2].setLUTColor(0, 255, 0); channels[3].setLUTColor(255, 0, 0); // Ensure the updates are visible; viewer.repaintEntireImage(); // Usually a good idea to print something, so we know it finished; print 'Done!'`. I tried ""Run for Project"" to get the settings applied on all the images within the project, it seems to be doing it as the prompt iterates the list of images, but when I open another image of the project, the view settings remain unchanged... Is there a trick?. - If I open a batch of images as a project, QuPath opens all images, including the pink one and the low res scan. I then delete these low-res images one by one as I am not able to press ctrl+click to select several at the same time and then deleting them all. Would there be a quicker way?. - some images have different ""high resolution"" scans because several regions have been selected during the slide scan. When opening chromogenic images, there is no problem and QuPath handles it well within a single image. But with fluorescent images, they appear as individual images in the image list... would it be possible to have them all opened within the same image by any chance?. - regarding your recent blog post, the script to update measurement names does not work with these images (unless there is something to edit in the script?)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-411572502:127,access,access,127,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-411572502,1,['access'],['access']
Security,"Thanks!. * Where should we place the `ReaderPool` and `ReaderWrapper` classes? Currently there are in the `servers.bioformats` package, but they are not specific to bio-format. `ReaderPool` seems to be currently - it still has quite a lot of `loci.*` imports, which would prevent it from moving to a more core QuPath module. I think that's fine because it makes sense for the OMERO extension to depend upon the Bio-Formats one - at least for raw pixel access via ICE, since many other dependencies are shared. And if we follow the advice of [accessing pixels by Zarr](https://forum.image.sc/t/java-gateway-authentication-using-the-json-api/84307/8) then we might still have a Bio-Formats dependency via `OMEZarrReader` [as described here](https://forum.image.sc/t/getting-started-with-ome-zarr-in-java/85333). * Should I refactor the BioFormatImageServer to use the best practises we have been discussing? I see this file has a few warnings and the constructor takes 500 lines. Yes, that would be good. But we can merge sooner if it helps. * I will now try to use `ReaderPool` and `ReaderWrapper` in the OMERO extension, so I may have to change a few things if I realize that theses classes are not completely generic. I don't think you need to worry too much about making them very generic - just to work well enough for Bio-Formats and OMERO. They both have a quite different way of returning pixel arrays that I haven't seen elsewhere. Based on the recent forum discussion, I have the impression that the current working Zarr support for Java uses [n5-zarr](https://github.com/saalfeldlab/n5-zarr), which in turn relates to (I think...) imglib2. Since we already plan to explore imglib2, there's a chance that a lot of QuPath's `ImageServer` and image reading code may be replaced if we find better approaches with imglib2.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139:452,access,access,452,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1691869139,3,"['access', 'authenticat']","['access', 'accessing', 'authentication-using-the-json-api']"
Security,"Thanks!. For the TMA data viewer troubles, to be honest I entirely forgot that the *Import from current project (experimental)* option is there... it probably isn't a very good idea. I'd suggest doing the following instead:; * Use *File &rarr; Export TMA data* for each of your images, using the same output directory (it's also scriptable); * Drag the export directory into the TMA data viewer. That way, the data viewer doesn't need to bother with QuPath objects (potentially hundreds of MB per TMA), nor with accessing the whole slide scans. Rather, it will work with small, exported JPEGs and parsed text files, and hopefully behave much better.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/117#issuecomment-343394860:512,access,accessing,512,https://qupath.github.io,https://github.com/qupath/qupath/issues/117#issuecomment-343394860,1,['access'],['accessing']
Security,"Thanks, I remain confused because I can see you're using https://github.com/BIOP/qupath-extension-cellpose - which is developed separately by another group. That's where all the CellPose/Miniconda things arise, since they aren't part of QuPath. Your steps don't mention installing the extension, miniconda or Cellpose though, so I can't tell when or why any problem occurs. Also, if the files are accessible via Windows Explorer / the file chooser then I also don't know see where this would be a QuPath problem... so I remain unclear that there is any bug here, at least in QuPath. @lacan may be able to help from the CellPose extension side, or the community forum may be a better place for the discussion that spreads across different software: https://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1302320391:397,access,accessible,397,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1302320391,1,['access'],['accessible']
Security,"Thanks, could you describe in more detail what this fixes?. Can you provide any minimal example of the bug - ideally [with a unit test](https://github.com/qupath/qupath/blob/main/qupath-core/src/test/java/qupath/lib/objects/classes/TestPathClass.java)?. Based on the other thread I tried running; ```groovy; pc1 = QP.getPathClass(""Right""); pc2 = QP.getDerivedPathClass(pc1, ""hello"").getParentClass(); println pc1 === pc2; println pc1.hashCode(); println pc2.hashCode(); ```; but that behaved properly, so I'm not sure what exactly is wrong.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670011437:434,hash,hashCode,434,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670011437,2,['hash'],['hashCode']
Security,"Thanks, that would be good - it sounds like it would be difficult and time-consuming for anyone else to replicate the problem, and might not be possible if it turns out to be something more specific to your system. So solving this will likely require any any info you can get from VisualVM's CPU sampling. I'll try to write up info about VisualVM + QuPath at some point, but there are brief instructions at https://forum.image.sc/t/designing-a-qupath-workstation/54849/14. QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches. v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this *could* potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't really see how or when that happened. For slightly more info in the log, you can switch the log level in the preferences from `INFO` to `DEBUG`. Not sure if that will help narrow things down or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326026753:766,access,access,766,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326026753,2,['access'],['access']
Security,"Thanks, the screenshot suggests it's the `Files.exists()` check that is so slow. QuPath is probably calling this quite a lot, because it's usually really inexpensive - and *not* calling it leaves open the (admittedly small) possibility that the file has been deleted between calls. I could try to cut down on this, but I'm skeptical that it will help because it sounds a lot like it's only the first call that is slow. In fact, I'd be curious as to whether accessing each file is slow or just the first one on the disk. That should be relatively easy to test by creating a much smaller project and comparing the speed. Either way, it sounds like the problem lurks in the realm of Java, the operating system, and the hard drive. I'm not sure if there's much can be done about it in QuPath. I'd suggest:. * try accessing the images some other way before opening them in QuPath (e.g. through Windows Explorer), in case 'pre-warning' the OS is somehow useful; * try copying the images to a local drive (if possible); * try timing a simple script with a file on the same disk, e.g. ```groovy; import java.nio.file.*; var path = '/path/to/some/file'; println ""Exists: ${Files.exists(Paths.get(path))}""; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045:457,access,accessing,457,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045,2,['access'],['accessing']
Security,"Thanks, this is an interesting idea and certainly seems to help in the scenario you describe. I'm apprehensive about merging quickly because it would be quite a significant change, and add complexity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a cl",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:939,access,access,939,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,1,['access'],['access']
Security,"Thanks, this script only works because Groovy permits access to package-private classes/constructors/methods, e.g. [`ChannelTransformFeatureServer`](https://github.com/qupath/qupath/blob/8136994f8e6ef2f3a33a72467fd7c71c35977ad6/qupath-core/src/main/java/qupath/lib/images/servers/ChannelTransformFeatureServer.java#L52) and [`ExtractChannel`](https://github.com/qupath/qupath/blob/8136994f8e6ef2f3a33a72467fd7c71c35977ad6/qupath-core/src/main/java/qupath/lib/images/servers/ColorTransforms.java#L262). So this couldn't be used (easily) from Java. In my mind, `TransformedServerBuilder` was intended to be the main way to create a new server that applies transforms so that users don't need to learn about other classes. It also limits the main source to [one page on the javadocs](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html). Similarly, static methods of `ColorTransforms` can be used [here](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html). To further simplify the script, I'd suggest concatenating lists rather than streams - since this is likely more intuitive for more people. And you can use [`server.nChannels()`](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html#nChannels()) instead of needing to query the metadata and get the size of the channels list. So you might use; ```groovy; def channels = getCurrentServer().getMetadata().getChannels().collect {c -> ColorTransforms.createChannelExtractor(c.name)}; channels += [ColorTransforms.createLinearChannelCombination(coeffs)]; ```; but I think something like this is more readable to more people; ```groovy; def channels = []; for (int c = 0; c < server.nChannels(); c++); channels.add(ColorTransforms.createChannelExtractor(c.name)); channels.add(ColorTransforms.createLinearChannelCombination(coeffs)); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260153194:54,access,access,54,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260153194,1,['access'],['access']
Security,That is the file in question:; https://box.med.uni-heidelberg.de/s/qjr7vvn7P9akLMx; Password for access: QuPathrocks1!; It was created using Olympus' cell^F software and is a so-called SIS-TIFF (Olympus' own TIFF variant),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/573#issuecomment-664551831:84,Password,Password,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/573#issuecomment-664551831,2,"['Password', 'access']","['Password', 'access']"
Security,"The core images are loaded in a background thread, and there is a 5 second timeout associated with this - see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L254). One possibility is that the timeout isn't generous enough in your case, and the cores are not being loaded fast enough. I don't know why that would be the case... it might be to do with the computer specifications, where the image is located (a network share?), or the access time required for the specific file format. Another option is that there are just too many cores. That is my best guess, since the scrollbar thumb on the right in your screenshot looks very small. There is a limit to the size of the cache used to store the TMA cores to reduce the risk of memory errors, see [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMAGridView.java#L133) for the location in the code. Currently there is no way to increase the size of the cache through the user interface to support more cores in the grid view. Although, as is often the case, there is a way through a script. You could try running this to double the cache size to see if it helps.; ```groovy; qupath.lib.gui.commands.TMAGridView.MAX_CACHE_SIZE = 500; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/96#issuecomment-326105429:507,access,access,507,https://qupath.github.io,https://github.com/qupath/qupath/issues/96#issuecomment-326105429,1,['access'],['access']
Security,"The files that mismatch are things like `C:\Users\alano\Application Data`, which doesn't seem to exist, at least when I paste it into explorer I get `[directory] is not accessible. Access is denied`, and they're not visible when viewing the parent dir in explorer or cmd. Somewhat bizarre behaviour, can chalk it up to Windows I think",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691770235:169,access,accessible,169,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691770235,2,"['Access', 'access']","['Access', 'accessible']"
Security,"The minus key on my main keyboard and the minus key on my number pad both cause; zooming-in / increased magnification. Both of my + keys don’t do anything. From: MicroscopyRA <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 1:26 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). Right, that was the first part, sorry for lack of clarity. Num lock on or off has no impact. ""The + and - keys no the num pad do nothing when I use them."". —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640795671&data=02%7C01%7Ckyee%40umc.edu%7C3f6606e691e84856b92008d80bd9728c%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272375844340509&sdata=PdIW4tJzmYbxH24BlWci00hk0WXzvZf6SoWFDKxEnks%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNEZE2DLPTDWWMJINGMLRVUUM3ANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C3f6606e691e84856b92008d80bd9728c%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272375844350502&sdata=80Q8pB3Tqf9csexrlxWph406VYzvfheP775lDTJ9y6Q%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640799956:1511,authoriz,authorized,1511,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640799956,1,['authoriz'],['authorized']
Security,"There are many problems with groovy script processing, so I read the source code of the qupath software. And call the java interface to process the image. I want to save the analyzed image, but I failed, I don't know how to deal with this problem, so I hope to get your help.; -------------------------------; import java.awt.image.BufferedImage;; import java.io.IOException;; import java.util.Hashtable;; import java.util.SortedMap;. import javax.imageio.spi.ImageWriterSpi;. import org.controlsfx.control.SnapshotView;. import ij.plugin.JpegWriter;; import javafx.scene.SnapshotResult;; import qupath.lib.gui.ImageWriterTools;; import qupath.lib.gui.QuPathGUI;; import qupath.lib.gui.commands.SaveViewCommand;; import qupath.lib.gui.prefs.PathPrefs;; import qupath.lib.images.ImageData;; import qupath.lib.images.servers.ImageServer;; import qupath.lib.images.servers.ImageServerProvider;; import qupath.lib.io.ImageWriter;; import qupath.lib.regions.RegionRequest;; import qupath.lib.roi.interfaces.ROI;; import qupath.lib.scripting.QP;; import qupath.lib.scripting.QPEx;. public class test01 {; 	private static QuPathGUI qupath;; 	private static boolean wholeWindow;; 	; 	public void mydetection() throws InterruptedException {; 		// TODO Auto-generated method stub; 		String imagePath=""D:\\Overview\\9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg"";; 		ImageServer<BufferedImage> server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; 		ImageData imageData = new ImageData<>(server);; 		String bind = ""{\""threshold\"": 162, \""requestedDownsample\"": 1.0, \""minAreaPixels\"": 100000.0, \""maxHoleAreaPixels\"": 500.0, \""darkBackground\"": false, \""smoothImage\"": true, \""medianCleanup\"": true, \""dilateBoundaries\"": false, \r\n"" + ; 				"" \""smoothCoordinates\"": true, \""excludeOnBoundary\"": false, \""singleAnnotation\"": true}');"";; 		boolean detection = false;; 		try {; 			detection = QP.runPlugin(""qupath.imagej.detect.tissue.SimpleTissueDetection2"",bind);; 		} catch (Exception e) {; 			",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420269884:394,Hash,Hashtable,394,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420269884,1,['Hash'],['Hashtable']
Security,"There is really not enough information here to answer, and since it does not relate to a bug https://forum.image.sc/tags/qupath would be the right place to post this question. My guess is that your images may have moved / be on an external disk that is not accessible when you try to reopen the m2 project using QuPath v0.2.0-m2. But I would need to know what error messages are displayed, and if anything appears under *View &rarr; Show log*. It is not expected that a project created using m2 will open with m8 because of large changes between milestones; specifically I recall the project structure changed from m2 to m3 (I don't remember if there were subsequent changes). There is a script to migrate old projects from m2 to m3, but use with caution (i.e. with backups) and be sure to read the description at the top if you use it: https://gist.github.com/petebankhead/8dfbaf2de91f6432b79c7678e2997d6a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/388#issuecomment-567854079:257,access,accessible,257,https://qupath.github.io,https://github.com/qupath/qupath/issues/388#issuecomment-567854079,1,['access'],['accessible']
Security,"This commit aims to fix the use of non-default directories: https://github.com/petebankhead/qupath/commit/8d7693b22c79446b0d92b6dac1afab6ccb2b0745. Note that you can set the directory in the preferences, but search for 'user' rather than 'extensions'. Note that this is in a particular branch of my fork; I plan to sanitize the various branches/forks in the near future to make it a bit clearer where everything is/should be.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476286936:315,sanitiz,sanitize,315,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476286936,1,['sanitiz'],['sanitize']
Security,"This is certainly possible in a script, since the coordinates are stored at that level. But the details depend on the kind of regions you are drawing, and how you need them to be exported. For example, you can get the bounding box of any shape like this:; ```groovy; def roi = getSelectedObject().getROI(); print([roi.getBoundsX(), roi.getBoundsY(), roi.getBoundsWidth(), roi.getBoundsHeight()]); ```. That is really all you need to represent a rectangle or an ellipse. For a line, you could get the end points:; ```groovy; def roi = getSelectedObject().getROI(); print([roi.getX1(), roi.getY1(), roi.getX2(), roi.getY2()]); ```. Or, if you have a polygon then this will print the points:; ```groovy; def roi = getSelectedObject().getROI(); print roi.getPolygonPoints(); ```. As far as I recall, you can also use the final option for other shapes. But beware of complex 'areas', which could be composed of multiple polygons and include holes etc. Extracting and interpreting the coordinates for these is somewhat more difficult. If you need more than this, I would recommend looking at the scripting documentation on the wiki, and then exploring in more detail the code for each of the ROI (region of interest) classes to see how their points are stored and accessible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-324421783:1258,access,accessible,1258,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-324421783,1,['access'],['accessible']
Security,"This is certainly possible, although will involve writing some Python and/or Groovy code. The basic process is:. 1. Get your contours (somehow) into arrays of x and y coordinates accessible to QuPath. 2. Create ```PolygonROI``` objects from each pair of coordinate arrays. If polygons are not sufficient, and you rather need complex shapes with holes, it is also possible - but considerably more awkward. 3. Create some kind of ```PathObject``` for each ```PolygonROI```; probably a ```PathDetectionObject``` (if there will be a lot of them) or ```PathAnnotationObject``` (if there won't). There is some more information [here](https://github.com/qupath/qupath/wiki/Types-of-object). 4. Add each ```PathObject``` to the object hierarchy in QuPath so that it can be displayed. There is some information relevant to the last 3 steps at https://github.com/qupath/qupath/issues/61. For the first step, there are a few different options:. * If you are much more comfortable with Python rather than Groovy/Java, then you could try one of the methods of using Python with QuPath described [in the Wiki](https://github.com/qupath/qupath/wiki/Working-with-Python). Conceivably, you might even be able to run your whole code that way… or else just parse the results exported in a Python-friendly format. * You could try using OpenCV via its Java bindings via Groovy via QuPath. If you set things up as described [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) then the dependencies should be accessible. * You could write a simple Python script to export the coordinates for each contour, and then write a simple Groovy script to parse this and bring the coordinates into QuPath. Of these, I would choose the last option. There may be some merit in the others, but I expect they would be more complicated to set up. There are lots of tricks and shortcuts in Groovy that may help with the parsing, e.g. in order to extract floating point coordinates (such as those required to cons",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-307854757:179,access,accessible,179,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-307854757,1,['access'],['accessible']
Security,"This question is too broad to answer well... QuPath is primarily a desktop application, which you can use to analyze whole slide images - interactively and by scripting. Once you've established what you want to do, you can batch process it. To make QuPath accessible from IntelliJ, for Groovy scripting or potentially other reasons, see https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ. If this doesn't answer your question, please describe more fully what exactly you want to do.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/192#issuecomment-409096361:256,access,accessible,256,https://qupath.github.io,https://github.com/qupath/qupath/issues/192#issuecomment-409096361,1,['access'],['accessible']
Security,This works great! Should be a very helpful accessibility feature for colorblind folks :),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1669#issuecomment-2393449796:43,access,accessibility,43,https://qupath.github.io,https://github.com/qupath/qupath/pull/1669#issuecomment-2393449796,1,['access'],['accessibility']
Security,"True, lambdas are the only incompatibility that has particularly bothered me at times & required adjusting the code, although it's not too tricky: http://groovy-lang.org/differences.html#_lambdas; Other differences (e.g. with `equals` or numbers becoming `BigDecimal` if not explicitly made something else) can be a bit troublesome, but more so when using most Groovy-specific features. Fortunately, it looks like the lambda situation will change with Groovy 3.0: http://groovy-lang.org/releasenotes/groovy-3.0.html. With implementing `QuPathExtension`, the `META-INF/services/qupath.lib.gui.extensions.QuPathExtension` part is crucial (see [here](https://github.com/qupath/qupath/wiki/Creating-extensions), or [this](https://docs.oracle.com/javase/tutorial/ext/basics/spi.html#implement-the-service-provider) may also help - since the general idea isn't QuPath-specific). But if you just want to access the contents of the .jar from the script, then this shouldn't be necessary. It sounds like the problem you are seeing happens inside the imported code, because if I import something that doesn't exist then at least the errors are displayed (and sensible), e.g.:; ```groovy; print 'hello'. import something.that.does.not.exist; ```; gives me; ```; ERROR: Error: startup failed:; Script18.groovy: 4: unable to resolve class something.that.does.not.exist; @ line 4, column 1.; import something.that.does.not.exist; ^. 1 error; ```. When that happens, QuPath doesn't handle such exceptions very well and I've also seen the multiple-logging problem occasionally when things go badly wrong. A recent fix I made on my fork should help address this: https://github.com/petebankhead/qupath/commit/c3f8fd49f8c14dbf7956490d2fa4f79d8e11b057. Finally, there are different ways to integrate Groovy into a Java application: http://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html; Currently, QuPath goes down the _JSR 223 javax.script API_ route to give (potentially at least) support for di",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450918869:897,access,access,897,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450918869,1,['access'],['access']
Security,"Very good point, I hadn't ever really considered those two things together. In my mind, 'Import objects' was always associated with trying to read objects that are somehow associated with the source image (e.g. ROIs stored as an overlay for ImageJ TIFF, objects from an OMERO image). The ability to add images from another project, on the other hand, was developed separately and intended to always import all the data from that project. This means the entire image data, including stain vectors etc. The object hierarchy comes along with that. I imagined that, if anyone wanted to add the images without objects, they would just add the images in the 'normal way' and not via a project. But I suppose that assumes that projects don't contain very many images scattered across different disks, or accessed via OMERO or elsewhere. In any case, I agree that the current behavior is confusing in the case you describe, and should probably be changed. But I'm not sure if it should be a change of behavior, or a change of documentation + the addition of a new command?. Some ideas:. 1. Don't import *any specific `ImageData`* from a project when the ""Import objects"" checkbox is unselected. This would exclude objects *and everything else*. Potentially also including custom metadata, channel names, stain vectors etc.; * In this case, it would probably be best to rename the checkbox and document this behavior; 2. Keep the behavior as it is, but document it better. A user can always run a one-line script to delete all the objects later.; * I can imagine there might be use cases where someone wants to create a new project with the same images, but no associated data. Exporting the image list and reimporting it should support those cases.; * There is a related issue to this; * https://github.com/qupath/qupath/issues/1177; 4. Add an entirely separate command to import images from another project and/or prompt the users when importing from a project. This would give more control over what exactly",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1259#issuecomment-1498662837:797,access,accessed,797,https://qupath.github.io,https://github.com/qupath/qupath/issues/1259#issuecomment-1498662837,1,['access'],['accessed']
Security,"We've made some progress on improving OpenSlide support, but there are a few issues that will need sorting out before release. I'll try to summarise what I've been working on in a semi-lucid way... ## Java-C interface. We plan to switch from JNI to JNA to wrap OpenSlide. This seems to reduce the complexity of loading openslide, and has minimal overhead for us, as well as probably making it easier to access new OpenSlide features. ## Build process. I have forked and modified `openslide-winbuild` to try to make binaries with fewer dynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 131",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:403,access,access,403,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['access'],['access']
Security,"Well this turned into something rather a lot more complicated than I'd hoped... Attempted fix in https://github.com/petebankhead/qupath/commit/c331ba1a79223311f31e82d33482dc3102f99480. What *should* happen is that behavior remains the same, however unbeknown to most the Bio-Formats server now accepts arguments of the form `[""--bfOptions"" ""key=value""]` that will be passed to the reader. The 'easy' (sort of) way to access these is via the following script:; ```groovy; def bfOptions = qupath.lib.images.servers.bioformats.BioFormatsServerOptions.getInstance(); bfOptions.setReaderOptions([""zeissczi.autostitch"": ""false""]); ```; This will set the option for the current QuPath session; to reset it, either restart QuPath or call `options.clearReaderOptions()`. The necessary autostitching flag should then be retained if the image is added to a project. Because this happens regardless of whether the flag is relevant (e.g. it's for a totally different file type) it's best to clear the options when they aren't needed. If you can build QuPath from the same branch as the commit, please let me know if you find any problems. > Sidenote: Thanks to @melvingelbard you should also see a Bio-Formats series chooser when opening images even outside a project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-582323621:417,access,access,417,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-582323621,1,['access'],['access']
Security,"Well, there's a way you could do it.... If you try opening the image and running the following script, it should intercept the requests and change the photometric interpretation when needed. So you should then be able to work with the whole slide image directly. It does this with some very messy code, accessing private fields and such. Therefore I don't really recommend it... but it might help check whether it's on the right track. Note that I think you'll need to go to the QuPath preferences and turn off the Bio-Formats parallelization option for it to work. ```groovy; import javafx.application.Platform; import loci.common.RandomAccessInputStream; import loci.common.services.ServiceFactory; import loci.formats.ClassList; import loci.formats.FormatException; import loci.formats.IFormatReader; import loci.formats.ImageReader; import loci.formats.gui.BufferedImageReader; import loci.formats.in.LeicaSCNReader; import loci.formats.services.OMEXMLService; import loci.formats.tiff.IFD; import loci.formats.tiff.PhotoInterp; import loci.formats.tiff.TiffParser; import qupath.lib.gui.QuPathGUI; import qupath.lib.images.servers.BioFormatsImageServer; import qupath.lib.scripting.QPEx. // Access the current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. if (server.willParallelize()); print 'For this to work, you will need to turn off parallelization in the QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(read",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:303,access,accessing,303,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,1,['access'],['accessing']
Security,"What happens if you try to open the `.scn` file with Fiji (www.fiji.sc)? If this is successful (even to open part of the image - probably not all), then it is likely an issue with the QuPath Bio-Formats extension. But if not, then it is unlikely to be something that can be solved on the QuPath side. QuPath does not handle proprietary file formats, and depends on Bio-Formats and OpenSlide; and OpenSlide is inherently limited to 8-bit RGB images, which really means that Bio-Formats is the only option here. I plan to make some updates to the QuPath Bio-Formats extension soon, and I'll investigate `.scn` specifically with the few sample images I have access to tomorrow. But I don't know if the changes I plan to make will be relevant to the issue you are seeing. If you are able to share an example image that isn't working, I can investigate further.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409025091:655,access,access,655,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409025091,1,['access'],['access']
Security,"What is really interesting with the interaction with Cellprofiler is that we could use already developed and validated pipelines without starting from scratch. We have delopped a few extra CP python modules to handle specific analytical problems. The new version of CP is entirely python based. They do not support ImageJ anymore (no need to deal with javabridge which was a headache for us for while) and very attractive to deploy on a cluster environment. But what you suggest is a good idea, i.e. add it as a new feature request and see how it goes from there. But to my opinion the really interesting aspect with CP and the underlying python+addition libraries (so far) is the computational one, i.e. memory consumption and parallelisation. It would be very efficient to handle a very granular analysis (down to cell/organelle level) in python. We are running with up to 1*10^6 #objects per slide and you quickly go up to 12GB of RAM consumption for a single process in QuPath. The tiling of the slide before analysis is something I'm exploring with QuPath. The streamlining of QuPath and python is an excellent idea. It would allow interaction with CellProfiler modules and other python packages. . Great work. It's being very helpful to us. The interface is great and the other technical problems you can always find a solutions in one way or another even if it is not optimal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/122#issuecomment-350242806:109,validat,validated,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/122#issuecomment-350242806,1,['validat'],['validated']
Security,"When I run in QuPath 0.1.2,error appeared:. print(getQuPath().getBuildString()). ERROR: Error at line 15: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getQuPath() is applicable for argument types: () values: []; Possible solutions: getAt(java.lang.String), getClass(). ERROR: Script error; at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:415); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$000(GroovyScriptEngineImpl.java:97); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$2.invokeMethod(GroovyScriptEngineImpl.java:329); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:69); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:158); at Script7.run(Script7.groovy:15); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:7",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473503394:470,access,access,470,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473503394,1,['access'],['access']
Security,"When trying to run this I get; ```; qupath.fx.dialogs.Dialogs - QuPath exception: Exception in Application start method; java.lang.RuntimeException: Exception in Application start method; 	at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:893); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$2(LauncherImpl.java:195); 	at java.base/java.lang.Thread.run(Thread.java:833); Caused by: java.lang.NullPointerException: Cannot invoke ""qupath.lib.gui.viewer.QuPathViewer.downsampleFactor()"" because ""this.viewer"" is null; ```. But even if this is fixed, would it have any visible impact? The label text should already be updated. I agree that downsample factor should be exposed as a property, but I think it will require a cautious approach; if it's not a `ReadOnlyDoubleProperty` then the user should be able to assume that they can also *set* the downsample via the property, but I expect that would require a bigger refactoring of `QuPathViewer`. It's old-fashioned and suboptimal, but for now adding a [`QuPathViewerListener`](https://github.com/qupath/qupath/blob/007b18108b9f43954279403cb1f796d7ada4b521/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewerListener.java) is the expected way to identify any kind of viewer change. Definitely a move towards a more property-based approach would be welcome, but then so would a viewer that uses JavaFX more natively (rather than lots of legacy Graphics2D stuff)... so I think the question is whether to invest time in refactoring the current viewer, or take on the task of writing an entirely new viewer?. I definitely think a new viewer would be nice at some point - would be good to discuss what to do along the way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1279#issuecomment-1638638283:716,expose,exposed,716,https://qupath.github.io,https://github.com/qupath/qupath/pull/1279#issuecomment-1638638283,1,['expose'],['exposed']
Security,"With the latest commit I also added an option in the CLI interface to run the script for the whole project without accessing the image files.; ```bash; ./gradlew run --args=""script -p '/home/castoldi/426FC/project.qpproj' -n -c 'import qupath.imagej.tools.IJTools; println IJTools.convertToImagePlus(getCurrentServer(), RegionRequest.createInstance(getCurrentServer(), 16))'""; ````; output:; ```; > Task :qupath-app:run; 14:08:12.506 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting default Locale to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for FORMAT to en_US; 14:08:12.507 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Setting Locale for DISPLAY to en_US; 14:08:12.513 [main] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 31; 14:08:12.513 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8000.00 MB (25.0% max memory); 14:08:12.525 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:opencv:4.6.0-1.5.8 do not match.; Warning: Versions of org.bytedeco:javacpp:1.5.9 and org.bytedeco:openblas:0.3.21-1.5.8 do not match.; 14:08:12.860 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.1 FC.czi - Scene #1 (0/48); 14:08:13.205 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files.; [...]; 14:08:24.832 [main] [INFO ] qupath.ScriptCommand - Running script for SILVA_426.6 FC.czi - Scene #8 (48/48); 14:08:25.124 [main] [ERROR] qupath.ScriptCommand - The script tried to read pixels off an image while also requiring to run the script without accessing the image files. BUILD SUCCESSFUL in 18s; 34 actionable tasks: 10 executed, 24 up-to-date. ~/Projects/qupath light-script-runner* 19s; ❯ ; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385:115,access,accessing,115,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022842385,3,['access'],['accessing']
Security,"Yes, under the View → Zoom... → Zoom in/out is where I encountered the reverse behavior.; I am working on a Mac. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:56 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). I understand the issue is with the specific commands under View → Zoom... → Zoom in/out (I've tested only on a Mac, but assume the unexpected behavior is common across platforms - it was also weird in m10, but not v0.1.2... I didn't check any others). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640781128&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=2kWkyYCdApiRUWM942pRiwOnNoXy8SWGjV0e%2FyE0DuE%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNE5SPRUYX7RMNYZKOFTRVUQ5LANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=pU%2BYSYbllDKbPfdTG%2FD921yLOmUpYsg0rDDoywDA3bE%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640783525:1563,authoriz,authorized,1563,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640783525,1,['authoriz'],['authorized']
Security,"You can also open the `project.qpproj` file directly in a text editor, and then use 'Find & Replace' to change the paths. That is probably easier and faster than reimporting. You could even duplicate the project file and keep the duplicates in the same directory, each with the paths including a drive letter you might need. So you might have `projectD.qpproj`, `projectE.qppro`j, `projectF.qpproj`... each containing the different paths that you might need. Ultimately the data for each image is stored inside the 'data' subdirectory inside the project folder, with a filename based only on the name of the image (not its full path). Therefore just open the project file that contains the correct paths, and it should immediately have access to the same data. There is a little bit of information about how projects are structured at https://github.com/qupath/qupath/wiki/Project-structure; It's usually best to leave QuPath to take care of the files in the project directory... but it is intentionally quite simple so that, if you know more or less what it is doing, you can certainly hack it a bit to behave the way you need.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/114#issuecomment-342855367:736,access,access,736,https://qupath.github.io,https://github.com/qupath/qupath/issues/114#issuecomment-342855367,1,['access'],['access']
Security,"You can convert any existing QuPath ROI into a [`java.awt.Shape`](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html) with [`PathROIToolsAwt`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-awt/src/main/java/qupath/lib/roi/PathROIToolsAwt.java#L204). While it doesn't solve the shapefile problem, at least it gets the ROIs into a more QuPath-independent format, from with you can request vertices in a standard way (with a [PathIterator](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html)) that is fairly well documented. Using [`java.awt.geom.Area`](https://docs.oracle.com/javase/8/docs/api/index.html?java/awt/Shape.html) is also an option for anything other than a `LineROI`. You _might_ then be able to find a library that converts a Java `Shape` into a more shapefile-friendly format (if you find a suitable library as a `.jar` file, you can just drag it onto QuPath to copy it to the extensions directory and then it should be accessible in your scripts - and potentially add it as a dependency in IntelliJ for easier scripting). Otherwise I guess I'd look for whatever way your shapefile-writing library represents complex shapes, and with the help of the `PathIterator` try to export from QuPath in the closest way I could. In general, I think QuPath needs better support for shapes and things that may be done with shapes, and every now and then I look towards [Java Topology Suite](https://github.com/locationtech/jts). I've written a couple of scripts with it, and am tentatively thinking of creating converters for all QuPath ROIs to a JTS representation... I just haven't had a big enough need for it yet. As far as I can see, JTS has support for reading shapefiles, but I don't see any for writing them. Although it may write GeoJSON - which is another candidate for a format. I've seen it used for pathology in [QuIP](https://sbu-bmi.github.io/quip_distro/), but I haven't noticed any other examples yet. I guess your main task is",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-396428574:989,access,accessible,989,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-396428574,1,['access'],['accessible']
Security,adata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; INFO: Returning server: Bio-Formats for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; ERROR: java.lang.OutOfMemoryError: Java heap space; WARN: Fallback to requesting thumbnail directly...; ERROR: QuPath exception; WARN: Tile request exception; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: TiffDelegateReader initializing /home/joelrv/Downloads/test_pyramid.tif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathVie,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:10000,Access,AccessController,10000,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['Access'],['AccessController']
Security,"ail with this PR it fails, I believe because it is using a mixture of metadata (i.e. assuming that it has enough bytes for 32-bit data, and failing with an `ArrayIndexOutOfBoundsException`. > * One tile reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in per",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1554,access,accessed,1554,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['access'],['accessed']
Security,anager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Platf,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:7357,Access,AccessController,7357,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['Access'],['AccessController']
Security,asicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:21675,access,access,21675,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,6,"['Access', 'access', 'secur']","['AccessController', 'access', 'security']"
Security,"assify ; > <https://cloud.githubusercontent.com/assets/23145209/22407407/a1b3e02c-e61a-11e6-8ab8-8929d9b98c32.JPG>; >; > It may not be exactly what you wanted, but it is not too many steps ; > and should give similar results, I believe. Note that the Classify By ; > Specific Feature does not show up in the workflow at this time, but I ; > seem to remember it being scriptable manually.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/46#issuecomment-275941788>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEcJu_dREsL0cqgibZHAb2Vy12MWjks5rXPDdgaJpZM4Lw1_o>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; Geschäftsführer:; - David Haumann, Thomas Schenker, Sergey Biniaminov. _________________________________; Diese E-Mail und jeder übermittelte Anhang enthält gesetzlich geschützte; und vertrauliche Informationen. Wenn diese E-Mail nicht für Sie bestimmt ist,; bitten wir Sie, sie an uns zurückzusenden und anschließend von Ihrem Computersystem; zu löschen. Nicht für Sie bestimmte E-Mails und Anhänge dürfen Sie weder nutzen; noch verarbeiten oder Dritten zugänglich machen, gleich in welcher Form. This email including any attachments contains privileged and confidential; information. If you are not an intended recipient, please return the email; to us and then delete it from your computer system. You may neither use nor; edit any such emails including attachments received due to an error in; transmission, nor make them accessible to third parties in any manner whatsoever.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/46#issuecomment-276000050:2397,confidential,confidential,2397,https://qupath.github.io,https://github.com/qupath/qupath/issues/46#issuecomment-276000050,2,"['access', 'confidential']","['accessible', 'confidential']"
Security,"at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:748); 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 13:20:08.256 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 13:20:17.509 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Calling Platform.exit();; ```. In Centos 6, I found some information about the error message ""j java.lang.Object.<clinit>()V+0"" : this may be a stack problem. I tried to change the thread stack size wi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:1969,Access,AccessController,1969,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['Access'],['AccessController']
Security,"at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:120); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1092); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:633); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:418); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:59); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$106(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$119(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$117(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$118(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:39:38.754 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Dark; 02:39:38.757 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 02:39:38.781 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 02:39:38.837 [JavaFX Application Thread] [INFO ] q.lib.gui.helpers.DisplayHelpers - QuPath Notice: This is a pre-release version of QuPath; Version: 0.0.6; Build time: 2016-11-16, 15:54; 02:40:13.093 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideServerBuilder - Co",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:2580,Access,AccessController,2580,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['Access'],['AccessController']
Security,atcher.dispatchEvent(BasicEventDispatcher.java:58); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757); 	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485); 	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762); 	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:352); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:275); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$300(GlassViewEventHandler.java:388); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:387); 	at com.sun.glass.ui.View.handleMouseEvent(View.java:555); 	at com.sun.glass.ui.View.notifyMouse(View.java:937); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.j,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:7387,access,access,7387,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['access'],['access']
Security,ating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; INFO: Returning server: Bio-Formats for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; ERROR: java.lang.OutOfMemoryError: Java heap space; WARN: Fallback to requesting thumbnail directly...; ERROR: QuPath exception; WARN: Tile request exception; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: TiffDelegateReader initializing /home/joelrv/Downloads/test_pyramid.tif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.vie,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:9991,secur,security,9991,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['secur'],['security']
Security,"ation Thread]	ERROR	qupath.lib.gui.QuPathUncaughtExceptionHandler	Cannot invoke ""javafx.stage.Stage.close()"" because ""this.dialog"" is null	java.lang.NullPointerException: Cannot invoke ""javafx.stage.Stage.close()"" because ""this.dialog"" is null; 	at qupath.lib.gui.scripting.DefaultScriptEditor.promptToClose(DefaultScriptEditor.java:518); 	at qupath.lib.gui.QuPathGUI.handleCloseMainStageRequest(QuPathGUI.java:1018); 	at javafx.base@22.0.1/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); 	at javafx.base@22.0.1/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:232); 	at javafx.base@22.0.1/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:189); 	at javafx.base@22.0.1/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); 	at javafx.base@22.0.1/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); 	at javafx.base@22.0.1/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at javafx.base@22.0.1/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at javafx.base@22.0.1/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.base@22.0.1/javafx.event.Event.fireEvent(Event.java:198); 	at javafx.graphics@22.0.1/com.sun.javafx.stage.WindowPeerListener.closing(WindowPeerListener.java:100); 	at javafx.graphics@22.0.1/com.sun.javafx.tk.quantum.GlassStage.lambda$requestClosingAllWindows$3(GlassStage.java:204); 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400); 	at javafx.graphics@22.0.1/com.sun.javafx.tk.quantum.GlassStage.requestClosingAllWindows(GlassStage.java:203); 	at javafx.graphics@22.0.1/com.sun.javafx.tk.quantum.QuantumToolkit$2.handleQuitAction(QuantumToolkit.java:370); 	at javafx.graphics@22.0.1/com.sun.glass.ui.mac.MacApplication$4.action(MacApplication.java:226); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1524#issuecomment-2133581152:1740,secur,security,1740,https://qupath.github.io,https://github.com/qupath/qupath/pull/1524#issuecomment-2133581152,3,"['Access', 'secur']","['AccessController', 'security']"
Security,b.scripting.QPEx.runPlugin(QPEx.java:266); at qupath.lib.scripting.QPEx.runPlugin(QPEx.java:286); at qupath.lib.scripting.QPEx$runPlugin.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:214); at Script30.run(Script30.groovy:12); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); Caused by null at qupath.lib.images.servers.BioFormatsImageServer.getTimePoint(BioFormatsImageServer.java:930); at qupath.imagej.images.servers.BufferedImagePlusServer.getTimePoint(BufferedImagePlusServer.java:173); at qupath.imagej.helpers.IJTools.calibrateImagePlus(IJTools.java:220); at qupath.imagej.images.servers.BufferedImagePlusServer.readImagePlusRegion(BufferedImagePlusServer.java:241); at qupath.imagej.detect.tissue.SimpleTissueDetection2$GlobalThresholder.runDetection(SimpleTissueDetection2.java:158); at qupath.lib.plugins.Detect,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:10426,access,access,10426,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['access'],['access']
Security,"blematic frame:; # C [libc.so.6+0x9a23b] __libc_malloc+0x12b. [...more stuff...]. Current thread (0x00007f594d8d5540): JavaThread ""tile-exporter10"" daemon [_thread_in_vm, id=314754, stack(0x00007f4ec1aaf000,0x00007f4ec1bb0000)]. Stack: [0x00007f4ec1aaf000,0x00007f4ec1bb0000], sp=0x00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1433,secur,security,1433,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['secur'],['security']
Security,"brary.load(Native Method). at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941). at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857). at java.lang.Runtime.loadLibrary0(Runtime.java:870). at java.lang.System.loadLibrary(System.java:1122). at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59). at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72). at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116). at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1093). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:637). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:429). at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63). at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863). at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326). at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295). at java.security.AccessController.doPrivileged(Native Method). at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294). at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95). at com.sun.glass.ui.win.WinApplication._runLoop(Native Method). at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177). at java.lang.Thread.run(Thread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:1136,secur,security,1136,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,1,['secur'],['security']
Security,cEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). 2. how precisely did the abnormal shutdown occur?. I had a VPN connection with my pc in the office and then somebody else logged in to the machine and I got logged out. The VPN connection is via a .rdp file where I can just use my home screen/pc as a window to my office pc (is this clear?). 3. can you give precise steps to replicate the issue? -> Yes,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:4450,Access,AccessController,4450,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['Access'],['AccessController']
Security,"cend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats extension, then that postpones the immediate need to solve the problem of accessing native libraries; at least, you should be able to open the formats supported by Bio-Formats so long as",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:1536,access,access,1536,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['access'],['access']
Security,"cessorImpl.newInstance(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source); at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(Unknown Source); at java.base/java.util.ServiceLoader$ProviderImpl.get(Unknown Source); at java.base/java.util.ServiceLoader$3.next(Unknown Source); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:104); at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1601); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:1059); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:60); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Unknown Source); 17:02:49.461 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; 17:02:49.798 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 17:02:49.798 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 17:02:52.272 [qupathgui-1] [INFO ] qupath.lib.gui.QuPathGUI - Current version 0.2.3, latest stable release 0.2.3 - not",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/615#issuecomment-725509556:1945,Access,AccessController,1945,https://qupath.github.io,https://github.com/qupath/qupath/issues/615#issuecomment-725509556,1,['Access'],['AccessController']
Security,com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by No such class: javax.media.jai.NullOpImage at loci.common.ReflectedUniverse.exec(ReflectedUniverse.java:161); at loci.formats.in.TiffJAIReader.initFile(TiffJAIReader.java:104); at loci.formats.FormatReader.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:3844,access,access,3844,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['access'],['access']
Security,com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:3021,access,access,3021,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,4,['access'],['access']
Security,com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); ERROR: Checking Big TIFF images currently not supported!!!; ERROR: QuPath exception; at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.Ima,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:6805,access,access,6805,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,2,['access'],['access']
Security,com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); WARN: Error opening /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ: Could not open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:8441,access,access,8441,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['access'],['access']
Security,cutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:2003); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateDefaultSelection(TableView.java:2930); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateItemsObserver(TableView.java:2907); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.access$2000(TableView.java:2028); at javafx.scene.control.TableView$TableViewArrayListSelectionModel$1.invalidated(TableView.java:2052); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:349); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146); at javafx.scene.control.TableView.setItems(TableView.java:843); at qupath.lib.gui.panels.PathImageDetailsPanel.setImageData(PathImageDetailsPanel.java:451); at qupath.lib.gui.panels.PathImageDetailsPanel.propertyChange(PathImageDetailsPanel.java:539); at java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:335); at java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:327); at java,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:6307,access,access,6307,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['access'],['access']
Security,"d complex shapes with holes, it is also possible - but considerably more awkward. 3. Create some kind of ```PathObject``` for each ```PolygonROI```; probably a ```PathDetectionObject``` (if there will be a lot of them) or ```PathAnnotationObject``` (if there won't). There is some more information [here](https://github.com/qupath/qupath/wiki/Types-of-object). 4. Add each ```PathObject``` to the object hierarchy in QuPath so that it can be displayed. There is some information relevant to the last 3 steps at https://github.com/qupath/qupath/issues/61. For the first step, there are a few different options:. * If you are much more comfortable with Python rather than Groovy/Java, then you could try one of the methods of using Python with QuPath described [in the Wiki](https://github.com/qupath/qupath/wiki/Working-with-Python). Conceivably, you might even be able to run your whole code that way… or else just parse the results exported in a Python-friendly format. * You could try using OpenCV via its Java bindings via Groovy via QuPath. If you set things up as described [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) then the dependencies should be accessible. * You could write a simple Python script to export the coordinates for each contour, and then write a simple Groovy script to parse this and bring the coordinates into QuPath. Of these, I would choose the last option. There may be some merit in the others, but I expect they would be more complicated to set up. There are lots of tricks and shortcuts in Groovy that may help with the parsing, e.g. in order to extract floating point coordinates (such as those required to construct the ```PolygonROI```) from a String you might use this:. ```groovy; String inputString = ""1.0, 2.0, 3.0, 4.0, 50.0""; float[] x = inputString.tokenize(',') as float[]; print x; ```. Finally, I should mention that the coordinates should be in pixel units corresponding to the highest-resolution plane in your SVS file.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-307854757:1513,access,accessible,1513,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-307854757,1,['access'],['accessible']
Security,"e to work with the whole slide image directly. It does this with some very messy code, accessing private fields and such. Therefore I don't really recommend it... but it might help check whether it's on the right track. Note that I think you'll need to go to the QuPath preferences and turn off the Bio-Formats parallelization option for it to work. ```groovy; import javafx.application.Platform; import loci.common.RandomAccessInputStream; import loci.common.services.ServiceFactory; import loci.formats.ClassList; import loci.formats.FormatException; import loci.formats.IFormatReader; import loci.formats.ImageReader; import loci.formats.gui.BufferedImageReader; import loci.formats.in.LeicaSCNReader; import loci.formats.services.OMEXMLService; import loci.formats.tiff.IFD; import loci.formats.tiff.PhotoInterp; import loci.formats.tiff.TiffParser; import qupath.lib.gui.QuPathGUI; import qupath.lib.images.servers.BioFormatsImageServer; import qupath.lib.scripting.QPEx. // Access the current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. if (server.willParallelize()); print 'For this to work, you will need to turn off parallelization in the QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:1196,Access,Access,1196,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,1,['Access'],['Access']
Security,"ent(BasicEventDispatcher.java:56); at; com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at; com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at; com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at; com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at; com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). On Mon, Apr 26, 2021 at 1:07 AM Pete ***@***.***> wrote:. > @subanookala <https://github.com/subanookala> Please post questions on; > the forum at http://forum.image.sc/tag/qupath and provide more detail; > (you may find a more complete error message under *View → Show log*).; >; > —; > You are receiving this because you were mention",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:5310,secur,security,5310,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['secur'],['security']
Security,"erably, because the command must also be scriptable and then somehow the units need to incorporated into any script. Additionally, QuPath is moving towards greater generality. It is increasingly used for images where µm is an inappropriate unit, so I'm reluctant to add additional code that assumes µm as the only alternative to pixels. And a properly generic system will take a lot more effort to develop (not helped by the fact that Java has no built-in support for converting units... it's a recurring theme, e.g. [here](https://jcp.org/en/jsr/detail?id=385), but as far as I'm aware there are a multiple implementations and it's not clear which, if any, we should use). This also affects the sparse image server: at the point the dialog is shown, we don't know if the pixel size is available in µm for the regions that will be required to generate the server. Furthermore, the dialog itself is [auto-generated from a `ParameterList`](https://github.com/qupath/qupath/blob/main/qupath-extension-processing/src/main/java/qupath/process/gui/commands/CreateTrainingImageCommand.java#L90), which limits the ability to toggle between units. Added to that, I'm not terribly happy with the generation of 'dynamic' training images generally; the code is really complex (since the images can be quite heterogeneous), and performance can be poor whenever many images need to be accessed to create the final result. Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. I'll leave this open for a while in case there are further comments, but my feeling is that the development-and-maintainence-time-to-benefit ratio isn't favorable enough to work on this in the core QuPath software; there are too many higher priorities, and if I'd rather focus efforts on simplicity, maintainability and generalizability in the code. Anyone else can create a new extension to provide an alternative implementation for any of the commands if they want to.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932:1534,access,accessed,1534,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932,1,['access'],['accessed']
Security,erty.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146); at javafx.scene.control.TreeView.setRoot(TreeView.java:470); at qupath.lib.gui.panels.ProjectBrowser.setProject(ProjectBrowser.java:271); at qupath.lib.gui.QuPathGUI.setProject(QuPathGUI.java:4186); at qupath.lib.gui.QuPathGUI$setProject$0.call(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125); at Script5.run(Script5.groovy:21); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1267); at qupath.lib.scripting.DefaultScriptEditor$ProjectTask.call(DefaultScriptEditor.java:1195); at javafx.concurrent.Task$TaskCallable.call(Task.java:1423); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); `,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332808179:3729,access,access,3729,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332808179,1,['access'],['access']
Security,"f21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. > Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. Basically All you the above. It accesses ~50 `.czi` images, weighting ~10GiB each. Leaving the the big size aside, it's also known that BioFormats themselves (required by `.czi`) are slow to work with.; Adding up to this scenario, images are often stored on a remote server (be it OMERO or just a sftp/samba server). This is due to the fact that it is hard for every member of a laboratory to have them stored on their own computer, as they all need to collaborate and, even if they wanted, they would soon fill up their local storage. in this scenario, the fact that QuPath offer an highly-scriptable interface is many laboratories' luck. It means that a pipeline of scripts can be applied one after the other, resulting in a full analysis of the whole project. Sometimes, you may even want to tweak some parameters, and for this you have to re-run the whole pipeline in batch again. In the end, I really get you are wary of quickly merging this. I'm sure reducing code is a top priority in order to offer the best bug-free experience to",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:2322,access,accesses,2322,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['access'],['accesses']
Security,fx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3862); at javafx.scene.Scene.processMouseEvent(Scene.java:1849); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2590); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Unknown Source)`,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561071266:3553,secur,security,3553,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561071266,2,"['Access', 'secur']","['AccessController', 'security']"
Security,"hem there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. Ok, but please keep in mind that ImageJ has existed in some form for more than 30 years, and has had input from many fantastically knowledgeable people both in terms of development and documentation. There has been a huge amount of volunteer effort, alongside many components and plugins developed as part of larger, funded projects. On the other hand, QuPath was created and documented essentially by one person and has only been available for a couple of years. The same person also wrote all the wiki, the [blog](https://petebankhead.github.io), is the main person writing scripts to everyone who asks on GitHub and Google Groups, teaches workshops on it when invited and has got time, and wrote detailed instructions for setting it up with IntelliJ to script with auto-completion & access to the full source code (and internal javadocs) [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ). At this time, all continued work and support is entirely unfunded and unpaid. I'm also not a professional programmer (nor a biologist). As described in the [Getting help](https://github.com/qupath/qupath/wiki/Getting-help) section of the Wiki, the [Google Group](https://groups.google.com/forum/#!forum/qupath-users) exists to answer questions and cover any gaps in the documentation. Therefore, please do try to be fair in your expectations :). > Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very intere",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:2265,access,access,2265,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['access'],['access']
Security,"hub.com>; Subject: Re: [qupath/qupath] PositiveCellDetection and Classifier fails (#130). It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/130#issuecomment-",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:1624,access,access,1624,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['access'],['access']
Security,"hy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected object; def completelyCovered = PathObjectTools.filterByROICovers(roi, allDetections); println ""Num completely covered: \t${completelyCovered.size()}"". // Set classifications for visualization; allDetections.each {it.classifications = []}; childObjects.each{it.classifications += ['child']}; regionObjects.each{it.classifications += ['region']}; hierarchyWithin.each{it.classifications += ['within']}; nucleusCentroidWithin.each{it.classifications += ['nucleus-centroid']}; centroidWithin.each{it.classifications += ['roi-centroid']}; intersecting.each{it.classifications += ['intersecting']}; completelyCovered.each{it.classifications += ['covered']}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:2193,access,accessed,2193,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['access'],['accessed']
Security,i.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: TiffDelegateReader initializing /home/joelrv/Downloads/test_pyramid.tif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:11314,secur,security,11314,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,2,"['Access', 'secur']","['AccessController', 'security']"
Security,"ick recording of the profiling as it ran while QuPath was loading the project: https://youtu.be/_GHn556qEAk. I wasn't able to get the profiler to work, despite installing a 64 bit version of Java 17, but the sampler and all other tools seemed to work. I've uploaded the thread and heap dumps to: https://drive.google.com/drive/folders/1akRolrnUwbryc3YMSRR_aXhJ5H6AgBWO?usp=sharing. > QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches.; v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this could potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. Based on my limited interpretation of the VisualVM results, I'd say that you're right. The lowest-level QuPath method I could find which was responsible for the ~4 minute load time is `qupath.lib.io.UriUpdater$SingleUriItem.getStatus()` which invokes `java.nio.file.File.exists()`. ![image](https://user-images.githubusercontent.com/52012166/203870112-0ecd0822-7efd-4360-af2e-0858b8a03df7.png). My guess is that there is some kind of checking going on, comparing the URI listed in the project, with the file path, to verify that each project entry is pointing to the correct image, and that's what's taking up CPU time. > I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't really see how or when that happened. In this recording, I've left the analysis pane open, and purposely triggered the ""not responding"" faded effect to show when the QuPath ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166:1195,access,access,1195,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326872166,1,['access'],['access']
Security,"ing you should use `gson = GsonTools.getInstance()` rather than `new Gson()`, because QuPath installs its own `TypeAdapters` to handle custom classes, including `PathClass`. So I implemented these changes in your script, randomizing the class names to avoid being thwarted by caching:; ```groovy; import qupath.lib.objects.classes.PathClass. for (useLegacyJson in [true, false]) {. String parentName = Math.random() as String; String childName = Math.random() as String; String json; if (useLegacyJson); json = """"""{ ""name"": ""${childName}"", ""parentClass"": {""name"": ""${parentName}""}, ""colorRGB"": 0}""""""; else; json = """"""{ ""names"": [""${parentName}"", ""${childName}""], ""color"": [0, 1, 2]}""""""; ; def gson = GsonTools.getInstance(); PathClass pathClass = gson.fromJson(json, PathClass.class); pathClass = PathClass.getSingleton(pathClass); PathClass parent1 = pathClass.getParentClass(); PathClass parent2 = PathClass.fromString(parentName); ; if (useLegacyJson); println ""With legacy JSON""; else; println ""With v0.4 JSON""; println(""getSingleton: "" + parent1.hashCode() + "" ("" + parent1 + "")""); println(""fromString: "" + parent2.hashCode() + "" ("" + parent2 + "")""); println(""Are equal: "" + (parent1===parent2)) ; println ""----------""; }; ```; From a typical run I see; ```; INFO: With legacy JSON; INFO: getSingleton: 1714766410 (0.07271672325316691); INFO: fromString: 2014375544 (0.07271672325316691); INFO: Are equal: false; INFO: ----------; INFO: With v0.4 JSON; INFO: getSingleton: 489320231 (0.016118546223767072); INFO: fromString: 489320231 (0.016118546223767072); INFO: Are equal: true; INFO: ----------; ```. I think this implies that the bug *only* occurs when deserializing a PathClass written using the 'earlier' syntax, and doesn't affect a PathClass that was written by v0.4 itself. Does that sound correct?. I'm on leave at the moment, but will explore the PR in more detail in a couple of weeks, and before the next QuPath release. In the meantime I'm keen to understand when the bug strikes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670267778:1626,hash,hashCode,1626,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670267778,2,['hash'],['hashCode']
Security,"ingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:84); at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1198); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:723); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:473); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: TiffDelegateReader initializing /home/joelrv/Downloads/RK_HE.ptif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/RK_HE.ptif; INFO: Returning server: Bio-Formats fo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:2588,Access,AccessController,2588,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['Access'],['AccessController']
Security,"inue to investigate, and add an update here when I learn more.; >; > In the meantime, I have been told that the Zeiss ZEN software is able ; > to export the different scenes as separate images, which can then be ; > read into a QuPath project ; > <https://github.com/qupath/qupath/wiki/Projects>. Therefore this may ; > be a workaround that enables you to work with the images in QuPath.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/45#issuecomment-274611030>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEV0UakHZI556HGXSHym-5fglXkHwks5rVREZgaJpZM4Lrcx8>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; Geschäftsführer:; - David Haumann, Thomas Schenker, Sergey Biniaminov. _________________________________; Diese E-Mail und jeder übermittelte Anhang enthält gesetzlich geschützte; und vertrauliche Informationen. Wenn diese E-Mail nicht für Sie bestimmt ist,; bitten wir Sie, sie an uns zurückzusenden und anschließend von Ihrem Computersystem; zu löschen. Nicht für Sie bestimmte E-Mails und Anhänge dürfen Sie weder nutzen; noch verarbeiten oder Dritten zugänglich machen, gleich in welcher Form. This email including any attachments contains privileged and confidential; information. If you are not an intended recipient, please return the email; to us and then delete it from your computer system. You may neither use nor; edit any such emails including attachments received due to an error in; transmission, nor make them accessible to third parties in any manner whatsoever.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-274930919:2559,confidential,confidential,2559,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-274930919,2,"['access', 'confidential']","['accessible', 'confidential']"
Security,"ity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a classifier without needing to go through the UI, in a way that doesn't involve any big API changes - and which can be used when you can *know* in advance that the image doesn't need to be accessed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:1797,access,access,1797,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,2,['access'],"['access', 'accessed']"
Security,java:178); at qupath.lib.scripting.QP.setColorDeconvolutionStains(QP.java:438); at qupath.lib.scripting.QP$setColorDeconvolutionStains$1.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:206); at Script30.run(Script30.groovy:10); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: Error running plugin: java.lang.NullPointerException; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.scripting.QPEx.runPlugin(Q,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:8453,access,access,8453,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['access'],['access']
Security,java:178); at qupath.lib.scripting.QP.setColorDeconvolutionStains(QP.java:438); at qupath.lib.scripting.QP$setColorDeconvolutionStains$1.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:206); at Script30.run(Script30.groovy:10); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745); ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:4991,access,access,4991,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['access'],['access']
Security,java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3057); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3283); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2997); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$2(GlassSceneDnDEventHandler.java:108); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:104); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$11(GlassViewEventHandler.java:766); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:765); at com.sun.glass.ui.View.handleDragDrop(View.java:713); at com.sun.glass.ui.View.notifyDragDrop(View.java:1042); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source); Caused by null at qupath.lib.projects.DefaultProject.loadPathClasses(DefaultProject.java:1130); at qupath.lib.projects.DefaultProject.loadProject(DefaultProject.java:1086); at qupath.lib.projects.DefaultProject.loadFromFile(DefaultPr,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708516373:2013,secur,security,2013,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708516373,1,['secur'],['security']
Security,"javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3144); 	at javafx.scene.Scene$DnDGesture.processTargetEnterOver(Scene.java:3316); 	at javafx.scene.Scene$DropTargetListener.dragEnter(Scene.java:3024); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragEnter$0(GlassSceneDnDEventHandler.java:83); 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragEnter(GlassSceneDnDEventHandler.java:77); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragEnter$9(GlassViewEventHandler.java:733); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragEnter(GlassViewEventHandler.java:732); 	at com.sun.glass.ui.View.handleDragEnter(View.java:684); 	at com.sun.glass.ui.View.notifyDragEnter(View.java:1020); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); 	at java.base/java.lang.Thread.run(Thread.java:833); 13:36:13.428 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); 13",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846:1784,secur,security,1784,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846,1,['secur'],['security']
Security,l.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by No such class: javax.media.jai.NullOpImage at loci.common.ReflectedUniverse.exec(ReflectedUniverse.java:161); at loci.formats.in.TiffJAIReader.initFile(TiffJAIReader.java:104); at loci.formats.FormatReader.setId(FormatReader.java:1397); at loci.formats.DelegateReader.setId(DelegateReader.java:300); at loci.formats.ImageReader.setId(ImageReader.java:839); at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:650); at loci.formats.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:4072,Access,AccessController,4072,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['Access'],['AccessController']
Security,l.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:45); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openIma,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409140774:3638,Access,AccessController,3638,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409140774,1,['Access'],['AccessController']
Security,l.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openIma,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:3249,Access,AccessController,3249,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,3,['Access'],['AccessController']
Security,l.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); ERROR: Checking Big TIFF images currently not supported!!!; ERROR: QuPath exception; at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:7033,Access,AccessController,7033,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,2,['Access'],['AccessController']
Security,l.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); WARN: Error opening /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ: Could not open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ; WARN: Unable to open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with OpenSlide: /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif: Not a file that O,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:8669,Access,AccessController,8669,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['Access'],['AccessController']
Security,"lementing `QuPathExtension`, the `META-INF/services/qupath.lib.gui.extensions.QuPathExtension` part is crucial (see [here](https://github.com/qupath/qupath/wiki/Creating-extensions), or [this](https://docs.oracle.com/javase/tutorial/ext/basics/spi.html#implement-the-service-provider) may also help - since the general idea isn't QuPath-specific). But if you just want to access the contents of the .jar from the script, then this shouldn't be necessary. It sounds like the problem you are seeing happens inside the imported code, because if I import something that doesn't exist then at least the errors are displayed (and sensible), e.g.:; ```groovy; print 'hello'. import something.that.does.not.exist; ```; gives me; ```; ERROR: Error: startup failed:; Script18.groovy: 4: unable to resolve class something.that.does.not.exist; @ line 4, column 1.; import something.that.does.not.exist; ^. 1 error; ```. When that happens, QuPath doesn't handle such exceptions very well and I've also seen the multiple-logging problem occasionally when things go badly wrong. A recent fix I made on my fork should help address this: https://github.com/petebankhead/qupath/commit/c3f8fd49f8c14dbf7956490d2fa4f79d8e11b057. Finally, there are different ways to integrate Groovy into a Java application: http://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html; Currently, QuPath goes down the _JSR 223 javax.script API_ route to give (potentially at least) support for different scripting languages. I'm tentatively considering a switch to use _GroovyShell_ instead, which looks like it makes it easier to access other classes. I haven't yet explored the implications, but I think that Option 1) having really good Groovy support (only) would be more worthwhile than Option 2) trying to support multiple languages/syntaxes (but none of them quite as well). If you've any thoughts on that please let me know, I'd be interested in other opinions before getting too embroiled in making the changes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450918869:2136,access,access,2136,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450918869,1,['access'],['access']
Security,"m and coming up with possible alternative solutions!. I absolutely get your notes on the classifier. I assumed that the ObjectClassifier would _never_ need to read pixels because it currently only uses the detections' measurements. Surely the code must be changed in preparation of the advent of the `FeatureExtractor`. And for this, using `ProjectImageEntry.readHierarchy()` is probably the better option.; > [...] creating a classifier without needing to go through the UI [...]. I am not sure about this, though. You often want to leverage the live-update feature when creating a classifier. That is one of the most handy feature when tweaking a classifier. If that option was removed, it would be unfortunate. -------------------------. However i think you missed a point. The major issue this PR wants to address is the ability to a script in batch as fast as possible (and when it is possible); > an alternative approach [...] that doesn't involve any big API changes - and which can be used when you can know in advance that the image doesn't need to be accessed. Just to be clear, this PR's only API change is adding in [`ProjectImageEntry.java:L195`](https://github.com/qupath/qupath/pull/1488/files#diff-14ed5cabf5566ab4eb5d1ae31a25d75c8dd49e3c50e1cc05ce10ff21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allow",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:1121,access,accessed,1121,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['access'],['accessed']
Security,"mewhat realistic image. . **_But now the problem is_** the image can be zoomed to a minimum extent as its pixels get fragmented at X20. My question: is it possible to recode in such a way that the image can be seen at X20 and also run analysis on that? Please suggest any alternative if you have any. Thanks for your support. Sincerely, Partha. **Your code:**. import javafx.application.Platform; import loci.common.RandomAccessInputStream; import loci.common.services.ServiceFactory; import loci.formats.ClassList; import loci.formats.FormatException; import loci.formats.IFormatReader; import loci.formats.ImageReader; import loci.formats.gui.BufferedImageReader; import loci.formats.in.LeicaSCNReader; import loci.formats.services.OMEXMLService; import loci.formats.tiff.IFD; import loci.formats.tiff.PhotoInterp; import loci.formats.tiff.TiffParser; import qupath.lib.gui.QuPathGUI; import qupath.lib.images.servers.BioFormatsImageServer; import qupath.lib.scripting.QPEx. // Access the current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. if (server.willParallelize()); print 'For this to work, you will need to turn off parallelization in the QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435208389:1490,Access,Access,1490,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435208389,1,['Access'],['Access']
Security,"nImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3856); at javafx.scene.Scene.processMouseEvent(Scene.java:1851); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2584); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.mac.MacView.notifyMouse(MacView.java:127); ```; The `Threshold` command works fine and seems to divide the annotation according to the slightly visible overlay, and so does the `Export map` command (so all good).; _________; ### If the value is >= 10; Clicking on `Find hotspot`, `Threshold` and `Export map` directly gives me the long open_cv error message copied above. It might be important to note that when the density radius value is switched back and forth between > and < 10, the density map overlay stops up",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872890572:4729,secur,security,4729,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872890572,1,['secur'],['security']
Security,"ne connected with how tiles are paralleled in QuPath's Bio-Formats reading since v0.3.1. However, the bigger context is very mysterious:; ```; # Problematic frame:; # C [libc.so.6+0x9a23b] __libc_malloc+0x12b. [...more stuff...]. Current thread (0x00007f594d8d5540): JavaThread ""tile-exporter10"" daemon [_thread_in_vm, id=314754, stack(0x00007f4ec1aaf000,0x00007f4ec1bb0000)]. Stack: [0x00007f4ec1aaf000,0x00007f4ec1bb0000], sp=0x00007f4ec1bac3d0, free space=1012k; Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code); C [libc.so.6+0x9a23b] __libc_malloc+0x12b. Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); J 758 java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (0 bytes) @ 0x00007f594243a6f0 [0x00007f594243a640+0x00000000000000b0]; J 754 c1 java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppC",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:1284,secur,security,1284,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['secur'],['security']
Security,"ng version = ""0.2.0""; if (version.equals(""0.2.0"")){; //import qupath.imagej.images.servers.ImagePlusServer; //import qupath.imagej.images.servers.ImagePlusServerBuilder; import qupath.imagej.helpers.IJTools; }; ```. ```; ERROR: Error: startup failed:; Script7.groovy: 25: Unknown type: IMPORT at line: 25 column: 1. File: Script7.groovy @ line 25, column 1.; import qupath.imagej.helpers.IJTools; ^. 1 error. ERROR: Script error; at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:311); at org.codehaus.groovy.control.CompilationUnit.applyToSourceUnits(CompilationUnit.java:980); at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:647); at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:623); at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:600); at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:390); at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:330); at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:327); at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:325); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:309); at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:251); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getScriptClass(GroovyScriptEngineImpl.java:331); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:153); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultS",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473504477:1067,access,access,1067,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473504477,1,['access'],['access']
Security,"nt(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); 	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); 	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); 	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); 	at javafx.event.Event.fireEvent(Event.java:198); 	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757); 	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485); 	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762); 	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:352); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:275); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$300(GlassViewEventHandler.java:388); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:387); 	at com.sun.glass.ui.View.handleMouseEvent(View.java:555); 	at com.sun.glass.ui.View.notifyMouse(View.java:937); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:40:13.846 [JavaFX Application Thread] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:7784,secur,security,7784,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['secur'],['security']
Security,om.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); ERROR: QuPath exception; at qupath.lib.gui.viewer.QuPathViewer.updateSuggestedOverlayColorFromThumbnail(QuPathViewer.java:996); at qupath.lib.gui.viewer.QuPathViewer.getSuggestedOverlayColor(QuPathViewer.java:1005); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1665); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:413); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:249); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:501); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: TiffDelegateReader initializing /home/joelrv/Downloads/test_pyramid.tif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/test_pyramid.tif; INFO: Returning server: Bio-Formats for /home/joelrv/Downloads/test_pyramid.tif; ERROR: QuPath exception; ERROR: java.lang.OutOfMemoryError: Java heap space; WARN: Fallback to requesting thumbnail directly...; ERROR: QuPath exception; WARN: Tile request exception; ERROR: QuPath exception; at qupath.lib.gui.view,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:8403,secur,security,8403,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['secur'],['security']
Security,"opic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81HHMcvnMhDSjonYiBRlurLnCnBJZ4a9YvcrT8TplefFlZKST3NVLHrWPL3RgIyoJsDosp8GVf6MH94rRAHuopZp9J5pOcqjQmwnlC51e34AFYd1-8yRTnj7X0qzcw7aHtnILPwFXQIqYdBTGMqf-iZSDUUexg/https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F493%23issuecomment-1791280813>, or unsubscribe<https://secure-web.cisco.com/16fbsI3bTg2IXBtZ19rtjLXO9mTw2FP1PcVHSk2XFBBZjPYBQWKvTLiqsGr7UCwdHhDGRsg9tR1qzmQGBIyUICyyRtVvGvh-eu_HtL8Iyt807-ztz3U-i887buKPXzn2O2YTuhy7Xwb13QKvs-TXcflZ21x0cz69j7BIZd4l-aFk4r0Kw89JYQAASuY7o5O0vLb801LbUikLbLtblZgMPHiBe_SrbHoAccvQxrwkY0sMyvxdP_sq89PM0YloMPcUZfoeyvQt8mkLvXp5q2fymfiSTMaZDZDyzknBIzrUh60kAx4knbh5x28AHq2RAZ6YnA3Au7RGuJTZ8YYt7B4VE6g/https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FA5G6YB3KO5IO3F2PMFLETCDYCPOOXAVCNFSM4NF3XJJKU5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCNZZGEZDQMBYGEZQ>.; You are receiving this because you were mentioned.Message ID: ***@***.******@***.***>>; The information in this e-mail is intended only for the person to whom it is addressed. If you believe this e-mail was sent to you in error and the e-mail contains patient information, please contact the Mass General Brigham Compliance HelpLine at https://www.massgeneralbrigham.org/complianceline <https://www.massgeneralbrigham.org/complianceline> .; Please note that this e-mail is not secure (encrypted). If you do not wish to continue communication over unencrypted e-mail, please notify the sender of this message immediately. Continuing to send or respond to e-mail after receiving this message means you understand and accept this risk and wish to continue to communicate over unencrypted e-mail.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:4128,secur,secure,4128,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,2,"['encrypt', 'secur']","['encrypted', 'secure']"
Security,patchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3057); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3283); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2997); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$2(GlassSceneDnDEventHandler.java:108); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:104); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$11(GlassViewEventHandler.java:766); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:765); at com.sun.glass.ui.View.handleDragDrop(View.java:713); at com.sun.glass.ui.View.notifyDragDrop(View.java:1042); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708516373:4786,secur,security,4786,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708516373,2,"['Access', 'secur']","['AccessController', 'security']"
Security,patchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by No such class: javax.media.jai.NullOpImage at loci.common.ReflectedUniverse.exec(ReflectedUniverse.java:161); at loci.formats.in.TiffJAIReader.initFile(TiffJAIReader.java:104); at loci.formats.FormatReader.setId(FormatReader.java:1397); at loci.formats.DelegateReader.setId(DelegateReader.java:300); at loci.formats.ImageReader.setId(ImageReader.java:839); at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:650); at ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:4063,secur,security,4063,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['secur'],['security']
Security,patchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:45); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPa,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409140774:3629,secur,security,3629,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409140774,1,['secur'],['security']
Security,patchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); Caused by loci.formats.FormatException at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPa,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:3240,secur,security,3240,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,3,['secur'],['security']
Security,patchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); ERROR: Checking Big TIFF images currently not supported!!!; ERROR: QuPath exception; at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.j,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409021767:7024,secur,security,7024,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409021767,2,['secur'],['security']
Security,patchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:2933); at javafx.scene.Scene$DnDGesture.processTargetDrop(Scene.java:3159); at javafx.scene.Scene$DnDGesture.access$6400(Scene.java:2909); at javafx.scene.Scene$DropTargetListener.drop(Scene.java:2873); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragDrop$309(GlassSceneDnDEventHandler.java:95); at java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragDrop(GlassSceneDnDEventHandler.java:92); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragDrop$363(GlassViewEventHandler.java:700); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragDrop(GlassViewEventHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); WARN: Error opening /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ: Could not open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ; WARN: Unable to open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with OpenSlide: /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif: Not ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:8660,secur,security,8660,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['secur'],['security']
Security,pplication.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:2003); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:1985); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.clearSelection(TableView.java:2733); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateDefaultSelection(TableView.java:2928); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateItemsObserver(TableView.java:2907); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.access$2000(TableView.java:2028); at javafx.scene.control.TableView$TableViewArrayListSelectionModel$1.invalidated(TableView.java:2052); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:349); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146); at javafx.scene.control.TableView.setItems(TableView.java:843); at qupath.lib.gui.panels.PathImageDetailsPanel.setImageData(PathImageDetailsPanel.java:451); at qupath.lib.gui.panels.PathImageDetailsPanel.propertyChange(PathImageDetailsPanel.java:539); at java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:335); at java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:327); at java,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:2845,access,access,2845,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['access'],['access']
Security,"ps://github.com/zeiss-microscopy/libCZI. I think Option 1 has additional advantages and is probably needed in the longer term.; Option 3 involves more work to support one particular format than I'm able to take on myself, but perhaps someone would like to try. It _might_ give improvements over relying only on Bio-Formats... but it would _definitely_ be a lot more work to develop and support cross-platform. Option 2 (merging) is 'easiest' if that involves writing a new pyramidal OME-TIFF file... but that rather increases the amount of data involved, and requires knowing the coordinates where each core comes from. A practical issue here is that I have seen a .czi TMA (I believe yours, @arnmayer :) ) that Bio-Formats has several problems with. This thwarts any plan we might develop to resolve this independently of Zeiss or the Bio-Formats team. Specifically:; * Sometimes the co-ordinates defining the TMA core locations accessed through Bio-Formats appears simply to be wrong, so it's not possible to figure out where they _should_ be; * The size of the Bio-Formats reader is astronomically large (> 1 GB), which makes opening files slow. You can see this in the size of the .bfmemo files if they are created. This also means that it's not possible to create multiple readers (which QuPath normally does for performance).; * The low resolution 'overview' image seems to be corrupt. It is somehow interpreted by Bio-Formats as a single-channel non-pyramidal image yet throws an error when one tries to open it directly. However the image itself must be ok, as it looks fine in the Zeiss software. If this image can be shared with the Bio-Formats team, they may be able to address these issues. Finally, one of the delays to m3 is I've been doing the groundwork to make image servers smarter. The relevance here is that it means that an image server is able to dynamically crop and/or reposition parts of an image to generate 'pseudo' whole slide images in QuPath, which might be composed of d",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/337#issuecomment-509982536:1227,access,accessed,1227,https://qupath.github.io,https://github.com/qupath/qupath/issues/337#issuecomment-509982536,1,['access'],['accessed']
Security,"reHierarchyUpdate(); ```. Closer inspection reveals a few Groovy tricks at work:. * `List.each { }` as a shorter alternative to for loops; * Avoid explicitly calling getters (e.g. `channel.name` rather than `channel.getName()`, `cell.measurements` rather than `cell.getMeasurements()` or - previously in QuPath - `cell.getMeasurementList()`; * Getting from a map using `map[key]` syntax (rather than `map.get(key)`; * Calling a method on a list to get it applied to all elements... so `cells.measurements[measurementName].average()` first extracts all the measurements, then averages them; * Sneakily applying a `setClassifications()` again by accessing it like a property - and using collection concatenation with `=+` to join the old classifications to the new ones; * this works in the opposite direction, with `-=` to remove one or more classifications. The changes have been made without introducing any changes to QuPath's data files, since `PathClass` and `MeasurementList` are still doing the main work, it's just that there are now alternative ways to interact with them. They are designed to map well with Groovy tricks, while still behaving sensibly from Java. There are a few outstanding questions to be resolved, including:; * how much should classification names be validated?; * should duplicate classification names be permitted?. Duplicate names are currently allowed, but can also easily be restricted, e.g. see; ```groovy; // Add the same class multiple times; def p = getSelectedObject(); for (int i = 0; i < 10; i++) {; p.classifications += ['Class 1']; }; println p.classifications. // Calling this enforces uniqueness; p.classifications = p.classifications as Set; println p.classifications. fireHierarchyUpdate(); ```; which prints; ```; INFO: [Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1]; INFO: [Class 1]; ```. **If anyone wants to try the PR, I'd appreciate feedback - or any bugs or things I've failed to think about**",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235:3041,validat,validated,3041,https://qupath.github.io,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235,1,['validat'],['validated']
Security,"reader should support accessing only one `series`. Possibly - it is one option to overcome the issue. Currently, the implementation of `BioFormatsReaderWrapper` in this PR has two `getPixelValues()` methods. One of them sets the series and then resets it back to its original value, the other sets it but doesn't reset it. Without the reset, then the reader has changed into a different state - and the values returned by any call that requests metadata from the reader are subject to giving different results *(example at the end of this post)*. Additionally, both methods are potentially broken in a multithreading context because there is no synchronization done on the reader. . Excessive synchronization could harm performance. Forbidding the series and ID to be changed anywhere inside the class - *and* forbidding the reader from being accessed outside (i.e. not providing a `getReader()` option) - would reduce the need for synchronization, but probably not eliminate it because I am not sure that Bio-Formats guarantees that pixels can be accessed simultaneously from different threads even if the series and ID aren't changed. The alternative is to synchronize everything that uses the reader, and then taking care to design the class in such a way that it's not possible to get around the synchronization. To do that, the `getReader()` option should again be removed. A third option is to make the class *really* minimal and keep the `getReader()` option - but document that it is entirely up to the caller what they do with the reader, and they must take care of synchronization etc. The third option puts much more responsibility on the caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileReque",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:1759,access,accessed,1759,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['access'],['accessed']
Security,"rivate bytes""): 6219M, peak: 6444M. vm_info: OpenJDK 64-Bit Server VM (17.0.8+7) for windows-amd64 JRE (17.0.8+7), built on Jul 18 2023 21:02:32 by ""admin"" with MS VC++ 16.7 (VS2019). END. From: Pete ***@***.***>; Sent: Thursday, November 2, 2023 2:08 PM; To: qupath/qupath ***@***.***>; Cc: Farias Da Guarda, Suzete Nascimento ***@***.***>; Mention ***@***.***>; Subject: Re: [qupath/qupath] Load training in object classifier -> QuPath crashes (#493). External Email - Use Caution. @suzeteguarda<https://secure-web.cisco.com/15zJZ1AC2HfUFv9L0mLItqMCfEQMcq1aVBJmggNtWQuQ1aMdkxQL4M8DQsziZIjbQclRsiUgnd4btBVr7WmNM9GAmb5IdGegWqzsNoLW7i0t8ZduDtcd418DQ9BIIDpRAJC02UjlE2keamNPfGPyTA13hxoJ6aI6fRjs8P6PPD3ag1gjsZJuHqXh28XIp9ClIy6uiD9WiE2a29pnEogefoBAUSjm8iBfMR0HcxqAtG_TdnAk0f4Y8BA4E5sVwzFhbDhm_alns-l7jx4c65825lN1brlaamgEFYOcr-bx0yB5-ONuFLKVRdD6nCGWcI1iPAsoohE7nnVhyPIYtURWpKQ/https%3A%2F%2Fgithub.com%2Fsuzeteguarda> you could try posting your question on the forum at https://forum.image.sc/tag/qupath<https://secure-web.cisco.com/13_E9lRMQxY8xtZmKYPnw2mmwaiElPiHzTIMUOwQH_-6FzgRz4LkCsf_cFjrfUWLwo9750a0MmRr_eXTVN0eusQkomn-qYLuoCcVIKhtD0lyGLisH8Fxc-WFZwGzOR3GcJ4WLvQ2nVTFF7JEFSGly69C9pq9zGxJ69U6IM5ck9ofp9vkUV14NNMWH0h1u9pMUi3qXwaLEHdnCfRaAU7pipTjdj7etnYxMl6fke2A03VF49uEY6P4XmHIM3ote076fSVZpQqVTzYq0orKjFBwoKIbptcmC4XxHSSCRt900YIULIVQAtzU62qtHv_TEqaLa9vgoz2qhsY9NbYDfMfFPtA/https%3A%2F%2Fforum.image.sc%2Ftag%2Fqupath>. The error is that there isn't enough memory, but without having the classifier and knowing how much memory you have, I can't really guess what could be responsible. (This topic is really about loading training data to create classifiers, not classifiers themselves, so I will hide these posts to avoid distraction). —; Reply to this email directly, view it on GitHub<https://secure-web.cisco.com/1S_KCvGqBkfLiU4jUNxk9Bycpt04YwO2EwOrgjo7gUjY2EmjAMNPYCK9KZ3g1BcPOjN1yFkyZLgJnmGWBrpfDiblAR5l3lwK7LfMcHNHJqtYoWGQYJ9WYQ6dCoewz0Xk9P5-ZDRFW4OknOTxChetxm4Bs7LEng-ebDLB6a6AAXrEy8mWNCALTRoJs81H",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738:1860,secur,secure-web,1860,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-1791396738,1,['secur'],['secure-web']
Security,"rying to double click on a cell in the viewer to see values. After this happens, any interaction with the viewer results in the same Exception spam popup in the corner of the program. The popup itself says Stack Overflow. > ; > qupath.imagej.detect.cells.SubcellularDetection {""detection[Channel 1]"": 2000.0, ""detection[Channel 2]"": 2000.0, ""detection[Channel 3]"": -1.0, ""doSmoothing"": false, ""splitByIntensity"": false, ""splitByShape"": true, ""spotSizeMicrons"": 1.0, ""minSpotSizeMicrons"": 0.5, ""maxSpotSizeMicrons"": 2.0, ""includeClusters"": true}; > INFO: Processing complete in 34.46 seconds; > INFO: Completed!; > INFO: ; > qupath.imagej.detect.cells.SubcellularDetection {""detection[Channel 1]"": 2000.0, ""detection[Channel 2]"": 2000.0, ""detection[Channel 3]"": -1.0, ""doSmoothing"": false, ""splitByIntensity"": false, ""splitByShape"": true, ""spotSizeMicrons"": 1.0, ""minSpotSizeMicrons"": 0.5, ""maxSpotSizeMicrons"": 2.0, ""includeClusters"": true}; > ERROR: QuPath exception; > at javafx.scene.Node.access$100(Node.java:398); > at javafx.scene.Node$1.doMarkDirty(Node.java:424); > at com.sun.javafx.scene.NodeHelper.markDirtyImpl(NodeHelper.java:158); > at com.sun.javafx.scene.shape.ShapeHelper.markDirtyImpl(ShapeHelper.java:80); > at com.sun.javafx.scene.NodeHelper.markDirty(NodeHelper.java:98); > at javafx.scene.shape.Shape$2.invalidated(Shape.java:463); > at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112); > at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); > at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); > at javafx.css.StyleableObjectProperty.applyStyle(StyleableObjectProperty.java:68); > at javafx.scene.shape.Path.<init>(Path.java:139); > at impl.org.controlsfx.skin.BreadCrumbBarSkin$BreadCrumbButton.createButtonShape(BreadCrumbBarSkin.java:324); > at impl.org.controlsfx.skin.BreadCrumbBarSkin$BreadCrumbButton.updateShape(BreadCrumbBarSkin.java:298); > at impl.org.controlsfx.skin.BreadCrumbBarSk",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/307#issuecomment-484622516:1175,access,access,1175,https://qupath.github.io,https://github.com/qupath/qupath/issues/307#issuecomment-484622516,1,['access'],['access']
Security,"s modular design is a work-in-progress, but it is essential to keep the design coherent/improve it where possible. `ImageDisplay` requires JavaFX. That means that using it in *any* module will bring in a (quite huge) JavaFX dependency to that module. That means the core modules (which are currently completely ignorant of JavaFX) cannot use `ImageDisplay`... or they suddenly become dependent upon a whole host of other stuff. This is problematic if wanting to use some QuPath jars in other contexts in the future. Of course, `ImageData` exists in a core module. Currently, these means that if serializing the `ImageDisplay` inside the `ImageData`, the `ImageData` ends up storing a JSON version of something that it cannot possibly de-json-ify. This is tolerable, but not ideal. More critically, it also means that nothing in core modules can really work with the current display or channel settings. Perhaps they would like to, e.g. to export RGB image regions. Ideally this would not be restricted to modules that have JavaFX access. It also complicates things like the ImageJ macro runner... currently, this can either be free from JavaFX or capable of incorporating color transforms/channel info - but not both. There are good reasons to want both https://github.com/qupath/qupath/issues/68. Also, it means that changing the brightness and contrast ultimately requires deserializing/serializing the whole data file - which might be large. There are likely far better/more efficient/faster ways to store these settings in a project, not the data file. This would not only be arguably a a better design, but it would also make updating this information for 10,000 images almost instantaneous. I have made some progress in parts of this, because I needed a way to have JSON-serializable color transforms separate from the GUI in order to support stain separation in the pixel classifier and thresholder.... which was needed [to make the sluggish and limited 'Positive pixel counter' unnecessary](ht",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:1419,access,access,1419,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,1,['access'],['access']
Security,"second ""mergeSelectedAnnotations();"" after ; resetSelection();; selectObjects { p -> p.getPathClass() == getPathClass(""NAMEofCLASS"") };. ERROR: Error at line 27: null. ERROR: Script error; at java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:719); at java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:742); at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1042); at qupath.lib.scripting.QPEx.mergeAnnotations(QPEx.java:320); at qupath.lib.scripting.QPEx.mergeSelectedAnnotations(QPEx.java:353); at qupath.lib.scripting.QPEx.mergeSelectedAnnotations(QPEx.java:309); at qupath.lib.scripting.QPEx$mergeSelectedAnnotations$0.callStatic(Unknown Source); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:56); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:194); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:198); at Script132.run(Script132.groovy:28); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:765); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:695); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:677); at qupath.lib.scripting.DefaultScriptEditor.access$400(DefaultScriptEditor.java:136); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1029); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354857398:2121,access,access,2121,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354857398,1,['access'],['access']
Security,"specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats extension, then that postpones the immediate need to solve the problem of accessing native libraries; at least, you should be able to open the formats supported by Bio-Formats so long as QuPath can find the Bio-Formats jar file. Still, you won't be able to use OpenSlide or any commands reliant on OpenCV (including the Wand tool). The easiest way to get the native libraries to work is generally to copy them to the directory from which you run the application i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:1799,access,accessible,1799,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['access'],['accessible']
Security,"st handy feature when tweaking a classifier. If that option was removed, it would be unfortunate. -------------------------. However i think you missed a point. The major issue this PR wants to address is the ability to a script in batch as fast as possible (and when it is possible); > an alternative approach [...] that doesn't involve any big API changes - and which can be used when you can know in advance that the image doesn't need to be accessed. Just to be clear, this PR's only API change is adding in [`ProjectImageEntry.java:L195`](https://github.com/qupath/qupath/pull/1488/files#diff-14ed5cabf5566ab4eb5d1ae31a25d75c8dd49e3c50e1cc05ce10ff21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. > Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. Basically All you the above. It accesses ~50 `.czi` images, weighting ~10GiB each. Leaving the the big size aside, it's also known that BioFormats themselves (required by `.czi`) are slow to work with.; Adding up to this scenario, images are often stored on a remote server (be it OMERO or just a sftp/samba server). This is due to the fact that it is hard for every member of a laborato",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:1722,access,accessed,1722,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['access'],['accessed']
Security,"t include any code that directly relates to the GPU - everything happens through OpenCV/JavaCPP (and sometimes also PyTorch/TensorFlow/DJL). If you search for `the provided PTX was compiled with an unsupported toolchain` you should find lots of discussions separately from QuPath; it seems that the issue is normally related to the driver. I tried to replicate the issue with the only Windows computer I have access to (including a GeForce 1060) and could not - it runs without errors, and `DnnTools.isCudaAvailable()` returns true. > Given that issue https://github.com/qupath/qupath/issues/841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?. I don't think that can be relevant here. I'm not sure that there is any bug here that can be fixed within QuPath. I have seen such error messages before, but the solution was always to update my graphics card driver. Have you tried this?. Note that QuPath v0.4.0 gives a range of options for deep learning, but CUDA incompatibilities will mean that probably not all can work at once (e.g. I could get PyTorch with GPU acceleration today by installing CUDA 11.7, but TensorFlow seems to require 11.3... I'm not sure there's a combination that gets both working together). I don't see that there's really anything much more we can do apart from simply removing the option of GPU acceleration altogether and not documenting it as an option - but that seems a shame when often it does work. > I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Because QuPath doesn't directly access the GPU, please check the .jar files within each installation. I don't know what the problem could be, unless it is somehow related to the inclusion of some Deep Java Library dependencies - or if you have other extensions installed that are conflicting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127:1754,access,access,1754,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127,1,['access'],['access']
Security,"tDispatcher.java:56); at; com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at; com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at; com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at; com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at; com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). On Mon, Apr 26, 2021 at 1:07 AM Pete ***@***.***> wrote:. > @subanookala <https://github.com/subanookala> Please post questions on; > the forum at http://forum.image.sc/tag/qupath and provide more detail; > (you may find a more complete error message under *View → Show log*).; >; > —; > You are receiving this because you were mentioned.; > Reply ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:5319,Access,AccessController,5319,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['Access'],['AccessController']
Security,"tance(DelegatingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getInstalledImageServerBuilders(ImageServerProvider.java:84); at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1198); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:723); at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:473); at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:846); at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:455); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); at java.base/java.security.AccessController.doPrivileged(Native Method); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:427); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Thread.java:834); INFO: If you want to use OpenSlide, you'll need to get the native libraries (either building from source or with a packager manager); and add them to your system PATH, including openslide-jni.; INFO: Selected style: null; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; INFO: TiffDelegateReader initializing /home/joelrv/Downloads/RK_HE.ptif; INFO: Reading IFDs; INFO: Populating metadata; INFO: Checking comment style; INFO: Populating OME metadata; INFO: No memoization file generated for /home/joelrv/Downloads/RK_HE.ptif; INFO: Returning server: B",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:2579,secur,security,2579,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,1,['secur'],['security']
Security,tchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). 2. how precisely did the abnormal shutdown occur?. I had a VPN connection with my pc in the office and then somebody else logged in to the machine and I got logged out. The VPN connection is via a .rdp file where I can just use my home screen/pc as a window to my office pc (is this clear?). 3. can you give precise steps to replicate the ,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:4441,secur,security,4441,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['secur'],['security']
Security,"thanks for link and idea. ; I personally do not have access to this computer. Pity :); But what I remember is, that for example the person who installed QuPath deleted the QuPath folder in the user folder. ; As far as I understood the text in the linked page, that seems not to be the reason. But maybe he changed also something else that I did not find. . In case I find the reason, I will post it here. . For now, the person in charge seems to prefer just to reinstall and see what happens.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-391974886:53,access,access,53,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-391974886,1,['access'],['access']
Security,"this is the minimum example I could write:. ```groovy; import com.google.gson.Gson; import com.google.gson.stream.JsonReader; import qupath.lib.objects.classes.PathClass. String json = ""{ \""name\"": \""Example\"", \""parentClass\"": {\""name\"": \""Parent\""}, \""colorRGB\"": 0}"";; JsonReader jin = new JsonReader(new StringReader(json));; Gson gson = new Gson();; PathClass pathClass = gson.fromJson(jin, PathClass.class);; pathClass = PathClass.getSingleton(pathClass);; PathClass parent1 = pathClass.getParentClass();; PathClass parent2 = PathClass.fromString(""Parent"");; println(""getSingleton: ""+parent1.hashCode()+"" (""+parent1+"")"");; println(""fromString: ""+parent2.hashCode()+"" (""+parent2+"")"");; println(""Are equal: ""+(parent1===parent2)); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670199442:598,hash,hashCode,598,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670199442,2,['hash'],['hashCode']
Security,"thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats extension, then that postpones the immediate need to solve the problem of accessing native libraries; at least, you should be able to open the formats supported by Bio-Formats so long as QuPath can find the Bio-Formats jar file. Still, you won't be able to use OpenSlide or any commands reliant on OpenCV (including the Wand tool). The easiest way to get the native libraries to work is generally to copy them to the directory from which you run the application in the first place. You should be able to find the libraries by looking within an existing QuPath installation, or downloading the binaries for Windows from the OpenSlide/OpenCV websites. But for running from within an IDE, I have only set this up with Eclipse to date and don't know the specifics of getting it to work elsewhere. Finally, I've no doubt that the project could be structured in a way that makes it easier to use different IDEs. The combination of Java 8, JavaFX, Maven, Ant and native libraries makes it more difficult than a project using Java alone, and there wasn't previously a critical need. Still, the portability",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:2400,access,accessing,2400,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['access'],['accessing']
Security,"tive Method). at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941). at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857). at java.lang.Runtime.loadLibrary0(Runtime.java:870). at java.lang.System.loadLibrary(System.java:1122). at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59). at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72). at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116). at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1093). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:637). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:429). at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63). at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863). at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326). at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295). at java.security.AccessController.doPrivileged(Native Method). at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294). at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95). at com.sun.glass.ui.win.WinApplication._runLoop(Native Method). at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177). at java.lang.Thread.run(Thread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:1145,Access,AccessController,1145,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,1,['Access'],['AccessController']
Security,"uble threshold = cells.measurements[measurementName].average(); ; // Append a classification to all the cells above the threshold; cells.each { cell ->; if (cell.measurements[measurementName] > threshold); cell.classifications += [classificationName]; }; }. // Figure update (could do this automatically...); fireHierarchyUpdate(); ```. Closer inspection reveals a few Groovy tricks at work:. * `List.each { }` as a shorter alternative to for loops; * Avoid explicitly calling getters (e.g. `channel.name` rather than `channel.getName()`, `cell.measurements` rather than `cell.getMeasurements()` or - previously in QuPath - `cell.getMeasurementList()`; * Getting from a map using `map[key]` syntax (rather than `map.get(key)`; * Calling a method on a list to get it applied to all elements... so `cells.measurements[measurementName].average()` first extracts all the measurements, then averages them; * Sneakily applying a `setClassifications()` again by accessing it like a property - and using collection concatenation with `=+` to join the old classifications to the new ones; * this works in the opposite direction, with `-=` to remove one or more classifications. The changes have been made without introducing any changes to QuPath's data files, since `PathClass` and `MeasurementList` are still doing the main work, it's just that there are now alternative ways to interact with them. They are designed to map well with Groovy tricks, while still behaving sensibly from Java. There are a few outstanding questions to be resolved, including:; * how much should classification names be validated?; * should duplicate classification names be permitted?. Duplicate names are currently allowed, but can also easily be restricted, e.g. see; ```groovy; // Add the same class multiple times; def p = getSelectedObject(); for (int i = 0; i < 10; i++) {; p.classifications += ['Class 1']; }; println p.classifications. // Calling this enforces uniqueness; p.classifications = p.classifications as Set; pr",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235:2405,access,accessing,2405,https://qupath.github.io,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235,1,['access'],['accessing']
Security,"ullObject.invokeMethod(NullObject.java:91); at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:48); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.NullCallSite.call(NullCallSite.java:35); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:117); at Script1.run(Script1.groovy:18); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:343); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:152); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:757); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:687); at qupath.lib.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:669); at qupath.lib.scripting.DefaultScriptEditor.access$3(DefaultScriptEditor.java:659); at qupath.lib.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:979); at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); at java.util.concurrent.FutureTask.run(FutureTask.java:266); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745). I should say that I wasn't able to copy libjep.jnilib as it doesn't exist on my system, instead it's called libjep.so. I don't know if that might be causing some problem. . I am quite keen to run some python image processing code that I have via QuPath so I will keep on helping with this if I am able. Just getting the jep connection running would let me see if I can begin to work on wrapping/exchanging data issues. Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262778143:1377,access,access,1377,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262778143,1,['access'],['access']
Security,"use you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/249#issuecomment-442877107>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ArWoyy9fQqh1OZIfaIx3IN1LUJdlXAEKks5uz_51gaJpZM4Y5w90>. La presente comunicazione, che potrebbe contenere informazioni riservate e/o protette da segreto professionale, è indirizzata esclusivamente ai destinatari della medesima qui indicati. Ogni informazione qui contenuta, che non sia relativa alla nostra attività caratteristica, deve essere considerata come non inviata. Nel caso in cui abbiate ricevuto per errore la presente comunicazione, vogliate cortesemente darcene immediata notizia, rispondendo a questo stesso indirizzo di e-mail, e poi procedere alla cancellazione di questo messaggio dal Vostro sistema. E' strettamente proibito e potrebbe essere fonte di violazione di legge qualsiasi uso, comunicazione, copia o diffusione dei contenuti di questa comunicazione da parte di chi la abbia ricevuta per errore o in violazione degli scopi della presente. Ricordiamo che la tecnologia di trasmissione utilizzata non consente di garantire l’autenticità del mittente né l’integrità dei dati. This communication, which may contain confidential and/or legally privileged information, is intended solely for the use of the intended addressees. All information or advice contained in this communication is subject to the terms and conditions provided by the agreement governing each particular client engagement. If you have received this communication in error, please notify us immediately by responding to this email; then please delete it from your system. Any use, disclosure, copying or distribution of the contents of this communication by a not-intended recipient or in violation of the purposes of this communication is strictly prohibited and may be unlawful. The transmission technology used to send this mail can grant neither the sender identity nor the data integrity",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/249#issuecomment-442919733:1989,confidential,confidential,1989,https://qupath.github.io,https://github.com/qupath/qupath/issues/249#issuecomment-442919733,2,"['confidential', 'integrity']","['confidential', 'integrity']"
Security,"ve Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1099); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:645); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:437); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:748); 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 13:20:08.246 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 13:20:08.256 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 13:20:17.509 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Calling Platform.exit();; ```. In Centos 6, I found some information about the error message ""j java.lang.Object.<clinit>()V+0"" : this may be a stack problem. I tried to change the thread ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368857650:1960,secur,security,1960,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368857650,1,['secur'],['security']
Security,"ve Method); 	at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941); 	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857); 	at java.lang.Runtime.loadLibrary0(Runtime.java:870); 	at java.lang.System.loadLibrary(System.java:1122); 	at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:60); 	at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:73); 	at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:120); 	at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1092); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:633); 	at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:418); 	at qupath.lib.gui.QuPathApp.start(QuPathApp.java:59); 	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$106(LauncherImpl.java:863); 	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$119(PlatformImpl.java:326); 	at com.sun.javafx.application.PlatformImpl.lambda$null$117(PlatformImpl.java:295); 	at java.security.AccessController.doPrivileged(Native Method); 	at com.sun.javafx.application.PlatformImpl.lambda$runLater$118(PlatformImpl.java:294); 	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:39:38.754 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Dark; 02:39:38.757 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 02:39:38.781 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 02:39:38.837 [JavaFX Application Thread] [INFO ] q.lib.gui.helpers.DisplayHelpers - QuPath Notice: This is a pre-release version of QuPath; Version: 0.0.6; Build time: 2016-11-16, 15:54; 02:40:13.093 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideServe",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:2571,secur,security,2571,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['secur'],['security']
Security,vent.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3890); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:277); at java.base/java.lang.Thread.run(Unknown Source); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-631377861:3722,secur,security,3722,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-631377861,2,"['Access', 'secur']","['AccessController', 'security']"
Testability," > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `getImage(int series)`, and so having a separate API that assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `HnE_3_1x1component_data.tif` example, we don't know for sure what. I think we should go back to thinking about the *ideal* design here, based upon what needs to be reusable - and also what are the simplest and safest changes that can be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about ab",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:3623,log,logic,3623,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['log'],['logic']
Testability," be breaking... and when a path needs to be found through the pain (e.g. the ability to import images from v0.1.2 projects to v0.2.0). When it's in the public API, we have no idea how it is used or the implications of our changes. Because the scripting approach I proposed only uses `ImageDisplay` internally, so long as any improved approach is capable of supporting a method that does the same thing then we're free to change the method in `QPEx` without worrying about breaking things for anyone else. We can even move it up into `QP` so that it works without knowing anything about the viewer at all. I think that as a compromise this is more than fair. It means you get the outcome you want, and we did not have to compromise to do something that I strongly believe will end up wasting a lot of time in the future (be that mine or someone else's). QuPath remains a 0.x.x release and so the API shouldn't be interpreted as stable. I don't encourage writing extensions for that reason. But I do recognise that extensions are important, and so if someone wants to do it (aware of the risks) then it is supported. I hope that more clearly explains my logic. Since it feels like we've discussed this subject many times, I thought I should be thorough in this answer. Now I've no time to shorten it.... I hope it is useful. v0.2.0 has been a rather... intense experience. Pretty much the entire software has been rewritten, while still trying to keep it basically functional and respond to the ever-increasing questions and requests from users. Sometimes it gets exhausting. QuPath is by no means finished, but I do think it is substantially better and more coherent than it previously was. The goal of v0.2.0 was to get decent foundations as quickly as possible - but the task turned out to be huge. The importance of many of the new features will only become clear in future releases. v0.3.0 won't have so many milestones, and I hope will mark the start of a more sustainable development approach...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:5887,log,logic,5887,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,1,['log'],['logic']
Testability," helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel, boolean isRGB, ColorModel colorModel)` function to `ReaderPool`?. > Associated images can sometimes be very big - even pyramidal or with multiple channels. So the logic for reading them doesn't have to be fundamentally different to the logic for reading other images. From a Bio-Formats perspective, you might just request the image for a different series. I'm not sure I understood this point.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:3292,log,logic,3292,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,3,['log'],['logic']
Testability," issue seems to go back to; > preloading... and it was documented all along in the JEP wiki at; > https://github.com/mrj0/jep/wiki/Linux#ld_preload; >; > The way I got it to work was by copying the file identified by; >; > which jep; >; > into the base QuPath directory (which contains the launcher) and then; > modifying it. You can see more about the original contents of this file; > here <https://github.com/mrj0/jep/blob/master/src/scripts/jep>.; >; > The end result is that I launched QuPath with the following:; >; > #!/bin/sh; >; > VIRTUAL_ENV=export VIRTUAL_ENV; >; > LD_LIBRARY_PATH=""/usr/lib:/usr/local/lib/python2.7/dist-packages/""; export LD_LIBRARY_PATH; > LD_PRELOAD=""/usr/lib/x86_64-linux-gnu/libpython2.7.so""; export LD_PRELOAD; > if test ""x$VIRTUAL_ENV"" != ""x""; then; > PATH=""$VIRTUAL_ENV/bin:$PATH""; > export PATH; > PYTHONHOME=""$VIRTUAL_ENV""; > export PYTHONHOMEfi; >; > cp=""/usr/local/lib/python2.7/dist-packages/jep/jep-3.6.1.jar""if test ""x$CLASSPATH"" != ""x""; then; > cp=""$cp"":""$CLASSPATH""fi; >; > jni_path=""/usr/local/lib/python2.7/dist-packages/jep""; >; > DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""; > exec java -Xmx4G -classpath ""$cp:${DIR}/app/QuPathApp.jar"" -Djava.library.path=""$jni_path:${DIR}:${DIR}/app"" qupath.QuPath; >; > After doing this, the Groovy script for testing JEP worked without; > problems.; >; > One thing in particular to note is the use of -Xmx4G to set the maximum; > memory to 4GB on my (virtual) machine... it would be good to modify this as; > required, as the built-in method is modifying the maximum memory within; > QuPath won't work when it's launched in this way.; >; > I've only tested this in Ubuntu, but hopefully it works for you too.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/27#issuecomment-264693922>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/APkEati9u5U4I6W4lEmcAFz8NqY",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264698049:1315,test,test,1315,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264698049,1,['test'],['test']
Testability," square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2644,log,logic,2644,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['log'],['logic']
Testability, this will fail! Probably at the 'test' stage.; Requesting TensorFlow (CPU) subproject; Copying license directories:; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-bioformats\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-openslide\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-pen\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-svg\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. FAILURE: Build failed with an exception. * Where:; Build file 'C:\Users\IT-bruker\Documents\GitHub\qupath\build.gradle' line: 569. * What went wrong:; A problem occurred evaluating root project 'qupath'.; > Could not resolve all files for configuration ':runtimeClasspath'.; > Could not find tensorflow-1.15.2-1.5.3-windows-x86.jar (org.bytedeco:tensorflow:1.15.2-1.5.3).; Searched in the following locations:; https://repo.maven.apache.org/maven2/org/bytedeco/tensorflow/1.15.2-1.5.3/tensorflow-1.15.2-1.5.3-windows-x86.jar; > Could not find mkl-dnn-0.21.4-1.5.3-windows-x86.jar (org.bytedeco:mkl-dnn:0.21.4-1.5.3).; Searched in the following locations:; https://repo.maven.apache.org/maven2/org/bytedeco/mkl-dnn/0.21.4-1.5.3/mkl-dnn-0.21.4-1.5.3-windows-x86.jar. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 7s. C:\Users\IT-bruker\Documents\GitHub\qupath>,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630948935:2838,log,log,2838,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630948935,1,['log'],['log']
Testability," your files. Without actual specifics (e.g. an example file), I don't see why you should assume the 'bug' is in QuPath and not elsewhere. OpenSlide only sets the bounds for a subset of file formats, so most shouldn't be affected anyway. I've only seen it for scn and mrxs, which are the two formats mentioned in the commit that makes the bounds available: https://github.com/openslide/openslide/commit/421cb647acdc8fe35e33c2683949f5098925c8ac. Note my comment above about 'cropping' being arguably the same as 'not padding'... one could argue that QuPath simply removes the padding that OpenSlide has added, because [the bounds define where there is pixel data](https://github.com/openslide/openslide/issues/424#issuecomment-1382416341). QuPath aims to read the pixels from an image consistently, regardless of whether OpenSlide is used or not. As a specific example from my side, see the image `Leica-1.scn` from the OpenSlide freely-distributable data:; https://openslide.cs.cmu.edu/download/openslide-testdata/Leica/. Screenshots below show the image with a full image annotation within QuPath. ## Bio-Formats; <img width=""939"" alt=""SCN-Bio-Formats"" src=""https://github.com/qupath/qupath/assets/4690904/039b2449-5c20-4b93-a4af-d65928324a50"">. ## OpenSlide (default, cropped to bounds); <img width=""941"" alt=""SCN-OpenSlide"" src=""https://github.com/qupath/qupath/assets/4690904/771af2d0-2dcb-44ee-95e6-31ff62f0f7e2"">. ## OpenSlide (with `--no-crop` arg); <img width=""941"" alt=""SCN-OpenSlide-no-crop"" src=""https://github.com/qupath/qupath/assets/4690904/3cf52a48-ca91-4dff-8eb4-7e299d851b3e"">. The size is identical when read using QuPath v0.4.3 when using either OpenSlide or Bio-Formats by default (no extra arguments passed to either). Explicitly passing the `--no-crop` arg causes QuPath to ignore what OpenSlide considers to be bounds, and generate a much larger image with extreme padding that causes both much higher memory use and can thwart processing tasks like thresholding or pixel classif",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660:1224,test,testdata,1224,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660,1,['test'],['testdata']
Testability,"* convenience as I don't scroll the image side to side (I use the move tool) and prefer using the mouse wheel for zooming. > I think (but haven't thoroughly checked) that the middle button should be less troublesome, partly because Mac mice don't have middle buttons. Of the two proposed changes (side to side tool selection, middle button to come back to the previously selected tool), the middle button is the one I would say is the more useful one. > But I remain a bit apprehensive about needing a debounce delay, and worry about adding even more complexity to the various event filters and handlers that are active when interacting with the viewer. I agree that debounce should really be part of the OS. QuPath shouldn't be blamed for not working quite right with a broken mouse. > Can you say a bit more about how useful you've found this, and when?. * First the one I found most useful: For me, this feature really shines when I need to draw lots of small regions for a pixel classifier. I draw either rectangles or use the polygon tool and yes, I could just try and remember that ""m"" is for move, ""r"" is for rectangle and ""p"" is for polygon. From my testing, I just find using the middle button more practical.; * Side-to-side selection: That came as an afterthought after implementing the middle button. I then use it because it's there, but honestly, the keyboard shortcuts *do* make sense.; * Debounce: Like I said, it helps with worn out buttons, but this isn't normally something anyone will have issues with. I'll keep it at the back of my mind and let you know if there is a real test case for including it in QuPath. > The option remains to add the functionality through an extension or startup script, to give it a bit more time before possibly integrating it into the core software later. I'm all for this. What I can do now is scale back the PR to ""middle button functionality"" (no side-to-side or debounce), and also remove any logging that isn't strictly necessary. Cheers,; Egor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1312815565:2060,test,testing,2060,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1312815565,3,"['log', 'test']","['logging', 'test', 'testing']"
Testability,-0.1.2/deploy/jars/ij-1.51g.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-common-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-menu-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-2.0.6.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jutils-1.0.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-classic-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-core-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/reactfx-2.0-M4u1.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/richtextfx-0.6.10.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/slf4j-api-1.7.20.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/undofx-1.2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/wellbehavedfx-0.1.1.jar:./ QuPath -,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420540074:2685,log,logback-core-,2685,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420540074,1,['log'],['logback-core-']
Testability,-0.1.2/deploy/jars/ij-1.51g.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-common-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-menu-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-2.0.6.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jutils-1.0.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-classic-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-core-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/reactfx-2.0-M4u1.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/richtextfx-0.6.10.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/slf4j-api-1.7.20.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/undofx-1.2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/wellbehavedfx-0.1.1.jar:./ QuPath 3,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420486003:2680,log,logback-core-,2680,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420486003,1,['log'],['logback-core-']
Testability,". We now have a pretty general way to support deep learning via [`DnnModel`](https://github.com/qupath/qupath/blob/4eb74946602d8df605402909c753fca027fa3c26/qupath-core-processing/src/main/java/qupath/opencv/dnn/DnnModel.java). I'm sure the design will need to be improved in the future, but the general idea is to try to require as little as possible to implement a new deep learning extension: basically, implement `DnnModel` and (ideally) also register it with `GsonTools`.; [Here](https://github.com/qupath/qupath-extension-tensorflow/blob/main/src/main/java/qupath/ext/tensorflow/TensorFlowExtension.java#L46) is where that happens for TensorFlow. [StarDist](https://github.com/qupath/qupath-extension-stardist) is now also in its own extension; the builder can take a `DnnModel` as an input as an alternative to a path, so it's relatively easy to add an alternative way or using the model. There's no longer any need to build QuPath from source because [OpenCV can be used instead](https://qupath.readthedocs.io/en/stable/docs/advanced/stardist.html). The main reason for all this is that it will make it much easier to use deep learning models within QuPath in different ways, e.g. for object classification, or for semantic segmentation as a drop-in replacement for a pixel classifier. In fact, as long as DnnModel is JSON-serializable (ideally just requires a URI) then this already works, but the process needs to be cleaned up and documented. In the meantime, there are a few videos showing U-Net as live pixel classifier [here](https://twitter.com/petebankhead/status/1406856875732258821?s=20). @dkurt I completely understand if you've lost interest in this after all this time, but if you ever want to update your code to work as an extension in its own repo (I'll link to it) I'd love to give it a try - and I know there are [users who are very interested in benchmarking and trying to maximize StarDist performance](https://forum.image.sc/t/thoughts-on-0-3-2-rc2-with-stardist/56481) :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-912009706:2148,benchmark,benchmarking,2148,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-912009706,1,['benchmark'],['benchmarking']
Testability,".112); 	/usr/lib/libresolv.9.dylib (compatibility version 1.0.0, current version 1.0.0); 	/usr/local/opt/zstd/lib/libzstd.1.dylib (compatibility version 1.0.0, current version 1.5.5); 	/System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1690.3.3); 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 1228.0.0); 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText (compatibility version 1.0.0, current version 1.0.0); 	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0); ```; and notably `/usr/local/opt/gettext/lib/libintl.8.dylib` stops him from using it on an x86-64 machine, though this doesn't seem to be a problem on CI machines. ## Linux. The below is out dated; when dynamically linking `glib`, our binaries are fine. > While it's easy enough to get a SO of openslide with minimal dependencies (`libpcre2-8` stubbornly remains dynamically > linked), issues arise when trying to load this alongside JavaFX. Specifically, we get a glib warning followed by an error:; > ```; > (java:71634): GLib-GObject-WARNING **: 14:32:40.458: cannot register existing type 'gchar'; > **; > GLib-GObject:ERROR:../../../meson/subprojects/glib-2.72.0/gobject/gvaluetypes.c:454:_g_value_types_init: assertion failed: (type == G_TYPE_CHAR); > ```; > This is less urgent, as we can just distribute QuPath as `deb`/`rpm` packages, and specify `openslide-tools` as a dependency, as we will no longer depend on `openslide-java`. ## Plan for 0.5.0 release. - Windows will use a JAR of the OpenSlide builds, which we can extract to temp files and then load.; - Linux releases will depend on `openslide-tools`; if this is installed, then `libopenslide.so` should be on the search path.; - Mac builds will require homebrew (or similar) installs of `openslide`. However, if we could resolve the issues with the mac and Linux binaries, then i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:5619,stub,stubbornly,5619,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['stub'],['stubbornly']
Testability,.2/qupath-0.1.2/deploy/jars/gson-2.8.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/ij-1.51g.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-common-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jfxtras-menu-8.0-r5.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-2.0.6.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jutils-1.0.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-classic-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-core-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/reactfx-2.0-M4u1.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/richtextfx-0.6.10.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/slf4j-api-1.7.20.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/undofx-1.2.jar:/oamp/bio/,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420486003:2606,log,logback-classic-,2606,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420486003,2,['log'],['logback-classic-']
Testability,".fireEvent(Event.java:198); 	at javafx.scene.Scene$DnDGesture.fireEvent(Scene.java:3144); 	at javafx.scene.Scene$DnDGesture.processTargetEnterOver(Scene.java:3316); 	at javafx.scene.Scene$DropTargetListener.dragEnter(Scene.java:3024); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.lambda$handleDragEnter$0(GlassSceneDnDEventHandler.java:83); 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399); 	at com.sun.javafx.tk.quantum.GlassSceneDnDEventHandler.handleDragEnter(GlassSceneDnDEventHandler.java:77); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleDragEnter$9(GlassViewEventHandler.java:733); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleDragEnter(GlassViewEventHandler.java:732); 	at com.sun.glass.ui.View.handleDragEnter(View.java:684); 	at com.sun.glass.ui.View.notifyDragEnter(View.java:1020); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); 	at java.base/java.lang.Thread.run(Thread.java:833); 13:36:13.428 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); 13:36:13.788 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); 13:36:14.052 [JavaFX Application Thread] [ERROR] q.l.g.QuPathUncaughtExceptionHandler - setDropCompleted can be called only from DRAG_DROPPED handler (see full stack trace above, or use 'debug' log level); ```. This doesn't happen with files or lists. (actually, this happens when the dragboard has a string, because apparently dragging+dropping URLs from a web browser doesn't make them recognised as URLs by dragboard)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846:2775,log,log,2775,https://qupath.github.io,https://github.com/qupath/qupath/pull/1338#issuecomment-1727641846,3,['log'],['log']
Testability,".html. With implementing `QuPathExtension`, the `META-INF/services/qupath.lib.gui.extensions.QuPathExtension` part is crucial (see [here](https://github.com/qupath/qupath/wiki/Creating-extensions), or [this](https://docs.oracle.com/javase/tutorial/ext/basics/spi.html#implement-the-service-provider) may also help - since the general idea isn't QuPath-specific). But if you just want to access the contents of the .jar from the script, then this shouldn't be necessary. It sounds like the problem you are seeing happens inside the imported code, because if I import something that doesn't exist then at least the errors are displayed (and sensible), e.g.:; ```groovy; print 'hello'. import something.that.does.not.exist; ```; gives me; ```; ERROR: Error: startup failed:; Script18.groovy: 4: unable to resolve class something.that.does.not.exist; @ line 4, column 1.; import something.that.does.not.exist; ^. 1 error; ```. When that happens, QuPath doesn't handle such exceptions very well and I've also seen the multiple-logging problem occasionally when things go badly wrong. A recent fix I made on my fork should help address this: https://github.com/petebankhead/qupath/commit/c3f8fd49f8c14dbf7956490d2fa4f79d8e11b057. Finally, there are different ways to integrate Groovy into a Java application: http://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html; Currently, QuPath goes down the _JSR 223 javax.script API_ route to give (potentially at least) support for different scripting languages. I'm tentatively considering a switch to use _GroovyShell_ instead, which looks like it makes it easier to access other classes. I haven't yet explored the implications, but I think that Option 1) having really good Groovy support (only) would be more worthwhile than Option 2) trying to support multiple languages/syntaxes (but none of them quite as well). If you've any thoughts on that please let me know, I'd be interested in other opinions before getting too embroiled in maki",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450918869:1532,log,logging,1532,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450918869,1,['log'],['logging']
Testability,"36017664.000000, d: 1.278334e+161); xmm1 2e302d6874615075 (f: 1952534656.000000, d: 3.252889e-86); xmm2 4e203a296c6c756e (f: 1819047296.000000, d: 2.187422e+68); xmm3 642f62696c2f656d (f: 1815045504.000000, d: 3.881161e+174); xmm4 7369646572206e61 (f: 1914728064.000000, d: 8.877002e+247); xmm5 6f6d2e6362696c2f (f: 1651076096.000000, d: 5.530316e+228); xmm6 5f434c2f6e652f65 (f: 1852125056.000000, d: 7.896072e+150); xmm7 0000000000000000 (f: 0.000000, d: 0.000000e+00); xmm8 6e75007325203a73 (f: 622869120.000000, d: 1.214654e+224); xmm9 0000000000000000 (f: 0.000000, d: 0.000000e+00); xmm10 3f8eb851eb851eb9 (f: 3951369984.000000, d: 1.500000e-02); xmm11 412fa9352e9352e9 (f: 781406976.000000, d: 1.037467e+06); xmm12 43e0000000000000 (f: 0.000000, d: 9.223372e+18); xmm13 3f847ae147ae147b (f: 1202590848.000000, d: 1.000000e-02); xmm14 000000004a2c510c (f: 1244418304.000000, d: 6.148243e-315); xmm15 000000004889da70 (f: 1216993920.000000, d: 6.012749e-315); Module=/lib/x86_64-linux-gnu/libdl.so.2; Module_base_address=00007F6CE8D55000 Symbol=dlerror; Symbol_address=00007F6CE8D56470; Target=2_90_20200416_45 (Linux 4.15.0-101-generic); CPU=amd64 (8 logical CPUs) (0x3e3f99000 RAM); ----------- Stack Backtrace -----------; dlerror+0x1b2 (0x00007F6CE8D56622 [libdl.so.2+0x1622]); (0x00007F6CE5DC0575 [libj9prt29.so+0x1d575]); (0x00007F6CE5DC0906 [libj9prt29.so+0x1d906]); (0x00007F6CE64FCD87 [libj9vm29.so+0xc3d87]); (0x00007F6CE64FD37D [libj9vm29.so+0xc437d]); (0x00007F6CE64FD5B9 [libj9vm29.so+0xc45b9]); (0x00007F6CE644EFDD [libj9vm29.so+0x15fdd]); (0x00007F6CE644BB04 [libj9vm29.so+0x12b04]); (0x00007F6CE6504ED2 [libj9vm29.so+0xcbed2]); ---------------------------------------. $ ls -l /lib/x86_64-linux-gnu/libdl.so.2; lrwxrwxrwx 1 root root 13 Apr 16 2018 /lib/x86_64-linux-gnu/libdl.so.2 -> libdl-2.27.so; $ ls -l /lib/x86_64-linux-gnu/libdl-2.27.so; -rw-r--r-- 1 root root 14560 Apr 16 2018 /lib/x86_64-linux-gnu/libdl-2.27.so; ```. These two are happening on the same build randomly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642557843:2638,log,logical,2638,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642557843,1,['log'],['logical']
Testability,"85); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). 2. how precisely did the abnormal shutdown occur?. I had a VPN connection with my pc in the office and then somebody else logged in to the machine and I got logged out. The VPN connection is via a .rdp file where I can just use my home screen/pc as a window to my office pc (is this clear?). 3. can you give precise steps to replicate the issue? -> Yes I can for this one but it happened to me before and I can not replicate that anymore. . In this particular case, have VPN connection with a PC. ; Open the software; Open a project; Work on a picture in the project; Let somebody else login without login you out; Wait until this person is finished working; login yourself again; Try to continue working -> not possible, software will crash; Close software via the Task Manager; Open software and open same project; Particular picture you were working on is now no longer available. . 4. do the other images in the project work?; Yes the other images work. . Thanks! For now your quick fix has saved me a lot of time :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:5229,log,logged,5229,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,5,['log'],"['logged', 'login']"
Testability,"> ; > . > I can get things to work on Windows/Linux/Mac fine, I just can't get things to work in a portable way. Somehow we need a streamlined process of building on _all_ platforms that packages up all dependencies in a self-contained manner. using https://spack.readthedocs.io/en/latest/package_list.html . openslide and all its dependencies can be built with . spack install openslide. tested with WSL/Ubuntu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-932797893:389,test,tested,389,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-932797893,1,['test'],['tested']
Testability,"> > > Yes, looks good to me!; > > > The pull request was updated; > ; > How should I set the min width / height now on the QuPath side?. `logviewer.getWidth()` and `logviewer.getHeight()` should work",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731204742:138,log,logviewer,138,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731204742,2,['log'],['logviewer']
Testability,"> > When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it; > ; > It is used with _View → Show slide label_ - but is really only relevant for some file formats (although useful when relevant).; > ; > It's inspired by the 'associated images' provided by [OpenSlide here](https://openslide.org/api/python/#openslide.OpenSlide.associated_images) - since otherwise QuPath would have had no way to provide access to the label etc. But it doesn't map so easily to images from other readers, including Bio-Formats, which doesn't identify label images as being different. Do you know a way to test it? This *Show slide label* window always indicates ""No label available"" with the images I have. Apart from that, I think this pull request can be merged. The bio-format and omero ice image servers seem to be working with these new changes. I may still have to clean the code a bit but I think having the OMERO extension working properly is more important for now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1706263104:136,test,test,136,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1706263104,2,['test'],['test']
Testability,"> @oharismendy it sounds like in v0.2 the image is being opened with Bio-Formats. In v0.1.2 OpenSlide would have been used by default (unless you installed the Bio-Formats extension), and this flags specific images as label for a few formats (including .svs).; > ; > You can choose the image reader when importing an image to a project: https://qupath.readthedocs.io/en/latest/docs/tutorials/projects.html#add-images; > ; > Because QuPath relies upon open source image readers that support a wide range of formats, it's difficult/impossible to _know_ in all cases whether an image stored within a file as intended a 'full' image for analysis, label or macro image... particularly since different vendors write images in different ways, and we don't have specifications for the formats. It may be necessary for us to remove the label pop-up in the future, since it will inevitably fail to find a label sometimes sometimes.; > ; > Misassigning a full image as a label is a big problem, since QuPath doesn't support any analysis on labels - therefore we need to err on the side of caution.; > ; > If you can share an example image along with details of how it was written (e.g. software/scanner) then we might be able to add some logic to handle this specific case but otherwise we can only guess what a fix might be. Thanks. It makes perfect sense. I think dropping the pop-up and clarifying this label image is available under master is likely a safer way to go. Unless my issue is very rare.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-732318132:1227,log,logic,1227,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-732318132,1,['log'],['logic']
Testability,"> Although if calling either method in a script, the ambiguity and potential for confusion remains.; I had mostly been thinking about scripting. If there is no primary selected object, and getSelectedObject() is used, the script would simply break and provide an informative error message. The user is trying to do something (get a particular object) while providing insufficient information (which object? multiple are selected). I suppose there could be an even worse option where you also encode getASelectedObject() which returns the first, or largest, or some other logic. > keep the primary selected object if it's still selected in the new group, and; > set the primary selected object if there is only one object in the selection group, but not if there is more than one. I was also just thinking about this - what situations lead to there being no primary object, and could those be addressed instead?. Alternatively, specially code getSelectedObject() to allow for an array, check for an array size of 1, and handle that situation specifically if it arises. Still return null in other situations, along with an informative error message (or warning).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869219746:571,log,logic,571,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869219746,1,['log'],['logic']
Testability,"> For the order, should ""Core Extensions"" be first since this will be relevant for all users? Then filters down to those wanting to explore extensions further? I do like the idea of combining the ""Manage Extension"" section into a bar at the top of the ""User Extensions"" section. My logic was that you can't actually *do* anything with core extensions, but I remain undecided there. The rest are all good points, unlikely to be able to address them all today",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342#issuecomment-1748590254:282,log,logic,282,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342#issuecomment-1748590254,1,['log'],['logic']
Testability,> I changed it in pom.xml and opencv-stitching-jlink did work with 4.3.0-1.5.3. The stitching worked too. (I deleted the previous result first.). > Building this succeeded as well: https://github.com/bytedeco/gradle-javacpp/tree/master/samples/javacv-demo. `java -jar build/libs/javacv-demo-1.5.3.jar` does seem to do face detection correctly (only had to change 0 to 1 in `FrameGrabber.createDefault(0)` because the IR cam is the default one). > Building should work with QuPath... if it stops before running/testing. I just have no idea how to configure it correctly in `build.gradle`. (edit: typo),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633518010:510,test,testing,510,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633518010,1,['test'],['testing']
Testability,> I have the same problem with m12. At the beginning I tried to load a SCN file and it worked. After I closed the and opened the m12 version again the message poped out and I cannot run the m12 anymore. UPDATE: After another examination of the debug log I saw that the error message came after QuPath tried to load extensions. I had previously installed the Weka extension which was still in my extentions folder. I removed the weka extention and it opened without problems.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632431978:250,log,log,250,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632431978,1,['log'],['log']
Testability,"> I suppose there could be an even worse option where you also encode getASelectedObject() which returns the first, or largest, or some other logic. Hmmm, might need to think about it some more but I think that risks increasing rather than reducing complexity. I'd rather have fewer options with more predictable behavior - in rare cases where something more complex is needed, it's always possible to query all the selected objects and then filter them however you like. But I don't think that should be part of the core API. > I was also just thinking about this - what situations lead to there being no primary object, and could those be addressed instead?. `selectAnnotations()` is a good example. Basically, anything that can select multiple objects without a clear 'main' object. So if you would run another command like `selectObjects(p -> p.getPathClass() == getPathClass('Tumor'))` you'd see the same: possibly multiple objects selected, but no 'main' selection. Or, with my pull request, a 'main' selection plucked more or less randomly - *unless* only one object is available, in which case it's just what you'd expect. > Alternatively, specially code getSelectedObject() to allow for an array, check for an array size of 1, and handle that situation specifically if it arises. Still return null in other situations, along with an informative error message (or warning). Internally there is already a set of selected objects - distinct from the main selected object. However, if there is a main selected object then it should always be included in the set. I think errors/warnings need to be used very sparingly to avoid causing undue alarm. But I'm coming around to the compromise I mentioned above, which I think falls somewhere between my pull request and your original suggestion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869227006:142,log,logic,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869227006,1,['log'],['logic']
Testability,"> Is there no way to specify the _minimum_ sizes for the log viewer component, rather than relying on the preferred sizes? The preferred size could (and probably should) be larger. I tried to set the minimum size of the log viewer to its computed size, and the preferred size to something arbitrary like 800. However, `logviewer.getMinWidth()` returns -1 in that situation. A workaround would be (in the quPath side) to set the width/height of the window after setting its min width:; ```java; dialog.setMinWidth(logviewer.getPrefWidth());; dialog.setMinHeight(logviewer.getPrefHeight());. dialog.setWidth(800);; dialog.setHeight(600);; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731253836:57,log,log,57,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731253836,5,['log'],"['log', 'logviewer']"
Testability,"> Mmmm, I find I have no way to hide the unclassified TMA cores. And sorting my ascending/descending seems to only impact the two that I gave classes to - the rest remain stubbornly as they were (both before and after the classified core) - so I initially didn't think sorting was implemented. Ah yes, I think I misunderstood what my sorting logic was doing; should now be fixed. > Since we aren't dealing with NaNs, I have the feeling that string sorting would make sense here... even if that means 'Unclassified' being sorted as a string. That's intuitive to me, although it does somewhat point to the odd behaviour about unclassified things having a null class, or `PathClass.NULL_CLASS`... > And actually... what do you think about having 'Name' as another potential 'Measurement'... which we could relabel 'Sort by'? Then we could change 'Show measurement' to 'Show value' - both to save space, and because we're no longer limited to measurements. Sounds good, done. > Minor thing: when I assign a classification to a core after displaying the grid, this becomes available in the 'Classes' drop-down - which is nice. The less nice thing is that all the classes there appear deselected.... but aren't necessarily not visible. This should be fixed now, with only minor cursing at ControlsFX",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1588#issuecomment-2329158926:171,stub,stubbornly,171,https://qupath.github.io,https://github.com/qupath/qupath/pull/1588#issuecomment-2329158926,2,"['log', 'stub']","['logic', 'stubbornly']"
Testability,"> My best guess is that it's related to user permissions. But I really don't know - I haven't seen this either.; > ; > There's also one obscure tip that might be relevant at the very bottom of [this page](https://github.com/qupath/qupath/wiki/Paths-&-configuration). Basically, inside the QuPath installation there should be a file `QuPath.cfg`. You could try opening that in a plain text editor and on a line below [JVMOptions] adding `-Xmx8G` for 8 GB (for example).; > ; > I haven't tested this to check it works, but then my memory settings are being read from my preferences so I can't replicate the exact problem. I had a look in the QuPath.cfg file and reallocated the memory from 50% to 100%. ; This worked. Thanks for the help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-644769313:486,test,tested,486,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-644769313,1,['test'],['tested']
Testability,"> One option for Show/Hide would be to have the right click menu be context sensitive:; > ; > * If one or multiple classifications are selected and visible, the context menu becomes ""Hide selected classes"" (Instead of show/Hide > Hide classes in viewer); > * If one or multiple classifications are selected and hidden, the context menu becomes ""Show selected classes"" (Instead of show/Hide > Show classes in viewer). What about if multiple classifications are selected, some shown and some hidden?. I'm apprehensive about trying to make the code too clever, and confusing people more by the menu changing when they click it. If the core issue is that the common things are too hard to access, would simply moving `Show/hide` higher up the menu be a solution?. My hesitation with that is that currently the top part of the menu (above the divider) is all concerned with adding/removing classifications. So `Show/Hide` would have to go to the *very* top, to avoid interrupting this logical grouping... and, as you say, spacebar does that job, so `Add/Remove` might be needed more often.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679:980,log,logical,980,https://qupath.github.io,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679,1,['log'],['logical']
Testability,"> Related question: is the style guide for one assert, or just to test one function?. The important thing is to test one function with one set of parameters. To check the result, there is usually one `assert`, but in some situations (for example if the resulting object has no custom `equals` implementation) you can define multiple `assert`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265128232:47,assert,assert,47,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265128232,5,"['assert', 'test']","['assert', 'test']"
Testability,"> Since the recycling is really important, should you do it in a finally block?. I need to check this! An the cleaner thing as well, but for now, Fiji = Java 8, so yeah, let's see if I can avoid it. ; I'm limiting the number of reader as well, it's a property of my dataset, and it's true that limiting the number of parallel reader to around 10 usually gives the best result (usually lower than the number of cores). > One minor difference is that my version restricts creating new readers to a single background thread, since I found that sometimes (although rarely) constructing many reader simultaneously had really bad performance, as all the constructors got stuck parsing XML. Right! In bdv, a first reader is created to parse metadata and build the memo file, I guess it's similar in QuPath. Then extra readers are creating for tile reading, once the memo file is already created. . There may be some optimisation possible for these 'extra readers', since metadata is not required anymore: https://forum.image.sc/t/open-czi-in-bio-formats-large-ram-requirements/45592/5, but I did not test it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/867#issuecomment-1002527257:1093,test,test,1093,https://qupath.github.io,https://github.com/qupath/qupath/pull/867#issuecomment-1002527257,1,['test'],['test']
Testability,"> Thanks Alan! While you're there, did you happen to see if it can be set more sensible in an automatic way, as @Rylern suggested at [qupath/log-viewer#56 (comment)](https://github.com/qupath/log-viewer/issues/56#issuecomment-1723196589) ? My hard-coded values don't feel great... and, indeed, were wrong as you've shown. I actually have to perform some small changes to the LogViewer before using its preferred size. I'm looking at it right now",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1729286100:141,log,log-viewer,141,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1729286100,3,"['Log', 'log']","['LogViewer', 'log-viewer']"
Testability,"> Thanks, would you be able to provide any example tests for these functions?. Here are some for `PathObjectsTools.filterByRoiCovers()`:. ```java; public class TestPathObjectTools {; private final ROI roiRect = ROIs.createRectangleROI(1, 2, 100, 200, ImagePlane.getDefaultPlane());; 	private final ROI roiEllipse = ROIs.createEllipseROI(1, 2, 100, 200, ImagePlane.getDefaultPlane());; 	private final ROI roiDiamond = ROIs.createPolygonROI(List.of(; 			new Point2(roiRect.getBoundsX(), roiRect.getCentroidY()),; 			new Point2(roiRect.getCentroidX(), roiRect.getBoundsY()),; 			new Point2(roiRect.getBoundsX()+roiRect.getBoundsWidth(), roiRect.getCentroidY()),; 			new Point2(roiRect.getBoundsX(), roiRect.getBoundsY()+roiRect.getBoundsHeight()); 	), ImagePlane.getDefaultPlane());; 	private final ROI roiOverlaps = roiRect.translate(10, 0);; 	private final ROI roiOverlaps2 = roiRect.translate(0, 10);; 	private final ROI roiSeparate = roiRect.translate(1000, 1000);; 	private final List<ROI> allRois = List.of(roiRect, roiEllipse, roiDiamond, roiOverlaps, roiOverlaps2, roiSeparate);; 	private final List<PathObject> pathObjects = allRois; 			.stream(); 			.map(PathObjects::createDetectionObject); 			.toList();. 	@Test; 	void Check_ROIs_Covered_By_Rectangle() {; 		List<ROI> expectedRois = List.of(roiRect, roiEllipse, roiDiamond);. 		List<ROI> coveredROIs = PathObjectTools.filterByRoiCovers(roiRect, pathObjects).stream().map(PathObject::getROI).toList();. 		assertEquals(expectedRois, coveredROIs);; 	}. 	@Test; 	void Check_ROIs_Covered_By_Ellipse() {; 		List<ROI> expectedRois = List.of(roiEllipse);. 		List<ROI> coveredROIs = PathObjectTools.filterByRoiCovers(roiEllipse, pathObjects).stream().map(PathObject::getROI).toList();. 		assertEquals(expectedRois, coveredROIs);; 	}. // other ROIs...; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265155123:51,test,tests,51,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265155123,6,"['Test', 'assert', 'test']","['Test', 'TestPathObjectTools', 'assertEquals', 'tests']"
Testability,"> The stardist extension hasn't been updated for QuPath 0.6 yet. I'd suggest one of these three options:; > ; > 1. Test stardist using QuPath 0.5.1; > 2. Build the latest stardist extension from source, ideally this branch: [Update for QuPath v0.6 qupath-extension-stardist#36](https://github.com/qupath/qupath-extension-stardist/pull/36); > 3. Use the Jar file attached below in QuPath 0.6.0-rc1.; > ; > [qupath-extension-stardist-0.6.0-SNAPSHOT.zip](https://github.com/user-attachments/files/16977870/qupath-extension-stardist-0.6.0-SNAPSHOT.zip). Thanks @alanocallaghan . The new jar solved the issue. ; (QP 0.5.1 is working well with Stardist extension 0.5.0). best; Ofra",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1635#issuecomment-2346029465:115,Test,Test,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/1635#issuecomment-2346029465,1,['Test'],['Test']
Testability,"> When does the `getAssociatedImage(String)` function of `qupath.lib.images.servers.ImageServer` is used? I don't think I was able to test it. It is used with *View &rarr; Show slide label* - but is really only relevant for some file formats (although useful when relevant). It's inspired by the 'associated images' provided by [OpenSlide here](https://openslide.org/api/python/#openslide.OpenSlide.associated_images) - since otherwise QuPath would have had no way to provide access to the label etc. But it doesn't map so easily to images from other readers, including Bio-Formats, which doesn't identify label images as being different.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1691948394:134,test,test,134,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1691948394,1,['test'],['test']
Testability,"> Where could you find the Weka extention? thanks. For me it was in C:\Users\ (Your Name)\QuPath\extensions. It was in the 7th line of code in the debug image from my original post above. Weka is an extension that I downloaded for a previous project so it must have been outdated (as suggested by @Svidro above). I would try removing all extensions to rule out any outdated / buggy ones causing the issue. If removing all the extensions does not work, could you post a screenshot of a log after opening QuPath through the debug application?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/497#issuecomment-632435699:485,log,log,485,https://qupath.github.io,https://github.com/qupath/qupath/issues/497#issuecomment-632435699,1,['log'],['log']
Testability,"> but I guess I don't understand when and why that matters, or if the URI could simply be given in some other way?; > ; > Unfortunately, I use Windows very rarely, network shares on Windows even less, and don't know much about more exotic URIs... tbh it's the same for me. So far as I understand, it's currently impossible to use valid file URIs on windows that are not mapped to a network drive. i.e. . ```; file://networkshare/c$/file.svs; ```. I am not 100% sure if it's possible to use files on network shares, when they are mapped to a network drive, i.e.; ```; file:///M:/file.svs; ```. And I should actually try this on a windows laptop first to verify. Initially, I was hoping that this might be some issue you're already aware of, and that the source of the bug might be obvious. I'll report back once I've tested this manually with QuPath on windows.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1049#issuecomment-1240712824:816,test,tested,816,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049#issuecomment-1240712824,1,['test'],['tested']
Testability,"> is there anything conventional about where the project/images are stored?. The project is stored on the C drive, same physical SSD as the OS. The images are stored on the E drive, a separate 2TB SSD. Both have at least 300Gb of free space. The update check is printed in the log and occurs prior to loading any project, so I don't suspect it's affecting project loading. Will check out VisualVM and see if I can use it to monitor the initial project creation step.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1325606212:277,log,log,277,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1325606212,1,['log'],['log']
Testability,"> my Mac automatically offloads them to the cloud if I haven't opened them for a few days. My best guess is that there is a cloud-related factor. Where is the project stored - is it only on your local computer, or is it also in OneDrive/iCloud/similar?. If the project is in a cloud folder, please try copying it to a local directory that doesn't experience any automatic cloud-offloading/downloading. Also, when this happens, please check under *View &rarr; Show log* for any messages or other information that could be helpful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1313#issuecomment-1705956614:464,log,log,464,https://qupath.github.io,https://github.com/qupath/qupath/issues/1313#issuecomment-1705956614,1,['log'],['log']
Testability,"> since an appropriate hierarchy needs to be built with objects + ROIs etc. If you have objects that are used in several tests, you can define them as private fields of the test class, or (if their initialization is more complex) you can use `@BeforeAll` as Alan mentionned. If these objects are not immutable, make sure not to modify them inside the test functions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265123979:121,test,tests,121,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265123979,3,['test'],"['test', 'tests']"
Testability,"> so then it is expected that whenever you load .qptrain objects it they will be overwritten? . _If_ the image currently open is the same as the one with the old points. > Doesn't that make them impossible to use?. It shouldn't if the saved annotations are for different images. The logic is: Use the 'retained' objects (from other images), _unless_ the retained objects relate to the image currently opened, in which case use the current objects instead. That is the intended behavior.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530540408:283,log,logic,283,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530540408,1,['log'],['logic']
Testability,"> when i change a text in menu to persian it's showing like this. In what way are you changing the setting? QuPath doesn't support languages other than English. If you find it is displaying wrongly, under *Help &rarr; Show setup options*, what is the 'Region' option set to?. Location settings are buried deep within Java and your operating system, and can be combined in multiple ways (for text, numbers, dates etc.). It isn't possible for us to test how behavior changes for many different combinations, therefore it is recommended to set it to 'English (US)' for consistency. If the *Help &rarr; Show setup options* setting doesn't fix things, could you please tell me what you see if you run the following script?; ```groovy; println Locale.getDefault(); println Locale.getDefault(Locale.Category.DISPLAY); println Locale.getDefault(Locale.Category.FORMAT); ```. If you find that any of these are not English, you could try running this script to set the locale more forcibly:; ```groovy; import qupath.lib.gui.prefs.PathPrefs; PathPrefs.defaultLocaleFormatProperty().set(Locale.US); PathPrefs.defaultLocaleDisplayProperty().set(Locale.US); ```; You may need to restart QuPath to see the effect of any changes. If you don't like the results of changing any preferences, you can use *Edit &rarr; Reset preferences* to restore all preferences to their defaults.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/683#issuecomment-798658904:447,test,test,447,https://qupath.github.io,https://github.com/qupath/qupath/issues/683#issuecomment-798658904,1,['test'],['test']
Testability,"> you could try getting Gradle to skip tests (I haven't done this myself, so would also be googling the process) to see if the build works. Yeah, I've commented out the failing tests already. But it just segfaults when trying to run the resulting build. > Have you tried also building the JavaCpp example project+?. I tried https://github.com/bytedeco/sample-projects/tree/master/javacpp-android-gradle first but it seems to be a never ending series of issues because of the android stuff, so I gave up. Some other examples didn't support java 14 but this one did work at the end: https://github.com/bytedeco/sample-projects/tree/master/opencv-stitching-jlink. I just had to set `export JAVA_HOME=/usr/lib/jvm/adoptopenjdk-14-openj9xl-amd64/` before. (Which didn't make a difference for qupath.). > Also check out JavaCpp-presets - https://github.com/bytedeco/javacpp-presets/wiki; >; > In times of desperation, you might replace the opencv declarations in build.gradle with opencv-platform: https://search.maven.org/artifact/org.bytedeco/opencv-platform/4.3.0-1.5.3/jar. Not sure what to do with these I'm afraid. Well, I did build javacpp locally but no idea how to make use of that. If that's what you were suggesting maybe it's worth giving it a try. Although, I don't want to take up too much of your time with this because for the most part I don't really know what I'm doing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633306373:39,test,tests,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633306373,2,['test'],['tests']
Testability,">Does setting it to any other location fail, or does it fail only if the location is on a network drive? I've learned of some network drive weirdness, e.g. QuPath can't be started from a network location on Windows, but don't know if it's related to this or not. Setting it to another location simply does not load the extension. But I have not tested whether this is because QuPath does not read the preference (which cannot be set anymore in the Preferences menu).; This was the case when the extension was going to be added to a local disk. No network drive. > Since Bio-Formats became built-in, I haven't had reason to use it much though and need to check some more how it behaves... We created an extension which you can found here https://github.com/BIOP/qupath-biop-extensions which we have been using sucessfully (and which is not updated to work with our little modifications to QuPath 0.2.2-m2",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476258374:345,test,tested,345,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476258374,1,['test'],['tested']
Testability,"@Svidro beat me to it with the link to #114 ; The multiple projects could help. It could be scripted as well, if you don't mind going a bit more deeply into the QuPath code, but probably best see if the workaround... works. (Incidentally, I didn't know about ndpis until a couple of weeks ago... but I think this is the third time I've heard of the problem now. Certainly I will look into a longer term solution, and it's good to have it logged here as an issue now.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/113#issuecomment-342861124:438,log,logged,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/113#issuecomment-342861124,1,['log'],['logged']
Testability,"@alanocallaghan @Rylern @finglis shall we merge this for now, then remember to make non-SNAPSHOT releases before v0.6.0?. Otherwise we need to test things by using `includeBuild` for `qupath-fxtras` and `log-viewer`, or else commit to new releases for them now (but there may be more changes to come).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1509#issuecomment-2086262683:143,test,test,143,https://qupath.github.io,https://github.com/qupath/qupath/pull/1509#issuecomment-2086262683,2,"['log', 'test']","['log-viewer', 'test']"
Testability,"@andyp05 have you checked for any errors under *View &rarr; Show log*?. I have not seen this behavior and have no way to replicate it, but my guess is that there may *possibly* be a memory error. You seem to have a lot of cores relative to the amount of available RAM, so reducing the *Number of parallel threads* option under *Edit &rarr; Preferences...* may help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932290410:65,log,log,65,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932290410,1,['log'],['log']
Testability,"@balazs-endresz looking again at your exception, I see a reference to `J9Generic_Signal_Number`. This causes me to guess that you're using OpenJ9 rather than Hotspot (you can get either from AdoptOpenJDK): https://www.eclipse.org/openj9/oj9_faq.html. I've only tested things using Hotspot (the default with OpenJDK); conceivably there might be some OpenJ9-related problem I've not seen before.. In any case, v0.2.1 is also now released - I'd be interested to know if you experience the same exceptions there. It would be great if you or @gawells could confirm if there remains any fixable issue here, or if it can be closed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-648053127:261,test,tested,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-648053127,1,['test'],['tested']
Testability,"@oharismendy it sounds like in v0.2 the image is being opened with Bio-Formats. In v0.1.2 OpenSlide would have been used by default (unless you installed the Bio-Formats extension), and this flags specific images as label for a few formats (including .svs). You can choose the image reader when importing an image to a project: https://qupath.readthedocs.io/en/latest/docs/tutorials/projects.html#add-images. Because QuPath relies upon open source image readers that support a wide range of formats, it's difficult/impossible to *know* in all cases whether an image stored within a file as intended a 'full' image for analysis, label or macro image... particularly since different vendors write images in different ways, and we don't have specifications for the formats. It may be necessary for us to remove the label pop-up in the future, since it will inevitably fail to find a label sometimes sometimes. Misassigning a full image as a label is a big problem, since QuPath doesn't support any analysis on labels - therefore we need to err on the side of caution. If you can share an example image along with details of how it was written (e.g. software/scanner) then we might be able to add some logic to handle this specific case but otherwise we can only guess what a fix might be.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-732091427:1198,log,logic,1198,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-732091427,1,['log'],['logic']
Testability,"@petebankhead I will definitely share the new QuPath jobs. Thank you for these fixes to the TMA Data viewer. The table now has correct colors and all the columns that were missing values now have correct values. . I am just realizing that the data table is only sluggish when the TMAs have cell detections present. If I were to calculate my measurements of interest for each TMA and remove detections before testing the TMA Data viewer then it works very smooth. Is it possible that the vertical scroll issue sluggishness is a side effect of being able to view huge combined dataset ""live""!. I hope TMA Viewer is here to stay as a legacy feature for a while, it seems to have served well and continues to work. Thank you for keeping it alive.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289156832:408,test,testing,408,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289156832,1,['test'],['testing']
Testability,"@petebankhead Might want to keep track of this one in case it is an extension thing rather than a BioFormats thing. If @asasama12 is willing to share a couple of the files I could do some tests and maybe open a ticket on the BioFormats forum, but without the files there isn't much I can do.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/271#issuecomment-467955970:188,test,tests,188,https://qupath.github.io,https://github.com/qupath/qupath/issues/271#issuecomment-467955970,1,['test'],['tests']
Testability,"@petebankhead, Many thanks! I got the point. Will try to separate extensions to common StarDist logic and engine specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-811259251:96,log,logic,96,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-811259251,1,['log'],['logic']
Testability,"@petebankhead, many thanks for fast feedback! I've marked this PR as draft and going to work further.; As you mentioned, there is also an option to use OpenCV API but OpenVINO API will give better performance (at least once I could fix asynchronous efficiency issue). Briefly answering your questions,. > Should the OpenVINO backend in OpenCV 4.5.1 offer an equivalent level of support and performance, or are there advantages in using this instead / as well?. Yes, it can help to avoid IR conversion, in example. OpenVINO natively can load only IR or ONNX at this moment. However it'll require a separate package with OpenCV linked against OpenVINO. > Can/could this work across Windows, Linux & macOS - or is it Linux-only?. Yes, no problem at all. I just published a test package for Linux only but going to expand it in future. > Am I right in thinking the dependencies are all Apache (or at least GPL-compatible)?. OpenVINO is Apache 2.0: https://github.com/openvinotoolkit/openvino/blob/master/LICENSE",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-777016613:770,test,test,770,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-777016613,1,['test'],['test']
Testability,"@reynoldscem the source of this issue has been fixed. If you have a definite bug, please create an issue [here](https://github.com/qupath/qupath/issues/new?assignees=&labels=bug&template=bug_report.md&title=) following the template. If you are unsure if you have found a bug or not, please open a discussion on http://forum.image.sc/tag/qupath with clear description fo precisely what you have tried and what happens (including any information from *View &rarr; Show log*).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-623494686:467,log,log,467,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-623494686,1,['log'],['log']
Testability,@subanookala Please post questions on the forum at http://forum.image.sc/tag/qupath and provide more detail (you may find a more complete error message under *View &rarr; Show log*).,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-826532977:176,log,log,176,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-826532977,1,['log'],['log']
Testability,"@vipulnj Thanks very much for this, I think I understand the problem now and have a fix. I will test it later. In the meantime, if you really do need to write a .qpdata file on Linux outside a project, then after the initial failed attempt running this script should succeed:; ```groovy; import qupath.lib.io.PathIO. def imageData = getCurrentImageData(). // Choose a location (here, the one QuPath thinks it wrote to... but didn't); file = new File(imageData.lastSavedPath). // Write directly to a stream; file.withOutputStream {; PathIO.writeImageData(it, imageData); }. // Check we do have a file now; print file; print file.exists(); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/292#issuecomment-484796939:96,test,test,96,https://qupath.github.io,https://github.com/qupath/qupath/issues/292#issuecomment-484796939,1,['test'],['test']
Testability,@zindy Do you mind if I close this and merge https://github.com/qupath/qupath/pull/676 in preparation for v0.3?; That would give time for anyone trying the dev branch to test it a bit before release.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-797278645:170,test,test,170,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-797278645,1,['test'],['test']
Testability,"A little more on this: it is partly a Java issue - see [this StackExchange](https://softwareengineering.stackexchange.com/questions/20573/why-does-java-exit-with-success-after-an-uncaught-exception) post: Java exits with EXIT_SUCCESS on an uncaught exception. I have found the source of this uncaught exception: in `src/main/java/qupath/QuPath.java`, there are three different places where `runScript` is called, only one of which is protected by a `try`/`catch` construct, so if an exception is thrown in one of the other two cases (as happened to me), the exception is not caught but instead causes Java to crash. In particular, I can't then check for the logger message which is produced by this code in the first case:. ```; logger.error(""Error running script for image: "" + entry.getImageName(), e);; ```. So the solution would simply be to `try`/`catch` the other two cases as well. Best wishes, Julian",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/654#issuecomment-743001513:658,log,logger,658,https://qupath.github.io,https://github.com/qupath/qupath/issues/654#issuecomment-743001513,2,['log'],['logger']
Testability,"A permission issue may be possible. I use Windows 10. . That is the log output:; INFO: Starting QuPath with parameters: []; INFO: Reading config file C:\Research\Software\QuPath-0.2.0-m12\app\QuPath-0.2.0-m12.cfg; INFO: Setting JVM option to -Xmx28672M. After changing QuPath-0.2.0-m12.cfg manually, it works without any problems. I think it is a permission issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-631288823:68,log,log,68,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-631288823,1,['log'],['log']
Testability,"After removing jpen jar files one by one I got this:. ```; 12:48:39.843 [JavaFX Application Thread] [ERROR] qupath.lib.gui.dialogs.Dialogs - Extension error: Error loading extension - check 'View -> Show log' for details.; 12:48:40.031 [JavaFX Application Thread] [ERROR] qupath.lib.gui.QuPathGUI - qupath.lib.gui.extensions.QuPathExtension: qupath.lib.gui.tools.jpen.JPenExtension Unable to get public no-arg constructor; java.util.ServiceConfigurationError: qupath.lib.gui.extensions.QuPathExtension: qupath.lib.gui.tools.jpen.JPenExtension Unable to get public no-arg constructor; ```. I guess I'd need to comment out some code too. I can probably figure that out. I'll also try it on Windows later, because the same tests used to fail there too, so that might just work now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642570985:204,log,log,204,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642570985,2,"['log', 'test']","['log', 'tests']"
Testability,"After some more testing, I noted that there's something weird going on.; Yesterday, I was using a few ROIs of no particular complexity, put the Computer in standby, started to work on it just now and the latency now depends on zoom level! On 1% zoom, the latency (about 3 seconds) is there on *each* click-drag-operation although the whole slide just occupies a small part of the entire view. At 100% it is working fine. I just closed qupath and recreated the setup and now... the latency is gone at 1% zoom. Could this be a memory leak somewhere that only surfaces after a while? Very very puzzling...; Edit: The computer was running for probably 10 hours between creation and attempted manipulation of the ROIs, of course not counting standby time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-615264945:16,test,testing,16,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-615264945,1,['test'],['testing']
Testability,"After trying v0.2.0-m2 on both Windows and Linux, I saw observed on:; #### WINDOWS; - While working directly with .qpdata files, it behaves as expected. Which means, I could open an image, make annotations, save, close Qupath ... Reopen Qupath, go to File in the menu bar, click open, locate the .qpdata file and select the qpdata file, select the image file and once it is loaded, I can see the previously saved annotations. **(Expected behavior, no issues here)**; _I did not test Projects on the Windows version_. #### LINUX; - I tried doing the same on Linux but lost data (both saved on disk as .qpdata and the annotations on the application which I was about to save) :; - Clicking Save on the linux version of QuPath v0.2.0-m2 after some changes (or even without changes) deletes the original qpdata file itself ( by original qpdata file, I mean the .qpdata file I moved from windows machine for testing, along with the corresponding image) **(issue)**; - There is no way I could reopen existing annotations which were made purely using the Linux version because no annotations were saved in a qpdata file in the first place. **(issue)**; - When I use Projects, I can save and reopen the annotations purely made using the Linux version. **(Expected behavior, no issues here)**. Hopefully that helps. Thank you! :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/292#issuecomment-484711187:478,test,test,478,https://qupath.github.io,https://github.com/qupath/qupath/issues/292#issuecomment-484711187,2,['test'],"['test', 'testing']"
Testability,"Ah ok, it should be a pyramidal TIFF then. Are you running QuPath on Linux, by any chance? Or what platform? Do you see any error message when you try, either popping up or under *View &rarr; Show log*?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371741529:197,log,log,197,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371741529,1,['log'],['log']
Testability,"Ah ok, thanks for investigating - seems to be another of the `jpackage` changes. Fortunately, the packaging tool is [targeted for Java 16](http://openjdk.java.net/projects/jdk/16/) so should hopefully be stable then. I'm hesitant about merging this since it really requires a thorough investigation of everything that has changed with Java 15, tested across all platforms, and making a call about whether compatibility with Java 14 needs to be maintained (probably not - but in that case, more changes should be incorporated in the build.gradle to warn the user at build time). https://github.com/qupath/qupath/issues/615 is the issue intended to track this, but we aren't planning to explore this until our dev branch is a bit more stable and closer to a release. In the meantime, I updated the docs recently to [list Java 14 as required](https://qupath.readthedocs.io/en/latest/docs/reference/building.html#install-a-java-development-kit-jdk), for consistency across branches.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/640#issuecomment-727052962:344,test,tested,344,https://qupath.github.io,https://github.com/qupath/qupath/pull/640#issuecomment-727052962,1,['test'],['tested']
Testability,"Ah ok, then I'm afraid I have no idea and no way to reproduce the problem. It is working for me on all my test systems (but I haven't got CentOS installed anywhere). I can't see any obvious clues to a problem within QuPath's code from the error. The versions of Java, JavaFX and jpackage have been updated for v0.3.0, not sure if that is related. One option would be to try [building from source](https://qupath.readthedocs.io/en/stable/docs/reference/building.html) using a different JDK, or launch using `./gradlew run` (which would skip the jpackage part).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825#issuecomment-925047351:106,test,test,106,https://qupath.github.io,https://github.com/qupath/qupath/issues/825#issuecomment-925047351,1,['test'],['test']
Testability,"Ah! Bleaching and rescanning changes things; what I'm currently working on *might* be exactly what you need. This is some related discussion on [Google Groups](https://groups.google.com/d/msg/qupath-users/XNdaWK_9Ex4/VKHAbBGDBAAJ). If you'd be interested in collaborating on this, and perhaps sharing some images to help me develop the tool to do what you need, please send me a message. I'm quite find-able on Twitter, ResearchGate or LinkedIn... or if you sign up to the QuPath Google Group I'll get a notification and can write to you directly. Otherwise I'll post a reply back here once I have something worth testing, but I haven't got an expected timeframe yet. . The CellProfiler bit is also interesting. If we can achieve the alignment then maybe this step wouldn't be necessary and everything could be done in QuPath. But if you do need more CellProfiler-specific functionality then it would be good to discuss if there's a way to help streamline that bit of the process too - since better integration with CellProfiler is something that has already come up (e.g. #123).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/162#issuecomment-377167248:614,test,testing,614,https://qupath.github.io,https://github.com/qupath/qupath/issues/162#issuecomment-377167248,1,['test'],['testing']
Testability,"Ah, my best guess was wrong. But now that I know the image, I have tried it out... and it opens for me on my Mac, also 10.13.3, without problems (using OpenSlide). Do all .tif whole slide images fail for you in QuPath? Do any other formats work (e.g. SVS or NDPI - there are freely available test images on the OpenSlide website)?. A lot of that error message comes from the failed Bio-Formats attempt - you might want to remove or disable it since it didn't solve the problem. But the log shows that OpenSlide was also tried without success.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371778042:292,test,test,292,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371778042,2,"['log', 'test']","['log', 'test']"
Testability,"Ah, no, the script does not create sub-categories for each cell type, it overwrites cell classes based on the subcellular detection count. I would have to look into something a bit different to do what is in your top image. I'm not sure what the bottom image is though. The result of the script if you swap in DAB should be something like:; ![image](https://user-images.githubusercontent.com/23145209/36644405-c7245426-1a0e-11e8-8c52-4a525fd5588f.png). At least based on the shoddy naming scheme I used in the basic script!. Note that it was not designed to subdivide tumor or stroma cells into categories, but to create new categories within annotation regions purely based on a spot count. I would have to look into some different scripting to subdivide that way, though Pete recently posted a script that has a function I did want to test out.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368327932:837,test,test,837,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368327932,1,['test'],['test']
Testability,"Ah, sorry, I made this change on 0.4.3 where I was working on the extension and switched to main to cherry-pick without testing. The context I spotted it is definitely an edge case. 1. zoom in an arbitrary amount, say past 1x; 2. Click ""Adjust zoom for all images to fit the entire image in the viewer""; 3. Image downsample factor changes but displayed magnification doesn't. But this is fixed in main already it seems. Sorry!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1279#issuecomment-1639814876:120,test,testing,120,https://qupath.github.io,https://github.com/qupath/qupath/pull/1279#issuecomment-1639814876,1,['test'],['testing']
Testability,"Ah, that is possible. The script looks good otherwise. Unfortunately I don't have any SCN files to test things on. However, the fact that some of the thumbnails show whole slide images (including label) while others are only the tissue suggests there might be some different types of SCN files in play. . I am not sure how run for project works in these situations. Have to see what Pete thinks. I take it running that script on your current image both generates the *mostly empty text file, and an annotation plus a bunch of cell objects in the Hierarchy?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/268#issuecomment-467675397:99,test,test,99,https://qupath.github.io,https://github.com/qupath/qupath/issues/268#issuecomment-467675397,1,['test'],['test']
Testability,"Ah, that's a bit of a shame... but thanks for testing - there might be some other [platform preferences](https://openjfx.io/javadoc/23/javafx.graphics/javafx/application/Platform.Preferences.html) that help, although I'd be tempted to just leave is a bug that may magically get fixed by dependency updates. We still have the option to choose light or dark explicitly, so as long as that still works no one should be stuck.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1671#issuecomment-2393621625:46,test,testing,46,https://qupath.github.io,https://github.com/qupath/qupath/pull/1671#issuecomment-2393621625,1,['test'],['testing']
Testability,"Ah... I was logging on to give the same answer as above, but @Svidro beat me to it. But I see that the 'Name' column doesn't contain the TMA core if the cells are inside an annotation rather than directly inside the TMA core - which is the source of the problem, right?. I agree it would probably be useful to have the core always shown in the table, but in the absence of that you could use a simple script to repurpose the 'name' property for all your cells - setting it explicitly to be the same name as the core containing the cells. That way it still appears in the table. @Svidro already gave some of the code to do that [here](https://github.com/qupath/qupath/issues/57#issuecomment-289249459).; In your case, you might need to replace ```getParent()``` with ```getParent().getParent()```... to get the name of the object two levels up in the hierarchy rather than one - but the idea is the same. In the event that you might have annotations inside annotations, then doing it that way would get a bit complicated since sometimes you might need to go up three levels... or four levels.; In that case, a simpler script would involve looping through all the TMA cores, and naming the cells inside them. Does that sound like it would solve the problem, or have I misunderstood?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289512650:12,log,logging,12,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289512650,1,['log'],['logging']
Testability,Also: a pretty similar code could be used for this empty test; https://github.com/qupath/qupath/blob/ff797d180fbe180bf59e376270e3bfe32c424c82/qupath-core/src/test/java/qupath/lib/objects/classes/TestPathClassFactory.java#L188C37-L188C37,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670208968:57,test,test,57,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670208968,3,"['Test', 'test']","['TestPathClassFactory', 'test']"
Testability,"An example script (not tested on a real example!):. ```groovy; double dx = -getCurrentServer().boundsX; double dy = -getCurrentServer().boundsY. getTMACoreList().each {it.ROI = it.ROI.translate(dx, dy)}; getAnnotationObjects().each {it.ROI = it.ROI.translate(dx, dy)}; fireHierarchyUpdate(); ```. This moves only TMA cores and annotations (not detections... but transferring detections really isn't recommended, since many detection commands are substantially different in v0.2.0 compared to v0.1.2).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/547#issuecomment-650197416:23,test,tested,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/547#issuecomment-650197416,1,['test'],['tested']
Testability,"And I'll do a quick poke @petebankhead as far as getting the whole slide file name rather than the current image name. All of my current images have the same names as their files, so I can't really run a test. Only suggestion I have there is to try this: ; https://gist.github.com/Svidro/5e4c29630e8d2ef36988184987d1028f#file-get-current-image-name-without-extension-groovy; and see if that gives you the correct result.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/268#issuecomment-467970888:204,test,test,204,https://qupath.github.io,https://github.com/qupath/qupath/issues/268#issuecomment-467970888,1,['test'],['test']
Testability,"Another option would be to give showing the associated images (i.e. under the 'Image' tab) the same kind of behavior as *View &rarr; Show slide label*. The idea would be that, once you've picked an associated image name by double-clicking, the window remembers the name, e.g. 'macro'. Whenever a new image is opened in QuPath, QuPath will check if the new image also has an associated image called 'macro'. ; * If yes, the new macro image replaces the old one; * If no, the old macro image is removed and the window that contained it becomes black (reporting 'No image' in the title bar). I haven't given it a lot of thought, but I have a feeling that might be more logical - effectively meaning that choosing *View &rarr; Show slide label* and double-clicking on 'label' under the image tab share (more or less...) identical behavior. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1246#issuecomment-1717224921:666,log,logical,666,https://qupath.github.io,https://github.com/qupath/qupath/issues/1246#issuecomment-1717224921,1,['log'],['logical']
Testability,"Any time I click Run for Add Intensity Features and have a one channel; selected and am running at least the mean. But so far only in the LuCa; image (of the few I have tested). Fairly regular cell generation parameters.; ![image](https://user-images.githubusercontent.com/23145209/61767453-2a224000-ad99-11e9-9422-582c1f37723a.png). On Tue, Jul 23, 2019 at 10:16 PM Pete <notifications@github.com> wrote:. > When is the error generated?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/301?email_source=notifications&email_token=AFQSV6KEL332YBYM5ENN5ATQA7QRPA5CNFSM4HDEAJ5KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2VGFYA#issuecomment-514482912>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFQSV6I7Q5KND67GRIGVTQLQA7QRPANCNFSM4HDEAJ5A>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/301#issuecomment-514484941:169,test,tested,169,https://qupath.github.io,https://github.com/qupath/qupath/issues/301#issuecomment-514484941,1,['test'],['tested']
Testability,"Are there public example images to replicate this issue?. QuPath v0.5.0 will include OpenSlide 4.0.0, and this provides dicom WSI support. So the behavior may change then - but we have no examples to test with.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1397#issuecomment-1772455277:200,test,test,200,https://qupath.github.io,https://github.com/qupath/qupath/issues/1397#issuecomment-1772455277,1,['test'],['test']
Testability,"Are you able to share an example file that doesn't work? It sounds like the problem is in either QuPath or Bio-Formats, and much has changed in both. Either way, since the log isn't recording anything very obviously wrong I'd need to test it with a failing file to identify where it is going wrong. If it's not possible to share a file, then I'd be trying to fix it through guesswork... to have a chance, I'd need to know more about how it works in v0.1.2, e.g.; * under the 'Image' tab, what is the 'Server type' when the image is correctly opened?; * if the type is 'Bio-Formats', which version of Bio-Formats is installed? v0.2.0 is using Bio-Formats v6.0.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472005071:172,log,log,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472005071,2,"['log', 'test']","['log', 'test']"
Testability,Are you using QuPath v0.1.2?; Does anything useful appear under *View &rarr; Show log*?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-391612905:82,log,log,82,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-391612905,1,['log'],['log']
Testability,"As far as I've tested this, it's all working as expected, with the added benefit of letting the user manually click the move tool and still retain which other tool was previously selected (as you suggested). Fast clicks not an issue any more, even with the shorter code you suggested. All reflected in the last (cleaned-up) commit.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1318813525:15,test,tested,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1318813525,1,['test'],['tested']
Testability,"As part of this, the recommended way to get an `ImageServer<BufferedImage>` is now via; ```; ImageServer.buildImage(URI, args); ```; This will apply any known transforms required by the specified args. The older `ImageServerProvider.buildServer()` method remains for backwards compatibility, and in any case where someone wants to skip the args logic.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/725#issuecomment-834709601:345,log,logic,345,https://qupath.github.io,https://github.com/qupath/qupath/pull/725#issuecomment-834709601,1,['log'],['logic']
Testability,"Aside from the messages in the log, is this causing any problems? As you describe, Bio-Formats tries to delete the file - in which case it isn't really a fixable QuPath bug if this fails. bfmemo files are not expected to be deleted after closing QuPath, but rather retained so that the image can be opened more quickly later. You can turn of the use of memoization in the QuPath preferences. There is further info at https://github.com/qupath/qupath-bioformats-extension - but _don't install this extension with v0.2.0!_ It doesn't work, isn't necessary and can cause conflicts.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/287#issuecomment-473682408:31,log,log,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/287#issuecomment-473682408,1,['log'],['log']
Testability,"B"", ""Values 2"" : ""0.15891 0.36799 0.91615 "", ""Background"" : "" 210 208 209 ""}');; Thread.sleep(100); runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; Thread.sleep(100); selectAnnotations();; Thread.sleep(100); runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 14.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.09, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; Thread.sleep(100). Error log:. INFO: Starting script at Thu Sep 27 09:20:09 CEST 2018; ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:2003); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:1985); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.clearSelection(TableView.java:2733); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateDefaultSelection(TableView.java:2928); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateItems",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:1748,log,log,1748,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['log'],['log']
Testability,BTW not planning to merge this one as I have a PR to add badges for the log viewer as well... so it's easier to just add the min sizes there rather than try to merge.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731193745:72,log,log,72,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731193745,1,['log'],['log']
Testability,"BTW, the C++ API of PyTorch has no such limitations when it comes to this kind of semantic segmentation, and we can easily use it from Java: https://github.com/bytedeco/javacpp-presets/tree/master/pytorch. There is some sample code in C++ available here: https://github.com/AllentDan/LibtorchSegmentation. @HGuillemet might have some sample code in Java to offer. However, I don't believe it supports algorithms like logistic regression and SVM...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092348518:417,log,logistic,417,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092348518,1,['log'],['logistic']
Testability,"Because I'm not great with git :) Could probably have cherry-picked it, but `main` has a *lot* of other changes, since the intention was that the next release would be v0.5.0 - and these should not be part of any v0.4.4 release. My aim this morning was to create tests, working off the original v0.4.3 code to ensure that the tests were failing initially. This revealed another issue that wasn't covered through your fix (namely that deserializing a `PathClass` only works properly via a `PathObject`). So I approached it a different way by first introducing a new `PathClass.readResolve()` method, which solved that problem and also most of the original issue. I then found it was still possible to work around the use of `readResolve()` alone when deserializing legacy JSON - so I followed your approach to update the `getSingleton` method as you'd suggested as well to try to cover all scenarios. The end result is that there are now 4 different deserialization tests, but it required the combination of approaches to pass all of them.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1307#issuecomment-1699143030:263,test,tests,263,https://qupath.github.io,https://github.com/qupath/qupath/pull/1307#issuecomment-1699143030,3,['test'],['tests']
Testability,"Before doing that, could you check if there's anything is in https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/input/MouseEvent.html that could help?. I *think* the issue may be because there's no test for the event type in your current code - and so it could be fired on a mouse move event as well (with the middle button down). So I think you need to check for a pressed, released or click event (I forget which... this is a place were cross-platform stuff can be annoying). I've never used [`isStillSincePressed()`](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/input/MouseEvent.html#isStillSincePress()) because I don't discovered it recently, but perhaps it can also help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219670857:206,test,test,206,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219670857,1,['test'],['test']
Testability,"Both of these issues are now addressed in `v0.0.5`. For now, running _Add intensity features_ will _always_ result in a prompt to confirm which objects will be used - to help force more deliberate choices. Additionally, large regions will be automatically split into tiles. Provisional checks suggest the results are almost identical to the untiled measurements - although further tests are needed. Some small loss in precision is to be expected compared to the 'true' measurement without tiling (e.g. with Haralick features, were adjacencies across tile boundaries will not be computed), but this should be low... and better than QuPath hanging, or an out-of-memory error. Currently, the _implicit_ tiling of large ROIs for the purposes of avoiding memory errors does not make use of parallelization. Therefore it is still _not_ advisable to compute measurements across very large areas at high resolution. However, it is expected that this shouldn't often be needed, because:; 1. the most useful measurement for a large region is the average intensity, which can be computed at a low resolution with good accuracy, and; 2. measurements of texture (e.g. standard deviation, or Haralick textures) are rarely meaningful when computed over very large numbers of pixels, but rather are more normally computed individually for (explicitly-created) tiles generated within such an the area (e.g. using the _Create tiles_ command). Intensity measurements made for _separate_ objects (including tile objects) will be parallelized, as normal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/15#issuecomment-258995011:381,test,tests,381,https://qupath.github.io,https://github.com/qupath/qupath/issues/15#issuecomment-258995011,1,['test'],['tests']
Testability,But with a test.svs 1.8M it works strange!!!; OpenSlide('/Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/test.svs'); OpenSlide('/Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/test.svs'),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371990304:11,test,test,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371990304,3,['test'],['test']
Testability,"By the way, feel free to use the serialized regions I uploaded if you want to add some regression tests.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/434#issuecomment-610278806:98,test,tests,98,https://qupath.github.io,https://github.com/qupath/qupath/issues/434#issuecomment-610278806,1,['test'],['tests']
Testability,"Can confirm I'm not seeing (the bug) on Mac with #1410 merged, also not seeing it on the normal rc2 on Mac so will test on Windows this evening and get back to you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1408#issuecomment-1789215814:115,test,test,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/1408#issuecomment-1789215814,1,['test'],['test']
Testability,Can confirm errors on Win10 0.3.0 SNAPSHOT as well. Cell classes do not change upon reload.; ```; ERROR: QuPath exception: OpenCV(4.5.1) modules\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. java.lang.RuntimeException: OpenCV(4.5.1) modules\core\src\persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'cv::FileStorage::Impl::getName'. at org.bytedeco.opencv.opencv_core.Algorithm.read(Native Method); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:258); at qupath.lib.io.OpenCVTypeAdapters$StatModelTypeAdapter.read(OpenCVTypeAdapters.java:188); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:270); at qupath.opencv.ml.OpenCVClassifiers$OpenCVClassifierTypeAdapter.read(OpenCVClassifiers.java:261); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131); at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222); at com.google.gson.TypeAdapter.fromJsonTree(TypeAdapter.java:285); at qupath.lib.io.GsonTools$SubTypeAdapterFactory$SubTypeAdapter.read(GsonTools.java:243); at com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199); at com.google.gson.Gson.fromJson(Gson.java:932); at com.google.gson.Gson.fromJson(Gson.java:870); at qupath.lib.projects.ResourceManager$JsonFileResourceManager.readFromFile(ResourceManager.java:338); at qupath.lib.projects.ResourceManager$FileResourceManager.get(ResourceManager.java:197); at qupath.process.gui.commands.ObjectClassifierLoadCommand.getClassifier(ObjectClassifierLoadCommand.java:392); at qupath.process.gui.commands.ObjectClassifierLoadCommand.runClassifier(ObjectClassifierLoadCommand.java:329); at qupath.process.gui.commands.ObjectClassifierLoadCommand.l,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/752#issuecomment-866148194:189,Assert,Assertion,189,https://qupath.github.io,https://github.com/qupath/qupath/issues/752#issuecomment-866148194,2,['Assert'],['Assertion']
Testability,"Change looks good and should fix the main problem, but if I understand it correctly it won't restore the default classifications - so the message might be a bit misleading. We *could* reset the preference, but retaining the last valid class list makes sense too. Perhaps just change the message to; ```java; logger.error(""Classification list too long ({} bytes) - cannot save it to the preferences."", bytes.length);; ```; Would that make sense?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/633#issuecomment-719684705:308,log,logger,308,https://qupath.github.io,https://github.com/qupath/qupath/pull/633#issuecomment-719684705,1,['log'],['logger']
Testability,"Closing this in favor of https://github.com/qupath/qupath/pull/768; Discussion convinced me that the change might cause more confusion than it resolves, so for now leaving it up to a very minor logging change (and a bigger logging change that makes setting the log level easier).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/759#issuecomment-871359044:194,log,logging,194,https://qupath.github.io,https://github.com/qupath/qupath/pull/759#issuecomment-871359044,3,['log'],"['log', 'logging']"
Testability,"Closing this in favor of https://github.com/qupath/qupath/pull/768; Discussion convinced me that the change might cause more confusion than it resolves, so for now leaving it up to a very minor logging change (and a bigger logging change that makes setting the log level easier). Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-871358441:194,log,logging,194,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-871358441,3,['log'],"['log', 'logging']"
Testability,"Closing this issue after discussion with @melvingelbard... it's not something we plan to do, and would be very apprehensive about including the change even if someone else implemented it. As I mentioned above, the consistency thing has some (partly historic) reasons. We only started adding spinners recently; the underlying rationale has been that sliders are used when the range is known in advance, spinners are used when it's not... New commands will endeavour to apply this rule more consistently, and old commands will either be either removed or updated. Regarding spinners and mouse wheel input, I think this really would need to be implemented in JavaFX directly. There are ostensibly easy ways to add support by attaching a scroll listener, in my experience to date this can open a whole can of worms... basically, scroll events can differ a lot depending upon the input device/platform (not to mention 'natural' scrolling in some cases, which can flip the direction). Therefore I think the risk is too high of creating something that inadvertently makes the user experience *worse* for many, and we would have no way to test all the relevant platforms to check this. I presume the JavaFX developers have reasons for not implementing this directly yet - perhaps related to the reason I give. But in any case, they would have access to potentially more platform-specific information to enable a robust implementation. For these reasons, I'm afraid I don't think we can/should act on this feature request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/495#issuecomment-641183465:1131,test,test,1131,https://qupath.github.io,https://github.com/qupath/qupath/issues/495#issuecomment-641183465,1,['test'],['test']
Testability,Closing this issue because of lack of activity and the backslash issue should be resolved in the latest milestone versions. GUI-related activity can't be logged in the workflow using the current design.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-518559177:154,log,logged,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-518559177,1,['log'],['logged']
Testability,"Closing this, because the logic to try to identify a slide label has been improved. The changes will be in v0.3.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/643#issuecomment-816053185:26,log,logic,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/643#issuecomment-816053185,1,['log'],['logic']
Testability,"Correct. I also noticed that in Windows there are + and - keys that appear to be associated with those commands in the View menu, but the + and - keys do not seem to do anything. Am I reading that wrong or is this expected?. Sorry, to specify:. The + and - keys no the num pad do nothing when I use them. The -_ key to the left of the backspace key on my keyboard (next to 0) zooms in. The += key does not seem to function. Tested with both numlock on and off, and using the SHIFT key. All Win10.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640786702:424,Test,Tested,424,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640786702,1,['Test'],['Tested']
Testability,"Cut the processes from 63 to 24 and some improvement. When it happened again, I saw the following in the log, but I still have 15GB free. Can I increase java heap memory for qupath, or is there a memory leak? If I close qupath and come back in it will work for a couple of slides before failing. Thanks,. Andy. ```; ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space; at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:139); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:107); at qupath.lib.gui.PluginRunnerFX.runTasks(PluginRunnerFX.java:98); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:169); at qupath.lib.gui.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:192); at java.base/java.lang.Thread.run(Unknown Source); Caused by Java heap space at java.base/java.util.ArrayDeque.<init>(Unknown Source); at qupath.imagej.processing.Watershed$WatershedQueueWrapper.<init>(Watershed.java:242); at qupath.imagej.processing.Watershed.doWatershed(Watershed.java:83); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.doDetection(WatershedCellDetection.java:852); at qupath.imagej.detect.cells.WatershedCellDetection$WatershedCellDetector.runDetection(WatershedCellDetection.java:1063); at qupath.imagej.detect.cells.WatershedCellDetection$CellDetector.runDetection(WatershedCellDetection.java:303); at qupath.imagej.detect.cells.PositiveCellDetection$DetectorWrapper.runDetection(PositiveCellDetection.java:140); at qupath.lib.plugins.DetectionPluginTools$DetectionRunnable.run(DetectionPluginTools.java:112); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Un",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/828#issuecomment-932330593:105,log,log,105,https://qupath.github.io,https://github.com/qupath/qupath/issues/828#issuecomment-932330593,1,['log'],['log']
Testability,"Dear Pete,. . It is indeed windows 10. This is what log shows:. . ERROR: Unable to load OpenCV libraries!. at java.lang.ClassLoader$NativeLibrary.load(Native Method). at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941). at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1857). at java.lang.Runtime.loadLibrary0(Runtime.java:870). at java.lang.System.loadLibrary(System.java:1122). at qupath.opencv.OpenCVExtension.loadNativeLibrary(OpenCVExtension.java:59). at qupath.opencv.OpenCVExtension.addQuPathCommands(OpenCVExtension.java:72). at qupath.opencv.OpenCVExtension.installExtension(OpenCVExtension.java:116). at qupath.lib.gui.QuPathGUI.refreshExtensions(QuPathGUI.java:1093). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:637). at qupath.lib.gui.QuPathGUI.<init>(QuPathGUI.java:429). at qupath.lib.gui.QuPathApp.start(QuPathApp.java:63). at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$161(LauncherImpl.java:863). at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$174(PlatformImpl.java:326). at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295). at java.security.AccessController.doPrivileged(Native Method). at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294). at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95). at com.sun.glass.ui.win.WinApplication._runLoop(Native Method). at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177). at java.lang.Thread.run(Thread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] t",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:52,log,log,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,1,['log'],['log']
Testability,"Dear Pete,. thank you very much for your fast reply!. Regarding *.mrxs files, the problems occur only with multichannel fluorescence images. Brightfield images open without a problem. Here is an example:. ![brightfield_example](https://cloud.githubusercontent.com/assets/23238491/19998070/e2515342-a26a-11e6-8f3d-8c2746210dc1.jpg). Indeed, as we can see, OpenSlide is used to access the *.mrxs file. Regarding the fluorescence files, all of the requirements that you stated above are fulfilled for my files. QuPath opens them using ImageJ. When I use ImageJ (or in my case, Fiji) to open them directly, the behaviour is the same: access is only possbile at the most coarse resolution. Both *.czi and *.mrxs can be exported as tiff files from their viewers (ZEN2 and CaseViewer). The monochrome tiffs can be opened in QuPath. However, when I joined three of these monochrome files in an RGB file, my first attempt at opening it in QuPath failed. I am going to keep experimenting. However, I wanted to point out that the technology to open multichannel *.czi and *.mrxs files already exists because it is implemented in a free viewer application called ""Zoom v2.0.0"", available from MicroDimensions (https://micro-dimensions.com/zoom/). We have been providing some slides for them over the last years to test their algorithms. They might be interested in a scientific cooperation. We can also provide test slides (image data) via our file transfer system for you if you give me an e-mail address. Best regards,. Arnulf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-258370511:1302,test,test,1302,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-258370511,2,['test'],['test']
Testability,"Do you see any errors under *View &rarr; Show log*?; Does it happen with annotations that have been generated in m10, or only ones that have been generated earlier?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/456#issuecomment-619374419:46,log,log,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/456#issuecomment-619374419,1,['log'],['log']
Testability,Do you want me to test it out for you? I could try to build a version with that commit and run it right away,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479845425:18,test,test,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479845425,1,['test'],['test']
Testability,"Does the View->Show log give you any information when this happens? . I am not sure in your case, but if you are running the full script I wonder if it isn't the cell detection rather than the classifier that is erroring out. I don't believe the classifier runs in tiles, it should apply to the entire image at once, and only after the cell detection part of the script is completed. Memory might be an issue there, though there used to be some possible edge cases with very small tiles (where the tile clips the edge of the tissue and a very tiny region is generated) causing problems. I usually was able to get around that by changing the Simple Tissue detection settings, as it was incredibly rare. The logs should help determine what is happening. You said randomly, so this means you can't reproduce it on any single slide running it twice? Are the images QuPath is accessing stored across a potentially busy or slow network?. As an aside, you are running both a classifier in the cell detection (Positive cell detection with three thresholds), and again with a trained classifier?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355477217:20,log,log,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355477217,2,['log'],"['log', 'logs']"
Testability,Dragging the project file onto QuPath should work; we would need the contents of *View &rarr; Show log* to begin to deciper the `NullPointerException`.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708514110:99,log,log,99,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708514110,1,['log'],['log']
Testability,Easily done I guess! . I for one really appreciate the updated docs with the new example. Thats much more than I was expecting and I am looking forward to testing it out. Thanks again!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264866312:155,test,testing,155,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264866312,1,['test'],['testing']
Testability,"Excellent, thanks - I wanted to ask about using the regions in future tests.; Also the classiest bug reporting & follow-up I've seen in a long time :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/434#issuecomment-610283142:70,test,tests,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/434#issuecomment-610283142,1,['test'],['tests']
Testability,"Excellent, thanks @ajay1685! I hadn't been able to test tensorflow on Windows yet, that's great news. Some of the more recent commits have hopefully resolved lingering issues with OpenSlide/Bio-Formats, and restored the version number to the application name on Windows. I *think* this is a good thing for people using the .msi installer, since it means they can easily have multiple versions installed. But I don't use Windows enough to know for sure if that's a desirable feature for most people.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685#issuecomment-805568183:51,test,test,51,https://qupath.github.io,https://github.com/qupath/qupath/pull/685#issuecomment-805568183,1,['test'],['test']
Testability,"FWIW you need 5 jars for QuPath + OpenCV to work:; ```; javacpp-1.5.3.jar; opencv-4.3.0-1.5.3.jar; openblas-0.3.9-1.5.3.jar; opencv-4.3.0-1.5.3-linux-x86_64.jar; openblas-0.3.9-1.5.3-linux-x86_64.jar; ```; The first three should be enough for everything to build - but not run. If either of the last two are missing - *or* if they cannot be loaded for some reason - then you get the kind of issue you report at runtime/test time. For earlier versions of QuPath/JavaCPP, the two OpenBLAS jars were not needed. If OpenBLAS seems to be the culprit, there are BLAS-related changes that can be made via system properties or by including other libraries... but I'm a bit out of my depth when it comes to them. A good starting point is ; https://github.com/bytedeco/javacpp-presets/tree/master/openblas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633366327:419,test,test,419,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633366327,1,['test'],['test']
Testability,"For now it was 2 times and luckily only 2 images (unfortunate within the same project). I think, it always happens when you use the Task manager to shut down the software, maybe that is something to be tested? I remember last time I also had to close the software with the Task manager because after half an hour it still did not respond.. . It would be awesome if indeed QuPath can discover the .bkp file and ask if this needs to be saved as the new data file, maybe indicating the date and time of the last back up to ask if you want to go back to this file or start from scratch to say so. But in general, this sounds like a good possible solution! Thanks!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640575237:202,test,tested,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640575237,1,['test'],['tested']
Testability,"From memory, I believe that the new classifier uses all the objects it is passed in the call to that method - it doesn't remember previous objects, or know the images that they came from. This information should be stored elsewhere, if it is needed. But always best to test these things if it's important...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417792656:269,test,test,269,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417792656,1,['test'],['test']
Testability,"From the log, it looks like you're calling the script with `40770,35790` as the width and height parameters - which seems much too big, leading to a memory allocation error. Could it be that the bug is in whatever script you're using to make the request from QuPath?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1056908079:9,log,log,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1056908079,1,['log'],['log']
Testability,"Glad you made it that far! I have not played with exporting images much, but for cycling through the detections I think you want getDetectionObjects(). I do not think selecting them returns them, so your script is not actually running through anything. You can test it by putting a print statement inside the loop too.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346643029:261,test,test,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346643029,1,['test'],['test']
Testability,"Going to have to make a few assumptions here, but I think that you probably changed locations or moved your project around from M2. M2 did not really tolerate changes to project locations very well, which led to the URI update detection and some other things. To work with the M2 projects in M2 again, the project file should either be in the same place, or I think you may need to edit the .qpproj file to update the new file path to the images. That is why the project will open (that path is set wherever you have run it from), but the images will not be found. If you open the log, I suspect that is the error message (and it will show the old file path). M8 will not run M2 projects, and I don't think it is very easy to even transfer annotations between them (you would probably need a script... and I'm not sure how well it would work even then).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/388#issuecomment-567689754:581,log,log,581,https://qupath.github.io,https://github.com/qupath/qupath/issues/388#issuecomment-567689754,1,['log'],['log']
Testability,"Good way to win my support with the password ;). Ok, it took a while but I am reasonably sure it's a Bio-Formats issue. I also couldn't find a problem with the `RandomAccessInputStream`, but it turns out that this isn't the code that's being called; rather it calls instead ; https://github.com/ome/ome-common-java/blob/94fe420a95f7859839e09e84185bc31107ba0b72/src/main/java/loci/common/RandomAccessInputStream.java#L590. I didn't trace through the (rather more complicated) logic but I can confirm with a debugger that this consistently returns a NULL at the end of the image name with the `SISReader`... including for other SIS files that I found posted on image.sc. Taking QuPath (mostly) out of the equation, this script demonstrates that the null occurs:; ```groovy; import loci.formats.MetadataTools. def path = ""/path/to/image.tif"". def reader = new loci.formats.ImageReader(); reader.setMetadataStore(MetadataTools.createOMEXMLMetadata()); reader.setId(path). def name = reader.getMetadataStore().getImageName(0); println ""Name: ${name} (length = ${name?.length()})""; if (name && name[-1] == (char)0); println 'NULL found to terminate string'; ```. With that in mind, I think it may be worth reporting to the Bio-Formats team to see if they consider this to be wrong or not. On the QuPath side, it *could* check for NULL at the point when the image name is requested from Bio-Formats. I feel like this would remove any weirdness at its source. It might be possible to smuggle a NULL into the results table some other way, but I don't see an obvious path to achieving that... so I don't think the copy-to-clipboard thing should be changed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/573#issuecomment-664566676:475,log,logic,475,https://qupath.github.io,https://github.com/qupath/qupath/issues/573#issuecomment-664566676,1,['log'],['logic']
Testability,"HI,. Thanks for you help!. File format: .tif . This is all the info of the image. I didn’t try with another version. Will do now. . Info under show log:. INFO: Initializing type adapters; INFO: Bio-Formats version 6.7.0; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.7.0) (18 ms); INFO: Loaded extension ImageJ extension (69 ms); INFO: Loaded extension Processing extension (30 ms); INFO: Loaded extension Rich script editor extension (81 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Update check for https://github.com/qupath/qupath; INFO: Starting QuPath with parameters: []; INFO: Setting max Bio-Formats readers to 4; WARN: Temp memoization directory created at /var/folders/_v/1nq60v556l5cbwcdv47wq76w0000gn/T/qupath-memo-4532483650866269942; WARN: If you want to avoid this warning, either specify a memoization directory in the preferences or turn off memoization by setting the time to < 0; INFO: Image data set to ImageData: Not set, 16.tif - Series 0. Again, thank you very much for your incredible help!. Manuel. > El 30 may. 2022, a las 13:52, Pete ***@***.***> escribió:; > ; > ; > Hi, some questions:; > ; > What is the file format?; > Under the 'Image' tab, what is shown at the entry 'Server type'?; > Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; > Is there any relevant information under View → Show log?; > If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917 <https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917>; > If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/973#issuecomment-1141062643>, or unsubscribe <https://gi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758:148,log,log,148,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758,1,['log'],['log']
Testability,"Haven't really tested it on all versions, but I did have this snippet in a script when I needed to check version for functionality:; ```; if (!getQuPath().getClass().getPackage()?.getImplementationVersion()){; params.getParameters().get('getOverlayAs').setValue('Annotations'); }; ```; I think it failed for version 0.1.3",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/282#issuecomment-473362480:15,test,tested,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/282#issuecomment-473362480,1,['test'],['tested']
Testability,"Hello @petebankhead, . Thank you for your quick consideration of the issue.; From what I have tested until now, it works fine. The number of characters in block comments does not throw the error anymore. and I can still run the scripts.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176#issuecomment-1362564457:94,test,tested,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176#issuecomment-1362564457,1,['test'],['tested']
Testability,"Hello All,; I am working on something similar for exporting annotation objects from QUpath as shapefiles .shp/.dbf/.shx for later import into definiens. ; I would say I am 80% through.; Currently I have a python script that (given polygon vertices) dumps out the shapefiles that definiens is able to ingest. Not yet tested with complex shapes like holes within polygons though!; Also I have a groovy script along the lines mentioned above by Peter that dumps out vertices from QUpath annotations.; Ideally I would like to have a single python script that does both (using Jython within QUpath maybe). Not sure if anyone has tried Jython in QUpath before?; In case Peter is thinking of developing this functionality for exporting annotations objects from QUpath, I would say shapefiles is one such format that is widely used (and has third party libraries for handing the read/write).; cheers!; rawat.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-395886486:316,test,tested,316,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-395886486,1,['test'],['tested']
Testability,"Hello Pete,. Thanks for your quick reply. I was just testing the import functionality as I wanted to get point coordinates from a third party software. I've written a short Groovy script as you suggested. Thanks a lot for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/218#issuecomment-420705510:53,test,testing,53,https://qupath.github.io,https://github.com/qupath/qupath/issues/218#issuecomment-420705510,1,['test'],['testing']
Testability,"Hello,. Sorry for not being able to reply, in the end I didn't bother and used the; mac instead of my windows laptop.; The name server was the same for both indeed;; As for the .vsi file, I didn't find it, however I used the same source; (external hdd), so the files used were exactly the same between the test on; windows and the test on mac. Again, Sorry for the late reply,; If you want to further explore this bug, I can try to fetch the logs for; you. Best,; PA. On Wed, Feb 2, 2022 at 12:29 PM Pete ***@***.***> wrote:. > Upon reflection, it could also be a .vsi file with the core data directory; > missing - but it's really not possible for us to guess with much confidence.; >; > I'll close this issue due to a lack of information.; >; > Bug reports here should really follow the defined template shown when; > creating a new issue, so that they contain enough information for us to; > understand and address any issues. Please feel free to start a topic on; > https://forum.image.sc/tag/qupath for any general discussion to try to; > identify what may be going wrong.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/891#issuecomment-1027846469>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AXL6CANNPIUHWFEUZL7PLZDUZEISDANCNFSM5MKBAMCA>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.; >; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/891#issuecomment-1027855598:306,test,test,306,https://qupath.github.io,https://github.com/qupath/qupath/issues/891#issuecomment-1027855598,3,"['log', 'test']","['logs', 'test']"
Testability,"Here is an _extremely_ quickly put together script that I have tested precisely once... may or may not do what it is meant to. But basically you'd create an entirely new project, go to _Automate &rarr; Show script editor_ and paste the contents there. When you run it, you should be prompted to select a folder. Choose the _base_ folder that all your .qpdata files are inside (doesn't matter if they are in subfolders). Note that this assumes that _all_ the .qpdata files are worth using; you may want to delete any extra .qpdata files if that is not the case. The script should then search (recursively) for all .qpdata files that it can find, and all .tif files that it can find, somewhere below the folder you selected (don't choose something like C:/ or it will take a _long_ time). It then peaks inside the .qpdata file, checks what .tif file it is associated with, and if it finds a match it will add the .tif file to the project and copy the .qpdata file to the 'data' folder where it belongs. Then your project should be fully formed and ready to go. You could just try it... but ideally not on the only copy of your data, lest it go badly. However I _think_ it works. ```groovy; import javafx.application.Platform; import qupath.lib.gui.QuPathGUI; import qupath.lib.gui.helpers.DisplayHelpers; import qupath.lib.io.PathIO; import qupath.lib.projects.ProjectIO; import qupath.lib.projects.ProjectImageEntry. import java.awt.image.BufferedImage. // Get the current project; def project = getProject(); if (project == null) {; DisplayHelpers.showErrorMessage(""Project from .qpdata"", ""Create a project first!""); return; }. // Get the base directory; def dirBase = QuPathGUI.getSharedDialogHelper().promptForDirectory(null). // Get all the .qpdata files; def qpdataFiles = new ArrayList<File>(); def tiffFiles = new ArrayList<File>(); dirBase.eachFileRecurse {; if (!it.isFile()); return; if (it.getName().endsWith('.qpdata')); qpdataFiles << it; else if (it.getName().endsWith('.tif')); tiffFiles",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461170872:63,test,tested,63,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461170872,1,['test'],['tested']
Testability,"Here you can look at the different types of ROI you can draw (just in case). https://github.com/qupath/qupath/tree/master/qupath-core/src/main/java/qupath/lib/roi. The script below should work for rectangles (I was using for circles but quickly modified it for rectangles so test it). It looks for a txt file (one line for each rectangle specifying the top left corner coordinatex X,Y as well as Width and Height) having the same name as the digital slide and then iterates through all the lines. Try it. It should work. ```; import qupath.lib.scripting.QPEx; import qupath.lib.objects.*; import qupath.lib.roi.*. def imageData = QPEx.getCurrentImageData(); def server = imageData.getServer(); def radiusCirc = 9055. String path = server.getPath(); //print path; def strfname = path[path.lastIndexOf('\\')+1..-1]; def strfnameTrim = strfname[0.. strfname.lastIndexOf('.')-1] ; def strpnameTrim = path[0..path.lastIndexOf('\\')]; def coordFname = strpnameTrim+strfnameTrim + "".txt"". print coordFname. def file = new File(coordFname); def lines = file.readLines(). num_rois = lines.size; print num_rois. for (i = 0; i <num_rois; i++) {; float[] x1 = lines[i].tokenize(',') as float[]; ; print x1[0]; print x1[1]; print x1[2]; print x1[3]; ; // Create object; def roiIter = new RectangleROI((x1[0] as double), (x1[1] as double),x1[2] as double, x1[3] as double); //def pathObject = new PathDetectionObject(roi); def pathObject3 = new PathAnnotationObject(roiIter); // Add object to hierarchy; addObject(pathObject3); }. print(""Numero de regions""); print num_rois; print strfnameTrim + "".txt""; print strpnameTrim3; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/128#issuecomment-356114669:275,test,test,275,https://qupath.github.io,https://github.com/qupath/qupath/issues/128#issuecomment-356114669,1,['test'],['test']
Testability,"Hi @GeorgeEVHB QuPath is using Bio-Formats to read .vsi files. There is a small bit of custom logic in QuPath to overcome some .vsi weirdness (with image dimensions not being as expected), which *could* be relevant... but may well not be. I'd suggest posting a question on the forum at https://forum.image.sc/tag/qupath and tagging it both with `qupath` and `bio-formats` as the easiest way to contact developers of both simultaneously. If you can share an example image there that would be very helpful. There are also lots of vsi-related discussions already on the forum, but I'm not sure if any of them match: https://forum.image.sc/search?q=vsi%20qupath. For example, this one might be relevant, but there isn't enough info for me to act on: https://forum.image.sc/t/difficulties-opening-vsi-files-in-qupath-0-3-2/64938/3",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1034#issuecomment-1205338080:94,log,logic,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/1034#issuecomment-1205338080,1,['log'],['logic']
Testability,"Hi @dkurt sorry for the long delay, I'm finally getting back to StarDist/ImageOps/normalization before the next release. In the end, percentile normalization turned out to have a lot of extra complexities that I hadn't originally considered. I've tried to address them in; * https://github.com/qupath/qupath/pull/1130; * https://github.com/qupath/qupath/pull/1146. These are intended to help QuPath fully support the [bioimage.io preprocessing spec](https://github.com/bioimage-io/spec-bioimage-io/blob/gh-pages/preprocessing_spec_0_4.md), which assumes 32-bit input and output. They also add support to normalize channels independently or jointly (since it [turns out some of the StarDist models uses joint channel normalization](https://forum.image.sc/t/stardist-in-qupath-normalization-issue/38912/13)). I hadn't realised Apache Commons Math provides [10 different methods that can give different results](https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/stat/descriptive/rank/Percentile.EstimationType.html)), so I've now switched to using the one that matches with NumPy (and I think also R, Julia and others). Along the way, performance should be substantially improved by avoiding full array sorting and using parallelization; I'm seeing reductions from ~1 second to 0.2-0.3s in some tests. Because of these changes, I'd like to close this PR in favor of keeping the code simpler and not introducing an optimized alternative specifically for 8-bit RGB. Thanks again though - this helped to show me how slow & in need of improvement the original code was :). (If you ever want to test how the performance of your optimized approach compares with the new version, I'd be curious about the result - but I realise that probably isn't a priority. In any case, my [timing code is here](https://github.com/qupath/qupath/blob/main/qupath-core-processing/src/test/java/qupath/opencv/tools/TestOpenCVTools.java#L487)).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547:1333,test,tests,1333,https://qupath.github.io,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547,4,"['Test', 'test']","['TestOpenCVTools', 'test', 'tests']"
Testability,"Hi @melvingelbard . Thank you for checking these old codes and adding the patch!. However, I test the `.qpmap` file again and find it might be a bug about encoding (Chinese or maybe non-ACSII characters). In my test, in the current version (v0.3.0), qupath can handle the `.qpmap` with the last line only having one value. But the example I provided had been simplified. Each unique ID not only contain “C” & four number, like “C2293"", but also a person's name in Chinese, like ""C2293张三"" (“张三” is a fabricated name). For example, this format is ok: ; `qpmap` file is attached below and feel free to delete `.txt`.; [test ok.qpmap.txt](https://github.com/qupath/qupath/files/7374322/test.ok.qpmap.txt); ```; C2293	C2297	C2301	C2313	C2314	C2315	C2334	C2345	C2357	C2384; C2386	C2388	C2401	C2402	C2437	C2447	C2481	C2510	C2512	C2528; C2524	C2536	C2539	C2557	C2585	C2595	C2602	C2615		; C2293									; ```; But with only one Chinese name, qupath think it‘s an image:; [test with a chinese name.qpmap.txt](https://github.com/qupath/qupath/files/7374354/test.with.a.chinese.name.qpmap.txt); ```; C2293张三	C2297	C2301	C2313	C2314	C2315	C2334	C2345	C2357	C2384; C2386	C2388	C2401	C2402	C2437	C2447	C2481	C2510	C2512	C2528; C2524	C2536	C2539	C2557	C2585	C2595	C2602	C2615		; C2293; ```; However, all the unique ID contain a Chinese name. To protect patients' privacy, only first name is shown below.; [test with all chinese first name.qpmap.txt](https://github.com/qupath/qupath/files/7374378/test.with.all.chinese.first.name.qpmap.txt); ```; C2293章	C2297顾	C2301马	C2313张	C2314周	C2315耿	C2334王	C2345田	C2357刘	C2384孔; C2386张	C2388周	C2401陈	C2402罗	C2437胡	C2447许	C2481朱	C2510嵇	C2512施	C2528周; C2524李	C2536彭	C2539司	C2557吴	C2585陈	C2595赵	C2602林	C2615孙		; C2293章									; ```. It seems another part of the code triggers the bug. In addition, all the three `.qpmap` files above work well in qupath v0.2.3.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-946818399:93,test,test,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-946818399,8,['test'],['test']
Testability,"Hi @melvingelbard if I remember the Histogram code well enough, the bin width is fixed during creation and can't be changed. Therefore I don't think there should be two public methods to get an index, since the index won't be meaningful if the consumer specifies a bin width that doesn't match the actual histogram data. If there's a need to retain both methods non-publicly, can QuPath automatically choose the 'correct' one based upon knowing whether or not the bins have a fixed width?. Keeping methods at least package private would mean they could both be called from tests, if there's a need to ensure that they behave properly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/719#issuecomment-830006631:573,test,tests,573,https://qupath.github.io,https://github.com/qupath/qupath/pull/719#issuecomment-830006631,1,['test'],['tests']
Testability,Hi @petebankhead I tested your latest `master` branch on a project with about 40 VSI files and 90 H&E images in the original project (some of which were removed by the user) and the import worked perfectly. Thank you very much for the prompt reply and fix!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/515#issuecomment-640612895:19,test,tested,19,https://qupath.github.io,https://github.com/qupath/qupath/issues/515#issuecomment-640612895,1,['test'],['tested']
Testability,"Hi @saudet thanks very much for checking this. Yes, it is still a problem with JavaCPP 1.5.6 (although less often, with the larger limit). I have just confirmed it following the steps to reproduce above and the [OS-1.ndpi](https://openslide.cs.cmu.edu/download/openslide-testdata/Hamamatsu/OS-1.ndpi) image from openslide.org. ![Screenshot 2022-01-21 at 05 53 09](https://user-images.githubusercontent.com/4690904/150473986-f94358f8-f834-46d6-b502-d80d040829a6.png). ![Screenshot 2022-01-21 at 05 50 03](https://user-images.githubusercontent.com/4690904/150474005-3aae13a4-6bed-44f9-af05-fb0b677abf0b.png). QuPath's *Memory Monitor* above is based upon whatever `Runtime` provides. I followed the exact same steps on a 2013 iMac without any problems, so there does seem to be something different on the M1. Our use may be a little obscure. QuPath's pixel classifier ([docs](https://qupath.readthedocs.io/en/stable/docs/tutorials/pixel_classification.html)) is designed to support interactively training a machine learning classifier. It should support many image types, but is typically used with very large, tiled, multiresolution biomedical images (usually 10-50 GB per 2D image). The pixel classification uses OpenCV's ML module via JavaCPP, but in principle also supports semantic segmentation using a pretrained deep learning model with OpenCV's DNN module or TensorFlow - JavaCPP is central to it all (thanks!). In all cases, each required image tile is read on demand and cached as a Java `BufferedImage`. It is converted to an OpenCV `Mat` temporarily for whatever calculations are required, then the end result converted back to a `BufferedImage`. Therefore quite a lot of fairly large `Mat` objects can be generated for the pixels, features and predictions, but closed after use and using `PointerScope` extensively since QuPath v0.3. This seems to be working very well everywhere except on M1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470:271,test,testdata,271,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470,1,['test'],['testdata']
Testability,"Hi @vatempeli . I can replicate the bug if I delete one of the values in the *Create thresholder* dialog, and then press one of the associated up or down arrows. The solution is to type a valid number instead. Then the arrows should work. If that's not the issue you're seeing, I'd need more details about *exactly* what steps you used. I'd also need the full log message (the top is cropped off in the screenshot, so it misses the most important information).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/988#issuecomment-1145813614:360,log,log,360,https://qupath.github.io,https://github.com/qupath/qupath/issues/988#issuecomment-1145813614,1,['log'],['log']
Testability,"Hi David,. Thanks, I'm glad you like the documentation! It's always a difficult balance between writing documentation, developing new features and polishing/fixing/generalizing current ones... Although I developed the software at university, as it started to become more useful others began to test it and gave useful feedback, and I discussed its application often with pathologists. So never really alone. There is no log file written at the moment - mostly because I wasn't sure where to save it and didn't want to annoy a user with files appearing where they did not want them... although it would probably be worth adding an option for this. I will look into it. However, you can at least see what is logged for the current session under 'View -> Show log'. In many cases, this should automatically appear if QuPath suffers any serious disaster - but that is not guaranteed to happen, so it can help to open the log window early if you anticipate a crash may occur. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-275033701:294,test,test,294,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-275033701,5,"['log', 'test']","['log', 'logged', 'test']"
Testability,"Hi Liese,. You might be able to directly continue retaining a classifier if you use the *Save training objects* option under the ```More``` button, and then *Load training objects* next time. At least that is what that option is intended for... although I can’t say I have used it very much, so it hasn’t had a lot of testing. Regarding the second question, I feared that this would be the problem when I wrote my reply... I suppose that in the absence of an elegant solution, it is worth considering inelegant ones. I can think of a few possibilities, although how feasible they are would depend upon how many cores you need to analyze, what outputs you require, and just how different the cores are. ---. Here are some ideas (not necessarily all good ones):. 1. You could annotate regions of interest and detect cells only inside your annotations - no need for a classifier at all. This would mean you need to draw an awful lot of annotations (one or more for every core), but at least you are in full control of what is annotated. 2. You could train up a classifier for all the ‘similar-enough-looking’ cores on one slide, and save that classifier. For all the cores that aren’t handled well enough, you could go through and set them as ‘Missing’. When you export your results, you need to be careful to ignore all the ‘Missing’ cores.; Then, you can duplicate your project, and delete all your annotations. You can go through and set all the ‘Missing’ cores to be available, and all the available cores to be ‘Missing’. Then train up a new classifier, and export the results again.; This way you can use multiple classifiers. It’s not very elegant at all, and I’m not sure that I would recommend it… but it is an option.; > If you try this, you could toggle the ‘Missing’ status in a script or manually. If you do it manually, I’d suggest opening the ‘Hierarchy’ tab on the left of the screen, and selecting the first core. Make sure you have clicked somewhere inside the main viewer to activate i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:318,test,testing,318,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['test'],['testing']
Testability,"Hi Marcel, if you want to try the version described [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html) then hopefully it resolves this issue. Be sure to fetch the very latest version, as I've only incorporated in the changes in the last few minutes. I just have one Dell touchscreen to test on (and no pen), but with these changes it certainly behaves a lot more sensibly than it did previously.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-408029691:312,test,test,312,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-408029691,1,['test'],['test']
Testability,"Hi Mario,. Thanks for letting me know. I have tried several MRXS images on v0.1.1 using Mac and it seems to be working here, so it would be good to know a bit more about the problem you are seeing. * Are you running QuPath on Windows/Linux/Mac?; * When it doesn't work, do any errors appear - or do you see any errors logged under *View &rarr; Show log*?; * Do you know if v0.1.0 works?. Thanks,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265467061:318,log,logged,318,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265467061,2,['log'],"['log', 'logged']"
Testability,"Hi Pete, . > Ok, had a quick check on my Mac since you mentioned it - and I'm afraid the scroll isn't working very nicely :( The 'magic mouse' makes horizontal scrolling really easy - which is handy for panning around the image if you turn View → Multi-touch gestures → Scroll gestures. However here it means that tools switch really easily... and continually happen by accident during normal use. So, maybe this is because I use QuPath in Windows, usually with a mouse rather than a touchpad. Since I don't (know how to) use many Multi-touch gestures, I thought it would be enough to only enable my tool selector when ""use scroll gestures"" is disabled. I just checked that this is still the case and you don't even need to close the preference window to test that. > How useful is this aspect of the PR? Would you miss it badly if that part was removed...?. Not super important, I put it there for *my* convenience as I don't scroll the image side to side (I use the move tool) and prefer using the mouse wheel for zooming. > I think (but haven't thoroughly checked) that the middle button should be less troublesome, partly because Mac mice don't have middle buttons. Of the two proposed changes (side to side tool selection, middle button to come back to the previously selected tool), the middle button is the one I would say is the more useful one. > But I remain a bit apprehensive about needing a debounce delay, and worry about adding even more complexity to the various event filters and handlers that are active when interacting with the viewer. I agree that debounce should really be part of the OS. QuPath shouldn't be blamed for not working quite right with a broken mouse. > Can you say a bit more about how useful you've found this, and when?. * First the one I found most useful: For me, this feature really shines when I need to draw lots of small regions for a pixel classifier. I draw either rectangles or use the polygon tool and yes, I could just try and remember that ""m"" is for ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1312815565:755,test,test,755,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1312815565,1,['test'],['test']
Testability,"Hi Pete, ; it happend two more times and I found in the log file, that the chosen channel 4 does not offer information for celldetection. After that QuPath switches automatically into channel 1. But Cell detection errors happen. Maybe because the switch is to slow?. You can see the nature of the cell detection errors in the screenshots. It happens, that QuPath copies celldetections form one part of the image into another one. I marked that in the screenshot above with the red polygons. . I changed the script using directly channel 1 instead of channel 4. ; Now it seems like not to happen anymore. I keep you updated. Since I changed the channel, I analysed only two more images. . The script uses fluorescence type on a DAB only stained jpg image for watershed cell detection. ; That seems to make no sence in the first place. But I found out by accident, that it allows cell detection in white areas if nuclei are not stained at all. ; This is very useful for many applications. . Is there any argument against this way for image processing of a brightfield image?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/153#issuecomment-370400288:56,log,log,56,https://qupath.github.io,https://github.com/qupath/qupath/issues/153#issuecomment-370400288,1,['log'],['log']
Testability,"Hi Pete, and thanks for putting us in the loop!; It is true that the` RegionRequest` bits are a bit verbose, and any ease on that part would be welcome. . The proposed changes will have little effect on our scripts, as most calls are for `IJTools.createPathImage()` in any case... Concerning Warpy, and other extensions, we are happy to modify them and to update them no problem, and make sure to freeze the previous versions. On a personal note, breaking changes let us keep an eye on scripts that are still being used (often for projects that have little to do with the original requirements), so we kind of see it as a good thing when people come to us because something ""no longer works"". Helps us make sure that not too many weird things are being done with our scripts :) . I am pinging @rdornier, for completion, as he was working on the OMERO-RAW part we have here and might need to make some changes there, if we keep that extension after the 0.4 update. . One argument for making more intensive changes, without too much backwards compatibility is that it really forces us to keep up with the new developments, rather than let it linger on until it's too late. So I'm more in favor of ""breaking"" than keeping full backwards compatibility. Though admittedly, our user base is not as large as yours, so we won't see as much of a tidalwave... > include this in QuPath v0.4.0 (hopefully later this month). Awesome. > remove the default implementation of readRegion in v0.5.0, forcing any subclass of ImageServer to be updated to work... but still allowing scripts to use readBufferedImage, with the deprecation message logged. OK for us, though if the scripts end up breaking, this would not be a problem, kind of a nice extra way of announcing that things have changed. > remove readBufferedImage later, e.g. in v0.6.0. Not in v0.5.0 already? . Thanks again for the discussion! Looking forward to notes and comments from others!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1273134547:1625,log,logged,1625,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1273134547,1,['log'],['logged']
Testability,"Hi Pete, here is a set of screenshots replicating my steps. Now that you mention this, I am not sure if the issue generates due to user privilege's. One of the user here is an admin, the second one isn't, the same first user credentials were used to install both QuPath's. From this test I was able to navigate to all the folders of the first user. ; ; [qupath_security.pdf](https://github.com/qupath/qupath/files/9930678/qupath_security.pdf)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1302305950:283,test,test,283,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1302305950,1,['test'],['test']
Testability,"Hi Pete, thanks for your reply. I agree that every abnormal termination will cause data to be lost, but I do have the strong feeling it should not brake the file ;) I hope you can agree on that. . I tried your approach and that indeed made the sample available again! Thanks! . To answer your questions:. 1. what errors do you see under View -> Show log?. INFO: Bio-Formats version 6.5.0; INFO: Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (13 ms); INFO: Loaded extension Experimental commands (1 ms); INFO: Loaded extension Experimental commands (35 ms); INFO: Loaded extension ImageJ extension (41 ms); INFO: Loaded extension JPen extension (14 ms); INFO: Loaded extension Rich script editor extension (244 ms); INFO: Loaded extension SVG export commands (0 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: CD3 analysis-project; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; ERROR: Reached end of file...; ERROR: Load ImageData: QuPath has encountered a problem, sorry.; If you can replicate it, please report it with 'Help -> Report bug (web)'. java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:731); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:716); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2634); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:350,log,log,350,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['log'],['log']
Testability,"Hi Pete,. . thank you so much!. However can you tell me which is the very latest version?. Is it “core-processing-awt” or “gui-fx”? Both were published five days ago. . Once again thank you so much for your quick support!. . Marcel. . Von: Pete [mailto:notifications@github.com] ; Gesendet: Donnerstag, 26. Juli 2018 05:04; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . Hi Marcel, if you want to try the version described here <https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html> then hopefully it resolves this issue. Be sure to fetch the very latest version, as I've only incorporated in the changes in the last few minutes. I just have one Dell touchscreen to test on (and no pen), but with these changes it certainly behaves a lot more sensibly than it did previously. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-408029691> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t627iqkNMmyVFat9LbnxkR_wY7xIks5uKYX4gaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9t_MNy2cguhmKmBspZsSx-GuGcLgeks5uKYX4gaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-409252791:761,test,test,761,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-409252791,1,['test'],['test']
Testability,"Hi Pete,. . that seems to be the solution! Thank you sooo much!!!!. I still got some weird lines in the command prompt but QuPath is working now, supports all pen functions I was looking for and I am able to open *.svs files again!. . You are truly the best!. . Once again thank you so much for your fast reply and great solutions!. Best regards from New York,. Marcel. . . . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 21. August 2018 08:03; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . It looks like you're using 32-bit Windows - or, if not, then at least the 32-bit version of the Java JDK. QuPath needs the 64-bit bit version, unfortunately. If your Windows supports it, then you could try uninstalling the Java JDK and installing the one on the download page flagged as 'Windows x64' (rather than 'Windows x86'). That might help. I don't see exactly why it would cause this error (at 98%, so close!), but it's my best guess... I've not seen that error before, but I've only been able to test it on a 64-bit system. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-414650057> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t8wENrYavz2PybkZl3_cTMFIedraks5uS_bZgaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9t5RWGu2zR9v2mWkHqPuU0bk-gBHDks5uS_bZgaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-414685806:1097,test,test,1097,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-414685806,1,['test'],['test']
Testability,"Hi Pete,. I just ran the `paquo` test suite against the `qupath` snapshot version from this PR and all tests pass. So there are no concerns from our side. Also, since the current release of `paquo` supports any QuPath from `0.2.0-m9` to (now tested) `0.4.0+snapshot` (https://github.com/qupath/qupath/pull/1072/commits/a91c5bfc865710308dc22f11fd6a3f4709eaf799) having a small breaking change would also be fine. We're maintaining a bunch of checks to support the different QuPath versions anyways. So what I am saying is: please don't keep any cruft around just because it might break `paquo`. Cheers,; Andreas",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1273266885:33,test,test,33,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1273266885,3,['test'],"['test', 'tested', 'tests']"
Testability,"Hi Pete,. I'm running QuPath under Mac. We replicated the issue on 2 machines. Version 1.0.0 works fine, too.; Server Type: OpenSlide. V1.0.1. Error in log is: Could not load OpenSlide native library (followed by a lot of Java errors); Server Type: ImageJ server. Cheers,; Mario",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265471212:152,log,log,152,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265471212,1,['log'],['log']
Testability,"Hi Pete,. Thank you for the swift reply! The actual project file itself is stored in a local-only folder, since it is a much smaller size than the image files themselves. I apologize for not including the log, I was in full panic mode when I first realized what had happened and didn't think about looking through the log or at the version until much later. Do you think there is any way to get this data back? And do you think it will be safer if I have everything on an external hard drive for my next project, including all image and project files? I can also make individual project files for each image to avoid losing too much data at once, but that seems like a pretty time-consuming/ computationally intense option.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1313#issuecomment-1706882325:205,log,log,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/1313#issuecomment-1706882325,2,['log'],['log']
Testability,"Hi Pete,. This has happened with Aperio svs images as well. In that specific case, it; was the Annotation tab that became unclickable (I was probably in the; process of creating many ROIs in a short period of time, or checking; something to do with the Annotaions). I did not check the log,; unfortunately. Next time it happens, I’ll be sure to see if something there; pops up and let you know. As far as I can tell, it is just the tab I was using frequently that; becomes unclickable. The other tabs and buttons are still functional. Thank you for the command tip!. Best,. Kristin. On Sat, Aug 12, 2023 at 3:46 AM Pete ***@***.***> wrote:. > I couldn't replicate this, although I haven't yet tried with czi images; > specifically. Does the problem occur with any other kind of images?; >; > Whenever the issue occurs, does *View → Show log* contain any relevant; > information? Or are any other user interface elements within QuPath; > unclickable, or is it just the 'Image' tab?; >; > (Apart from that, note that there's an command *View → Show slide label*; > that might be helpful for your workflow.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AUUIDLYPMLAAW5VXSI2FH2DXU4YGTANCNFSM6AAAAAA3LVSPFM>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >; -- ; Kristin Gallik, Ph.D",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1288#issuecomment-1675900769:286,log,log,286,https://qupath.github.io,https://github.com/qupath/qupath/issues/1288#issuecomment-1675900769,2,['log'],['log']
Testability,"Hi Pete,. in retrospect, I shouldn't have added the middle button code to one of your existing events. Instead, I gave the code its own `viewer.getView().addEventHandler(MouseEvent.MOUSE_PRESSED, e -> {})` event, which hopefully makes it easier to follow. This has also solved my debouncing issues, it seems. I actually had code that logged whether a bounce was detected within 10ms (as detailed above) but never saw such an event. Interestingly, and this is code I left commented out in my commit, checking for `isStillSincePressed()` as you suggested led to missed clicks. That, or maybe my logic is flawed:; ```java; 			if (e.isMiddleButtonDown()) {; 				/* ; 				if (!e.isStillSincePress() ) {; 					logger.warn(""The mouse moved! {}"", System.currentTimeMillis());; 					return;; 				}; 				*/; 				...; 			}; ```; However, moving the mouse while pressing the middle button doesn't have any adverse effect. Cheers,; Egor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1237132670:334,log,logged,334,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1237132670,3,['log'],"['logged', 'logger', 'logic']"
Testability,"Hi Pete,. thanks for your answer. I want to learn all functions of QuPath. I like ; your documentation a lot. Its well done work. Do you develop QuPath all alone by yourself?. Another question: is there a log file, QuPath is writing, that can help ; you to track and find the reason for bugs and system crashes?. We did that with our software in the past. It is very helpful. Best. David. Am 23/01/2017 um 21:44 schrieb Pete:; >; > Thanks for reporting this. I have not been working with CZI images ; > myself, but I recently received one example image with this problem. ; > Unfortunately, I have not yet been able to identify the exact cause, ; > beyond the fact that too much memory is used. Because the image is not ; > being read by QuPath directly (but rather Bio-Formats) it is a bit ; > harder for me to track down where exactly the problem lies. However, I ; > will continue to investigate, and add an update here when I learn more.; >; > In the meantime, I have been told that the Zeiss ZEN software is able ; > to export the different scenes as separate images, which can then be ; > read into a QuPath project ; > <https://github.com/qupath/qupath/wiki/Projects>. Therefore this may ; > be a workaround that enables you to work with the images in QuPath.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/45#issuecomment-274611030>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEV0UakHZI556HGXSHym-5fglXkHwks5rVREZgaJpZM4Lrcx8>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; G",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-274930919:205,log,log,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-274930919,1,['log'],['log']
Testability,"Hi Pete,. there's no much else I can do on this for now. It's ready to be tested by someone else in case I missed anything, and I don't have a mac to test on so I just can't guarantee this will work on all platforms. Also, the code is probably over-annotated and over-verbose on the console side, but that's just so that you can check what's going on in case there are issues I didn't notice myself. Once okayed, the code can be both toned down and cleaned up :-). If this is too much to test before the new release, we can reconsider this change for later. In fact, for this to be complete, I would also need to document my change (wouldn't be fair to let *you* do it if I wrote the feature) and add a middle button to your ""input viewer"". Cheers,; Egor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1312782231:74,test,tested,74,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1312782231,3,['test'],"['test', 'tested']"
Testability,"Hi Pete,; I gave the full path to compile, yet it still shows error:. (base) [yangzhzh@hpc-login-gpu01 qupath-master]$ ./gradlew createPackage -Ppackager=/public/home/yangzhzh/tools/jdk-14/bin; Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Building QuPath version 0.2.0-m4; Current Java version: 12; /public/home/yangzhzh/tools/jdk-12.0.2; Operating system: Linux 3.10.0-862.14.4.el7.x86_64 amd64; Copying license directories: ; /public/home/yangzhzh/tools/qupath-master/qupath-core/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-core-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-bioformats/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-openslide/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-pen/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-script-editor/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /public/home/yangzhzh/tools/qupath-master/license-unknown.txt; > Task :createPackage FAILED; Using packager: /public/home/yangzhzh/tools/jdk-14/bin; /public/home/yangzhzh/tools/jdk-14/bin --input /public/home/yangzhzh/tools/qupath-master/build/qupath --output /public/home/yangzhzh/t",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-534106040:91,log,login-,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-534106040,1,['log'],['login-']
Testability,"Hi Pete,; I really appreciate your fast reply and your support.; As a non-code-speaking researcher I have found qupath relatively easy to navigate, although there is a degree of trial-and-error involved.; I have implemented your suggestions and it seems to have got around the problem. My main issue is that I need more memory on my computer for the processing that I am doing (4GB RAM is not enough).; Thanks again,; Chris. From: Pete [mailto:notifications@github.com]; Sent: Monday, 8 January 2018 6:19 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: Christopher Rowe <Christopher.W.Rowe@uon.edu.au>; Author <author@noreply.github.com>; Subject: Re: [qupath/qupath] PositiveCellDetection and Classifier fails (#130). It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:807,log,log,807,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['log'],['log']
Testability,"Hi Peter, . Thank for the very complete message! I'll go and implement this now and submit it to see if it's to your liking. Right now I have placed my version of the ImageJMacroRunner in our QuPath, so that I could process the images I am receiving. > Furthermore, it might be prudent to take parallelization into account, and the result returned by PathPrefs.getNumCommandThreads(). I am not sure how you want to address this, each command thread might take an image of a different size, and these threads to not talk to each other. In a case like this, it would make more sense to find a way to gracefully show some sort of out of memory error in case this happens. > Currently you can use Objects → Create full image annotation. Perfect, then you're right, no need to send the whole image by default if it's just one command! I was making a RectangleROI with the dimensions of the image server in my script...; [EDIT] Hmm.. Actually I just tested that last one and preferred my way, as I do not need to add the annotation to the hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/134#issuecomment-356863236:944,test,tested,944,https://qupath.github.io,https://github.com/qupath/qupath/pull/134#issuecomment-356863236,1,['test'],['tested']
Testability,"Hi Tobias,. Everything in the stack trace relates to JavaFX - so I don't see anywhere where QuPath would be able to catch the error and do anything about it. A similar error was reported as a JavaFX bug but is apparently resolved [here](https://bugs.openjdk.java.net/browse/JDK-8095826). I'll leave the issue open for a while in case any new info comes to light, but since I don't have a Dell Active Pen to test with, and it doesn't _seem_ to be a problem in QuPath itself, I'm not sure whether anything can be done about it on the QuPath side. (If you could write a minimal JavaFX application that replicates the problem then it could be submitted as a JavaFX bug)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/372#issuecomment-549435406:407,test,test,407,https://qupath.github.io,https://github.com/qupath/qupath/issues/372#issuecomment-549435406,1,['test'],['test']
Testability,"Hi again! I finally went and edited the changes into my code in Eclipse, and while the channel option shows up and does not cause any errors, I am not seeing the channel change have any effect on the result. Has anyone else tested this and had it work? I am not sure if I am doing something wrong or missed something. I tried it with a few files from the OpenSlide site, like Mirax2-Fluorescence-1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323671758:224,test,tested,224,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323671758,1,['test'],['tested']
Testability,"Hi again,. I compiled the pete-java11 branch (after some ubuntu debugging). Sadly I had to compile it on a local laptop with low memory (until I get back to the lab). So take this into account (the log suggest that RAM is the problem on this machine). Here are my file links:. cropped : https://owncloud.ulb.ac.be/index.php/s/ReltLIepwxOZ2RK; fullsize : https://owncloud.ulb.ac.be/index.php/s/VhuHZheRNHgdUqk; PASSWORD: qupathBug ; Expires: march 17 2019. On my main machine I noticed that when opening the cropped version, qupath opens it after some minutes of intensive cpu calculations. This seems to suggest that qupath is precomputing something instead of directly opening the file. I tried opening my files and those from NHPatterson. As of yet it seems to still not be working. LOG DUMP; ```; INFO: Bio-Formats version 6.0.0; ERROR: Could not load OpenSlide native libraries; at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2660); at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:829); at java.base/java.lang.System.loadLibrary(System.java:1867); at org.openslide.OpenSlideJNI.<clinit>(OpenSlideJNI.java:55); at org.openslide.OpenSlide.<clinit>(OpenSlide.java:53); at qupath.lib.images.servers.openslide.OpenslideServerBuilder.<clinit>(OpenslideServerBuilder.java:87); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method); at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62); at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45); at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490); at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:779); at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:721); at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1394); at qupath.lib.images.servers.ImageServerProvider.getIn",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472375699:198,log,log,198,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472375699,2,"['LOG', 'log']","['LOG', 'log']"
Testability,"Hi!; Sorry for the delay.; Here is the link (huge, 7.3 gb); http://pathology.ee/test/slide.scn; One of my slides (Leica). Quite good example, has positive and negative areas and a damaged area (no need to measure it).; I was trying to solve the problem using Your advice, but still no results.; If You ll be able to help me, I d be very grateful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372454094:80,test,test,80,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372454094,1,['test'],['test']
Testability,"Hi, @petebankhead! I've created a repository with OpenVINO extension. (PR https://github.com/dkurt/qupath-extension-openvino/pull/1). Going to finish with tests and will merge to main branch soon. Also, it requires bounded PR to StarDist ext: https://github.com/qupath/qupath-extension-stardist/pull/12. Many thanks for great support and clear software API :) I really enjoy your project",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-921622336:155,test,tests,155,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-921622336,1,['test'],['tests']
Testability,"Hi, I test in Mac OS 10.13.3, I find log with errors:. ERROR: Unable to open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif; at loci.formats.in.TiffJAIReader.initFile(TiffJAIReader.java:111); at loci.formats.FormatReader.setId(FormatReader.java:1397); at loci.formats.DelegateReader.setId(DelegateReader.java:300); at loci.formats.ImageReader.setId(ImageReader.java:839); at loci.formats.ReaderWrapper.setId(ReaderWrapper.java:650); at loci.formats.Memoizer.setId(Memoizer.java:677); at qupath.lib.images.servers.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1156); at qupath.lib.images.servers.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1111); at qupath.lib.images.servers.BioFormatsImageServer$BioFormatsReaderManager.getPrimaryReader(BioFormatsImageServer.java:1025); at qupath.lib.images.servers.BioFormatsImageServer.<init>(BioFormatsImageServer.java:234); at qupath.lib.images.servers.BioFormatsImageServer.<init>(BioFormatsImageServer.java:198); at qupath.lib.images.servers.BioFormatsServerBuilder.buildServer(BioFormatsServerBuilder.java:46); at qupath.lib.images.servers.ImageServerProvider.buildServer(ImageServerProvider.java:115); at qupath.lib.gui.QuPathGUI.openImage(QuPathGUI.java:2228); at qupath.lib.gui.viewer.DragDropFileImportListener.handleFileDrop(DragDropFileImportListener.java:253); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:115); at qupath.lib.gui.viewer.DragDropFileImportListener.handle(DragDropFileImportListener.java:59); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:6,test,test,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,2,"['log', 'test']","['log', 'test']"
Testability,"Hi, ah, silly error on my part. Thanks. . Ok, so now the imports seem to work, but something isn't connecting right for the jep section of the script. ```. INFO: Mean red (from Java): 86.81525; INFO: Mean green (from Java): 72.492275; INFO: Mean blue (from Java): 68.141675; INFO: java.lang.UnsatisfiedLinkError: no jep in java.library.path. ```. I tried the script you sent and received:; ```. INFO: Current image data: ImageData: Fluorescence, IMG_5_11_sq; INFO: Current image server: ImageJ server: /home/bl/Documents/IMG_5_11_sq.png (IMG_5_11_sq.png). ```. I should say that I think jep is installed ok, though I have only played with for a second this morning. But I can start jep, and do the basic test on the jep git Getting Started page (the python to java one).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262781834:704,test,test,704,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262781834,1,['test'],['test']
Testability,"Hi, some questions:; * What is the file format?; * Under the 'Image' tab, what is shown at the entry 'Server type'?; * Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; * Is there any relevant information under *View &rarr; Show log*?. If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917. If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141062643:281,log,log,281,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141062643,1,['log'],['log']
Testability,"Hi,. Looking back that the documentation, I see it wasn't the clearest... I've just tested the following on macOS Sierra with a downloaded QuPath and I was able to run the script in the docs after the following steps:. 1. If you don't already have a QuPath extensions directory, you can either set one under *Edit &rarr; Preferences* or follow the process to install any extension that takes your interest [here](https://github.com/qupath/qupath/wiki/Extensions). 2. Next, locate where JEP is installed and create a symbolic link in your QuPath extensions directory to its Jar file. For me, this was the command:; ```; ln -s /usr/local/lib/python2.7/site-packages/jep/jep-3.5.3.jar /Users/pete/QuPath/extensions/jep.jar; ```. 3. Alongside the Jar, there were also two native files ```jep.so``` and ```libjep.jnilib```. The easiest way to get QuPath to see them is simply to copy these into your QuPath directory containing ```QuPathApp.jar``` (there should already be other native libraries there too). I haven't tested this on Linux, but would be very interested to know if it works (or, indeed, if other things are working fine for you with Fedora). If so I'll update the docs to be a bit clearer. Note that I never took the use of JEP with QuPath far enough for it to be genuinely useful, since I didn't have a sufficient need for it myself until now. But I think the ability to run Python scripts could be really valuable, so I'd be happy to help with setting this up or coming up with a neat way to wrap or convert data structures. If you'd like to discuss more the kind of applications you see this being useful for (e.g. segmentation, classification, manipulating objects, statistical analysis...) just let me know.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262733775:84,test,tested,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262733775,2,['test'],['tested']
Testability,"Hi,; Thanks for the reply and sorry for late feedback. So, I tested it all with a fresh install of m3 and a clean dedicated folder for testing. the structure is as follows:. -TestFolder; -- ImageFolder; -- qupath_project_folder1; -- qupath_project_folder2. For both projects, I generate a fresh initialization, load all the images in the ImageFolder and do some operations (shapes, cell detection ...). My aim is to be able to open either of both projects and it finding the relevant image files relatively (going one folder up), especially after moving the TestFolder around. Now I tested it on different PCs and VMs and keep getting the same behavior, i.e. getting the prompt window to manually re-specify the URI paths. So either I am missing something or I am going wrong about it. While the prompt is not a problem for me per se, when sending the files to collaborators, people tend to get scared or confused by the prompt, so I wanted to manually specify relative paths to make it more user friendly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518195636:61,test,tested,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518195636,5,"['Test', 'test']","['TestFolder', 'tested', 'testing']"
Testability,"Hmm, I am no longer seeing this behavior (no changes that I am aware of). It was the full release of M9. I am actually using the same project now that I was before, with untyped files still in the project Scripts folder when I was testing it before. I will reopen if I can reproduce the exact steps, since it seems to be more involved than simply happening every time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/433#issuecomment-613481580:231,test,testing,231,https://qupath.github.io,https://github.com/qupath/qupath/issues/433#issuecomment-613481580,1,['test'],['testing']
Testability,"Hmmm, I opened this wondering who had originally asked for this enhancement and now I see it was me.... In v0.2.0 the annotation ordering should be less 'jumpy' than it previously was, even if the exact logic is not always easy to fathom. You can also rename annotations but selecting them in the viewer and pressing `Enter`. @murbano89 ; Is this sufficient, or would it still be helpful to be able to rename them from within the hierarchy view? If so, would you envisage it by right-clicking and choosing 'Set properties' (like in the Annotation tab) or some other way?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-477945985:203,log,logic,203,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-477945985,1,['log'],['logic']
Testability,"Hmmm, I'm not sure what we gain from this?. We lose the ability to have multiple dialogs open to test the use of different parameters, e.g. for cell detection. And also, we lose the ability to double-click on a past entry under the 'Workflow' tab to open cell detection with the correct parameters. I think this is a really handy and important feature. So I'd tend towards rejecting and closing this, or have I missed a benefit?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1560#issuecomment-2255802929:97,test,test,97,https://qupath.github.io,https://github.com/qupath/qupath/pull/1560#issuecomment-2255802929,1,['test'],['test']
Testability,"Hmmm, this isn't a scenario I ever had to deal with myself... it looks like an unfortunate limitation of how the project arranges ```.qpdata``` files simply according to the image name stored for the entry in the image. There's no 'good' way to fix it currently, unless you're willing to put all your images in separate projects... which would kind of defeat the purpose of using a project. So you could try this as a workaround:. ```groovy; guiscript=true. // Get QuPath & project; def qupath = getQuPath(); def project = qupath.getProject(). // Loop through images, setting the name; // (actually accessing a private field... therefore 'bad'); project.getImageList().each {; def path = it.getServerPath(); int ind = path.lastIndexOf(':'); def scene = path[ind+1..-1]; def name = new File(path[0..ind-2]).getName(); it.putMetadataValue('Slide_ID', name); it.imageName = name + ' (' + scene + ')'; print it.imageName; }. // Need to set to null first to force update; qupath.setProject(null); qupath.setProject(project). // Be very careful is you use this to write the project!; // The logic is a bit weird and it will probably overwrite ; // the existing project - so duplicate your .qpproj file to be safer; //qupath.lib.projects.ProjectIO.writeProject(project); ```. Basically, this should rename the images in the project to include both the original file name and the scene. This should then be used by QuPath when arranging the ```.qpdata``` files afterwards. It won't automatically update the names of any existing data files - this would have to be done manually. It has the added bonus of setting the 'Slide_ID' keyword; if you right-click on the project, you can then choose to *Sort by &rarr; Slide ID*.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332598953:1085,log,logic,1085,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332598953,1,['log'],['logic']
Testability,"Hmmm, when using https://github.com/qupath/log-viewer/pull/59 via `includeBuild` this PR isn't working for me - I'm getting an exception as soon as I attempt to open the log viewer, and the pref width & height are still being returned as -1; ```; qupath.fx.dialogs.Dialogs - QuPath exception: The width and height must be >= 0. Got: width=-1; height=0; java.lang.IllegalArgumentException: The width and height must be >= 0. Got: width=-1; height=0; ```. Is this working for others? If so, I guess something is wrong with my setup and it's really using the older code...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731012559:43,log,log-viewer,43,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731012559,2,['log'],"['log', 'log-viewer']"
Testability,"Hmmm... I've never tried this kind of setup, and have no idea if it can work. It would be very interesting if you can find a way... Those dramatic errors tend to involve native libraries (rather that code within Java). From the log, it appears to go wrong at the the earliest stage - so I'd try to launch it from ```QuPathApp.jar``` directly. There might be some clues in [Issue 27](https://github.com/qupath/qupath/issues/27#issuecomment-264693922). Otherwise, would it be of any benefit if you could run scripts on the server - having developed the scripts locally, on the less powerful machine? There are some links regarding that at #94 . Even if this isn't what you want to do, it might be worth trying to run such a script from the command line just to see if it works, or if the same error occurs.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/109#issuecomment-336031954:228,log,log,228,https://qupath.github.io,https://github.com/qupath/qupath/issues/109#issuecomment-336031954,1,['log'],['log']
Testability,"Hmmm... the plot thickens. That error has a completely different source, and occurs after `getBrushDiameter()` has been constrained to be >= 1. https://github.com/qupath/qupath/blob/cece52bff55965b72577e413be67d9a91df8b55e/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/BrushTool.java#L481-L489. You could try resetting your preferences and testing on another computer. I will need to be able to replicate it to find a fix but currently I can't (on Windows) and it has not been reported before.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561076442:350,test,testing,350,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561076442,1,['test'],['testing']
Testability,"How would the sorting look? Would there need to be multi-level sorting?. QuPath's current sorting logic based upon the 'metadata' dictionary is... not great. I don't think it can really increase in complexity without breaking, so my feeling is we should also think broadly about how projects are displayed, sorted, and incorporate both metadata and tags.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1289#issuecomment-1687774301:98,log,logic,98,https://qupath.github.io,https://github.com/qupath/qupath/issues/1289#issuecomment-1687774301,1,['log'],['logic']
Testability,"Humnn, I have tested your suggestion and it doesn't seem to throw any error. I have yet to wrap my head around the whole TMA Data Viewer logic. Thank you for the quick review. Now does that mean, this also needs fixing ?; https://github.com/qupath/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L1444-L1446. Because I looked at the above code when correcting the following:; https://github.com/qupath/qupath/blob/fca7fa5fd9efd815f4c317705fbe2a0f9c39270f/qupath-gui-fx/src/main/java/qupath/lib/gui/tma/TMASummaryViewer.java#L1463-L1465",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1290993508:14,test,tested,14,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1290993508,2,"['log', 'test']","['logic', 'tested']"
Testability,"I admit I haven't tested it, but I think I see the problem in the code [here](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-processing-awt/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L341). Basically, QuPath is looking for a parameter called `tileSizePx` when the actual name it should be looking for is `tileSizePixels`. I guess it was changed at some point in one place but not the other. If this is correct, then it *should* work if you have pixel size (µm) information in the image, but fail if you don't. That might also explain why it went unnoticed for a while. Does that match with what you see? If so it should be a relatively small fix in the code to make it work for images that lack pixel size information.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/154#issuecomment-371117298:18,test,tested,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/154#issuecomment-371117298,1,['test'],['tested']
Testability,"I am experiencing the same issue with a Wacom pen tablet. I don't have the time to test the latest test version, I just want to hear if there are any plans on releasing a new pre-compiled version in the near future?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-454585138:83,test,test,83,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-454585138,2,['test'],['test']
Testability,"I am not sure about null, but if having a primary selected object is important, not having one could throw a meaningful error rather than returning null. ""No primary object is selected and you have attempted to select a single object when multiple objects are selected. Please add more logic to your statement to determine which object you want, if you only want one object."". That could probably be phrased better, but maybe it gets the idea across?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869212957:286,log,logic,286,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869212957,1,['log'],['logic']
Testability,"I briefly explored this, and can confirm that incorporating following logic into `readRegion` **didn't** solve things... ```java; // Fix output size to match tiles, if necessary; 		// See https://github.com/qupath/qupath/issues/1527; 		if (request.getDownsample() > 1 && nResolutions() > 1; 				&& request.getMaxX() <= getWidth() && request.getMaxY() <= getHeight(); 				&& request.getMinX() >= 0 && request.getMinY() >= 0) {; 			int minX = Integer.MAX_VALUE;; 			int minY = Integer.MAX_VALUE;; 			int maxX = -Integer.MAX_VALUE;; 			int maxY = -Integer.MAX_VALUE;; 			for (var tile : tiles) {; 				minX = Math.min(minX, tile.getRegionRequest().getMinX());; 				minY = Math.min(minY, tile.getRegionRequest().getMinY());; 				maxX = Math.max(maxX, tile.getRegionRequest().getMaxX());; 				maxY = Math.max(maxY, tile.getRegionRequest().getMaxY());; 			}; 			if (minX != request.getMinX() || minY != request.getMinY() || maxX != request.getMaxX() || maxY != request.getMaxY()) {; 				var request2 = request.intersect2D(minX, minY, maxX, maxY);; 				logger.debug(""RegionRequest updated from {} -> {}"", request, request2);; 				request = request2;; 			}; 		}; ```; This *did* crop the `RegionRequest`, but the output image was still 1432, due to rounding up after being calculated to be 1431.5... and then Java's rendering pipeline still left the black line. It seems to be especially subtle and hard to address...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1527#issuecomment-2124491582:70,log,logic,70,https://qupath.github.io,https://github.com/qupath/qupath/issues/1527#issuecomment-2124491582,2,['log'],"['logger', 'logic']"
Testability,"I build and tested commit [6b09b5a](https://github.com/qupath/qupath/pull/685/commits/6b09b5aafc63ef2456bb9ba3be4779a1eceadcef) with tensorflow-gpu option, it seems to work well with RTX 2080ti, CUDA 11.0 and cuDNN 8.0.4 on Windows 10. QuPath with previous version of tensorflow java (1.15) was very unpredictable when using GPU.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685#issuecomment-805287118:12,test,tested,12,https://qupath.github.io,https://github.com/qupath/qupath/pull/685#issuecomment-805287118,1,['test'],['tested']
Testability,"I can replicate the issue with CMU-1-JP2K from https://openslide.cs.cmu.edu/download/openslide-testdata/DICOM/. In a QuPath script, calling ; ```groovy; getCurrentServer().dumpMetadata(); ```; indicates that the magnification is not present in the OME metadata from Bio-Formats, therefore I don't think this is a QuPath bug. ; ```xml; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <OME xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""; xsi:schemaLocation=""http://www.openmicroscopy.org/Schemas/OME/2016-06 http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd""; xmlns=""http://www.openmicroscopy.org/Schemas/OME/2016-06"">; <Image ID=""Image:0"" Name=""VOLUME"">; <Description>DERIVED\PRIMARY\VOLUME\NONE</Description>; <Pixels BigEndian=""false"" DimensionOrder=""XYCZT"" ID=""Pixels:0"" Interleaved=""true""; PhysicalSizeX=""4.99E-4"" PhysicalSizeXUnit=""mm"" PhysicalSizeY=""4.99E-4""; PhysicalSizeYUnit=""mm"" SignificantBits=""8"" SizeC=""3"" SizeT=""1"" SizeX=""46000""; SizeY=""32893"" SizeZ=""1"" Type=""uint8"">; <Channel ID=""Channel:0:0"" SamplesPerPixel=""3"">; <LightPath />; </Channel>; <MetadataOnly />; <Plane TheC=""0"" TheT=""0"" TheZ=""0"" />; </Pixels>; </Image>; <Image ID=""Image:1"" Name=""THUMBNAIL"">; <Description>DERIVED\PRIMARY\THUMBNAIL\RESAMPLED</Description>; <Pixels BigEndian=""false"" DimensionOrder=""XYCZT"" ID=""Pixels:1"" Interleaved=""true""; PhysicalSizeX=""0.022416015625"" PhysicalSizeXUnit=""mm"" PhysicalSizeY=""0.022416015625""; PhysicalSizeYUnit=""mm"" SignificantBits=""8"" SizeC=""3"" SizeT=""1"" SizeX=""1024"" SizeY=""732""; SizeZ=""1"" Type=""uint8"">; <Channel ID=""Channel:1:0"" SamplesPerPixel=""3"">; <LightPath />; </Channel>; <MetadataOnly />; <Plane TheC=""0"" TheT=""0"" TheZ=""0"" />; </Pixels>; </Image>; <Image ID=""Image:2"" Name=""OVERVIEW"">; <Description>DERIVED\PRIMARY\OVERVIEW\NONE</Description>; <Pixels BigEndian=""false"" DimensionOrder=""XYCZT"" ID=""Pixels:2"" Interleaved=""true""; PhysicalSizeX=""0.058932714617169"" PhysicalSizeXUnit=""mm""; PhysicalSizeY=""0.058932714617169"" PhysicalSizeYUnit=""mm"" SignificantB",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1445#issuecomment-1881296347:95,test,testdata,95,https://qupath.github.io,https://github.com/qupath/qupath/issues/1445#issuecomment-1881296347,1,['test'],['testdata']
Testability,I can test some things but sadly my development knowledge is quite limited :(,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-642199331:6,test,test,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-642199331,1,['test'],['test']
Testability,"I can't replicate it with any of the openslide .svs test images, so I think so too",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1400#issuecomment-1779756531:52,test,test,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/1400#issuecomment-1779756531,1,['test'],['test']
Testability,"I cloned the repo and ran `mvn test`. Everything passed, and I saw printed; ```; NoFileBytes; 670285824 676003840; ```; I'll try to figure out if there's something else I'm doing wrong.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024124145:31,test,test,31,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024124145,1,['test'],['test']
Testability,"I could not replicate the problem. I opened the common sample image `CMU-1.svs` and used QuPath to write a pyramidal OME-TIFF with tile size 1024x1024 and default compression option (here, uses JPEG). After relaunching QuPath v0.3.2 (to ensure a clean start), It works properly with tile reading, caching and viewing across resolutions. * Have you tested this with multiple OME-TIFF files?; * Which software was used to write the pyramidal OME-TIFF files that are misbehaving?; * Are there any clues / errors reported in QuPath under *View &rarr; Show log*?; * Can you share any example images exhibiting this issue?. Note that v0.3.1 temporarily used a different version of Bio-Formats (6.8.0), but v0.3.0 and v0.3.2 use the same version of Bio-Formats (6.7.0). If you could compare behavior across all three versions, this may help identify when any problem could have been introduced.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/904#issuecomment-1025461117:348,test,tested,348,https://qupath.github.io,https://github.com/qupath/qupath/issues/904#issuecomment-1025461117,2,"['log', 'test']","['log', 'tested']"
Testability,"I couldn't replicate this, although I haven't yet tried with czi images specifically. Does the problem occur with any other kind of images?. Whenever the issue occurs, does *View &rarr; Show log* contain any relevant information? Or are any other user interface elements within QuPath unclickable, or is it just the 'Image' tab?. (Apart from that, note that there's an command *View &rarr; Show slide label* that might be helpful for your workflow.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182:191,log,log,191,https://qupath.github.io,https://github.com/qupath/qupath/issues/1288#issuecomment-1675771182,1,['log'],['log']
Testability,"I couldn't spot anything in the ""package"" parts that would change what's included in the output. I can get that list into the output directory by adding `assembleJavadocs` to the gradle build command. I would've guessed that adding `tasks.jpackage.dependsOn(""assembleJavadocs"")` in `build.gradle` would work too, but apparently not... I can update the github action for now, and try to fix the gradle logic after?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1652#issuecomment-2457072276:401,log,logic,401,https://qupath.github.io,https://github.com/qupath/qupath/issues/1652#issuecomment-2457072276,1,['log'],['logic']
Testability,"I created a new script with _Automate/Project Scripts/New Script_ (and _Automate/Shared Scripts/New Script_) but it seems to add '.groovy' each time appropriately. Did you try with the latest changes (QuPath/dev, which I used to test this)?. Tested on: Windows 10/MacOS",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/433#issuecomment-613380468:229,test,test,229,https://qupath.github.io,https://github.com/qupath/qupath/issues/433#issuecomment-613380468,2,"['Test', 'test']","['Tested', 'test']"
Testability,"I do not currently have a Wacom tablet to test this. You say 'returned', but you never reported if it was fixed for you in any version, only that you didn't have time to test it at the time I was actively working on it. If you want a solution, it would be helpful if you could provide much more detailed information about what does/did work, on which operating systems and which versions of QuPath etc. If I knew it works in v0.1.3 but not in v0.2.0-m1 _on the same computer_ that would be a start. Is this the case?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-479510416:42,test,test,42,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-479510416,2,['test'],['test']
Testability,"I don't know; to better understand what has gone wrong I'd need to know more information about what might be different in this case from previous times when you loaded scripts and didn't have a problem (e.g. anything appearing in the log, where QuPath is installed / where the script is located, if other scripts have the same effect). Since I can't replicate the problem myself, I'm afraid I can't really help much- also since the underlying issue should already be fixed in v0.2.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/422#issuecomment-606432591:234,log,log,234,https://qupath.github.io,https://github.com/qupath/qupath/issues/422#issuecomment-606432591,1,['log'],['log']
Testability,"I don't recall any memoization-related changes in v0.3.0-SNAPSHOT, except for the fact it will be using a different JDK and updated version of Bio-Formats itself. Unless I'm missing a key part, the git blame suggests the memoization code was last changed 2 years ago. v0.2 made a change from v0.1.2 to no longer store the .bfmemo files in the same directory as the image, because this was causing problems for some users and confusion with new files being generated unexpectedly. Since v0.2, you can specify a memoization directory in the preferences, and also a memoization time in ms. If the time is <= 0, then no memoization files should be created. Otherwise, a file will be [generated either in the specified directory or in a temp directory](https://github.com/qupath/qupath/blob/dev-0.3/qupath-extension-bioformats/src/main/java/qupath/lib/images/servers/bioformats/BioFormatsImageServer.java#L1314). Could it be that you have a directory set in the preferences? If you don't, I would expect the memoization files to be temporary and automatically removed. In any case, the warning you see has been [logged by Bio-Formats](https://github.com/ome/bioformats/blob/25645389e076a7bd0011e04c4dd8982c0f0614ed/components/formats-bsd/src/loci/formats/Memoizer.java#L923). I don't know why it is unable to delete the file, but my guess is that it relates in some way to https://github.com/ome/bioformats/issues/3659 and the fact QuPath is now using Java 16. This is likely to cause various memoization problems involving kyro. I can think of two potential workarounds:; * Add `--illegal-access=warn` to the Java options for QuPath (based on [this](https://openjdk.java.net/jeps/396)); * Turn off memoization entirely, at least by default. I'm not sure which is preferable; neither feels great. I think you should be able to try the first option by editing the `.cfg` file - if you try, please let me know if it works",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/717#issuecomment-828490219:1107,log,logged,1107,https://qupath.github.io,https://github.com/qupath/qupath/issues/717#issuecomment-828490219,1,['log'],['logged']
Testability,"I expect that this is a difference in how line breaks are represented on Windows. It's not clear which operating system you used to write the zip, or which operating system/software you used to read the text file. It's also not clear for what purpose you are exporting. If it is to import the points again within QuPath have you tested to confirm if this works? If for some other purpose, can you please specify?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/347#issuecomment-517716299:329,test,tested,329,https://qupath.github.io,https://github.com/qupath/qupath/issues/347#issuecomment-517716299,1,['test'],['tested']
Testability,"I get the Pointer warnings too (I dug down into them once - as far as I can tell they can be ignored)... but not the segfault. Yesterday's ticket does indeed look relevant, albeit a bit lacking in detail. Have you tried also building the JavaCpp example project+? It would be good to be able to figure out if the source of the problem exists entirely outside of QuPath. Also check out JavaCpp-presets - https://github.com/bytedeco/javacpp-presets/wiki. In times of desperation, you might replace the opencv declarations in build.gradle with opencv-platform: https://search.maven.org/artifact/org.bytedeco/opencv-platform/4.3.0-1.5.3/jar. The difference is that opencv-platform does a rather more complete job of resolving dependencies... which here involves downloading binaries for *all* platforms, i.e. a lot more than is needed. This can help debug issues if QuPath's more stripped-down inclusions are the source of the problem - but I don't think that's the case here. Finally, you could try getting Gradle to skip tests (I haven't done this myself, so would also be googling the process) to see if the build works. > +I don't know exactly what the example project refers to...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633287941:1019,test,tests,1019,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633287941,1,['test'],['tests']
Testability,I got a fresh Windows 10 vm from https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ java 14 from https://jdk.java.net/14/ and I get the exact two test failures when building m12.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633258192:159,test,test,159,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633258192,1,['test'],['test']
Testability,"I got curious too and tried an extremely rough and messy benchmarking as well - `Files.exist(path)` was quicker for me too (although I checked the same files multiple times, and lots of files that didn't exist). Maybe a Windows, Java version, or network issue...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691547995:57,benchmark,benchmarking,57,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691547995,1,['benchmark'],['benchmarking']
Testability,"I had a quick look on my local version of the code, where I've been exploring new things. Here's a screenshot:. ![image_descriptions](https://user-images.githubusercontent.com/4690904/35859449-04d0dfd2-0b38-11e8-9696-f549f97208d4.jpg). I've added the description to the 'Project' tab rather than the 'Image' tab, so that it can be accessible without actually opening the image at all. In this instance, the description that is shown depends upon which image entry is *selected* (i.e. blue), which is potentially different from the image that is actually opened. The 'opened' image is now highlighted with bold text to make it clearer (n this case, they are the same image). I hope that feels intuitive, but I guess it needs tested. My reason for doing it that way is that I thought it would be useful to give the option of checking the description before deciding whether or not to open the image. I've also been looking into several other changes, including the ability to set metadata values for individual images (you can see the options on the popup menu). This means a project can have multiple image sets, and you can sort them to get a tree-like structure. (Admittedly it's a small tree, since it only goes one level deep...). Do these changes look like they would help for your applications?. Adding descriptions to annotations would be a more 'core' change, that would affect the .qpdata files. So I'll need to think a bit more about how to achieve it, although I certainly agree it could be very useful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-363409447:724,test,tested,724,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-363409447,1,['test'],['tested']
Testability,"I had not run the command to my knowledge, but seeing as it was an old QuPath ""Test project"" that I keep around it is entirely possible that I *had* run Delaunay at one point in the past. Thanks for the information. I see, so once the neighborhoot information has been asked once, then it will keep on computing it, no matter what, and then we can do what we want with it, with the current limitations you mentioned. ; Thank you for the information. Oli",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1597#issuecomment-2404738344:79,Test,Test,79,https://qupath.github.io,https://github.com/qupath/qupath/pull/1597#issuecomment-2404738344,1,['Test'],['Test']
Testability,"I had wanted to play with something like this for a while now, and this post finally got me going! It took some time as I am not great with Java, but I have put together a two part system that is independent of the .qpdata file, though you could certainly enhance it's usefulness with annotations. To start (assuming you have a project with an image), you would create an ""Explore"" (capitalized) folder within your project folder, at the same level as the ""data"" folder. Then run the ""Location file creator"" and select the views that you would want the student to cycle through, in order, while writing a text file referencing each location (which will be labeled 1,2,3, etc.).; Once you have both the text file and the object file saved to your Explore folder, anyone currently looking at an image should be able to run the Slide Explore script which takes the text file and the object file with the views, and allows the user to read and cycle through the various views that were set up. I created a sample for JP2K-33003-1 if anyone wants to try it out and give some feedback. Once I am a little better with Java, I would like to change the Next/Previous buttons into hyperlinks in the text, but I am not quite there yet :). Scripts at: https://gist.github.com/Svidro/86fb224d69484ae5955631ce68d27054. The test image can be accessed at: http://openslide.cs.cmu.edu/download/openslide-testdata/Aperio/JP2K-33003-1.svs; The "".log"" file needs to be renamed to "".obj"" as I cannot post that file directly otherwise. I am sure there are a lot of improvements that could be made, and any feedback is welcome. [JP2K-33003-1.txt](https://github.com/qupath/qupath/files/1715587/JP2K-33003-1.txt). [JP2K-33003-1.log](https://github.com/qupath/qupath/files/1715588/JP2K-33003-1.log)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-364849591:1309,test,test,1309,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-364849591,5,"['log', 'test']","['log', 'test', 'testdata']"
Testability,"I have kept meaning to try the Weka plugin, but never seemed to get around to it! This sounds like an excellent chance to test it out.; Somewhat related, I am not sure I understand exactly what you are measuring, but if you are measuring ""the amount of white space"" in your tissue, I have a couple of suggestions.; 1. Create a macro that sends your annotation areas to ImageJ, which can then create detection objects from a mask created to detect below/above a certain ""white"" threshold.; 2a. Built in, create a smallish annotation that includes significant whitespace and your tissue of interest. Next use the Analyze->Preprocessing->Estimate stain vectors to both set your background to the mode (first popup), and secondly set one stain vector as best you can to line up with your detections, and the other you can pretty much ignore.; ![step1](https://cloud.githubusercontent.com/assets/23145209/23876638/b0997bee-07fb-11e7-9c2a-434dacaddead.JPG); 2b. Use the Analyze->Region Identification->Positive Pixel Count (experimental) with very a very low threshold for the stain vector you used in the previous step, and an absurdly high threshold for your second vector which we will ignore. I would iterate a few times on a VERY small area, as this is very computationally intensive, and the program tends to respond very slowly for me after running it on a large area.; 2c. Once you have your settings and run the pixel count on your annotation, you can use your pixel area and the total area to get a percentage of total pixels that are below threshold. In the case of my image, I used the hematoxylin vector, so I multiplied the negative pixel count times the area of my pixels (seen under the image tab, Pixel Width and Pixel Height) and used that to obtain a percentage of non-tissue area within my annotation. You can see that in the Excel window, and that it roughly matches up with what you can see in the annotation.; ![step2](https://cloud.githubusercontent.com/assets/23145209/23877031/93cf",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286257042:122,test,test,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286257042,1,['test'],['test']
Testability,"I have the same problem with CZI files. . Pete answered with this - i didnt try to find if my settings were FL instead of brightfield yet, but most of the suggestions i tested already. It did not help. Here the suggestions: . This happens whenever QuPath is unable to detect any cores. There are a few reasons why this may occur:. The Image type is wrong (e.g. set to fluorescence rather than brightfield) - this can be seen after clicking on the Image tab on the left. There is a screenshot here.; The specified TMA core diameter is either too large or too small. QuPath determines the expected TMA grid from 'complete' cores, which have a diameter within a small tolerance of the value set in the dialog box. If no cores fall within this tolerance, the grid cannot be found.; The intensity threshold is either too high or too low (but it is automatically determined from the data, and I don't see any reason in your image why it would be determined wrongly). If the image type is set correctly, then I would try increasing and decreasing the TMA core diameter to see if this gives any improvements. If not, then there may be some issue happening internally when trying to read from the CZI file - although I have not seen such a problem before. The contents of View → Show log may be helpful to track down the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282308795:169,test,tested,169,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282308795,2,"['log', 'test']","['log', 'tested']"
Testability,"I haven't been able to replicate this issue. If I set the stains with the following script; ```groovy; setImageType('BRIGHTFIELD_OTHER');; setColorDeconvolutionStains('{""Name"" : ""My strange stains"", ""Stain 1"" : ""Orange"", ""Values 1"" : ""0.012 0.276 0.961"", ""Stain 2"" : ""Black"", ""Values 2"" : ""0.631 0.631 0.451 "", ""Stain 3"" : ""Purple"", ""Values 3"" : ""0.304 0.922 0.239"", ""Background"" : "" 255 255 255 ""}');; ```; Then all three turn up under _Subcellular spot detection_ as options. There is some logic for identifying which stains to show/hide:; https://github.com/qupath/qupath/blob/b4a442535b2bd8169aacf16ecf6aac61004971b0/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L673-L681; But I don't see why black is failing in your case, unless it has wrongly been identified as a 'residual' stain (i.e. there are only two stains, and it represents what is left over).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/304#issuecomment-518016965:492,log,logic,492,https://qupath.github.io,https://github.com/qupath/qupath/issues/304#issuecomment-518016965,1,['log'],['logic']
Testability,"I haven't had a chance to test this, but if you have a log file and which; ImageServer is being used (in the image tab) that would be helpful. If it; is a BioFormats server, you should also try opening the file with FIJI; through the BioFormats importer plugin to see if you get the same behavior.; If you do, it is a problem that likely needs to be dealt with through the; BioFormats people. I had a similar sounding issue with 8bit CZI brightfield; images where only one tile would open, and that turned out to be a; BioFormats thing. On Fri, Mar 29, 2019 at 4:11 AM Renaud Mvl <notifications@github.com> wrote:. > *Describe the bug*; > Some fluorescent .scn images scanned on Leica Aperio Versa do not open; > properly on QuPath. Not sure where the problem is. I can open them just; > fine in ImageScope on windows, but for some reason in certain cases, QuPath; > opens the individual images instead of recognising it as stiched/pyramidal; > images?; >; > *To Reproduce*; > 2 example images:; > image that do not open properly; > <https://www.dropbox.com/s/4281rsnql1wc3k0/bug.scn?dl=0>; > image that opens fine; > <https://www.dropbox.com/s/x8zaexcb8rx3j69/fine.scn?dl=0>; >; > *Desktop (please complete the following information):*; >; > - OS: macOS; > - QuPath Version 0.1.3 and 0.2.0-m2; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/300>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-WFefqnhB7JcU8BmgDqfmmOHzcvoks5vbfTVgaJpZM4cSKYc>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/300#issuecomment-478049060:26,test,test,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/300#issuecomment-478049060,2,"['log', 'test']","['log', 'test']"
Testability,"I haven't noticed any changes with this behavior recently on Win10; I just tested with the 3 kinds of image servers I normally use. . 0.2.0 release. Is this happening on a particular OS? I take it Pete is seeing it on his end. I am seeing the magnification get smaller as I zoom out, and larger as I zoom in.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640780209:75,test,tested,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640780209,1,['test'],['tested']
Testability,"I haven't tried the new classifier with a large training set, and I'm afraid I really cannot help more without a clear error message (e.g. from the log). However, the new object classifier is not really intended to scale to 200,000 objects for interactive training... or, at least, doing so is likely to require more memory. Therefore this sounds like it may be a limitation rather than a bug. This may change in the future; in particular, a future release may document how to train a classifier via scripting in a way that requires less memory. The legacy classifier might cope with larger training sets but at a cost of being much more restricted in how it works, and having other issues (e.g. needing to be retrained when reloaded https://github.com/qupath/qupath/issues/343). It is deprecated, but not yet removed in case anyone still needs to use it: https://qupath.readthedocs.io/en/latest/docs/reference/faqs.html#why-are-some-commands-marked-as-deprecated. For now I'd recommend trying to be more selective for training examples when using the new classifier, or else resort to the legacy classifier if you prefer.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-631451060:148,log,log,148,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-631451060,1,['log'],['log']
Testability,I just tested your last commit on Windows and it seems to resolve the problem for me as well.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/519#issuecomment-641187545:7,test,tested,7,https://qupath.github.io,https://github.com/qupath/qupath/issues/519#issuecomment-641187545,1,['test'],['tested']
Testability,"I only checked that the Javadocs were found when creating a jpackage. The logic to find Javadocs around the executable is present in the javadoc-viewer library, so when running QuPath with Intellij, it searches around the javadoc-viewer library, not around the QuPath executable. I will move this logic from the javadoc-viewer library to QuPath. > (in a serif font that really ought to be sans-serif). I forgot to link the QuPath stylesheet to the `WebView`, I'll also add this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1519#issuecomment-2129386751:74,log,logic,74,https://qupath.github.io,https://github.com/qupath/qupath/pull/1519#issuecomment-2129386751,2,['log'],['logic']
Testability,"I only mentioned the Wand tool because, if this works, it means that OpenCV is working. The test errors occur when OpenCV Mats are being created, so it sounds like - in these cases - OpenCV is not being loaded correctly. I do not know why this is happening for you but not for me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-631584620:92,test,test,92,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-631584620,1,['test'],['test']
Testability,"I really like your draft. It seems the most beautiful, design-wise. The `ImageServerStub` solution in the end may just work as a helper for writing ""good"" fast scripts, exposing exactly where the image files are absolutely needed. I made a small comment on your draft PR about the metadata, as i feel that is an important info to access *offline*. But in the end, if that was sorted out, that solution would be a drop-in replacement to mine. As you said, at last it will come down to which one is the most maintainable. I see pros and cons in both: `ImageServerStub` offers a solution that is segregated in one file, but then requires to punch multiple small holes in QP interface in order to use it; `lazy-server` distributes the code responsibility to multiple classes and requires to be careful in future development of QuPath so that it does not end up requesting for the server when it is not really useful. In the latter case it is due to the solution having a silent behaviour. However, since everything is managed internally in the lazy approach, in the future it may create less problems surging from punching holes in QuPath's interface. Ultimately, I think your solution is better maintainable-wise, granted that a few things are managed:; * have the retrieval of the image server be loud in logs. Perhaps even with some traceback to what portion of code triggered it?; * expose a `getCurrentMetadata()` function to avoid having to do `getServer().getMetadata()`; * check qupath code that requested for the server but may not need it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846:1303,log,logs,1303,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2032062846,1,['log'],['logs']
Testability,"I see... well, upon reflection you _could_ do something like this, if you know the magnification you ought to have:; ```groovy; print 'Before: ' + getCurrentImageData().getServer().magnification; def metadata = getCurrentImageData().getServer().getOriginalMetadata(); metadata.magnification = 40; print 'After: ' + getCurrentImageData().getServer().magnification; ```; Don't know if it's a good idea, but in my quick test it does enable the features to be calculated. You'd need to run it each time the image is opened / prior to calculating the features, because the value doesn't live long in the memory.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424800236:417,test,test,417,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424800236,1,['test'],['test']
Testability,"I suspect that JTS's approach is preferable, and the tests here *should* pass - it does seem weird that they don't. We have two QuPath grants - one to maintain the software (leading to v1.0), and one to rewrite large parts (leading to v2.0 within the next few years). My instinct is to keep the current behavior for v1.0, but look to change it in the longer term for v2.0 - along with a more thorough revision of ROIs generally.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048181477:53,test,tests,53,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048181477,1,['test'],['tests']
Testability,"I tested performance using CMU-1.svs.; I used a very basic thresholder and simple classifier trained for 3 classes, saved for both classification and probability output - then ran the script at the bottom. Using a Mac Studio (2022) with M1 Max and 32 GB RAM the processing time was:. | v0.3.0 | v0.4.0-SNAPSHOT |; | ------------- | ------------- |; | 593.9 s | 60.1 s |. Results identical as far as I can tell. So... quite a substantial difference :). Cell detection took close to 30s, with 326 498 cells detected,. ```groovy; def checkpoints = [:]. setImageType('BRIGHTFIELD_H_E'); setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 255 255 255""}'). clearAllObjects(). checkpoints << ['Tissue detection': System.currentTimeMillis()]. createAnnotationsFromPixelClassifier(""Tissue detection"", 10000.0, 0.0, ""INCLUDE_IGNORED""). checkpoints << ['Cell detection': System.currentTimeMillis()]. selectAnnotations(); runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 1.0, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}'). for (classifier in ['Some probability', 'Some classification']) {. // Create annotation measurements; checkpoints << [""Annotation measurements for $classifier"": System.currentTimeMillis()]; selectAnnotations(); addPixelClassifierMeasurements(classifier, classifier); ; // Create cell measurements; checkpoints << [""Cell measurements for $classifier"": System.currentTimeMillis()]; selectCells(); addPixelClassifierMeasurements(classifier, classifier); }; checkpoints << [""Done"": System.currentT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584:2,test,tested,2,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584,1,['test'],['tested']
Testability,"I tested some old mice (that got hidden away for a reason), and their wheel button triggered multiple events at times. This behaviour was corrected with a 10ms debounce. Am I OK to add a (if you're happy with the variable name) :. ```; 	private long lastMousePressedWheel = 0L;; ```. and then, the `e.isMiddleButtonDown()` event would be handled as such:; ```; 			else if (e.isMiddleButtonDown()) {; 				//For 10ms after the first click, ignore all additional events; 				long time = System.currentTimeMillis();; 				if (time - lastMousePressedWheel < 10); 					return;. 				// Here we toggle between the MOVE tool and any previously selected tool; 				if (getSelectedTool() == PathTools.MOVE); 					setSelectedTool(previousTool);; 				else; 					setSelectedTool(PathTools.MOVE);; 				lastMousePressedWheel = time;; 			}; ```. I'm hoping to reuse the same variable to debounce the horizontal scroll buttons as well, hence the name.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219652529:2,test,tested,2,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219652529,1,['test'],['tested']
Testability,I tested your suggestion and included the fix. Now both column ```columnImage``` & ```columnOverlay``` sizes are in sync. Adjusting one also adjusts the other proportionally. I believe this is the correct behavior.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1096#issuecomment-1292080941:2,test,tested,2,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096#issuecomment-1292080941,1,['test'],['tested']
Testability,"I think the saving/reloading errors are completely different from the complete crashes. I'm a bit lost regarding which occurs with which classifiers and when, and I can't replicate most of what you report (except for the logistic regression thing). I also notice that you're running your classifiers at a very high resolution, and also with the parameters you're using the model could become rather complex. I haven't really had a chance to explore the limits of the pixel classifier, but it may well be that it really requires simpler models in its current form (the really complex stuff will likely need deep learning... and therefore quite a different approach). With that in mind. * Do you experience the same errors when using the default parameters?; * Do you experience the same errors when using simpler models (e.g. less training data, applied at a lower resolution)?; * If you try things on another computer, do you see exactly the same behavior?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-581003877:221,log,logistic,221,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-581003877,1,['log'],['logistic']
Testability,"I think this PR can be closed.; Providing networkshare uris in the form of `""file:////localhost/x$/some/path/file.ext""` seems to work. Thanks again for your help!. https://github.com/bayer-science-for-a-better-life/paquo/blob/832817f6b0a877a57afd8e7e008a287af0564f5e/paquo/tests/test_projects.py#L183-L190",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1049#issuecomment-1312554697:273,test,tests,273,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049#issuecomment-1312554697,1,['test'],['tests']
Testability,"I think this looks good & much cleaner than my previous version. It works well for all the images I've tried. Should the logic be the same, just organized differently - or are there any changes you think I should look at closely?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1327#issuecomment-1731324274:121,log,logic,121,https://qupath.github.io,https://github.com/qupath/qupath/pull/1327#issuecomment-1731324274,1,['log'],['logic']
Testability,"I think this looks good and could be merged any time. I have a few wishlist requests, which would be added here or in a later PR:; * The popover doesn't match the css, which looks especially strange in dark mode.; * Using [`WebViews`](https://github.com/qupath/qupath/blob/f12b38a32906e0257a34ea380e9a66d67e58ae75/qupath-gui-fx/src/main/java/qupath/lib/gui/tools/WebViews.java#L38) to create the `WebView` and bind the stylesheet may help, (although I think `PopOver` is generally hard to style in a well-behaved way); * ~~The `i` info button has different styling when highlighted in the sub-popup window (it basically just ignores whether the row is selected - whichever logic is in the main table might be useful here too)~~ *(edit: I was wrong)*; * The `Owner` and `Repository` fields shouldn't be automatically reset whenever a download is requested or fails with an error; * I don't think `Download extension from GitHub` should be collapsible (it doesn't take up much space); * It feels convoluted to me that the user *must* fill in two fields, whenever they might just want to copy and paste one GitHub url. Could/should the `Owner` and `Repository` be able to identify when a full URL has been pasted, and then automatically split it?; * e.g. Pasting `https://github.com/qupath/qupath-extension-py4j` would result in `Owner=qupath` and `Repository=qupath-extension-py4j`. Pinging @Rylern and @finglis for their opinions as well, and include a screenshot to illustrate some of what I'm referring to. <img width=""879"" alt=""extension-manager"" src=""https://github.com/user-attachments/assets/f0fc272d-3b1c-4a09-9f6e-6cecf6e1d5b7"">",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1486#issuecomment-2256038253:673,log,logic,673,https://qupath.github.io,https://github.com/qupath/qupath/pull/1486#issuecomment-2256038253,1,['log'],['logic']
Testability,"I think you are right, but I saw the current naming being an upgrade, like. ""Each user has their own folder where they can have their own code and settings."". Which meant that other settings like ImageJ directory and Extensions directory could be system-wide. But I think I am being too wishful, because like you said: since the start, options that in my opinion should be system-wide are not... Like when a new user logs-in they have to set the QuPath Setup options even though someone else already set them (even though the amount of RAM should not change from user to user, nor the Locale). Of course I am not going to pretend it is a dealbreaker, but it puts overhead on us when debugging issues: Did the user set the right amount of RAM? Where did they set the folder for the extensions?If we do not chase after our users, they each could have their own extensions folder in the default location (C:\Users\) which might be an issue for us [We are looking configure our workstations so that they do not keep any user preferences upon logging out because AppData tends to overfill over time, choking the C:\ drive in Windows]. But we favor apps that have a 'configure once' behaviour for these things. We have already been struggling with Imaris for years on this very issue. . This simply adds to the tedium of maintaining something in a multi-user environment.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632628884:417,log,logs-in,417,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632628884,2,['log'],"['logging', 'logs-in']"
Testability,"I think you want something like the top script on https://github.com/qupath/qupath/wiki/Scripting-examples. You cycle through all cells, and then using measurements from each cell, you add another measurement. I do not have good ISH images handy to test it out, but I hope the example is easy enough to modify. One warning is to be very careful about the amount of whitespace in the measurement names, as it can vary by a space or two between different parts of extended measurement names. ; edit:phone typing",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346644631:249,test,test,249,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346644631,1,['test'],['test']
Testability,"I totally understand, this does look like a ""just-in-case"" method. I was testing gestures with the jpen extension and thought that with previousTool being private, there wasn't a mechanism to swap tools (I mean from move to previously selected) from anywhere else than within the QuPathGUI class. I'll revert the change.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219444033:73,test,testing,73,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219444033,1,['test'],['testing']
Testability,"I tried to modify the script proposed in #97 for the case demonstrated in the following figure:. ![02](https://user-images.githubusercontent.com/20478730/33174622-18c2a36e-d059-11e7-9972-ee1a58d4fe01.PNG). Script:; ```; import javax.imageio.ImageIO; import qupath.lib.regions.RegionRequest. // Define resolution - 1.0 means full size; double downsample = 1.0. // Create output directory inside the project; def dirOutput = buildFilePath(""XXX/TESTFOLDER""); mkdirs(dirOutput). // Write the nuclei; def server = getCurrentImageData().getServer(); def path = server.getPath(); for (Polygon in selectDetections()){; // Stop if Run -> Kill running script is pressed ; if (Thread.currentThread().isInterrupted()); break; // Write the image; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, Polygon.getROI())); ImageIO.write(img, 'PNG', new File(dirOutput, Polygon.getName() + '.png')); }; print('Done!'); ```; I substituted _core_ from the original script with _Polygon_ and `getTMACoreList()` with `selectDetections()` to make it working for detections. . There is no error message in the script but it doesn´t work. Does anyone have an advice? Thank you!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/118#issuecomment-346617281:442,TEST,TESTFOLDER,442,https://qupath.github.io,https://github.com/qupath/qupath/issues/118#issuecomment-346617281,1,['TEST'],['TESTFOLDER']
Testability,"I understand the issue is with the specific commands under *View &rarr; Zoom... &rarr; Zoom in/out* (I've tested only on a Mac, but assume the unexpected behavior is common across platforms - it was also weird in m10, but not v0.1.2... I didn't check any others).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640781128:106,test,tested,106,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640781128,1,['test'],['tested']
Testability,I updated my [pull request](https://github.com/qupath/log-viewer/pull/59) with these changes,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1729327335:54,log,log-viewer,54,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1729327335,1,['log'],['log-viewer']
Testability,"I wanted to switch the measurement table histogram to use JavaFX yesterday, using observable values and making them persistent, but didn't have the time / concentration / will to actually do it. That would give more customisation control - there is no real reason they need to use the `Parameter` stuff (which is primarily to make it easier to write scriptable commands, like cell detection, without needing to code the whole UI). Feel free to make that change. Or, the easy one, just clip a maximum number of histogram bins in the code and log a warning if the user requests something unreasonable that we don't use.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1541#issuecomment-2162260361:541,log,log,541,https://qupath.github.io,https://github.com/qupath/qupath/issues/1541#issuecomment-2162260361,1,['log'],['log']
Testability,"I was seeing a bigger difference (`Files.exist(path)` taking about 1/3 the time). Here's my awful test, run through QuPath:. ```groovy; import groovy.transform.CompileStatic; import qupath.lib.common.Timeit. import java.nio.file.Files; import java.nio.file.Path. List<File> files = new File(System.getProperty(""user.home"")).listFiles() as List. for (int i = 0; i < 10; i++); files.add(new File(Math.random() as String)). List<Path> paths = files.collect(f -> f.toPath()) as List. int nIterations = 10000; println(""Same: "" + (countFilesExist(files) == countPathsExist(paths))). println new Timeit(); .checkpointAndRun(""Paths "", () -> countPathsExist(paths, nIterations)); .checkpointAndRun(""Files "", () -> countFilesExist(files, nIterations)); .stop(); .summarizeCheckpoints(). @CompileStatic; int countFilesExist(List<File> files, int iterations=0) {; int count = 0;; for (int i = 0; i < iterations; i++) {; for (def f : files) {; if (f.exists()); count++;; }; }; return count;; }. @CompileStatic; int countPathsExist(List<Path> files, int iterations=0) {; int count = 0;; for (int i = 0; i < iterations; i++) {; for (def f : files) {; if (Files.exists(f)); count++;; }; }; return count;; }. ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691548799:98,test,test,98,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691548799,1,['test'],['test']
Testability,"I we can define the start of the line, left and right could be defined from; the perspective of the starting point looking down the line towards the; end. Inner/outer will be confusing as this will change according to where; your object of interest is (unless there is some kind of way to manually; decide inner/outer). The latter approach seems interesting. However, I have problems envisioning; its. Perhaps it has to be tested. I has the potential to create a lot of; annotations fast. Den tir. 16. okt. 2018 kl. 10:38 skrev Pete <notifications@github.com>:. > Thinking about it some more... the polygon/polygon could be expanded, and; > then the *original* polygon/polyline could be subtracted from the result; > (this would require that it has some thickness; perhaps one pixel). This; > would result in multiple annotations being created - at least two (one for; > each side), but possibly more if the shape is self-intersecting. Then it; > becomes a matter of deleting the annotations that you didn't want.; >; > What do you think? Currently it's only an idea, I haven't tried; > implementing it...; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/228#issuecomment-430151424>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/Af9pL9P1XkGW49Da7gop_J0ur51Mvddeks5ulZsGgaJpZM4Xdx7z>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/228#issuecomment-430154093:423,test,tested,423,https://qupath.github.io,https://github.com/qupath/qupath/issues/228#issuecomment-430154093,1,['test'],['tested']
Testability,"I would first check the log file (View-> show log), but it does look like you might have run out of memory. . It is also possible that *sometimes* the detection creation functions run into problems with ""small"" tiles, and the entire process stops. To get around this (or test for it) I would recommend choosing slightly different settings in your Simple Tissue Detection (more smoothing, requested pixel size change, etc.).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/115#issuecomment-343274362:24,log,log,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/115#issuecomment-343274362,3,"['log', 'test']","['log', 'test']"
Testability,"I'd say 3.3 GB is a perfectly respectable amount of RAM for QuPath (I assume your computer has 8 GB or 12 GB...?). Personally, I have never had a powerful enough computer to be able to give anywhere close to 64 GB when either developing or using QuPath... and I don't think I ever needed 16 GB either. Maybe my needs have been modest than @Svidro's but I think that it's not typical to need such huge amounts of memory for most people :). However, I note that you are using a CZI image. There are still some lingering issues around QuPath's ability to handle CZI images; depending on the type of image (e.g. TMA/non-TMA, stitched...), I've heard that sometimes it works very well and sometimes there are problems. It's on my to-do list to investigate why this happens... currently it is a little mysterious for me, and it's not clear if it's something I can resolve within QuPath or which requires more outside help. Anyway, I don't know if that is the source of your memory woes, but it could be. Out of curiosity,; * is your image brightfield or fluorescence? (the error suggests brightfield); * is it a 2D whole slide scan, or an image from a microscope?; * is it a TMA image, large tissue section, or something else?; * does QuPath operate reasonably smoothly, or horribly slowly before the crash? If you need a comparison, there are some [links on the wiki](https://github.com/qupath/qupath/wiki/Counting-cells) to test data that you might use for comparison.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343309138:1420,test,test,1420,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343309138,1,['test'],['test']
Testability,"I'll benchmark Files.exists(file) vs file.exists() locally later, though it'll probably be worth checking performance on a samba mount as well as nfs/sshfs",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691285421:5,benchmark,benchmark,5,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691285421,1,['benchmark'],['benchmark']
Testability,"I'll close this issue because it hasn't been possible to reproduce it. @kgallik please feel free to reopen if you find an explanation, info from the log, or steps we can use to recreate the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1288#issuecomment-1714301244:149,log,log,149,https://qupath.github.io,https://github.com/qupath/qupath/issues/1288#issuecomment-1714301244,1,['log'],['log']
Testability,"I'll close this issue, would be good to continue any discussion at #336 ; I hope that it's resolved in [v0.2.0-m5](https://github.com/qupath/qupath/releases/tag/v0.2.0-m5) through the update in the JavaFX dependency, but I haven't got a way to test it myself.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369#issuecomment-549051719:244,test,test,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/369#issuecomment-549051719,1,['test'],['test']
Testability,"I'll merge the PR anyway, because it solves the problem of not being able to access the log message counts - so that bit is great. The minimum size looks good too, so if there's a way to enforce it as the minimum rather than preferred then that would be useful in a future PR.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439:88,log,log,88,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731213439,1,['log'],['log']
Testability,"I'll merge this now to avoid having too many conflicts to resolve, and to have more time to try it in combination with all the other v0.6.0 changes. I'd still be grateful for anyone interested to test this!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2275920618:196,test,test,196,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2275920618,1,['test'],['test']
Testability,I'll test it next week :),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-549070799:5,test,test,5,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-549070799,1,['test'],['test']
Testability,"I'm afraid I don't have much experience of handling dependencies on Linux. There is a little more information the binaries were created at https://github.com/qupath/qupath/issues/2. Basically I compiled it on Ubuntu 16.04 and have not tested it on 14.04. The possibilities that I can think of that might help would be:; * Try a newer version of Ubuntu if possible.; * Make sure Java is installed in Ubuntu. I don't think this should be necessary (since it is included in the QuPath download)... but perhaps.; * Try removing any ```.jar``` files connected to OpenSlide / OpenCV / JInput / JPen from within QuPath (the libraries should be mentioned in the ```qupath-***.jar``` file name). Apart from the Java Runtime Environment (JRE) itself, these are the parts that depend on native libraries. QuPath should still work without them, but will miss some features - such as whole slide image handling and classification. If the JRE is not the problem then hopefully this would enable QuPath to start, and you can recover some of the missing functionality by downloading [extensions](https://github.com/qupath/qupath/wiki/Extensions) that don't require native libraries.; * Try compiling QuPath from source from within Eclipse. You may find this easier to set up using Oracle's Java Development Kit than OpenJDK... but both should work.; * Try launching QuPath from the command line, setting the ```java.library.path``` variable and possibly using a different JRE if required... figuring out how to do this could be tricky, although [this](https://github.com/qupath/qupath/issues/27) may help a little bit. I hope something in there might be useful. If you are able to find a solution, it would be great if you could post it here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/51#issuecomment-280861844:235,test,tested,235,https://qupath.github.io,https://github.com/qupath/qupath/issues/51#issuecomment-280861844,1,['test'],['tested']
Testability,"I'm afraid it looks like the ```.qpdata``` file is incomplete for some reason, effectively making the data corrupt/unreadable for QuPath. See [this thread](https://groups.google.com/forum/#!topic/qupath-users/sYzchFq-Y60) for some more information - and for some details about ```.backup``` files, which might (possibly) be able to help. This appears to happen very rarely, and I don't know why (since I don't recall the last time it happened to me). Do you happen to remember did anything strange happen / did QuPath crash when saving the data the first time around? Or can you figure out any way to reproduce the problem?. It's particularly hard to debug, since I presume that the problem happens when saving but the error log only shows what happens when trying to reload the data. I haven't found a way to reproduce it myself, so any insights you could have on what could have caused it would be very welcome.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/58#issuecomment-289494801:725,log,log,725,https://qupath.github.io,https://github.com/qupath/qupath/issues/58#issuecomment-289494801,1,['log'],['log']
Testability,"I'm afraid that some of the commands flagged 'experimental' are more experimental than others... and that's one that is more experimental than most. It was added as a very simple counting method, but I only used it myself for some TMAs to have a quick comparison of the results against 'full' cell-by-cell analysis. It turns out to have some troubles that need to be fixed, especially when used in other contexts. The problem @Svidro mentions is that it requires at least one 'hematoxylin' pixel to be able to return anything.; Another strange feature is that, if you look at the hierarchy, the 'Positive' region is _inside_ the 'Negative' one.; And a third is that the 'Num pixels' value is a count of the pixels at the downsample level used. This isn't necessarily 'wrong', but it is not ideal because the measurement name doesn't say what downsample was used. It would be preferable to have a value converted to µm. > Some of these problems arose because the command was initially designed to generate 'Any staining' and 'DAB' regions; at that time, it was logical to return nothing if 'Any staining' was 0. It was also logical to put the 'DAB' region inside 'Any staining' in the hierarchy. Unfortunately, these aspects weren't updated when 'Any staining' was switched to become 'Hematoxylin'. Added to all that, the command doesn't handle fluorescence or other stain types. For all these reasons, I expect that this command will be replaced or substantially changed at some point. Therefore, while you could maybe work around the limitations of the positive pixel command, I'd suggest trying to use other commands for now if possible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-297915004:1060,log,logical,1060,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-297915004,2,['log'],['logical']
Testability,"I'm getting the same two test failures when trying to build on ubuntu 18.04 and java14 installed from adoptopenjdk.net. For master, m11, and m10 too. And the wand tool does fail on the pre-built m11:. ```; ERROR: QuPath exception: OpenCV(4.3.0) /home/travis/build/javacpp-presets/opencv/cppbuild/linux-x86_64/opencv-4.3.0/modules/imgproc/src/drawing.cpp:1866: error: (-215:Assertion failed) radius >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT in function 'circle'. at org.bytedeco.opencv.global.opencv_imgproc.circle(Native Method); at qupath.process.gui.WandToolCV.createShape(WandToolCV.java:423); at qupath.lib.gui.viewer.tools.BrushTool.createNewROI(BrushTool.java:497); at qupath.lib.gui.viewer.tools.AbstractPathROITool.createNewAnnotation(AbstractPathROITool.java:92); at qupath.lib.gui.viewer.tools.BrushTool.mousePressed(BrushTool.java:259); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:419); at qupath.lib.gui.viewer.tools.BrushTool.handle(BrushTool.java:65); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:62); at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-631377861:25,test,test,25,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-631377861,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,"I'm not sure, because I don't have the same images and classifier to test exactly, but you might need a ; ```; selectAnnotations();; ```; before the last `runPlugin`. This won't appear in the automatically generated script if you selected annotations manually. The best place for questions like this is https://forum.image.sc/tag/qupath; GitHub issues is really intended only for bug reports that follow the template (which should appear when you try to create a new issue). More people are likely to see any questions on the forum and give feedback; if it turns out that it really is a bug then it can always be added here later and linked to the forum discussion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704#issuecomment-816052660:69,test,test,69,https://qupath.github.io,https://github.com/qupath/qupath/issues/704#issuecomment-816052660,1,['test'],['test']
Testability,"I'm not sure... I'm now trying to run specifically that one test through eclipse, switching between OpenJDK 17 for x86_64 and for aarch64. It is failing reproducibly for me using `x86_64`, and passing with `aarch64`.; I've added a `System.out.println(System.getProperty(""os.arch""));` with failures I see e.g.; ```; NoFileBytes; x86_64; 420986880 436666368; ```; and with successes; ```; NoFileBytes; aarch64; 36864000 40239104; ```. VM args (adjusted so the other tests pass):; ```; -ea -Xmx1G -Dorg.bytedeco.javacpp.maxRetries=3; ```. Meanwhile I have seen more failures with the full `mvn test`, but it remains inconsistent. However, when it does fail it is always on that test.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024152670:60,test,test,60,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024152670,4,['test'],"['test', 'tests']"
Testability,"I've flagged this as ready for review now. It definitely needs more testing. As described by @carlocastoldi the server is loaded whenever *any* change to the metadata is made. The server can be loaded more often might be expected, sometimes for subtle, hard-to-address reasons. Some relevant facts:; * `ImageServerMetadata` *isn't usually saved with an image when it is first added to a project*. This only happens the first time the data file is saved.; * The `ImageServerMetadata` is updated as soon as an image is opened in a project to ensure that the name specified in the project matches that in the server metadata. This triggers the server to be loaded if; * The `ImageServerMetadata` isn't available, or; * The `ImageServerMetadata` is available, but contains the wrong name (e.g. the name was changed in a project, but then the data file wasn't saved afterwards); * *Run for project* will always force the `ImageServer` to be loaded, because it will always save the data - and this act of saving requires the `ImageServer`. So you can only get advantages if you avoid *Run for project*, e.g. by using *Run for project (without save)* instead.; * We can't rely on not saving if there have been no changes, because the script editor now automatically fires a hierarchy change after completion. This means QuPath *always* thinks that the script may have changed the `ImageData`, so `ImageData.isChanged()` returns true. We didn't used to do this, but then we had to keep telling users to add `fireHierarchyUpdate()` at the end of many otherwise simple-looking scripts, and that was a pain for everyone. This basically means that lazy-loading only works if the data for an image has been saved at least once, and the user hasn't messed around too much with image names within their project. The 'easy' way to trigger an image to be saved once is to do a 'Run for project' script - even if the script doesn't do anything. This should be enough to prompt the `ImageServerMetadata` to become embedd",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037:68,test,testing,68,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037,1,['test'],['testing']
Testability,"I've merged this because it definitely seems to fix an important bug, even if it's hard to replicate in isolation because it tends to require QuPath to be restarted in between. I've confirmed that it can affect classifications that are deserialized either from JSON or from Java's serialization (e.g. a .qpdata file). To demonstrate the latter, I set a opened and image and set a derived `PathClass` in a script as follows:; ```groovy; def pathClass = getDerivedPathClass(getPathClass(""Right""), ""Here""); getSelectedObject().setPathClass(pathClass); ```; After saving the data and restarting QuPath, I selected the same object and ran; ```groovy; def right = getPathClass(""Right""); println right === getSelectedObject().getPathClass().getParentClass(); ```; Before the change this prints `false`, indicating that the `PathClass` has been deserialized wrongly. With this PR, it prints `true`. I can't think of a good way to unit test this, but the fix seems important. Thanks @carlocastoldi !",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1691692645:927,test,test,927,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1691692645,1,['test'],['test']
Testability,"I've only set up the entire project with Eclipse, using the approach briefly described at https://github.com/qupath/qupath/tree/v0.1.2/src/main/resources/eclipse - I'm afraid I don't know how to address the issues when using other IDE's.; (Incidentally, those instructions are a little old now, not all steps may be necessary. For example, from memory I think only the .project file needs updated, not the .classpath file.). However, here are some notes that might be helpful:. * Most of the POM files should descend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:764,log,logback-classic,764,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['log'],['logback-classic']
Testability,"I've run it several times with different JDKs, both x86_64 and aarch64. Tests have passed every time... except once, using AdoptOpenJDK 16 with Rosetta. ![Screenshot 2022-01-28 at 11 40 01](https://user-images.githubusercontent.com/4690904/151541015-d439dd98-5411-4115-ad08-c91cab4f620c.png). However I haven't managed to repeat the failure despite repeatedly trying with the same JDK. I am confused...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024136572:72,Test,Tests,72,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024136572,1,['Test'],['Tests']
Testability,"I've since managed to build both m11 and m12 with `./gradlew clean assemble CreatePackage` and jdk 14 (it also seems to work using the current arch linux jdk v13 to build qupath m12). . When I first tried to skip the tests using the same approach last week the builds would segfault (I think with the same pointer error balazs described above). I got the that error today on one attempt , but can't seem to repeat it. . ```; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on; 12:35:11.253 [JavaFX Application Thread] [WARN ] qupath.lib.gui.QuPathGUI - No directory set for log files! None will be written.; 12:35:11.260 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.2.0-m12; Build time: 2020-05-26, 12:34; 12:35:11.263 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 1981.50 MB (25.0% max memory). (QuPath-0.2.0-m12:49988): Gdk-WARNING **: 12:35:11.652: XSetErrorHandler() called with a GDK error trap pushed. Don't do that. 12:35:12.161 [JavaFX Application Thread] [INFO ] q.l.i.s.b.BioFormatsOptionsExtension - Bio-Formats version 6.5.0; 12:35:12.165 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Bio-Formats server options (Bio-Formats 6.5.0) (12 ms); 12:35:12.166 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (1 ms); 12:35:12.199 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension Experimental commands (33 ms); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:3",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:217,test,tests,217,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,2,"['log', 'test']","['log', 'tests']"
Testability,"I've submitted a pull request at https://github.com/qupath/qupath/pull/602 with a proposed solution - can you check and see if it works (or it breaks something else)?. There should be a v0.2.3 soon to fix bugs. This seems a little bit borderline, since the old behavior is kind of logical and consistent... but I tend towards agreeing that it's a bug, and so if the fix works then it should be included. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/601#issuecomment-689503017:281,log,logical,281,https://qupath.github.io,https://github.com/qupath/qupath/issues/601#issuecomment-689503017,1,['log'],['logical']
Testability,"I've tested this on two computers and found:. * It works for me on Windows; * It works from me on Mac if I build the code from source... but not if I use the installer. This makes me think it *might* be a permissions issue within the operating system, but I'm not sure. Any more info you can provide would be helpful. In case it cannot be resolved, I've added documentation on setting the memory manually to; https://qupath.readthedocs.io/en/latest/docs/reference/faqs.html#why-can-i-not-set-the-maximum-memory",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/490#issuecomment-631258118:5,test,tested,5,https://qupath.github.io,https://github.com/qupath/qupath/issues/490#issuecomment-631258118,1,['test'],['tested']
Testability,"I've tried now on three computers (Windows 64, Mac M1, Mac Intel) and can't replicate any problem - the tiles open fine at all resolutions in QuPath v0.3.2. I see the warning in v0.3.1 but the image still opens without problems. Two things you could try:; * Reset QuPath's preferences, with *Edit &rarr; Reset preferences*; * Increase the logging in the hope that a more useful error appears; to do this go to *Edit &rarr; Preferences...* and search for `Log level`, then set its value to `DEBUG`. (I do see that the images aren't recognised as RGB, but that's a different issue... I may need to update QuPath to convert it to a more standard RGB automatically)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/904#issuecomment-1065014828:339,log,logging,339,https://qupath.github.io,https://github.com/qupath/qupath/issues/904#issuecomment-1065014828,2,"['Log', 'log']","['Log', 'logging']"
Testability,"If I understand correctly, this is expected behavior. If you run cell or tissue detection inside an object, then the existing contents of that object will be removed and the results of running the command will be added instead. This is the best way that I could think of to make the behavior predictable and (generally) unobtrusive. Otherwise, if you ran either command multiple times you would end up having multiple tissue annotations or cell objects relating to the same structures in the image. To get around this, you'd need to explicitly delete the older objects... which would be laborious if you want to run the same command multiple times to test out different settings. Also, in this specific example, by detecting cells first and then tissue you could very easily end up with cells within a TMA core being located outside the tissue region... which could be rather confusing. For these reasons, if you want both tissue annotations *and* cell detections, then you should create the tissue first and then detect the cells inside the tissue. If you want, you can delete the tissue annotations afterwards but keep the cells (e.g. *Objects &rarr; Delete... &rarr; Delete all annotations*). As described in #59, if the goal is to have the core name exported along with the individual cell measurements then that can be done by scripting. There are lots of ways to approach this in a script, although I can't think of a way currently to get that specific output without writing a script.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/60#issuecomment-290307913:651,test,test,651,https://qupath.github.io,https://github.com/qupath/qupath/issues/60#issuecomment-290307913,1,['test'],['test']
Testability,"If there is nothing really in the error log, I would start with upping the memory available to QuPath. The m1 and m2 have their own independent max memory settings, and default to something like 1/4 of the total available. . **which can be found in the Help menu under Show Setup Options.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/294#issuecomment-475407873:40,log,log,40,https://qupath.github.io,https://github.com/qupath/qupath/issues/294#issuecomment-475407873,1,['log'],['log']
Testability,"If we don't end up having properly working bundled openslide, I'd suggest that we should be a bit louder about how to set OpenSlide if loading fails - a `Notification` at least, or maybe a `Message` the first time it happens and then log it afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046:234,log,log,234,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1739130046,1,['log'],['log']
Testability,"If you are looking at H&E, I usually found it best to divide up the tissue; using superpixels, add texture and color measurements, then classify based; on the measurements. Once your areas are classified, there is a command to merge them all into; new annotations, which you can then perform Positive pixel or Cell; detection on. A combination of two of the steps described above. On Mar 18, 2018 10:36 AM, ""geodza"" <notifications@github.com> wrote:. > Well, as promised; > I had an opportunity to test Your script on a bigger amount of glasses.; > It seems that everything is fine; > I will now start a new project with a new staining, probably ~100 glasses,; > with analytics fully based on QuPath; > Still need to understand, how to analyse stroma in H&E staining :); > But anyway, I am really grateful for Your advice. If ill be able to; > publish my results, I will let You know!; > I`ll close this topic as the solution was found.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/157#issuecomment-374020816>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-UInIm1YbnApmIKVlfq9PPDSVpZfks5tfpsjgaJpZM4Sl4d_>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374022361:498,test,test,498,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374022361,1,['test'],['test']
Testability,"If you are still running into problems, I would be interested in whether they also show up with a freshly opened QuPath instance (create ROIs, save and close, open, run cell detection). The tests in my last post showed that I could run a fairly large cell detection (570k cells) with only 2GB of RAM allowed, as long as it was the first thing I did after opening QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343607120:190,test,tests,190,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343607120,1,['test'],['tests']
Testability,"If you can send me the file somehow, then I can have a look. What I would do is to try opening the same image with [Fiji](http://www.fiji.sc), since Fiji can also use Bio-Formats to read files. The connection between Bio-Formats and Fiji is well-established, and is much more tested than that between Bio-Formats and QuPath. If Fiji can open all scenes within the file, then the problem may be within the QuPath extension. However if Fiji cannot open all the scenes, then it is more likely to be either an issue with the CZI file itself, or with Bio-Format's support for CZI. If this is the case, then perhaps the developers of Bio-Formats may be able to help further. There are several ways to contact them described at http://www.openmicroscopy.org/site/community",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/47#issuecomment-276485995:276,test,tested,276,https://qupath.github.io,https://github.com/qupath/qupath/issues/47#issuecomment-276485995,1,['test'],['tested']
Testability,"If you could provide a screenshot of what you are looking at (cell detections/annotations+the classifier dialog) and a copy of the log (View->Show Log), that would help the troubleshooting a bit. Occasionally the classifier does run into errors and those show up in the log (unless that is what you meant by details).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418390877:131,log,log,131,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418390877,3,"['Log', 'log']","['Log', 'log']"
Testability,"If you do not want to or are not able to rescan those images, one option is using the free Pannoramic Viewer from 3DHISTECH to export the images in 8bit format. It can be obtained at: ; http://www.3dhistech.com/downloads. I recommend maximizing the tile size for speed and your own sanity :) Especially as you would need some kind of external Python script or something in order to convert the images, as Pannoramic viewer only handles one at a time, manually. I recommend multiple logins on a server, or multiple computers!. Last I checked, the newer CaseViewer did not have as many options for exporting and could not be used for this purpose.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/106#issuecomment-333959855:482,log,logins,482,https://qupath.github.io,https://github.com/qupath/qupath/issues/106#issuecomment-333959855,1,['log'],['logins']
Testability,"If you're working with .vsi files, then the problem I've seen before is that the accompanying .ets files are missing or inaccessible. For example, see https://forum.image.sc/t/open-vsi-images-in-qupath/41481/6. Although I'm not sure how that could happen using the same hard drive. No need for logs from my side - QuPath relies on Bio-Formats to read .vsi files, so I'm not sure if there is any QuPath bug to fix anyway :) The forum would be the best place to post if this becomes more problematic, since the Bio-Formats team are active there (along with some others who I know use .vsi files with QuPath routinely).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/891#issuecomment-1027873778:294,log,logs,294,https://qupath.github.io,https://github.com/qupath/qupath/issues/891#issuecomment-1027873778,1,['log'],['logs']
Testability,"If you've already got everything set up in _GitHub Desktop_, there should be a _Fetch origin_ button towards the top right - click that, and then again if the text changes to _Pull origin_. Then, with the latest code successfully pulled down, in the _History_ tab on the left the top entry should be _Fixed point painting bug_. If you follow the rest of the instructions to build QuPath, you should end up with a version that works. I've tested it on Windows and Mac and it is working here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/193#issuecomment-409486427:438,test,tested,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/193#issuecomment-409486427,1,['test'],['tested']
Testability,In case it helps test:; [LabeledImageServer.zip](https://github.com/qupath/qupath/files/8936245/LabeledImageServer.zip); [Resaved as 8bit Fiji.zip](https://github.com/qupath/qupath/files/8936249/Resaved.as.8bit.Fiji.zip),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/993#issuecomment-1159797075:17,test,test,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/993#issuecomment-1159797075,1,['test'],['test']
Testability,"In fairness, I tested on Plasma and it seems like `Platform.getPreferences().getColorScheme()` is indeed returning light when dark and dark when light, so there's not a whole lot we can do to handle that",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1671#issuecomment-2393735211:15,test,tested,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/1671#issuecomment-2393735211,1,['test'],['tested']
Testability,"Indeed, the prompt does not prepopulate new suggested paths in my case. While I don't see an easy fit-all solution, in my case the simple fact to be able to specify the path based on the current location of the project folder (for example storing it in a variable at the moment of opening) would already solve the problem (like it used to in v0.2.0 using $PROJECT_DIR). This means that before sharing the project I could manually modify the JSON if needed. . My ideal scenario would be :; 1) Test specified path using current project folder absolute path as a starting point (using a $PROJECT_DIR); 2) Test relative path if 1) fails; 3) Make user manually specify URI if all fails. This being said, It might not be as straightforward to implement code-wise depending on how you are currently rehauling your code base and the fact that there might be other fires to tackle first.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518206588:492,Test,Test,492,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518206588,2,['Test'],['Test']
Testability,"Intriguing... building and running worked, or just building?; Building should work with QuPath... if it stops before running/testing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-633513166:125,test,testing,125,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-633513166,1,['test'],['testing']
Testability,"Is the Image server listed on the Image tab BioFormats? And if so, have you tested opening the image in FIJI using the BioFormats import? I saw similar issues with 8bit CZI files that had been tiled, and it turned out to be on the BioFormats end.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/323#issuecomment-497089158:76,test,tested,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/323#issuecomment-497089158,1,['test'],['tested']
Testability,Is there an installer log available with useful information (as described at [this post](https://apple.stackexchange.com/questions/275915/debugging-the-installer-encountered-an-error-that-caused-the-installation-to-fa))?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/832#issuecomment-956259133:22,log,log,22,https://qupath.github.io,https://github.com/qupath/qupath/issues/832#issuecomment-956259133,1,['log'],['log']
Testability,"It did show an error message when it first happened, but not since then. The log shows it this way:. ERROR: Error updating ROI; at org.locationtech.jts.geomgraph.EdgeEndStar.propagateSideLabels(EdgeEndStar.java:286); at org.locationtech.jts.geomgraph.EdgeEndStar.computeLabelling(EdgeEndStar.java:122); at org.locationtech.jts.operation.relate.RelateComputer.labelNodeEdges(RelateComputer.java:290); at org.locationtech.jts.operation.relate.RelateComputer.computeIM(RelateComputer.java:125); at org.locationtech.jts.operation.relate.RelateOp.getIntersectionMatrix(RelateOp.java:112); at org.locationtech.jts.operation.relate.RelateOp.relate(RelateOp.java:57); at org.locationtech.jts.geom.Geometry.relate(Geometry.java:1026); at org.locationtech.jts.geom.Geometry.intersects(Geometry.java:758); at qupath.lib.gui.viewer.tools.BrushTool.getUpdatedObject(BrushTool.java:340); at qupath.lib.gui.viewer.tools.BrushTool.mouseDragged(BrushTool.java:298); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:413); at qupath.lib.gui.viewer.tools.BrushTool.handle(BrushTool.java:65); at qupath.lib.gui.viewer.tools.AbstractPathTool.handle(AbstractPathTool.java:62); at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.ev",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/456#issuecomment-619374801:77,log,log,77,https://qupath.github.io,https://github.com/qupath/qupath/issues/456#issuecomment-619374801,1,['log'],['log']
Testability,"It is a 64 bit machine and I get exact same two test errors during build on m12 too. And I've just noticed that on the pre-built m11 the wand tool does work even if there's an error. Also, most of the time there's no error! In fact, now that I'm writing this, I don't get an error at all now. So, these wand tool errors might have been unrelated to the test failures during build.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-631493326:48,test,test,48,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-631493326,2,['test'],['test']
Testability,"It looks fine, I wouldn't worry. Maybe we should just check it doesn't increase by 100 MB here instead of only 10 MB:; https://github.com/bytedeco/javacpp/blob/master/src/test/java/org/bytedeco/javacpp/PointerTest.java#L1175",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024180132:171,test,test,171,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024180132,1,['test'],['test']
Testability,"It looks good to me (however I'm not very familiar with the theory behind it). Just 2 things:; * Is there a reason for defining the `BufferedImageNormalizer` interface, instead of just using [`Function<BufferedImage, BufferedImage>`](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) or [`UnaryOperator<BufferedImage>`](https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html)?; * Shouldn't there be unit tests for at least the `ColorTransformer.colorDeconvolveReconvolveRGBArray()` function and the `SubtractOffsetAndScaleNormalizer` class?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554#issuecomment-2206208137:455,test,tests,455,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554#issuecomment-2206208137,1,['test'],['tests']
Testability,"It looks good. I just have a few comments regarding tests. Currently, a lot of tests are made within just one function. If we want to follow unit tests guidelines, each test function must only tests one thing. This means that only one function should be tested at the same time, and this function should only be called once. Also, to write the test function, the Arrange / Act / Assert / (cleanup) pattern should be used. All of this is detailed [here](https://github.com/qupath/Java-style-guide/tree/main?tab=readme-ov-file#writing-a-test-function). Also, I think there are a few untested functions, like `PathObjectHierarchy.getAllObjectsForRegion()` or `PathObjectHierarchy.hasObjectsForRegion()`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264954231:52,test,tests,52,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264954231,9,"['Assert', 'test']","['Assert', 'test', 'test-function', 'tested', 'tests']"
Testability,"It looks like you're using 32-bit Windows - or, if not, then at least the 32-bit version of the Java JDK. QuPath needs the 64-bit bit version, unfortunately. If your Windows supports it, then you could try uninstalling the Java JDK and installing the one on the download page flagged as 'Windows x64' (rather than 'Windows x86'). That might help. I don't see exactly why it would cause this error (at 98%, so close!), but it's my best guess... I've not seen that error before, but I've only been able to test it on a 64-bit system.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-414650057:504,test,test,504,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-414650057,1,['test'],['test']
Testability,"It might be... there's no built-in option to do so, but see https://github.com/qupath/qupath/issues/57#issuecomment-288491139 for possible workarounds (which in your case would really involve duplicating and merging your projects). The following script _might_ work; as far as I know it does the right thing, but I haven't exactly tested it very much:; ```groovy; // Paths to training files (here, both relative to the current project); paths = [; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training.qptrain'),; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training2.qptrain'),; ]. // Path to output training file; pathOutput = buildFilePath(PROJECT_BASE_DIR, 'training', 'merged.qptrain'). // Count mostly helps to ensure we're adding with unique keys; count = 0. // Loop through training files; def result = null; for (path in paths) {; // .qptrain files just have one object but class isn't public, so ; // we take the first one that is deserialized; new File(path).withObjectInputStream {; saved = it.readObject(); }; // Add the training objects, appending an extra number which ; // (probably, unless very unfortunate with image names?) means they are unique; map = new HashMap<>(saved.getMap()); if (result == null) {; result = saved; result.clear(); }; for (entry in map.entrySet()); result.put(entry.getKey() + '-' + count, entry.getValue()); count++; }. // Check how big the map is & what it contains; print result.size(); print result.getMap().keySet().each { println it }. // Write out a new training file; new File(pathOutput).withObjectOutputStream {; it.writeObject(result); }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/256#issuecomment-455564256:331,test,tested,331,https://qupath.github.io,https://github.com/qupath/qupath/issues/256#issuecomment-455564256,1,['test'],['tested']
Testability,It seems to be related to extremly detailed ROIs such as those that can be generated from very messy pixel classifiers!. With the extreme test case below I managed to stall QuPath for about half a minute. So it's maybe just a case of me not cleaning up properly after autogenerating ROIs. :-); ![messy-ROIs](https://user-images.githubusercontent.com/4951046/79368383-93f9ff80-7f4f-11ea-9290-bceda372b2b4.png),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-614175536:138,test,test,138,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-614175536,1,['test'],['test']
Testability,"It shouldn't be file size. Under *Help &rarr; Show setup options* I can restrict the RAM available to QUPath to 1GB and can still open the image without problems. You can also try the memory monitor from https://petebankhead.github.io/qupath/scripting/2018/03/06/script-memory-monitor.html. The log says `Not a file that OpenSlide can recognize`. It's not clear to me if *any* images are working for you using OpenSlide. I asked above: under the *Image* tab does it say *OpenSlide* beside the entry *Server type*? If you see that for any images, then we can conclude that OpenSlide is (at least partially) working. But if you always see *ImageJ server* or *Bio-Formats server*, then it probably isn't and that's the problem that needs to be solved. In that case, it would help to know if a separate installation of OpenSlide on your machine can read the image at all through any means.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371850256:295,log,log,295,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371850256,1,['log'],['log']
Testability,"It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:; ```groovy; // Print the current memory situation; def runtime = Runtime.getRuntime(); double scale = 1.0/1024.0/1024.0; print 'Max memory (MB): ' + (runtime.maxMemory() * scale); print 'Total memory (MB): ' + (runtime.totalMemory() * scale); print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache; javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }; ```. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355845333:81,log,log,81,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355845333,1,['log'],['log']
Testability,"It sounds like this might be better addressed on the forum, preferably with an example file hosted and shared, the bio-formats tag added, and the error message from the log (question mark, upper right) included. ; There are some Versa related posts as well, at least one as recently as this year - https://forum.image.sc/t/qupath-cant-open-svs-images-from-aperio-versa-slide-scanner/93502/10",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1580#issuecomment-2276493467:169,log,log,169,https://qupath.github.io,https://github.com/qupath/qupath/issues/1580#issuecomment-2276493467,1,['log'],['log']
Testability,"It won't load the pixel data if it doesn't need it, only the objects. However, it does this less efficiently than the old classifiers - and so will require *some* more memory. For example, I believe the old classifiers stripped away the ROIs from training objects, and therefore this saved some memory... so in practice it needed less than 200 MB per image. QuPath now probably does need the full 200 MB per image (but not 20 GB). I don't know how much RAM you have, and how much of it is given to pixels (rather than objects), so I can't estimate when this limit is reached in your case. Ultimately the new design will enable more powerful and flexible classifiers in future versions (because more information is available). We will also look to improve the efficiency in the future, and track the memory use better so that we can give more informative warnings before a crash. But all of this will take some time to write, and will not appear in v0.2.0. If there is a clear memory leak (and QuPath crashes with a small number of objects, or an exact error log can help us find a problem) then we'll try to fix it. But at this point, I don't know if that's the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-633901008:1058,log,log,1058,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-633901008,1,['log'],['log']
Testability,Its running with no OpenSlide errors in the logs,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1748522020:44,log,logs,44,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1748522020,1,['log'],['logs']
Testability,"Just adding for reference that this self-contained script shows the problem as well:. ```groovy; def chartData =; [(getPathClass('Negative')): 5,; (getPathClass('1+')): 2,; (getPathClass('2+')): 3,; (getPathClass('3+')): 4]; ; Charts.pieChart(); .title('Test Chart'); .data(chartData); .show(); ```; [Also learned that non-string keys in Groovy need to be in (brackets)...]",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1062#issuecomment-1261141581:254,Test,Test,254,https://qupath.github.io,https://github.com/qupath/qupath/issues/1062#issuecomment-1261141581,1,['Test'],['Test']
Testability,"Last code reshuffle! I'm back to where I started and exactly where you wrote the middle button code should go, somewhere [around here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1046). In this iteration, if you have time to test it, I've also added the side-to-side wheel clicks (or shift + normal mousewheel scrolling). I've spent some time trying to understand how [Mouse Events](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/MouseEvent.html) are handled in JavaFX and I *think* I managed to sort out the issues I was initially having: Behaviour when dragging with middle button pressed, fast clicks, when to consume events or not, debouncing... Incidentally, the debouncing code is not strictly necessary, but it was an interesting exercise in working with a broken mouse. Also, I *think* `MouseEvent.MOUSE_RELEASED` should be added to the [list of ignored events here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1039) as without, I had to deal with the (middle) button release event multiple times as part of the events generated by JavaFX in the course of pressing a mouse button. Finally, I've also UX tested the behaviours we discussed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) and reproduced in the first comment. For now,; * Windows,; * with my ""fancy"" mouse; * with the shift+scrollwheel substitute for side-to-side scrolling; * my Lenovo T460 touchpad; * with scroll touch gestures enabled or disabled; * with inverted mouse enabled or disabled; * with ctrl to modify opacity; ; I couldn't use ""Zoom"" or ""Rotate"" touch gestures, because I don't think my very basic touchpad understands them, so I couldn't see any effects on QuPath. Panning does work as expected (with my very last commit). ~~**todo** I will edit my comment when I test a Linux build on my old powerbook ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123:283,test,test,283,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123,1,['test'],['test']
Testability,Let me know when this is tested on different platforms so I can do a non-snapshot blosc release,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1474#issuecomment-1966588492:25,test,tested,25,https://qupath.github.io,https://github.com/qupath/qupath/pull/1474#issuecomment-1966588492,1,['test'],['tested']
Testability,"Looks good to me. Not 100% sure if prohibiting text input completely is too aggressive (also with its scientific notation implications), but think we should try it and see how it impacts behavior (I never wanted to use scientific notation until I knew I couldn't...). Small thing: in testing this, I've found an old bug related to the brightness/contrast display. Basically, if I double-click on min/max and enter a new value *that is out of range*, this is not immediately shown in the label - but *does* appear if I then click once on the label after the input dialog has been closed. Since it fits with the decimal places change, could you look into this please? If it's not a straightforward fix then let me know and I'll merge this as it is.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/668#issuecomment-787820926:284,test,testing,284,https://qupath.github.io,https://github.com/qupath/qupath/pull/668#issuecomment-787820926,1,['test'],['testing']
Testability,"Looks good, linking to the issues this addresses:; * https://github.com/qupath/qupath/issues/667; * https://github.com/qupath/qupath/issues/669. In testing this, I notice one pre-existing bug: I can input a negative magnification value and tbh I don't know how the viewer decides what to use. But that was already the case in v0.2.3 and can be handled in another pull request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/668#issuecomment-791565911:148,test,testing,148,https://qupath.github.io,https://github.com/qupath/qupath/pull/668#issuecomment-791565911,1,['test'],['testing']
Testability,"Looks great! Excellent to have more tests & the changes documented here. I'd like to merge this, there are just a few things:; * Please make sure the GPL copyright header is added to any new files (e.g. `TestSimpleImages.java`); * Could you add a test for `PathClassifierTools.setIntensityClassifications`? That fix looks a really important one - it would be good to have a few examples that test the behavior to guard against future regressions (including at least one that would fail with the old method).; * There is a merge conflict reported with `GeneralTools`; * I'm not sure about the change to `GeneralTools.generateDistinctName`. If the base is empty, it is returned unchanged - but it still *should* provide a distinct name (for example, this is used when adding images to a project and multiple empty names would be very confusing). The generated name could be `(1)` for example; it shouldn't include a leading space.; I haven't tested the following code, but it might do the job:; ```java; public static String generateDistinctName(String base, Collection<String> existingNames) {; 		if (!existingNames.contains(base)); 			return base;; 		; 		// Check if we already end with a number, and if so strip that; 		if (Pattern.matches("".* (\\([\\d]+\\))$"", base)) {; 			base = base.substring(0, base.lastIndexOf("" (""));; 		}; 		; 		// Check for the highest number we currently have; 		int lastInd = 0;; 		var pattern = base.isEmpty() ? Pattern.compile(""\\(([\\d]+)\\)"") : Pattern.compile(base + "" \\(([\\d]+)\\)"");; 		for (var existing : existingNames) {; 			var matcher = pattern.matcher(existing);; 			if (matcher.find()); 				lastInd = Math.max(lastInd, Integer.parseInt(matcher.group(1)));; 		}; if (!base.isEmpty()); base = base + "" "";; 		return base + ""("" + (lastInd + 1) + "")"";; 	}; ```; I think this method also deserves its own test, since it's behavior is quite well-defined - but in practice quite fiddly to implement.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/687#issuecomment-811675775:36,test,tests,36,https://qupath.github.io,https://github.com/qupath/qupath/pull/687#issuecomment-811675775,6,"['Test', 'test']","['TestSimpleImages', 'test', 'tested', 'tests']"
Testability,"Maybe there's still some old binary lying around, so try to run that test code, make sure it passes, and right after that don't close the process, but continue to run your test with QuPath. Hopefully the right newer version of Pointer.physicalBytes() sticks around.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024150043:69,test,test,69,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024150043,2,['test'],['test']
Testability,"Mmmm, I find I have no way to hide the unclassified TMA cores. And sorting my ascending/descending seems to only impact the two that I gave classes to - the rest remain stubbornly as they were (both before and after the classified core) - so I initially didn't think sorting was implemented. Since we aren't dealing with NaNs, I have the feeling that string sorting would make sense here... even if that means 'Unclassified' being sorted as a string. And actually... what do you think about having 'Name' as another potential 'Measurement'... which we could relabel 'Sort by'? Then we could change 'Show measurement' to 'Show value' - both to save space, and because we're no longer limited to measurements. The name is especially informative for TMA cores, but it looks like we don't currently have a way to display it. Minor thing: when I assign a classification to a core _after_ displaying the grid, this becomes available in the 'Classes' drop-down - which is nice. The less nice thing is that all the classes there appear deselected.... but aren't necessarily not visible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1588#issuecomment-2321529903:169,stub,stubbornly,169,https://qupath.github.io,https://github.com/qupath/qupath/pull/1588#issuecomment-2321529903,1,['stub'],['stubbornly']
Testability,"My best guess is that it's related to user permissions. But I really don't know - I haven't seen this either. There's also one obscure tip that might be relevant at the very bottom of [this page](https://github.com/qupath/qupath/wiki/Paths-&-configuration). Basically, inside the QuPath installation there should be a file `QuPath.cfg`. You could try opening that in a plain text editor and on a line below [JVMOptions] adding `-Xmx8G` for 8 GB (for example). I haven't tested this to check it works, but then my memory settings are being read from my preferences so I can't replicate the exact problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-391973431:470,test,tested,470,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-391973431,1,['test'],['tested']
Testability,"Nice regex :). Makes me a bit nervous, since I'm not aware of anything currently being broken. Definitely worth considering `File.exists()` instead of `Files.exists(path)` when it's called a lot in a loop (and I guess anything *could* be called a lot in a loop by other code). Any way to quickly benchmark the difference?. I guess we also want to know if one method is substantially faster or slower for checking files over a network, as well as local files. (Conceivably we might also add our own method, e.g. `GeneralTools.checkFileExists()` or something and then use our preferred implementation in one place... but not sure if that's just adding awkwardness.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691277627:296,benchmark,benchmark,296,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691277627,1,['benchmark'],['benchmark']
Testability,"No external dependencies should be needed - a Java Runtime Environment is included in the installation. A google search for `""the installer encountered an error that caused the installation to fail""` reveals quite a few discussions about all kinds of different software applications where the error appeared, but I'm afraid I can't replicate the issue so I can't test any of the proposed solutions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/832#issuecomment-956171629:363,test,test,363,https://qupath.github.io,https://github.com/qupath/qupath/issues/832#issuecomment-956171629,1,['test'],['test']
Testability,"Not in less time than it would take you to try compiling the test version :); Always plans, but limited by severe lack of time and the many, many tasks involved. Don't expect a pre-compiled version before March (and it's sooner, that will be a nice surprise for all of us).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-454693082:61,test,test,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-454693082,1,['test'],['test']
Testability,"Not quite sure what you mean, but Qupath just closes. Attaching some error reports. [hs_err_pid19784.log](https://github.com/qupath/qupath/files/4650037/hs_err_pid19784.log); [hs_err_pid1100.log](https://github.com/qupath/qupath/files/4650038/hs_err_pid1100.log); [hs_err_pid17304.log](https://github.com/qupath/qupath/files/4650039/hs_err_pid17304.log)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630760110:101,log,log,101,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630760110,6,['log'],['log']
Testability,"Not sure about the first point; I still struggle with JavaFX's min/max/pref sizes, and other more annoying bugs persist (like the growing dialog when training a pixel classifier). For the second, the possibly-cleanest way would be to make it a command in the main menubar. If it's fired, then it hunts for the in-focus window using logic somewhat like https://github.com/qupath/qupath-fxtras/blob/9b043792b3b454f1376e57c32e36f8a74aa482ad/src/main/java/qupath/fx/dialogs/Dialogs.java#L486. That way it should work for stages that don't have menubars, for whom the events propagate to the main stage... or at least I think it would. I've failed with menubars and accelerators before, and the behavior across platforms also varies a bit - so it needs careful checking.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1353#issuecomment-1740764803:332,log,logic,332,https://qupath.github.io,https://github.com/qupath/qupath/pull/1353#issuecomment-1740764803,1,['log'],['logic']
Testability,"Not sure if this is exactly what you want, and don't have a great sample to test it on right now, but: . ```; //This assumes there is only one parent annotation for the cell. Multiple annotations would require some adjustment. //Your measurement list and starting values; ch1 = ""Cell: Channel 1 mean""; ch2 = ""Cell: Channel 2 mean""; def ch1Total = 0; def ch2Total = 0. //Create a list of your tumor and stroma cells; def stromaCells = getCellObjects().findAll{it.getPathClass() == getPathClass(""Stroma"")}; def tumorCells = getCellObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}. stromaCells.each{; ch1Total = it.getMeasurementList().getMeasurementValue(ch1)+ch1Total; ch2Total = it.getMeasurementList().getMeasurementValue(ch2)+ch2Total; }; tumorCells.each{; ch1Total = it.getMeasurementList().getMeasurementValue(ch1)+ch1Total; ch2Total = it.getMeasurementList().getMeasurementValue(ch2)+ch2Total; }. //Assuming there is only one annotation object:; annotation = getAnnotationObjects()[0]. //Add your measurement total divided by the total number of objects for a mean of means.; //Alternatively, get the area measurement AND mean, and get the actual total intensity and divide by the number of cells.; annotation.getMeasurementList().putMeasurement(""Mean Ch1 Tumor"", ch1Total/tumorCells.size); annotation.getMeasurementList().putMeasurement(""Mean Ch2 Tumor"", ch2Total/tumorCells.size). annotation.getMeasurementList().putMeasurement(""Mean Ch1 Stroma"", ch1Total/stromaCells.size); annotation.getMeasurementList().putMeasurement(""Mean Ch2 Stroma"", ch2Total/stromaCells.size); ```; If you combine that with the export script from: https://petebankhead.github.io/qupath/scripting/2018/03/04/script-annotation-export.html. and after that run: https://petebankhead.github.io/qupath/scripting/2018/03/05/script-annotation-results-merge.html. hopefully you will get the output for your entire project. You will probably want to add in the third channel, and rename some of the values as desired",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391838121:76,test,test,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391838121,1,['test'],['test']
Testability,Nothing in the log I guess. ; Applies to all Density Types and Interpolation?; Can objects still be created even if the Overlay doesn't show anything?. Any users that suffered from the problem that also have GitHub accounts and could respond if they find/test something?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872470946:15,log,log,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872470946,2,"['log', 'test']","['log', 'test']"
Testability,"OK, it turns out that adding `MOUSE_RELEASED` to `ignoreTypes` is not needed (any more). At some point, I made the logic of the middle button [robust to fast clicks](https://github.com/qupath/qupath/blob/ca41a4d033eb65c5f9ee1c12a64bf1e96f60276d/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1108-L1112). I suspect that consuming the extra events generated by subsequent middle click events (`e.getClickCount() > 1`) is enough. Then all I do is check is `e.isMiddleButtonDown()` and I don't see anything weird happening whether I do rapid middle button clicks or if I press the left button or use the mouse wheel while the middle button is pressed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1313554395:115,log,logic,115,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1313554395,1,['log'],['logic']
Testability,"Ofcourse!; I see from the log now that all the objects were unclassified.; So I understand why I don't see any colours. But as the structures are quiet different I would think that it should be able to come up whit a classifier right?; ![image](https://user-images.githubusercontent.com/36917491/45081418-75871d80-b0f7-11e8-9ed9-373228da976e.png). Log-file:; INFO: Selected style: Modena Light; INFO: Performing update check...; INFO: Starting QuPath with parameters: []; ERROR: Openslide: Property not available: openslide.objective-power; INFO: Test reading thumbnail with openslide: passed (BufferedImage@77accd0e: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 200 height = 193 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); INFO: Returning server: OpenSlide for L:\basic\divg\CEMM-Lexor\SannetH\1. SANNE\Project 2. IHC Validation PICCOLO and COIN\Qupath PICCOLO\R-PICCOLO-16_CDX2-88_20x.tiff; INFO: Estimating H-DAB staining; INFO: Image data set to ImageData: Brightfield (H-DAB), R-PICCOLO-16_CDX2-88_20x; INFO: Will (re)compute TMA grid...; INFO: Processing complete in 1.26 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.dearray.TMADearrayerPluginIJ {""coreDiameterMM"": 0.7, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}; INFO: Adding Rectangle to hierarchy; INFO: Requesting region for stain vector editing: ; INFO: 1932 nuclei detected (processing time: 3.82 seconds); INFO: Processing complete in 3.92 seconds; INFO: Completed!; INFO: ; qupath.imagej.detect.nuclei.WatershedCellDetection {""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 0.0, ""includeNuclei"": true, ""smoot",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:26,log,log,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,3,"['Log', 'Test', 'log']","['Log-file', 'Test', 'log']"
Testability,"Oh dear, sorry, I see now I didn't reply to this (although I was away from QuPath at the time and I think we discussed it elsewhere...). I recall at the time I wondered about how this would impact supporting RGB/non-RGB images with the same command and also maintaining scripting compatibility. In the meantime, the code has diverged rather a lot and other issues with _Simple Tissue Detection_ have emerged, e.g.; * https://github.com/qupath/qupath/issues/124; * https://github.com/qupath/qupath/issues/248. I'm reluctant to try to resolve the code conflicts to incorporate this small change that may complicate scripting compatibility whenever it looks like the whole simple detection command really needs a thorough overhaul. There are now also other ways to gain more control over tissue detection, e.g.; * https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html; * the pixel classifier (not yet complete, but I hope it will become a 'standard' way). The pixel classifier is also being designed to support different kinds of classification, which could eventually also include a simple threshold applied to an original or transformed image. It has the benefit of allowing the classification to be applied at a higher resolution through tiling, and to interactively show preliminary results (e.g. with a threshold slider). I think that this is needed in the longer term, and _Simple tissue detection_ will move into retirement. Sorry again for not replying here sooner. If this change is still of interest to you, please feel free to reopen the issue. To integrate it, we'd need to; * update the code to be compatible with the current codebase; * test the impact on scripts created before/after the change",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-518571384:1682,test,test,1682,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-518571384,1,['test'],['test']
Testability,"Oh dear, that does look suspiciously similar to the picture in @Svidro's link. As it happens, I've just been working on a pretty major revision of the QuPath Bio-Formats extension this morning. It should solve a lot of issues, but I don't know if it will solve this one. However, it will at least give some extra entries in the preference pane that would allow you to selectively enable/disable Bio-Formats for specific image extensions, so that you could ensure that OpenSlide is used for scn if you wanted. If nothing too bad appears in the next couple of hours I'll merge the changes with the main branch and then the extension will be available for testing. Or see [here](https://github.com/petebankhead/qupath-bioformats-extension) if you're happy to compile it yourself while it's still a work-in-progress.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358633899:653,test,testing,653,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358633899,1,['test'],['testing']
Testability,"Oh dear, that sounds worse - I am using a Mac, and no extra extensions should be needed. Does the software start ok? I have seen a problem on some older Macs where it wasn't possible to start QuPath because of an incompatibility with OpenCV... but if the window opens at all then that shouldn't be the issue. You should be able to open a JPEG just by dragging it onto the main QuPath window. Could you try with the image *CMU-1.svs* that is suggested at https://github.com/qupath/qupath/wiki/First-steps ?; If there are problems, could you also choose *View &rarr; Show log* and report back if you see any error messages?. The CZI problem sounds like the one I met before, and will try to resolve next week.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/135#issuecomment-357055699:570,log,log,570,https://qupath.github.io,https://github.com/qupath/qupath/issues/135#issuecomment-357055699,1,['log'],['log']
Testability,"Oh, i guess this choice was done to uniquely assert in which of two adjacent tiles a point is contained?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048024326:45,assert,assert,45,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048024326,1,['assert'],['assert']
Testability,"Oh, that was actually easier than I thought. This shows the code that needs to change:; ```; //def dirResults = QuPathGUI.getSharedDialogHelper().promptForDirectory(); def dirResults = new File(buildFilePath(PROJECT_BASE_DIR, 'annotation results')); ```. I have only tested it once, so please let me know if that works for you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/268#issuecomment-467957281:267,test,tested,267,https://qupath.github.io,https://github.com/qupath/qupath/issues/268#issuecomment-467957281,1,['test'],['tested']
Testability,"Ok, I have a second test setup in parallel using m10-SNAPSHOT, VisualVM is running, sampling and I have taken a snapshot at the start. Anything else to help with debugging? ;-)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/440#issuecomment-615316832:20,test,test,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/440#issuecomment-615316832,1,['test'],['test']
Testability,"Ok, I tested the ""Offline TMA Data Viewer"" (not sure what to call this method!). I exported TMA data (qptma) for all 6 TMA slides. I loaded one file in the TMA Data Viewer in a new QuPath instance which seem to load data for all the qptma files present in the folder ! is that expected behavior ?. With this method the table is very smooth. It makes sense to work offline if I want to look at the combined data from multiple TMAs after completing the cell detection and classification. I opened one of the qptma file using notepad. I did not see any measurements or survival data in the file content - however the TMA Data Viewer was able to populate all the columns including measurements. Where is the data being pulled from ? what kind of magic is this. I may also have discovered additional bug(s):. 1. I am seeing columnImage is null error in the log at loading - everything seem to work regardless. The same error is thrown everytime I toggle ""Group by ID"" as well.; ```; ERROR: QuPath exception: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; at qupath.lib.gui.tma.TMASummaryViewer.lambda$refreshTableData$66(TMASummaryViewer.java:1463); ```; 2. In the log I also noticed ```WARN: Unable to find censored column - survival data will be uncensored``` - not sure why ? ; ```; INFO: Update check for https://github.com/qupath/qupath; WARN: You need to enable the startup script in the Preferences if you want to run it; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: Predicate set to: null; INFO: Parsed 84 from HS-1_Scan1.ome.tif.qptma (84 total); INFO: Parsed 84 from HS-2_Scan1.ome.tif.qptma (168 total); INFO: Parsed 84 from HS-3_Scan1.ome.tif.qptma (252 total); INFO: Parsed 84 from HS-4_Scan1.ome.tif.qptma (336 total)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901:6,test,tested,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901,2,"['log', 'test']","['log', 'tested']"
Testability,"Ok, I understand. No one expects support on one week old experimental features on an experimental build of a testversion of 0.2.0:) Got an error message from Windows this time, by the way, and it seems to be a memory issue. ![error message qupath memory](https://user-images.githubusercontent.com/43611111/82339241-1d3ca000-99ee-11ea-830f-7595fa33621b.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630858222:109,test,testversion,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630858222,1,['test'],['testversion']
Testability,"Ok, I've managed to reproduce this issue on one computer (out of 3 tested). The image used was `OS-1.ndpi`. * OS: MacOs (Mojave); * CPU: 2.3 GHz Intel Core i9; * 32 Gb RAM; * Radeon Pro 560X 4 Gb. Same problem as mentioned above. No overlay is shown, except when `density radius < 10`, where the overlay very slightly appears (see screenshot below). Overlay opacity slider is obviously on max. ; <img width=""885"" alt=""Screenshot 2021-07-02 at 10 58 59"" src=""https://user-images.githubusercontent.com/47279429/124259772-cb3dd780-db26-11eb-861c-e8bcffb7a0e3.png"">; ________; ### If the value is < 10; I can click on `Find hotspot` and see this temporary visualisation (see screenshot below). <img width=""885"" alt=""Screenshot 2021-07-02 at 11 04 18"" src=""https://user-images.githubusercontent.com/47279429/124259867-f0324a80-db26-11eb-88b3-7f3e352a22e7.png"">. But then, when clicking `Apply`, it gives me this long error message (open_cv):; ```; ERROR: QuPath exception: Could not initialize class org.bytedeco.opencv.global.opencv_imgproc; java.lang.NoClassDefFoundError: Could not initialize class org.bytedeco.opencv.global.opencv_imgproc; at qupath.opencv.tools.OpenCVTools.findRegionalMaxima(OpenCVTools.java:2276); at qupath.lib.analysis.heatmaps.DensityMaps.findHotspots(DensityMaps.java:613); at qupath.process.gui.commands.density.DensityMapUI$HotspotFinder.fire(DensityMapUI.java:621); at qupath.process.gui.commands.density.DensityMapUI.lambda$createDensityMapAction$2(DensityMapUI.java:324); at org.controlsfx.control.action.Action.handle(Action.java:419); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(Compos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-872890572:67,test,tested,67,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-872890572,1,['test'],['tested']
Testability,"Ok, so this is not quite fixed yet... For exporting measurements for a single image (not in a project), the full export path is logged. When creating a script from the command history, the result is a line like the following:; ```groovy; saveAnnotationMeasurements('/path/to/export/My export.txt', ); ```; (The comma at the end is unintentional... but it is only cosmetic, and does not prevent the script from running. It can be removed as well.). When logging the command within a project, the output is slightly different. QuPath (intentionally) omits the specific file name from the export path, and instead only stores the directory. When run within a script, QuPath should then build a suitable export name from the image name and the type of data being exported. This is to help when running over an entire project, whenever exporting to the same path would overwrite the file. This *almost* works, but the export currently appears to omit the dot before the extension, i.e. if the image is called ```CMU-1-Small-Region.svs```, then for a command; ```groovy; saveAnnotationMeasurements('/path/to/export'); ```; where ```/path/to/export``` is the path to any existing directory, QuPath would write the output to ```/path/to/export/CMU-1-Small-Region Annotationstxt``` when it should write to ```/path/to/export/CMU-1-Small-Region Annotations.txt```. Of course you can add the missing dot in later, so it is only an inconvenience. However, you can also modify the export command to create your own full path, in which case it will be used. So, for example, you could write the following; ```groovy; saveAnnotationMeasurements('/path/to/export/' + getProjectEntry().getImageName() + "".txt""); ```; and I believe this works. I have reopened this issue until the dot bug is fixed, however if any other problems are found with the export then please report them here as well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-269953909:128,log,logged,128,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-269953909,2,['log'],"['logged', 'logging']"
Testability,"Ok, that works. Still not ideal, since it means the log viewer always opens at a small size... Is there no way to specify the *minimum* sizes for the log viewer component, rather than relying on the preferred sizes? The preferred size could (and probably should) be larger. @alanocallaghan thanks, yup - I've added those lines to my code-in-progress.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731210816:52,log,log,52,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731210816,2,['log'],['log']
Testability,"One more substantial change: JSON is now stored in the `.qpdata` file, rather than a server path. Storing the server path was sufficient in v0.1.2, since this was all that was used to determine which image should be loaded. However, increasingly `ImageServer` implementations require more information / arguments or even wrap other servers, which means necessitated a switch to use JSON. However, in v0.2 this JSON was only stored in the project, not the `.qpdata` file. The result was that such images could *only* be opened from the project; the `.qpdata` alone wasn't sufficient. This change updates `.qpdata` to store JSON in the place where previously only a path was used. This should allow more complex images to be re-opened successfully, even if separated from their project. However, since it's a data file change this requires careful testing...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/725#issuecomment-836523049:846,test,testing,846,https://qupath.github.io,https://github.com/qupath/qupath/pull/725#issuecomment-836523049,1,['test'],['testing']
Testability,"One more thing: should we expose the builders in `qupath.lib.images.servers.ImageServers.*` so that you can test what kind of `ImageServer` is being used, if the builder is available?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2278093823:108,test,test,108,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2278093823,1,['test'],['test']
Testability,"One option would be to have multiple test classes with different `@BeforeEach` or `@BeforeAll` sections?. Related question: is the style guide for one assert, or just to test one function?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265062068:37,test,test,37,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265062068,3,"['assert', 'test']","['assert', 'test']"
Testability,"One other thing: did you make a project first, and add the image to the project?. I have looked at a couple of `.scn` test images, and that works better for me whenever I force them to be opened with Bio-Formats. I will explore further.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409026871:118,test,test,118,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409026871,1,['test'],['test']
Testability,"Only other thought I have regarding intermittent errors is that some people storing image files, especially large ones, on network locations have run into trouble at times. And with active directory, your desktop might be a network location. If all of your files are on your hard drive, I'm out of ideas, good luck!. *and I see that the error log images are on the C drive.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518033169:343,log,log,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518033169,1,['log'],['log']
Testability,"Oops, I somehow missed the followup question. I don't use any particular packages just to calculate areas, it's pretty much just a use of the base sum function. I'm certain there are more elegant ways to do this using functions, but I only have basic programming experience so for loops it is!; ```; path = ""Your file path here""; setwd(path); outFile <-""test areas.csv"". #Replace .txt with whatever identifier will pick up all of the files you want to analyze. Detections or Annotations are common choices; file.names <- dir(path,pattern = "".txt""). #an empty frame to place data into; Areas <- data.frame(). #simple for loop to read each file and keep a sum of the cell areas.; for(i in 1:length(file.names)){; data.raw <- read_delim(file.names[i],""\t"", escape_double = FALSE, trim_ws = TRUE). #place the file names in the first column; Sample = tools::file_path_sans_ext(file.names[i]); Areas[i,1]<-Sample. #Sum of cell areas here. Add extra lines for mean of intensity/OD, etc; Areas[i,2]<-sum(data.raw$""Cell: Area""). }; Areas$""Area mm^2""<- Areas$V2/1000000. #set row names to F if you don't want a numbered list as the first column; write.csv(Areas, outFile, row.names=T); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-290314163:354,test,test,354,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-290314163,1,['test'],['test']
Testability,"Oops... there's a bug affecting only Windows :(; The command will be logged something like; ```groovy; saveAnnotationMeasurements('C:\path\to\export', ); ```; but Java/Groovy doesn't like the path with just single backslashes. Therefore you will need to change this to be; ```groovy; saveAnnotationMeasurements('C:\\path\\to\\export', ); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-269992633:69,log,logged,69,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-269992633,1,['log'],['logged']
Testability,"Path/extensions/qupath-extension-bioformats.jar; 12:25:43.923 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/joelrv/QuPath/extensions/bioformats_package.jar; 12:25:43.943 [JavaFX Application Thread] [INFO ] q.l.i.s.BioFormatsOptionsExtension - Bio-Formats version 5.9.2; 12:25:44.261 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 12:25:55.878 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-x; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-y; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.objective-power; 12:25:55.895 [JavaFX Application Thread] [INFO ] q.l.i.servers.OpenslideImageServer - Test reading thumbnail with openslide: passed (BufferedImage@58da6639: type = 1 DirectColorModel: rmask=ff0000 gmask=ff00 bmask=ff amask=0 IntegerInterleavedRaster: width = 194 height = 200 #Bands = 3 xOff = 0 yOff = 0 dataOffset[0] 0); 12:25:55.896 [JavaFX Application Thread] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: OpenSlide for /home/joelrv/Downloads/bftools/test_pyramid_fullsize.tif; 12:25:56.155 [JavaFX Application Thread] [INFO ] q.lib.gui.helpers.DisplayHelpers - Estimating H-DAB staining; 12:25:56.537 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Brightfield (H-DAB), test_pyramid_fullsize; ```; I not familiar enough with the code to understand what's happening, it's just so strange that it used to work before... In any case thanks for trying to adress the issue!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472813709:2145,Test,Test,2145,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472813709,1,['Test'],['Test']
Testability,"Perhaps something making use of the hierarchy? The Detection Centroid Distances should apply to all detections **except for detections that are child objects of other detections**. ; This would exclude subcellular detections from the run, and would keep the logic working. However at that point it could work for both detections and cells?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1550#issuecomment-2283403451:258,log,logic,258,https://qupath.github.io,https://github.com/qupath/qupath/issues/1550#issuecomment-2283403451,1,['log'],['logic']
Testability,"Pete,; Sorry, I am still learning how to post my queries in the forum, This was my; message. Can you advise please? Thank you very much, suba; Hello, I am able to load the images from the Qupath project, however, when; I double-click on the whole slide, I am getting an error message : **Unable; to build Image server: (view log below) for all the images but one that was; added recently to the project. Can anyone please suggest how to restore my; data please? Thank you, Suba; INFO: Initializing type adapters; INFO: Bio-Formats version 6.5.1; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.5.1) (17 ms); INFO: Loaded extension Experimental extension (1 ms); INFO: Loaded extension ImageJ extension (44 ms); INFO: Loaded extension JPen extension (19 ms); INFO: Loaded extension Processing extension (28 ms); INFO: Loaded extension Rich script editor extension (235 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Trying to load project Z:\Kotb Lab\General\ALL INFECT and INFECT; images\INF 69 DR3 DR4 repeat for Ganesh manuscript Qupath data\dr3 gfap new; 042121\project.qpproj; INFO: Project set to Project: dr3 gfap new 042121-project; INFO: Image data set to ImageData: Brightfield (H-DAB), PR301S1 2021-04-23; 07.49.55.ndpi; WARN: Unable to open file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; with OpenSlide: URI has an authority component; ERROR: Load ImageData: Unable to build ImageServer for file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; (args=[]) with requested provider; qupath.lib.im",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:325,log,log,325,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['log'],['log']
Testability,"Please follow the [issue template to create a Bug Report](https://github.com/qupath/qupath/issues/new/choose) or post a question on [the forum at image.sc](http://image.sc/tag/qupath). `java.long.NullpointException` is not enough to know what the problem might be - we'd need more information about which version(s) of the software you are using, what previously did/didn't work, and the full information from the log.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/745#issuecomment-856021988:414,log,log,414,https://qupath.github.io,https://github.com/qupath/qupath/issues/745#issuecomment-856021988,1,['log'],['log']
Testability,"Probably should, but it also needs to be v0.4.3 compatible so can't use `FileCopier`. Not sure it matters *too* much which directory it uses, as long as we don't surprise users by writing stuff in unexpected places (or, even worse, overwriting anything...). Sidenote: perhaps the biggest unresolved thing in `main` is that `qupath-fx` should be brought out into a separate repo, and switched to Apache. And *possibly* split even further, so that localization/preference stuff can be used elsewhere (e.g. log viewer, script editor...).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1282#issuecomment-1649469444:504,log,log,504,https://qupath.github.io,https://github.com/qupath/qupath/pull/1282#issuecomment-1649469444,1,['log'],['log']
Testability,"Project contains total of 6 TMA slides. Each contains approximately ~80 cores. A few cores are marked as missing per slide due to not enough tissue or missing information. I have a total of approximately ~400 valid cores in the project, each slide may contain multiple cores per subject id. I tested the Measure -> show TMA measurements. This means I can only load the data for the active image. The table does work with a tiny bit of scrolling lag - very little. If I open the same image without detections the table is smooth. . I have about ~ 13 classes. I am working with 7 channel multiplex image hence each detection has 116 measurements (shape and intensity)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954:293,test,tested,293,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289206954,1,['test'],['tested']
Testability,"Proposed improvement at https://github.com/petebankhead/qupath/commit/601605c0339cec278499b570972175aef65ee028; This should automatically open the log window with more information and advice. Note that v0.2.0-m10 introduces a [BuildInfo](https://github.com/qupath/qupath/blob/master/qupath-gui-fx/src/main/java/qupath/lib/gui/BuildInfo.java) class to query QuPath's version, which may be used by developers of new extensions to help fail as elegantly as they wish.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/454#issuecomment-618237750:147,log,log,147,https://qupath.github.io,https://github.com/qupath/qupath/issues/454#issuecomment-618237750,1,['log'],['log']
Testability,"Qupath did it again, deleting an annotation after running a positive cell analysis.; Don't know what happened, the log doesn't show anything. Luckily, I now now the ctrl+R button; ![2017-11-14](https://user-images.githubusercontent.com/33484227/32780738-aa5d356e-c942-11e7-8f5d-780bf2340640.png). ![image](https://user-images.githubusercontent.com/33484227/32780681-78758d44-c942-11e7-9b4c-fa130dcbfe5f.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344249262:115,log,log,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344249262,1,['log'],['log']
Testability,"Re: . > The i info button has different styling when highlighted in the sub-popup window (it basically just ignores whether the row is selected - whichever logic is in the main table might be useful here too). I'm not sure I follow? The buttons seem to follow the same display logic in the main extension manager window and the sub-popup. The colours are different here but that's a weird issue when I take screenshots. Buttons in both are dark with white icon/glyph. As far as I can tell the buttons should always be dark background, light glyph. ![Screenshot from 2024-07-30 12-27-34](https://github.com/user-attachments/assets/37b9da2c-f1ec-4c2f-9e5d-bea72a6e9e25); ![Screenshot from 2024-07-30 12-27-23](https://github.com/user-attachments/assets/2e0e7f21-faf6-4b9a-bee5-1f032aacbbdb)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1486#issuecomment-2258155922:156,log,logic,156,https://qupath.github.io,https://github.com/qupath/qupath/pull/1486#issuecomment-2258155922,2,['log'],['logic']
Testability,"Regarding the script, are you merging two different annotation classes two different ways? Or merging the same annotation twice? Are you running the cell detection command in the script immediately after the second merge? That could be a big problem if so. You have two merge statements, each done a different way. If you are actually running the script as is, you are probably running into the same problem as before, where one merge has not completed when the second starts running, and everything is getting ""bugged out."" If that is the case (and you are running your cell detection in the script right after the second merge), you may want the thread sleep command from https://github.com/qupath/qupath/issues/129. I am not certain, but I have a feeling that this has more to do with the shape of your annotation causing cell detection a problem than the merge statement. . When I have had something like this happen (cell detection starts running, but no cells show up in the annotation tab), it does not always show an error in the log, but the first thing to do would be to check the View->Show log to see if there is an error message there. If there is, great, that might be useful. On the other hand, if there is nothing, it may just be the cell detection not completing, but without causing any errors. . If none of the above helps, could you paste your .qpdata file as a .log file (rename the file extension), with ONLY the annotations saved. It should be quite small. I would like to try importing it onto another dummy whole slide image just to try running cell detection to see if the shape of the annotation is causing problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365346916:1038,log,log,1038,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365346916,3,['log'],['log']
Testability,Seems missing from the FXML now? But maybe I'm missing some logic,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1729330883:60,log,logic,60,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1729330883,1,['log'],['logic']
Testability,"Sensible, I'll do my best to fix any of the small bugs I spot when testing the current build. Also semi-related, probably the wsinfer extension should use the same dir?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1282#issuecomment-1649462867:67,test,testing,67,https://qupath.github.io,https://github.com/qupath/qupath/pull/1282#issuecomment-1649462867,1,['test'],['testing']
Testability,"So I looked a bit more this morning, and the issue seems to go back to preloading... and it was documented all along in the JEP wiki at https://github.com/mrj0/jep/wiki/Linux#ld_preload. The way I got it to work was by copying the file identified by ; ```sh; which jep; ```; into the base QuPath directory (which contains the launcher) and then modifying it. You can see more about the original contents of this file [here](https://github.com/mrj0/jep/blob/master/src/scripts/jep). The end result is that I launched QuPath with the following:. ```sh; #!/bin/sh. VIRTUAL_ENV=; export VIRTUAL_ENV. LD_LIBRARY_PATH=""/usr/lib:/usr/local/lib/python2.7/dist-packages/""; export LD_LIBRARY_PATH; LD_PRELOAD=""/usr/lib/x86_64-linux-gnu/libpython2.7.so""; export LD_PRELOAD. if test ""x$VIRTUAL_ENV"" != ""x""; then; PATH=""$VIRTUAL_ENV/bin:$PATH""; export PATH; PYTHONHOME=""$VIRTUAL_ENV""; export PYTHONHOME; fi. cp=""/usr/local/lib/python2.7/dist-packages/jep/jep-3.6.1.jar""; if test ""x$CLASSPATH"" != ""x""; then; cp=""$cp"":""$CLASSPATH""; fi. jni_path=""/usr/local/lib/python2.7/dist-packages/jep"". DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )"". exec java -Xmx4G -classpath ""$cp:${DIR}/app/QuPathApp.jar"" -Djava.library.path=""$jni_path:${DIR}:${DIR}/app"" qupath.QuPath; ```. After doing this, the Groovy script for testing JEP worked without problems. One thing in particular to note is the use of ```-Xmx4G``` to set the maximum memory to 4GB on my (virtual) machine... it would be good to modify this as required, as the built-in method is modifying the maximum memory within QuPath won't work when it's launched in this way. I've only tested this in Ubuntu, but hopefully it works for you too.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264693922:766,test,test,766,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264693922,4,['test'],"['test', 'tested', 'testing']"
Testability,"So I took a quick run at it, and came up with a few options.; First off, due to your somewhat off-white background, I would definitely use something like:; ```; setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.69602 0.66056 0.28145 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.47625 0.62539 0.61811 "", ""Background"" : "" 224 224 224 ""}');; ```. Next I drew a square that had some DAB and non DAB stained areas and tested the following **with the annotation selected**:; ```; runPlugin('qupath.imagej.detect.tissue.PositivePixelCounterIJ', '{""downsampleFactor"": 1, ""gaussianSigmaMicrons"": 0.5, ""thresholdStain1"": 0.1, ""thresholdStain2"": 0.2, ""addSummaryMeasurements"": true}');; ```. Alternatively you could try superpixels, which I like, but would also require a classification step. For now you can use the Measure->Show measurment maps command to look at what values you could use for a classifier. Again **with the annotation selected**:; ```; runPlugin('qupath.imagej.superpixels.SLICSuperpixelsPlugin', '{""sigmaMicrons"": 1.0, ""spacingMicrons"": 10.0, ""maxIterations"": 10, ""regularization"": 0.25, ""adaptRegularization"": false, ""useDeconvolved"": false}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 0.25, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": true, ""colorStain3"": false, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": false, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; ```. You can also choose a larger size for your SLICs if you want to do more of a tissue structure analysis. Smaller is usually better if you are looking for color differences though. Another options is just using the cell detection mentioned above:; ```; selectAn",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372875465:491,test,tested,491,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372875465,1,['test'],['tested']
Testability,"So edited a few more that appeared clickable when they shouldn't be (as they are not collapsible).; I wasn't able to test `ExportChartPane.java`, `KaplanMeierDisplay.java` as I couldn't find them in the running app but I believe the latter doesn't need adjusting.; Additionally, I wasn't able to launch `TMASummaryViewer.java` in the app (File -> TMA data -> launch TMA data viewer) so added it as a comment. Unsure if this is the case for anyone else? ; Lastly I believe the `simplifyTitledPane` class of `PaneTools.java` seems to not be used at all. Unsure if I'm missing something, if not should it be used or removed?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2096390478:117,test,test,117,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2096390478,1,['test'],['test']
Testability,"Some assorted responses:. * You say 'QuPath did it again', but it’s not clear if QuPath is actually doing what it is supposed to in deleting objects. I already described that you should not do automated counts in the same region after manual counting. Did you read my explanation above? If it does not describe your situation, please be more specific. https://github.com/qupath/qupath/issues/112#issuecomment-342941759. * QuPath is written in Java, and is therefore limited by the amount of memory assigned to it on first startup, or under *Help &rarr; Show setup options*. Additional memory being available on the computer doesn’t change this; QuPath won't use it. * My best guess remains that the memory problems are related to the handling of CZI images - which is something I will investigate, but I have very little free time currently and it may take a while. It is not a format I have used much myself, and I have very little relevant data that I can use to test it properly. * If you want to investigate this yourself, try doing simple processing steps using images in another file format (e.g. Aperio or Hamamatsu - maybe from http://openslide.cs.cmu.edu/download/openslide-testdata/). If the problem persists then my guess is wrong, and it is not reliant on file format. But then if you describe your exact steps I may be able to reproduce the issue. * If you are optimizing positive classification settings, re-running the cell detection would be a horribly slow way to do it. Running this one-line script and adjusting the values should be *much* faster:; ```groovy; setCellIntensityClassifications('Nucleus: DAB OD mean', 0.2); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344522051:965,test,test,965,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344522051,2,['test'],"['test', 'testdata']"
Testability,Sorry Peter. I missed your reply-I will give the multiple projects a try. But I am also keen to script it. I have a c# background but have downloaded the java source to see if I can get my head around it. I can supply the ndpis files if you would like to do any testing. Basically it's just a text file that links multiple ndpi files that came from the same scan run (i.e. different filter per ndpi file),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/113#issuecomment-343225491:262,test,testing,262,https://qupath.github.io,https://github.com/qupath/qupath/issues/113#issuecomment-343225491,1,['test'],['testing']
Testability,"Sorry about the wait. **In response to your questions**. - I have tested zooming into an image with multiple OME-TIFF files and have gotten the same results. - The software used to generate the OME-TIFF files was through a two-step process of converting MRXS files (written from 3DHISTECH software) into OME-TIFF files through the help of conversion tools from Glencoesoftware:. The first step used a tool called bioformats2raw (https://github.com/glencoesoftware/bioformats2raw) which converts MRXS files into Zarr file-type. . The second step used a tool called raw2ometiff (https://github.com/glencoesoftware/raw2ometiff) which converts the Zarr file into an OME-TIFF file type. - While viewing an image with QuPath-0.3.0 and checking _Show log_, these were the errors reported:. WARN: Unable to obtain full image format info for file:/C:/Users/aj_si/Desktop/poh_mrxs/OME-TIFF/C001110926E04.ome.tiff (class java.util.NoSuchElementException); INFO: Image data set to ImageData: Not set, C001110926E04.ome.tiff - C001110926E04. For QuPath-0.3.2, the result was the same except it did not have the ""WARN"" error. For QuPath-0.3.1 (which also can not cache tiles or load the resolution properly when zooming in), this was reported:. WARN: Unable to obtain full image format info for file:/C:/Users/aj_si/Desktop/poh_mrxs/OME-TIFF/C001110926E04.ome.tiff (class java.util.NoSuchElementException); INFO: Setting max Bio-Formats readers to 4; INFO: Image data set to ImageData: Not set, C001110926E04.ome.tiff - C001110926E04. ### Here is an example of my image while zoomed in using QuPath-0.3.0; <img width=""960"" alt=""QuPath_030_zoomed"" src=""https://user-images.githubusercontent.com/98191884/157751366-613ce0e7-1dc4-4e03-a0f4-8a055db1f3d7.PNG"">. ### Here is an example of my image while zoomed in using QuPath-0.3.2 (looks the same on QuPath-0.3.1); <img width=""960"" alt=""QuPath_032_zoomed"" src=""https://user-images.githubusercontent.com/98191884/157751374-6702bd00-8f17-4005-a56c-7b3a96f6c258.PNG"">. As ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/904#issuecomment-1064493475:66,test,tested,66,https://qupath.github.io,https://github.com/qupath/qupath/issues/904#issuecomment-1064493475,1,['test'],['tested']
Testability,"Sorry for your frustrations. I am also unclear on what exact process you used. To help, I would need exact steps that I can use to reproduce the problems you are seeing, and any errors messages you see. I would also suggest:. * Make sure you are working with images in a project.; * Save regularly, and use *File &rarr; Revert* (Ctrl + R) to return to the last saved version.; * Whenever you have performed any lengthy manual steps consider duplicating your entire project folder (or creating a zip file of it) so that you may return to it later.; * If something goes wrong, check out *View &rarr; Show log* for any error messages, and post them here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342939465:603,log,log,603,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342939465,1,['log'],['log']
Testability,"Sorry, I again answered too quickly without time to test the code. This script at least runs, although I'm not sure if it's what you want or not:; ```groovy; //Exporting Image as .tif files; import qupath.lib.gui.ImageWriterTools. import qupath.lib.images.servers.ImageServer; import qupath.lib.regions.RegionRequest; import qupath.lib.scripting.QP. import java.awt.image.BufferedImage. /*; * Adjustable parameters; */; int tileWidthPixels =1500 // Width of (final) output tile in pixels; int tileHeightPixels = tileWidthPixels // Width of (final) output tile in pixels; double downsample = 70 // Downsampling used when extracting tiles; String format = ""tif"" // Format of the output image - TIFF or ZIP is best for ImageJ to preserve pixel sizes; String dirOutput = buildFilePath(PROJECT_BASE_DIR, 'something else') // BE SURE TO ADD AN OUTPUT DIRECTORY HERE!!!; mkdirs(dirOutput). int maxErrors = 20 // Maximum number of errors... to avoid trying something doomed forever; int minImageDimension = 16 // If a tile will have a width or height < minImageDimension, it will be skipped; // This is needed to avoid trying to read/write images that are too tiny to be useful (and may even cause errors). //-------------------------------------------------------. /*; * Processing; */. // Check we have an output directory; if (dirOutput == null) {; println(""Be sure to set the 'dirOutput' variable!""); return; }. // Initialize error counter; int nErrors = 0. // Get the image server; ImageServer<BufferedImage> server = QP.getCurrentImageData().getServer(). // Ensure convert the format to a file extension; String ext; if (format.startsWith(""."")); ext = format.substring(1).toLowerCase(); else; ext = format.toLowerCase(). // Extract useful variables; String path = server.getPath(); String serverName = server.getShortServerName(); double tileWidth = tileWidthPixels * downsample; double tileHeight = tileHeightPixels * downsample. // Loop through the image - including z-slices (even though there's norm",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/309#issuecomment-486778605:52,test,test,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/309#issuecomment-486778605,1,['test'],['test']
Testability,"Sorry, I should have said I tested it only with v0.2.0-m3 - where it works for brightfield only if I disable the brightness/contrast thing (which is where I'm only guessing it should work for fluorescence...). My guess/hope is that that is the source of the error if you were using v0.2.0-m2. I've been working towards adding javadocs for all the public methods in QuPath and have written many hundreds so far, but still have many more to go... I'm afraid it will take a while. I try to answer questions about the milestones as they change, but I'm afraid I can't really support the older ones (not least because it's hard to keep all the changes in my head, and set up a scripting environment for each). I'd really advise to switch from m2 as soon as feasible:; https://forum.image.sc/t/third-milestone-on-the-path-to-qupath-v0-2-0/27953/15",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/202#issuecomment-520238887:28,test,tested,28,https://qupath.github.io,https://github.com/qupath/qupath/issues/202#issuecomment-520238887,1,['test'],['tested']
Testability,"Sorry, yes you should use `logviewer.getWidth()` and `logviewer.getHeight()` instead",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1731064209:27,log,logviewer,27,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1731064209,2,['log'],['logviewer']
Testability,Sounds great - I'll see if I can find some time to test it and report back :),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-645200298:51,test,test,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-645200298,1,['test'],['test']
Testability,"Sounds sensible, I was planning on refactoring the current version to trial thresholding histograms/gating scatter plots, so I'll close this and do ""something"" when merging that. There's already an internal cap, though I'll add a logged warning",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1541#issuecomment-2162652113:230,log,logged,230,https://qupath.github.io,https://github.com/qupath/qupath/issues/1541#issuecomment-2162652113,1,['log'],['logged']
Testability,"Tested on m5 on another machine with ubuntu 18.04. Worked fine. So I guess it may be my local installation of OpenCV, java or some other issue. Will close this for now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561079092:0,Test,Tested,0,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561079092,1,['Test'],['Tested']
Testability,"Tested on my fork and seems to work, but definitely one to watch in future releases. Will merge for now",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1694#issuecomment-2459650284:0,Test,Tested,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1694#issuecomment-2459650284,1,['Test'],['Tested']
Testability,"Thank yo for the reply and your re-repeat :) of what you had already told me. I admit that I am really bad at understanding this part. This is what I think I understand:. The approach we used creates an issue with the way `ImageDisplay` is currently implemented because saving display settings to the .qpdata file is not good practice? ; But doing this via scripting is OK because it's less important if scripts break upon QuPath updates?. The risk is that if these are made public, other people could call upon these methods, and that would break something in the GUI whenever changes will be made to the code?. Currently there is no other way than to use `ImageDisplay` to set these properties for the channels (and save and recall them) which is bad because this will be revised in the future?. Let me know what I got wrong there if you have time. I think that in the meantime I will test a script to do what we used to be able to do, and dive into the wonderful world of Reflection for my sake.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632635935:887,test,test,887,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632635935,1,['test'],['test']
Testability,"Thank you both for answering! @Svidro and @petebankhead ; I started all over again, so I don't have the workflow anymore. Nevertheless, what I meant was that I used indeed the pointing tool. I had two populations, one negative and one positive. After I ran the positive cell detection, the negative population was gone. And unfortunately, there is no undo button. My goal was indeed compare the manual counting and the automated counting. For optimization. I don't know whether the error is the lack of RAM, I checked and i have 3,3GB available. And I only have 4 ROI's in one image. When I run the analysis, I make sure nothing is selected and choose the option 'all annotation'. It might be, but it might be not, because sometimes it also does not analyse only 1 ROI, but other times it does. However, the log it says 'memory error'. the programs that are running on my computer besides Qupaht are google chrome (1tab), one note with an excel file, and file explorer. ![capture](https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG); ![capture2](https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG); ![capture3](https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG). I really don't know why sometimes it works or not, but i'll be more careful in what I'll do.; Unfortunately, there was also no backup file in the folder after the failure of saving.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343227944:808,log,log,808,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343227944,1,['log'],['log']
Testability,Thank you for the big work on the metadata as well! I will test this PR thoroughly as soon as i can. In the mean time i have a spotted a couple of typos for which i hope i won't pass as annoying if i point them out,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2266645381:59,test,test,59,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2266645381,1,['test'],['test']
Testability,Thank you for your quick response! I followed the instruction in the link you gave and successfully converted the TIF to a pyramidal format using this command:; `convert before_converting.tif -compress jpeg -quality 75 -define tiff:tile-geometry=256x256 ptif:after_converting.tif `; But it can't be opened either. Here is the log:; ```; ERROR: Openslide: Property not available: openslide.mpp-x; ERROR: Openslide: Property not available: openslide.mpp-y; ERROR: Openslide: Property not available: openslide.objective-power; ERROR: QuPath exception; ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/221#issuecomment-423805036:326,log,log,326,https://qupath.github.io,https://github.com/qupath/qupath/issues/221#issuecomment-423805036,1,['log'],['log']
Testability,"Thank you for your quick response, Pete. Today morning I tried to provoke this error with different classifiers. The error occured with 'Random trees', 'Artificial neural network' and 'Logistic regression'. I think the more settings I change, the more likely the error will occur - but I couldn't figure out if a single setting is the reason. With my usual approach I train the pixel classifier on a project training image. If I could successfully save the classifier and load it for another image in the project, I get the following error messages for ANN and KNN:. ANN classifier:; ![err_ann](https://user-images.githubusercontent.com/59967282/73450688-34d01a00-4366-11ea-9c8f-7e08251c6261.png). KNN classifier:; ![err_knn](https://user-images.githubusercontent.com/59967282/73450694-37cb0a80-4366-11ea-98f8-17df5cefcf52.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-580236559:185,Log,Logistic,185,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-580236559,1,['Log'],['Logistic']
Testability,"Thank you, this was pretty fast!. Accordingly to my testing it works all okay and pretty safe. I think the idea to write as soon as something is being modified is worth it. The fact that now it requires that the images are opened & modified at least once is not a problem. I think we can put up with it for the time being and leave it for some future adjustment, if needed. However i think you got something off: it should be possible to write the imagedata if the server was never loaded. The problem is not that the image name is always written to the ImageData's file, as that does not make the metadata different from the old ones when the name was kept as is.; The issue is that, when writing the `.qpdata`, it wants to know the ImageServer unique identifier and summary. Both of these cannot have changed without the server being loaded first (the unique identifier possibly yes if it uses the filepath, but in that case moving the image folder after the ImageData was saved would have the same result).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548:52,test,testing,52,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2276459548,1,['test'],['testing']
Testability,"Thanks @MakarowMax, I haven't seen this error before but I am able to replicate it when I chance to the *Logistic Regression* classifier. I can change to *Artificial Neural Network* without problems. Is this also true for you?. It's curious because I am fairly sure I have used *Logistic Regression* without errors in the past; I'm not sure if it depends upon operating system or if any recent updates might be causing the trouble. In any case, the error occurs deep within OpenCV - and unfortunately there is no possibility to capture the exception within QuPath before the Java Virtual Machine shuts down. In the past, the only solution I could find to OpenCV errors like this has been to avoid calling the crashing code. In this case, that would mean removing the *Logistic Regression* option. I haven't found it to be terribly useful (even when it worked) so I don't think this would be a big loss; I personally prefer *Artificial Neural Network* (and sometimes *Random Trees*). *K Nearest Neighbor* really only makes sense when training using point annotations (when given a large number of samples it is too slow). What do you think? Does it happen to you with other classifier types as well?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-579836335:105,Log,Logistic,105,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-579836335,3,['Log'],['Logistic']
Testability,"Thanks @NHPatterson. @petebankhead I tried recompiling the java-11 branch on my main machine, but it keeps failing with the same error.; For my cursiosity, did you try loading the same files with the published 0.1.2 or 0.1.3-SNAPSHOT versions. For example using the later I have the following log after opening everything without issues:. ```; ./QuPath ; 12:25:42.077 [main] [INFO ] qupath.QuPath - Launching QuPath with args: ; 12:25:42.710 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to fr_BE; 12:25:42.714 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 12:25:42.742 [JavaFX Application Thread] [INFO ] qupath.lib.gui.prefs.PathPrefs - Tile cache size: 4096,00 MB; 12:25:43.922 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Refreshing extensions in /home/joelrv/QuPath/extensions; 12:25:43.923 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/joelrv/QuPath/extensions/qupath-extension-bioformats.jar; 12:25:43.923 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Added extension: /home/joelrv/QuPath/extensions/bioformats_package.jar; 12:25:43.943 [JavaFX Application Thread] [INFO ] q.l.i.s.BioFormatsOptionsExtension - Bio-Formats version 5.9.2; 12:25:44.261 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Selected style: Modena Light; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Performing update check...; 12:25:44.262 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathApp - Starting QuPath with parameters: []; 12:25:55.878 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-x; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Openslide: Property not available: openslide.mpp-y; 12:25:55.879 [JavaFX Application Thread] [ERROR] q.l.i.servers.OpenslideImageServer - Open",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/279#issuecomment-472813709:293,log,log,293,https://qupath.github.io,https://github.com/qupath/qupath/issues/279#issuecomment-472813709,1,['log'],['log']
Testability,"Thanks @Rylern and @alanocallaghan - good call making me right the tests, that helped identify and fix some bugs, and address some suboptimal behavior concerning rounding and out-of-range values. > Is there a reason for defining the BufferedImageNormalizer interface, instead of just using [Function<BufferedImage, BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) or [UnaryOperator<BufferedImage>](https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html)?. I've updated this to use [`BufferedImageOp`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/image/BufferedImageOp.html), which then; 1. allows the classes to be used directly with [`Graphics2D.drawImage`](https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/java/awt/Graphics2D.html#drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)).; 2. makes it possible to control whether in-place image conversion is used. Potentially one of the other standard Java interfaces could be used, but I want to avoid giving the impression that it's a good idea to use arbitrary methods or lambda expressions. These can be convenient for testing, but will fail when images are added to a project - because we need the methods to be JSON-serializable. The JSON serialization is taken care of through the `ImageServers` class, and we have to explicitly register every normalization class so that it can be used within a project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698:67,test,tests,67,https://qupath.github.io,https://github.com/qupath/qupath/pull/1554#issuecomment-2209250698,2,['test'],"['testing', 'tests']"
Testability,"Thanks @ap--!. From a quick search of the QuPath code, we do use `new File(uri)` in quite a lot of places, so I'd like to understand better what the problem is to see if we need to eliminate it entirely. I had a look at the other discussion, but I'm still fuzzy on the real-world implications and how I could properly test any fix. I saw the combination of URIs that do and don't work and I also saw; ```; print(java.io.File(java.net.URI(""file://localhost/c$/Windows"")).exists()) # fails URI has an authority component (bug as this is completely valid path); ```; but I guess I don't understand when and why that matters, or if the URI could simply be given in some other way?. Unfortunately, I use Windows very rarely, network shares on Windows even less, and don't know much about more exotic URIs...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1049#issuecomment-1240602285:318,test,test,318,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049#issuecomment-1240602285,1,['test'],['test']
Testability,"Thanks @finglis the more I think about this, the more I think we **really** need this. Relatedly, I wonder if we could build on the idea to make auto-estimating the image type smarter?. My first (and entirely untested) idea would be to . * loop through all the known stain vector combinations; * apply the stain vectors to an image; * and calculate the mean absolute value (for example) of the residual; * select the vectors where the error is minimized. This would only be suitable for 2 stains and might not handle artifacts very well, so I imagine it would need some refinement. But perhaps we can incorporate more prior knowledge (e.g. that stains should be negative) while still keeping the method simple and fast to compute. The goal would be to enable a user to have the (probably small) number of stain vectors that are relevant for their images based upon their image sources/scanners, and have QuPath make more intelligent suggestions which to use - rather than relying upon scripting or using *Estimate stain vectors* on every image. But I guess any auto-estimate is likely to be wrong sometimes. So some other related ideas:. * We could incorporate stain selection into the ""Project import"" dialog (alongside where we set the image type) to give another way of ensuring an image batch has consistent stain vectors set.; * We could add a 'Run for project'-like command that specifically exists to transfer the image type and stain vectors from the current image to all images in the project. This can already be scripted easily, but isn't very approachable for people who really don't want to handle scripts. Logging the ideas here for consideration when we come to tackle the original enhancement, and in case any are worth discussing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437:1620,Log,Logging,1620,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437,1,['Log'],['Logging']
Testability,"Thanks @franfcunha !. I recently opened a (very small, single-channel) .jp2 image in QuPath with the help of Bio-Formats, but I do not have a whole slide image in that format to test. JPEG2000 *does* currently appear on the [Bio-Formats list of supported formats](https://www.openmicroscopy.org/site/support/bio-formats5.4/supported-formats.html) with a tick in the 'pyramid' column... but I am not sure whether that should be interpreted as meaning pyramidal .jp2 whole slide images are supported, or if it is simply a comment on the capabilities of the format. I would suggest asking the OME team about this through their [mailing list](http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-users/) - they are the experts. Apart from that, in QuPath under *View &rarr; Show log* you may get more useful information to help track down the source of any error. Where Bio-Formats is involved, I would also recommend trying to open a cropped/lower resolution part of any problematic image with [Fiji](http://fiji.sc) as well, since the Bio-Formats plugin for Fiji is much more established. This can helps to track down whether the problem is most likely to be with the file itself, the file reader, or the QuPath extension.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/72#issuecomment-299391470:178,test,test,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/72#issuecomment-299391470,2,"['log', 'test']","['log', 'test']"
Testability,"Thanks @jameshball for the PR and thorough description. All looks good to me, but I need to find a bit more time to check in detail (and try to remember if there was any logical reason to ignore annotations in the first place... I suspect there was not and it was just an oversight). The reason I want to check a bit more is that this highlights a bit of weirdness in how [QuPath provides different `MeasurementList` implementations](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/measurements/MeasurementListFactory.java#L44), so the annotation isn't guaranteed to have the same type of list after deserialization as it previously had. This was for reasons of efficiency, and because in an early version there was a 'dynamic measurement' feature that only annotations supported (but this isn't now used). That's a good chance that doesn't matter, but keeping this PR open is a handy reminder to think about measurement lists and GeoJSON in more detail before the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/835#issuecomment-957197679:170,log,logical,170,https://qupath.github.io,https://github.com/qupath/qupath/pull/835#issuecomment-957197679,1,['log'],['logical']
Testability,"Thanks @jesusdpa1 although I either don't understand the issue or couldn't replicate it. I'd also be confused if the .msi and .exe behave differently in this regard, since they are built at exactly the same time from the same code. I created a new account and installed QuPath from the .msi, and it did not have an user/extensions directory set by default - as it shouldn't. The directory is only set whenever the user needs it for some reason (usually they install an extension), and at that point they have the option to set its path to whatever they choose. This is then stored in the user preferences, using Java's default preferences mechanism... which should keep the path restricted to wherever the user requests. Since you mention viewing the extensions directory immediately after installation - but not installing any extensions - I feel like something must be missing somewhere. Note I only have a Windows 10 system to test this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1108#issuecomment-1302244800:930,test,test,930,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108#issuecomment-1302244800,1,['test'],['test']
Testability,"Thanks @reynoldscem, I haven't seen this before. Is there an easy way for me to get an image that fails without downloading the whole dataset? I will only have a few minutes to look at it today and couldn't easily identify the offending image through the ANHIR link. Otherwise I can wrap the code where the error occurs in a try/catch block so that if it can't resolve the overlap it will at least fail less catastrophically... but I will be guessing the fix without being able to test it directly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-620641833:481,test,test,481,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-620641833,1,['test'],['test']
Testability,"Thanks @saramcardle, I think my last commit resolves this - but so far I've only been able to test it on a Mac.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/519#issuecomment-641085698:94,test,test,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/519#issuecomment-641085698,1,['test'],['test']
Testability,"Thanks @tp81! It might take me a bit of time to look at this in detail, because I've switched focus temporarily to finish some papers. First thoughts: I've also had the issue of having to click on the viewer to activate it for backspace to work, I agree it would be best to avoid this. Minor concerns are; * it introduces public methods, and I'd rather reduce this as much as possible; * if it basically duplicates some code elsewhere, perhaps some refactoring elsewhere could promote reuse. There is also a bit of JavaFX/macOS weirdness when it comes to single-key accelerators (i.e. not requiring Cmd+Something to run a menu item). I'm not sure if it's relevant here but anything accelerator-related takes some extra cross-platform testing. I've assigned it to a v0.4.0 milestone to remind us to try to get this functionality in that release (tentatively planned for early next year).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/830#issuecomment-957188687:734,test,testing,734,https://qupath.github.io,https://github.com/qupath/qupath/pull/830#issuecomment-957188687,1,['test'],['testing']
Testability,"Thanks Alan! While you're there, did you happen to see if it can be set more sensible in an automatic way, as @Rylern suggested at https://github.com/qupath/log-viewer/issues/56#issuecomment-1723196589 ? My hard-coded values don't feel great... and, indeed, were wrong as you've shown.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1339#issuecomment-1729273471:157,log,log-viewer,157,https://qupath.github.io,https://github.com/qupath/qupath/pull/1339#issuecomment-1729273471,1,['log'],['log-viewer']
Testability,"Thanks Julian, we'll add this changes but don't want to accept the pull request as-is because it brings in some other commits that shouldn't be there, caused by some recent git-related confusion and we try to sanitise our branches for v0.3. It will take us some time to resolve the problems on our side, in the meantime just logging all related things in a GitHub Issue is great.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/651#issuecomment-740555654:325,log,logging,325,https://qupath.github.io,https://github.com/qupath/qupath/pull/651#issuecomment-740555654,1,['log'],['logging']
Testability,"Thanks Pete, I'll give that a shot. They're all cytoplasmic stains, without any expected overlapping (thankfully!). I have quite a few of these multiplexed whole slide images, I can share if you think they would be useful for development testing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/155#issuecomment-371260102:238,test,testing,238,https://qupath.github.io,https://github.com/qupath/qupath/issues/155#issuecomment-371260102,1,['test'],['testing']
Testability,"Thanks a million for your answers! I tested both ways, and for my purpose the one @petebankhead proposed works the best, as it's very fast to do and I have over a hundred slides in several projects. Cheers! 🥇",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/114#issuecomment-343150195:37,test,tested,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/114#issuecomment-343150195,1,['test'],['tested']
Testability,"Thanks again, Pete!. I've tried it now and it updates both um/pixel and magnification, but I can't get it to work with the further script - probably because I'm doing some beginner mistake in the script setup - my programming ""knowledge"" is limited to cut and paste:). I run this and get the following error log (see below):. // Set the magnification & pixel size (be cautious!!!); def metadata = getCurrentImageData().getServer().getOriginalMetadata(); metadata.magnification = 40; metadata.pixelWidthMicrons = 0.25; metadata.pixelHeightMicrons = 0.25. setImageType('BRIGHTFIELD_H_DAB');; Thread.sleep(100); setColorDeconvolutionStains('{""Name"" : ""H-DAB TMA40x"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.82788 0.53885 0.15571 "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.15891 0.36799 0.91615 "", ""Background"" : "" 210 208 209 ""}');; Thread.sleep(100); runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 224, ""requestedPixelSizeMicrons"": 20.0, ""minAreaMicrons"": 100000.0, ""maxHoleAreaMicrons"": 1000000.0, ""darkBackground"": false, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": true, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');; Thread.sleep(100); selectAnnotations();; Thread.sleep(100); runPlugin('qupath.imagej.detect.nuclei.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 14.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.09, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; Thread.sleep(100). Error log:. INFO: Starting script at Thu Sep 27 09:20:09 CEST 2018; ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.g",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:308,log,log,308,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['log'],['log']
Testability,"Thanks again. Tried to rebuild Qupath to get the new changes, but now the build failed. Updated Java, maybe I need a previous version of Java... Anyway, here is the command prompt with the failed build. Don't want to take more of your time, Pete, so just leave it if you feel like it's unimportant:. Microsoft Windows [Version 10.0.18363.836]; (c) 2019 Microsoft Corporation. Med enerett. C:\Users\IT-bruker\Documents\GitHub\qupath>gradlew clean build createPackage -Ptensorflow-cpu=true; Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details. > Configure project :; Building QuPath version 0.2.0-m12-SNAPSHOT; Current Java version: 1.8; C:\Program Files (x86)\Java\jre1.8.0_251; I won't try to get the last commit - consider running with '-Prequest-git-tag=true' if you want this next time (assuming Git is installed); Operating system: Windows 10 10.0 x86; You appear to be using a 32-bit JDK - If I can't find a 32-bit version of JavaFX, this will fail! Probably at the 'test' stage.; Requesting TensorFlow (CPU) subproject; Copying license directories:; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-core-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-bioformats\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-openslide\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-pen\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-processing\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-script-editor\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-extension-svg\src\main\resources\licenses; C:\Users\IT-bruker\Documents\GitHub\qupath\qupath-gui-fx\src\main\resources\licenses. FAILURE: Build failed with an excep",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630948935:1029,test,test,1029,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630948935,1,['test'],['test']
Testability,"Thanks for exploring, although I'm now a bit lost in the details. One possibly-important thing that seems missing: what size/resolution of display are you using?. I still haven't managed to replicate the problem on two computers (13"" MBP & Mac Studio with Studio Display. I tried a few different screen resolutions, and adding extra buttons to the toolbar code. The project entries always show up immediately, even whenever the toolbar contains more buttons than can be shown at once. Am I right that the bug appears for you only when; * There is precisely one button too many in the toolbar when QuPath is launched (more or fewer & the bug doesn't appear); * The QuPath window is not resized at all prior to opening the project. Also, does it appear for every project you try? Have you been able to test it on a second computer?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1184#issuecomment-1352810287:800,test,test,800,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184#issuecomment-1352810287,1,['test'],['test']
Testability,"Thanks for logging this after our chat about it, I agree QuPath should provide this option somewhere. I thought the LUT method was cleverer (and more effort to get working...), and it avoids some of the 'my image is all black' bug reports that otherwise ensue when exporting grayscale images that all have low pixel values and previewing them in the operating system's default viewer. But Iit is indeed a bit annoying that it requires setting the `mode` to `L` when using PIL - and also requires getting that option somehow passed through to PIL if using some library on top of it (like `imageio`). I'll try to get an optional alternative for the next QuPath release that can just output grayscale labelled images instead.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/993#issuecomment-1159781538:11,log,logging,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/993#issuecomment-1159781538,1,['log'],['logging']
Testability,"Thanks for reporting this.; Am I right to understand that you have tried this on two Windows computers, and one works but the other does not?. I am not at a computer right now to explore more, but my first question is does the computer that fails to work have a 32-bit version of Windows installed?. From the log, there appears to be a problem loading the OpenSlide library (for which I think only 64-bit support is included). This should not prevent Bio-Formats from opening the image, but conceivably it could since QuPath tries out all the possible libraries that it has when opening a new image.... and if it fails badly enough with its OpenSlide attempt, perhaps it does not try Bio-Formats. You can prevent this if you find where QuPath is installed, and delete (or copy to another location) the OpenSlide component - probably called qupath-openslide-0.1.1.jar or similar. You can then restart QuPath and try again. Could you try this and see if it makes a difference? Thanks.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/35#issuecomment-268206675:309,log,log,309,https://qupath.github.io,https://github.com/qupath/qupath/issues/35#issuecomment-268206675,1,['log'],['log']
Testability,"Thanks for testing this out so quickly! So, the issue really is with Rosetta. Obviously, I'd want to have something that works well with Rosetta as well. Let me think about that... As for OpenSlide and what not, well, packaging this as JavaCPP Presets would be one way to get this going smoothly, but someone would need to spend time on it: https://github.com/bytedeco/javacpp-presets/wiki/Create-New-Presets",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018260476:11,test,testing,11,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018260476,1,['test'],['testing']
Testability,"Thanks for the clear description & example - could you have a look at the pull request to see if that resolves the problem? If you're able to test it with all your thousands of ROIs that would be great, in case any new badness has been introduced. My hope is that this will only be important for updating 'old' ROIs, since anything new created in v0.2.0 from now on will use JTS from an earlier stage and avoid the Shape &rarr; Geometry pain. (Side note is interesting, I'll check it out!)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/434#issuecomment-610230010:142,test,test,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/434#issuecomment-610230010,1,['test'],['test']
Testability,Thanks for the extra details. How many data files did you lose this way?. I ask because it sounds like it should *only* happen when the timing is particularly unfortunate and the connection is lost when writing... but I'm not exactly sure. I don't have a similar VPN setup that I can use to test it. It sounds to me like the best fix QuPath can offer would be to automatically discover and use the .bkp file (rather than you needing to find it yourself) -- logging a warning to the console to state that it has done this. Does that sound right to you?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640548839:291,test,test,291,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640548839,2,"['log', 'test']","['logging', 'test']"
Testability,"Thanks for the feedback!. > The main question (maybe to discuss with @alanocallaghan and @finglis) is whether we should use Optional instead of just returning null. I am slightly in favor of using it sometimes - especially when the return really is optional - but here it seems to be used where throwing an exception would be preferable.; > ; > Returning null can be informative, inasmuch as it suggests we have a sparse image without pixels for every location - and shouldn't happen whenever there has been an exception. You're right, I was overusing `Optional`. Now, each time an error occurs, an exception is thrown. I kept `Optional` only when a function is not guaranteed to return a result AND no error occurred during its execution. > ReaderWrapper looks very tied to the 'OME' way of doing things (Bio-Formats and OMERO); I'd expect a general image reader to return something more informative than a byte[][], which can only be interpreted with a lot of other return values and Bio-Formats logic. So it isn't very easy to use in a standalone way.; > ; > That isn't in itself a problem, but if writing a general image reader for use with the OMERO web API or [IIIPImage Server](https://iipimage.sourceforge.io/documentation/server) (for example) I imagine it would be far harder to return a byte[][] than a BufferedImage.; > ; > So I think it should either 1) embrace being Bio-Formats/OMERO-specific, and prioritise simplicity, or 2) incorporate more of the processing logic that converts the byte[][] into a BufferedImage, and prioritise reusability. If the goal is for ReaderWrapper and ReaderPool to be reusable, it needs to be easy to generate and work with their return values. I changed `ReaderWrapper` to be as generic as possible (its read function now returns a `BufferedImage`). However, I wanted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:998,log,logic,998,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['log'],['logic']
Testability,"Thanks for the update. Looks great 👍, I will continue testing dev-0.3 branch. I am closing this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/669#issuecomment-791936700:54,test,testing,54,https://qupath.github.io,https://github.com/qupath/qupath/issues/669#issuecomment-791936700,1,['test'],['testing']
Testability,"Thanks!. > Oddly enough, I ran into trouble with the new Telerium openjdk not recognizing gradlew when trying to set that up on my new computer, but was able to build and test things out on my old one so... I will look into that later. Hmmm, that can happen if you've installed the latest JDK and it's now the system default, but you haven't built QuPath in a while. I tend to update gradlew as soon as I see there's a new stable release, although that tends to come a bit after the JDK. If that's the issue that got you, the 'solution' can be to set an older JDK to be the system default (e.g. Java 11) and run gradlew using that... or find some other way to run gradle with a different, older JDK. It's able to download separately the JDK it actually needs to build QuPath, separately from the JDK used to run gradle itself - if that makes any sense. More info about [toolchains here](https://docs.gradle.org/current/userguide/toolchains.html).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/984#issuecomment-1183544161:171,test,test,171,https://qupath.github.io,https://github.com/qupath/qupath/issues/984#issuecomment-1183544161,1,['test'],['test']
Testability,"Thanks, I *only* tested it on Windows so far (which isn't much fun with a 13"" screen, no battery life, and continually pressing the keys that would correspond to the Mac shortcuts).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1419#issuecomment-1803804365:17,test,tested,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1419#issuecomment-1803804365,1,['test'],['tested']
Testability,"Thanks, I can't see any good reason for the old behavior either - I'll merge the change :). Equalizing views would be a bit too big a change for a 0.0.x release... perhaps one day, but the whole brightness/contrast/color code is pretty horrible, and so it probably is a case of rewriting it entirely rather than trying to push it much further. (It was thanks to @melvingelbard that the issue was found so quickly, I was hesitant to delve into the mess myself...). For reference, the logic of the update is:; * retain the settings from the previous image in the current viewer, if it's compatible with the one being opened; * if there wasn't a compatible image already open, find the first viewer that *does* have a compatible image and use the display settings from that",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/601#issuecomment-689625384:483,log,logic,483,https://qupath.github.io,https://github.com/qupath/qupath/issues/601#issuecomment-689625384,1,['log'],['logic']
Testability,"Thanks, I made minor edits to ensure `super.close()` is called as well, and made some variables final. One worry, possibly obscure: it looks like `dedicatedStore` is being set as a side-effect or calling `getStore()`. That's fine if the builder is only used once, but if it is reused and passed a different `store` (or `findViewer()` gives a non-null result) before the second use then I think we could still end up closing a store that is being used elsewhere. Possible workarounds:; 1. Move the `getStore()` logic into `build()` so that `dedicatedStore` doesn't need to be a field of the builder; 2. Reset the value of `dedicatedStore` whenever its value may change (e.g. `findViewer(imageData)` doesn't return `null`, or `store` is updated); 3. Build the store inside the `RenderedImageServer` if the store it is given is `null` - and then set `dedicatedStore` only within `RenderedImageServer` (which knows whether or not it created a store). I tend to think Option 3. might be the easiest to code, and most robust.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1577#issuecomment-2273859612:510,log,logic,510,https://qupath.github.io,https://github.com/qupath/qupath/pull/1577#issuecomment-2273859612,1,['log'],['logic']
Testability,"Thanks, I should have thought of that. I've just tried the ARM64 build from 2021-11-08 and it works beautifully - I couldn't reproduce the issue, and it runs noticeably faster. I used the old build because it's unfortunately really awkward to build QuPath for M1 - the libraries we use to read whole slide images are stuck on Intel.; * OpenSlide - https://github.com/openslide/openslide / https://github.com/openslide/openslide-java; * Bio-Formats - https://github.com/ome/bioformats (because it uses an older libjpeg-turbo). I hacked together something that works locally with OpenSlide installed via Homebrew so I could test JavaCPP / OpenCV, but I haven't figured out how to make the whole distribution portable (https://github.com/qupath/qupath/issues/629). If it's possible to resolve the memory errors via JavaCPP so that it works via Rosetta that would be excellent, but I understand if not - especially since it seems fine in the ARM64 build, and we'll want to use that as soon as we can figure out how.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018254282:622,test,test,622,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018254282,1,['test'],['test']
Testability,"Thanks, I'll need to find time to explore this in more detail - it probably reveals an ugliness in how QuPath handles viewer interactions. I worry a bit about adding new event handlers, because it can become confusing which is called and when. Note that the move tool (as with other tools) defines a [`mousePressed(MouseEvent)`](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/MoveTool.java#L73) method. Conceivably, this or some other tool might do something with a middle button press. If so, then it might be hard to predict which method will actually be called. It's quite possible that both would be called. One way to ensure that one method is called before another `EventHandler` is to use an [`EventFilter`](https://docs.oracle.com/javafx/2/events/filters.htm)... although adding multiple event filters would presumably lead to the same kind of confusion regarding *their* order. For global application behavior that doesn't need to be customized, then I think it's best to include the logic in a single `EventHandler` or `EventFilter` rather than adding multiple ones. Having both an `EventFilter` and an `EventHandler` is fine because then we know the filter will be called first, but having more than one of either of them attached to a UI component is where the confusion starts. For that reason, my guess (without looking in detail!) is that the tool toggling should be implemented using an `EventFilter` attached to the scene (not viewer, because it's global to the application), somewhere [around here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1046). Where exactly would depend upon whether the middle click should switch the tool when the UI is blocked or not. Either way, you should probably make sure to consume the event after it has performed the switch. However I'm not sure... since I reached this conclusion by thinking about it rather than testing anything.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586:1045,log,logic,1045,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1237195586,2,"['log', 'test']","['logic', 'testing']"
Testability,"Thanks, I've fixed two of the typos but not sure about the other. This is still a draft PR and I'll need to work on it some more. It is a slightly scary change to make since it is so core, and there are (at least) three things I haven't really thought through:; 1. When `ImageServer` metadata is written in a project and when it isn't (I see it missing sometimes, which has previously been irrelevant since it's generated when the `ImageServer` is built... but becomes much more important if the server isn't necessarily built); 2. What happens when a script changes the metadata, but the server itself hasn't been read (e.g. setting channel names or pixel size); 3. How exceptions are handled when lazy loading fails. At the moment, I doubt this PR does the right thing in those cases. I'll mark it was ready to review when I _think_ it's ok - that's probably the better time for thorough testing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2266664413:890,test,testing,890,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2266664413,1,['test'],['testing']
Testability,"Thanks, although I remain quite confused. If you find time to write up a bug report that clearly shows the broken and fixed behavior then that would be really helpful. Otherwise, I'll be on the lookout for problems with the tiling, but I'm not sure I'll have time to look in much detail any time soon without a demonstration that the current behavior is critically broken. As far as I can tell, any current bugginess may lead to inefficiency but I'd like an example where it gives a wrong result to understand what to fix. Ideally there would be a test added to [`TestRoiTools`](https://github.com/qupath/qupath/blob/dddad1fe5c567015e07bed8c05940c4403b8d07f/qupath-core/src/test/java/qupath/lib/roi/TestRoiTools.java) that fails before and passes afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219701264:548,test,test,548,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219701264,4,"['Test', 'test']","['TestRoiTools', 'test']"
Testability,"Thanks, could you describe in more detail what this fixes?. Can you provide any minimal example of the bug - ideally [with a unit test](https://github.com/qupath/qupath/blob/main/qupath-core/src/test/java/qupath/lib/objects/classes/TestPathClass.java)?. Based on the other thread I tried running; ```groovy; pc1 = QP.getPathClass(""Right""); pc2 = QP.getDerivedPathClass(pc1, ""hello"").getParentClass(); println pc1 === pc2; println pc1.hashCode(); println pc2.hashCode(); ```; but that behaved properly, so I'm not sure what exactly is wrong.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1670011437:130,test,test,130,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1670011437,3,"['Test', 'test']","['TestPathClass', 'test']"
Testability,"Thanks, have you been able to try this on any other operating system? I can't replicate it on my laptop but will try to test it on Ubuntu soon. Also, do you have a graphics tablet / pressure-sensitive pen?. The error takes me to https://github.com/qupath/qupath/blob/5ddf2cdf8b2b7eb689d70240878887af78de43cb/qupath-extension-processing/src/main/java/qupath/opencv/tools/WandToolCV.java#L420-L424; so my best guess is that the radius is somehow less than 0. I don't see why that would be the case, but you could try the following script; ```groovy; println qupath.lib.gui.viewer.tools.QuPathPenManager.getPenManager(); println qupath.lib.gui.viewer.tools.QuPathPenManager.getPenManager().getPressure(); ```; to investigate. If there can be an scenario when the pressure is < 0 then the fix might just require checking is `radius <= 0` at line 421... but I'm guessing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/380#issuecomment-561064260:120,test,test,120,https://qupath.github.io,https://github.com/qupath/qupath/issues/380#issuecomment-561064260,1,['test'],['test']
Testability,"Thanks, makes sense. I'm still unable to get things working reliably in QuPath, including after a restart and when keeping the process alive after testing, but I'm not sure what else to try. For QuPath itself, the problem remains pretty obscure (I don't think any users have complained yet). I wouldn't want this to delay any 1.5.7 release, and I can't be certain any lingering problems aren't on our side anyway - I'm looking forward to the non-SNAPSHOT aarch64 builds being available.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024245119:147,test,testing,147,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024245119,1,['test'],['testing']
Testability,"Thanks, nice idea to provide a way to get the rendering settings!. Happy to merge the rendering change; could you resubmit the pull request targeting it at the [`dev-0.3`](https://github.com/qupath/qupath/tree/dev-0.3) branch please?. There is a small issue with the JPEG export: it can quietly fail and produce an image with all zeros if the user specifies to use >3 interleaved channels. I realise this takes some effort on the user's part, but I think we need to protect them from this by logging a warning and switching to a valid export option, since in some cases requesting interleaved output may be much more efficient (because of the way in which QuPath requests channels all at once during writing, and planes must be written sequentially). Here is a script to replicate it:. ```groovy; // Can use an 8-bit version of ImageJ's 'Neuron' sample image to test this (5 channels). import qupath.lib.images.writers.ome.*. def path = buildFilePath(PROJECT_BASE_DIR, ""my_export.ome.tif""); new OMEPyramidWriter.Builder(getCurrentServer()); .channelsInterleaved() // Fails, gives image of zeros - channelsPlanar() would work; .compression(OMEPyramidWriter.CompressionType.JPEG); .build(); .writePyramid(path); ```. PS. How should `::dip` be interpreted in the comments?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/688#issuecomment-811660490:492,log,logging,492,https://qupath.github.io,https://github.com/qupath/qupath/pull/688#issuecomment-811660490,2,"['log', 'test']","['logging', 'test']"
Testability,"Thanks, that would be good - it sounds like it would be difficult and time-consuming for anyone else to replicate the problem, and might not be possible if it turns out to be something more specific to your system. So solving this will likely require any any info you can get from VisualVM's CPU sampling. I'll try to write up info about VisualVM + QuPath at some point, but there are brief instructions at https://forum.image.sc/t/designing-a-qupath-workstation/54849/14. QuPath shouldn't be regenerating thumbnails when a project is opened, and it shouldn't be remembering anything (other than the preferences) across relaunches. v0.4.0 should generating missing thumbnails only, and do so in a background thread that doesn't block. Both v0.3 and v0.4 will try to access the thumbnail images in the project when it is opened; this *could* potentially block the UI, because it needs to be done in the UI thread (and there can only be one). However these should generally be small JPEGs so I've never known that to be a problem. Therefore I'd only expect this to be troublesome if there is some other reason why access to the disk is exceptionally slow. I couldn't really tell what was going on in the video, partly because the analysis pane was closed - and when the image was opened I couldn't really see how or when that happened. For slightly more info in the log, you can switch the log level in the preferences from `INFO` to `DEBUG`. Not sure if that will help narrow things down or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1326026753:1364,log,log,1364,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1326026753,2,['log'],['log']
Testability,"Thanks, that's quite strange... I've just downloaded it again, and it is working here on two different Macs. Are you running macOS Sierra, or some other version?. If QuPath can't load OpenSlide, then I expect it can't load any other whole slide formats (unless you have the Bio-Formats extension installed). In that case, I would expect it to fall back to using ImageJ for MRXS images to read only the low-resolution data. If you right-click on QuPath.app and select 'Show package contents', you should be able to see something like what is shown below:. ![libopenslide](https://cloud.githubusercontent.com/assets/4690904/20973479/a23ad306-bc90-11e6-9863-e9281c2c9110.jpg). I suspect the issue may be connected to differences in the many ```lib*``` files. One way to test this is to copy all the ```lib.*``` files from a QuPath version that works (i.e. anything before v0.1.1?) and paste it into the QuPath that doesn't. This may cause v0.1.1 to function. If these instructions make any sense, could you try this?. Thanks,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265486923:767,test,test,767,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265486923,1,['test'],['test']
Testability,"Thanks, the screenshot suggests it's the `Files.exists()` check that is so slow. QuPath is probably calling this quite a lot, because it's usually really inexpensive - and *not* calling it leaves open the (admittedly small) possibility that the file has been deleted between calls. I could try to cut down on this, but I'm skeptical that it will help because it sounds a lot like it's only the first call that is slow. In fact, I'd be curious as to whether accessing each file is slow or just the first one on the disk. That should be relatively easy to test by creating a much smaller project and comparing the speed. Either way, it sounds like the problem lurks in the realm of Java, the operating system, and the hard drive. I'm not sure if there's much can be done about it in QuPath. I'd suggest:. * try accessing the images some other way before opening them in QuPath (e.g. through Windows Explorer), in case 'pre-warning' the OS is somehow useful; * try copying the images to a local drive (if possible); * try timing a simple script with a file on the same disk, e.g. ```groovy; import java.nio.file.*; var path = '/path/to/some/file'; println ""Exists: ${Files.exists(Paths.get(path))}""; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045:554,test,test,554,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045,1,['test'],['test']
Testability,"Thanks, this looks like a bug in the Bio-Formats extension. I can replicate the problem with the attached image. I've tracked it down to one line [here](https://github.com/qupath/qupath-bioformats-extension/blob/master/src/main/java/qupath/lib/images/servers/BioFormatsImageServer.java#L670) - presumably `mergeChannels` contains some logic to treat 4-channel 8-bit images are ARGB. If I open the image in ImageJ and save it as a multichannel image then all 4 channels are measured, as they should be. So it's not an inherent limitation in the cell detection. If I'm correct, most other combinations of channel numbers and bit-depths should be fine... It should be a fairly straightforward fix. I'm travelling at the moment, but will have a look soon.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/164#issuecomment-380835137:335,log,logic,335,https://qupath.github.io,https://github.com/qupath/qupath/issues/164#issuecomment-380835137,1,['log'],['logic']
Testability,"Thanks, would you be able to provide any example tests for these functions?. I understand it's not great to test a lot in one function, but I wasn't sure how to do it without making the testing code enormous and much more complex - since an appropriate hierarchy needs to be built with objects + ROIs etc.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264991328:49,test,tests,49,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264991328,3,['test'],"['test', 'testing', 'tests']"
Testability,"That does sound kind of like the memory limits I have run into. Even with 90GB of RAM committed to a single slide I sometimes have to split things up a bit. I hope to test out how a newer processor handles things soon with a lower RAM cap though! Just finished building a new pc :] Depending on how fine you want your measurements to be, you might also take a look at using a classifier on SLICs. I think the command is roughly in the same menu area. I like that it gives me a little more flexibility in automatically weeding out black bits or other things I am not interested in without having to hand draw every little bit.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-297934703:167,test,test,167,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-297934703,1,['test'],['test']
Testability,"That is a very interesting read. I am indeed reading about the DE-9IM interesection matrix, thank you for the detailed reply.; Initially I was rather afraid of an inconsistent behaviour of which I really didn't understand much. I wouldn't worry about the private method, tho. I'm closing this PR. However, now it's a lot more clear but I guess the `ROI` documentation could be a little more explicit on its behaviour. Would you accept a PR that simply states that the what the code assumes as ""inside""? I know you said that _potentially_ it has a different interpretation of insideness, but perhaps having a general rule is better than nothing. Just so that you know: I was interested in testing if a point outside of a ROI's bounding box is **always** outside of the ROI itself. Where the bounding box is defined as:; ```java; new Rectangle2D.Double(roi.getBoundsX(), roi.getBoundsY(), roi.getBoundsWidth(), roi.getBoundsHeight()); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048154154:688,test,testing,688,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048154154,1,['test'],['testing']
Testability,"That sounds much easier, once integrated, than my method of downsampling the whole image to a size where I could submit it to ImageJ, greyscaling a merged image of the channels, and then sending back the annotation region! I haven't tested it yet, but can it work on multiple channels at once?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323493294:233,test,tested,233,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323493294,1,['test'],['tested']
Testability,"That usually happens when the path is broken to the image. 0.2.0 is not as.. mobile as the earlier versions. If you check ""View->show log,"" I suspect you will find an error showing that it cannot find the image. You would need to move the project or images back to the original location.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/322#issuecomment-497035914:134,log,log,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/322#issuecomment-497035914,1,['log'],['log']
Testability,"That's awesome. Thank you!. I will try to implement it with JTS, then.; However the implication is that ""Polygons do not contain their boundary"", correct? Does that mean that if I'm testing if a point `p` is inside the boundary or **on** the boundary, i should check that `JVT.Geometry.covers(p) || JVT.Geometry.intersects(p)`, right?. I'm saying this because of what the DE-9IM article says about the `contains`/`withIn` predicates; > This issue is caused by the final clause of the Contains definition above: ""at least one point of the interior of B lies in the interior of A"". For this case, the predicate Covers has more intuitive semantics (see definition), avoiding boundary considerations.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578:182,test,testing,182,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578,1,['test'],['testing']
Testability,"The appropriate classifier commands are logged when you first save it. So if you can find the image you had open at that time, you should find the commands in the workflow there. The scripts & explanations in the supplementary material [here](https://www.nature.com/articles/s41598-017-17204-5#Sec15) might also help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/272#issuecomment-469559277:40,log,logged,40,https://qupath.github.io,https://github.com/qupath/qupath/issues/272#issuecomment-469559277,1,['log'],['logged']
Testability,"The backup will only show up, I think, if you have successfully saved the; file at least once. It isn't an autosave feature. Regarding the memory, 3.3 GB is quite low. For small scale testing I; usually got away with 16GB, and for larger projects 64+. I am not sure,; but you may be able to circumvent this somewhat by running each of your 4; ROIs in turn, and saving after each. On Nov 9, 2017 9:23 AM, ""Eline8"" <notifications@github.com> wrote:. > Thank you both for answering! @Svidro <https://github.com/svidro> and; > @petebankhead <https://github.com/petebankhead>; > I started all over again, so I don't have the workflow anymore.; > Nevertheless, what I meant was that I used indeed the pointing tool. I had; > two populations, one negative and one positive. After I ran the positive; > cell detection, the negative population was gone. And unfortunately, there; > is no undo button.; >; > My goal was indeed compare the manual counting and the automated counting.; > For optimization.; >; > I don't know whether the error is the lack of RAM, I checked and i have; > 3,3GB available. And I only have 4 ROI's in one image. When I run the; > analysis, I make sure nothing is selected and choose the option 'all; > annotation'. It might be, but it might be not, because sometimes it also; > does not analyse only 1 ROI, but other times it does. However, the log it; > says 'memory error'. the programs that are running on my computer besides; > Qupaht are google chrome (1tab), one note with an excel file, and file; > explorer.; >; > [image: capture]; > <https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG>; > [image: capture2]; > <https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG>; > [image: capture3]; > <https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG>; >; > I really don't know why sometimes it works or not, but i'll be more; > careful",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343229740:184,test,testing,184,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343229740,1,['test'],['testing']
Testability,"The build now succeeds without any tests failing! With or without tensorflow as well, at https://github.com/qupath/qupath/commit/7e7e95. But when I run it (without tensorflow) it either hangs:. ```; 11:55:44.676 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (143 ms); 11:55:44.708 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (32 ms); Jun 11, 2020 11:55:44 AM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; ```. Or segfaults:. ```; 12:20:05.035 [JavaFX Application Thread] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; Unhandled exception; Type=Segmentation error vmState=0x00000000; J9Generic_Signal_Number=00000018 Signal_Number=0000000b Error_Value=00000000 Signal_Code=00000001; Handler1=00007F6CE64C99B0 Handler2=00007F6CE5DBD9F0 InaccessibleAddress=0000000000000000; RDI=00007F6CE8D56C03 RSI=0000000000000000 RAX=0000000000000000 RBX=00007F6CE8F580E0; RCX=000000000000000E RDX=0000000000000000 R8=0000000000000000 R9=0000000000000073; R10=0000000000000000 R11=0000000000000073 R12=00007F6ACBE8D7B0 R13=00007F6CE6C01340; R14=00007F6ACBE8D7B0 R15=00007F6A6C019B08; RIP=00007F6CE8D56622 GS=0000 FS=0000 RSP=00007F6ACBE8D710; EFlags=0000000000010213 CS=0033 RBP=00007F6CE877A0F2 ERR=0000000000000004; TRAPNO=000000000000000E OLDMASK=0000000000000000 CR2=0000000000000000; xmm0 61622f656d6f682f (f: 1836017664.000000, d: 1.278334e+161); xmm1 2e302d6874615075 (f: 1952534656.000000, d: 3.252889e-86); xmm2 4e203a296c6c756e (f: 1819047296.000000, d: 2.187422e+68); xmm3 642f62696c2f656d (f: 1815045504.000000, d: 3.881161e+174); xmm4 7369646572206e61 (f: 1914728064.000000, d: 8.877002e+247); xmm5 6f6d2e6362696c2f (f: 1651076096.000000, d: 5.530316e+228); xmm6 5f434c2f6e652f65 (f: 1852125056.000000, d: 7.896072e+150); xmm7 0000000000000000 (f: 0.000000, d: 0.000000e+00); xmm8 6e75007325203a73 (f: 622869120.000000, d: 1",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-642557843:35,test,tests,35,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-642557843,1,['test'],['tests']
Testability,"The classpath would be handled before reaching QuPath, so it doesn't need appear at that point in the QuPath code. Not sure what you mean with `aClasspath`; the syntax is more like this:; ```; ""C:\Program Files\QuPath\app\QuPathApp.jar"" -image ""D:\QMDownload\6\Leica-Fluorescence-1.scn"" -script ""D:\QMDownload\6\Tiling_a_whole_slide_image.groovy"" -classpath ""C:\Users\rmd\QuPath\extensions\qupath-extension-bioformats.jar;C:\Users\rmd\QuPath\extensions\bioformats_package.jar""; ```; or possibly; ```; ""C:\Program Files\QuPath\app\QuPathApp.jar"" -image ""D:\QMDownload\6\Leica_scn\Leica-Fluorescence-1.scn"" -script ""D:\QMDownload\6\Tiling_a_whole_slide_image.groovy"" -cp ""C:\Program Files\QuPath\app\*;C:\Users\rmd\QuPath\extensions\*""; ```; I'm not able to test these currently, but hopefully you can find a combination that works.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/260#issuecomment-457925207:756,test,test,756,https://qupath.github.io,https://github.com/qupath/qupath/issues/260#issuecomment-457925207,1,['test'],['test']
Testability,"The failing test is a mystery - I can confirm it works locally on my Windows (10) computer as well. Re. the temp directories, should it clean up afterwards? From [the javadocs](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/nio/file/Files.html#createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute...)). > As with the `createTempFile` methods, this method is only part of a temporary-file facility. A [shutdown-hook](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)), or the [File.deleteOnExit()](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/File.html#deleteOnExit()) mechanism may be used to delete the directory automatically.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1625#issuecomment-2339545085:12,test,test,12,https://qupath.github.io,https://github.com/qupath/qupath/pull/1625#issuecomment-2339545085,1,['test'],['test']
Testability,"The following image and script show the differences in how objects might be requested from the object hierarchy. The tests that each cell object passes contribute to the classification assigned, so that; * if two cells have the same color you can assume they were returned by the same methods; * if two cells have different colors, then at least one cell was returned by at least one method that didn't return the other cell (e.g. it intersects the selected ROI, but isn't completely covered by it). ![image](https://github.com/user-attachments/assets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:117,test,tests,117,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['test'],['tests']
Testability,"The logic is the same, I just extracted the databuffer and the sample model creation in two different functions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1327#issuecomment-1731411320:4,log,logic,4,https://qupath.github.io,https://github.com/qupath/qupath/pull/1327#issuecomment-1731411320,1,['log'],['logic']
Testability,"The method of opening the project doesn't matter. I just tested drag&drop, open dialog and recent dialog. All have the same problem. Regarding your other question, only if I add enough buttons to the source to cause the problem. For example, if I add; ```java; nodes.add(ActionTools.createToggleButton(ActionTools.createAction(() -> {; 	}, ""something"", IconFactory.createNode(QuPathGUI.TOOLBAR_ICON_SIZE, QuPathGUI.TOOLBAR_ICON_SIZE,; 	PathIcons.BRUSH_TOOL), null), true, true));; nodes.add(new Separator(Orientation.VERTICAL));; nodes.add(ActionTools.createButton(ActionTools.createAction(() -> {}, ""Convert""), false));; ```; (sorry for the formatting) to qupath-gui-fx/src/main/java/qupath/lib/gui/ToolBarComponent.java line 170 (just before `toolbar.getItems().setAll(nodes);`) it demonstrates the issue. This is simply adding one toggle button, one separator and one text button to the end (sorry, I'd forgotten about the toggle button). I have no actions on these buttons which would interfere, nor any accelerator etc.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1184#issuecomment-1352389017:57,test,tested,57,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184#issuecomment-1352389017,1,['test'],['tested']
Testability,"The pull request above contains a proposed fix. Upon reflection, I'm not sure where exactly the encoding issue arises (Java, jpackage, Wix used to create the exe, the Windows command prompt... or somewhere between them) so I haven't been able to find any clear documentation of expected behavior. I hope the suggested fix is sufficiently modest that it can fix most issues without creating new ones, but that remains to be tested. Feedback/fixes/suggestions welcome. If it looks basically ok, it will be included in v0.2.1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-645185707:423,test,tested,423,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-645185707,1,['test'],['tested']
Testability,"The safest way is probably to use Docker or something similiar. ons. 22. sep. 2021, 17:38 skrev Pete ***@***.***>:. > Ah ok, then I'm afraid I have no idea and no way to reproduce the problem.; > It is working for me on all my test systems (but I haven't got CentOS; > installed anywhere).; >; > I can't see any obvious clues to a problem within QuPath's code from the; > error. The versions of Java, JavaFX and jpackage have been updated for; > v0.3.0, not sure if that is related.; >; > One option would be to try building from source; > <https://qupath.readthedocs.io/en/stable/docs/reference/building.html>; > using a different JDK, or launch using ./gradlew run (which would skip; > the jpackage part).; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/825#issuecomment-925047351>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AH7WSL62XZNUGJTSADEHNB3UDHZ6HANCNFSM5ERSPAHA>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.; >; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/825#issuecomment-925051403:227,test,test,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/825#issuecomment-925051403,1,['test'],['test']
Testability,"The stardist extension hasn't been updated for QuPath 0.6 yet. I'd suggest one of these three options:. 1. Test stardist using QuPath 0.5.1; 2. Build the latest stardist extension from source, ideally this branch: https://github.com/qupath/qupath-extension-stardist/pull/36; 3. Use the Jar file attached below in QuPath 0.6.0-rc1. [qupath-extension-stardist-0.6.0-SNAPSHOT.zip](https://github.com/user-attachments/files/16977870/qupath-extension-stardist-0.6.0-SNAPSHOT.zip)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1635#issuecomment-2345968313:107,Test,Test,107,https://qupath.github.io,https://github.com/qupath/qupath/issues/1635#issuecomment-2345968313,1,['Test'],['Test']
Testability,"The test isn't perfect, it might fail sometimes because the JVM may not be able to release the memory in time for whatever reason. The fact that it passes most of the time is OK. So that works. However, the base load for ""internal"" memory seems to be around 640 MB, which sounds big to me, it's typically less than 100 MB, but maybe that's normal for Rosetta, not sure...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024146066:4,test,test,4,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024146066,1,['test'],['test']
Testability,"The third option listed above is now integrated, and locale information is added to `.qpdata` files. This has been done in a way that should not break compatibility with any existing saved files. Testing involved varying the locale using commands such as those below (one at a time):. ``` groovy; Locale.setDefault(Locale.UK);; Locale.setDefault(Locale.GERMAN);; Locale.setDefault(Locale.JAPAN);; Locale.setDefault(Locale.CHINA);; ```. ...and then testing whether files written with one locale could then be read using another. This appears to be working, but further insights and bug-reports relating to location-specific issues would be welcome. The fix will be included in `v0.0.5`. (Note: I could conceive of trouble with `ClassNotFoundExceptions` in the event of attempting to deserialize a `.qpdata` file where the saved `Locale` is not available... however it's not clear to me whether this could or would ever actually happen. In the even that it does, QuPath should default to not changing the locale at all - and so would still have a reasonable chance of succeeding.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/18#issuecomment-258824636:196,Test,Testing,196,https://qupath.github.io,https://github.com/qupath/qupath/issues/18#issuecomment-258824636,2,"['Test', 'test']","['Testing', 'testing']"
Testability,"There is no version with precisely the name v0.0.2-alpha. I see the error log mentions files that are not part of QuPath (e.g. `qupath.lib.GenowisAPI`), and refers indeed to 'celery_qupath_1'. Therefore it appears you are using a completely different distribution of QuPath modified by someone else and of which I know nothing. I am closing this issue because it is not related to the 'official' QuPath distribution and source code hosted here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/389#issuecomment-567871641:74,log,log,74,https://qupath.github.io,https://github.com/qupath/qupath/issues/389#issuecomment-567871641,1,['log'],['log']
Testability,"There is really not enough information here to answer, and since it does not relate to a bug https://forum.image.sc/tags/qupath would be the right place to post this question. My guess is that your images may have moved / be on an external disk that is not accessible when you try to reopen the m2 project using QuPath v0.2.0-m2. But I would need to know what error messages are displayed, and if anything appears under *View &rarr; Show log*. It is not expected that a project created using m2 will open with m8 because of large changes between milestones; specifically I recall the project structure changed from m2 to m3 (I don't remember if there were subsequent changes). There is a script to migrate old projects from m2 to m3, but use with caution (i.e. with backups) and be sure to read the description at the top if you use it: https://gist.github.com/petebankhead/8dfbaf2de91f6432b79c7678e2997d6a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/388#issuecomment-567854079:438,log,log,438,https://qupath.github.io,https://github.com/qupath/qupath/issues/388#issuecomment-567854079,1,['log'],['log']
Testability,"There should be a variety of ways to do this in a script. One would be selecting each annotation in turn using getAnnotationObjects() and looping through them. For each annotation you generate your detections, output detections, then clear detections.; Another way could be to use a loop to a classification for each annotation (Class1, Class2, etc) and then you will end up with one data file, but the detection entries would be easily separable based on the classification column.; In version 1.3, there is a column that names the parent annotation for each detection, which could also be used to select certain detections without creating a classification.; Version 1.3 installation instructions (it is a test version!) can be found here: https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/225#issuecomment-427051030:708,test,test,708,https://qupath.github.io,https://github.com/qupath/qupath/issues/225#issuecomment-427051030,1,['test'],['test']
Testability,"This appears to be working perfectly, thank you! I haven't done much testing yet either, and I will update if something goes awry.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/256#issuecomment-455695541:69,test,testing,69,https://qupath.github.io,https://github.com/qupath/qupath/issues/256#issuecomment-455695541,1,['test'],['testing']
Testability,"This happens whenever QuPath is unable to detect any cores. There are a few reasons why this may occur:. * The *Image type* is wrong (e.g. set to fluorescence rather than brightfield) - this can be seen after clicking on the *Image* tab on the left. There is a screenshot [here](https://github.com/qupath/qupath/wiki/Preprocessing#viewing-the-default-stain-vectors).; * The specified TMA core diameter is either too large or too small. QuPath determines the expected TMA grid from 'complete' cores, which have a diameter within a small tolerance of the value set in the dialog box. If no cores fall within this tolerance, the grid cannot be found.; * The intensity threshold is either too high or too low (but it is automatically determined from the data, and I don't see any reason in your image why it would be determined wrongly). If the image type is set correctly, then I would try increasing and decreasing the *TMA core diameter* to see if this gives any improvements. If not, then there may be some issue happening internally when trying to read from the CZI file - although I have not seen such a problem before. The contents of *View &rarr; Show log* may be helpful to track down the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/48#issuecomment-276482533:1156,log,log,1156,https://qupath.github.io,https://github.com/qupath/qupath/issues/48#issuecomment-276482533,1,['log'],['log']
Testability,This is huge! I should be able to try it on an Intel Mac - is there a link to any good test image?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1474#issuecomment-1971202262:87,test,test,87,https://qupath.github.io,https://github.com/qupath/qupath/pull/1474#issuecomment-1971202262,1,['test'],['test']
Testability,"This is one way to do the export:; ```groovy; import javax.imageio.ImageIO; import qupath.lib.regions.RegionRequest. // Define resolution - 1.0 means full size; double downsample = 1.0. // Create output directory inside the project; def dirOutput = buildFilePath(PROJECT_BASE_DIR, 'cores'); mkdirs(dirOutput). // Write the cores; def server = getCurrentImageData().getServer(); def path = server.getPath(); for (core in getTMACoreList()){; // Stop if Run -> Kill running script is pressed ; if (Thread.currentThread().isInterrupted()); break; // Write the image; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, core.getROI())); ImageIO.write(img, 'PNG', new File(dirOutput, core.getName() + '.png')); }; print('Done!'); ```. This won't give any existing overlay, but I assume this isn't needed. Perhaps more importantly, it can be rather slow - and the resulting files may be large (often > 50 MB per PNG in my test). Exporting to JPEG would give much smaller manageable file sizes (~2 MB).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/97#issuecomment-327534509:941,test,test,941,https://qupath.github.io,https://github.com/qupath/qupath/issues/97#issuecomment-327534509,1,['test'],['test']
Testability,This is really strange. I added a unit test for that here:; https://github.com/bytedeco/javacpp/blob/master/src/test/java/org/bytedeco/javacpp/PointerTest.java#L1154-L1177; Could you try to run that and see if it fails under Rosetta?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024114100:39,test,test,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024114100,2,['test'],['test']
Testability,"This is somewhat by design (in that the command history only logs things that are relevant to batch processing, and generally avoids GUI-related commands for showing/hiding things). Nevertheless, certainly there needs to be some way to script either the display or export of annotation measurements.... and currently there isn't. My feeling is that whenever you run *Show Annotation Measurements* this shouldn't be recorded (because it's purely a display thing, which shouldn't happen in a batch script), but if you press *Save* then the export of the annotation measurements should be recorded in the command history. What do you think? Would this do what you need, or do you think it's also necessary to be able to script showing the table as well?. In the meantime, my way to handle needing to run the same interactive command repeatedly across multiple images in a project is to open the images one at a time while keeping keep *View &rarr; Show command list* open, and turning off the *Auto close* option. It's not optimal, but at least that way there's no need to return to the menus too often. ![command_list](https://cloud.githubusercontent.com/assets/4690904/20482972/917901e2-afe7-11e6-9474-1818edb79985.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/25#issuecomment-261927806:61,log,logs,61,https://qupath.github.io,https://github.com/qupath/qupath/issues/25#issuecomment-261927806,1,['log'],['logs']
Testability,"This may well be because of the image format, or QuPath might be having trouble for some other reason (not enough memory?). If you choose *View &rarr; Show log* does anything informative appear?. It may also be beneficial to update your version of Bio-Formats, if you have not already done so. I see on the [changelog for version 5.4.0](http://www.openmicroscopy.org/site/support/bio-formats5.4/about/whats-new.html) there is a mention of improved performance of large, uncompressed CZI files. Is exporting as CZI an option?. Currently, QuPath works best for images that are small enough to handle directly, or large whole slide images stored in a tiled, pyramidal format of some kind.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/69#issuecomment-298743270:156,log,log,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/69#issuecomment-298743270,1,['log'],['log']
Testability,"This seems to be fixed in 0.5.0-rc2, although I see no mention of this in the change log. Marking as closed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1783294927:85,log,log,85,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1783294927,1,['log'],['log']
Testability,"This situation is hopefully much improved in v0.0.7. OpenSlide and OpenCV were both recompiled, and I attempted to ensure all non-standard, required dependencies are now included - with an appropriate ```rpath``` setting so that they may find one another. Most of the steps taken are documented under the ['Maven' directory](https://github.com/qupath/qupath/tree/master/maven). The Linux version 0.0.7 was created using Ubuntu 16.04 running through VirtualBox on an iMac. I also tested the compiled QuPath on a clean installation of Fedora 25, also through VirtualBox. Both were able to run QuPath, including commands depending on OpenSlide and OpenCV - although things did run a bit more smoothly on Ubuntu (e.g. the *Brush* tool misbehaved on Fedora). Additionally, the Linux version is created using [OpenJDK](http://openjdk.java.net) and [OpenJFX](http://openjdk.java.net/projects/openjfx/) - as opposed to the [Oracle JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) used for Windows and Mac.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/2#issuecomment-263157251:479,test,tested,479,https://qupath.github.io,https://github.com/qupath/qupath/issues/2#issuecomment-263157251,1,['test'],['tested']
Testability,"This update does allow the export to run as expected when saving as ""ome.tif"". It might be useful to have a check/warning prior to attempting to write a file that is too large to a basic .tif. If I attempt the same export to .tif, after a long pause I get:. `WARN: Unable to write image; ERROR: IOException at line 22: Unable to write F:\filepath\Sox2 region_0_annotationLabels.tif! No compatible writer found.`. Oddly enough, I ran into trouble with the new Telerium openjdk not recognizing `gradlew ` when trying to set that up on my new computer, but was able to build and test things out on my old one so... I will look into that later.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/984#issuecomment-1183514515:576,test,test,576,https://qupath.github.io,https://github.com/qupath/qupath/issues/984#issuecomment-1183514515,1,['test'],['test']
Testability,"Try adding; ```groovy; imp = imp.flatten(); ```; before `IJ.save`. I haven't tested it here, but 'flatten' is the ImageJ command that converts to RGB. But if you change the extension from `.tiff` to `.png` you might find that it flattens anyway.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/202#issuecomment-415419359:77,test,tested,77,https://qupath.github.io,https://github.com/qupath/qupath/issues/202#issuecomment-415419359,1,['test'],['tested']
Testability,"Under the *Image* tab does it say *OpenSlide* beside the entry *Server type*? It might be using Bio-Formats or something else. I'm curious as to whether OpenSlide is working for you at all. Also, if you have OpenSlide installed some other way (e.g. with Python), can it read the file?. I know there can also be trouble if there are any non-English characters in the path to the file, but it doesn't look like the case from the log.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371780923:427,log,log,427,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371780923,1,['log'],['log']
Testability,"Upon closer inspection, the solution to this is partly in the code but also partly broken. Specifically around [line 698](https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/projects/DefaultProject.java#L698) an `IOException` is expected, but this isn't always what is thrown - @yau-lim's post [here](https://forum.image.sc/t/hierarchy-is-null-cannot-invoke-can-anyone-help/78488/10) shows that a NPE can be thrown instead. So if we make sure that any NPE that occurs when reading is properly wrapped in an `IOException`, then QuPath should automatically switch to use the backup file and log a warning.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1252#issuecomment-1468000707:617,log,log,617,https://qupath.github.io,https://github.com/qupath/qupath/issues/1252#issuecomment-1468000707,1,['log'],['log']
Testability,Using only the smoothed featurs for the classifier I do see now that the classifier works:. INFO: Number of reclassified objects: 40 of 4375; INFO: Stroma: 138; INFO: Tumor: 165; INFO: 303 objects available for classifier training from 1 images; INFO: Classifier already trained with the same samples - existing classifier will be used; INFO: Classifier training time: 0.01 seconds; INFO: Main classifier unchanged...; INFO: Classification time: 0.00 seconds; INFO: Percentage of correctly classified objects in TRAINING set: 100.00% (n=303); WARN: It is *strongly* advised not to report accuracies based on testing using the training set!; INFO: Confusion matrix; 	Stroma	 Tumor; Stroma	 138	 0; Tumor	 0	 165. But still it doesn't apply this to the rest of the picture. Sanne,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418648914:608,test,testing,608,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418648914,1,['test'],['testing']
Testability,"WOW!; Thanks for the great answer!; Unfortunately I am not currently at home; I was only able to test it on my notebook, which sometimes crashes.; Still, thanks to You I got a very good result:; https://i.imgur.com/3eaQ7s1.jpg; All the positive areas are detected and the % of positive staining in selected area is also calculated (the main idea is to show that the expression of positive staining changes depending on the cancers grade).; I will only be able to take an adequate try in a couple of days.; Anyway, I am very grateful!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-373134413:97,test,test,97,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-373134413,1,['test'],['test']
Testability,"We do not have any more problems of this type, but still have other conversion problems. I will open new issues for these and provide test cases. Thanks a lot @petebankhead",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/429#issuecomment-610165162:134,test,test,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/429#issuecomment-610165162,1,['test'],['test']
Testability,"We'd need more information to be able to help, including:. * what errors do you see under *View -> Show log*?; * how precisely did the abnormal shutdown occur?; * can you give precise steps to replicate the issue?; * do the other images in the project work?. QuPath tries to offer the user some protection by creating a backup data file while writing the new one, in case this does not succeed - see https://github.com/qupath/qupath/blob/85700bbb026e1e72425e266ee3105b2f39c4f4fd/qupath-core/src/main/java/qupath/lib/projects/DefaultProject.java#L730-L779. Therefore I think that this bug report is not correct in general (i.e. any abnormal termination will cause data to be lost) - rather, the specific steps are essential to understand the problem. Note that you can right-click on the image under the 'Project' tab and go to the directory that contains the problematic `.qpdata` file. If your see a file ended with `.bkp` you could try renaming it to replace the corrupt/incomplete `.qpdata` and see if that restores the last saved data for you.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-639525487:104,log,log,104,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-639525487,1,['log'],['log']
Testability,"Well I do rename my test directory from PDA_SHOWCASE to PDA_SHOWCASE2, without changing anything, I get this:; ![image](https://user-images.githubusercontent.com/18205832/62475608-a52a2400-b7a5-11e9-89e6-bde75f930c43.png). As I see there is no replacement suggestion. Is this possibly linked with being on a Linux based system?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518279991:20,test,test,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518279991,1,['test'],['test']
Testability,"Well, as promised; I had an opportunity to test Your script on a bigger amount of glasses.; It seems that everything is fine; I will now start a new project with a new staining, probably ~100 glasses, with analytics fully based on QuPath; Still need to understand, how to analyse stroma in H&E staining :); But anyway, I am really grateful for Your advice. If ill be able to publish my results, I will let You know!; I`ll close this topic as the solution was found.; UPD not closing yet, let it be a couple of days :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374020816:43,test,test,43,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374020816,1,['test'],['test']
Testability,"Well, with the current way of sorting, I wasn't expect more than one-level sorting (i.e. sort by tag1, or tag2).; Ideally, it would be great to sort by more than one tag (i.e. sort by tag1 and tag2, like the way it is done in OMERO => multiple levels). This logic could also be mimic for metadata by having multiple nested expend trees. ![qptags](https://github.com/qupath/qupath/assets/64911638/89702ef5-d6fa-43eb-8216-e6e14fbb7b82). I think both metadata and tag could follow the same sorting logic. The key(s) / tag(s) used to sort the images could be written in the project tab, like in this example. ![qptags_sorting_logic](https://github.com/qupath/qupath/assets/64911638/3ed30659-760f-4e5e-b920-73bf806d386f). Also, having a default option to sort by image name would be nice :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1289#issuecomment-1687972577:258,log,logic,258,https://qupath.github.io,https://github.com/qupath/qupath/issues/1289#issuecomment-1687972577,2,['log'],['logic']
Testability,"What is the file format? Is there any information under *View &rarr; Show log*?. My guess is .mrxs, with some kind of compression that OpenSlide is missing on Windows. But that is entirely a guess :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/891#issuecomment-1016529189:74,log,log,74,https://qupath.github.io,https://github.com/qupath/qupath/issues/891#issuecomment-1016529189,1,['log'],['log']
Testability,"Which version of QuPath are you using? In recent milestones there is a [memory monitor command that can be used to clear the cache directly](https://petebankhead.github.io/qupath/2019/11/02/fifth-milestone.html#memory-monitor--show-input). In general, QuPath retains image tiles cached in memory until that cache is full, after which they are deleted. It does *not* empty the cache when an image is closed, because it's quite possible the same image might be reopened later - and in general it isn't needed to do so. This behavior is intentional. In v0.2.0-m8 you can adjust the proportion of memory given to this tile cache under *Edit &rarr; Preferences...*. One potential explanation is that QuPath generally stores some pieces of information (e.g. a thumbnail) about previously-opened files outside the normal tile cache, and these might not be cleared - but usually they are very small and so don't cause a problem. But I have seen rare instances were .czi files read by Bio-Formats have huge memory requirements. To check this, can you look to see the file size for one of the `.bfmemo` files created by Bio-Formats? There are paths shown in the log message you give. Usually each file should be just a few MB in size.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576002136:1152,log,log,1152,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576002136,1,['log'],['log']
Testability,"Working like a charm now! ; Just for the sake of completeness. Openslide still reports some ""Errors"":; ERROR: Openslide: Property not available: openslide.level[0].tile-width; ERROR: Openslide: Property not available: openslide.level[0].tile-height. But they are the same across all versions of QuPath I've tested and don't hinder ; image analysis on MRXS slides. Thank again for fixing this issue so fast! ; Have a great day,; Mario",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265674934:307,test,tested,307,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265674934,1,['test'],['tested']
Testability,"Would it be possible to allow all 3 stain vectors in Brightfield Other regardless of what they are named? Occasionally I have wanted to detect Hematoxylin within more complex samples as well, though I can get away with renaming it Htx. The logic isn't listed anywhere other than the code, so anyone else trying to get Hematoxylin subcellular detections in a 3-4 color brightfield image could struggle. Also, I _think_ black was actually the residual channel (there was a large amount of silver stain in the image), I renamed it thinking that I might get around ignoring the residual channel that way. If the program can somehow tell that was the residual channel without the name Residual or being in the 3rd position, that might have been it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/304#issuecomment-518018293:240,log,logic,240,https://qupath.github.io,https://github.com/qupath/qupath/issues/304#issuecomment-518018293,1,['log'],['logic']
Testability,"Would need a bit more information on what you tried, or a copy of the file hosted somewhere to test. There are a few other posts you could search through about scn files as well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/273#issuecomment-469974740:95,test,test,95,https://qupath.github.io,https://github.com/qupath/qupath/issues/273#issuecomment-469974740,1,['test'],['test']
Testability,"Yea, that's from recentering the tiles. If you comment out the portion of the code that centers the tiles then I get the behavior that I wanted for my extension.; ```; // Center the tiles; // xMin = (int)(bounds.getCenterX() - (nx * w * .5));; // yMin = (int)(bounds.getCenterY() - (ny * h * .5));; ```; For a byRow image:; ![row no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441453-7fbba950-4a83-4dd9-96c9-d6b83237a966.png). For a byColumn image:; ![column no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441429-ec886abf-4068-4b9f-ab74-939bd5fd4513.png). Also, prepared geometries code (line 695 of RoiTools) will not be executed unless the geometry has > 1000 points, so you will not be able to easily test this for a parentROI that is a rectangle. From the images above, you can see that I have made some very large complex annotations using the SimpleThresholder and I was encountering this problem when tiling those annotations. The original fix is mainly to adjust the behavior of the code so that it actually is using the prepared geometries that are calculated. If you step through the code with a debugger, you can see that the rowParents or columnParents are not indexed by y or x but by yi and xi, so the geometries are never retrieved from these maps. And the columnParents geometries are sometimes not correct because the envelope for intersection did not go across the entire column. The final result depends on if you want the tiled objects to be centered or not within the parent annotation. Perhaps you could fix it by adding an additional ""center tiles"" argument for the places that need tiling, but I'm sure this would break a lot of things. I do not have the time to fill out a bug report now, but just wanted to let you know about this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929:792,test,test,792,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929,1,['test'],['test']
Testability,"Yeah, I don't think it's possible without boxing - and better to avoid that. Although since they aren't identical, could you add a corresponding test for the doubles function?. It would also be good to extend the test to handle different channels... One a good way to do that is to create an RGB `BufferedImage` and then draw onto it with `Graphics2D`, after setting the foreground color to be `Color.GREEN` (for example). Similar code is at https://github.com/qupath/qupath/blob/67a1ed7ead8e28c54d120b21d08b7d41562eb8c3/qupath-core/src/test/java/qupath/lib/awt/common/TestBufferedImageTools.java#L176 but the type should be `BufferedImage.TYPE_INT_ARGB`. Sorry to keep adding more, but I think the code is looking good - and it'll be nice to have it more well-tested than many other methods.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385:145,test,test,145,https://qupath.github.io,https://github.com/qupath/qupath/pull/1319#issuecomment-1711869385,5,"['Test', 'test']","['TestBufferedImageTools', 'test', 'tested']"
Testability,"Yes I understand the logic behing it and I think @petebankhead's logic is sound. intensty sum means little when the cytoplam and cells are not ""real"" structures but geometrical constructs. And thanks @MichaelSNelson. I ended up using the mean intensity measurement to get what I needed and your explanation was very welcome!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1454#issuecomment-1911731601:21,log,logic,21,https://qupath.github.io,https://github.com/qupath/qupath/issues/1454#issuecomment-1911731601,2,['log'],['logic']
Testability,Yes it is Version v0.1.2. ; I try to get the Log information. It is not my own computer.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-391972148:45,Log,Log,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-391972148,1,['Log'],['Log']
Testability,"Yes, QuPath originally used Java `Shape` for some of the more complex operations (especially Java's `Area` class). Now much of that logic has been replaced by Java Topology Suite, which potentially has a different interpretation of insideness - so there could be an inconsistency if you have a `RectangleROI` vs. a `PolygonROI` or `GeometryROI` that happens to also represent a rectangle. Although from a quick check, it looks like the behavior does seem to generally be consistent:; ```groovy; def roi = ROIs.createRectangleROI(0,0,1,1, ImagePlane.getDefaultPlane()); println roi.contains(1, 1). def polygon = ROIs.createPolygonROI(roi.getAllPoints(), roi.getImagePlane()); println polygon.contains(1, 1). def geometry = GeometryTools.geometryToROI(roi.getGeometry(), roi.getImagePlane()); println geometry.contains(1, 1) // Because it actually returns a RectangleROI, not a GeometryROI; ```; I see `false` in all cases there, which fits with my attempts to preserve the same behavior with updating the ROIs to use JTS. But I see `true` with; ```groovy; def geometry2 = new qupath.lib.roi.GeometryROI(roi.getGeometry(), roi.getImagePlane()); println geometry2.contains(1, 1); ```; because it's using JTS logic entirely. However, that is actually calling a package private method - shouldn't happen in normal use, because usually you'd rely upon `GeometryTools.geometryToROI()` and this returns a `RectangleROI` where possible.. I'm a bit apprehensive about changing the behavior, since it has been preserved across versions and is consistent with at least *some* definition of 'contains'. If you meed something more rigorously defined, you should use `roi.getGeometry()` and then you can use the methods of [`Geometry`](https://locationtech.github.io/jts/javadoc/) and the full [DE-9IM Intersection Matrix](https://en.wikipedia.org/wiki/DE-9IM).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048093170:132,log,logic,132,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048093170,2,['log'],['logic']
Testability,"Yes, it does cause a problem for me, but I have a feeling your response is going to be ""stop abusing the alignment function""... I'm trying to align images of the same slide taken with 2 different imaging modalities and with different resolutions. One is a normal slide scanner image with typical metadata; one is from an imaging mass spectrometer that gives an odd format that I convert to a png. I'm writing a script to do annotation-based alignment between the two images and I'm largely just copying and slightly modifying the source code from the ImageAlignmentPane. (I'm still working on the math to deal with the scaling issues, but I think/hope I can solve that). This converts the annotations to LabeledImages, and then downsamples the labeled images and aligns them. But, at the step where it's trying to downsample the images, it calls `getAveragedPixelSizeMicrons()` and gets a NaN. From there it just guesses at a reasonable downsample value, guesses incorrectly, and then fails to align because the ""result did not converge"". . This is likely to be an issue any time people are aligning images with missing or incorrect metadata, even through the interactive alignment pane. Also, I just tested this, and if you export a labeled .tiff using `writeImage` calling a `LabeledImageServer`, it writes the metadata of that tiff incorrectly (when doing this on a normal calibrated image, the correct pixel size is written). . In my case, I have a slightly scary work around. I can just code directly in my script that pixelSize=50 and hope that I remember to change that if I ever want to use this script in another project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/591#issuecomment-673132914:1201,test,tested,1201,https://qupath.github.io,https://github.com/qupath/qupath/issues/591#issuecomment-673132914,1,['test'],['tested']
Testability,"Yes, that may be necessary. Until now it has not been an issue, but I recently updated `build.gradle` on the dev branch to optionally include all modules to make this easier:; ```; ./gradlew clean build test createPackage -PjreModules=all; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436#issuecomment-613250191:203,test,test,203,https://qupath.github.io,https://github.com/qupath/qupath/issues/436#issuecomment-613250191,1,['test'],['test']
Testability,"Yes, under the View → Zoom... → Zoom in/out is where I encountered the reverse behavior.; I am working on a Mac. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:56 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). I understand the issue is with the specific commands under View → Zoom... → Zoom in/out (I've tested only on a Mac, but assume the unexpected behavior is common across platforms - it was also weird in m10, but not v0.1.2... I didn't check any others). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640781128&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=2kWkyYCdApiRUWM942pRiwOnNoXy8SWGjV0e%2FyE0DuE%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNE5SPRUYX7RMNYZKOFTRVUQ5LANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7C96af0114123c4ccd238f08d80bd54a7d%7C78a0681ef0be47e280498616858818a5%7C0%7C0%7C637272357990082394&sdata=pU%2BYSYbllDKbPfdTG%2FD921yLOmUpYsg0rDDoywDA3bE%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640783525:525,test,tested,525,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640783525,1,['test'],['tested']
Testability,"Yes. I'm just testing it and no combination of buttons (that I've tested: q, x, Esc, Ctr+x, Ctrl+w, Ctrl+q) seem to make it close. Being a ""real"" modal window, I can't click on anything back in the app. (I say ""real modal"", because the welcome window doesn't capture the action, and you can keep clicking back in the app, so that isn't so critical for me)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-507208870:14,test,testing,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-507208870,2,['test'],"['tested', 'testing']"
Testability,You can try these. Just download and unzip. https://openslide.cs.cmu.edu/download/openslide-testdata/DICOM/,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1397#issuecomment-1772871935:92,test,testdata,92,https://qupath.github.io,https://github.com/qupath/qupath/issues/1397#issuecomment-1772871935,1,['test'],['testdata']
Testability,"You're right pixel-snapping will only impact the ROIs drawn manually. Apart from that I don't think there's an easy solution, because the underlying problem concerns self-intersections in the shapes that may be very subtle/due to excessive precision. Rounding the vertices alone isn't certain to help, and may make the situation worse (e.g. by introducing *new* self-intersections) - any rounding will likely need to be done very cautiously. The solution/workaround will likely involve trying to add even more logic into QuPath to try to capture and fix these problems internally as early as possible, but that will likely require gathering more information here about when they can occur - ideally with reproducible examples.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/401#issuecomment-587112781:510,log,logic,510,https://qupath.github.io,https://github.com/qupath/qupath/issues/401#issuecomment-587112781,1,['log'],['logic']
Testability,[Final_1-100_H211_HD_20x_19.log](https://github.com/qupath/qupath/files/1722146/Final_1-100_H211_HD_20x_19.log). I changed the .qudata into .log. ; Was that right?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/147#issuecomment-365446924:28,log,log,28,https://qupath.github.io,https://github.com/qupath/qupath/issues/147#issuecomment-365446924,3,['log'],['log']
Testability,"[OD](https://en.wikipedia.org/wiki/Absorbance) is usually used for brightfield images while intensity is used for fluorescence images due to the way the light is measured (how much passes through your sample versus how much is emitted). Sums and averages are exactly that based on all pixels, though usually applied to the detection area in question (a single SLIC, a single cell, or a single nucleus, etc). If you had a 2 pixel detection of 1 OD and 0.5 OD, it would have a OD sum of 1.5 and an average of 0.75. The distance value after the measurements using add intensity features determines how finely the features are calculated. Smaller values tend to take longer but be more accurate, and I almost always use my pixel size (height or width) for any _Add intensity features._. Smoothing, as far as I can tell, is a straight radius for inclusion, calculated from the centroid of the detection object to the centroid of all other detection objects. I tested this using the scale bar at 20um and two cells that were about 22um apart (center to center), and gradually expanded the radius until the smoothed features became a mix of the two (Nearby detection counts for each became 1). The radius is a hard limit, while the smoothing is applied over a FWHM gradient as mentioned in Pete's link. In that example, if the two cells were 22um apart and I performed a 22um smoothing, they would have less of an impact on each other's ""smoothed"" values than if they were only 5um apart. A cell with a centroid at 23um away would have 0 impact on another cell's measurements, while a cell that was 22um away would have about half of the impact of a cell that was almost right on top of the original cell. Every cell's smoothed features are calculated independently, imagine drawing a quick circle around each cell and calculating the smoothed features based on what centroids are inside that circle.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-404545796:955,test,tested,955,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-404545796,1,['test'],['tested']
Testability,[hs_err_pid159313.log](https://github.com/qupath/qupath/files/1377702/hs_err_pid159313.log),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/109#issuecomment-335994491:18,log,log,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/109#issuecomment-335994491,2,['log'],['log']
Testability,"` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel, boolean isRGB, ColorModel colorModel)` function to `ReaderPool`?. > Associated images can sometimes be very big - even pyramidal or with multiple channels. So the logic for reading them doesn't have to be fundamentally different to the logic fo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:3055,log,logical,3055,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['log'],['logical']
Testability,"```; def roiOutput3 = RoiTools.subtract(roi1, RoiTools.union(roi2, roi3, roi4)); ```; makes sense to me by building/layering functions together logically but from your other suggestions, maybe. ```; public static ROI subtract(ROI baseROI, Collection<ROI> roisToSubtract) {; // Loop through one or more roisToSubtract, and remove them from baseROI; }; ```; will make it clear/less ambiguous to which ROIs are being subtracted from the baseROI, e.g.; ```; def roiOutput = RoiTools.subtract(baseROI, [roi1, roi2, roi3, ...]); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/995#issuecomment-1167534365:144,log,logically,144,https://qupath.github.io,https://github.com/qupath/qupath/issues/995#issuecomment-1167534365,1,['log'],['logically']
Testability,"ading... and it was documented all along in the JEP wiki at; > https://github.com/mrj0/jep/wiki/Linux#ld_preload; >; > The way I got it to work was by copying the file identified by; >; > which jep; >; > into the base QuPath directory (which contains the launcher) and then; > modifying it. You can see more about the original contents of this file; > here <https://github.com/mrj0/jep/blob/master/src/scripts/jep>.; >; > The end result is that I launched QuPath with the following:; >; > #!/bin/sh; >; > VIRTUAL_ENV=export VIRTUAL_ENV; >; > LD_LIBRARY_PATH=""/usr/lib:/usr/local/lib/python2.7/dist-packages/""; export LD_LIBRARY_PATH; > LD_PRELOAD=""/usr/lib/x86_64-linux-gnu/libpython2.7.so""; export LD_PRELOAD; > if test ""x$VIRTUAL_ENV"" != ""x""; then; > PATH=""$VIRTUAL_ENV/bin:$PATH""; > export PATH; > PYTHONHOME=""$VIRTUAL_ENV""; > export PYTHONHOMEfi; >; > cp=""/usr/local/lib/python2.7/dist-packages/jep/jep-3.6.1.jar""if test ""x$CLASSPATH"" != ""x""; then; > cp=""$cp"":""$CLASSPATH""fi; >; > jni_path=""/usr/local/lib/python2.7/dist-packages/jep""; >; > DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""; > exec java -Xmx4G -classpath ""$cp:${DIR}/app/QuPathApp.jar"" -Djava.library.path=""$jni_path:${DIR}:${DIR}/app"" qupath.QuPath; >; > After doing this, the Groovy script for testing JEP worked without; > problems.; >; > One thing in particular to note is the use of -Xmx4G to set the maximum; > memory to 4GB on my (virtual) machine... it would be good to modify this as; > required, as the built-in method is modifying the maximum memory within; > QuPath won't work when it's launched in this way.; >; > I've only tested this in Ubuntu, but hopefully it works for you too.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/27#issuecomment-264693922>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/APkEati9u5U4I6W4lEmcAFz8NqYSzkVOks5rEot6gaJpZM4K7UrB>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264698049:1668,test,testing,1668,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264698049,2,['test'],"['tested', 'testing']"
Testability,"after completing the cell detection and classification. I opened one of the qptma file using notepad. I did not see any measurements or survival data in the file content - however the TMA Data Viewer was able to populate all the columns including measurements. Where is the data being pulled from ? what kind of magic is this. I may also have discovered additional bug(s):. 1. I am seeing columnImage is null error in the log at loading - everything seem to work regardless. The same error is thrown everytime I toggle ""Group by ID"" as well.; ```; ERROR: QuPath exception: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; at qupath.lib.gui.tma.TMASummaryViewer.lambda$refreshTableData$66(TMASummaryViewer.java:1463); ```; 2. In the log I also noticed ```WARN: Unable to find censored column - survival data will be uncensored``` - not sure why ? ; ```; INFO: Update check for https://github.com/qupath/qupath; WARN: You need to enable the startup script in the Preferences if you want to run it; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: Predicate set to: null; INFO: Parsed 84 from HS-1_Scan1.ome.tif.qptma (84 total); INFO: Parsed 84 from HS-2_Scan1.ome.tif.qptma (168 total); INFO: Parsed 84 from HS-3_Scan1.ome.tif.qptma (252 total); INFO: Parsed 84 from HS-4_Scan1.ome.tif.qptma (336 total); INFO: Parsed 84 from HS-5_Scan1.ome.tif.qptma (420 total); INFO: Parsed 84 from HS-6_Scan1.ome.tif.qptma (504 total); WARN: Unable to find censored column - survival data will be uncensored; INFO: Survival column: Overall survival, Censored column: OS censored; INFO: Survival column: Overall survival, Censored column: OS censored; INFO: No p-values < 0.05; INFO: Smoothing log-rank test p-values by 1; INFO: Longest stretch of",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901:1355,log,log,1355,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901,1,['log'],['log']
Testability,as a workaround for 0.2.0-m2: try to replace app/libopenslide-0.dll with the appropriate libopenslide-0.dll file from https://github.com/Markus-PP/openslide-vmic. I have tested with my .vmic files and it seems to work,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/151#issuecomment-495996483:170,test,tested,170,https://qupath.github.io,https://github.com/qupath/qupath/issues/151#issuecomment-495996483,1,['test'],['tested']
Testability,"ask :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble. > Task :qupath-core:compileTestJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: /home/gordon/src/qupath/qupath-core/src/test/java/qupath/lib/io/TypeAdaptersCVTest.java uses unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core:processTestResources; > Task :qupath-core:testClasses. > Task :qupath-core:test FAILED. TypeAdaptersCVTest > testGetOpenCVTypeAdaptorFactory() FAILED; java.lang.ExceptionInInitializerError at TypeAdaptersCVTest.java:32; Caused by: java.lang.NullPointerException at TypeAdaptersCVTest.java:32. TypeAdaptersCVTest > testGetTypeAdaptor() FAILED; java.lang.NoClassDefFoundError at TypeAdaptersCVTest.java:99. 42 tests completed, 2 failed. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':qupath-core:test'.; > There were failing tests. See the report at: file:///home/gordon/src/qupath/qupath-core/build/reports/tests/test/index.html. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.; Use '--warning-mode all' to show the individual deprecation warnings.; See https://docs.gradle.org/6.4/userguide/command_line_interface.html#sec:command_line_warnings. BUILD FAILED in 8s; 59 actionable tasks: 58 executed, 1 up-to-date; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5985,test,testGetTypeAdaptor,5985,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,7,"['log', 'test']","['log', 'test', 'testGetTypeAdaptor', 'tests']"
Testability,"ation, if you have time to test it, I've also added the side-to-side wheel clicks (or shift + normal mousewheel scrolling). I've spent some time trying to understand how [Mouse Events](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/MouseEvent.html) are handled in JavaFX and I *think* I managed to sort out the issues I was initially having: Behaviour when dragging with middle button pressed, fast clicks, when to consume events or not, debouncing... Incidentally, the debouncing code is not strictly necessary, but it was an interesting exercise in working with a broken mouse. Also, I *think* `MouseEvent.MOUSE_RELEASED` should be added to the [list of ignored events here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1039) as without, I had to deal with the (middle) button release event multiple times as part of the events generated by JavaFX in the course of pressing a mouse button. Finally, I've also UX tested the behaviours we discussed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) and reproduced in the first comment. For now,; * Windows,; * with my ""fancy"" mouse; * with the shift+scrollwheel substitute for side-to-side scrolling; * my Lenovo T460 touchpad; * with scroll touch gestures enabled or disabled; * with inverted mouse enabled or disabled; * with ctrl to modify opacity; ; I couldn't use ""Zoom"" or ""Rotate"" touch gestures, because I don't think my very basic touchpad understands them, so I couldn't see any effects on QuPath. Panning does work as expected (with my very last commit). ~~**todo** I will edit my comment when I test a Linux build on my old powerbook with Mint, which (maybe) will let me use more touch gestures.~~ I haven't been able to use touch gestures with QuPath in my Cinnamon desktop environment so far, but with a mouse, my code behaves in Mint/Ubuntu the way it does on Windows. For now, my code ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123:1243,test,tested,1243,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123,1,['test'],['tested']
Testability,"ava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; java.base@16.0.2 (43 bytes) @ 0x00007f593b0f1dc4 [0x00007f593b0f1a80+0x0000000000000344]; J 939 c1 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@16.0.2 (16 bytes) @ 0x00007f593b150c8c [0x00007f593b150bc0+0x00000000000000cc]; J 739 c1 jdk.internal.loader.BuiltinClassLoader.defineClass(Ljava/lang/String;Ljdk/internal/loader/Resource;)Ljava/lang/Class; java.base@16.0.2 (121 bytes) @ 0x00007f593b0e9acc [0x00007f593b0e8c20+0x0000000000000eac]; J 653 c1 jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (64 bytes) @ 0x00007f593b0be434 [0x00007f593b0bd460+0x0000000000000fd4]; J 3884 c1 jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (143 bytes) @ 0x00007f593b6e8024 [0x00007f593b6e71c0+0x0000000000000e64]; J 632 c1 jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class; java.base@16.0.2 (40 bytes) @ 0x00007f593b0b206c [0x00007f593b0b1a60+0x000000000000060c]; J 631 c1 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@16.0.2 (7 bytes) @ 0x00007f593b0b1134 [0x00007f593b0b1040+0x00000000000000f4]; v ~StubRoutines::call_stub; j qupath.lib.images.servers.bioformats.BioFormatsImageServer$ReaderPool.openImage(Lqupath/lib/images/servers/TileRequest;IIZLjava/awt/image/ColorModel;)Ljava/awt/image/BufferedImage;+249; j qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(Lqupath/lib/images/servers/TileRequest;)Ljava/awt/image/BufferedImage;+21; ```; This makes it look like something has gone wrong deeper in the bowels of Java, and I don't see how to resolve it from the QuPath side. I'm reluctant to return to the v0.3.0 method of parallelisation, since it had other (more frequent) problems https://github.com/qupath/qupath/issues/865",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302:2608,Stub,StubRoutines,2608,https://qupath.github.io,https://github.com/qupath/qupath/issues/932#issuecomment-1057931302,1,['Stub'],['StubRoutines']
Testability,"cend from the 'base' POM, which specifies that the compiler should be compatible with [Java 8 here](https://github.com/qupath/qupath/blob/v0.1.2/pom.xml#L176). I believe this should then be inherited across the project.; * slf4j-api is a dependency of logback-classic. This is specified in the base POM, and so Maven should still take care of slf4j even if it isn't mentioned directly. I don't know why anything involving javax.script would be troublesome.; * The jar files alone required for QuPath are reasonably small, but the JRE is required for running it. The JavaFX packager can be used to put them all together in one (larger) installer, but if you already have a compatible JRE installed then you shouldn't need this.; * OpenSlide and OpenCV require native libraries... which opens a new area of effort for configuring everything properly. I suspect this final point is critical for the 'opening only thumbnails' issue. When opening a new image from a given path, QuPath will test all potential file readers it has access to and check if they can handle the path. If you are only getting the thumbnails, then this implies that the OpenSlide check doesn't pass - which, because OpenSlide *can* certainly handle .svs, suggests that the OpenSlide native libraries are not properly accessible to QuPath, even if the jar is there. When QuPath shows 'ImageJ' as the reader, it does mean just this; ImageJ1 is being used, which can handle a range of small (non-whole-slide) images only, with a combination of its own TIFF reader and Java's ImageIO. It can also sometimes extract the thumbnail from a whole slide image, but only that. If you want to use Bio-Formats you can, but need to download and add it separately - see https://github.com/qupath/qupath-bioformats-extension. If you do install the Bio-Formats extension, then that postpones the immediate need to solve the problem of accessing native libraries; at least, you should be able to open the formats supported by Bio-Formats so long as",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/84#issuecomment-317351735:1497,test,test,1497,https://qupath.github.io,https://github.com/qupath/qupath/issues/84#issuecomment-317351735,1,['test'],['test']
Testability,"cluded by default); - ImageJ (included by default); - Bio-Formats (if it's installed). The _Server type_ entry in the table that appears under the _Image_ tab on the right of QuPath shows you which reader was used for whichever image is currently open - in the screenshot below, OpenSlide was used. ![mirax](https://cloud.githubusercontent.com/assets/4690904/19970686/a81eaf8a-a1d4-11e6-810e-491db8fb6612.jpg). Unfortunately, to the best of my knowledge Bio-Formats cannot handle MIRAX files - there is some information [here](http://blog.openmicroscopy.org/file-formats/community/2016/01/06/format-support/). Bio-Formats also cannot handle CZI files with JPEG-XR compression (which seems to be the default for whole slide scanners) - although the good news is that [this is being worked on](https://www.openmicroscopy.org/community/viewtopic.php?f=13&t=8138). OpenSlide also cannot handle CZI files (possibly for [license reasons](https://github.com/openslide/openslide/issues/144)), although this is discussed on the mailing list sometimes. However, OpenSlide should be able to handle [MIRAX](http://openslide.org/formats/mirax/) (at least 2D RGB images), and I've tried QuPath successfully with several MIRAX files that I [downloaded from the OpenSlide website](http://openslide.cs.cmu.edu/download/openslide-testdata/Mirax/). From the examples I've seen, the MIRAX images consist of two parts: a `*.mrxs` file and a separate directory containing a lot of other data files. These need to:; - have the same name (except the `*.mrxs` extension); - be located side-by-side in the same folder; - not be inside a compressed folder (e.g. a zipped folder). If any of these aren't true, then only the coarsest resolution will open. Could you check the files you have and see if any of these could explain the issue, or perhaps compare with the OpenSlide examples to see where any difference lies? I'm also happy to have a look here, if you can somehow transfer one of your images to me. Best wishes,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-258165973:1794,test,testdata,1794,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-258165973,1,['test'],['testdata']
Testability,"cript-editor:classes; > Task :qupath-extension-script-editor:jar; > Task :qupath-extension-svg:processResources; > Task :qupath-extension-svg:classes; > Task :qupath-extension-svg:jar; > Task :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble. > Task :qupath-core:compileTestJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: /home/gordon/src/qupath/qupath-core/src/test/java/qupath/lib/io/TypeAdaptersCVTest.java uses unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core:processTestResources; > Task :qupath-core:testClasses. > Task :qupath-core:test FAILED. TypeAdaptersCVTest > testGetOpenCVTypeAdaptorFactory() FAILED; java.lang.ExceptionInInitializerError at TypeAdaptersCVTest.java:32; Caused by: java.lang.NullPointerException at TypeAdaptersCVTest.java:32. TypeAdaptersCVTest > testGetTypeAdaptor() FAILED; java.lang.NoClassDefFoundError at TypeAdaptersCVTest.java:99. 42 tests completed, 2 failed. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':qupath-core:test'.; > There were failing tests. See the report at: file:///home/gordon/src/qupath/qupath-core/build/reports/tests/test/index.html. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.; Use '--warning-mode all' to show the individual depr",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5713,test,testClasses,5713,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['test'],['testClasses']
Testability,"cs.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1690.3.3); 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 1228.0.0); 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText (compatibility version 1.0.0, current version 1.0.0); 	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0); ```; and notably `/usr/local/opt/gettext/lib/libintl.8.dylib` stops him from using it on an x86-64 machine, though this doesn't seem to be a problem on CI machines. ## Linux. The below is out dated; when dynamically linking `glib`, our binaries are fine. > While it's easy enough to get a SO of openslide with minimal dependencies (`libpcre2-8` stubbornly remains dynamically > linked), issues arise when trying to load this alongside JavaFX. Specifically, we get a glib warning followed by an error:; > ```; > (java:71634): GLib-GObject-WARNING **: 14:32:40.458: cannot register existing type 'gchar'; > **; > GLib-GObject:ERROR:../../../meson/subprojects/glib-2.72.0/gobject/gvaluetypes.c:454:_g_value_types_init: assertion failed: (type == G_TYPE_CHAR); > ```; > This is less urgent, as we can just distribute QuPath as `deb`/`rpm` packages, and specify `openslide-tools` as a dependency, as we will no longer depend on `openslide-java`. ## Plan for 0.5.0 release. - Windows will use a JAR of the OpenSlide builds, which we can extract to temp files and then load.; - Linux releases will depend on `openslide-tools`; if this is installed, then `libopenslide.so` should be on the search path.; - Mac builds will require homebrew (or similar) installs of `openslide`. However, if we could resolve the issues with the mac and Linux binaries, then it'd be great to use the same (or at least similar) processes on all platforms. Would appreciate any feedback/advice from @bgilbert and @jcupitt on the best way forward, or if yous have run into some of these issues before.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:5990,assert,assertion,5990,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['assert'],['assertion']
Testability,"editor:jar; > Task :qupath-extension-svg:processResources; > Task :qupath-extension-svg:classes; > Task :qupath-extension-svg:jar; > Task :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble. > Task :qupath-core:compileTestJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: /home/gordon/src/qupath/qupath-core/src/test/java/qupath/lib/io/TypeAdaptersCVTest.java uses unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core:processTestResources; > Task :qupath-core:testClasses. > Task :qupath-core:test FAILED. TypeAdaptersCVTest > testGetOpenCVTypeAdaptorFactory() FAILED; java.lang.ExceptionInInitializerError at TypeAdaptersCVTest.java:32; Caused by: java.lang.NullPointerException at TypeAdaptersCVTest.java:32. TypeAdaptersCVTest > testGetTypeAdaptor() FAILED; java.lang.NoClassDefFoundError at TypeAdaptersCVTest.java:99. 42 tests completed, 2 failed. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':qupath-core:test'.; > There were failing tests. See the report at: file:///home/gordon/src/qupath/qupath-core/build/reports/tests/test/index.html. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.; Use '--warning-mode all' to show the individual deprecation warnings.; See https://docs.gradle.org/6.4/use",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5746,test,test,5746,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['test'],['test']
Testability,"er each. On Nov 9, 2017 9:23 AM, ""Eline8"" <notifications@github.com> wrote:. > Thank you both for answering! @Svidro <https://github.com/svidro> and; > @petebankhead <https://github.com/petebankhead>; > I started all over again, so I don't have the workflow anymore.; > Nevertheless, what I meant was that I used indeed the pointing tool. I had; > two populations, one negative and one positive. After I ran the positive; > cell detection, the negative population was gone. And unfortunately, there; > is no undo button.; >; > My goal was indeed compare the manual counting and the automated counting.; > For optimization.; >; > I don't know whether the error is the lack of RAM, I checked and i have; > 3,3GB available. And I only have 4 ROI's in one image. When I run the; > analysis, I make sure nothing is selected and choose the option 'all; > annotation'. It might be, but it might be not, because sometimes it also; > does not analyse only 1 ROI, but other times it does. However, the log it; > says 'memory error'. the programs that are running on my computer besides; > Qupaht are google chrome (1tab), one note with an excel file, and file; > explorer.; >; > [image: capture]; > <https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG>; > [image: capture2]; > <https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG>; > [image: capture3]; > <https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG>; >; > I really don't know why sometimes it works or not, but i'll be more; > careful in what I'll do.; > Unfortunately, there was also no backup file in the folder after the; > failure of saving.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/112#issuecomment-343227944>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-a",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343229740:1363,log,log,1363,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343229740,1,['log'],['log']
Testability,"hed the QuPath project in 0.4.1, and the load time was nearly instantaneous. Which, while resolving the issue, also means that the issue exists outside of QuPath. So, for some reason, the thumbnail previews are lost after a period of time, and don't seem to coincide with closing the folder or restarting the computer. The first thing I attempted to preserve thumbnails was to ensure ""Always show icons, never thumbnails"" in the folder options was unchecked, however it already was by default:; ![image](https://user-images.githubusercontent.com/52012166/211071879-ac70ef62-925f-4fe5-8ec3-10763d391393.png); Toggling this field didn't seem to have any impact on project loading performance, since in either case, the thumbnails were already generated (just replaced with an icon if the box is checked).; Next, under Windows performance options, I noticed ""save taskbar thumbnail previews"" was unchecked by default. I've checked it, and so far, I don't seem to have trouble loading projects that already have thumbnails generated in explorer. ; ![image](https://user-images.githubusercontent.com/52012166/211072664-c211658b-7aa6-435d-8067-830b4e1620b1.png). I'll continue to test other projects and rebooting my computer, to confirm if this has resolved the issue. TL;DR: **Check ""save taskbar thumbnail previews"" under Windows performance options. Subsequent loads of the project should now be much faster**. EDIT: So far, this fix persists after rebooting the system. EDIT 2: I've opened the project again after a few hours, verifying that the thumbnails exist in Windows Explorer. I'm now getting a long project load time (although anecdotally, it feels a bit faster), which means the above fix might not work as it could be tied to something other than thumbnails generated in Explorer. Currently, the project is located on the OS-installed drive (NVMe SSD), but the images are located on a separate local NVMe SSD. I'll see if moving both the project and images onto the OS drive changes anything",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580:1687,test,test,1687,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1373971580,1,['test'],['test']
Testability,hi Pete. I did not really understand the meaning of that. ; But i made the test to put points into the cytoplasm of existing cells and a point outside the cytoplasm of existing cells. ; The result was: all points (that i converted into cells with Mikes new script) that were inside existing cells were not counted as objects inside the annotations tab. But counted in the measurments. ; It corresponds with the thickness of the boundary: ; ![grafik](https://user-images.githubusercontent.com/16352785/51791164-1a85be00-219f-11e9-8116-9384b0c09ab4.png),MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/259#issuecomment-457853179:75,test,test,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/259#issuecomment-457853179,1,['test'],['test']
Testability,"hy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting ROI: \t${intersecting.size()}"". // Detections with ROIs intersecting the selected object - accessed from region; // This should contain the same elements as intersecting (possibly in a different order); def intersecting2 = PathObjectTools.filterByROIIntersects(roi, regionObjects); assert intersecting.size() == intersecting2.size(); assert (intersecting as Set) == (intersecting2 as Set). // Detections with ROIs completely within the selected object; def completelyCovered = PathObjectTools.filterByROICovers(roi, allDetections); println ""Num completely covered: \t${completelyCovered.size()}"". // Set classifications for visualization; allDetections.each {it.classifications = []}; childObjects.each{it.classifications += ['child']}; regionObjects.each{it.classifications += ['region']}; hierarchyWithin.each{it.classifications += ['within']}; nucleusCentroidWithin.each{it.classifications += ['nucleus-centroid']}; centroidWithin.each{it.classifications += ['roi-centroid']}; intersecting.each{it.classifications += ['intersecting']}; completelyCovered.each{it.classifications += ['covered']}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:2384,assert,assert,2384,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,2,['assert'],['assert']
Testability,"ierarchy. The tests that each cell object passes contribute to the classification assigned, so that; * if two cells have the same color you can assume they were returned by the same methods; * if two cells have different colors, then at least one cell was returned by at least one method that didn't return the other cell (e.g. it intersects the selected ROI, but isn't completely covered by it). ![image](https://github.com/user-attachments/assets/ad4a2204-2b96-4d5c-bdda-629fccffe2f6). ```groovy; // Get hierarchy & selected object/ROI; def hierarchy = getCurrentHierarchy(); def selectedObject = getSelectedObject(); def roi = selectedObject.getROI(). // Total number of detections everywhere; def allDetections = getDetectionObjects(); println ""Num detections (all): \t${allDetections.size()}"". // Direct children of the selected object; def childObjects = selectedObject.getChildObjects(); println ""Num child objects: \t${childObjects.size()}"". // Get all detections for the region (rectangular bounding box, quick test); def region = ImageRegion.createInstance(roi); def regionObjects = hierarchy.getAllDetectionsForRegion(region, null); println ""Num in region bounds: \t${regionObjects.size()}"". // Detections within selected object, using hierarchy rules; def hierarchyWithin = hierarchy.getAllDetectionsForROI(roi); println ""Num 'within' ROI: \t${hierarchyWithin.size()}"". // Detections with nucleus (or main ROI) centroids within the selected object; def nucleusCentroidWithin = PathObjectTools.filterByROIContainsNucleusCentroid(roi, allDetections); println ""Num nucleus centroid in ROI: \t${nucleusCentroidWithin.size()}"". // Detections with centroids within the selected object; def centroidWithin = PathObjectTools.filterByROIContainsCentroid(roi, allDetections); println ""Num centroid in ROI: \t${centroidWithin.size()}"". // Detections with ROIs intersecting the selected object; def intersecting = PathObjectTools.filterByROIIntersects(roi, allDetections); println ""Num intersecting RO",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074:1123,test,test,1123,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264806074,1,['test'],['test']
Testability,"iki more carefully! Thanks for following this up.; Cheers,; Ben. On Sun, 4 Dec 2016 at 09:44, Pete <notifications@github.com> wrote:. > So I looked a bit more this morning, and the issue seems to go back to; > preloading... and it was documented all along in the JEP wiki at; > https://github.com/mrj0/jep/wiki/Linux#ld_preload; >; > The way I got it to work was by copying the file identified by; >; > which jep; >; > into the base QuPath directory (which contains the launcher) and then; > modifying it. You can see more about the original contents of this file; > here <https://github.com/mrj0/jep/blob/master/src/scripts/jep>.; >; > The end result is that I launched QuPath with the following:; >; > #!/bin/sh; >; > VIRTUAL_ENV=export VIRTUAL_ENV; >; > LD_LIBRARY_PATH=""/usr/lib:/usr/local/lib/python2.7/dist-packages/""; export LD_LIBRARY_PATH; > LD_PRELOAD=""/usr/lib/x86_64-linux-gnu/libpython2.7.so""; export LD_PRELOAD; > if test ""x$VIRTUAL_ENV"" != ""x""; then; > PATH=""$VIRTUAL_ENV/bin:$PATH""; > export PATH; > PYTHONHOME=""$VIRTUAL_ENV""; > export PYTHONHOMEfi; >; > cp=""/usr/local/lib/python2.7/dist-packages/jep/jep-3.6.1.jar""if test ""x$CLASSPATH"" != ""x""; then; > cp=""$cp"":""$CLASSPATH""fi; >; > jni_path=""/usr/local/lib/python2.7/dist-packages/jep""; >; > DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""; > exec java -Xmx4G -classpath ""$cp:${DIR}/app/QuPathApp.jar"" -Djava.library.path=""$jni_path:${DIR}:${DIR}/app"" qupath.QuPath; >; > After doing this, the Groovy script for testing JEP worked without; > problems.; >; > One thing in particular to note is the use of -Xmx4G to set the maximum; > memory to 4GB on my (virtual) machine... it would be good to modify this as; > required, as the built-in method is modifying the maximum memory within; > QuPath won't work when it's launched in this way.; >; > I've only tested this in Ubuntu, but hopefully it works for you too.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on G",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-264698049:1111,test,test,1111,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-264698049,1,['test'],['test']
Testability,"in 0.18 seconds; INFO: Completed!; INFO: ; qupath.lib.plugins.objects.SmoothFeaturesPlugin {""fwhmMicrons"": 25.0, ""smoothWithinClasses"": false, ""useLegacyNames"": false}; INFO: Measurement mapper limits for Smoothed: 25 µm: Nucleus/Cell area ratio: 0.12291267514228821, 0.4222889840602875; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Adding Area (AWT) to hierarchy; INFO: Stroma: 138; INFO: Tumor: 165; INFO: 303 objects available for classifier training from 1 images; INFO: Cell: DAB OD max Quartile 1: 0.2062; INFO: Cell: DAB OD max Median: 0.4188; INFO: Cell: DAB OD max Quartile 3: 0.5843; INFO: Cell: DAB OD max Mean: 0.4174; INFO: Cell: DAB OD max Std.Dev.: 0.2091; INFO: Cell: DAB OD mean Quartile 1: 0.0725; INFO: Cell: DAB OD mean Median: 0.1700; INFO: Cell: DAB OD mean Quartile 3: 0.2724; INFO: Cell: DAB OD mean Mean: 0.1814; INFO: Cell: DAB OD mean Std.Dev.: 0.1103; INFO: Feature selection: Classifier set to train using all 67 available features; INFO: Stroma: 138; INFO: Tumor: 165; INFO: 303 objects available for classifier training from 1 images; INFO: Training size: 67x303; INFO: Responses size: 1x303; INFO: RTrees classifier termination criteria: { type: 1, maxCount: 50, epsilon: 0.0}; INFO: Classifier trained with 303 samples; INFO: Classifier training time: 0.04 seconds; INFO: Classification time: 0.08 seconds; INFO: Percentage of correctly classified objects in TRAINING set: 0.00% (n=303); WARN: It is *strongly* advised not to report accuracies based on testing using the training set!; INFO: Number of unclassified objects in the test set: 303 (100.00%); INFO: Confusion matrix; 	Stroma	 Tumor; Stroma	 0	 0; Tumor	 0	 0. INFO: Number of reclassified objects: 4375 of 4375. Please let me know if you have any suggestions on how I can run the classifier succesfully. Best,; Sanne",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/210#issuecomment-418647572:6284,test,testing,6284,https://qupath.github.io,https://github.com/qupath/qupath/issues/210#issuecomment-418647572,2,['test'],"['test', 'testing']"
Testability,"into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col); }. public byte[] getSamples(IFD ifd, byte[] buf, int x, int y,; long width, long height, int overlapX, int overlapY); throws FormatException, IOException; {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getSamples(ifd, buf, x, y, width, height, overlapX, overlapY). }. }",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-435208389:2833,log,logger,2833,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-435208389,2,"['LOG', 'log']","['LOGGER', 'logger']"
Testability,"ith consolidating the last portion of the code into a parallel stream, but it is not much faster than the original code for one parentROI. In my case, I want to calculate the intersections for multiple ROIs with the tile, so it was easier for me to write the code similar to the snippet below:. ```; //		have to make all these ""final"" temp variables.... probably a better way; 		double finalYMin = yMin;; 		double finalXMin = xMin;; 		boolean finalByColumn = byColumn;; 		Map<Integer, Geometry> finalColumnParents = columnParents;; 		boolean finalByRow = byRow;; 		Map<Integer, Geometry> finalRowParents = rowParents;; 		List<ROI> tileROIs = Collections.synchronizedList(new ArrayList<>());; 		var plane = parentROI.getImagePlane();; 		AtomicInteger nullInterExcepetions = new AtomicInteger(0);; 		IntStream.range(0, nx).parallel().forEach(xi -> {; 			double x = finalXMin + xi * w - overlap;; //			A very hacky way to consolidate the code into 1 loop.; //			Atomic Reference doesn't behave when getting hit by multiple streams setting potentially different values for each stream...; 			Geometry outerGeometryLocal = finalByColumn ? finalColumnParents.getOrDefault(xi, geometry) : geometry;; 			IntStream.range(0, ny).parallel().forEach(yi -> {; 				double y = finalYMin + yi * h - overlap;; 				Geometry geometryLocal = finalByRow ? finalRowParents.getOrDefault(yi, geometry) : outerGeometryLocal;. 				// Create the tile; 				var rect = GeometryTools.createRectangle(x, y, w + overlap * 2, h + overlap * 2);; 				Geometry inter = intersect(rect, geometryLocal);; 				if(inter==null) {; 					nullInterExcepetions.incrementAndGet();; 					return;; 				}; 				ROI roi = GeometryTools.geometryToROI(inter, plane);; 				tileROIs.add(roi);; 			});; 		});. 		if (nullInterExcepetions.get() > 0) {; 			logger.warn(""Tiles lost during tiling: {}"", nullInterExcepetions.get());; 			logger.warn(""You may be able to avoid tiling errors by calling 'Simplify shape' on any complex annotations first."");; 		}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298:1864,log,logger,1864,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298,2,['log'],['logger']
Testability,"l, ImageRegion region);; ```; where the `level` is a specific level of the pyramid (0 for full-resolution). Currently, if I want to get a rectangle of pixels from level 2, I need to figure out the coordinates in the full-resolution image (i.e. multiply by the downsample value). Then QuPath should find them again after dividing by the downsample. However, the coordinates need to be integers - which makes me uneasy about what happens if the downsample is something like 4.23452345.; Should I be rounding or flooring when I scale up the coordinates?; And can I be sure that QuPath will do the right thing when it scales them back down, so that I get the original coordinates I wanted again...?. If not, then it seems I might get off-by-one errors and slightly unexpected results. If I want a 256 x 256 pixel region, I might end up with a 255 x 256 pixel region... which would be annoying. It seems that I can round or floor when scaling up, and then round or floor when scaling down, but I wasn't completely sure which I should be doing so I created a quick Python simulation to test what happens: https://gist.github.com/petebankhead/2d4a21cb69f3b68c8f8fa14475723647. Based on this, it seems I need to round in both directions... which was maybe a predictable conclusion for the more mathematically confident, but I wasn't sure of it's what QuPath does internally* and we can't count on users necessarily knowing that. (*However*, note that if the downsample is < 1 then all the methods fail...). I think it would be nice to resolve the ambiguity somehow, although adding an extra method; ```java; public T readLevel(int level, int x, int y, int width, int height, int z, int t);; ```; looks like a horrible explosion of ints. A possibly-simpler alternative might be to support something like this:; ```java; public T readScaledRegion(double downsample, int outputX, int outputY, int outputWidth, int outputHeight, int z, int t);; ```; where the coordinates are defined according to the output image",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089:1260,test,test,1260,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089,1,['test'],['test']
Testability,"l.lambda$runLater$173(PlatformImpl.java:294). at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95). at com.sun.glass.ui.win.WinApplication._runLoop(Native Method). at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177). at java.lang.Thread.run(Thread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. I this running on Windows 10, and are there any errors under View → Show log when you try to open an .svs file? Does it work with the other version of QuPath on the same machine (v0.1.2)?. My guess is that OpenSlide isn't loading for you, but it's the same version as in v0.1.2... so it one works, then I'd expect the other to work as well. If you were running QuPath from an IDE (e.g. IntelliJ, eclipse) then paths would also need to be set for OpenSlide to work, and that would be an explanation. But if instead you follow the step by step instructions <https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide> right to the end, it should result in a QuPath.exe file that work if you double-click it without any further effort. The other option is to install the latest QuPath Bio-Formats extension <https://github.com/qupath/qupath-bioformats-extension> ... but it shouldn't be necessary for standard .svs files. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on Gi",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:2255,log,log,2255,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,1,['log'],['log']
Testability,"libvips in QuPath: I'd be very flattered, of course! The difficulty might be in how to integrate it. The simplest way would be to bundle the binary and just shell out to it. As you say, things like deepzoom and TIFF pyramid build might benefit, but of course you'd need a test case and some benchmarks to try to quantify any possible improvement. There are Java bindings for libvips, but I've not been involved with them and I don't how complete they are, or if they are tough enough for a demanding program like QuPath. That would need a chunk of work. I did pyvips and it should be complete and reliable. Do you use much Python inside QuPath? That might be the simplest way to experiment with more integration, such as using openslide via libvips.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715899157:272,test,test,272,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715899157,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-pen/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-script-editor/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /public/home/yangzhzh/tools/qupath-master/license-unknown.txt; > Task :createPackage FAILED; Using packager: /public/home/yangzhzh/tools/jdk-14/bin/jpackage; /public/home/yangzhzh/tools/jdk-14/bin/jpackage --input /public/home/yangzhzh/tools/qupath-master/build/qupath --output /public/home/yangzhzh/tools/qupath-master/build/dist --main-jar qupath-0.2.0-m4.jar --name QuPath-0.2.0-m4 --java-options -XX:MaxRAMPercentage=50 --app-version 0.2.0-m4 --icon /public/home/yangzhzh/tools/qupath-master/build/resources/main/package/linux/QuPath.png --runtime-image /public/home/yangzhzh/tools/qupath-master/build/jre; /public/home/yangzhzh/tools/jdk-14/bin/jpackage: symbol lookup error: /public/home/yangzhzh/tools/jdk-14/bin/jpackage: undefined symbol: JLI_InitArgProcessing. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':createPackage'.; > Process 'command '/public/home/yangzhzh/tools/jdk-14/bin/jpackage'' finished with non-zero exit value 127. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 8s; 41 actionable tasks: 5 executed, 36 up-to-date",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-534115250:2763,log,log,2763,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-534115250,1,['log'],['log']
Testability,"n be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the bytes-to-BufferedImage logic in an entirely threadsafe way, and leave as much as possible of `BioFormatsImageServer` as it is, then that could be the safest way to make a v0.5.0 update and help with the OMERO extension. In general, I am cautious about about extensive refactoring of `BioFormatsImageServer` because I've written so many subtly broken versions of it myself throughout in QuPath's history :) It's really hard to get 'right'; the previous version was messy, but the code seemed to work pretty reliably (well, except for [this...](https://forum.image.sc/t/qupath-stardist-extension-error-with-large-images/80221/19)). ---. I realise it's *incredibly hard* (/ impossible) to write this without failing examples, and most public examples *won't* fail because we get lucky with the different series types. My guess is that .czi is one of the more awkward formats. Based on that, I found another failing example here: https://zenodo.org/record/7149674. Specifically, check out the label and macro images with the PR vs. in QuPath v0.4.4. In this case, the problem is ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:4378,log,logic,4378,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['log'],['logic']
Testability,"n't know how to deal with this problem, so I hope to get your help.; -------------------------------; import java.awt.image.BufferedImage;; import java.io.IOException;; import java.util.Hashtable;; import java.util.SortedMap;. import javax.imageio.spi.ImageWriterSpi;. import org.controlsfx.control.SnapshotView;. import ij.plugin.JpegWriter;; import javafx.scene.SnapshotResult;; import qupath.lib.gui.ImageWriterTools;; import qupath.lib.gui.QuPathGUI;; import qupath.lib.gui.commands.SaveViewCommand;; import qupath.lib.gui.prefs.PathPrefs;; import qupath.lib.images.ImageData;; import qupath.lib.images.servers.ImageServer;; import qupath.lib.images.servers.ImageServerProvider;; import qupath.lib.io.ImageWriter;; import qupath.lib.regions.RegionRequest;; import qupath.lib.roi.interfaces.ROI;; import qupath.lib.scripting.QP;; import qupath.lib.scripting.QPEx;. public class test01 {; 	private static QuPathGUI qupath;; 	private static boolean wholeWindow;; 	; 	public void mydetection() throws InterruptedException {; 		// TODO Auto-generated method stub; 		String imagePath=""D:\\Overview\\9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg"";; 		ImageServer<BufferedImage> server = ImageServerProvider.buildServer(imagePath, BufferedImage.class);; 		ImageData imageData = new ImageData<>(server);; 		String bind = ""{\""threshold\"": 162, \""requestedDownsample\"": 1.0, \""minAreaPixels\"": 100000.0, \""maxHoleAreaPixels\"": 500.0, \""darkBackground\"": false, \""smoothImage\"": true, \""medianCleanup\"": true, \""dilateBoundaries\"": false, \r\n"" + ; 				"" \""smoothCoordinates\"": true, \""excludeOnBoundary\"": false, \""singleAnnotation\"": true}');"";; 		boolean detection = false;; 		try {; 			detection = QP.runPlugin(""qupath.imagej.detect.tissue.SimpleTissueDetection2"",bind);; 		} catch (Exception e) {; 			// TODO Auto-generated catch block; 			e.printStackTrace();; 		}; 		int x = 0,y = 0;; 		int width=server.getWidth(),height = server.getHeight();; 		RegionRequest request = RegionRequest.createInstance(imageDa",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420269884:1265,stub,stub,1265,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420269884,1,['stub'],['stub']
Testability,"n.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$300(GlassViewEventHandler.java:388); 	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389); 	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:387); 	at com.sun.glass.ui.View.handleMouseEvent(View.java:555); 	at com.sun.glass.ui.View.notifyMouse(View.java:937); 	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); 	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$450(GtkApplication.java:139); 	at java.lang.Thread.run(Thread.java:745); 02:40:13.846 [JavaFX Application Thread] [INFO ] q.l.i.servers.ImageServerProvider - Returning server: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] [INFO ] q.lib.scripting.DefaultScriptEditor - Loading script file /home/bl/ip/QuPath/app/TestJep.groovy; 02:40:28.109 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean red (from Java): 86.81525; 02:40:28.121 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean green (from Java): 72.492275; 02:40:28.124 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean blue (from Java): 68.141675; 02:40:28.624 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Started JEP: jep.Jep@6bc4b2e2; ImportError: numpy.core.multiarray failed to import; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f930536d03f, pid=27357, tid=0x00007f932091e700; #; # JRE version: OpenJDK Runtime Environment (8.0_111-b14) (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14); # Java VM: OpenJDK 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [jep.so+0x1a03f] convert_jndarray_pyndarray+0x5bf; #; # Failed to write cor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:8878,Test,TestJep,8878,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['Test'],['TestJep']
Testability,"nt some time trying to understand how [Mouse Events](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/MouseEvent.html) are handled in JavaFX and I *think* I managed to sort out the issues I was initially having: Behaviour when dragging with middle button pressed, fast clicks, when to consume events or not, debouncing... Incidentally, the debouncing code is not strictly necessary, but it was an interesting exercise in working with a broken mouse. Also, I *think* `MouseEvent.MOUSE_RELEASED` should be added to the [list of ignored events here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1039) as without, I had to deal with the (middle) button release event multiple times as part of the events generated by JavaFX in the course of pressing a mouse button. Finally, I've also UX tested the behaviours we discussed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) and reproduced in the first comment. For now,; * Windows,; * with my ""fancy"" mouse; * with the shift+scrollwheel substitute for side-to-side scrolling; * my Lenovo T460 touchpad; * with scroll touch gestures enabled or disabled; * with inverted mouse enabled or disabled; * with ctrl to modify opacity; ; I couldn't use ""Zoom"" or ""Rotate"" touch gestures, because I don't think my very basic touchpad understands them, so I couldn't see any effects on QuPath. Panning does work as expected (with my very last commit). ~~**todo** I will edit my comment when I test a Linux build on my old powerbook with Mint, which (maybe) will let me use more touch gestures.~~ I haven't been able to use touch gestures with QuPath in my Cinnamon desktop environment so far, but with a mouse, my code behaves in Mint/Ubuntu the way it does on Windows. For now, my code is quite verbose, both in terms of comments and in debug messages. I will clean this up if/when you're happy with this pull request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123:1962,test,test,1962,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123,1,['test'],['test']
Testability,"ntHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); WARN: Error opening /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ: Could not open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ; WARN: Unable to open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with OpenSlide: /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif: Not a file that OpenSlide can recognize; ERROR: Unable to build whole slide server - check your classpath for a suitable library (e.g. OpenSlide, BioFormats); 	; ERROR: /Applications/QuPath.app/Contents/Java/QuPathApp.jar:qupath/qupath-core-0.1.2.jar:qupath/qupath-core-awt-0.1.2.jar:qupath/qupath-core-processing-0.1.2.jar:qupath/qupath-core-processing-awt-0.1.2.jar:qupath/qupath-extension-ij-0.1.2.jar:qupath/qupath-extension-input-0.1.2.jar:qupath/qupath-extension-opencv-0.1.2.jar:qupath/qupath-extension-openslide-0.1.2.jar:qupath/qupath-extension-pen-0.1.2.jar:qupath/qupath-extension-script-editor-0.1.2.jar:qupath/qupath-gui-fx-0.1.2.jar:qupath/qupath-processing-ij-0.1.2.jar:qupath/qupath-processing-opencv-0.1.2.jar:jars/commons-math3-3.6.1.jar:jars/controlsfx-8.40.12.jar:jars/flowless-0.4.5.jar:jars/groovy-2.4.7.jar:jars/groovy-jsr223-2.4.7.jar:jars/gson-2.8.0.jar:jars/ij-1.51g.jar:jars/jfxtras-common-8.0-r5.jar:jars/jfxtras-menu-8.0-r5.jar:jars/jinput-2.0.6.jar:jars/jpen-2-150301.jar:jars/jutils-1.0.0.jar:jars/logback-classic-1.1.7.jar:jars/logback-core-1.1.7.jar:jars/opencv-3.1.0.jar:jars/openslide-3.4.1_2.jar:jars/packager.jar:jars/reactfx-2.0-M4u1.jar:jars/richtextfx-0.6.10.jar:jars/slf4j-api-1.7.20.jar:jars/undofx-1.2.jar:jars/wellbehavedfx-0.1.1.jar:QuPathApp.jar; ERROR: Open image: Sorry, I can't open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif. Thank you for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:10690,log,logback-classic-,10690,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,2,['log'],"['logback-classic-', 'logback-core-']"
Testability,"og:. INFO: Initializing type adapters; INFO: Bio-Formats version 6.7.0; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.7.0) (18 ms); INFO: Loaded extension ImageJ extension (69 ms); INFO: Loaded extension Processing extension (30 ms); INFO: Loaded extension Rich script editor extension (81 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Update check for https://github.com/qupath/qupath; INFO: Starting QuPath with parameters: []; INFO: Setting max Bio-Formats readers to 4; WARN: Temp memoization directory created at /var/folders/_v/1nq60v556l5cbwcdv47wq76w0000gn/T/qupath-memo-4532483650866269942; WARN: If you want to avoid this warning, either specify a memoization directory in the preferences or turn off memoization by setting the time to < 0; INFO: Image data set to ImageData: Not set, 16.tif - Series 0. Again, thank you very much for your incredible help!. Manuel. > El 30 may. 2022, a las 13:52, Pete ***@***.***> escribió:; > ; > ; > Hi, some questions:; > ; > What is the file format?; > Under the 'Image' tab, what is shown at the entry 'Server type'?; > Have you been able to view the whole slide image with any other version of QuPath (e.g. on Windows)?; > Is there any relevant information under View → Show log?; > If you have an mrxs image, this may be relevant: https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917 <https://forum.image.sc/t/potential-fix-for-problem-low-resolution-mrxs-3dhistech-scans/32917>; > If you have an mrxs or vsi image, you might be missing the folder the should exist alongside the main image file (the folder contains the high-resolution data).; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/973#issuecomment-1141062643>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AM3QKIKUIXPG5ROSUQTBOELVMSTXDANCNFSM5XKDHIBQ>.; > You are receiving this because you authored the thread.; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758:1435,log,log,1435,https://qupath.github.io,https://github.com/qupath/qupath/issues/973#issuecomment-1141124758,1,['log'],['log']
Testability,on-omero:compileJava; > Task :qupath-extension-openslide:compileJava; > Task :qupath-extension-pen:compileJava; > Task :qupath-extension-script-editor:compileJava; > Task :qupath-extension-svg:compileJava; > Task :compileJava; > Task :processResources; > Task :classes; > Task :copyChangelog; > Task :qupath-core:processResources; > Task :qupath-core:classes; > Task :qupath-core:jar; > Task :qupath-core-processing:processResources; > Task :qupath-core-processing:classes; > Task :qupath-core-processing:jar; > Task :qupath-experimental:processResources; > Task :qupath-experimental:classes; > Task :qupath-experimental:jar; > Task :qupath-extension-bioformats:processResources; > Task :qupath-extension-bioformats:classes; > Task :qupath-extension-bioformats:jar; > Task :qupath-extension-omero:processResources; > Task :qupath-extension-omero:classes; > Task :qupath-extension-omero:jar; > Task :qupath-extension-openslide:processResources; > Task :qupath-extension-openslide:classes; > Task :qupath-extension-openslide:jar; > Task :qupath-extension-pen:processResources; > Task :qupath-extension-pen:classes; > Task :qupath-extension-pen:jar; > Task :qupath-extension-processing:processResources; > Task :qupath-extension-processing:classes; > Task :qupath-extension-processing:jar; > Task :qupath-extension-script-editor:processResources; > Task :qupath-extension-script-editor:classes; > Task :qupath-extension-script-editor:jar; > Task :qupath-extension-svg:processResources; > Task :qupath-extension-svg:classes; > Task :qupath-extension-svg:jar; > Task :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5159,test,testClasses,5159,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,2,['test'],"['test', 'testClasses']"
Testability,"on-pen/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-processing/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-extension-script-editor/src/main/resources/licenses; /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-osx.jar into build/qupath; Extracting native libraries from /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-osx.jar into build/qupath; LICENSE PATH: /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/license-unknown.txt; > Task :createPackage FAILED; -------; Please specify where I can find a suitable packager! Something like this:; gradlew createPackage -Ppackager=/full/path/to/jpackage; Current value of -Ppackager is /Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/jdk-13/bin/jpackage; Note: You can also specify this in a gradle.properties file; -------. FAILURE: Build failed with an exception. * Where:; Build file '/Users/Gurjeetarora/Desktop/programming/GITHUB/qupath/build.gradle' line: 622. * What went wrong:; Execution failed for task ':createPackage'.; > Please specify where I can find a suitable jpackage!. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.; Use '--warning-mode all' to show the individual deprecation warnings.; See https://docs.gradle.org/6.0/userguide/command_line_interface.html#sec:command_line_warnings. BUILD FAILED in 9s; 41 actionable tasks: 16 executed, 25 up-to-date. Looking forward fro your response ; Brijeshwar,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-606369334:2599,log,log,2599,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-606369334,1,['log'],['log']
Testability,"or every location - and shouldn't happen whenever there has been an exception. You're right, I was overusing `Optional`. Now, each time an error occurs, an exception is thrown. I kept `Optional` only when a function is not guaranteed to return a result AND no error occurred during its execution. > ReaderWrapper looks very tied to the 'OME' way of doing things (Bio-Formats and OMERO); I'd expect a general image reader to return something more informative than a byte[][], which can only be interpreted with a lot of other return values and Bio-Formats logic. So it isn't very easy to use in a standalone way.; > ; > That isn't in itself a problem, but if writing a general image reader for use with the OMERO web API or [IIIPImage Server](https://iipimage.sourceforge.io/documentation/server) (for example) I imagine it would be far harder to return a byte[][] than a BufferedImage.; > ; > So I think it should either 1) embrace being Bio-Formats/OMERO-specific, and prioritise simplicity, or 2) incorporate more of the processing logic that converts the byte[][] into a BufferedImage, and prioritise reusability. If the goal is for ReaderWrapper and ReaderPool to be reusable, it needs to be easy to generate and work with their return values. I changed `ReaderWrapper` to be as generic as possible (its read function now returns a `BufferedImage`). However, I wanted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `ReaderWrapper`, and a parent of `BioFormatsReaderWrapper` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:1477,log,logic,1477,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['log'],['logic']
Testability,"ouch :(. changes to the Info.plist must done before code-signature, not after. is there a build with the version numbers i could test to look into this?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1250#issuecomment-1750320624:129,test,test,129,https://qupath.github.io,https://github.com/qupath/qupath/issues/1250#issuecomment-1750320624,1,['test'],['test']
Testability,"ources; > Task :qupath-extension-svg:classes; > Task :qupath-extension-svg:jar; > Task :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble. > Task :qupath-core:compileTestJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: /home/gordon/src/qupath/qupath-core/src/test/java/qupath/lib/io/TypeAdaptersCVTest.java uses unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core:processTestResources; > Task :qupath-core:testClasses. > Task :qupath-core:test FAILED. TypeAdaptersCVTest > testGetOpenCVTypeAdaptorFactory() FAILED; java.lang.ExceptionInInitializerError at TypeAdaptersCVTest.java:32; Caused by: java.lang.NullPointerException at TypeAdaptersCVTest.java:32. TypeAdaptersCVTest > testGetTypeAdaptor() FAILED; java.lang.NoClassDefFoundError at TypeAdaptersCVTest.java:99. 42 tests completed, 2 failed. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':qupath-core:test'.; > There were failing tests. See the report at: file:///home/gordon/src/qupath/qupath-core/build/reports/tests/test/index.html. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.; Use '--warning-mode all' to show the individual deprecation warnings.; See https://docs.gradle.org/6.4/userguide/command_line_interface.html#sec:command_line",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5780,test,testGetOpenCVTypeAdaptorFactory,5780,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['test'],['testGetOpenCVTypeAdaptorFactory']
Testability,"penSlide features. ## Build process. I have forked and modified `openslide-winbuild` to try to make binaries with fewer dynamically-linked subdependencies for Mac and Linux. I've moved some of this code to a [non-forked repo](https://github.com/alanocallaghan/openslide-crossplatform-builds), as most of it is unlikely to be useful upstream (though I'm of course happy to contribute it if so). ## Windows. The self-contained builds provided by OpenSlide work well here, as do binaries from my forked repo, with the proviso that we need to load them from a path rather than a JAR, as the JNA library loading code will not find `winpthreads` or `ssp` if we try to load from a jar on the classpath. ## Mac. x86 and M1 builds using the same meson wrap system as Windows seem to work fairly well at first glance (see [x86](https://github.com/alanocallaghan/openslide-jna/actions/runs/6175143420/job/16761349958) and [m1](https://app.circleci.com/pipelines/github/alanocallaghan/openslide-jna/26/workflows/aafe7473-6e23-4897-91bd-b66d8456e2ce/jobs/26) build test runs). However, as Pete has pointed out, they have a number of weird dependencies, some of which are homebrew directories:. ```; otool -L /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib; /Users/petebankhead/Downloads/openslide-natives/openslide-natives-darwin-aarch64/darwin-aarch64/libopenslide.dylib:; 	/lib/libopenslide.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1319.0.0); 	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1953.255.0); 	/opt/homebrew/opt/xz/lib/liblzma.5.dylib (compatibility version 10.0.0, current version 10.4.0); 	/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0); 	/opt/homebrew/opt/pcre2/lib/libpcre2-8.0.dylib (compatibility version 12.0.0, current ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:1467,test,test,1467,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['test'],['test']
Testability,"perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile. Anyway, thanks a lot for your help, I am going to play more with QuPath to test all the other possibilities!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:2077,test,test,2077,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,1,['test'],['test']
Testability,"qupath-master/qupath-extension-bioformats/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-openslide/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-pen/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-processing/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-extension-script-editor/src/main/resources/licenses; /public/home/yangzhzh/tools/qupath-master/qupath-gui-fx/src/main/resources/licenses; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/org/openslide/openslide/3.4.1_2/openslide-3.4.1_2-natives-linux.jar into build/qupath; Extracting native libraries from /public/home/yangzhzh/tools/qupath-master/maven/repo/net/sourceforge/jpen/jpen/2-150301/jpen-2-150301-natives-linux.jar into build/qupath; LICENSE PATH: /public/home/yangzhzh/tools/qupath-master/license-unknown.txt; > Task :createPackage FAILED; Using packager: /public/home/yangzhzh/tools/jdk-14/bin; /public/home/yangzhzh/tools/jdk-14/bin --input /public/home/yangzhzh/tools/qupath-master/build/qupath --output /public/home/yangzhzh/tools/qupath-master/build/dist --main-jar qupath-0.2.0-m4.jar --name QuPath-0.2.0-m4 --java-options -XX:MaxRAMPercentage=50 --app-version 0.2.0-m4 --icon /public/home/yangzhzh/tools/qupath-master/build/resources/main/package/linux/QuPath.png --runtime-image /public/home/yangzhzh/tools/qupath-master/build/jre. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':createPackage'.; > A problem occurred starting process 'command '/public/home/yangzhzh/tools/jdk-14/bin''. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 11s; 41 actionable tasks: 3 executed, 38 up-to-date. Any idea of why?; Thanks,; Zhenzhen",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/363#issuecomment-534106040:2614,log,log,2614,https://qupath.github.io,https://github.com/qupath/qupath/issues/363#issuecomment-534106040,1,['log'],['log']
Testability,"r and smaller training annotations. The actual `RTrees` classifiers are implemented in C++ (by OpenCV). After QuPath has generated the training data, the training itself is performed inside OpenCV and in accessible to QuPath. As far as I am aware, this is single-threaded in OpenCV and cannot be changed in QuPath. Similarly, JSON generation and parsing is performed with the help of the Gson library, so performance depends somewhat on Gson. GeoJSON is a standard for representing geometries; I think it solves a different problem from Parquet. In QuPath, it is primarily intended to facilitate exchanging annotations, where choosing an existing open format is strongly desirable for interoperability (rather than trying to define a new standard others have to follow). Performance should not be an issue with several hundred/thousand objects (the common scenario), but it will inevitably be slow to export to export millions of cells as GeoJSON. If you don't need geometry information, you could export much more efficiently features/classifications/centroids only (e.g. through [a measurement table](https://qupath.readthedocs.io/en/stable/docs/tutorials/exporting_measurements.html)). Alternatively, if you need a highly optimized solution or a custom format then you can implement one using a QuPath script or extension. I'd like to close this issue because I think there is no bug in QuPath. The best place for discussing the use of the software or suggested improvements is http://forum.image.sc/tag/qupath. >If you'd like to add a separate GitHub issue for the minimized windows, please fill in the bug report template. I have seen some issues on Ubuntu with Windows not being in the correct place, but not on Windows or macOS. I cannot tell if it is a problem that QuPath can solve, or if it is an issue in JavaFX. But the issue I have seen does not make the dialogs unusable. We don't have the bandwidth to test other linux distributions, so rely on fixes from others if there are problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-950106875:2056,test,test,2056,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-950106875,1,['test'],['test']
Testability,"r. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel, boolean isRGB, ColorModel colorModel)` function to `ReaderPool`?. > Associated images can sometimes be very big - even pyramidal or with multiple channels. So the logic for reading them doesn't have to be fundamentally different to the logic for reading other images. From a Bio-Formats perspective, you might just request the image for a different series. I'm not sure I u",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:3130,log,logic,3130,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['log'],['logic']
Testability,"rown everytime I toggle ""Group by ID"" as well.; ```; ERROR: QuPath exception: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; java.lang.NullPointerException: Cannot invoke ""javafx.scene.control.TreeTableColumn.setPrefWidth(double)"" because ""columnImage"" is null; at qupath.lib.gui.tma.TMASummaryViewer.lambda$refreshTableData$66(TMASummaryViewer.java:1463); ```; 2. In the log I also noticed ```WARN: Unable to find censored column - survival data will be uncensored``` - not sure why ? ; ```; INFO: Update check for https://github.com/qupath/qupath; WARN: You need to enable the startup script in the Preferences if you want to run it; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: Predicate set to: null; INFO: Parsed 84 from HS-1_Scan1.ome.tif.qptma (84 total); INFO: Parsed 84 from HS-2_Scan1.ome.tif.qptma (168 total); INFO: Parsed 84 from HS-3_Scan1.ome.tif.qptma (252 total); INFO: Parsed 84 from HS-4_Scan1.ome.tif.qptma (336 total); INFO: Parsed 84 from HS-5_Scan1.ome.tif.qptma (420 total); INFO: Parsed 84 from HS-6_Scan1.ome.tif.qptma (504 total); WARN: Unable to find censored column - survival data will be uncensored; INFO: Survival column: Overall survival, Censored column: OS censored; INFO: Survival column: Overall survival, Censored column: OS censored; INFO: No p-values < 0.05; INFO: Smoothing log-rank test p-values by 1; INFO: Longest stretch of p-values < 0.05: 12294.9 - 13980.4 (18 entries, 5 observed); INFO: Smoothing log-rank test p-values by 11; INFO: Longest stretch of p-values < 0.05: 12294.9 - 13980.4 (18 entries, 5 observed); INFO: Smoothing log-rank test p-values by 11; ```; I can see in the next couple of line the survival data is being loaded , and they are displayed in the table as well. 3. I also noticed the ""Missing"" column is missing in the TMA Data viewer when I load the qptma file in the Offline TMA Data Viewer.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901:2378,log,log-rank,2378,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083#issuecomment-1289564901,6,"['log', 'test']","['log-rank', 'test']"
Testability,"s only to provide a way to assign classes to annotations manually. It's very possible to have objects with other classes in the image; this happens often (e.g. with 'Positive cell detection' you can get cells with 'Positive' and 'Negative' classes - but these don't need to appear in the class list for it to work). ### The uniqueness of classes; If you create a new class in the class list and it has _exactly_ the same name as a previous one, then it should refer to _exactly_ the same class. If the class doesn't exist, it will be created. But if it exists anywhere in the image, then the existing class with that name will be used. This is important for how QuPath does things. Unfortunately, the rule is _very_ strict. Any difference in class name (e.g. different capitalization, spaces) results in a different class. So it is necessary to be very careful when doing this. > I _think_ the color for the class is random. I may have changed that for the next version to make the color pseudo-random, but consistently the same if the same name is typed (making it easier to identify discrepancies). I'll have to check the code to make sure if I made this change or only thought about it... ### What to do in the short term; There are three main options in the short term:; * Add the classes you need manually (and looking out for any problems/tiny discrepancies) if/when they are lost; * Create a script to set the contents of the class list more easily (this is possible, but needs caution as well... if the class list is corrupt in v0.1.2, QuPath won't start); * [Follow the instructions to build my test version](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide) that already has some of these changes available, ahead of them being actually packed up into a full QuPath release. If a script to set the class list would save you a lot of time, let me know I can help create one; otherwise, I hope one of the other two options and this explanation can help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/243#issuecomment-437784159:2505,test,test,2505,https://qupath.github.io,https://github.com/qupath/qupath/issues/243#issuecomment-437784159,1,['test'],['test']
Testability,"s); 12:35:12.234 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension ImageJ extension (34 ms); Warning: Could not load Loader: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; 12:35:12.248 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Loaded extension JPen extension (13 ms); May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: loading JPen 2-150301 JNI library: jpen-2-4-x86_64 ...; May 26, 2020 12:35:12 PM jpen.provider.NativeLibraryLoader$4 run; INFO: jpen-2-4-x86_64 loaded; Warning: Could not load Pointer: java.lang.UnsatisfiedLinkError: no jnijavacpp in java.library.path: [/home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/lib/app, /home/gordon/src/qupath/build/dist/QuPath-0.2.0-m12/bin]; #; # A fatal error has been detected by the Java Runtime Environment:; [thread 50032 also had an error]; #; # SIGSEGV (0xb) at pc=0x00007f6271c2df1e, pid=49988, tid=50030; #; # JRE version: OpenJDK Runtime Environment AdoptOpenJDK (14.0.1+7) (build 14.0.1+7); # Java VM: OpenJDK 64-Bit Server VM AdoptOpenJDK (14.0.1+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # C [libc.so.6+0x8af1e] __libc_malloc+0x11e; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/gordon/src/qupath/core.49988); #; # An error report file with more information is saved as:; # /home/gordon/src/qupath/hs_err_pid49988.log; [thread 50020 also had an error]; #; # If you would like to submit a bug report, please visit:; # https://github.com/AdoptOpenJDK/openjdk-support/issues; #; [1] 49988 abort (core dumped) ./build/dist/QuPath-0.2.0-m12/bin/QuPath-0.2.0-m12; ```. The build I currently have with `-Ptensorflow-cpu=true` is working, including the wand tool and stardist.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-634101819:3170,log,log,3170,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-634101819,1,['log'],['log']
Testability,shortcut+w already works in the script editor and log viewer (but only because they explicitly add that as an accelerator).,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1353#issuecomment-1740766092:50,log,log,50,https://qupath.github.io,https://github.com/qupath/qupath/pull/1353#issuecomment-1740766092,1,['log'],['log']
Testability,"spatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at; com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at; com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at; com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at; com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). On Mon, Apr 26, 2021 at 1:07 AM Pete ***@***.***> wrote:. > @subanookala <https://github.com/subanookala> Please post questions on; > the forum at http://forum.image.sc/tag/qupath and provide more detail; > (you may find a more complete error message under *View → Show log*).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/396#issuecomment-826532977>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ATAT3NBZJC2UITEIJLWE66DTKT7LRANCNFSM4KPPDA2Q>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:6250,log,log,6250,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['log'],['log']
Testability,"ted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `ReaderWrapper`, and a parent of `BioFormatsReaderWrapper` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:2777,log,logic,2777,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['log'],['logic']
Testability,"thanks for the reply. ; I do not think that there is a naming issue... Or I am missing something and am slow to get it :) ; For us Extensions are not per user, however users can of course have their own personal directory, which is great. . In the case of extensions, it feels that it is like the 'ImageJ plugins directory'. Is that one per-user or is it configured for the whole of QuPath?. So there would be:; * User directory (scripts, logs, custom classifiers they want to reuse [just spitballing], ...); * ImageJ plugins directory (global for the QuPath installation); * QuPath Extensions directory (global as well). What is the logic to saying the Extensions directory should be configured individually for each user? Perhaps if I had a use-case I would understand it better.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632618684:439,log,logs,439,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632618684,2,['log'],"['logic', 'logs']"
Testability,"urces; > Task :qupath-extension-processing:classes; > Task :qupath-extension-processing:jar; > Task :qupath-extension-script-editor:processResources; > Task :qupath-extension-script-editor:classes; > Task :qupath-extension-script-editor:jar; > Task :qupath-extension-svg:processResources; > Task :qupath-extension-svg:classes; > Task :qupath-extension-svg:jar; > Task :qupath-gui-fx:processResources; > Task :qupath-gui-fx:classes; > Task :qupath-gui-fx:jar; > Task :generateLicenseReport; > Task :copyLicenses; > Task :extractNativeLibraries; > Task :jar; > Task :assemble; > Task :compileTestJava NO-SOURCE; > Task :processTestResources; > Task :testClasses; > Task :test NO-SOURCE; > Task :check UP-TO-DATE; > Task :copyLicenseReport; > Task :copyRuntimeLibs; > Task :build; > Task :qupath-core:assemble. > Task :qupath-core:compileTestJava; Note: Some input files use or override a deprecated API.; Note: Recompile with -Xlint:deprecation for details.; Note: /home/gordon/src/qupath/qupath-core/src/test/java/qupath/lib/io/TypeAdaptersCVTest.java uses unchecked or unsafe operations.; Note: Recompile with -Xlint:unchecked for details. > Task :qupath-core:processTestResources; > Task :qupath-core:testClasses. > Task :qupath-core:test FAILED. TypeAdaptersCVTest > testGetOpenCVTypeAdaptorFactory() FAILED; java.lang.ExceptionInInitializerError at TypeAdaptersCVTest.java:32; Caused by: java.lang.NullPointerException at TypeAdaptersCVTest.java:32. TypeAdaptersCVTest > testGetTypeAdaptor() FAILED; java.lang.NoClassDefFoundError at TypeAdaptersCVTest.java:99. 42 tests completed, 2 failed. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':qupath-core:test'.; > There were failing tests. See the report at: file:///home/gordon/src/qupath/qupath-core/build/reports/tests/test/index.html. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Get more he",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/484#issuecomment-630769356:5514,test,test,5514,https://qupath.github.io,https://github.com/qupath/qupath/issues/484#issuecomment-630769356,1,['test'],['test']
Testability,"using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col); }. public byte[] getSamples(IFD ifd, byte[] buf, int x, int y,; long width, long height, int overlapX, int overlapY); throws FormatException, IOException; {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getSamples(ifd, buf, x, y, width, height, overlapX, overlapY). }. }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:2539,log,logger,2539,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,2,"['LOG', 'log']","['LOGGER', 'logger']"
Testability,"ver: ImageJ server for /home/bl/Documents/IMG_5_11_sq.png; 02:40:14.153 [JavaFX Application Thread] [INFO ] qupath.lib.gui.viewer.QuPathViewer - Image data set to ImageData: Fluorescence, IMG_5_11_sq; 02:40:22.852 [JavaFX Application Thread] [INFO ] q.lib.scripting.DefaultScriptEditor - Loading script file /home/bl/ip/QuPath/app/TestJep.groovy; 02:40:28.109 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean red (from Java): 86.81525; 02:40:28.121 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean green (from Java): 72.492275; 02:40:28.124 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Mean blue (from Java): 68.141675; 02:40:28.624 [richscripteditor-1] [INFO ] q.lib.scripting.DefaultScriptEditor - Started JEP: jep.Jep@6bc4b2e2; ImportError: numpy.core.multiarray failed to import; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f930536d03f, pid=27357, tid=0x00007f932091e700; #; # JRE version: OpenJDK Runtime Environment (8.0_111-b14) (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14); # Java VM: OpenJDK 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [jep.so+0x1a03f] convert_jndarray_pyndarray+0x5bf; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/bl/ip/QuPath/app/hs_err_pid27357.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #. [1]+ Aborted (core dumped) ./QuPath; ```. I am thinking that this might be worth bringing up with the JEP developers. I am going to spend a little more time playing with JEP by itself in order to see if I run into any similar issues.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262870405:10070,log,log,10070,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262870405,1,['log'],['log']
Testability,"y in at the end. 1. Create an annotation around the cells you want to generate in a certain way (sometimes I want to create larger cells for muscles vs smaller for other tissues), then generate your cells for each annotation.; 2. This step could use a short script from Peter (select all cells within a certain annotation class), but if you select a given subset of cells by picking one annotation (usually easy enough by clicking on that annotation in the hierarchy and shift+clicking) you can then add a dummy measurement to those cells using settings in the Compute Intensity Features (or a script, probably) that you do not need for classification. In my case I chose Hue-Mean.; 3. Include Hue-Mean in your classification script as a measurement it checks for the presence of, and if not found, the classifier does not even try to classify those cells. I tested this by adding Hue-Mean, Saturation-Min, and Saturation-Max to three different sets of cells, and was able to run 3 different classifiers on all of my cells, and only have the correct cells (the ones with the dummy measurement) receive the results of the correct classification.; I'm sure this is somewhat complicated by the TMAs and dealing with multiple cores, and I haven't had a chance to figure out how to make that work since you can't draw an annotation to include multiple TMA cores, but maybe this could prove useful as a stepping stone for running multiple classifiers within a TMA. Here is the code for the dummy Hue-Mean classifier (specifically run at 0.50 µm). I have muddled around in the code here, and I think this is working because I never create a ""def"" for my ""baseClass"" of ""Tumor."" There is almost certainly a more elegant way of doing this instead of my hacking and slashing at the code until it does what I want. ```; import qupath.lib.objects.classes.PathClass; import qupath.lib.objects.classes.PathClassFactory; import qupath.lib.scripting.QP. // Parameters to modify; List<String> includeClassesWithName =",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-289248209:1185,test,tested,1185,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-289248209,1,['test'],['tested']
Testability,"yway: it's already the case. You can use *View &rarr; Multi-view... &rarr;* to create a grid of viewers, and the toggles apply across all of them. I agree it's sometimes restrictive, but my feeling is that it would cause more trouble if that didn't happen. What I really meant though was that a single viewer could be extracted into its own window, but the main QuPath window would remain as it always was. That's the approach in the PR. The alternative was that viewers are either all in grid mode or all in 'detached' mode (floating windows), but not a combination of both. > Final thought is, if we implement this, we need to consider what should be the advantage of having one QuPath instance with two viewers over having two QuPath instances open each with one viewer, and we should probably aim our design in that direction. Otherwise it could both be a lot of work and even end up with ambiguity in user experience (eg ""if I press this button, which image is affected...? or both...?""). We already have the ambiguity - it's 'resolved' by there being a red boundary around the 'active' window, and it's also the title in the title bar. But we might need to make this much more prominent, and I think the PR currently has some focussing surprises (I guess because bringing the main window into focus can grab it away from the detached viewer that we previously had active). I guess the advantage of two QuPath instances is hinted at by your previous comment: that would free you from having synchronized display settings. But it's pretty hard to get two instances launched on macOS - I can get them via the terminal, but double-clicking the app is stubbornly singleton. The big *disadvantage* of multiple QuPath instances is that there are no measures taken to 'lock' projects, and stop things getting messed up by incompatible changes being made in different instances. But I guess that's another problem (and an important one, since people may use QuPath with a project on a server somewhere).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081:2990,stub,stubbornly,2990,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081,1,['stub'],['stubbornly']
Usability," I can't find it now. Anyway, rough workflow for me:; `def string = ""G:\\MyProjectData\\Data""; saveDetectionMeasurements(string, ); saveTMAMeasurements(string, ); saveAnnotationMeasurements(string, )`; I first use that script and edit it for whatever project I want to export from, then ""Run for project"" and select all of the slides. I specifically need the double slashes because I am running Windows. Once all of the annotation files are in one place, I use the following R code to merge it all into one .csv file, which I finally open in Excel, edit for clarity, and save. You may find it easier to edit the file names before running the R script, I usually use a bulk file rename utility.; ```; library(dplyr); library(readr); #Takes multiple annotation files in a ""Path"" directory and mergest them into a single CSV document. Each line of the ; #CSV file represents an annotation, and if a file has multiple annotations, only the first is listed with the file name; # and all subsequent blank names are part of the first listed file.; path = ""G:/MyProjectData/Data""; setwd(path); outFile <-""Tumor Assay Annotation measurements.csv"". #Replace .txt with whatever identifier will pick up all of the files you want to analyze. Detections or Annotations are common choices; Annotationfiles <- dir(path,pattern = "".txt""). #an empty frame to place data into; Measurements <- data.frame(); #simple for loop to read each file and keep a sum of the cell areas.; for(i in 1:length(Annotationfiles)){; data.raw <- read_delim(Annotationfiles[i],""\t"", escape_double = FALSE, trim_ws = TRUE); ; #place the file names in the first column; Sample = tools::file_path_sans_ext(Annotationfiles[i]); data.raw[1,2]<-Sample; Measurements<-bind_rows(Measurements, data.raw); ; ; }. #set row names to F if you don't want a numbered list as the first column; write.csv(Measurements, outFile, row.names=T); ```. I am not an expert R coder, so I am sure there are more elegant ways to accomplish this, but it works for me!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/79#issuecomment-305082313:1445,simpl,simple,1445,https://qupath.github.io,https://github.com/qupath/qupath/issues/79#issuecomment-305082313,1,['simpl'],['simple']
Usability," It is somehow interpreted by Bio-Formats as a single-channel non-pyramidal image yet throws an error when one tries to open it directly. However the image itself must be ok, as it looks fine in the Zeiss software. If this image can be shared with the Bio-Formats team, they may be able to address these issues. Finally, one of the delays to m3 is I've been doing the groundwork to make image servers smarter. The relevance here is that it means that an image server is able to dynamically crop and/or reposition parts of an image to generate 'pseudo' whole slide images in QuPath, which might be composed of different pieces. They can also do extra fancy things like apply color transforms or concatenate channels. It will take some time to make this to become a fully-usable part of the software, but it relates to the problem as follows:; * if your cores are as separate images, QuPath should be able to merge them together to _act_ like they are in the same image; * if you have multiple TMA slides, QuPath could dynamically crop out the cores and assemble pseudo-slides that position the cores however you like. This means, for example, your image might group samples from a patient side by side for easy comparison - even if they were actually spread across multiple slides originally. This has some limitations, e.g. if your cores aren't in a pyramidal format (but rather one 5000x5000 pixel image, for example) then combining these together dynamically won't end well. To get any kind of usable performance, it will be necessary to convert the files to make them pyramidal. I hope that makes some kind of sense, describing what's possible now, what problematic, and what's coming... > **Important PS.** There's currently a post advertised to join me at work on QuPath [here](https://www.vacancies.ed.ac.uk/pls/corehrrecruit/erq_jobspec_version_4.jobspec?p_id=048500). With more than me working on it, things should be _much_ faster - please pass on the link to anyone who might be interested!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/337#issuecomment-509982536:3184,usab,usable,3184,https://qupath.github.io,https://github.com/qupath/qupath/issues/337#issuecomment-509982536,1,['usab'],['usable']
Usability," be breaking... and when a path needs to be found through the pain (e.g. the ability to import images from v0.1.2 projects to v0.2.0). When it's in the public API, we have no idea how it is used or the implications of our changes. Because the scripting approach I proposed only uses `ImageDisplay` internally, so long as any improved approach is capable of supporting a method that does the same thing then we're free to change the method in `QPEx` without worrying about breaking things for anyone else. We can even move it up into `QP` so that it works without knowing anything about the viewer at all. I think that as a compromise this is more than fair. It means you get the outcome you want, and we did not have to compromise to do something that I strongly believe will end up wasting a lot of time in the future (be that mine or someone else's). QuPath remains a 0.x.x release and so the API shouldn't be interpreted as stable. I don't encourage writing extensions for that reason. But I do recognise that extensions are important, and so if someone wants to do it (aware of the risks) then it is supported. I hope that more clearly explains my logic. Since it feels like we've discussed this subject many times, I thought I should be thorough in this answer. Now I've no time to shorten it.... I hope it is useful. v0.2.0 has been a rather... intense experience. Pretty much the entire software has been rewritten, while still trying to keep it basically functional and respond to the ever-increasing questions and requests from users. Sometimes it gets exhausting. QuPath is by no means finished, but I do think it is substantially better and more coherent than it previously was. The goal of v0.2.0 was to get decent foundations as quickly as possible - but the task turned out to be huge. The importance of many of the new features will only become clear in future releases. v0.3.0 won't have so many milestones, and I hope will mark the start of a more sustainable development approach...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:5867,clear,clearly,5867,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,2,['clear'],"['clear', 'clearly']"
Usability," may not be very accurate between samples (if the staining is not!). You can find more about[ scripting classifiers here](https://gist.github.com/Svidro/5b016e192a33c883c0bd20de18eb7764).; ```. blueThreshold = 0.45 //Set to class Tumor; brownThreshold = 1 //Set to class Stroma. // Get cells & reset all the classifications; def cells = getCellObjects(); resetDetectionClassifications(). cells.each {it.setPathClass(getPathClass('Negative'))}. // Get channel 1 & 2 positives; def ch1Pos = cells.findAll {measurement(it, ""Nucleus: DAB OD mean"") > blueThreshold}; ch1Pos.each {it.setPathClass(getPathClass('Tumor'))}. def ch2Pos = cells.findAll {measurement(it, ""Nucleus: Hematoxylin OD mean"") > brownThreshold}; ch2Pos.each {it.setPathClass(getPathClass('Stroma'))}. // Overwrite classifications for double positives; //def doublePos = ch1Pos.intersect(ch2Pos); //doublePos.each {it.setPathClass(getPathClass('Double positive'))}. fireHierarchyUpdate(); ```; A couple of notes here, the Sigma that worked best for finding your blue cells and not splitting them DOES cause problems with multiple cells being merged in some of your ""DAB cell"" areas. A lower Sigma will break up the cells more, while a higher one will prevent individual cells from being incorrectly split. Also, since I don't know what classes you have currently colored/created, I labeled the two cell types ""Tumor"" and ""Stroma"" in the above script (those two classes are included by default). You can change those to anything that makes sense to you simply by editing the name in the script. If you then right click in the list of Annotation classes in the left Tab, you can create and color any class you want to use. Also, the values for the thresholds for each class are at the top, and you can and should modify those to whatever you think is most accurate, I just took a guess based on the _Measure->Measurement map_.; ![image](https://user-images.githubusercontent.com/23145209/50451238-a9c15c80-08e7-11e9-8782-c2fbddb49f28.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/250#issuecomment-449989226:3118,simpl,simply,3118,https://qupath.github.io,https://github.com/qupath/qupath/issues/250#issuecomment-449989226,1,['simpl'],['simply']
Usability," not. There is an enigmatic statement [here](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L368) that color transforms are ```// Not supported in batch mode, so disable option to avoid confusion``` although I don't recall why... There's also a [hard-coded limit](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java#L229) whereby the macro runner rejects an image with more than 5000x5000 pixels... although the wisdom of this specific limit may also be questionable. I'll look into it, but at the minute it looks like both issues represent 'intended behavior, albeit not desired behavior (by the developer or anyone else)'. Not sure what the right word for that is. In the meantime, depending upon how happy you are with Groovy/Java/the ImageJ API, it would be possible to create a Groovy script to run in QuPath that grabs regions from the image, converts them into ```ImagePlus``` objects for ImageJ, performs whatever processing is required using ImageJ (or even OpenCV or other dependencies if you prefer), and optionally sends back results as the ```PathObjects``` that QuPath requires. There is considerably more effort involved in setting this up for the first time and learning the main methods required (IntelliJ is more or less essential to get auto-complete and link up to the source code), but has the reward of giving you far more ability to customize the analysis and how the results are returned. I have used this approach a lot. If you would like to try this out, the code within [```ImageJMacroRunner.java```](https://github.com/qupath/qupath/blob/master/qupath-extension-ij/src/main/java/qupath/imagej/plugins/ImageJMacroRunner.java) may help to get started, or see the ```Estimate_background_values.groovy``` script included as supplementary material with the [bioRxiv preprint](http://biorxiv.org/content/early/2017/03/06/099796).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/68#issuecomment-297931966:1508,learn,learning,1508,https://qupath.github.io,https://github.com/qupath/qupath/issues/68#issuecomment-297931966,1,['learn'],['learning']
Usability," object of a hierarchy to transform the entire hierarchy easily and intuitively.; ; * I don't think we should give a serialize export option in the menus. We should move away from Java serialization as much as possible, and discourage anyone from use it; we should still support it for import though. Groovy make serialization quite easy if it's required in a script anyway... except if things are circular. Which brings me to... * `exportObjectsAsSerialized` looks like it doesn't actually use the transformed list; it also potentially allows circular references via parents/children, which could be confusing and/or buggy. I don't think we need this method if we are discouraging serialization (although I could be wrong... especially if we find a way to use it internally for convenience). * *If* `importObjectsFromSerialized` is in the public API, I think it should handle things other than lists, e.g. individual objects, arrays of objects, collections. But I'd prefer to expose it in the public API only if its benefits are clear enough. * It looks like `.qpdata` is being used for serialized object lists. We really shouldn't add a new file type with the same extension. Rather, we *can* read objects from an existing `.qpdata` file using [`PathIO.readHierarchy(File)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/io/PathIO.java#L410) - this should work even if the server is unavailable itself. The ability to import from old `.qpdata` files is important, but I'd like to avoid encouraging anyone to write `.qpdata` files other than those handled internally within projects (to make it easier for us to replace the format in the future). * A common use case will be transferring objects between images in the same project. Ideally this would be possible without exporting/importing, but rather simply choosing the project entry for import. Internally, this can use [`ProjectImageEntry.readHierarchy()`](https://github.com",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:3497,clear,clear,3497,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,1,['clear'],['clear']
Usability," of the folder:; > 2) In QuPath - perform cell detection; > 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); > 4) Export detections with annotation into .roi file. Ok, you don't describe your images being whole slide images - so I assume they can be read into ImageJ fully and without problems. In that case, you might try this QuPath script:; https://gist.github.com/petebankhead/8d541effc8898d6a07edd4ed95b6929c. Keep in mind that a `.roi` file contains a single region; as far as I'm aware, a `.zip` file is needed for all the QuPath objects to be represented in a way ImageJ can access all in one go. > So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. Ok, but please keep in mind that ImageJ has existed in some form for more than 30 years, and has had input from many fantastically knowledgeable people both in terms of development and documentation. There has been a huge amount of volunteer effort, alongside many components and plugins developed as part of larger, funded projects. On the other hand, QuPath was created and documented essentially by one person and has only been available for a couple of years. The same person also wrote all the wiki, the [blog](https://petebankhead.github.io), is the main person writing scripts to everyone who asks on GitHub and Google Groups, teaches workshops on it when invited and has got time, and wrote detailed instructions for setting it up with IntelliJ to script with auto-completion & access to the f",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:1259,simpl,simple,1259,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['simpl'],['simple']
Usability," personal info to install so I don't want to use it. There are some [links here](https://qupath.readthedocs.io/en/0.4/docs/intro/formats.html#mrxs-3d-histech) that may help give some idea what it's not exactly my favorite file format for whole slide scans. I have seen examples of mrxs images where failing to crop results in very excessive padding (and the associated computational problems), so I still thing cropping / avoiding padding is the more appropriate choice for QuPath to make as a default... and the .scn example demonstrates that it's the right choice there. In conclusion, it sounds like:; * QuPath isn't doing anything weird or buggy - it's behaving as it should here; * You can use QuPath with your pyramidal tiffs, no matter how they are generated (as long as they can be opened by either OpenSlide and Bio-Formats); * You can use QuPath with the mrxs images used to generate tiffs if you do **one** of the following; * generate the tiffs to give the cropped/unpadded region, e.g.; * using [`libvips` and `autocrop`](https://github.com/openslide/openslide/wiki/OpenSlideAndVIPS#slide-bounds); * using QuPath itself (to write an ome-tiff); * import into QuPath with the `--no-crop` option; * correct the coordinates as required when switching between software depending upon whether it adds padding or not; * You *may* be able to use QuPath with other software as long as it doesn't use OpenSlide to read the .mrxs files... but this is untested since very little software seems to support .mrxs directly, and the format is so complex that it doesn't seem at all clear what the 'true' size of an .mrxs file is. Finally (again), OpenSlide Python itself supports conversion to .dzi, which has a [`limit_bounds` option](https://openslide.org/api/python/). All in all, I don't think QuPath is the thing that's making this complicated... it's just unfortunately complicated because of the use of proprietary formats at a lack of standardization around how exactly they *should* be handled.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631272136:2559,clear,clear,2559,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631272136,1,['clear'],['clear']
Usability," that I can round or floor when scaling up, and then round or floor when scaling down, but I wasn't completely sure which I should be doing so I created a quick Python simulation to test what happens: https://gist.github.com/petebankhead/2d4a21cb69f3b68c8f8fa14475723647. Based on this, it seems I need to round in both directions... which was maybe a predictable conclusion for the more mathematically confident, but I wasn't sure of it's what QuPath does internally* and we can't count on users necessarily knowing that. (*However*, note that if the downsample is < 1 then all the methods fail...). I think it would be nice to resolve the ambiguity somehow, although adding an extra method; ```java; public T readLevel(int level, int x, int y, int width, int height, int z, int t);; ```; looks like a horrible explosion of ints. A possibly-simpler alternative might be to support something like this:; ```java; public T readScaledRegion(double downsample, int outputX, int outputY, int outputWidth, int outputHeight, int z, int t);; ```; where the coordinates are defined according to the output image, but the downsample isn't fixed to *have* to be a pyramidal level. Thinking about it, that could potentially be implemented more simply with another default method added to the interface that ultimately just called `readRegion`. The main trouble is that I don't know what to call the method. I'll keep thinking and try to add something to this PR.... *- I think that QuPath is doing the right thing in most places (based on [this](https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/images/servers/TileRequest.java#L142) and [this](https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/images/servers/TileRequest.java#L142)). But I strongly suspect the [`TileExporter`](https://github.com/qupath/qupath/blob/9eaf034e2cd0325d38967bde5ac43900ddc15e3f/qupath-core/src/main/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089:1920,simpl,simpler,1920,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089,1,['simpl'],['simpler']
Usability,"'If you do press undo, have you tried doing so multiple times? I mean, if the shape is being modified then a 'valid' version might be 'several undos back'.'; Yep, that's exactly what I hoped for but it seems as if the geometry below is somehow corrupted. The shape of the annotation is still visible on the slide an can still be moved around on the slide. However, no modification whatsoever is possible any more if this bug appears. . I'll just try installing the M7 version. Didn't even know, M7 has already beeen released until Svidro mentioned that in his post 7 minutes ago. I deleted the annotation just after taking the screenshot. Sorry for that. If it happens again, I will follow your instructions :). Very pleased about your fast answer. Thanks a lot, folks! :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/381#issuecomment-561275095:17,undo,undo,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/381#issuecomment-561275095,2,['undo'],"['undo', 'undos']"
Usability,"(On a call, so these comments are made with only half my attention...). I like the main split with title panes, but think I was wrong to separate the built-in in this way - it looks odd when one list is full and the other isn't, and sizing doesn't accommodate this. The same list would be fine for both, as long as there is some way to clearly distinguish that some are built-in and that's why they look different. The panes shouldn't be collapsible, to make it harder to create unexpected layouts. I really like opening the URL on double-click, but wonder if that should be a third button? I'm apprehensive about launching a browser without the user knowing that is what will happen.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342#issuecomment-1748473193:336,clear,clearly,336,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342#issuecomment-1748473193,1,['clear'],['clearly']
Usability,", but I wasn't completely sure which I should be doing so I created a quick Python simulation to test what happens: https://gist.github.com/petebankhead/2d4a21cb69f3b68c8f8fa14475723647. Based on this, it seems I need to round in both directions... which was maybe a predictable conclusion for the more mathematically confident, but I wasn't sure of it's what QuPath does internally* and we can't count on users necessarily knowing that. (*However*, note that if the downsample is < 1 then all the methods fail...). I think it would be nice to resolve the ambiguity somehow, although adding an extra method; ```java; public T readLevel(int level, int x, int y, int width, int height, int z, int t);; ```; looks like a horrible explosion of ints. A possibly-simpler alternative might be to support something like this:; ```java; public T readScaledRegion(double downsample, int outputX, int outputY, int outputWidth, int outputHeight, int z, int t);; ```; where the coordinates are defined according to the output image, but the downsample isn't fixed to *have* to be a pyramidal level. Thinking about it, that could potentially be implemented more simply with another default method added to the interface that ultimately just called `readRegion`. The main trouble is that I don't know what to call the method. I'll keep thinking and try to add something to this PR.... *- I think that QuPath is doing the right thing in most places (based on [this](https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/images/servers/TileRequest.java#L142) and [this](https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/images/servers/TileRequest.java#L142)). But I strongly suspect the [`TileExporter`](https://github.com/qupath/qupath/blob/9eaf034e2cd0325d38967bde5ac43900ddc15e3f/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java) isn't always doing the right thing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089:2311,simpl,simply,2311,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1278540089,1,['simpl'],['simply']
Usability,"- [x] 'Owner' is higher than 'Repository'; - [x] The gap before 'Cancel' seems to be using space that 'Repository' could have; - [x] There should be some separation between the owner text field and repository label; - [x] After clicking 'Add extension' once, the other options appear - but then clicking it again has no effect. So it's not clear what exactly is the purpose of the button, or if it has the right text on it.; - [x] It's confusing that there's a list, but nothing can be selected. If I click on the list, the top item can take the focus, but nothing else.; - [x] I'm not sure if the version needs some indication of what it is, either by using a table (and column heading) or adding a v at the start; I think centred vertical alignment for the version and buttons would look bette; - [x] The description text would ideally be lighter in color (e.g. using opacity); - [x] The purpose of the 'remove' and 'update' buttons is unclear - especially for built-in extension that can't be changed. ; - [x] Does update 'Check for updates' or actually update?; - [x] I'm not sure that 'Cancel' and 'Accept' are the right terms; I assume 'Accept' basically means 'Download & install'?. > I'm not sure if the version needs some indication of what it is, either by using a table (and column heading) or adding a v at the start;. I'd be more inclined to even do ""version: 0.1.0"" rather than having column headers that would be largely redundant. > Does update 'Check for updates' or actually update?. It checks for updates; if one is available, it asks if you'd like to download it. If not, it pops up a notification saying it's up-to-date. > I'm not sure that 'Cancel' and 'Accept' are the right terms; I assume 'Accept' basically means 'Download & install'?. Yes, similarly it asks if you want to download before going ahead. ![Screenshot from 2023-10-02 22-37-08](https://github.com/qupath/qupath/assets/10779688/b0404e3f-320d-4fbf-b990-3cad161dee24). Note that here the top list is focusable, the",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342#issuecomment-1743806490:340,clear,clear,340,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342#issuecomment-1743806490,1,['clear'],['clear']
Usability,". We now have a pretty general way to support deep learning via [`DnnModel`](https://github.com/qupath/qupath/blob/4eb74946602d8df605402909c753fca027fa3c26/qupath-core-processing/src/main/java/qupath/opencv/dnn/DnnModel.java). I'm sure the design will need to be improved in the future, but the general idea is to try to require as little as possible to implement a new deep learning extension: basically, implement `DnnModel` and (ideally) also register it with `GsonTools`.; [Here](https://github.com/qupath/qupath-extension-tensorflow/blob/main/src/main/java/qupath/ext/tensorflow/TensorFlowExtension.java#L46) is where that happens for TensorFlow. [StarDist](https://github.com/qupath/qupath-extension-stardist) is now also in its own extension; the builder can take a `DnnModel` as an input as an alternative to a path, so it's relatively easy to add an alternative way or using the model. There's no longer any need to build QuPath from source because [OpenCV can be used instead](https://qupath.readthedocs.io/en/stable/docs/advanced/stardist.html). The main reason for all this is that it will make it much easier to use deep learning models within QuPath in different ways, e.g. for object classification, or for semantic segmentation as a drop-in replacement for a pixel classifier. In fact, as long as DnnModel is JSON-serializable (ideally just requires a URI) then this already works, but the process needs to be cleaned up and documented. In the meantime, there are a few videos showing U-Net as live pixel classifier [here](https://twitter.com/petebankhead/status/1406856875732258821?s=20). @dkurt I completely understand if you've lost interest in this after all this time, but if you ever want to update your code to work as an extension in its own repo (I'll link to it) I'd love to give it a try - and I know there are [users who are very interested in benchmarking and trying to maximize StarDist performance](https://forum.image.sc/t/thoughts-on-0-3-2-rc2-with-stardist/56481) :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-912009706:1410,learn,learning,1410,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-912009706,1,['learn'],['learning']
Usability,".; >; > Once all of the annotation files are in one place, I use the following R; > code to merge it all into one .csv file, which I finally open in Excel,; > edit for clarity, and save. You may find it easier to edit the file names; > before running the R script, I usually use a bulk file rename utility.; >; > library(dplyr); > library(readr); > #Takes multiple annotation files in a ""Path"" directory and mergest them into a single CSV document. Each line of the; > #CSV file represents an annotation, and if a file has multiple annotations, only the first is listed with the file name; > # and all subsequent blank names are part of the first listed file.; > path = ""G:/MyProjectData/Data""; > setwd(path); > outFile <-""Tumor Assay Annotation measurements.csv""; >; > #Replace .txt with whatever identifier will pick up all of the files you want to analyze. Detections or Annotations are common choices; > Annotationfiles <- dir(path,pattern = "".txt""); >; > #an empty frame to place data into; > Measurements <- data.frame(); > #simple for loop to read each file and keep a sum of the cell areas.; > for(i in 1:length(Annotationfiles)){; > data.raw <- read_delim(Annotationfiles[i],""\t"", escape_double = FALSE, trim_ws = TRUE); >; > #place the file names in the first column; > Sample = tools::file_path_sans_ext(Annotationfiles[i]); > data.raw[1,2]<-Sample; > Measurements<-bind_rows(Measurements, data.raw); >; >; > }; >; >; > #set row names to F if you don't want a numbered list as the first column; > write.csv(Measurements, outFile, row.names=T); >; > I am not an expert R coder, so I am sure there are more elegant ways to; > accomplish this, but it works for me!; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/79#issuecomment-305082313>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AOahf43f2DYdFuBphZbwRo5-pV-cstbAks5r_PHQgaJpZM4Nqs8V>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/79#issuecomment-305188668:1627,simpl,simple,1627,https://qupath.github.io,https://github.com/qupath/qupath/issues/79#issuecomment-305188668,1,['simpl'],['simple']
Usability,".g. the *plugins* directory of a Fiji installation).; Then use *Send region to ImageJ* to send all or part of the image to ImageJ for processing, and call the *Trainable Weka segmentation* from there. > Note that QuPath won't actually use Fiji itself, but rather ImageJ1, so whenever you set the *plugins* directory to be that of a Fiji installation you may find that some commands don't work (if they have Fiji-specific dependencies). But I think *Trainable Weka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's ofte",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:1477,Simpl,Simple,1477,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['Simpl'],['Simple']
Usability,"/qupath-0.1.2/deploy/jars/logback-classic-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-core-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/reactfx-2.0-M4u1.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/richtextfx-0.6.10.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/slf4j-api-1.7.20.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/undofx-1.2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/wellbehavedfx-0.1.1.jar:./ QuPath 358.JPG -script t6.groovy. 21:54:22.653 [main] [INFO ] QuPath - Launching QuPath with args: 358.JPG, -script, t6.groovy; 21:54:23.003 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale FORMAT set to en_US; 21:54:23.005 [main] [INFO ] qupath.lib.gui.prefs.PathPrefs - Locale DISPLAY set to en_US; 21:54:23.022 [main] [ERROR] QuPath - Error running script!; javax.script.ScriptException: javax.script.ScriptException: java.lang.NullPointerException: Cannot invoke method getServer() on null object; 	at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); 	at QuPath.main(QuPath.java:162); Caused by: javax.script.ScriptException: java.lang.NullPointerException: Cannot invoke method getServer() on null object; 	at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:346); 	at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420486003:3583,undo,undofx-,3583,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420486003,1,['undo'],['undofx-']
Usability,"1 is clearly wrong to me; should probably be equivalent to selecting the outer rectangle, and definitely not throw a concurrent exception (whether or not it throws another exception, or a warning about undefined behaviour is another question). I think as much as it may not be intuitive, using the object hierarchy here is more flexible (ie, there may be situations where this is what people want to do, and as long as it's possible to toggle between, I tend to prefer flexibility). For 4, I can't decide if I should expect connections between disjoint annotations when both are selected. I think.... no...?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850:5,clear,clearly,5,https://qupath.github.io,https://github.com/qupath/qupath/issues/1590#issuecomment-2312272850,2,"['clear', 'intuit']","['clearly', 'intuitive']"
Usability,"1. https://groups.google.com/forum/#!searchin/qupath-users/small$20annotations%7Csort:date/qupath-users/TL6KCc6aB_E/UG3ESt5HBgAJ; 2. If your annotation is being generated by simple tissue detection, it might be easier to increase the minimum hole size value (Max fill area). Otherwise, I think the only way to do that would be to split the annotation into it's component parts, and then somehow reform it using only the components over a certain area measurement.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/219#issuecomment-420473760:174,simpl,simple,174,https://qupath.github.io,https://github.com/qupath/qupath/issues/219#issuecomment-420473760,1,['simpl'],['simple']
Usability,"85); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). 2. how precisely did the abnormal shutdown occur?. I had a VPN connection with my pc in the office and then somebody else logged in to the machine and I got logged out. The VPN connection is via a .rdp file where I can just use my home screen/pc as a window to my office pc (is this clear?). 3. can you give precise steps to replicate the issue? -> Yes I can for this one but it happened to me before and I can not replicate that anymore. . In this particular case, have VPN connection with a PC. ; Open the software; Open a project; Work on a picture in the project; Let somebody else login without login you out; Wait until this person is finished working; login yourself again; Try to continue working -> not possible, software will crash; Close software via the Task Manager; Open software and open same project; Particular picture you were working on is now no longer available. . 4. do the other images in the project work?; Yes the other images work. . Thanks! For now your quick fix has saved me a lot of time :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/512#issuecomment-640534382:5390,clear,clear,5390,https://qupath.github.io,https://github.com/qupath/qupath/issues/512#issuecomment-640534382,1,['clear'],['clear']
Usability,"; ```; that assumes `String` only. The map is documented to be unmodifiable, but [at least once in QuPath's code it is assumed to be modifiable](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L1527). *If* we don't need non-string objects (we'd need to check usages), I am thinking that we could deprecate all other methods in `MetadataStore`, leaving only `getMetadataMap()` to return a *modifiable* `Map<String, String>` - and provide default implementations for the other methods. Then, in this case, you could potentially provide a `Map` implementation that takes care of JSON serialization by subclassing [`AbstractMap`](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Map.html#get(java.lang.Object)). Since I was responsible for the original `MetadataStore` mess (and the associated [`MetadataMap`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/MetadataMap.java#L49)), I can look into how changing the interface might impact `PathObject`, where it is currently used. *If* you think this is a sensible approach, then you could proceed here by adding; ```java; public Map<String, String> getMetadataMap() // Or getMetadata() - see below; ```; and handling its implementation and (JSON) serialization - then any common interface that includes that method can be added later to `Project`, `ProjectImageEntry` and `PathObject`. What do you think?. One benefit of using a standard `Map` implementation is that Groovy scripting is nicer, e.g. see; * https://github.com/qupath/qupath/issues/1085. which is why we can now use `pathObject.measurements['Something'] = 2.0`. In fact, if we simplified the name further to `getMetadata()` the this should work in Groovy:; ```; pathObject.metadata['Something'] = 'A value'; project.metadata['Something'] = 'A value'; entry.metadata['Something'] = 'A value'; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2284505913:2046,simpl,simplified,2046,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2284505913,1,['simpl'],['simplified']
Usability,"> @imgifty can you help out by providing how you reinstalled pixman? The latest version I can find is 0.38.4-0ubuntu1 for focal. Hello phromo, I built it using following guide: http://www.linuxfromscratch.org/blfs/view/svn/general/pixman.html .; Sorry for the late reply.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/628#issuecomment-734304328:170,guid,guide,170,https://qupath.github.io,https://github.com/qupath/qupath/issues/628#issuecomment-734304328,1,['guid'],['guide']
Usability,"> Actually, tags are one key-word annotation. Ah... makes sense. > My suggestion is to add a one-keyword metadata field. Sounds sensible, but I wonder is it possible that people will then want tags with different interpretations?. The alternative I'm thinking is to simply have a dictionary entry ; ```json; {; ""omeroTags"": ""tag1, tag2, tag3""; }; ```; but I don't know whether it's safe to use a comma (or anything else) as a delimiter. Otherwise, I guess there could be a general `tags` list in a QuPath project entry. Do you think either option is strongly preferable to the other?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1289#issuecomment-1687567852:266,simpl,simply,266,https://qupath.github.io,https://github.com/qupath/qupath/issues/1289#issuecomment-1687567852,1,['simpl'],['simply']
Usability,"> Although if calling either method in a script, the ambiguity and potential for confusion remains.; I had mostly been thinking about scripting. If there is no primary selected object, and getSelectedObject() is used, the script would simply break and provide an informative error message. The user is trying to do something (get a particular object) while providing insufficient information (which object? multiple are selected). I suppose there could be an even worse option where you also encode getASelectedObject() which returns the first, or largest, or some other logic. > keep the primary selected object if it's still selected in the new group, and; > set the primary selected object if there is only one object in the selection group, but not if there is more than one. I was also just thinking about this - what situations lead to there being no primary object, and could those be addressed instead?. Alternatively, specially code getSelectedObject() to allow for an array, check for an array size of 1, and handle that situation specifically if it arises. Still return null in other situations, along with an informative error message (or warning).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869219746:235,simpl,simply,235,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869219746,1,['simpl'],['simply']
Usability,"> Could you provide an example script showing how it should be used please?. You can find a script using it [here](https://forum.image.sc/t/add-additional-channel-in-fluorescence-image-after-scanning/99174/16). I think it's simple enough not to change `TransformedServerBuilder`. > Including the example as a comment here is fine - and we should link to this issue in the CHANGELOG for anyone who wishes to read more. Updated in last commit. > Also: did anything change in the JSON serialization that could have compatibility concerns, i.e. if someone has stored an image in a project using ColorTransform in v0.5.1, can we expect it to work here?. No, the behaviour of the existing classes didn't change.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260011491:224,simpl,simple,224,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260011491,1,['simpl'],['simple']
Usability,"> However, based on the exception, I think the problem is that the [names ArrayList of the AbstractNumericMeasurementList class](https://github.com/qupath/qupath/blob/13bdeed047b4d05f35f47308b36b48c0f2bb3a24/qupath-core/src/main/java/qupath/lib/measurements/NumericMeasurementList.java#L102) is accessed from multiple threads without synchronization. Using a CopyOnWriteArrayList instead of an ArrayList may solve this issue. I think the list shouldn't be directly accessed elsewhere, and the `put` method (which calles `list.add`) is synchronized. Maybe the issue is that the `clear()` method isn't synchronized?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1936207910:578,clear,clear,578,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1936207910,1,['clear'],['clear']
Usability,"> I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. I this running on Windows 10, and are there any errors under _View &rarr; Show log_ when you try to open an .svs file? Does it work with the other version of QuPath on the same machine (v0.1.2)?. My guess is that OpenSlide isn't loading for you, but it's the same version as in v0.1.2... so it one works, then I'd expect the other to work as well. If you were running QuPath from an IDE (e.g. IntelliJ, eclipse) then paths would also need to be set for OpenSlide to work, and that would be an explanation. But if instead you follow the [step by step instructions](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide) right to the end, it should result in a QuPath.exe file that work if you double-click it without any further effort. The other option is to install the latest [QuPath Bio-Formats extension](https://github.com/qupath/qupath-bioformats-extension)... but it shouldn't be necessary for standard .svs files.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-410954902:778,guid,guide,778,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-410954902,1,['guid'],['guide']
Usability,"> I suppose there could be an even worse option where you also encode getASelectedObject() which returns the first, or largest, or some other logic. Hmmm, might need to think about it some more but I think that risks increasing rather than reducing complexity. I'd rather have fewer options with more predictable behavior - in rare cases where something more complex is needed, it's always possible to query all the selected objects and then filter them however you like. But I don't think that should be part of the core API. > I was also just thinking about this - what situations lead to there being no primary object, and could those be addressed instead?. `selectAnnotations()` is a good example. Basically, anything that can select multiple objects without a clear 'main' object. So if you would run another command like `selectObjects(p -> p.getPathClass() == getPathClass('Tumor'))` you'd see the same: possibly multiple objects selected, but no 'main' selection. Or, with my pull request, a 'main' selection plucked more or less randomly - *unless* only one object is available, in which case it's just what you'd expect. > Alternatively, specially code getSelectedObject() to allow for an array, check for an array size of 1, and handle that situation specifically if it arises. Still return null in other situations, along with an informative error message (or warning). Internally there is already a set of selected objects - distinct from the main selected object. However, if there is a main selected object then it should always be included in the set. I think errors/warnings need to be used very sparingly to avoid causing undue alarm. But I'm coming around to the compromise I mentioned above, which I think falls somewhere between my pull request and your original suggestion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869227006:765,clear,clear,765,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869227006,1,['clear'],['clear']
Usability,"> I'm apprehensive about trying to make the code too clever, and confusing people more by the menu changing when they click it. Yeah that makes sense! Maybe context sensitive isn't the way to go. Thank you for considering it though! :). > If the core issue is that the common things are too hard to access, would simply moving Show/hide higher up the menu be a solution?. This could definitely work as well. I would be super happy to have a one menu access for ""Add/Remove"", in the same vibe as ""Estimate stain vectors"" was given its own high-leven location instead of a submenu.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1644#issuecomment-2406685530:313,simpl,simply,313,https://qupath.github.io,https://github.com/qupath/qupath/issues/1644#issuecomment-2406685530,1,['simpl'],['simply']
Usability,> It looks like the exception is coming from the attempt to load the classifications (the ones that appear under the 'Annotations' tab). These are stored in the project under _classifiers/classes.json_.; > ; > Something has gone wrong with that file; you can try simply deleting it (if it exists) or replacing the corresponding file from another project. Deleting the classes.jon file worked! Is there something that I did wrong to create the issue that I can avoid in the future?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708523858:263,simpl,simply,263,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708523858,1,['simpl'],['simply']
Usability,"> Mmmm, I find I have no way to hide the unclassified TMA cores. And sorting my ascending/descending seems to only impact the two that I gave classes to - the rest remain stubbornly as they were (both before and after the classified core) - so I initially didn't think sorting was implemented. Ah yes, I think I misunderstood what my sorting logic was doing; should now be fixed. > Since we aren't dealing with NaNs, I have the feeling that string sorting would make sense here... even if that means 'Unclassified' being sorted as a string. That's intuitive to me, although it does somewhat point to the odd behaviour about unclassified things having a null class, or `PathClass.NULL_CLASS`... > And actually... what do you think about having 'Name' as another potential 'Measurement'... which we could relabel 'Sort by'? Then we could change 'Show measurement' to 'Show value' - both to save space, and because we're no longer limited to measurements. Sounds good, done. > Minor thing: when I assign a classification to a core after displaying the grid, this becomes available in the 'Classes' drop-down - which is nice. The less nice thing is that all the classes there appear deselected.... but aren't necessarily not visible. This should be fixed now, with only minor cursing at ControlsFX",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1588#issuecomment-2329158926:548,intuit,intuitive,548,https://qupath.github.io,https://github.com/qupath/qupath/pull/1588#issuecomment-2329158926,1,['intuit'],['intuitive']
Usability,"> Ok, so I've learned that OpenCV has a maximum number of channels, defined as `CV_CN_MAX`. That's set as 512, so any attempt to exceed that will fail.; > ; > Without a major rewrite of the pixel classifier, the most QuPath can do is provide a more informative error message. Sounds reasonable, I wouldn't expect most classifiers to benefit from using that many channels, given that they're all derived from a few dozen IHC channels at most.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092134032:14,learn,learned,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092134032,1,['learn'],['learned']
Usability,"> One option for Show/Hide would be to have the right click menu be context sensitive:; > ; > * If one or multiple classifications are selected and visible, the context menu becomes ""Hide selected classes"" (Instead of show/Hide > Hide classes in viewer); > * If one or multiple classifications are selected and hidden, the context menu becomes ""Show selected classes"" (Instead of show/Hide > Show classes in viewer). What about if multiple classifications are selected, some shown and some hidden?. I'm apprehensive about trying to make the code too clever, and confusing people more by the menu changing when they click it. If the core issue is that the common things are too hard to access, would simply moving `Show/hide` higher up the menu be a solution?. My hesitation with that is that currently the top part of the menu (above the divider) is all concerned with adding/removing classifications. So `Show/Hide` would have to go to the *very* top, to avoid interrupting this logical grouping... and, as you say, spacebar does that job, so `Add/Remove` might be needed more often.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679:699,simpl,simply,699,https://qupath.github.io,https://github.com/qupath/qupath/issues/1644#issuecomment-2358972679,1,['simpl'],['simply']
Usability,"> Related question: is the style guide for one assert, or just to test one function?. The important thing is to test one function with one set of parameters. To check the result, there is usually one `assert`, but in some situations (for example if the resulting object has no custom `equals` implementation) you can define multiple `assert`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265128232:33,guid,guide,33,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265128232,1,['guid'],['guide']
Usability,"> Should I do that here, or create another PR?. No, I think this PR should focus on adding `Project.getMetadata()` - anything else can/should be done later. Before going further with the general metadata support, I'd like to make sure that I was never using an `Object` with the `MetadataStore` within `PathObject`, in case that could be an issue. We also discussed having a new repo and module (`qupath-lib` perhaps?) similar to `qupath-fxtras` that contains generally-useful stuff that we can make permissively-licensed (i.e. Apache rather than GPL). I'd like to investigate adding a new, simple `MetadataStore` interface to that module, so that we can deprecate the old interface entirely - but I don't want to rush that, and need to find an hour or two to think about it properly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2286003202:591,simpl,simple,591,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2286003202,1,['simpl'],['simple']
Usability,"> So I need to write scripting by myself?. Generally yes, if you want to do something non-standard... there is some more information under the [Automation](https://github.com/qupath/qupath/wiki) section fo the wiki. In time, the software will have more features - but if you need something customized, or a feature that doesn't exist yet, then scripting is the way to do it. There are lots of posts related to scripting at [Google Groups](https://groups.google.com/forum/#!forum/qupath-users) - which is generally a better place to ask questions than here, since this is really for 'Issues' (e.g. bugs, feature requests). But it helps a lot to explain very clearly what you want to achieve, what you've tried, and ideally to include screenshots.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-406673198:657,clear,clearly,657,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-406673198,1,['clear'],['clearly']
Usability,"> Yes, it does cause a problem for me, but I have a feeling your response is going to be ""stop abusing the alignment function""... Aha! It does sound like parts of this specific problem could/should be addressed within InteractiveImageAlignment. To use the current metadata, the only change I think is needed is to use `getMetadata()` instead of `getOriginalMetadata()` [here](https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/images/servers/LabeledImageServer.java#L157). You could try changing that to see if it works. Alternatively, without needing to edit or rebuild anything, can you simply convert your PNG to a calibrated TIFF within ImageJ (setting the pixel size there) *before* it is read into QuPath?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/591#issuecomment-673270150:654,simpl,simply,654,https://qupath.github.io,https://github.com/qupath/qupath/issues/591#issuecomment-673270150,1,['simpl'],['simply']
Usability,"> You should find that it prints null for getSelectedObject() selected object, even though clearly annotations are selected. . Correct. > I propose:; > ; > * If a primary selected object is specified, use that. Otherwise; > ; > * If the current primary selected object remains selected (i.e. it's still in the collection passed to the method), just keep it selected. Otherwise; > ; > * Select the first object in the collection passed to the select method to use as the primary; > ; > ; This makes sense, but are there use cases where it would not be appropriate?. > Another idea was to keep the object with the largest ROI, or at the lowest hierarchy level... but those all sounded more involved. Or at least to me, this does _not_ make sense. Not only does it quickly become more complex, but I personally don't believe a larger ROI is any more important than a smaller one. Perhaps it depends on the context.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869211413:91,clear,clearly,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869211413,1,['clear'],['clearly']
Usability,"> but I guess I don't understand when and why that matters, or if the URI could simply be given in some other way?; > ; > Unfortunately, I use Windows very rarely, network shares on Windows even less, and don't know much about more exotic URIs... tbh it's the same for me. So far as I understand, it's currently impossible to use valid file URIs on windows that are not mapped to a network drive. i.e. . ```; file://networkshare/c$/file.svs; ```. I am not 100% sure if it's possible to use files on network shares, when they are mapped to a network drive, i.e.; ```; file:///M:/file.svs; ```. And I should actually try this on a windows laptop first to verify. Initially, I was hoping that this might be some issue you're already aware of, and that the source of the bug might be obvious. I'll report back once I've tested this manually with QuPath on windows.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1049#issuecomment-1240712824:80,simpl,simply,80,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049#issuecomment-1240712824,1,['simpl'],['simply']
Usability,"> but I wonder is it possible that people will then want tags with different interpretations?. Yes, this is also true. > The alternative I'm thinking is to simply have a dictionary entry; > {; > ""omeroTags"": ""tag1, tag2, tag3""; > }; > ; > but I don't know whether it's safe to use a comma (or anything else) as a delimiter. Actually, I already thought of the solution but our final goal would be to sort the images within the current project according to one or more tags. > Otherwise, I guess there could be a general tags list in a QuPath project entry. I would rather go for this solution as I think it is the best way to make them independant and searchable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1289#issuecomment-1687762439:156,simpl,simply,156,https://qupath.github.io,https://github.com/qupath/qupath/issues/1289#issuecomment-1687762439,1,['simpl'],['simply']
Usability,"> can you simply convert your PNG to a calibrated TIFF within ImageJ (setting the pixel size there) before it is read into QuPath?. Wow, yes, that is a much better solution than writing the pixel size into my script. Thank you! ; The original vs current metadata might still be a problem for anyone exporting labeled tiffs, but I don't foresee that coming up often.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/591#issuecomment-673574139:10,simpl,simply,10,https://qupath.github.io,https://github.com/qupath/qupath/issues/591#issuecomment-673574139,1,['simpl'],['simply']
Usability,"> noticed that the memory would take a while to be dereferenced. Is this a problem though?. The tile cache should fill up, but that can give a massive performance boost *if* the tiles are requested again - which I'd expect could happen with at least some workflows. If it's undesirable, you can clear the cache if needed. From the description, it's not clear to me that this is a bug.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1040#issuecomment-1219606778:295,clear,clear,295,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040#issuecomment-1219606778,2,['clear'],['clear']
Usability,">Does setting it to any other location fail, or does it fail only if the location is on a network drive? I've learned of some network drive weirdness, e.g. QuPath can't be started from a network location on Windows, but don't know if it's related to this or not. Setting it to another location simply does not load the extension. But I have not tested whether this is because QuPath does not read the preference (which cannot be set anymore in the Preferences menu).; This was the case when the extension was going to be added to a local disk. No network drive. > Since Bio-Formats became built-in, I haven't had reason to use it much though and need to check some more how it behaves... We created an extension which you can found here https://github.com/BIOP/qupath-biop-extensions which we have been using sucessfully (and which is not updated to work with our little modifications to QuPath 0.2.2-m2",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476258374:110,learn,learned,110,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476258374,2,"['learn', 'simpl']","['learned', 'simply']"
Usability,"@DavidMHaumann Sorry I wasn't clear on the colour deconv subject. I was generally speaking on the color space, RGB, HSV, LUV but I was also thinking about standart HE and immunostains. Your case might be difficult. . I was sure SimpleTissueDetection2 was not using ColourDeconv but after looking at #93 I know a bit more what is using. For me it is working fine but I'm working with very standard stains. . However, I'm working also on some special stains where deconvolution is necessary and of added value, especially with regard to the cell-object segmentation that would follow. The link to ImageJ is very useful because you can send the region to ImageJ , deconvolve, normalize, analyse and return the objects ROI back to qupath interface for further visual inspection/analysis. There is a plugin on the embedded ImageJ installation with QuPath that allows the integration of regions from ImageJ to QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-352399785:30,clear,clear,30,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-352399785,1,['clear'],['clear']
Usability,"@Rylern figured out what's going on, and #1578 helps address this bit of undo/redo weirdness. The fix should be available in v0.6.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1487#issuecomment-2277243206:73,undo,undo,73,https://qupath.github.io,https://github.com/qupath/qupath/issues/1487#issuecomment-2277243206,1,['undo'],['undo']
Usability,"@Svidro Sorry to trouble you again. I've tried hard to code some Groovy script, but it's still quite mysterious to me. I'm wondering if you could show me the code to do the simple task of drawing a polygon on an opened image? I'll then try my best to follow up on your code. Assuming the coordinates of the polygon is X: [1, 2, 3, 4, 5], Y: [1, 2, 3, 4, 5]. Thanks so much~",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/140#issuecomment-359291582:173,simpl,simple,173,https://qupath.github.io,https://github.com/qupath/qupath/issues/140#issuecomment-359291582,1,['simpl'],['simple']
Usability,"@alanocallaghan yes, I had an integer version along the way. I changed mostly because it's not clear what the usual font size is, and the more flexible alternative allows the user to specify a percentage instead. Don't think this is a great implementation, but I've heard the script editor is likely to be replaced soon anyway.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1432#issuecomment-1835923514:95,clear,clear,95,https://qupath.github.io,https://github.com/qupath/qupath/pull/1432#issuecomment-1835923514,1,['clear'],['clear']
Usability,"@kwiechen As I understand it, MSYS2 is for building software on Windows. It might be handy in the future, but it won't solve the biggest problem that we need to somehow be able to create portable builds on all platforms. Currently, Windows is the least problematic because 'official' builds exist; Mac and Linux rely on package managers. Simply rebuilding from source on Mac/Linux isn't sufficient to solve the problem either, because of the numerous sub-dependencies that must be built, and also the platform-specific way in which these are subsequently loaded on different platforms. I can specify exactly which OpenSlide shared library to load, but then this results in the sub-dependencies also being loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide versions are often picked up. This is very hard (impossible?) to control from Java alone because the loading of sub-dependencies doesn't use the Java library path. I can get things to work on Windows/Linux/Mac fine, I just can't get things to work in a portable way. Somehow we need a streamlined process of building on *all* platforms that packages up all dependencies in a self-contained manner.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762108942:338,Simpl,Simply,338,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762108942,1,['Simpl'],['Simply']
Usability,"@melvingelbard ; 1.Prepare arranged `unique ID` in EXCEL; ![Snipaste_2021-10-16_11-06-56](https://user-images.githubusercontent.com/24513381/137571506-fb2baca9-98e0-4f94-b406-b6ca960d20e9.jpg). 2.Save as tab-delimited `.txt` file; ![Snipaste_2021-10-16_11-07-50](https://user-images.githubusercontent.com/24513381/137571544-36ceb3f0-c614-466f-a389-60ba34a4abc7.jpg). 3.finally rename file extension from `.txt` to `.qpmap`. My OS is in Chinese and it can be confused for you.; The official document I learned the `.qpmap` file is below, at `Import TMA map & survival data (optional)`.; TMA CD3 analysis · qupath/qupath Wiki; https://github.com/qupath/qupath/wiki/TMA-CD3-analysis",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-944846938:501,learn,learned,501,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-944846938,1,['learn'],['learned']
Usability,"@petebankhead -- Thanks for the feedback!. > [...] and using picocli for parsing would work well. When I searched how to use picocli to split my argument string into chunks, I could not find an answer. In the meantime, [this exchange](https://github.com/remkop/picocli/issues/1277) came-up in the picocli issues, and here's a potential solution:. > There is a list-like facility for unmatched parameters: see Unmatched Input.; > ; > The easiest way to use this is with the @Unmatched annotation:. ```; class MyApp {; @Unmatched; List<String> unmatched;; }; ```. I'll have to investigate this, but hopefully this means I can remove the `translateCommandline()` code I pasted into qupath.java and just use the libraries already imported into qupath.java. On the Groovy side though, I'm still trying to figure out how to parse the `this.args` string list. One way I tried is to use [args4j](https://github.com/kohsuke/args4j) as per [this gist](https://gist.github.com/seanf/6362260), but it means using an external jar library, which I'm not too keen on. I've been wondering if there is a way to do this with picocli since that can be imported into QuPath's Groovy and found [this page](https://picocli.info/picocli-2.0-groovy-scripts-on-steroids.html) which looks useful, but I haven't explored this much further. > I'm tempted to commit to Groovy-only and make the support better, rather than attempting to support Jython & more - I'd be very interested to know your thoughts on that. Me personally, I've always been happy with one / the most used scripting language in a piece of software. I love Python, but my requirements for small scripts never made me want to say, try to use Python to script ImageJ. Having one default scripting language also means there's only one way to do something, and makes it easy to copy-paste code from another script without having to worry about which scripting language the script was written in (I shamefully admit, I do that a lot with your Groovy scripts!). I'll",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741799108:32,feedback,feedback,32,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741799108,1,['feedback'],['feedback']
Usability,"@petebankhead Hi, thanks for the prompt and clear response. Their website is a little unclear about obtaining the data. There is a link on their page to a directory listing where you can download individual images. You unfortunately have to sign in to their site I believe to access this. These files are listed [here](http://ptak.felk.cvut.cz/Medical/dataset_ANHIR/images/), and the password can be seen on [this page](https://anhir.grand-challenge.org/Download/) after signing in. Edit: It's worth noting that this happens with many images, and the example is just one of them.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/459#issuecomment-620643098:44,clear,clear,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/459#issuecomment-620643098,1,['clear'],['clear']
Usability,"@petebankhead I use QuPath mostly on Win10/7 with or without GPU. I usually try to always install and use the most recent release version. You have made it very easy since version 0.2.X (by maintaining backward compatibility for projects). It is nice to have the msi installer and the ability to install multiple versions for advanced users. Occasionally that has created confusions for some of our users who are not so familiar or up-to-date with QuPath development and; not realizing consequences of working with the incorrect version. Since it is a per user install, It would be okay if the installer overwrites/upgrades the existing installation instead of creating a parallel install. In the event I do need a different version (Old or recent Snapshot) I can always use the zip version instead of having multiple versions installed. I do not have clear understanding of software versioning but is there any specific reason you are not using 1.X.X version for the next release! and not 0.X.X ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685#issuecomment-805880198:852,clear,clear,852,https://qupath.github.io,https://github.com/qupath/qupath/pull/685#issuecomment-805880198,1,['clear'],['clear']
Usability,"@petebankhead and @melvingelbard , sorry for the late response. I will use image.sc for feature requests if that is more suitable. (I thought it might be easy for you to track features and interlink them with commit ids here). I can access the numbers by double clicking, thanks for pointing that out. That should help a little. It would be nice to see at least 2 decimal places near the slider for the 32 float images (with low intensity values). I am not sure if it will hurt to have 2 decimal places when the values are greater than 10, or will it somehow affect the usability of the slider. Your suggestion might be better, to have 2 decimal places when the value is < 10, and 1 decimal place otherwise. Thanks for looking into this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/669#issuecomment-786174872:570,usab,usability,570,https://qupath.github.io,https://github.com/qupath/qupath/issues/669#issuecomment-786174872,1,['usab'],['usability']
Usability,"@petebankhead sorry for the late answer, but I finally had time to continue with this project. No I never experienced any errors when I used default parameters. Simpler models with lower resolution greatly reduce the error rate! So I guess you are right, that my classifiers were too complex and that this is part of the problem. I tried my approach on four different computers and I've had the same errors every time, when I started the pixel classifier on full resolution. . I've added one of my JSON files below. [2020-02-21 Pixel Model.zip](https://github.com/qupath/qupath/files/4235332/2020-02-21.Pixel.Model.zip)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-589578173:161,Simpl,Simpler,161,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-589578173,1,['Simpl'],['Simpler']
Usability,"@petebankhead thank you for tagging me on these changes. . > Since all `PathObject` instances now have an ID property, which should be unique, the use of 'Unique ID' as a property for a TMA core becomes even more confusing. I agree. > My proposal is to change **Unique ID** to become **Case ID**. You have my upvote for this. Not necessarily better but the alternative I could think of is **Subject ID** but it has a similar vibe to **Patient ID**. > Making the change involves an extra decision. The easy bit is to create methods for `TMACoreObject.setCaseID(id)` and `TMACoreObject.getCaseID()` - the old methods can remain temporarily, but emit a warning if they are called*. The trickier choice is whether to update the name used internally to store the value; I'd like to change it, but it means that IDs saved in QuPath v0.4.0 won't be recognized in older versions. If these changes mean less confusing and clear APIs in the future, then, the sooner we address them, the fewer projects will be affected. . I personally do not have a reason to go back to 0.3.X once I create a project in 0.4.0X - because I believe all the commands that were present in 0.3.0X will be available in 0.4.0X. Please correct me if I am wrong - Are there any methods/workflows that will be dropped in 0.4.0? It would be easy to make a decision if we could identify potential reasons for someone to want to go back to 0.3.X - besides the fact that not everyone is running the most up-to-date version of QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1114#issuecomment-1303784568:913,clear,clear,913,https://qupath.github.io,https://github.com/qupath/qupath/issues/1114#issuecomment-1303784568,1,['clear'],['clear']
Usability,"@petebankhead thanks for pointers. I re-compiled openslide with openjpeg, to get it working. I would like to debug the code too. Can you please guide me as how to setup my local build using eclipse? I was able to import the source code into eclipse.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/65#issuecomment-296876433:144,guid,guide,144,https://qupath.github.io,https://github.com/qupath/qupath/issues/65#issuecomment-296876433,1,['guid'],['guide']
Usability,"@petebankhead the last comment before it became closed came from @romainGuiet from which we heard no comments from you. Admittedly we did not pursue this further as we had a workaround in our version. ; I would be curious to have your opinion on how we did it and whether you think that the approach we took could break anything. The commands we built were pretty simple and were not breaking anything. they were of course not polished to look pretty but the desired effect and user satisfaction were worth the effort we had put into it. ; You can find the commands here:; https://github.com/BIOP/qupath-biop-extensions/blob/master/src/main/java/ch/epfl/biop/qupath/commands/ApplyDisplaySettingsCommand.java. There are two other commands in that directory that do similar things, but that were not so used in the end. The one people really liked was the one linked above. These are not doing or hacking anything special in QuPath to make them work, and having them in the QuPath main code would remove the package private issues I had to deal with.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632615374:364,simpl,simple,364,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632615374,1,['simpl'],['simple']
Usability,"@petebankhead, many thanks for fast feedback! I've marked this PR as draft and going to work further.; As you mentioned, there is also an option to use OpenCV API but OpenVINO API will give better performance (at least once I could fix asynchronous efficiency issue). Briefly answering your questions,. > Should the OpenVINO backend in OpenCV 4.5.1 offer an equivalent level of support and performance, or are there advantages in using this instead / as well?. Yes, it can help to avoid IR conversion, in example. OpenVINO natively can load only IR or ONNX at this moment. However it'll require a separate package with OpenCV linked against OpenVINO. > Can/could this work across Windows, Linux & macOS - or is it Linux-only?. Yes, no problem at all. I just published a test package for Linux only but going to expand it in future. > Am I right in thinking the dependencies are all Apache (or at least GPL-compatible)?. OpenVINO is Apache 2.0: https://github.com/openvinotoolkit/openvino/blob/master/LICENSE",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-777016613:36,feedback,feedback,36,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-777016613,1,['feedback'],['feedback']
Usability,"@pyushkevich . > Curious, do you offer or plan to offer a supervised learning-based object detection tool, sort of like Ilastik?. Yes! That is indeed what I was obscurely referencing I have a working prototype, but it is some way away from being useful (e.g. it shows a live overlay, but this can't readily be converted into any meaningful measurements or objects). I plan to write a bit more about it whenever I get time to work on it again, and have a clearer idea when it'll be ready. I'll send you a message, it would be great to discuss further and perhaps incorporate some of your experience from ITK-SNAP if you're interested. @Svidro ; Thank you, creative as always and nothing I'd ever have come up with :). @mnolan1989 . > In the end it actually worked great - a substantial amount of the paper we are about to submit made use of positive pixel detection (QuPath is referenced!). Great! Thanks for confirming... and for referencing :) Don't know if you saw I mentioned on Twitter recently that just over half the papers using QuPath this year didn't reference the *Sci Reports* publication - would be very good to turn that around!. And thanks also for the extra information on the lab side.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391979772:69,learn,learning-based,69,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391979772,2,"['clear', 'learn']","['clearer', 'learning-based']"
Usability,"@r-mvl You could try the following script to investigate; ```groovy; import qupath.lib.images.servers.*. FileFormatInfo.cache.clear(). // Directory containing files; def path = 'path/to/scn/files'. // Filter only scn files; def files = new File(path).listFiles().findAll{it.getName().endsWith('.scn')}. // Print available readers; for (builder in ImageServerProvider.getInstalledImageServerBuilders()); print builder. for (f in files) {; def uri = f.toURI(); // Print all possible readers for the current file; print ImageServerProvider.getServerBuilders(java.awt.image.BufferedImage, uri.toString()).size(); // Print preferred reader; print ImageServerProvider.getPreferredUriImageSupport(java.awt.image.BufferedImage, uri.toString()); }; ```; I've tried a lot of files this morning and haven't been able to find any that fail... it remains mysterious :/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-518131563:126,clear,clear,126,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-518131563,1,['clear'],['clear']
Usability,"@reynoldscem the source of this issue has been fixed. If you have a definite bug, please create an issue [here](https://github.com/qupath/qupath/issues/new?assignees=&labels=bug&template=bug_report.md&title=) following the template. If you are unsure if you have found a bug or not, please open a discussion on http://forum.image.sc/tag/qupath with clear description fo precisely what you have tried and what happens (including any information from *View &rarr; Show log*).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/348#issuecomment-623494686:349,clear,clear,349,https://qupath.github.io,https://github.com/qupath/qupath/issues/348#issuecomment-623494686,1,['clear'],['clear']
Usability,"@yli-hallila did you spot any patterns when it happened?. Like, was it a high-resolution pixel classifier, and did the memory use accumulate over time?; Would it happen after 3 images, 30 images, or 300 images...?. I'm hoping that there is some place where I'm just failing to release memory used by OpenCV / JavaCPP, but I thought I'd tracked down where that was the case. The script does two things: clears the cache, and calls the garbage collector. If the thing that helps is clearing the cache, then that suggests to me that it is delaying (rather than solving) the problem - and there is probably still a leak somewhere. If the thing that helps is running the garbage collector then... I guess I'm confused, because I think that should happen before an out-of-memory error occurs anyway. I quite like hunting for leaks (as long as they are in code I can control), but here I'm not sure where exactly I should start.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715940498:402,clear,clears,402,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715940498,2,['clear'],"['clearing', 'clears']"
Usability,"A little more on this: it is partly a Java issue - see [this StackExchange](https://softwareengineering.stackexchange.com/questions/20573/why-does-java-exit-with-success-after-an-uncaught-exception) post: Java exits with EXIT_SUCCESS on an uncaught exception. I have found the source of this uncaught exception: in `src/main/java/qupath/QuPath.java`, there are three different places where `runScript` is called, only one of which is protected by a `try`/`catch` construct, so if an exception is thrown in one of the other two cases (as happened to me), the exception is not caught but instead causes Java to crash. In particular, I can't then check for the logger message which is produced by this code in the first case:. ```; logger.error(""Error running script for image: "" + entry.getImageName(), e);; ```. So the solution would simply be to `try`/`catch` the other two cases as well. Best wishes, Julian",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/654#issuecomment-743001513:833,simpl,simply,833,https://qupath.github.io,https://github.com/qupath/qupath/issues/654#issuecomment-743001513,1,['simpl'],['simply']
Usability,A script like the following can be used to replicate the problem:; ```groovy; guiscript=true. def pathClasses = []; for (int i = 0; i < 500; i++) {; pathClasses << getPathClass('Another class ' + i); }. getQuPath().getAvailablePathClasses().clear(); getQuPath().getAvailablePathClasses().addAll(pathClasses); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/626#issuecomment-715103591:241,clear,clear,241,https://qupath.github.io,https://github.com/qupath/qupath/issues/626#issuecomment-715103591,1,['clear'],['clear']
Usability,"Adding simple text fields to objects would certainly be nice for cluster/neighborhood/external to QuPath analyses where users may prefer to add non-class labels like ""immune dense cluster"" rather than ""1"" and look up what 1 was. Especially in cases involving many clusters. ; Possibly make it locked behind a default ""Off"" setting. I am guessing it might result in data file sizes getting somewhat out of hand in the cases of millions of cells?. I am less certain that detection objects should have descriptions, but maybe making a ""toAnnotation"" or ""toDetection"" function to make object type swapping simpler when scripting would reduce the need to place complex labels on detections.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1005#issuecomment-1180616120:7,simpl,simple,7,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005#issuecomment-1180616120,2,['simpl'],"['simple', 'simpler']"
Usability,"Ah Excellent. ; I clearly didn't look very deep... The ease of doing so many things via plugins seems to have made me lazy,; Thanks for putting me in the right direction.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417778082:18,clear,clearly,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417778082,1,['clear'],['clearly']
Usability,"Ah it's better to give a detailed description of your file, which now we know contains Chinese characters, because that turns this into a different problem. In this case, the issue is located [here](https://github.com/qupath/qupath/blob/1dbc4816d08f01ed67ac2e45e768b44bd2d6a18b/qupath-core/src/main/java/qupath/lib/common/GeneralTools.java#L603), where QuPath reads the input file with a UTF-8 encoding. . There's no plan to change this unfortunately. I would simply remove the incompatible characters from your file in order for QuPath to process it. I was able to reproduce the issue with **and** without the Chinese characters though. The first option gave me an `IOException` at the location mentioned here above and the second one didn't give me an Exception but QuPath did misinterpret the grid in the file, as mentioned in my earlier post. In both case there is an easy workaround so hopefully that should be ok :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-946836728:460,simpl,simply,460,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-946836728,1,['simpl'],['simply']
Usability,"Ah, I was just thinking that, but stuck in lab meeting!; Yes, I tend to calculate my tissue areas after the fact in R rather than using the simple tissue detection, so when I saw that line in your script, I figured that might be what was happening. Good luck!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289537633:140,simpl,simple,140,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289537633,1,['simpl'],['simple']
Usability,"Ah, Peter just pointed this out to me, but you can try using Shift+E to perform a quick Undo, though I think it only goes back one step. It seems to work with the point tool as well, which is the three small circles in a triangle on the right-most side of the drawing tools. . Selection can be an issue, so far I have had to find work arounds with scripting in order to select multiple objects that are not nicely next to each other in the hierarchy.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75#issuecomment-300235539:88,Undo,Undo,88,https://qupath.github.io,https://github.com/qupath/qupath/issues/75#issuecomment-300235539,1,['Undo'],['Undo']
Usability,"Ah, apparently the channel swap doesn't apply to 8bit images! So much to learn.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323689007:73,learn,learn,73,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323689007,1,['learn'],['learn']
Usability,"Ah, fair enough. To me, it makes sense for there to be a single cell detection window, and I'd put sub-panes in that window if needed, but that sounds like a total pain and pretty useless in terms of overall UX gain",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1560#issuecomment-2256352714:208,UX,UX,208,https://qupath.github.io,https://github.com/qupath/qupath/pull/1560#issuecomment-2256352714,1,['UX'],['UX']
Usability,"Ah, thank you for investigating this!. The hierarchy event system is horrible, and traces back to the early versions of QuPath where the hierarchy was much more important, undo/redo didn't exist, and we didn't have a good spatial cache from JTS. Then, it was a continual fight to avoid very expensive processing every time an object changed - because `resolveHierarchy()` was effectively being called automatically, and lots of things needed to update. I thinks this shows event system is *very* overdue a major revision. > I'm sure there is reason behind it, but here a hierarchy changed event is emitted, instead of an object added event. From your post and my failing memory, I suspect that the idea was that the 'object added' event would just handle a single object, but if multiple objects were added then we fired a more general structure change event. I guess this was because, when adding a single object, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:172,undo,undo,172,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,1,['undo'],['undo']
Usability,"Ah, thanks @melvingelbard - so it *is* OpenCV-related. That's really good to know, seems to confirm my suspicions although I have no clue why. It also seems to be specifically the `org.bytedeco.opencv.global.opencv_imgproc` class - assuming object classifiers are working, then `opencv_core` and `opencv_ml` must be ok. If you still have access to the computer, you could check if pixel classifiers work - since they use `opencv_imgproc` as well. If they do, perhaps the problem is more restricted. If launched from a command line, there might be more detailed errors emitted at some point. On Windows, that can be done simply by using the console exe launcher. On a Mac, it means running something like this from a terminal `/Applications/QuPath.app/Contents/MacOS/QuPath` (exact path might need changed).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/776#issuecomment-873087104:620,simpl,simply,620,https://qupath.github.io,https://github.com/qupath/qupath/issues/776#issuecomment-873087104,1,['simpl'],['simply']
Usability,"Ah... I was logging on to give the same answer as above, but @Svidro beat me to it. But I see that the 'Name' column doesn't contain the TMA core if the cells are inside an annotation rather than directly inside the TMA core - which is the source of the problem, right?. I agree it would probably be useful to have the core always shown in the table, but in the absence of that you could use a simple script to repurpose the 'name' property for all your cells - setting it explicitly to be the same name as the core containing the cells. That way it still appears in the table. @Svidro already gave some of the code to do that [here](https://github.com/qupath/qupath/issues/57#issuecomment-289249459).; In your case, you might need to replace ```getParent()``` with ```getParent().getParent()```... to get the name of the object two levels up in the hierarchy rather than one - but the idea is the same. In the event that you might have annotations inside annotations, then doing it that way would get a bit complicated since sometimes you might need to go up three levels... or four levels.; In that case, a simpler script would involve looping through all the TMA cores, and naming the cells inside them. Does that sound like it would solve the problem, or have I misunderstood?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-289512650:394,simpl,simple,394,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-289512650,2,['simpl'],"['simple', 'simpler']"
Usability,"Also, the alternative to this PR is to simply make the constructor of `ObjectMerger` public (and, optionally, `sameClassTypePlaneTest`), then this code can live in the extension",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1502#issuecomment-2084811597:39,simpl,simply,39,https://qupath.github.io,https://github.com/qupath/qupath/pull/1502#issuecomment-2084811597,1,['simpl'],['simply']
Usability,"Alternatively, I could try to figure out how to do an automated recount and just run all of the .tif files through this and scrap my manual counts. Goal is just counting blood smear slides to determine the ratio of sickled vs. nonsickled RBCs in each frame. Ie. nice round cells in each frame vs. football shaped or shriveled cells. I was attracted to qupath as it seemed like a user-friendly way to get into automated cell counts, though I quickly realized I was over my head in trying to achieve this and just used it's points tool and went the old-school route.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461186493:379,user-friendly,user-friendly,379,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461186493,1,['user-friendly'],['user-friendly']
Usability,"An extra detail: this is less important if a project is used, since then the image path is stored in two places:; 1. The `.qpdata` file; 2. The `.qpproj` file. The path stored in the `.qpproj` file is used first. Fortunately, this is also the easiest to change: since the `.qpproj` file is text ([JSON](https://en.wikipedia.org/wiki/JSON)), this file can simply be opened in a text editor, and the paths replaced. In the event that a `.qpdata` file has already been created, and now won't open, there are two workarounds to handle this:; 1. Put the original image back in the location where it previously was, or; 2. Create a new project, and add the image to the project in its new location. Whenever any data relating to this image is saved within the project, QuPath will create a new `.qpdata` file inside the `data` directory of the project. If you replace this `.qpdata` file with the old one (after renaming it), then QuPath will treat it as the proper data from then on. Several morals of this story:; - If possible, don't move images to different directories after starting to analyse them with QuPath; - If you do (or might) need to move images, it's better to use projects - since they can be updated more easily later; - QuPath ought to handle moved images in a better way than it currently does...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/9#issuecomment-256318716:355,simpl,simply,355,https://qupath.github.io,https://github.com/qupath/qupath/issues/9#issuecomment-256318716,1,['simpl'],['simply']
Usability,Assuming the reason is the bug you mentioned (https://bugs.openjdk.java.net/browse/JDK-8205991) you could filter for non ASCII and for OS - if Windows 10 and non-ASCII = true -> warn.; I do not think it is intrusive. Better warn the user and point him directly to a simple solution rather than dealing with annoyed and clueless users. Special characters in words and names are not so rare (especially in the Windows world ;) ) and for example in hospital settings the usage of Windows is quite common.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-497790956:266,simpl,simple,266,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-497790956,1,['simpl'],['simple']
Usability,"Basically, the .qpdata file contains a full path to your image. If your image isn't there (e.g. because you moved the image, or changed to another computer) then this will fail. The project also contains the full path to the image, but it only needs to match the _name_ of the image with the name of the .qpdata file, and the .qpdata files are all stored in a folder called 'data'. So if you create a new project, add all your images based on wherever they are currently (so they have the right paths), then you only need to make sure that .qpdata file names correspond with the image names. Pop these .qpdata files inside the 'data' folder of the project and all should be well. That being said, strictly speaking you don't need to do any of this if you only need to extract points from a .qpdata file... it's possible to write a script that just extracts the points without needing to open the image at all. What isn't clear to me is where exactly your .tif files are relative to one another. Is it 200 .tif files in one folder, or 200 folders, or spread across subfolders of folders....?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461161849:921,clear,clear,921,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461161849,1,['clear'],['clear']
Usability,"Calling `Net.close()` is [reported to fix this](https://forum.image.sc/t/clear-memory-should-be-part-of-all-batch-scripts/46211/8)... although it's still not entirely obvious when or how this should be done. One option could be to use a [`Cleaner`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ref/Cleaner.html). If this works, it shouldn't require any API change and so could be included in v0.3.1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/841#issuecomment-964869028:73,clear,clear-memory-should-be-part-of-all-batch-scripts,73,https://qupath.github.io,https://github.com/qupath/qupath/issues/841#issuecomment-964869028,1,['clear'],['clear-memory-should-be-part-of-all-batch-scripts']
Usability,"Changed to simply try to load, ignoring the preference, in the `buildServer` method, if OpenSlide isn't already loaded, which seems reasonable to me.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1447#issuecomment-1935892889:11,simpl,simply,11,https://qupath.github.io,https://github.com/qupath/qupath/pull/1447#issuecomment-1935892889,1,['simpl'],['simply']
Usability,"Closing this issue after discussion with @melvingelbard... it's not something we plan to do, and would be very apprehensive about including the change even if someone else implemented it. As I mentioned above, the consistency thing has some (partly historic) reasons. We only started adding spinners recently; the underlying rationale has been that sliders are used when the range is known in advance, spinners are used when it's not... New commands will endeavour to apply this rule more consistently, and old commands will either be either removed or updated. Regarding spinners and mouse wheel input, I think this really would need to be implemented in JavaFX directly. There are ostensibly easy ways to add support by attaching a scroll listener, in my experience to date this can open a whole can of worms... basically, scroll events can differ a lot depending upon the input device/platform (not to mention 'natural' scrolling in some cases, which can flip the direction). Therefore I think the risk is too high of creating something that inadvertently makes the user experience *worse* for many, and we would have no way to test all the relevant platforms to check this. I presume the JavaFX developers have reasons for not implementing this directly yet - perhaps related to the reason I give. But in any case, they would have access to potentially more platform-specific information to enable a robust implementation. For these reasons, I'm afraid I don't think we can/should act on this feature request.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/495#issuecomment-641183465:1069,user experience,user experience,1069,https://qupath.github.io,https://github.com/qupath/qupath/issues/495#issuecomment-641183465,1,['user experience'],['user experience']
Usability,"Closing this issue because I'm afraid I don't see it as possible - at least not with the current cell detection. It might be more feasible in a future incarnation, but that may need to be radically different (e.g. like how the simple threshold in [v0.2.0-m5](https://github.com/qupath/qupath/releases/tag/v0.2.0-m5) can potentially replace simple tissue detection). Of course, feel free to prove me wrong with a pull request :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/327#issuecomment-549053462:227,simpl,simple,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/327#issuecomment-549053462,2,['simpl'],['simple']
Usability,Closing this issue due to lack of activity and because it's not clear if there's actually a bug or if it's just an inherent performance limitation of using vector-based annotations.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-518634600:64,clear,clear,64,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-518634600,1,['clear'],['clear']
Usability,"Closing this with the note that I was able to use Simplify Annotations to prevent the error from occurring. As mentioned it only happened with script generated annotations, and even then only when creating them off of a downsampled ImageProcessor, followed by upscaling them back into annotations in QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/401#issuecomment-595979672:50,Simpl,Simplify,50,https://qupath.github.io,https://github.com/qupath/qupath/issues/401#issuecomment-595979672,1,['Simpl'],['Simplify']
Usability,"Continued to work on this, and now the PR addresses both. * https://github.com/qupath/qupath/issues/1085; * https://github.com/qupath/qupath/issues/1087. **Please see the links for more detail. It's a fairly substantial change, so feedback would be very welcome!**. To see it in action, here is a script for multiplex classification - written for the famous [LuCa image](https://qupath.readthedocs.io/en/stable/docs/intro/acknowledgements.html) after running cell detection. The choice of threshold is dodgy, but the point is to show how this PR changes the way the scripter can interact with measurements and classifications, using a (I think) far simpler and more intuitive syntax, and fewer lines of code. ```groovy; // Get the server & cells; def server = getCurrentServer(); def cells = getCellObjects(). // Reset our classifications; cells.each { cell -> cell.resetPathClass() }. // Loop through channels; for (def channel in server.getMetadata().getChannels()) {; // Extract the channel name; def channelName = channel.name; ; // Skip some channels; if ('DAPI' in channelName || 'Autofluorescence' in channelName); continue; ; // Create a classification name from the channel; // Here, I take the first bit up until any whitespace; def classificationName = channelName.split()[0]. // Define the measurement we want; def measurementName = ""Cell: $channelName mean""; ; // Calculate some threshold from the measurement; // Here, just the mean; double threshold = cells.measurements[measurementName].average(); ; // Append a classification to all the cells above the threshold; cells.each { cell ->; if (cell.measurements[measurementName] > threshold); cell.classifications += [classificationName]; }; }. // Figure update (could do this automatically...); fireHierarchyUpdate(); ```. Closer inspection reveals a few Groovy tricks at work:. * `List.each { }` as a shorter alternative to for loops; * Avoid explicitly calling getters (e.g. `channel.name` rather than `channel.getName()`, `cell.measur",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235:231,feedback,feedback,231,https://qupath.github.io,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235,3,"['feedback', 'intuit', 'simpl']","['feedback', 'intuitive', 'simpler']"
Usability,"Converting arbitrary shapes to Geometry objects has proven horribly difficult, although m9 should be better than any previous version. From your example I can see a way to improve the conversion a bit in the next release. New complex annotations should be Geometry objects immediately, avoiding the need for the conversion later. In the meantime, this script works for me to create a slightly simplified shape that can be converted to a valid Geometry for your example:; ```groovy; def file = new File('/path/to/broken_area_roi.ser'). def obj; file.withObjectInputStream {; obj = it.readObject(); }. obj = ROIs.createAreaROI(obj.getShape(), obj.getImagePlane()); roi = qupath.lib.roi.ShapeSimplifier.simplifyShape(obj, 0.5). println roi.getGeometry(); println roi.getGeometry().isValid(). println obj.getArea(); println roi.getGeometry().getArea(); ```; The area has been changed slightly, but not by much. Perhaps this, or the *Objects &rarr; Annotations... &rarr; Simplify shape* command might help resolve the conversion for you?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/429#issuecomment-607483340:393,simpl,simplified,393,https://qupath.github.io,https://github.com/qupath/qupath/issues/429#issuecomment-607483340,3,"['Simpl', 'simpl']","['Simplify', 'simplified', 'simplifyShape']"
Usability,"Dear @Svidro . You gave me the best Christmas gift !!! Amazing help indeed! I thank you so much to help me for that. _I give you the following update and also put forward a few queries if you don't mind:_. **1.** **I was not sure how you found the following values for the Stain 1 and 2.** I mean, these:. ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""**0.18752 0.65887 0.72851** "", ""Stain 2"" : ""DAB"", ""Values 2"" : ""**0.72191 0.55664 0.41109** "". Did you use the technique (shown in this video https://www.youtube.com/watch?v=IpCDnPnFvDc&t=7s) to assign colour values for each ROI for each stain?; ![image](https://user-images.githubusercontent.com/44507241/50432704-490b3300-0899-11e9-89b5-87f5653ffc0f.png). **2.** **You mentioned in your post:** ""Certain sections of your sample are so dark that they basically show up as all colors. That makes them very difficult to distinguish, although it might be possible to exclude them or classify them as a third type if it is important enough."". **>My comment:** Essentially, they are the valid population of cells, so I would not like to exclude them. Would it be possible to classify them as a third type? . **>Also,** can I somehow make the Qupath learn that they belong to Stain 2/ DAB, by setting the ""Stain vector for their ROI""? I mean:; ![image](https://user-images.githubusercontent.com/44507241/50433088-aacc9c80-089b-11e9-9bb7-f975b4fbab7e.png). I hope you'll kindly take your time to help me with this again. I'm sorry that I get back to you lately each time - this is because I carefully go through your comments, try to replicate it, and gather questions for you. I hope you'll not misunderstand it. But I am grateful to you how you are helping!. Thanks again. sincerely,; Partha",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/250#issuecomment-449906512:1192,learn,learn,1192,https://qupath.github.io,https://github.com/qupath/qupath/issues/250#issuecomment-449906512,1,['learn'],['learn']
Usability,"Dear Arnulf,. Certainly I'm agreed with you on the benefits of fluorescence for image analysis. I intended that the cell detection should work with fluorescence, but since I have primarily been working with brightfield until now, this was not taken very far. Success with fluorescence cell detection previously relied upon several undocumented tricks in terms of choosing parameters, and the good fortune of having your nuclear counterstain in the first channel. This morning I tried to address this, and hopefully you find it functions better in [v0.0.5](https://github.com/qupath/qupath/releases/tag/v0.0.5), which I've just uploaded. An example image from a fluorescence microscope is shown below. ![qupath_fluorescence_cells](https://cloud.githubusercontent.com/assets/4690904/20115597/cf2682ae-a5f0-11e6-88c9-82298e3cd1ea.jpg). A few important points (which will eventually be documented on the Wiki):; - QuPath tries to identify brightfield and fluorescence images when they are opened (although you can ask it not to under _Auto-estimate image type on opening_ option in the _Preferences_); if it gets it wrong, you will need to double-click the `Image type` in the _Image_ tab to set this manually to fluorescence.; - The `Image type` needs to be set before running the _Cell detection_ command, to make sure that the right options are displayed; - The _Threshold_ option under _Intensity parameters_ will be important, and will likely need to be adjusted... the default is simply selected for all images of that type and bit-depth, and not based on the information present in the image; - If you are working with images at a relatively low resolution (such as in the screenshot I showed), it can be helpful to decrease the _Detection line thickness_ parameter in the _Preferences_ so that the cell or nucleus outlines do not obscure your view too much.; - The _Brightness/Contrast_ options currently misbehave somewhat with fluorescence. If you want to show/hide specific channels, it's actua",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-259250203:331,undo,undocumented,331,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-259250203,1,['undo'],['undocumented']
Usability,"Dear Pete,. Sounds good. From the outside, maybe I can give two remarks that might be helpful to consider:. Because QuPath is your ""baby"", you are thinking a lot about how to include outside functionality (ImageJ) into QuPath. At the same time, you say rightly, ImageJ has much more documentation and support, and more users and more diverse users. Maybe it might be a good project to access QuPath from ImageJ, either the whole GUI, but even better, just its functional structures, by writing a ImageJ Plugin. And I guess, you would not necessarily need to do that yourself, because it might be easier to find someone to help, because there is more people experienced with writing ImageJ Plugins. QuPath itself is really good for Digital Pathology, and Digital Pathology is booming. A lot of people probably already gave you very positive feedback. This means, there must be ways to get more funding for that project and then you can actually hire people to do the programming. But somehow I think, you might have thought about that already. If there is anything I can help with (unfortunately not programming a software), I would like to support.; Best Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401763074:840,feedback,feedback,840,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401763074,1,['feedback'],['feedback']
Usability,"Does *File &rarr; Export snapshot... &rarr; Viewer snapshot* do what you need? This corresponds to *Edit &rarr; Copy view to clipboard*. If more control is needed, there's also an export script [here](https://gist.github.com/petebankhead/66e70e5deaa9c6e6a009ad027b135a0d) that may be useful as a starting point. With regard to (the lack of) undo, *File &rarr; Revert* is likely to be the best option to go back to the last saved version. With the help of shortcuts, you may press *Ctrl + S* to save regularly and then *Ctrl + R* to go back one step. The *backspace* key can also be used to quickly remove an accidentally-drawn annotation. *Objects &rarr; Transfer last annotation* (*Shift + E*) can also help sometimes in an emergency... although it only has a very short memory.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/92#issuecomment-322861341:341,undo,undo,341,https://qupath.github.io,https://github.com/qupath/qupath/issues/92#issuecomment-322861341,1,['undo'],['undo']
Usability,"Does the View->Show log give you any information when this happens? . I am not sure in your case, but if you are running the full script I wonder if it isn't the cell detection rather than the classifier that is erroring out. I don't believe the classifier runs in tiles, it should apply to the entire image at once, and only after the cell detection part of the script is completed. Memory might be an issue there, though there used to be some possible edge cases with very small tiles (where the tile clips the edge of the tissue and a very tiny region is generated) causing problems. I usually was able to get around that by changing the Simple Tissue detection settings, as it was incredibly rare. The logs should help determine what is happening. You said randomly, so this means you can't reproduce it on any single slide running it twice? Are the images QuPath is accessing stored across a potentially busy or slow network?. As an aside, you are running both a classifier in the cell detection (Positive cell detection with three thresholds), and again with a trained classifier?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355477217:641,Simpl,Simple,641,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355477217,1,['Simpl'],['Simple']
Usability,"Easily docking/undocking windows and a more modular UI in general would probably be good here. Although personally I don't like most of the dockable UIs I've used, they're very popular so presumably if you get used to them, they're good",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708795269:15,undo,undocking,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708795269,1,['undo'],['undocking']
Usability,"Eventually I managed to create a new Linux download for [v0.0.6](https://github.com/qupath/qupath/releases/tag/v0.0.6) using OpenJDK and OpenJFX. Still, two troubles remain: one minor, one major. The minor trouble is that (at least on Ubuntu 16.04) the build process is not entirely seamless, and `jfxrt.jar` needs to be manually copied into the distribution at the end (perhaps because it's not included in OpenJDK, but rather only a symbolic link is made with installing `openjfx` with Synaptic?). The major trouble is that OpenSlide continues not to be distributed in a ready-to-run fashion (as mentioned [here](https://github.com/qupath/qupath/wiki/Installing-QuPath#linux)). Indeed, I'm not sure if it will work on anyone's machine other than the one I was using. It is likely clear that my Linux use and experience is limited. The suggestions of someone who is more familiar with this would be very welcome. I think one of the following is required:; - Inclusion of OpenSlide and all its dependencies, precompiled (in the same way as QuPath provides for Windows and macOS), or; - A method of ensuring the Java library path in the packaged version of QuPath includes all the places that would be required to find a local installation of OpenSlide. In the second case, the user would still be asked to download and install it... but if this step goes smoothly, it can be expected to work. I plan to investigate this more in the future, but it may take some time...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/2#issuecomment-261056258:782,clear,clear,782,https://qupath.github.io,https://github.com/qupath/qupath/issues/2#issuecomment-261056258,1,['clear'],['clear']
Usability,"Fantastic, that's a relief, thanks!; I saw those errors tile width/height too, only with MRXS files... but yes, they don't seem to cause trouble. For reference, this is what happened:; I recompiled OpenSlide for Mac back for v0.0.7, to address issues related to opening MRXS files with certain types of compression (possibly BMP or PNG). However, I appear to have accidentally included the previous versions of the library + dependencies in the Mac download, possibly because the machine on which I finally compiled the Mac version of QuPath for distribution had cached the original libraries, which had the same version number (since they traced back to the same version of OpenSlide). So v0.1.1 was the first download to actually contain the Mac OpenSlide updates intended for v0.0.7. And it turned out that those updates were missing a couple of required files, but which were available on my development machines... lulling me into a false sense of security that all was well. Anyhow, I've now repackaged OpenSlide + dependencies, added in the license notices for the additional required files, and bumped up the version number to 3.1.4_2 to make it clear which OpenSlide should be included in all future versions of QuPath compiled for Mac - regardless of machine. Outcome:; * OpenSlide included with the Mac distribution of v0.1.1 should be able to handle slightly more kinds of image than previous versions... but in the overwhelming majority of cases, it will look the same; * None of this matters for QuPath running on anything other than Mac; * I was never going to figure out there was a problem on my own, since it was working for me... so thanks for letting me know!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/32#issuecomment-265679401:1154,clear,clear,1154,https://qupath.github.io,https://github.com/qupath/qupath/issues/32#issuecomment-265679401,1,['clear'],['clear']
Usability,"Final thought is, if we implement this, we need to consider what should be the advantage of having one QuPath instance with two viewers over having two QuPath instances open each with one viewer, and we should probably aim our design in that direction. Otherwise it could both be a lot of work and even end up with ambiguity in user experience (eg ""if I press this button, which image is affected...? or both...?"")",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708690679:328,user experience,user experience,328,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708690679,1,['user experience'],['user experience']
Usability,"For small TMA cores and small biopsies (*.vsi and *.ndpi files, H-DAB, RGB, 100 - 500 mb, small images with one core or biopsy per image) the simple tissue detection and Stardist script often worked through the entire project in batch mode, about 100 images, without issues. For whole slides image projects (100 mb - 3,5 GB images) it can do 0 -1 images before crashing and more often crashes on the gigabyte whole slide images, so some sort of memory trouble can indeed be a possible issue (the m12 Tensorflow Qupath build only allows 32 GB memory I see, even though 64 GB is available - any way of forcing it to expand that?).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/481#issuecomment-630737119:142,simpl,simple,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/481#issuecomment-630737119,1,['simpl'],['simple']
Usability,"From memory, *Simple tissue detection* doesn't do anything as sophisticated as color deconvolution - but it does take into consideration the 'Image type' (e.g. fluorescence/brightfield) to decide whether it is looking for something 'bright' and 'dark'. After that it converts the image to grayscale, or takes the first channel (see #93 for a request to add support for another channel). In many cases, *Simple tissue detection* is probably too simple. But if the results look especially strange, the first thing I'd do is to turn off the *Smooth coordinates* option. This basically takes the original shape, and then represents an approximation of it using fewer vertices. Sometimes this approximation is not particularly good - especially if the tissue overlaps with the image border. Turning off the option gets closer to the 'original' detection by thresholding.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-352167834:14,Simpl,Simple,14,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-352167834,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"Github issues are really for bugs. Please post on the [community forum](https://forum.image.sc/tag/qupath) :). Also if you have a sample image for other people to download and a clearer description of what you've tried so far it'll be easier. Pete mentioned above some options, that's probably a good start.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/305#issuecomment-874790067:178,clear,clearer,178,https://qupath.github.io,https://github.com/qupath/qupath/issues/305#issuecomment-874790067,1,['clear'],['clearer']
Usability,"Got it, thanks for your reply! It's very helpful.; It looks like it has to do a supervised learning. Oh, I meant calculating tumor purity for H&E slides.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/364#issuecomment-534121388:91,learn,learning,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/364#issuecomment-534121388,1,['learn'],['learning']
Usability,"Great! Yes, I think we shouldn't increase the download by too much. My suggestion is to use a command line flag e.g. `-Pdocs=all` to activate this. Possible options:. * `all` - all javadocs, devs building locally may (rarely) want this; * `none` - don't include any javadocs; * `qupath` - jars that include `qupath` as the first element in the name only (should include extensions); * `default` - curated list of jars; I'd say `qupath` + JTS + ImageJ as a starting point. I think the default list should only add ~10MB or so. This also allows the gradle to be simplified and `mergedJavadocs` can be removed as a task (in preparation for a nicer javadoc viewer). **Note:** Currently, I can't build this PR fully with `./gradlew jpackage` because I get either. ```; The specified installation directory '/path/to/qupath/qupath-app/build/install/QuPath-0.6.0-SNAPSHOT' is neither empty nor does it contain an installation for 'QuPath-0.6.0-SNAPSHOT'.; ```; or (if I delete that directory); ```; Entry lib/qupath-gui-fx-0.6.0-SNAPSHOT.jar is a duplicate but no duplicate handling strategy has been set. Please refer to https://docs.gradle.org/8.7/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details.; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513#issuecomment-2089590369:560,simpl,simplified,560,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513#issuecomment-2089590369,1,['simpl'],['simplified']
Usability,"Have you tried the troubleshooting instructions here?; https://qupath.readthedocs.io/en/0.4/docs/intro/installation.html#macos. Right-click + open has always worked for me, across multiple Mac computers - but Apple do sometimes change things. Recently, I find I need to right-click + open for the installer, and then also right-click + open for the app itself the *first* time I use it (but a simple double-click works after that).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1281#issuecomment-1642383068:393,simpl,simple,393,https://qupath.github.io,https://github.com/qupath/qupath/issues/1281#issuecomment-1642383068,1,['simpl'],['simple']
Usability,"Hello, I'm one of the libvips maintainers, I can add a couple more links. libvips uses jhbuild to make windows and macos binaries, including openslide support. jhbuild came out of the gnome project: you describe a set of packages in xml and it'll download, patch, compile and link the library stack automatically. If you run inside a docker container, it's simple way to do things like nightly builds. . The build scripts are here for win:. https://github.com/libvips/build-win64. And here for macos:. https://github.com/jcupitt/build-osx. There are a set of MXE (makefile-style) scripts here for win as well, some people find them simpler to work with. https://github.com/libvips/build-win64-mxe. libvips 8.10 has added OME-TIFF pyramid support. There are some notes here:. https://libvips.github.io/libvips/2020/06/18/What's-new-in-8.10.html#pyramids. It should be quite a bit quicker than bioformats, though you may need to do some work to get the xml right. If QuPath were to use libvips for openslide import, there would probably need to be some kind of Java->libvips link. There are various Java bindings, but I've not used them myself and I don't know how suitable they would be. libvips is supposed to be mostly self-binding through introspection, so a full Java binding might only be a few weeks work. There's a high-quality C# binding which could be used as a model. https://github.com/kleisauke/net-vips. It's about 3,000 lines of code.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-716174039:357,simpl,simple,357,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-716174039,2,['simpl'],"['simple', 'simpler']"
Usability,"Hey @biovoxxel . > I would fully avoid scaling and adapting to DPI, since this is not very helpful regarding the figure quality. Problem is, the original images in QuPath are whole slide images, and rather large. [OS-2.ndpi for example](https://cytomine.com/collection/os-2/os-2-ndpi) is 126976 pixels wide. So first thing QuPath asks when doing an SVG export (with the image + overlay as background) is what downsampling factor should be applied to the original image. It's a necessary step, but what is not clear, is which factor would actually match some publication guidelines (for example, 300PPI + width of 170 mm for full page width figure [as defined here](https://cancerandmetabolism.biomedcentral.com/submission-guidelines/preparing-your-manuscript)). > Once you have the SVG you can adapt it to the document size without the need of changing any resolution etc. I agree with you, but the background bitmap embedded in the SVG document only needs to be as big as the physical size it will be printed at. Some reviews also impose a maximum file size for the SVG documents (e.g. < 20MB), so we can't just use a downsample of 1 or 2 and hope for the best. Then yes, anything vectoriel on top of the background image (lines, polygons, text...) just needs to be readable at the printed size and could easily be modified in Inkscape if not (fond size, linewidths...). Maybe I'm missing something (wouldn't be the first time), so let me know how you see this work. Cheers,; Egor",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1272#issuecomment-1604775665:509,clear,clear,509,https://qupath.github.io,https://github.com/qupath/qupath/issues/1272#issuecomment-1604775665,3,"['clear', 'guid']","['clear', 'guidelines']"
Usability,"Hi @EgorBushmelev, I'll have a look at this but it might take a little time. The module itself looks tiny, but I'm not sure if including it brings in any extra services. In general I'm reluctant to include jdk modules in the distribution without a clear understanding of what they will be used for (especially if QuPath doesn't require them itself) - can you give any more details of this?. Is your extension already available under an open source license / will it be? If you can link me to the code then I'd probably understand the need better.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/639#issuecomment-726872071:248,clear,clear,248,https://qupath.github.io,https://github.com/qupath/qupath/pull/639#issuecomment-726872071,1,['clear'],['clear']
Usability,"Hi @KidElectric I agree that's a bit odd and it took me a while to figure out what was going on. I think it's a consequence of QuPath evolving a bit and the old docs not being kept updated. And me hardly ever working with TMAs for years now. Basically, the TMA core is locked. The locking happens whenever the core is used for object detection. It's essentially inheriting the same behavior as for annotations. Unfortunately it's not very clear when an object is locked; QuPath v0.4.0 will make this more obvious through the UI thanks to; * #924. In the meantime, calling `getTMACoreList().each { it.setLocked(false) }` should resolve it. I suspect - but don't entirely remember - that `TMACoreObject.isEditible()` existed before object locking became a thing in QuPath, and when [the object hierarchy was more strict](https://petebankhead.github.io/qupath/2019/11/17/changing-the-hierarchy.html), as a way to make it harder to completely mess up TMA data by shifting a core ROI by a few pixels. It should possibly be removed, since locking gives a better way to control ROI editability than checking for detections. (I hope that helps - I'll keep this issue open at least until the javadocs are updated.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1021#issuecomment-1190617712:439,clear,clear,439,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021#issuecomment-1190617712,1,['clear'],['clear']
Usability,"Hi @NicoKiaru, I closed this because it became fragmented and hard for follow, and there have been no comments for over a year. Without any clear feedback I couldn't know that it is pretty annoying for your users. In case you missed it, I already added scripting methods to help: https://github.com/petebankhead/qupath/pull/37#issuecomment-586469880",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632609335:140,clear,clear,140,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632609335,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Hi @codybum,; Your problem should be fixed by simply changing the order or your args like this:; `./QuPath-0.2.0 script --image myimage.svs --script myscript.groovy`. So this shouldn't be a bug - though it might be worth adding that the CLI is somewhat strict with the argument order to the docs. As a rule of thumb and to avoid future problems, I would always call the command first, followed by all the desired options/parameters (called with their identification). ; E.g. `QuPath-0.2.0 [command-name] [-option1=<option1>] [-option2=<option2>]`. I'll close this for now as it's not a bug if you don't mind. Feel free to open a new thread on the [forum](https://forum.image.sc/tag/qupath) if you have a question regarding the CLI and its use (or open a new issue here if you find a bug!).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/511#issuecomment-637634883:46,simpl,simply,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/511#issuecomment-637634883,1,['simpl'],['simply']
Usability,"Hi @dkurt sorry for the long delay, I'm finally getting back to StarDist/ImageOps/normalization before the next release. In the end, percentile normalization turned out to have a lot of extra complexities that I hadn't originally considered. I've tried to address them in; * https://github.com/qupath/qupath/pull/1130; * https://github.com/qupath/qupath/pull/1146. These are intended to help QuPath fully support the [bioimage.io preprocessing spec](https://github.com/bioimage-io/spec-bioimage-io/blob/gh-pages/preprocessing_spec_0_4.md), which assumes 32-bit input and output. They also add support to normalize channels independently or jointly (since it [turns out some of the StarDist models uses joint channel normalization](https://forum.image.sc/t/stardist-in-qupath-normalization-issue/38912/13)). I hadn't realised Apache Commons Math provides [10 different methods that can give different results](https://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/stat/descriptive/rank/Percentile.EstimationType.html)), so I've now switched to using the one that matches with NumPy (and I think also R, Julia and others). Along the way, performance should be substantially improved by avoiding full array sorting and using parallelization; I'm seeing reductions from ~1 second to 0.2-0.3s in some tests. Because of these changes, I'd like to close this PR in favor of keeping the code simpler and not introducing an optimized alternative specifically for 8-bit RGB. Thanks again though - this helped to show me how slow & in need of improvement the original code was :). (If you ever want to test how the performance of your optimized approach compares with the new version, I'd be curious about the result - but I realise that probably isn't a priority. In any case, my [timing code is here](https://github.com/qupath/qupath/blob/main/qupath-core-processing/src/test/java/qupath/opencv/tools/TestOpenCVTools.java#L487)).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547:1421,simpl,simpler,1421,https://qupath.github.io,https://github.com/qupath/qupath/pull/827#issuecomment-1319775547,1,['simpl'],['simpler']
Usability,"Hi @juliangilbey, I've tried to tackle this in https://github.com/qupath/qupath/pull/676. I'm not sure if I've taken the cleanest approach - if you've time to have a look I'd be very interested in your feedback.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/654#issuecomment-793050473:202,feedback,feedback,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/654#issuecomment-793050473,1,['feedback'],['feedback']
Usability,"Hi @melvingelbard . Thank you for checking these old codes and adding the patch!. However, I test the `.qpmap` file again and find it might be a bug about encoding (Chinese or maybe non-ACSII characters). In my test, in the current version (v0.3.0), qupath can handle the `.qpmap` with the last line only having one value. But the example I provided had been simplified. Each unique ID not only contain “C” & four number, like “C2293"", but also a person's name in Chinese, like ""C2293张三"" (“张三” is a fabricated name). For example, this format is ok: ; `qpmap` file is attached below and feel free to delete `.txt`.; [test ok.qpmap.txt](https://github.com/qupath/qupath/files/7374322/test.ok.qpmap.txt); ```; C2293	C2297	C2301	C2313	C2314	C2315	C2334	C2345	C2357	C2384; C2386	C2388	C2401	C2402	C2437	C2447	C2481	C2510	C2512	C2528; C2524	C2536	C2539	C2557	C2585	C2595	C2602	C2615		; C2293									; ```; But with only one Chinese name, qupath think it‘s an image:; [test with a chinese name.qpmap.txt](https://github.com/qupath/qupath/files/7374354/test.with.a.chinese.name.qpmap.txt); ```; C2293张三	C2297	C2301	C2313	C2314	C2315	C2334	C2345	C2357	C2384; C2386	C2388	C2401	C2402	C2437	C2447	C2481	C2510	C2512	C2528; C2524	C2536	C2539	C2557	C2585	C2595	C2602	C2615		; C2293; ```; However, all the unique ID contain a Chinese name. To protect patients' privacy, only first name is shown below.; [test with all chinese first name.qpmap.txt](https://github.com/qupath/qupath/files/7374378/test.with.all.chinese.first.name.qpmap.txt); ```; C2293章	C2297顾	C2301马	C2313张	C2314周	C2315耿	C2334王	C2345田	C2357刘	C2384孔; C2386张	C2388周	C2401陈	C2402罗	C2437胡	C2447许	C2481朱	C2510嵇	C2512施	C2528周; C2524李	C2536彭	C2539司	C2557吴	C2585陈	C2595赵	C2602林	C2615孙		; C2293章									; ```. It seems another part of the code triggers the bug. In addition, all the three `.qpmap` files above work well in qupath v0.2.3.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-946818399:359,simpl,simplified,359,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-946818399,1,['simpl'],['simplified']
Usability,"Hi @melvingelbard,. I see what you did and it makes the additions short and sweet. What you're losing though is the error checking and the ability to separate the arguments for the script from those for QuPath. That might make tracking some syntax errors (e.g. `--poject` vs `--project`) rather interesting without error checking. Limiting conflicts between QuPath options and script options could just be something to watch out for, I don't have an immediate feel for how much of an issue that would be (e.g. use `--newproject` rather than `--project` if the goal is to create a new project rather than opening the script on a specific QuPath project). So, pros and cons: My method ensures isolated arguments between QuPath and the script, but at the expense of having to add the `translateCommandline()` function, and a heavier syntax with quotes around the script commands and escaped quotes for paths with spaces. Yours is a lot simpler, but I think the biggest drawback is losing the error checking and possible collisions between options for QuPath and options for the script. That's just top of my head, I'm happy to have any kind of command-line control over the script, so I'll let you decide how you want to take this forward.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-744399347:933,simpl,simpler,933,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-744399347,1,['simpl'],['simpler']
Usability,"Hi @miyakorogers . Although I agree that QuPath should really handle this more elegantly, I'd recommend posting a question on the forum instead: https://forum.image.sc/tag/qupath. There's no bug report template here for me to act on, so this seems more an issue of how QuPath is being used rather than a clear bug with steps to reproduce. The images sound huge, which is probably the real problem. Any solution is likely to require converting to a [pyramidal OME-TIFF](https://qupath.readthedocs.io/en/stable/docs/intro/formats.html) to reduce memory requirements. You can do this using the QuPath [`convert-ome` command on the command line](https://qupath.readthedocs.io/en/stable/docs/advanced/command_line.html) - you may find some tips via https://forum.image.sc/search?q=qupath%20convert-ome or post a new question.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/968#issuecomment-1128920092:304,clear,clear,304,https://qupath.github.io,https://github.com/qupath/qupath/issues/968#issuecomment-1128920092,1,['clear'],['clear']
Usability,"Hi @petebankhead, . RGB may be the main target of QuPath and they have no such issue. But honestly the lack of ability to conveniently set B&C for all fluorescent images of the same kind is pretty annoying. We regularly have users with k.10's of multichannel images. The workaround with the retain option is okish but clearly not as convenient as a 'set B&C for all images of the same kind'. > So that remains a task for a future version... So why not letting the issue open and add a tag for a future release ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632599816:318,clear,clearly,318,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632599816,1,['clear'],['clearly']
Usability,"Hi @petebankhead.. Got it! Thanks. it was so simple! Cannot believe it why I didn't find it myself! Anyway, I appreciate a lot! Please help us in future. Many thanks once again!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/237#issuecomment-433491033:45,simpl,simple,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/237#issuecomment-433491033,1,['simpl'],['simple']
Usability,"Hi @saudet thanks very much for checking this. Yes, it is still a problem with JavaCPP 1.5.6 (although less often, with the larger limit). I have just confirmed it following the steps to reproduce above and the [OS-1.ndpi](https://openslide.cs.cmu.edu/download/openslide-testdata/Hamamatsu/OS-1.ndpi) image from openslide.org. ![Screenshot 2022-01-21 at 05 53 09](https://user-images.githubusercontent.com/4690904/150473986-f94358f8-f834-46d6-b502-d80d040829a6.png). ![Screenshot 2022-01-21 at 05 50 03](https://user-images.githubusercontent.com/4690904/150474005-3aae13a4-6bed-44f9-af05-fb0b677abf0b.png). QuPath's *Memory Monitor* above is based upon whatever `Runtime` provides. I followed the exact same steps on a 2013 iMac without any problems, so there does seem to be something different on the M1. Our use may be a little obscure. QuPath's pixel classifier ([docs](https://qupath.readthedocs.io/en/stable/docs/tutorials/pixel_classification.html)) is designed to support interactively training a machine learning classifier. It should support many image types, but is typically used with very large, tiled, multiresolution biomedical images (usually 10-50 GB per 2D image). The pixel classification uses OpenCV's ML module via JavaCPP, but in principle also supports semantic segmentation using a pretrained deep learning model with OpenCV's DNN module or TensorFlow - JavaCPP is central to it all (thanks!). In all cases, each required image tile is read on demand and cached as a Java `BufferedImage`. It is converted to an OpenCV `Mat` temporarily for whatever calculations are required, then the end result converted back to a `BufferedImage`. Therefore quite a lot of fairly large `Mat` objects can be generated for the pixels, features and predictions, but closed after use and using `PointerScope` extensively since QuPath v0.3. This seems to be working very well everywhere except on M1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470:1013,learn,learning,1013,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1018215470,2,['learn'],['learning']
Usability,"Hi @spatts14 as @MichaelSNelson suggests, please try posting this on the forum at https://forum.image.sc/tag/qupath. If it is related to the specific file formats, then QuPath is reading them through Bio-Formats or OpenSlide - and the developers of both are active on the forum as well. I'm afraid that without an example file there is nothing we can do on the QuPath side (and possibly nothing we can do even _with_ a file, if the problem needs a fix in Bio-Formats or OpenSlide). However, because you mention; > It also causes my computer system wide issues and Ive had to restart twice. One possibility is that it is *Finder* crashing and not QuPath. I've seen that before on a Mac. I describe it a little bit [here](https://forum.image.sc/t/qupath-on-mac-poor-performance-slow-crashes-loads/53243/2) - if that's the issue, relaunching Finder (similar to force quitting) should fix that without a restart. It happens when a whole slide image is selected in Finder, and Finder tries to show a preview thumbnail - but it can't because the image is huge. But there's a good chance it's the problem @MichaelSNelson links to - in which case you can try the creating a new project and [specifying 'Bio-Formats' as the 'Image provider'](https://qupath.readthedocs.io/en/stable/docs/tutorials/projects.html#add-images). You may find the images then open, but could be the wrong color. I'll close this issue as there's a better chance of finding success on the forum, and it's not clear that there's a bug in QuPath that we can do anything about.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1580#issuecomment-2277143810:1475,clear,clear,1475,https://qupath.github.io,https://github.com/qupath/qupath/issues/1580#issuecomment-2277143810,1,['clear'],['clear']
Usability,"Hi @viviiviiii, it would help if you could provide more information. Assuming this is a Ventana scanner, the file type could be .bif, .tif, or DICOM. Including the information in, or a screenshot of, the Image tab would help. It sounds like you are only opening the thumbnail image, but it is not clear why.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1253#issuecomment-1477179288:297,clear,clear,297,https://qupath.github.io,https://github.com/qupath/qupath/issues/1253#issuecomment-1477179288,1,['clear'],['clear']
Usability,"Hi @ybyOxidant ,. After a small investigation with @petebankhead , we've found out that the issue was related to [this part](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMADataImporter.java#L311) of the code. . ### Issue; Basically, QuPath parses each line of your `.qpmap` file and splits each row according to the delimiter (in your case, a tab `\t`). Since the last line of your `.qpmap` is a single value and does not have a delimiter, QuPath assumes this is the end of the grid and therefore can't match the size of the grid-to-import with the current grid in the image. It then fails and since it thinks it cannot be a TMA grid anymore, it tries to understand whether the file is an image, hence the image importer window. ### Workaround; A simple workaround would be to add a dummy value after the last line of your file. QuPath would then 'acknowledge' the last line of your file and process it. E.g.:; ```; C2293 C2297 C2301 C2313 C2314 C2315 C2334 C2345 C2357 C2384; C2386 C2388 C2401 C2402 C2437 C2447 C2481 C2510 C2512 C2528; C2524 C2536 C2539 C2557 C2585 C2595 C2602 C2615; C2293 Dummy; ```; I would recreate the file in the same way as you did in the past, just adding a dummy value at step 1 (in Excel). ### Refactoring; On our side, we can keep this issue as a reminder to account for this kind of situations where a single value is present in a row and needs to be processed. E.g. something along those lines:; ```; if (row.contains(""\t"")); cols = row.split(""\t"");; else if (row.contains("","")); cols = row.split("","");; else if (row.isEmpty()) // Stop at the first empty row (lacking delimiters); break;; ```. ### Note; That part of the code hasn't changed in about 5 years so the change in QuPath version is not the problem, as explained above. I'd still recommend you to use the last version - v0.3.0 at the time of writing. ; Thanks for reporting this @ybyOxidant !",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/829#issuecomment-946615284:834,simpl,simple,834,https://qupath.github.io,https://github.com/qupath/qupath/issues/829#issuecomment-946615284,1,['simpl'],['simple']
Usability,"Hi Arnulf,. Thanks very much for reporting this, and I'm glad you like the software!. From what you say, the Bio-Formats extension is probably installed correctly. It doesn't appear in the 'Extensions' menu because it isn't associated with any particular command you need to run - rather, QuPath will simply start using it if it needs to. When an image is opened, QuPath will go through a list of possible image readers and take the first that works. These include:; - OpenSlide (included by default); - ImageJ (included by default); - Bio-Formats (if it's installed). The _Server type_ entry in the table that appears under the _Image_ tab on the right of QuPath shows you which reader was used for whichever image is currently open - in the screenshot below, OpenSlide was used. ![mirax](https://cloud.githubusercontent.com/assets/4690904/19970686/a81eaf8a-a1d4-11e6-810e-491db8fb6612.jpg). Unfortunately, to the best of my knowledge Bio-Formats cannot handle MIRAX files - there is some information [here](http://blog.openmicroscopy.org/file-formats/community/2016/01/06/format-support/). Bio-Formats also cannot handle CZI files with JPEG-XR compression (which seems to be the default for whole slide scanners) - although the good news is that [this is being worked on](https://www.openmicroscopy.org/community/viewtopic.php?f=13&t=8138). OpenSlide also cannot handle CZI files (possibly for [license reasons](https://github.com/openslide/openslide/issues/144)), although this is discussed on the mailing list sometimes. However, OpenSlide should be able to handle [MIRAX](http://openslide.org/formats/mirax/) (at least 2D RGB images), and I've tried QuPath successfully with several MIRAX files that I [downloaded from the OpenSlide website](http://openslide.cs.cmu.edu/download/openslide-testdata/Mirax/). From the examples I've seen, the MIRAX images consist of two parts: a `*.mrxs` file and a separate directory containing a lot of other data files. These need to:; - have the same name (exce",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-258165973:301,simpl,simply,301,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-258165973,1,['simpl'],['simply']
Usability,"Hi Benjamin,. Great! Glad it works, thanks for letting me know. Regarding including the extension by default, that would definitely be handy. It should also be quite easy technically (thanks to Maven), but until now I've been a bit apprehensive about what requirements it would place on QuPath in terms of the GPL... i.e. providing source code, licenses for Bio-Formats and all its dependencies etc. So while I'm still learning about that side of things, I thought that requiring a separate download direct from the OME website makes things simpler in one way, even if it's a bit inconvenient. I'll give it a bit more thought though, and hopefully will be able to come up with a more streamlined way to install it at some point. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/34#issuecomment-266709923:419,learn,learning,419,https://qupath.github.io,https://github.com/qupath/qupath/issues/34#issuecomment-266709923,2,"['learn', 'simpl']","['learning', 'simpler']"
Usability,"Hi Colin,. Thanks very much for your reply and positive comments. With regard to resources, I’m afraid the only ones I know of are the ones that I have written myself. These are mostly on the Wiki, however three other sources of scripts are:. * the Supplementary Material for the recent [bioRxiv preprint](http://biorxiv.org/content/early/2017/01/12/099796) - this also includes descriptions of how the scripts are used; * my own [Gists on GitHub](https://gist.github.com/petebankhead); * the built-in examples under *Automate &rarr; Open sample scripts*. Beyond that, I find [using IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) to be really essential. Its Groovy support is excellent, and it is full of tricks that help with finding the parts of code that are needed. I hadn’t used IntelliJ previously, so I am only gradually learning what it can do*. Scripting is something that I would like to revisit in the future to make both simpler and more powerful - depending upon what is needed most. Currently, I use scripting for working with projects, working with objects/classifications, working with pixels, and working with GUI components… but the classes and techniques involves are quite different, and some are easier than others. I’m not sure which of my uses are of general interest... or just useful to me. Therefore in the absence of more complete documentation, it’s probably best to ask specific questions here and I’ll try to answer. In the short term, I plan to add links to the most generally-useful questions in the [FAQ section](https://github.com/qupath/qupath/wiki/FAQs) to make them a bit easier to find. Pete. *-Just now I learned that ```Ctrl + h``` with the cursor on a relevant class or interface name (e.g. ```PathObject``` or ```ImageServer```) opens up a class hierarchy to help see related classes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-274013607:863,learn,learning,863,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-274013607,3,"['learn', 'simpl']","['learned', 'learning', 'simpler']"
Usability,"Hi David,. Thanks, I'm glad you like the documentation! It's always a difficult balance between writing documentation, developing new features and polishing/fixing/generalizing current ones... Although I developed the software at university, as it started to become more useful others began to test it and gave useful feedback, and I discussed its application often with pathologists. So never really alone. There is no log file written at the moment - mostly because I wasn't sure where to save it and didn't want to annoy a user with files appearing where they did not want them... although it would probably be worth adding an option for this. I will look into it. However, you can at least see what is logged for the current session under 'View -> Show log'. In many cases, this should automatically appear if QuPath suffers any serious disaster - but that is not guaranteed to happen, so it can help to open the log window early if you anticipate a crash may occur. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-275033701:318,feedback,feedback,318,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-275033701,1,['feedback'],['feedback']
Usability,"Hi Erexhepa. thanks for your hint. I didnt know the simple tissue detection uses the color deconvolution vectors. I do not have a H-DAB image. I adapted the vectors via the stain estimator but it did not have an effect. . The I tried all kind of combinations of requestend pixel sizes and Threshold. ; Indeed, it reduced the artefact in the corners - they did not dissapear, but became this small that i would not care. ; Transfer to other pictures failed because of different required thresholds. . The exclue on boundary option would make my whole ROI disappear. It covers nearly the whole slide. . Thus i gonna use a superpixel approach for the tissue detection on the glass slide. It will be slower, but more accurate. . Thanks for your ideas!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/124#issuecomment-350561039:52,simpl,simple,52,https://qupath.github.io,https://github.com/qupath/qupath/issues/124#issuecomment-350561039,1,['simpl'],['simple']
Usability,"Hi Kai,. Thanks for the link, I only skimmed the first part of the paper. The method looks very interesting, I'll give some more thought about if/how it could be added to QuPath. In the meantime, you can already integrate whatever algorithms you like via scripting (in Groovy) or creating a Java extension. Changing/adding core algorithms raises a lot more complications in terms of user expectations and reproducibility (QuPath has thousands of users...), not to mention maintenance, and increasingly we need to think carefully about algorithms that handle images with different numbers of channels. Note that you can also use [pixel classification](https://qupath.readthedocs.io/en/latest/docs/tutorials/pixel_classification.html), which provides more sophisticated options than simply thresholding. I'd suggest reimplementing your changes as either a script or extension. Also, since this isn't a bug in QuPath, I will close the issue - the best place to discuss such things is the forum at http://forum.image.sc/tag/qupath. Best wishes,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/657#issuecomment-753634843:781,simpl,simply,781,https://qupath.github.io,https://github.com/qupath/qupath/issues/657#issuecomment-753634843,1,['simpl'],['simply']
Usability,"Hi Pete,. . thank you so much for the new versoin, it works perfectly with my hp spectre 360 and the hp tilt pen!. . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. . Once again thank you so much!. . Yours,. Marcel. . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 31. Juli 2018 11:10; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . Both are required - you'll need all the code there. If you follow the instructions towards the end of the linked page (starting with Step by step guide) you should end up with a runnable version of QuPath, with all the different components and dependencies. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-409255073> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t63nFYvKbsHb5pvIvHf0JgJLMPRaks5uMHMygaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9tyO3hUoiEJIDsuFGimLqg7M8qJCfks5uMHMygaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-410879743:659,guid,guide,659,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-410879743,1,['guid'],['guide']
Usability,"Hi Pete,. I have used the code from ""Simple Tissue Detection"" for demonstration; purposes because I have no experience in Java (and Groovy too) development; at all. The few lines of demo code are simply placed between your ui/image; extraction code and the transformation of the tissue area mask to an; annotation.; Is it possible to reuse this module code and transfer to an extension or a; script?. Best regards,. Kai. Am So., 3. Jan. 2021 um 16:34 Uhr schrieb Pete <notifications@github.com>:. > Hi Kai,; >; > Thanks for the link, I only skimmed the first part of the paper. The; > method looks very interesting, I'll give some more thought about if/how it; > could be added to QuPath.; >; > In the meantime, you can already integrate whatever algorithms you like; > via scripting (in Groovy) or creating a Java extension. Changing/adding; > core algorithms raises a lot more complications in terms of user; > expectations and reproducibility (QuPath has thousands of users...), not to; > mention maintenance, and increasingly we need to think carefully about; > algorithms that handle images with different numbers of channels.; >; > Note that you can also use pixel classification; > <https://qupath.readthedocs.io/en/latest/docs/tutorials/pixel_classification.html>,; > which provides more sophisticated options than simply thresholding.; >; > I'd suggest reimplementing your changes as either a script or extension.; > Also, since this isn't a bug in QuPath, I will close the issue - the best; > place to discuss such things is the forum at; > http://forum.image.sc/tag/qupath; >; > Best wishes,; >; > Pete; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/657#issuecomment-753634843>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZG4BEALLTARPZEDYZVLSYCFBTANCNFSM4VR5VYCA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/657#issuecomment-753650048:37,Simpl,Simple,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/657#issuecomment-753650048,3,"['Simpl', 'simpl']","['Simple', 'simply']"
Usability,"Hi Pete,. I stumbled on it when trying to tile very large annotations for a simple plugin I am making. ; ; I basically set the bounds to be the entire image and then had a very large annotation (converted to ROI) that I computed the tiled ROIs for. I don't have a clean example to share, but maybe I can write some code that is commented out and then you can step through it with a debugger and check the behavior out for yourself?. Thank you again for your continued work on QuPath, I've learned so much through your source code. Also, yes. The settings.gradle file was not supposed to be committed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219570297:76,simpl,simple,76,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219570297,2,"['learn', 'simpl']","['learned', 'simple']"
Usability,"Hi Pete,. Thank you for your reply!; Version of QuPath you are using: 0.3.0; Type of classifier: RTrees; How many training annotations: 1+ Million to 3+ Million detected cells and 200+ annotations which cover 90% of the detected cells; Number of features for the classifier: 20 to 30; What happens on freezing: when freezing, only one core of CPU is running, less than 10G of 64G RAM is occupied. the rotating icon is keep rotating. Other issue:; Classify -> Train Object Classifier -> Select Class, the pop up window is minimized and can not be resized so I can't choose classes. This window issue happen in multiple place, when I choose Simple tissue detection from ""Ctrl-L"". When the number of detect cells is 3 million, Exporting objects will last 20 to 30 minutes, saving any change will take 3 to 5 minutes, importing a 7G geojson will take nearly 45mins to 1hour, not because of the shortage of resources. I noticed that the usage of CPU is 1 to 2 CPU and RAM is 6 to 10G when exporting and importing, much lower than I assigned to Qpath.. May you consider to re-write Qpath with other language to parallelize exporting, importing, saving etc. I/O related tasks and the Parquet format may be a better format than geojson. Without parallelize above task, Qpath is good at detection but freezing in the scenario of Millions level I/O, training and classifying. We have to turn to other tools to analyze the data exported from Qpath. Thank you Pete for your effort!; Charles",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-949927812:639,Simpl,Simple,639,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-949927812,1,['Simpl'],['Simple']
Usability,"Hi Pete,. thanks for your answer. I want to learn all functions of QuPath. I like ; your documentation a lot. Its well done work. Do you develop QuPath all alone by yourself?. Another question: is there a log file, QuPath is writing, that can help ; you to track and find the reason for bugs and system crashes?. We did that with our software in the past. It is very helpful. Best. David. Am 23/01/2017 um 21:44 schrieb Pete:; >; > Thanks for reporting this. I have not been working with CZI images ; > myself, but I recently received one example image with this problem. ; > Unfortunately, I have not yet been able to identify the exact cause, ; > beyond the fact that too much memory is used. Because the image is not ; > being read by QuPath directly (but rather Bio-Formats) it is a bit ; > harder for me to track down where exactly the problem lies. However, I ; > will continue to investigate, and add an update here when I learn more.; >; > In the meantime, I have been told that the Zeiss ZEN software is able ; > to export the different scenes as separate images, which can then be ; > read into a QuPath project ; > <https://github.com/qupath/qupath/wiki/Projects>. Therefore this may ; > be a workaround that enables you to work with the images in QuPath.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qupath/qupath/issues/45#issuecomment-274611030>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/APmGEV0UakHZI556HGXSHym-5fglXkHwks5rVREZgaJpZM4Lrcx8>.; >. -- ; Mit freundlichen Grüßen; Kind regards. Dipl. Biologe; David Haumann; CEO. Tel: +49 (0)7247 9342998-0; Mobil: +49 (0)171 9903171; E-Mail: david.haumann@hs-analysis.com; Webseite: www.hs-analysis.com. HS-Analysis GmbH; Steinbuch Centre for Computing (SCC), Geb. 441; Hermann-von-Helmholtz-Platz 1; 76344 Eggenstein-Leopoldshafen. Handelsregister: Amtsgericht Mannheim HRB 723920; UStIdNr: DE304551126; G",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-274930919:44,learn,learn,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-274930919,2,['learn'],['learn']
Usability,"Hi Pete:. Thanks so much for your helpful comments!. I am a veterinary pathologist working with novel immunotherapeutic approaches to cancer treatment. We use in situ hybridization extensively for target discovery and to identify target + cells within our xenograft models. In addition to measuring a reduction in xenograft size via calipers, I am interested to use QuPath to document a reduction in the number of ISH target + cells / unit area of the xenograft. It would be incredibly helpful to have a ""learn by example"" approach to speed the task. Maybe you would select ISH- stromal cells, ISH+ stromal cells, ISH- tumor cells and ISH+ tumor cells, etc. as annotations and then run the Classifier?. I am also involved in gene therapy experiments in which we are attempting to knock down mRNA expression in specific cell populations in vivo. I would like to use QuPath to identify the cell population using annotations, then measure the amount of ISH signal per cell in treated vs untreated animals. In this case, rather than eliminating the cells of interest, we are attempting to demonstrate a reduction in ISH signal per cell. Thus, simply designating cells as ""positive"" or ""negative"" will not suffice. Rather, using the script you wrote above would be helpful to show that you have a reduction of cells listed as 4+ and 3+ and an increase in cells listed as 0 or 1+. Alternatively, if you could calculate an ""H score"" based upon a 5-point scale (negative, 1+, 2+, 3+, 4+), that would be a great way to compare between groups. . I think the intersection between pathology and artificial intelligence / machine learning is fascinating. I wonder if it would be feasible to learn Groovy so I can write my own scripts? . Thanks again!. Jim",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368345195:505,learn,learn,505,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368345195,4,"['learn', 'simpl']","['learn', 'learning', 'simply']"
Usability,"Hi Shushan,. I think this relates to your last question: https://groups.google.com/d/msg/qupath-users/89AbDQSknm8/SCAbYzA2CAAJ; I've written a script linked to that tries to do the job of converting cells into region annotations. The bigger question of creating full image annotations is one that I'm very interested in and (kind of) working on. Currently, I often use [QuPath + ImageJ + conventional image processing](https://github.com/qupath/qupath/wiki/Working-with-ImageJ) to generate detailed annotations; I suspect that in your case, converting to 8-bit, Gaussian smoothing and thresholding would do a pretty good job of mimicking the red annotation; if you have that, then it's possible to 'invert' the annotation to get everything else - either for the entire image, or constrained to a larger (coarse, hand-drawn) annotation. It's still quite a laborious process, but armed with QuPath, ImageJ and a few short scripts (e.g. to invert annotations) it's possible to create much better annotations than could be done by hand. I've also made some steps towards creating brush/wand annotations that can't overlap but rather snap to the boundary of existing annotations when pressing a specific key (although it's hard to not get tangled up in the various keyboard modifiers this involves, so it may need more work). I don't actually remember if it's included [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html) or is more recent... but it may be worth investigating if you haven't already. Slightly further in the distance (but hopefully not too far), I've also got a prototype pixel classifier working... but again some more work needs to be done to convert this into something usable and annotation-generating. And having a very large number of annotations across a full slide might raise some performance issues that needs to be addressed to. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/222#issuecomment-424650877:1709,usab,usable,1709,https://qupath.github.io,https://github.com/qupath/qupath/issues/222#issuecomment-424650877,1,['usab'],['usable']
Usability,"Hi again and thanks a lot for the fast feedback. ; Opening the VSI files works fine when a project is created, and choosing fluorescence as the image type when importing images helps on the flow. ; Petes suggestion of changing colors once for all images of the same type once in a project works, and is remembered when opening the project again (except with a few glitches). Just to show you how the channels appear by default, see attached image. The naming (Dapi, Fitc etc.) is correct, but the colors always comes up in this order R G B Y, regardless of which channels the image consists of. ; ![color vs channel](https://user-images.githubusercontent.com/55238250/64848050-aa825600-d610-11e9-8baa-49af6501c8d4.PNG)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/361#issuecomment-531148137:39,feedback,feedback,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/361#issuecomment-531148137,1,['feedback'],['feedback']
Usability,"Hi all!. I'm trying to understand the bottom line of what seems to be a tricky bug. I do not really understand all of it... what I can tell is simply that Oli (@lacan) helped me to make a 'derived path class' in order to label if a Roi is on the left or on the right part of the brain:. https://github.com/BIOP/qupath-extension-abba/blob/d9384ba7e198a454cb8e9da4661988eac7ee285c/src/main/java/qupath/ext/biop/abba/AtlasTools.java#L248. After, the serialisation was delegated to QuPath, there was nothing custom here. The abba extension has been in use since the v0.3, so both projects with the 0.3 serialization way and projects with the 0.4 serialisation way exist in the wild. Since there won't be any new release of QuPath 0.4, I think I should look at solving this issue in the extension. Is there a way to do that ?. Again, sorry for my lack of understanding, I think I need to spend a full hour to understand it and I do not know when I'll be afford it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1286#issuecomment-1687573535:143,simpl,simply,143,https://qupath.github.io,https://github.com/qupath/qupath/pull/1286#issuecomment-1687573535,1,['simpl'],['simply']
Usability,"Hi all, . I have pushed a solution to this on my fork this morning (link [here)](https://github.com/melvingelbard/qupath-forked/tree/scriptArgs). It uses Picocli to parse the unmatched args (as @zindy mentioned I believe), which are then accessible through the `args` variable in the current running script. `args` is a simple `String[]`, so no fancy further parsing is performed on it. Not sure whether that was the original plan..; What do you think of this implementation?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741805565:320,simpl,simple,320,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741805565,1,['simpl'],['simple']
Usability,"Hi there,. > 1. Undo function. Sometimes I deleted an object by mistake, and it will be great if I can get it back. An undo option would be useful; unfortunately, there are so many things that you might do with QuPath - especially if you include scripting - that are not easily 'undo-able' without badly impacting performance and increasing the potential for bugs. For example, there are lots of ways you might change the [object hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) and keeping track of them would require a lot of additional overhead. So for now... I'm afraid there's no undo. Nevertheless, there are a few things that can help:. * If you draw something by accident, press *backspace* to delete it; * If you delete something by accident, as @Svidro says, press ```Shift+E```. This corresponds to the *Restore Selection* command in ImageJ, and has the same shortcut, so as to help if you happen to know ImageJ already. (However, it only ever remembers the most recent object that it saw... so if you select any other object in the meantime, then it cannot restore the one that was deleted.); * If you want to reduce the chances of accidentally editing an annotation, right-click and choose *Annotations &rarr; Lock*. Note that the annotation can still be deleted - but not moved or otherwise edited.; * Regularly save (```Ctrl + S```) and then use *File &rarr; Revert* to go back (```Ctrl + R```). The last one is probably the approach I use most. > 2. A select tool by drawing a square like many other editing tools. This will make select multiple objects easy. I've also wanted this occasionally, but not often enough to do anything about it yet. However, there are a few options for selecting:. * Click on each object in either the *Annotations* or *Hierarchy* tab (with ```Ctrl``` or ```Shift``` pressed if needed); * If you have one object selected, and the *Move* tool is active, you can select other objects by clicking them in the image with the ```Alt``` key ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75#issuecomment-300294512:16,Undo,Undo,16,https://qupath.github.io,https://github.com/qupath/qupath/issues/75#issuecomment-300294512,4,"['Undo', 'undo']","['Undo', 'undo', 'undo-able']"
Usability,"Hi, @petebankhead! I've created a repository with OpenVINO extension. (PR https://github.com/dkurt/qupath-extension-openvino/pull/1). Going to finish with tests and will merge to main branch soon. Also, it requires bounded PR to StarDist ext: https://github.com/qupath/qupath-extension-stardist/pull/12. Many thanks for great support and clear software API :) I really enjoy your project",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-921622336:338,clear,clear,338,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-921622336,1,['clear'],['clear']
Usability,"Hi, sorry I'm coming to this a bit late... From looking at the image, I agree that it would be good to try to find a way to detect the regions you want with a threshold (maybe *Simple tissue detection* or an ImageJ macro). However, I can't really say very confidently how well this will work since I have not tried an application like this before. With regard to *Trainable Weka segmentation*, you might be able to run it through QuPath by pointing the ImageJ plugins directory (under *Edit &rarr; Preferences...*, double-click on the text field beside *ImageJ plugins directory*) somewhere where the *Trainable Weka segmentation* plugin and all its dependencies can be found (e.g. the *plugins* directory of a Fiji installation).; Then use *Send region to ImageJ* to send all or part of the image to ImageJ for processing, and call the *Trainable Weka segmentation* from there. > Note that QuPath won't actually use Fiji itself, but rather ImageJ1, so whenever you set the *plugins* directory to be that of a Fiji installation you may find that some commands don't work (if they have Fiji-specific dependencies). But I think *Trainable Weka segmentation* is ok. However, that might not be necessary. QuPath doesn't offer a pixel classifier like *Trainable Weka segmentation* or *ilastik*, but you can use QuPath's object classifiers to get a similar result. The process would be something like this:. * Create an annotation around an area of interest (e.g. manually, or with *Simple tissue detection*); * Run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Create tiles* to create square tiles of any size (*don't* choose 'Make annotation tiles' in this case!); * Run *Analyze &rarr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:177,Simpl,Simple,177,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['Simpl'],['Simple']
Usability,"Hi,. I'll look into it, but it's not really clear to me what the 'right' behavior is, since some kind of automatic contrast adjustment can be necessary to handle any kind of image with any kind of staining and any combination of stain vectors. As far as I recall (although it is a long time since I look at that part of the code...) this is what QuPath tries to do. In your screenshots I personally preferred the 'strange' appearance :). Note that the 'Auto' and 'Reset' buttons in the Brightness/Contrast window try to make it straightforward to adjust to a consistent appearance (either scaled with a specified saturation percentage, or using the minimum/maximum values). The 'Auto Brightness/Contrast saturation %' can be adjusted in the user preferences.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/464#issuecomment-622245598:44,clear,clear,44,https://qupath.github.io,https://github.com/qupath/qupath/issues/464#issuecomment-622245598,1,['clear'],['clear']
Usability,"Hi,. Looking back that the documentation, I see it wasn't the clearest... I've just tested the following on macOS Sierra with a downloaded QuPath and I was able to run the script in the docs after the following steps:. 1. If you don't already have a QuPath extensions directory, you can either set one under *Edit &rarr; Preferences* or follow the process to install any extension that takes your interest [here](https://github.com/qupath/qupath/wiki/Extensions). 2. Next, locate where JEP is installed and create a symbolic link in your QuPath extensions directory to its Jar file. For me, this was the command:; ```; ln -s /usr/local/lib/python2.7/site-packages/jep/jep-3.5.3.jar /Users/pete/QuPath/extensions/jep.jar; ```. 3. Alongside the Jar, there were also two native files ```jep.so``` and ```libjep.jnilib```. The easiest way to get QuPath to see them is simply to copy these into your QuPath directory containing ```QuPathApp.jar``` (there should already be other native libraries there too). I haven't tested this on Linux, but would be very interested to know if it works (or, indeed, if other things are working fine for you with Fedora). If so I'll update the docs to be a bit clearer. Note that I never took the use of JEP with QuPath far enough for it to be genuinely useful, since I didn't have a sufficient need for it myself until now. But I think the ability to run Python scripts could be really valuable, so I'd be happy to help with setting this up or coming up with a neat way to wrap or convert data structures. If you'd like to discuss more the kind of applications you see this being useful for (e.g. segmentation, classification, manipulating objects, statistical analysis...) just let me know.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262733775:62,clear,clearest,62,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262733775,3,"['clear', 'simpl']","['clearer', 'clearest', 'simply']"
Usability,"Hi,; Oh, no worries, I have definitely learned a bit about getting QuPath; and JEP up and running on Linux. I look forward to spending a little more; time with this later this weekend, but I will also probably end up putting; it on the back burner if I can't make much progress. I think being able to; call Python segmentation algorithms and also measurement/statistics; routines would be very cool. . Thanks for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262925931:39,learn,learned,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262925931,1,['learn'],['learned']
Usability,"Hi,; Thanks for the reply and sorry for late feedback. So, I tested it all with a fresh install of m3 and a clean dedicated folder for testing. the structure is as follows:. -TestFolder; -- ImageFolder; -- qupath_project_folder1; -- qupath_project_folder2. For both projects, I generate a fresh initialization, load all the images in the ImageFolder and do some operations (shapes, cell detection ...). My aim is to be able to open either of both projects and it finding the relevant image files relatively (going one folder up), especially after moving the TestFolder around. Now I tested it on different PCs and VMs and keep getting the same behavior, i.e. getting the prompt window to manually re-specify the URI paths. So either I am missing something or I am going wrong about it. While the prompt is not a problem for me per se, when sending the files to collaborators, people tend to get scared or confused by the prompt, so I wanted to manually specify relative paths to make it more user friendly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518195636:45,feedback,feedback,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518195636,1,['feedback'],['feedback']
Usability,"Hi. Your right it is (maybe) not a bug. But the beauty of QuPath is/was the ease of use and ease of installing. We run it on 20+ workstations. But these new extensions that use the DeepJava Library are (for me) a big pain. Maybe you (not me) can after installing all the prerequisites and tweaking get it working. But it will be impossible to install it next to many other programs on all our workstations. There must be a easier way. Or a better explanation. And for just using the CPU only. I still had to do all the Cuda and tweaking. Out of the box it does not support CPU only. Best, Ron. And just to be clear. I love your work!!! I love QuPath!!!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352862393:609,clear,clear,609,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352862393,1,['clear'],['clear']
Usability,"Hi. the channel selection works by using the setC method on an ImagePlus, so it; would work whenever the image is recognized as a ""composite"" or a; ""hyperstack"". It should work with 8-bit, provided the image at that point; is seen as a composite or a hyperstack. The call to setC needs to be made; before the getByteProcessor call. In particular, it does not work with RGB; images, in the sense that RGB images are not composite/hyperstack by; default, so the setC would have no effect. The way around it is to precede; the call to setC with a call to ""ij.plugin.CompositeConverter.makeComposite; <https://imagej.nih.gov/ij/developer/api/ij/plugin/CompositeConverter.html>"",; to convert it to a Composite image. I can add a check and the call to; compositeconverter. Cheers; Thomas. On 21 August 2017 at 04:06, Svidro <notifications@github.com> wrote:. > Ah, apparently the channel swap doesn't apply to 8bit images! So much to; > learn.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/pull/93#issuecomment-323689007>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADypF7vsElQOkcgKk7jpveApPbREBIRCks5saUiPgaJpZM4O8C04>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-323765300:931,learn,learn,931,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-323765300,1,['learn'],['learn']
Usability,"Hmm, I am no longer seeing this behavior (no changes that I am aware of). It was the full release of M9. I am actually using the same project now that I was before, with untyped files still in the project Scripts folder when I was testing it before. I will reopen if I can reproduce the exact steps, since it seems to be more involved than simply happening every time.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/433#issuecomment-613481580:340,simpl,simply,340,https://qupath.github.io,https://github.com/qupath/qupath/issues/433#issuecomment-613481580,1,['simpl'],['simply']
Usability,"Hmm, I still think your best option will be running something like the Simple Tissue Detection to get your annotation area to exclude all background that is external to your tissue (you may have to go over the edges yourself, and definitely play with the Max fill area, as setting it to just larger than the largest fat globule you want to measure is key!) so that you only have two populations, background/fat globule (low OD) and tissue (high OD).; You might also play with tiling your tissue annotation (pretty much everything I suggest will involve generating an annotation, I'm afraid) and then sending each tile to ImageJ for thresholding (Extensions->ImageJ->ImageJ Macro runner). The returned detections end up looking something like these... and depending on how much you play with your thesholds (both size and OD) you will see more or less of the errors around the edges. The tiling allows you to analyze the image in small enough sections such that ImageJ can handle the full resolution.; Edit: deleted on account of privacy. Maybe Peter will have something better I have not thought of, though :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286453790:71,Simpl,Simple,71,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286453790,1,['Simpl'],['Simple']
Usability,"Hmmm, I still fail to see any evidence of a QuPath bug here. Your reference to 'the true image dimensions' is hard to interpret since I don't know where you're getting the 'true' dimensions from, or what is the source of your files. Without actual specifics (e.g. an example file), I don't see why you should assume the 'bug' is in QuPath and not elsewhere. OpenSlide only sets the bounds for a subset of file formats, so most shouldn't be affected anyway. I've only seen it for scn and mrxs, which are the two formats mentioned in the commit that makes the bounds available: https://github.com/openslide/openslide/commit/421cb647acdc8fe35e33c2683949f5098925c8ac. Note my comment above about 'cropping' being arguably the same as 'not padding'... one could argue that QuPath simply removes the padding that OpenSlide has added, because [the bounds define where there is pixel data](https://github.com/openslide/openslide/issues/424#issuecomment-1382416341). QuPath aims to read the pixels from an image consistently, regardless of whether OpenSlide is used or not. As a specific example from my side, see the image `Leica-1.scn` from the OpenSlide freely-distributable data:; https://openslide.cs.cmu.edu/download/openslide-testdata/Leica/. Screenshots below show the image with a full image annotation within QuPath. ## Bio-Formats; <img width=""939"" alt=""SCN-Bio-Formats"" src=""https://github.com/qupath/qupath/assets/4690904/039b2449-5c20-4b93-a4af-d65928324a50"">. ## OpenSlide (default, cropped to bounds); <img width=""941"" alt=""SCN-OpenSlide"" src=""https://github.com/qupath/qupath/assets/4690904/771af2d0-2dcb-44ee-95e6-31ff62f0f7e2"">. ## OpenSlide (with `--no-crop` arg); <img width=""941"" alt=""SCN-OpenSlide-no-crop"" src=""https://github.com/qupath/qupath/assets/4690904/3cf52a48-ca91-4dff-8eb4-7e299d851b3e"">. The size is identical when read using QuPath v0.4.3 when using either OpenSlide or Bio-Formats by default (no extra arguments passed to either). Explicitly passing the `--no-crop` arg cau",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660:775,simpl,simply,775,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631106660,1,['simpl'],['simply']
Usability,"Hmmm, in that case though we might prefer `paths` for not creating the impression that they exist?. I have the impression there isn't a clear winner here, and so I tend towards prefering `Files.exist` for its modern nature (and I see the implementation is at least partly different in an upcoming JDK) - although that could change it one turns out to have exceptionally horrible performance, e.g. for a network share.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1298#issuecomment-1691801388:136,clear,clear,136,https://qupath.github.io,https://github.com/qupath/qupath/pull/1298#issuecomment-1691801388,1,['clear'],['clear']
Usability,"Hmmm, this isn't a scenario I ever had to deal with myself... it looks like an unfortunate limitation of how the project arranges ```.qpdata``` files simply according to the image name stored for the entry in the image. There's no 'good' way to fix it currently, unless you're willing to put all your images in separate projects... which would kind of defeat the purpose of using a project. So you could try this as a workaround:. ```groovy; guiscript=true. // Get QuPath & project; def qupath = getQuPath(); def project = qupath.getProject(). // Loop through images, setting the name; // (actually accessing a private field... therefore 'bad'); project.getImageList().each {; def path = it.getServerPath(); int ind = path.lastIndexOf(':'); def scene = path[ind+1..-1]; def name = new File(path[0..ind-2]).getName(); it.putMetadataValue('Slide_ID', name); it.imageName = name + ' (' + scene + ')'; print it.imageName; }. // Need to set to null first to force update; qupath.setProject(null); qupath.setProject(project). // Be very careful is you use this to write the project!; // The logic is a bit weird and it will probably overwrite ; // the existing project - so duplicate your .qpproj file to be safer; //qupath.lib.projects.ProjectIO.writeProject(project); ```. Basically, this should rename the images in the project to include both the original file name and the scene. This should then be used by QuPath when arranging the ```.qpdata``` files afterwards. It won't automatically update the names of any existing data files - this would have to be done manually. It has the added bonus of setting the 'Slide_ID' keyword; if you right-click on the project, you can then choose to *Sort by &rarr; Slide ID*.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/103#issuecomment-332598953:150,simpl,simply,150,https://qupath.github.io,https://github.com/qupath/qupath/issues/103#issuecomment-332598953,1,['simpl'],['simply']
Usability,"How exactly are you making the annotations - from the user interface or in a script?. I'm a bit concerned about adding more complexity into QuPath for this, since that might in turn leads to yet more complexity (e.g. a requirement to create tiles from top to bottom....) and we're really trying to simplify. Therefore I'm not sure if changing the `makeTiles` method is the right approach to achieving the end goal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1277#issuecomment-1621807693:298,simpl,simplify,298,https://qupath.github.io,https://github.com/qupath/qupath/issues/1277#issuecomment-1621807693,1,['simpl'],['simplify']
Usability,"Huh. Learn something new every day. I didn't even realize that file type existed. But really, rebuilding from project is probably the way to go, and it is best to train a classifier across multiple images anyway to account for the most variation you can. I would also recommend always keeping a classifier ""version"" of the project (either save the qpdata files or make two projects) so that once you start running scripts, you can always go back to the exact project and objects you were using to create the classifier.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/360#issuecomment-530540608:5,Learn,Learn,5,https://qupath.github.io,https://github.com/qupath/qupath/issues/360#issuecomment-530540608,1,['Learn'],['Learn']
Usability,"Hypothesis: I don't think the program clears what is ""selected"" after the merge, so trying to create a new selection fails. Note that if you only have one object selected, and choose to merge, the selectObjects command will work, maybe because no changes have been made to the hierarchy. Fix: Add resetSelection() after the merge to clear the currently selected object set.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354845609:38,clear,clears,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354845609,2,['clear'],"['clear', 'clears']"
Usability,"I agree with @petebankhead here, since subcellular detections would too often get in the way. I think it would make more sense to _force the type of objects you want to have interact in this way to all have the same type_, though I acknowledge users might need dig around on the forum a bit to look up the right lines of script to accomplish this. . I can definitely see situations where different types of cells require different types of detection methods, for example larger macrophages that can be multinucleated requiring something like CellPose to create the boundary, which may, at the time, be simply a detection as there isn't a convenient way to create a multinucleated object. I still feel like it makes more sense to have a more convenient way to force detections to be cells, rather than trying to figure out a way to exclude subcellular detections when you do not want those interactions calculated - aside from removing the measurements after the fact.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1550#issuecomment-2189876097:602,simpl,simply,602,https://qupath.github.io,https://github.com/qupath/qupath/issues/1550#issuecomment-2189876097,1,['simpl'],['simply']
Usability,"I also noticed that if you just do the first two steps (loading image and objects) that you won't be able to undo loading the objects anyway. The undo action gets available after doing something else, even selecting and deleting an object. Pretty weird to me, where is that undo action coming from? It is unrelated to actions later. I think it is storing a state with no objects at all somewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1487#issuecomment-2010988726:109,undo,undo,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/1487#issuecomment-2010988726,3,['undo'],['undo']
Usability,"I also support this enhancement as a simple way that QuPath could enhance the environment. . Another possibility would be the ability to rename annotations from the hierarchy view, which would be very helpful for many of my workflows.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-473025090:37,simpl,simple,37,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-473025090,1,['simpl'],['simple']
Usability,"I am actually just getting into this from the other side, learning how to set up a deep learning model to take in images generated by QuPath. Part of the question is what kinds of images do you want to send out, and do you want to classify them ahead of time? For example, I am probably going to be looking at cells, so I intend to export the cell object (in this case each cell is ""polygon"" as an image:; ```; img = server.readBufferedImage(RegionRequest.createInstance(path, downsample, polygon.getROI())). ImageIO.write(img, 'PNG', new File(dirOutput, name + '.png')); ```; although I will need to edit the write name to both increment so that it does not overwrite, edit the name so it includes the class (for anything in the training set), and edit the ""polygon.getROI()"" so that it is the correct size. . Also, once you have your 256 by 256 tile size in micrometers (multiply out by the pixel width in the Image tab), you can also use the _Analyze-> Region identification-> Tiles and superpixels -> Create tiles_ to see what a grid export could look like for your Simple tissue detection annotation. And Pete beat me to it anyway! So I won't include my much more terrible box drawing script!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/137#issuecomment-357349047:58,learn,learning,58,https://qupath.github.io,https://github.com/qupath/qupath/issues/137#issuecomment-357349047,3,"['Simpl', 'learn']","['Simple', 'learning']"
Usability,"I am fairly certain that the Windows slash issue is listed as one of the things to fix already in another posting already, so might get done in a later version of QuPath. If you are using the same location each time, you can just create a separate script and copy and paste the command in whenever you need it. If this is for different projects and different directories... then yes, I think, for Windows, that is the only way to do it. You can call a Python script on the folder where the file is placed to fix all of the .txt files, use a program like Bulk Rename Utility (I made quite a lot of use of that before learning any Python) or when you are already editing the path string, you could manually entire the file name as well. If it is for a batch run, you will need to get the name of the image from something like:. ```; outputFolder = ""D:\\Results\\""; String imageLocation = getCurrentImageData().getServer().getPath(); fileNameWithNoExtension = imageLocation.split(""[^A-Za-z0-9_ ]"")[-2]; saveAnnotationMeasurements(outputFolder+fileNameWithNoExtension+"".txt"", ); ```. I may be missing a few useful characters in the split string there, but I suspect you get the idea!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/125#issuecomment-350869587:616,learn,learning,616,https://qupath.github.io,https://github.com/qupath/qupath/issues/125#issuecomment-350869587,1,['learn'],['learning']
Usability,"I am getting the same problem using SLICs and classifiers to yield area; annotations for whole tissue slides. Detections are handled without a; problem, but the program freezes when I try to create margins for the; annotations. I do not run out of memory, but using the memory monitor I; notice a sawtooth pattern whe is the freezes happen. Perhaps it will run better if run from the command line since it no longer; will have to compete with the application thread?. I will set up a more powerful computer tomorrow. Perhaps that will handle; the problem. 7. feb. 2019 20:46 skrev ""Pete"" <notifications@github.com>:. It's hard to tell much here without a clearer idea of what 'a lot of rather; large and complex annotations' means, but it may very well be that there; are too many vertices that that slows down the rendering too much (on the; JavaFX application thread, same as the menus and rest of the GUI). If so it; isn't really a bug, but more pushing QuPath with a different application; than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences; in object types, and why it's not really intended to have very large; numbers of annotations. You might try having fewer vertices somehow, perhaps with *Objects →; Simplify annotation shape* or splitting larger annotations into smaller; ones (since annotations outside the field of view do not need to be; rendered). Or write a script that periodically converts annotations you; won't need to change any more into detections. Or try to leave parts of the; image that are particularly complex *unannotated*, and then interpret the; unannotated region appropriately later. (I was actually looking into this today for completely different reasons,; and may be able to improve the annotation handling somewhat... but it; doesn't help you now). —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub; <https://gith",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461575920:655,clear,clearer,655,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461575920,1,['clear'],['clearer']
Usability,"I am using QuPath 0.1.2, I don't find the setting of the title cache here. The .bfmemo files are only 9 MB. Is there a way to clear the cache manually before opening the next slide?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576188125:126,clear,clear,126,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576188125,1,['clear'],['clear']
Usability,"I can still reproduce the issue on macOS following the steps Alan mentions (where 'edit 2 scripts' means new ones, not existing scripts). > However, should we prompt users to save scripts when closing the editor, rather than when closing QuPath?. Probably. I think I'll find this annoying sometimes, because I close the script editor as a way of hiding the window - because otherwise it isn't possible to hide a (child) window. So we might need a new hide option, although then we're almost back to the original problem. Another option would be to show the script editor when the user attempts to quit, and at that point clearly notify them that they have unsaved *scripts* (before moving in to whatever other unsaved stuff they might have).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1524#issuecomment-2133544271:621,clear,clearly,621,https://qupath.github.io,https://github.com/qupath/qupath/pull/1524#issuecomment-2133544271,1,['clear'],['clearly']
Usability,"I can't replicate this - on my Mac, if the simple tissue detections have been unlocked then I can edit them using the brush tool as expected. I am not sure what is the significance of shift/cmd here. Can the annotations be edited if these are not pressed?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/456#issuecomment-619373343:43,simpl,simple,43,https://qupath.github.io,https://github.com/qupath/qupath/issues/456#issuecomment-619373343,1,['simpl'],['simple']
Usability,"I can't speak for @ElEd2 (thanks from me too for the scripts!), but performance should be ok. One important thing is that you should *definitely* use `PathDetectionObject` and not `PathAnnotationObject`, just like in the code above (there's a comparison of the different object types [here](https://github.com/qupath/qupath/wiki/Types-of-object#annotations--detections)). With this many objects involved, you also probably don't want to add your objects to the hierarchy one-by-one within the loop, since this will trigger a lot of costly checks and events. Calling `addObjects` and passing a list should do much better. So the loop above could become; ```groovy; def pathObjects = []; for (i = 0; i <num_rois; i++) {; // The rest of the stuff, as above; pathObjects << new PathDetectionObject(roi); }; addObjects(pathObjects); ```; If this still doesn't perform well enough, and you don't mind deleting anything that might already exist on the hierarchy, using the following instead of `addObjects()` should perform better still:; ```groovy; clearAllObjects(); getCurrentHierarchy().getRootObject().addPathObjects(pathObjects); fireHierarchyUpdate(); ```. Anyhow, the reason I think that it should work one way or another is that you can generate similar numbers of vertices running the cell detection in QuPath itself. In that case, various tricks are used to help, e.g.; * Contours are smoothed after detection, and then simplified to reduce the numbers of vertices that need to be drawn; * Image tiles representing the objects are drawn on demand and cached - similar to having a pyramidal image, but one where the tiles are quickly created only when needed; * When viewing the image at a sufficiently low resolution, QuPath will check if a detection is well represented by a single pixel or rectangle and just draw that instead (to avoid the effort of handling all the vertices). You could do the polygon simplification on the OpenCV side, perhaps with `approxPolyDP`, or else on the QuPath side ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-357045269:1043,clear,clearAllObjects,1043,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-357045269,1,['clear'],['clearAllObjects']
Usability,"I cannot replicate this; for me, for me it works as intended. The hierarchy (and its limitations) is described [here](https://github.com/qupath/qupath/wiki/Object-hierarchies). To accept this as a bug, clearer steps to reproduce would be needed - preferably with screenshots to demonstrate the issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/247#issuecomment-439292612:202,clear,clearer,202,https://qupath.github.io,https://github.com/qupath/qupath/issues/247#issuecomment-439292612,1,['clear'],['clearer']
Usability,"I completely understand, and don't really need more details beyond that snapshot, though I will have to make a few guesses without the Workflow script. You should be able to do that with just the red OD in a narrow cytoplasmic band around the nucleus, as mentioned before. I would definitely use the _Analyze -> preprocessing-> estimate stain vectors_ to get the best estimate of the red that you are looking for. Another way is to draw a very small box around some of the red you want to find (make sure you keep that box selected), and then double click on the stain vector you want to set in the Image tab on the left. You should get a popup, ""Set new stain vector from ROI?"". You will have to generate your cells again once you have the stain vectors set correctly, but once you do, you should be able to use a simple one step script to find positivity. . setCellIntensityClassifications(""Cytoplasm: DAB OD mean"", 0.15). Just place that in a script window and run it, but replace DAB with whatever the color vector is for your ""Red."" And you can just rename it red in the same Image tab from before. The 0.15 can be whatever cutoff you find works for your data, and I prefer to use the heatmaps from _Measure-> Show measurement maps_ for this purpose. Side note, you can use the _Positive cell detection_ for this purpose once you have determined what you want your cutoff to be, but you need to make sure you keep the color vector name as ""DAB.""",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/83#issuecomment-315138503:815,simpl,simple,815,https://qupath.github.io,https://github.com/qupath/qupath/issues/83#issuecomment-315138503,1,['simpl'],['simple']
Usability,I did not get any feedback anymore. The issue can be closed.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/175#issuecomment-404452989:18,feedback,feedback,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/175#issuecomment-404452989,1,['feedback'],['feedback']
Usability,"I didn't actually know .mrxs files could contain annotations... The [first post here](https://github.com/openslide/openslide/issues/118) contains the teasing phrase *'pure xml with pretty obvious content'*, although it's not clear to me how easy it is to know which .dat file contains the annotations in each case. @DanaCase created a really useful script to parse Aperio annotations at https://github.com/qupath/qupath/issues/61#issuecomment-359990015. Creating a parser that can handle annotations in a variety of formats could be an extremely useful contribution (and 'fun' student project?)... I'm afraid it's not something I am likely to get a chance to work on myself any time soon, but I can help with the QuPath side (i.e. converting coordinates into ROIs and objects that QuPath can display). I'll flag this as 'help wanted'...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/165#issuecomment-381105876:225,clear,clear,225,https://qupath.github.io,https://github.com/qupath/qupath/issues/165#issuecomment-381105876,1,['clear'],['clear']
Usability,"I didn't have a more elegant solution - and I like @Svidro's approach of reusing (and renaming) an existing ```.qpdata``` file. If you do this, I'd suggest trying to create one from any similar image you have that works - since it will also do things like set the image type (brightfield, fluorescence, stain colors...), and it makes sense to use values from related images rather than have to update them later. I always planned vaguely to make it possible to create a manual TMA grid, but the automated dearrayer never failed catastrophically enough on any image that I encountered to make this necessary; I only ever added/removed rows as needed. Nevertheless, in the absence of a user-friendly way to do something, it's generally possible to resort to a script. If you draw a rectangle around where the grid should be, you could try running this:. ```groovy; import qupath.lib.objects.TMACoreObject; import qupath.lib.objects.hierarchy.DefaultTMAGrid. // Enter the number of horizontal & vertical cores here; int numHorizontal = 12; int numVertical = 9; // Enter the core diameter, in millimetres; double diameterMM = 1.2. // Convert diameter to pixels; double diameterPixels = (diameterMM * 1000) / getCurrentImageData().getServer().getAveragedPixelSizeMicrons(). // Get the current ROI; def roi = getSelectedROI(). // Create the cores; def cores = []; double xSpacing = roi.getBoundsWidth() / numHorizontal; double ySpacing = roi.getBoundsHeight() / numVertical; for (int i = 0; i < numVertical; i++) {; for (int j = 0; j < numHorizontal; j++) {; double x = roi.getBoundsX() + xSpacing / 2 + xSpacing * j; double y = roi.getBoundsY() + ySpacing / 2 + ySpacing * i; cores << new TMACoreObject(x, y, diameterPixels, false); }; }. // Create & set the grid; def tmaGrid = new DefaultTMAGrid(cores, numHorizontal); getCurrentHierarchy().setTMAGrid(tmaGrid); ```. Note that there are a few variables at the top that should be specified (i.e. the number of cores horizontally and vertically, and the an",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/77#issuecomment-301234930:684,user-friendly,user-friendly,684,https://qupath.github.io,https://github.com/qupath/qupath/issues/77#issuecomment-301234930,1,['user-friendly'],['user-friendly']
Usability,"I don't have much for this but... You may have already found it, but: https://github.com/qupath/qupath/issues/61; There was also a thread about using JSON objects to handle object exports on the Google forum; I'm not sure if that would come in handy as it might be reversible or useful as a guide.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/128#issuecomment-354846706:291,guid,guide,291,https://qupath.github.io,https://github.com/qupath/qupath/issues/128#issuecomment-354846706,1,['guid'],['guide']
Usability,"I expect it starts from the underlying Geometry becoming somehow invalid. However I don't know for sure if this is the case, haven't experienced it myself and have no idea how to reproduce it. If you _do_ press undo, have you tried doing so multiple times? I mean, if the shape is being modified then a 'valid' version might be 'several undos back'. Apart from that, I would likely need one or all of the following:; * the contents of _View &rarr; Show log_ (if any errors are reported); * a .qpdata file with a misbehaving annotation; * steps or a script that enable me to reproduce it. Oh yes, and as @Svidro says - the version number is essential. If it only happens before v0.2.0-m7 then it may already have been fixed (as I have made many changes in this area).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/381#issuecomment-561272296:211,undo,undo,211,https://qupath.github.io,https://github.com/qupath/qupath/issues/381#issuecomment-561272296,2,['undo'],"['undo', 'undos']"
Usability,"I expect that this is a difference in how line breaks are represented on Windows. It's not clear which operating system you used to write the zip, or which operating system/software you used to read the text file. It's also not clear for what purpose you are exporting. If it is to import the points again within QuPath have you tested to confirm if this works? If for some other purpose, can you please specify?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/347#issuecomment-517716299:91,clear,clear,91,https://qupath.github.io,https://github.com/qupath/qupath/issues/347#issuecomment-517716299,2,['clear'],['clear']
Usability,"I find the ROI-based (i.e. non-Geometry-based) rules confusing and counter-intuitive, because (0,0) would be inside and (1,1) outside in the above example (including with a `PolygonROI`, not just a `RectangleROI`). I don't have a good answer to your question - my guess would have been that `covers` is sufficient, based on https://javadoc.io/doc/org.locationtech.jts/jts-core/latest/org/locationtech/jts/geom/Geometry.html#covers-org.locationtech.jts.geom.Geometry-; I'm still learning about this stuff though (mostly through getting it wrong).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048272597:75,intuit,intuitive,75,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048272597,2,"['intuit', 'learn']","['intuitive', 'learning']"
Usability,"I forgot to add: the display in the viewer is only for visualization and doesn't affect the analysis. I've looked at setting the stain vectors with a few images, and I couldn't find anything wrong or inconsistent. @cfmoro can you give any exact sequence of steps that can show any bug / inconsistent behavior?. @melvingelbard and I now use GitHub Issues for planning our work, so we need a clear definition of something definitely wrong that we can fix :) Without this I'd like to close the issue - discussions are better at http://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/464#issuecomment-622249526:390,clear,clear,390,https://qupath.github.io,https://github.com/qupath/qupath/issues/464#issuecomment-622249526,1,['clear'],['clear']
Usability,"I found a few example of badges here:; https://github.com/Naereen/badges. I didn't realize Zenodo offers more than just a badge, here are the instructions to setup Zenodo for archival. ; https://guides.github.com/activities/citable-code/. I fixed the Zenodo reference.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/656#issuecomment-788122499:195,guid,guides,195,https://qupath.github.io,https://github.com/qupath/qupath/pull/656#issuecomment-788122499,1,['guid'],['guides']
Usability,"I had a quick look on my local version of the code, where I've been exploring new things. Here's a screenshot:. ![image_descriptions](https://user-images.githubusercontent.com/4690904/35859449-04d0dfd2-0b38-11e8-9696-f549f97208d4.jpg). I've added the description to the 'Project' tab rather than the 'Image' tab, so that it can be accessible without actually opening the image at all. In this instance, the description that is shown depends upon which image entry is *selected* (i.e. blue), which is potentially different from the image that is actually opened. The 'opened' image is now highlighted with bold text to make it clearer (n this case, they are the same image). I hope that feels intuitive, but I guess it needs tested. My reason for doing it that way is that I thought it would be useful to give the option of checking the description before deciding whether or not to open the image. I've also been looking into several other changes, including the ability to set metadata values for individual images (you can see the options on the popup menu). This means a project can have multiple image sets, and you can sort them to get a tree-like structure. (Admittedly it's a small tree, since it only goes one level deep...). Do these changes look like they would help for your applications?. Adding descriptions to annotations would be a more 'core' change, that would affect the .qpdata files. So I'll need to think a bit more about how to achieve it, although I certainly agree it could be very useful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-363409447:626,clear,clearer,626,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-363409447,2,"['clear', 'intuit']","['clearer', 'intuitive']"
Usability,"I had wanted to play with something like this for a while now, and this post finally got me going! It took some time as I am not great with Java, but I have put together a two part system that is independent of the .qpdata file, though you could certainly enhance it's usefulness with annotations. To start (assuming you have a project with an image), you would create an ""Explore"" (capitalized) folder within your project folder, at the same level as the ""data"" folder. Then run the ""Location file creator"" and select the views that you would want the student to cycle through, in order, while writing a text file referencing each location (which will be labeled 1,2,3, etc.).; Once you have both the text file and the object file saved to your Explore folder, anyone currently looking at an image should be able to run the Slide Explore script which takes the text file and the object file with the views, and allows the user to read and cycle through the various views that were set up. I created a sample for JP2K-33003-1 if anyone wants to try it out and give some feedback. Once I am a little better with Java, I would like to change the Next/Previous buttons into hyperlinks in the text, but I am not quite there yet :). Scripts at: https://gist.github.com/Svidro/86fb224d69484ae5955631ce68d27054. The test image can be accessed at: http://openslide.cs.cmu.edu/download/openslide-testdata/Aperio/JP2K-33003-1.svs; The "".log"" file needs to be renamed to "".obj"" as I cannot post that file directly otherwise. I am sure there are a lot of improvements that could be made, and any feedback is welcome. [JP2K-33003-1.txt](https://github.com/qupath/qupath/files/1715587/JP2K-33003-1.txt). [JP2K-33003-1.log](https://github.com/qupath/qupath/files/1715588/JP2K-33003-1.log)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/144#issuecomment-364849591:1070,feedback,feedback,1070,https://qupath.github.io,https://github.com/qupath/qupath/issues/144#issuecomment-364849591,2,['feedback'],['feedback']
Usability,"I have seen the same error before, but not since updating to JDK 14 (which will be a minimum requirement for v0.2.0, since it greatly simplifies building by including jpackage). To avoid the error with JDK 11-13, I think you'd need to change the build script to include more modules with jlink.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/436#issuecomment-612953950:134,simpl,simplifies,134,https://qupath.github.io,https://github.com/qupath/qupath/issues/436#issuecomment-612953950,1,['simpl'],['simplifies']
Usability,"I haven't tried the new classifier with a large training set, and I'm afraid I really cannot help more without a clear error message (e.g. from the log). However, the new object classifier is not really intended to scale to 200,000 objects for interactive training... or, at least, doing so is likely to require more memory. Therefore this sounds like it may be a limitation rather than a bug. This may change in the future; in particular, a future release may document how to train a classifier via scripting in a way that requires less memory. The legacy classifier might cope with larger training sets but at a cost of being much more restricted in how it works, and having other issues (e.g. needing to be retrained when reloaded https://github.com/qupath/qupath/issues/343). It is deprecated, but not yet removed in case anyone still needs to use it: https://qupath.readthedocs.io/en/latest/docs/reference/faqs.html#why-are-some-commands-marked-as-deprecated. For now I'd recommend trying to be more selective for training examples when using the new classifier, or else resort to the legacy classifier if you prefer.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-631451060:113,clear,clear,113,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-631451060,1,['clear'],['clear']
Usability,"I haven't yet had time to write up my guide on google groups, but at the following link ; https://gist.github.com/Svidro/6171d6d24a85539d3af5d417bc928d50; You can find a 3 step process which can let you create both nuclei and whole cells. Hopefully I will get around to creating the ""How to"" this weekend, but it seems like it might be useful for what you are doing. Or at least it could give you a nuclear count in addition to the rest of your cells. Although on second thought, with the overlapping nuclei, it might not be so useful!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379423138:38,guid,guide,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379423138,1,['guid'],['guide']
Usability,"I mean polygons that might have multiple separate regions and yet are still treated as the same shape, or contain holes inside them - and so can't be represented simply by a list of vertices. You can create such shapes using the brush or wand tool - hold down 'Alt' to turn on 'subtract mode', and this lets you remove areas from inside an existing shape. You can also hold down shift when using the brush to create multiple polygons but which are treated as the same object (which you can see by the fact they are all selected together... using the default colors this means all shown as yellow). Given that your plan is to create a binary mask, definitely check out the blog. It should be much easier to do this directly from within QuPath and not need to handle another way to handle the shapes. From memory, there are a few posts where I described this kind of thing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/95#issuecomment-388286086:162,simpl,simply,162,https://qupath.github.io,https://github.com/qupath/qupath/issues/95#issuecomment-388286086,1,['simpl'],['simply']
Usability,I noticed when running object / pixel classifiers in batches that QuPath would not always clear up the tile cache properly (or that's at least what I thought?) and would occasionally end up running out of memory / being sluggish due to limited available memory. . I added something similar to the snippet below to my scripts and it partially resolved my problems if I recall correctly -- probably worth investigating if nothing else comes up (although my issues were possibly different than the issues brought on image.sc). ```java; Thread.sleep(100). javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }. Thread.sleep(100); ```,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715891250:90,clear,clear,90,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715891250,2,['clear'],['clear']
Usability,"I realise that doesn't look good, but I think it is progress... the failed import of ```numpy.core.multiarray``` is where I was also having problems with Ubuntu (albeit with a less catastrophic-looking exception). The fact that OpenCV and OpenSlide are also not usable is... disappointing, but not exactly surprising - I have mostly focussed on getting QuPath to work properly on Windows and Mac, and you are the first person I know of using it on Linux. Both OpenCV and OpenSlide have native library issues that might be easier to solve. If you happen to find a way to get them to work, the same solution may help make progress with JEP. I will look into this some more, but realistically it might take a few weeks before I can give it proper attention. (It may also be worth keeping [javabridge](http://pythonhosted.org/javabridge/) in mind, if you would like some variation...)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262912897:262,usab,usable,262,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262912897,1,['usab'],['usable']
Usability,"I saw some z-stacks in the images that you linked, and it's possible to switch between slices with the slider at the top left. The auto contrast settings are a bit more sensible at if you can build the beta version [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html), and this will also then save the contrast settings within the `.qpdata` file. The viewer should be quite a bit more responsive as well, if you have more channels. So it's definitely worth checking out if you're working with fluorescence. If you add the image to a QuPath project, all the potentially-interesting images _should_ become available in the project, and you can optionally delete some afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409247462:409,responsiv,responsive,409,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409247462,1,['responsiv'],['responsive']
Usability,"I simply opened a .tif file in qupath, then used the points tool to put counting dots over cell images. When I would finish and image I would save the file by clicking ""save"" and saving the .qpdata file right below the original .tif I was counting from. I'm not sure if this is helpful.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461113578:2,simpl,simply,2,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461113578,1,['simpl'],['simply']
Usability,"I suspect the difficulty is with how the [hierarchy](https://github.com/qupath/qupath/wiki/Object-hierarchies) handles annotations that overlap... that can make knowing that's inside what a bit awkward, and not always very intuitive. There may be a manual way to do want you want through the user interface, but I suspect it could be quite laborious. Since this looks like it could be generally useful for others as well, my mind always turns to whether it would be cleaner to write a script or add a new command to the software instead... I have a few questions to check if I understand correctly what you need:; * What are the final outputs you want? Is it the number of immune cells per mm^2 or something else?; * Is it problematic that the green region extends outside the tissue?; * Do you have a strong opinion on having the outer areas (here, green and blue) containing _everything_ (i.e. black nested inside blue, then blue inside green), or would it be acceptable/preferable if each area was independent and non-overlapping (i.e. the black area would be one polygon, but the green and blue would be more like 'hollow rings' around the outside)?; * Does the _Positive cell detection_ work directly (e.g. if you've got hematoxylin and DAB staining, and you just need a count based on cells where DAB is evident), or do you really need a classifier?; * If you _do_ need a classifier, do you need to train it new for every image - or do you plan to train it once, and then apply the same classifier for every image?; * Roughly how many images do you need to analyze in this way? (e.g. tens, hundreds, thousands... to get a rough idea of how automated the approach ultimately needs to be); * Have you already got a lot of existing annotations / cells that you need to reuse, or are you just starting? Usually adding new annotations when there are already a lot of cells can be _very_ slow, and it might be easier to create the annotations first before doing the cell detection. But potentially eit",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/198#issuecomment-411011755:223,intuit,intuitive,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/198#issuecomment-411011755,1,['intuit'],['intuitive']
Usability,"I tested performance using CMU-1.svs.; I used a very basic thresholder and simple classifier trained for 3 classes, saved for both classification and probability output - then ran the script at the bottom. Using a Mac Studio (2022) with M1 Max and 32 GB RAM the processing time was:. | v0.3.0 | v0.4.0-SNAPSHOT |; | ------------- | ------------- |; | 593.9 s | 60.1 s |. Results identical as far as I can tell. So... quite a substantial difference :). Cell detection took close to 30s, with 326 498 cells detected,. ```groovy; def checkpoints = [:]. setImageType('BRIGHTFIELD_H_E'); setColorDeconvolutionStains('{""Name"" : ""H&E default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""Eosin"", ""Values 2"" : ""0.2159 0.8012 0.5581"", ""Background"" : "" 255 255 255""}'). clearAllObjects(). checkpoints << ['Tissue detection': System.currentTimeMillis()]. createAnnotationsFromPixelClassifier(""Tissue detection"", 10000.0, 0.0, ""INCLUDE_IGNORED""). checkpoints << ['Cell detection': System.currentTimeMillis()]. selectAnnotations(); runPlugin('qupath.imagej.detect.cells.WatershedCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 1.0, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}'). for (classifier in ['Some probability', 'Some classification']) {. // Create annotation measurements; checkpoints << [""Annotation measurements for $classifier"": System.currentTimeMillis()]; selectAnnotations(); addPixelClassifierMeasurements(classifier, classifier); ; // Create cell measurements; checkpoints << [""Cell measurements for $classifier"": System.currentTimeMillis()]; selectCells(); addPixelClassifierMeasurements(classifier, classifier); }; checkpoints << [""Done"": System.currentT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584:75,simpl,simple,75,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076#issuecomment-1279692584,2,"['clear', 'simpl']","['clearAllObjects', 'simple']"
Usability,"I think I do get the point, but want to ensure it's clear what exactly should be solved here, as I suspect there are alternative approached to consider. For example, I quickly drafted a rough alternative at https://github.com/qupath/qupath/pull/1489. This simply delays loading images until the `ImageServer` is requested. It has the advantages of being simpler (no need for different 'Run' actions), doesn't introduce any new `ImageServerStub` class, and avoids failure if pixels are requested. It probably has disadvantages too, as calling code needs to be more careful not to request the server at all (even for metadata), to avoid triggering the image to be loaded. I'm not sure which is best, but we should go with the most maintainable solution that solves the main problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875:52,clear,clear,52,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2025049875,3,"['clear', 'simpl']","['clear', 'simpler', 'simply']"
Usability,"I think it would be better to post a question like this on [the forum](https://forum.image.sc/) along with a clear description of what you tried, which software versions you're working with, etc. > So no InstanSeg and other Deep Learning models that depend on this Deep Java Library for me. DJL generally and InstanSeg specifically should still work with CPU support only. > There just must be a way to make it work more easily. We have indeed done our best to do so; it's not necessarily easy to handle all of the possible configurations people have",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439:109,clear,clear,109,https://qupath.github.io,https://github.com/qupath/qupath/issues/1640#issuecomment-2352697439,2,"['Learn', 'clear']","['Learning', 'clear']"
Usability,"I think the current answer is 'no'. As I understand your question, you mean tiles containing pixel data - is that right?. I have been working on some related things that could change this situation, making it possible to overlay different images and apply a (rigid) transformation if necessary to aid alignment... but as one project among many, it could take some time for the changes I'm making to become really useful. And I'm not actively working on any more complex registration - just shifts and rotations. Can you say more about what your aim is? For example,; * Do you primarily want this for visualization or analysis?; * Do you have different tissue sections, or the same tissue restained? (I guess the first, but the second is certainly easier on the image processing side...); * Which stains (colors) are you using for each TMA?. I'm not sure if it helps or you have already seen it, but with [Multiple viewers](https://github.com/qupath/qupath/wiki/Multiple-images) it is already possible to view different TMA cores side-by-side, and then navigate the grid using the arrow keys. TMA cores at the same grid location will be displayed together. You could also export each TMA core as a TIFF image from QuPath, and explore aligning these using some of Fiji/ImageJ's [image registration](https://imagej.net/Category:Registration) tools on a core-by-core basis. This could require quite a bit of effort. > Sidenote: I'm using [this blog](https://petebankhead.github.io) to describe some of the updates I'm working on, but which aren't yet in a QuPath release - it's also a good place to give feedback/suggestions to help shape where the changes go.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/162#issuecomment-377154596:1600,feedback,feedback,1600,https://qupath.github.io,https://github.com/qupath/qupath/issues/162#issuecomment-377154596,1,['feedback'],['feedback']
Usability,"I think the saving/reloading errors are completely different from the complete crashes. I'm a bit lost regarding which occurs with which classifiers and when, and I can't replicate most of what you report (except for the logistic regression thing). I also notice that you're running your classifiers at a very high resolution, and also with the parameters you're using the model could become rather complex. I haven't really had a chance to explore the limits of the pixel classifier, but it may well be that it really requires simpler models in its current form (the really complex stuff will likely need deep learning... and therefore quite a different approach). With that in mind. * Do you experience the same errors when using the default parameters?; * Do you experience the same errors when using simpler models (e.g. less training data, applied at a lower resolution)?; * If you try things on another computer, do you see exactly the same behavior?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/394#issuecomment-581003877:528,simpl,simpler,528,https://qupath.github.io,https://github.com/qupath/qupath/issues/394#issuecomment-581003877,3,"['learn', 'simpl']","['learning', 'simpler']"
Usability,"I think you are right, but I saw the current naming being an upgrade, like. ""Each user has their own folder where they can have their own code and settings."". Which meant that other settings like ImageJ directory and Extensions directory could be system-wide. But I think I am being too wishful, because like you said: since the start, options that in my opinion should be system-wide are not... Like when a new user logs-in they have to set the QuPath Setup options even though someone else already set them (even though the amount of RAM should not change from user to user, nor the Locale). Of course I am not going to pretend it is a dealbreaker, but it puts overhead on us when debugging issues: Did the user set the right amount of RAM? Where did they set the folder for the extensions?If we do not chase after our users, they each could have their own extensions folder in the default location (C:\Users\) which might be an issue for us [We are looking configure our workstations so that they do not keep any user preferences upon logging out because AppData tends to overfill over time, choking the C:\ drive in Windows]. But we favor apps that have a 'configure once' behaviour for these things. We have already been struggling with Imaris for years on this very issue. . This simply adds to the tedium of maintaining something in a multi-user environment.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/500#issuecomment-632628884:1286,simpl,simply,1286,https://qupath.github.io,https://github.com/qupath/qupath/issues/500#issuecomment-632628884,1,['simpl'],['simply']
Usability,"I think you have a couple of options depending on how easy it is to determine stroma vs tumor in your samples, and positive vs negative. If the differentiation is clear, and easy for the classifier to make, I would start with using one of the built in classifiers to sort all of the cells in the TMA into Stroma and Tumor classes. ; Then, by right clicking on the right hand side of the annotation tab, I would ""Add Class"" and make ""Tumor CD3 Positive"" and ""Stroma CD3 Positive"" classes. After you have those made, use the Classify->Classify By Specific Feature. This will take two steps, but it will let you select first ""Stroma"" class cells as the input and ""Stroma CD3 Positive""/""Stroma"" classes as the outputs. A second pass lets you do the same for the ""Tumor"" cells.; The downside to this is the Classify by specific feature command does not show up in the workflow and can be annoying to use on multiple images since you have to type it out each time. There is also a script that I can hunt down, if you want, that lets you automate the process, I forget if Peter posted it somewhere on the Wiki. You do need to rewrite the script somewhat for what you specifically want, however. ; The other option , if you cannot use the classifier to determine Stroma vs Tumor, and want to draw annotations in each core by hand, you can use a simple script that is currently the most recently discussed topic on the Gitter page, seen here [https://gitter.im/qupath-users/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link](url); After you use the annotations to assign the initial classes, proceed the same way. Of course, I am sure there are other ways to do it as well, this is quite versatile software!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/52#issuecomment-281009359:163,clear,clear,163,https://qupath.github.io,https://github.com/qupath/qupath/issues/52#issuecomment-281009359,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"I tried reproducing the error a few times with that classifier with 4 GB of RAM and I wasn't able to reproduce it. I bumped up the resolution to `1,01 µm/px` and two `OutOfMemoryError` came up with only one stacktrace (this happened without any GC or cache clearing; didn't try with it enabled either). **This was running on 0.3.2**, I can give it a try on newer versions if any relevant parts have changed in the code. I've attached the whole classifier below (it's just a simple thersholder to filter out the background). I think the original analysis was done with 6 GB or 8 GB of RAM but I also had other scripts with `qupath.imagej.detect.cells.WatershedCellDetection` running and I can't say for 100% certainty whether it was the Pixel Classifier, Cell Counting or both which caused OutOfMemoryErrors. ```; ERROR: OutOfMemoryError: Java heap space. ERROR: qupath.opencv.tools.OpenCVTools.matToBufferedImage(OpenCVTools.java:765); qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:115); qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); qupath.lib.images.servers.AbstractTileableImageServer$$Lambda$1691/0x0000000800796740.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); qupath.lib.analysis.images.ContourTracing.traceGeometriesImpl(ContourTracing.java:1157); qupath.lib.analysis.images.ContourTracing.traceGeometries(ContourTracing.java:1143); qupath.lib.analysis.images.ContourTracing.lambda$traceGeometriesImpl$9(ContourT",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500:257,clear,clearing,257,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1719699500,2,"['clear', 'simpl']","['clearing', 'simple']"
Usability,"I tried to install Segoe UI Bold from an online vendor but doing so simply reverted all the text to the garbled version. Looks like you can't re-download the original TrueType font files directly from Microsoft (see https://docs.microsoft.com/en-us/typography/font-list/segoe-ui), so not sure where to obtain the correct `.ttf` files from.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/866#issuecomment-996246433:68,simpl,simply,68,https://qupath.github.io,https://github.com/qupath/qupath/issues/866#issuecomment-996246433,1,['simpl'],['simply']
Usability,"I understand the problem, but it seems to have occurred at the stage the tiff was created because the bounds were ignored. QuPath wasn't involved in that. Alternatively, if you consistently use the tiff in both QuPath and IIIPImage then it should be fine - neither QuPath nor IIIPImage will crop the tiff. As I understand it, the issue only occurs if you try to match an unpadded mrxs image with a padded tiff image. As shown in the scn example, it would be very bad for QuPath to ignore the crop bounds. Because mrxs isn't tiff-based (and seems to be a particularly awkward proprietary format), it's harder to find other sources to resolve what exactly the bounds mean, but in the scn case it's very clear that the most sensible and consistent behavior is to apply OpenSlide's bounds... which is why it's QuPath's default for all OpenSlide images.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1278#issuecomment-1631180457:701,clear,clear,701,https://qupath.github.io,https://github.com/qupath/qupath/issues/1278#issuecomment-1631180457,1,['clear'],['clear']
Usability,"I will close this issue because of lack of activity, and it is not clear if there is an issue within QuPath that can be solved.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/387#issuecomment-586470952:67,clear,clear,67,https://qupath.github.io,https://github.com/qupath/qupath/issues/387#issuecomment-586470952,1,['clear'],['clear']
Usability,"I would definitely recommend doing the export with ImageJ if you can, using the [ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) and a very simple ImageJ macro like this one. ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```. You'll need to make sure that the export directory exists before running it. Still, if you do it this way then if you open the resulting TIFF within ImageJ you should find that the pixel sizes are preserved - and even the information regarding where in the image the region was taken (look under *Image &rarr; Properties* in ImageJ). This isn't stored if you export in any other format (e.g. PNG, JPEG). Even if you don't need it currently, this at least gives the possibility that you could relate any detected regions etc. that come from processing the TIFF back to where they came from in the original, whole slide image. You can also modify the export resolution by changing the 'Downsample factor' in the macro runner.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/85#issuecomment-317354440:187,simpl,simple,187,https://qupath.github.io,https://github.com/qupath/qupath/issues/85#issuecomment-317354440,1,['simpl'],['simple']
Usability,"I would first check the log file (View-> show log), but it does look like you might have run out of memory. . It is also possible that *sometimes* the detection creation functions run into problems with ""small"" tiles, and the entire process stops. To get around this (or test for it) I would recommend choosing slightly different settings in your Simple Tissue Detection (more smoothing, requested pixel size change, etc.).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/115#issuecomment-343274362:347,Simpl,Simple,347,https://qupath.github.io,https://github.com/qupath/qupath/issues/115#issuecomment-343274362,1,['Simpl'],['Simple']
Usability,"I'd like to close this issue. I suspect between us we have already spent much more time investigating and describing it than the sum total of all the milliseconds of lag likely to be suffered by all users :). For the reasons outlined above, fixing it without breaking something else isn't trivial - and then the behavior might well resurface in the future if some other repainting aspect is optimised. I'll keep the laggy behavior in mind during any future attempt to improve repainting performance, but I don't really want to introduce additional complexity into the code to address only this. I can't think of a scenario when the lag will be problematic for someone with a machine capable of running meaningful QuPath analysis - and even if that happens, there's a simple workaround (i.e. press `D` instead of using the opacity slider). I don't think this should count as a bug so much as the absence of one possible optimisation. It's always a tradeoff between impact, developer time, and maintainability when deciding which optimisations are worth the effort to implement. It has already take some time, and while a 'fix' might be quite to implement, thoroughly checking nothing else is broken would likely take much longer. Feel free to reopen if you find more problematic consequences of the behavior.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/826#issuecomment-944299730:767,simpl,simple,767,https://qupath.github.io,https://github.com/qupath/qupath/issues/826#issuecomment-944299730,1,['simpl'],['simple']
Usability,"I'd need more information from you to be able to answer that... what exactly are the steps that you have applied, what features calculated, how many objects per image etc. Note also that the memory reported in Windows might not be the best guide. Use *View &rarr; Show memory monitor* within QuPath instead, and press *Reclaim memory* to find out what is *really* needed. And you can also clear the tile cache/reset undo/redo to really squeeze it down to the essentials of what QuPath currently needs at that moment. VisualVM is the technical way to find out what *exactly* is being loaded: https://visualvm.github.io",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-635240041:240,guid,guide,240,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-635240041,3,"['clear', 'guid', 'undo']","['clear', 'guide', 'undo']"
Usability,"I'd rather not expose more than necessary. What would it solve?. (I seem to have introduced a big bug in `PathIO`, so currently working on this... v0.6.0-SNAPSHOT isn't in a very usable state right now)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2278151773:179,usab,usable,179,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2278151773,1,['usab'],['usable']
Usability,"I'd say 3.3 GB is a perfectly respectable amount of RAM for QuPath (I assume your computer has 8 GB or 12 GB...?). Personally, I have never had a powerful enough computer to be able to give anywhere close to 64 GB when either developing or using QuPath... and I don't think I ever needed 16 GB either. Maybe my needs have been modest than @Svidro's but I think that it's not typical to need such huge amounts of memory for most people :). However, I note that you are using a CZI image. There are still some lingering issues around QuPath's ability to handle CZI images; depending on the type of image (e.g. TMA/non-TMA, stitched...), I've heard that sometimes it works very well and sometimes there are problems. It's on my to-do list to investigate why this happens... currently it is a little mysterious for me, and it's not clear if it's something I can resolve within QuPath or which requires more outside help. Anyway, I don't know if that is the source of your memory woes, but it could be. Out of curiosity,; * is your image brightfield or fluorescence? (the error suggests brightfield); * is it a 2D whole slide scan, or an image from a microscope?; * is it a TMA image, large tissue section, or something else?; * does QuPath operate reasonably smoothly, or horribly slowly before the crash? If you need a comparison, there are some [links on the wiki](https://github.com/qupath/qupath/wiki/Counting-cells) to test data that you might use for comparison.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343309138:828,clear,clear,828,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343309138,1,['clear'],['clear']
Usability,"I'm afraid not. QuPath give access to a range of classifiers from OpenCV and (optionally, with the extension installed) Weka - any parallelization would need to happen in those libraries, and depending on the algorithm might not help much. QuPath is also designed to make it possible to add new classifiers, so potentially newer, faster ones might be added one day... if someone makes them. I'd suggest trying to reduce your number of training objects and/or features. In the case of cells (for example), neighboring cells often have very similar features and including many similar cells probably doesn't help much... and it may even cause harm, by requiring even more training objects to learn something else. There are discussions about training classifiers [here](https://groups.google.com/d/msg/qupath-users/MpsK44RCZcE/xE3nX4aJCAAJ) and [here](https://groups.google.com/d/msg/qupath-users/qM_JtrEW1dI/Jeb5iMRnAQAJ). I also discuss a bit about improving the results when using the same training objects but fewer features [here](https://youtu.be/uj28wJSmntU?list=PL4ta8RxZklWk_O_Z7K0bZlhmHtaH73vlh). I do plan to make some changes that should improve how quickly an existing classifier is reloaded (even if it does not change the training time), described [here](https://groups.google.com/d/msg/qupath-users/EkQNKOqUBVE/UqB0tcL8AQAJ). But it's a fairly substantial change and a matter of finding enough time...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/206#issuecomment-416021080:690,learn,learn,690,https://qupath.github.io,https://github.com/qupath/qupath/issues/206#issuecomment-416021080,1,['learn'],['learn']
Usability,"I'm afraid that some of the commands flagged 'experimental' are more experimental than others... and that's one that is more experimental than most. It was added as a very simple counting method, but I only used it myself for some TMAs to have a quick comparison of the results against 'full' cell-by-cell analysis. It turns out to have some troubles that need to be fixed, especially when used in other contexts. The problem @Svidro mentions is that it requires at least one 'hematoxylin' pixel to be able to return anything.; Another strange feature is that, if you look at the hierarchy, the 'Positive' region is _inside_ the 'Negative' one.; And a third is that the 'Num pixels' value is a count of the pixels at the downsample level used. This isn't necessarily 'wrong', but it is not ideal because the measurement name doesn't say what downsample was used. It would be preferable to have a value converted to µm. > Some of these problems arose because the command was initially designed to generate 'Any staining' and 'DAB' regions; at that time, it was logical to return nothing if 'Any staining' was 0. It was also logical to put the 'DAB' region inside 'Any staining' in the hierarchy. Unfortunately, these aspects weren't updated when 'Any staining' was switched to become 'Hematoxylin'. Added to all that, the command doesn't handle fluorescence or other stain types. For all these reasons, I expect that this command will be replaced or substantially changed at some point. Therefore, while you could maybe work around the limitations of the positive pixel command, I'd suggest trying to use other commands for now if possible.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-297915004:172,simpl,simple,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-297915004,1,['simpl'],['simple']
Usability,"I'm not sure that there are (many/any?) other developers maintaining maven-based extensions for QuPath, and gradle is the recommended approach. I'm reluctant to add something like this to the main build script when it isn't actually needed to build QuPath itself, and many people (including me) may prefer not to install the jars to their local maven repository. In any case, I understand there are other ways to install the jars locally, e.g. https://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html. Currently I am refactoring and aiming to reduce as much of complexity as possible to make the software more maintainable. It may be worth revisiting the use of Maven when this is complete.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/324#issuecomment-497588046:469,guid,guides,469,https://qupath.github.io,https://github.com/qupath/qupath/pull/324#issuecomment-497588046,2,['guid'],"['guide-', 'guides']"
Usability,"I'm not sure, because I don't have the same images and classifier to test exactly, but you might need a ; ```; selectAnnotations();; ```; before the last `runPlugin`. This won't appear in the automatically generated script if you selected annotations manually. The best place for questions like this is https://forum.image.sc/tag/qupath; GitHub issues is really intended only for bug reports that follow the template (which should appear when you try to create a new issue). More people are likely to see any questions on the forum and give feedback; if it turns out that it really is a bug then it can always be added here later and linked to the forum discussion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704#issuecomment-816052660:541,feedback,feedback,541,https://qupath.github.io,https://github.com/qupath/qupath/issues/704#issuecomment-816052660,1,['feedback'],['feedback']
Usability,"I've flagged this as a duplicate, since it sounds the same as the issue linked to by @Svidro. I've given the details there, and potential direction for how it might be addressed in the long term. In this case, it might be possible to improve matters by ensuring that all entries in the 'hierarchy' tab are first closed - or that there are no child objects. Then the results in the annotation table can be sorted by area, and all the top entries (with low areas) selected in one go. In the longer term, the better way to handle this would be to write a script that finds all the annotations with an area below a specified threshold, and removes them directly from the object hierarchy. Using a script it is possible to avoid the need for selecting the annotations in the GUI entirely, and get *much* better performance. Clearly this is a bit more work to begin with, but I highly recommend working through the scripting parts on the Wiki if you haven't done so already - this is the kind of application where scripting can be invaluable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/86#issuecomment-317358116:819,Clear,Clearly,819,https://qupath.github.io,https://github.com/qupath/qupath/issues/86#issuecomment-317358116,1,['Clear'],['Clearly']
Usability,"I've installed Debian + i3 in VirtualBox to experience the issue and can conclude... QuPath really doesn't seem to work very nicely under these conditions, but it's not clear to me if/how this can be resolved. It also might be my lack of familiarity with i3 that is causing the trouble. QuPath v0.2.0 includes a *File &rarr; Quit* option and removes the startup screen... so this should at least address some of the problems reported. Otherwise, it uses standard JavaFX windows. If most of these work, but an identifiable minority do not, then these is something that could potentially be fixed by providing other ways to close these windows. But if there is a more fundamental issue with i3 and JavaFX then this likely cannot be handled in QuPath alone. Is this issue still of sufficient interest to anyone to explore in more detail what does/doesn't work and help try to construct a plan to resolve it? If so, please let me know what issues remain.; If not, or if the changes in v0.2.0 have been enough, I'd like to close the issue.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-641999427:169,clear,clear,169,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-641999427,1,['clear'],['clear']
Usability,"I've looked into this a little bit. I've never really needed or wanted this feature myself, but can see it would certainly help in some contexts. My worry is that power users running long scripts will tend to want different ways of being notified that the script is finished. Ideas that come to mind are:; * Something audible, e.g. the beep; * Email/telegram; * 'Requesting attention', e.g. forcing the app to the front; * A small, unobtrusive progress bar that can be 'always on top' (even if QuPath isn't). I'm not sure adding one option to the batch script dialog will be enough to solve the problem, and adding many becomes a lot more clutter and effort to maintain. To overcome that, my initial idea was to provide the option of adding a 'batch script listener' to the script editor. . So you could add a listener using something like this (in Groovy):; ```groovy; def scriptEditor = getQuPath().getScriptEditor(); scriptEditor.addBatchScriptListener(e -> {; if (e.isLastScript()) {; // Do something... beep, email, whatever; java.awt.Toolkit.defaultToolkit.beep(); }; }); ```. The thing is that the listeners would be cumulative, so you'd likely want to just add one on startup and leave it (rather than add multiple listeners and then have them all firing when scripts are run). But then it becomes harder to turn it on/off the listener's behavior. Nevertheless, this approach would make it possible to add small extensions that offer different kinds of behavior, controlled via preferences or something else. So you could have a preference allowing the user to choose the audio file they want played on completion, for example.... but still, remembering to turn the option on and off could be a pain, since it wouldn't be easy to incorporate it as a checkbox in the batch processing dialog itself. While writing this, another option I've thought of is to make more info about the current script accessible within the script itself. So it might look like this:. ```groovy; if (getScriptInfo().i",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1029#issuecomment-1200084804:444,progress bar,progress bar,444,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029#issuecomment-1200084804,1,['progress bar'],['progress bar']
Usability,"I've made a PR at https://github.com/qupath/qupath/pull/1195. It involved entirely changing how the Groovy syntax highlighting works, and adding support for a few other Groovy features (like using colors to indicate `""string $interpolation""`, or numeric values). It doesn't handle everything, because that would require fully parsing the code too avoid getting mixed up (e.g. mistaking a division operator for the start of a slashy string). The code was very fiddly to write, so I wouldn't be surprised to learn its broken in some places - but as far as I can tell, it's better than the previous version. @Rdornier if you've time to check it out, please let me know if there are problems.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1176#issuecomment-1357429790:506,learn,learn,506,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176#issuecomment-1357429790,1,['learn'],['learn']
Usability,"I've made some progress. After cell detection, I did _Analyze → Calculate features → Add intensity features (experimental)._, with a pixel size of 1 um. I chose Red, Green, and Blue, and Mean. Then the following code:. ```; import qupath.lib.objects.classes.PathClass; import qupath.lib.objects.classes.PathClassFactory. def Brown = PathClassFactory.getPathClass(""Brown""); def Red = PathClassFactory.getPathClass(""Red""); def Purple = PathClassFactory.getPathClass(""Purple""); def Teal = PathClassFactory.getPathClass(""Teal""). def rmean = ""ROI: 1.00 µm per pixel: Red: Mean""; def gmean = ""ROI: 1.00 µm per pixel: Green: Mean""; def bmean = ""ROI: 1.00 µm per pixel: Blue: Mean"". for (def cell :getCellObjects()) {; ; double r = cell.getMeasurementList().getMeasurementValue(rmean); double g = cell.getMeasurementList().getMeasurementValue(gmean); double b = cell.getMeasurementList().getMeasurementValue(bmean); ; if (isBrown(r,g,b)); cell.setPathClass(Brown). else if (isPurple(r,g,b)) ; cell.setPathClass(Purple). else if (isTeal(r,g,b)); cell.setPathClass(Teal). else if (isRed(r,g,b)) ; cell.setPathClass(Red). }; ```. the `isBrown()`, etc. functions just do some simple thresholding of the r,g,b values to decide what color a cell is stained. I'm still tweaking those functions, but it's working pretty well (white outlines are unclassified cells, the rest are outlined in the appropriate color):. ![5-plex snapshot](https://user-images.githubusercontent.com/3537118/37124548-9755fc06-221d-11e8-93c5-dc4f02dd68ac.png). I think this will work well enough for my application (we'll be presenting this data as a platform presentation at USCAP in Vancouver in a couple weeks, if anyone is interested in multiplex IHC).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/155#issuecomment-371327542:1164,simpl,simple,1164,https://qupath.github.io,https://github.com/qupath/qupath/issues/155#issuecomment-371327542,1,['simpl'],['simple']
Usability,"If I understand correctly, this PR is to make the top title change on hover but *not* the bottom one - because the top one can be expanded/collapsed, but the bottom one can't. https://github.com/qupath/qupath/assets/4690904/d115720b-3ace-41b2-b7e7-017cb21cc4c7. tbh I'd never noticed this or seen it as problematic. If you think it needs a fix, then should it not go into `qupath-fxtras`? This is the new home to [`simplifyTitledPane`](https://github.com/qupath/qupath-fxtras/blob/4a88b9b427ae6c9a17c33702c06f0c536cad6915/src/main/java/qupath/fx/utils/FXUtils.java#L550)... but then you'd need to load an external .css (like with the simplify method), e.g.; ```java; public void makeNonCollapsible(TitledPane pane) {; pane.setCollapsible(false);; // Whatever other styling is needed here; }; ```. Hard-coding a reference to the CSS class feels a bit brittle to me, and is tied very much to QuPath in a way that is unusable elsewhere. And I imagine we'll end up with inconsistencies as we'll forget / extension writers won't know to add this style class... which to me seems potentially worse. You could also change `main.css` to avoid any change on hover at all, but personally I think it looks quite nice and helps titles stand out. Was there any particular user complaint or confusion caused by the default JavaFX approach of slightly changing the behavior on hover, regardless of the 'collapsible' status?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919:415,simpl,simplifyTitledPane,415,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2123062919,2,['simpl'],"['simplify', 'simplifyTitledPane']"
Usability,"If you remove the jar file with 'qupath-extension-script-editor' in the name from your installation, QuPath is supposed to fall back to use a simpler script editor that lacks any kind of syntax highlighting. This may be worth trying as a workaround if the bug is more problematic than the loss of highlighting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/314#issuecomment-491329554:142,simpl,simpler,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/314#issuecomment-491329554,1,['simpl'],['simpler']
Usability,"If you upload a sample slide I could probably generate a sample script... but from the image it seems like either _Analyze->Region Identification->Positive Pixel Count_ within an annotation (you might try searching https://groups.google.com/forum/#!forum/qupath-users), or _Analyze-> Cell Analysis-> Cell Detection_ (https://github.com/qupath/qupath/wiki/Detecting-objects) with Optical Density chosen instead of Hematoxylin should give decent results. SLICs might also give you a simple way to detect area, and then if you add more measurements to them (Add Intensity Measurements) relating to texture (Haralick, etc) you might be able to automatically distinguish between tumor and stroma. If you want to play around with that, it's also under _Region Identification->Tiles and Superpixels_. https://github.com/qupath/qupath/issues/121 has an example.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-372155003:481,simpl,simple,481,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-372155003,1,['simpl'],['simple']
Usability,"If you zoom in more, by default the brush will be effectively smaller and so it's easier to select a region without changing the shape. Of you change just switch to the *Move* tool to select another region by double-clicking on it, without any risk of changing its shape. You can toggle between tools by just pressing `M` and `B`. In general, you might find 'locking' annotations helpful - that helps avoid changing them accidentally, and also allows you to draw _new_ regions inside an existing annotation with the brush. To do so, select the annotation and then right-click on it, and choose *Annotations &rarr; Lock*. Finally, if you are doing a lot of painstaking annotations be sure to save regularly (*Ctrl + S*)... or consider trying the beta/pre-release version [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html). Installation is a bit more awkward, but it does provide (limited) undo support along with many other improvements - so may be worth it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/179#issuecomment-399201573:914,undo,undo,914,https://qupath.github.io,https://github.com/qupath/qupath/issues/179#issuecomment-399201573,1,['undo'],['undo']
Usability,"Indeed, the prompt does not prepopulate new suggested paths in my case. While I don't see an easy fit-all solution, in my case the simple fact to be able to specify the path based on the current location of the project folder (for example storing it in a variable at the moment of opening) would already solve the problem (like it used to in v0.2.0 using $PROJECT_DIR). This means that before sharing the project I could manually modify the JSON if needed. . My ideal scenario would be :; 1) Test specified path using current project folder absolute path as a starting point (using a $PROJECT_DIR); 2) Test relative path if 1) fails; 3) Make user manually specify URI if all fails. This being said, It might not be as straightforward to implement code-wise depending on how you are currently rehauling your code base and the fact that there might be other fires to tackle first.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/346#issuecomment-518206588:131,simpl,simple,131,https://qupath.github.io,https://github.com/qupath/qupath/issues/346#issuecomment-518206588,1,['simpl'],['simple']
Usability,"Intuitively, it feels that if we do it to left/lower, then we should do it to right/upper - is there any reason not to?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1457#issuecomment-1941489238:0,Intuit,Intuitively,0,https://qupath.github.io,https://github.com/qupath/qupath/pull/1457#issuecomment-1941489238,1,['Intuit'],['Intuitively']
Usability,"It all depends on different factors such as the `downsample` used and the size of your image (which might be more helpful if it is in terms of pixels, rather than microns) amongst other things. Also, the `Positive pixel count` is a deprecated command, and was replaced in most recent versions of QuPath, to which we strongly recommend updating. The pixel classifier might just do what you need!. I will close this issue with your permission as it is not a bug. Is that ok?; For questions and help, you can ask on the community forum, where you'll find answers and more guiding: https://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/611#issuecomment-701504695:569,guid,guiding,569,https://qupath.github.io,https://github.com/qupath/qupath/issues/611#issuecomment-701504695,1,['guid'],['guiding']
Usability,"It is, though I think it would need to be scripted. Something like find centroid for a given annotation, subtract 2*distance from Y and X coordinates independently, rebuild the ROI with the new coordinates. It may be more or less complicated if you have an AWT/""annotation with holes or separate pieces"" where the points aren't kept in a simple list. Pete would probably know more, and I don't have a script ready built to do that, sorry :(",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/199#issuecomment-411218042:338,simpl,simple,338,https://qupath.github.io,https://github.com/qupath/qupath/issues/199#issuecomment-411218042,1,['simpl'],['simple']
Usability,"It looks good. I just have a few comments regarding tests. Currently, a lot of tests are made within just one function. If we want to follow unit tests guidelines, each test function must only tests one thing. This means that only one function should be tested at the same time, and this function should only be called once. Also, to write the test function, the Arrange / Act / Assert / (cleanup) pattern should be used. All of this is detailed [here](https://github.com/qupath/Java-style-guide/tree/main?tab=readme-ov-file#writing-a-test-function). Also, I think there are a few untested functions, like `PathObjectHierarchy.getAllObjectsForRegion()` or `PathObjectHierarchy.hasObjectsForRegion()`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2264954231:152,guid,guidelines,152,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2264954231,2,['guid'],"['guide', 'guidelines']"
Usability,It looks like the exception is coming from the attempt to load the classifications (the ones that appear under the 'Annotations' tab). These are stored in the project under *classifiers/classes.json*. Something has gone wrong with that file; you can try simply deleting it (if it exists) or replacing the corresponding file from another project.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/613#issuecomment-708519701:254,simpl,simply,254,https://qupath.github.io,https://github.com/qupath/qupath/issues/613#issuecomment-708519701,1,['simpl'],['simply']
Usability,"It looks likely that the data file is corrupt; unfortunately, without access to this we would not be able to replicate the issue. You can find the file under *Open directory... &rarr; Project entry...*; it will be called data.qpdata. This issue may be related: https://github.com/qupath/qupath/issues/512; See also the reference to a .bkp file that may be created when saving. You may also simply move/delete the data.qpdata file. This will remove all image data for that image from the project, so you'd then have to generate the superpixels again.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/607#issuecomment-693259996:390,simpl,simply,390,https://qupath.github.io,https://github.com/qupath/qupath/issues/607#issuecomment-693259996,1,['simpl'],['simply']
Usability,"It might be... there's no built-in option to do so, but see https://github.com/qupath/qupath/issues/57#issuecomment-288491139 for possible workarounds (which in your case would really involve duplicating and merging your projects). The following script _might_ work; as far as I know it does the right thing, but I haven't exactly tested it very much:; ```groovy; // Paths to training files (here, both relative to the current project); paths = [; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training.qptrain'),; buildFilePath(PROJECT_BASE_DIR, 'training', 'my_training2.qptrain'),; ]. // Path to output training file; pathOutput = buildFilePath(PROJECT_BASE_DIR, 'training', 'merged.qptrain'). // Count mostly helps to ensure we're adding with unique keys; count = 0. // Loop through training files; def result = null; for (path in paths) {; // .qptrain files just have one object but class isn't public, so ; // we take the first one that is deserialized; new File(path).withObjectInputStream {; saved = it.readObject(); }; // Add the training objects, appending an extra number which ; // (probably, unless very unfortunate with image names?) means they are unique; map = new HashMap<>(saved.getMap()); if (result == null) {; result = saved; result.clear(); }; for (entry in map.entrySet()); result.put(entry.getKey() + '-' + count, entry.getValue()); count++; }. // Check how big the map is & what it contains; print result.size(); print result.getMap().keySet().each { println it }. // Write out a new training file; new File(pathOutput).withObjectOutputStream {; it.writeObject(result); }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/256#issuecomment-455564256:1256,clear,clear,1256,https://qupath.github.io,https://github.com/qupath/qupath/issues/256#issuecomment-455564256,1,['clear'],['clear']
Usability,"It should be possible - the classifier interface is fairly simple, and once you've got a classifier you just need to update it. See https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-processing/src/main/java/qupath/lib/classifiers/PathObjectClassifier.java#L69. The default is the [RTreesClassifier](https://github.com/qupath/qupath/blob/v0.1.2/qupath-processing-opencv/src/main/java/qupath/opencv/classify/RTreesClassifier.java), and there are some useful helper methods in the [PathClassificationLabellingHelper](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core-processing/src/main/java/qupath/lib/classifiers/PathClassificationLabellingHelper.java) class.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/208#issuecomment-417774812:59,simpl,simple,59,https://qupath.github.io,https://github.com/qupath/qupath/issues/208#issuecomment-417774812,1,['simpl'],['simple']
Usability,"It shouldn't be file size. Under *Help &rarr; Show setup options* I can restrict the RAM available to QUPath to 1GB and can still open the image without problems. You can also try the memory monitor from https://petebankhead.github.io/qupath/scripting/2018/03/06/script-memory-monitor.html. The log says `Not a file that OpenSlide can recognize`. It's not clear to me if *any* images are working for you using OpenSlide. I asked above: under the *Image* tab does it say *OpenSlide* beside the entry *Server type*? If you see that for any images, then we can conclude that OpenSlide is (at least partially) working. But if you always see *ImageJ server* or *Bio-Formats server*, then it probably isn't and that's the problem that needs to be solved. In that case, it would help to know if a separate installation of OpenSlide on your machine can read the image at all through any means.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371850256:356,clear,clear,356,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371850256,1,['clear'],['clear']
Usability,"It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:; ```groovy; // Print the current memory situation; def runtime = Runtime.getRuntime(); double scale = 1.0/1024.0/1024.0; print 'Max memory (MB): ' + (runtime.maxMemory() * scale); print 'Total memory (MB): ' + (runtime.totalMemory() * scale); print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache; javafx.application.Platform.runLater {; getCurrentViewer().getImageRegionStore().cache.clear(); System.gc(); }; ```. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355845333:712,clear,clear,712,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355845333,2,['clear'],"['clear', 'clearing']"
Usability,"It sounds like you need a simple, one-line script that contains your settings. QuPath should already record these settings for you under the 'Workflow' tab. Double-clicking an entry there should open/run the corresponding command with the appropriate settings... but this is only available for commands you've already run for the current image. To transfer settings across an image, press *Create script*. The automatically-generated script will probably contain too many lines, but you can simply delete the ones you don't want; for example, just keep the last line if the last thing you did was run the cell counting algorithm. The script you end up with probably looks something like this:; ```groovy; runPlugin('qupath.imagej.detect.nuclei.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Nucleus: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');; ```. You can then save this as a file with the extension ```.groovy``` and drag it onto QuPath again to open it. Press *Run &rarr; Run* from the top menubar to apply it. There is some more information under https://github.com/qupath/qupath/wiki/From-workflows-to-scripts",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/105#issuecomment-333905568:26,simpl,simple,26,https://qupath.github.io,https://github.com/qupath/qupath/issues/105#issuecomment-333905568,2,['simpl'],"['simple', 'simply']"
Usability,"It won't load the pixel data if it doesn't need it, only the objects. However, it does this less efficiently than the old classifiers - and so will require *some* more memory. For example, I believe the old classifiers stripped away the ROIs from training objects, and therefore this saved some memory... so in practice it needed less than 200 MB per image. QuPath now probably does need the full 200 MB per image (but not 20 GB). I don't know how much RAM you have, and how much of it is given to pixels (rather than objects), so I can't estimate when this limit is reached in your case. Ultimately the new design will enable more powerful and flexible classifiers in future versions (because more information is available). We will also look to improve the efficiency in the future, and track the memory use better so that we can give more informative warnings before a crash. But all of this will take some time to write, and will not appear in v0.2.0. If there is a clear memory leak (and QuPath crashes with a small number of objects, or an exact error log can help us find a problem) then we'll try to fix it. But at this point, I don't know if that's the case.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/493#issuecomment-633901008:970,clear,clear,970,https://qupath.github.io,https://github.com/qupath/qupath/issues/493#issuecomment-633901008,1,['clear'],['clear']
Usability,"It works for me, but perhaps the image you are trying to export is too large / lacks pixel size information, resulting in the image not being downsampled enough?. You could try replacing the line; ```groovy; double downsample = requestedPixelSize / server.getAveragedPixelSizeMicrons(); ```; with; ```groovy; double downsample = 10; ```; or a higher value to specify that the image should be downsampled. Or try using one of the whole slide images from the early stages of the Wiki, where there are step-by-step guides. Otherwise, if you are able to attach your original image then I can try replicating your issue exactly - but for the images I've tried it works. > It's also quite hard to read your code with the different font size/bold formatting - you can format code by enclosing it as follows:; > ```groovy; > ```groovy; > // Code here; > ```; > ```; > See https://help.github.com/articles/creating-and-highlighting-code-blocks/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420294416:512,guid,guides,512,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420294416,1,['guid'],['guides']
Usability,"It's a long time since I wrote that bit (and I probably should have used `Set.of(...)` instead of the `HashSet`...), but I'm not sure that adding `MOUSE_RELEASED` would be correct. The purpose of the `EventFilter` in general is to block UI events under some circumstances, e.g. when a script is running. We'd want mouse pressed & released events to be blocked (and not ignored... since ignoring them would let them through. I realise that's not entirely intuitive naming...). To make minimal changes I think you'd just need to check for the event you want and leave the rest as it was, e.g.; ```java; ...; } else if (e.getEventType() == MouseEvent.MOUSE_CLICKED && e.getButton() == MouseButton.MIDDLE) {; ...; }; ```. (Not certain I've understood, since that comment is only from reading - not running)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1313439231:454,intuit,intuitive,454,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1313439231,1,['intuit'],['intuitive']
Usability,"It's definitely not too basic a question... I haven't personally needed anything quite like this, and unfortunately can't think of any really elegant way to do it currently. However, I think it should be possible in an inelegant way. This is how I would suggest:. * First unlock you annotation (it’s locked by default during simple tissue detection). Either select it, right click and choose *Annotations &rarr; Unlock*, or else run the following script to unlock all annotations in the image. ```groovy; getAnnotationObjects().each {it.setLocked(false)}; ```. * Create separation lines using the brush tool with the 'Alt' key pressed (to put it into eraser mode). This won't entirely solve the problem, because the resulting split region will still be treated as one 'object' - giving one set of measurements, and taking one classification… but it’s a start. * Split the multi-part (area) annotation into separate polygons. The following script should do this (be sure to save your data before trying it, in case it doesn’t give the result that you want). ```groovy; import static qupath.lib.roi.PathROIToolsAwt.splitAreaToPolygons; import qupath.lib.roi.AreaROI; import qupath.lib.objects.PathAnnotationObject. // Get all the annotations; def annotations = getAnnotationObjects(). // Prepare to add/remove annotations in batch; def toAdd = []; def toRemove = []. // Loop through the annotations, preparing to make changes; for (annotation in annotations) {; def roi = annotation.getROI(); // If we have an area, prepare to remove it - ; // and add the separated polygons; if (roi instanceof AreaROI) {; toRemove << annotation; for (p in splitAreaToPolygons(roi)[1]) {; toAdd << new PathAnnotationObject(p, annotation.getPathClass()); }; }; }. // Perform the changes; removeObjects(toRemove, true); addObjects(toAdd); ```. * Set a classification for each new polygon, to help identify it later. * If you do not need/want to do a cell analysis, try *Analyze &rarr; Region identification &rarr; Positiv",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/99#issuecomment-328360122:325,simpl,simple,325,https://qupath.github.io,https://github.com/qupath/qupath/issues/99#issuecomment-328360122,1,['simpl'],['simple']
Usability,"It's hard to tell much here without a clearer idea of what 'a lot of rather large and complex annotations' means, but it may very well be that there are too many vertices that that slows down the rendering too much (on the JavaFX application thread, same as the menus and rest of the GUI). If so it isn't really a bug, but more pushing QuPath with a different application than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences in object types, and why it's not really intended to have very large numbers of annotations. You might try having fewer vertices somehow, perhaps with _Objects &rarr; Simplify annotation shape_ or splitting larger annotations into smaller ones (since annotations outside the field of view do not need to be rendered). Or write a script that periodically converts annotations you won't need to change any more into detections. Or try to leave parts of the image that are particularly complex _unannotated_, and then interpret the unannotated region appropriately later. (I was actually looking into this today for completely different reasons, and may be able to improve the annotation handling somewhat... but it doesn't help you now)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461569891:38,clear,clearer,38,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461569891,2,"['Simpl', 'clear']","['Simplify', 'clearer']"
Usability,"It's intentional to have a 'user directory' rather than an 'extensions directory', as described here: https://qupath.github.io/QuPath-v0.2.0 (no direct links to headings yet...). The idea is much the same though. Since Bio-Formats became built-in, I haven't had reason to use it much though and need to check some more how it behaves... Does setting it to _any_ other location fail, or does it fail _only_ if the location is on a network drive? I've learned of some network drive weirdness, e.g. QuPath can't be started from a network location on Windows, but don't know if it's related to this or not. > Note that it's not a good idea to use an existing directory extension because older extensions can be horribly incompatible because of the many code changes. I could look at failing more elegantly in this case, but I only know of a couple of other people who had installed extensions other than Bio-Formats or Weka...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476237704:450,learn,learned,450,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476237704,1,['learn'],['learned']
Usability,"It's not clear that there is any bug here. Equally-spaced vertical lines can be common artefact of the scanning process. They may be sufficiently subtle not to be evident when looking at the image directly, but result in misclassifications - which then carry through when converting tiles to annotations. The solution is to spend more time training the classifier/provide additional features to the classifier. By playing around with the brightness/contrast to extreme levels you may see that the lines in your example correspond to lines in the original scanned slide. I will close this issue for now. If this explanation is wrong and you observe a problem with 'Tile classifications to annotations' that is not due to the tile classifications, please provide more detail - and ideally a way to replicate the problem.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/88#issuecomment-318422764:9,clear,clear,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/88#issuecomment-318422764,1,['clear'],['clear']
Usability,"It's not clear to me if this is a QuPath question or an eclipse question, or if you are already familiar with eclipse. There are various other posts if you search for ""eclipse"" either here or on the [QuPath Google Group](https://groups.google.com/forum/#!forum/qupath-users) and I don't know what you've read or tried. In any case, I'm working on my own fork currently and making major changes (including a switch to Java 11, and from Maven to Gradle). The code here was always a bit awkward to set up, but once I have merged in the changes the process will be different... I'm afraid I can't write up any more extensive documentation on setting up this version, because it will soon be out of date and all my spare time to work on this really needs to be devoted to the update. Someone else may be able to help more.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/257#issuecomment-456983998:9,clear,clear,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/257#issuecomment-456983998,1,['clear'],['clear']
Usability,"It's not so much that QuPath is my baby - it is more the other aspect you allude to, i.e. that there are certain tasks that (realistically) only I can do at this time because they are entwined with QuPath itself, whereas others could work on things like ImageJ integration if they wanted. I'm not personally very interested in maximizing QuPath use or replicating what other software already does well, I'd prefer people use the right software for the job - and for QuPath to fill an unmet need. I personally still use and recommend Fiji a lot, and when I teach general bioimage analysis courses I use Fiji, not QuPath. I've considered a few times creating a QuPath-related update site for Fiji, but haven't found a compelling reason to do so. I've also learned that everything costs not only the time to create it, but also to support it; additionally, something like this can place constraints on how QuPath can be further developed if backwards compatibility needs to be maintained. This effort might distract from other efforts that are more likely to lead to a more compelling argument in favor of funding continued work, so I haven't done it. The main way that anyone can help is to make sure to [cite the _Scientific Reports_ paper](https://github.com/qupath/qupath/wiki/Citing-QuPath) whenever QuPath is used in any publication. I'm also very interested in any particularly exciting academic collaborations that may lead both to new functionality of general applicability being created, and also to joint publications that might help maximize the potential to obtain funding for continued development. But again I need to be selective; there are lots of things I am already working on and many more I would like to do, and in recent times my decisions are guided a lot by what I believe is best for ensuring the sustainability and (more importantly) usefulness of the project in the longer term.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-402686585:754,learn,learned,754,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-402686585,2,"['guid', 'learn']","['guided', 'learned']"
Usability,"It's not totally clear to me whether this is something best approached using QuPath or Fiji. Factors to consider would be:. * Is there a DAPI channel? If so, QuPath's cell detection could give a head start.; * Is 'detecting peaks in each color channel' a suitable way to determine whether a cell is positive? This would depend on whether the staining is localized in each cell (e.g. in the nucleus, or dispersed elsewhere).; * Are you using (part of) a whole slide image?. Apart from that, [this ImageJ forum post](http://forum.imagej.net/t/counting-double-labeled-cells-in-fiji/3832/2?u=petebankhead) might help to get started.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/98#issuecomment-327718940:17,clear,clear,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/98#issuecomment-327718940,1,['clear'],['clear']
Usability,"It's strange that the pixel sizes are now missing... do I understand correctly that they are visible in the Nikon software? Is there any possibility they were saved with a different version of the software, or someone else might have changed some obscure setting?. Your description and the screenshots are very helpful to rule out some of my other guesses; because the images are both described as 14-bit and read using Bio-Formats, I don't see any clear reason why there would be a problem - although I see there is a small difference in the width & height, which makes me wonder if there was at least some small change at the time of acquisition... but I don't know what. I'd suggest trying to open the images in [Fiji](http://fiji.sc) and checking under *Image &rarr; Properties...* to see if the pixel size information is there. If it is, the first thing I'd do is make sure you have the latest [QuPath Bio-Formats extension & bioformats_package.jar](https://github.com/qupath/qupath-bioformats-extension), and try again. Alternatively, you can manually enter the pixel width & height values in Fiji (if you know them - is it safe to assume they are the same as in your other images?). Then you can save the image with pixel sizes as a TIFF in Fiji, and read the TIFF rather than ND2 file into QuPath. However, I should warn you: if you use the save-as-TIFF-in-Fiji trick, then ImageJ will be used to read the image and there is an unfortunate bug in QuPath v0.1.2 that means for this application you should probably also change the preferences to only use 1 parallel thread (described [here](https://github.com/qupath/qupath/issues/74)). Alternatively, you could try the latest-not-quite-released QuPath changes described [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html), which should include a fix for the bug. (In case that sounds alarming: the bug shouldn't cause any trouble if you see *Server type: Bio-Formats* or *Server type: OpenSlide*, only *Server type: Ima",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379493712:449,clear,clear,449,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379493712,1,['clear'],['clear']
Usability,"Just adding for reference that this self-contained script shows the problem as well:. ```groovy; def chartData =; [(getPathClass('Negative')): 5,; (getPathClass('1+')): 2,; (getPathClass('2+')): 3,; (getPathClass('3+')): 4]; ; Charts.pieChart(); .title('Test Chart'); .data(chartData); .show(); ```; [Also learned that non-string keys in Groovy need to be in (brackets)...]",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1062#issuecomment-1261141581:306,learn,learned,306,https://qupath.github.io,https://github.com/qupath/qupath/issues/1062#issuecomment-1261141581,1,['learn'],['learned']
Usability,"Just linked this in the forums as well, but if you can define how you want to draw the annotation within a text file (groovy script) you might be able to use:; https://groups.google.com/forum/#!searchin/qupath-users/command$20line$20|sort:date/qupath-users/lE5AJDcxA28/JR0UouPLAAAJ; to get started. The following positions the viewer (although you need to create the viewer first, see the whole file in the link below):; ```; viewer.setDownsampleFactor(downsample); viewer.setCenterPixelLocation(xCoordinate, yCoordinate);; ```; from: https://gist.github.com/Svidro/86fb224d69484ae5955631ce68d27054#file-slide-explore-groovy; which was modified from who knows where... I think Pete's memory monitor. Exporting simple annotations as coordinate arrays is fairly straightforward (and definitely on the forums somewhere), but I am not as sure about XML formatting...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/173#issuecomment-389972084:710,simpl,simple,710,https://qupath.github.io,https://github.com/qupath/qupath/issues/173#issuecomment-389972084,1,['simpl'],['simple']
Usability,"Many things are possible with scripting! The original classifier script is around somewhere, but here is a simplified version I have on my gist. I edited it a bit so that you can see how it would be used in your case. https://gist.github.com/Svidro/5b016e192a33c883c0bd20de18eb7764#file-classifier-sample-groovy; Note that in this case it was looking for Channel 2 spots, but you can adapt this to any channel or stain, or multiple channels of spots at the same time (Dual positive 1-3, etc)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-364010607:107,simpl,simplified,107,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-364010607,1,['simpl'],['simplified']
Usability,"Maybe it's a legitimate memory leak in Rosetta? Did you check that? It appears a lot of people are having problems with it, like this: https://feedback-readonly.photoshop.com/conversations/lightroom-classic/lightroom-classic-desktop-disk-readwrite-to-ssd-m1-macs-with-rosetta/5fd7cefe7288d52d004c5a1c. Anyway, I'm waiting after a couple of things myself before the next release of JavaCPP, so if you figure out anything in the next week or so and find something, please do let me know! Thanks",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/856#issuecomment-1024399344:143,feedback,feedback-readonly,143,https://qupath.github.io,https://github.com/qupath/qupath/issues/856#issuecomment-1024399344,1,['feedback'],['feedback-readonly']
Usability,"My suggestion would be the same as @MichaelSNelson's, to check the image server. I'll close this issue because without a response there isn't really anything we can do on the QuPath side. Also, since it's not clear that there is any bug, the forum would be a better place to discuss further: https://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/864#issuecomment-999608202:209,clear,clear,209,https://qupath.github.io,https://github.com/qupath/qupath/issues/864#issuecomment-999608202,1,['clear'],['clear']
Usability,"No problem, glad it's fixed! I'll close the issue. Yes, sometimes it's not entirely clear even to me whether some commands require selecting annotations or detections. I don't recall exactly what I was thinking when I wrote it, but the idea may have been that it operates on the detections *within* specific annotations... i.e. not indiscriminately merging detections regardless of the annotations they are inside. This makes some sense if you have multiple pieces of tissue as different annotations and don't want a single disconnected region to be generated that spans across them. The best way to find out what should be selected is to run the command without anything selected at all. The popup dialog should then only give you valid options (here, *Annotations* or *Entire image*).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/704#issuecomment-816710295:84,clear,clear,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/704#issuecomment-816710295,1,['clear'],['clear']
Usability,"No worries, thanks for the reply. I revived the thread because so far only you and @evan-bailey have reported this issue and that was before various further changes were made for the v0.2.0 release. In general, I try to employ a utilitarian approach to QuPath development, and prioritise things that will benefit as many people as possible. In this case I don't have a very clear idea of what remains to be solved - and whether or not it remains important to anyone. The overwhelming majority of QuPath users use Windows or Mac, and most Linux users also shouldn't be affected by this... so if it's not terribly important to either you or Evan, it's probably not worth spending time on.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/336#issuecomment-642210602:374,clear,clear,374,https://qupath.github.io,https://github.com/qupath/qupath/issues/336#issuecomment-642210602,1,['clear'],['clear']
Usability,"Not a feature, just a lack of time... this commit aims to restore an improved check for relative paths https://github.com/petebankhead/qupath/commit/309d6e58560791d17af0580fbad2b6a5d24100b2. This should be better than the old behavior, since it _always_ checks relative paths regardless of where the original images were relative to the project (previously the images needed to be inside the project directory). But much more work remains to be done on updating projects, and it's not yet entirely clear how they'll look on the other side.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/325#issuecomment-498024391:498,clear,clear,498,https://qupath.github.io,https://github.com/qupath/qupath/issues/325#issuecomment-498024391,1,['clear'],['clear']
Usability,"Not sure, it looks like you could mean two different things. I don't think you can really turn the superpixels into pathCellObjects since there is no nucleus/cytoplasm, though you could possibly use the XY centroids of each superpixel, create a small circle there, and then convert it plus it's parent superpixel into a cell. Alternatively, if you want to run cell detection, you should be able to selectAnnotations(); and then run your cell detection command. Sum the results in the annotation tab, or use a script to select only the annotations of a particular class and then use mergeSelectedAnnotations();; See here: https://gist.github.com/Svidro/8f9c06e2c8bcae214cdd7aa9afe57c50#file-a-selection-guide-groovy; That could at least get you one annotation per class, and make it easier to read out the results. Another option might be to generate all of the cells and then classify them by their parent annotation's class. Might need an image or something to be more help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/261#issuecomment-458183899:702,guid,guide-groovy,702,https://qupath.github.io,https://github.com/qupath/qupath/issues/261#issuecomment-458183899,1,['guid'],['guide-groovy']
Usability,"Of course, I would be happy to discuss the ITK-SNAP experience, and I hope some of the code can be directly usable. Regarding your suggestion, how do I actually convert an annotation area to a cell?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-392065810:108,usab,usable,108,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-392065810,1,['usab'],['usable']
Usability,"Oh dear, sorry, I see now I didn't reply to this (although I was away from QuPath at the time and I think we discussed it elsewhere...). I recall at the time I wondered about how this would impact supporting RGB/non-RGB images with the same command and also maintaining scripting compatibility. In the meantime, the code has diverged rather a lot and other issues with _Simple Tissue Detection_ have emerged, e.g.; * https://github.com/qupath/qupath/issues/124; * https://github.com/qupath/qupath/issues/248. I'm reluctant to try to resolve the code conflicts to incorporate this small change that may complicate scripting compatibility whenever it looks like the whole simple detection command really needs a thorough overhaul. There are now also other ways to gain more control over tissue detection, e.g.; * https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html; * the pixel classifier (not yet complete, but I hope it will become a 'standard' way). The pixel classifier is also being designed to support different kinds of classification, which could eventually also include a simple threshold applied to an original or transformed image. It has the benefit of allowing the classification to be applied at a higher resolution through tiling, and to interactively show preliminary results (e.g. with a threshold slider). I think that this is needed in the longer term, and _Simple tissue detection_ will move into retirement. Sorry again for not replying here sooner. If this change is still of interest to you, please feel free to reopen the issue. To integrate it, we'd need to; * update the code to be compatible with the current codebase; * test the impact on scripts created before/after the change",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/93#issuecomment-518571384:670,simpl,simple,670,https://qupath.github.io,https://github.com/qupath/qupath/pull/93#issuecomment-518571384,2,['simpl'],['simple']
Usability,"Oh, definitely not too complicated, as we don't really know what the rest of the slides look like. Your method is far more robust, and if there are other dark blotches or other unwanted clumps of cell pellets/detritus on the images, a classifier would be able to pick that up, while simple tissue detection will simply look for ""anything"" that is ""dark."" . It does go to show how QuPath has multiple ways to accomplish the same task though, depending on your needs!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349101867:283,simpl,simple,283,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349101867,2,['simpl'],"['simple', 'simply']"
Usability,"Oh. I think I see... though I am not certain of how easy that will be. One thing to look into is smoothed measurements. _Analyze->Calculate features->Add smoothed features_. As long as your hotspots are roughly the same size, you should be able to get a smoothed measurement that peaks in small subsets of cells at the ""center"" of your hotspot. Unfortunately, I am not sure how to proceed from there without some kind of data. I am thinking you could perform a cluster analysis in R based on the XY coordinates.. or maybe a classifier. I am pretty sure there is no built in way for QuPath to handle this, but it sounds like the sort of thing that could definitely be done with scripting. Without scripting, you could do the _Add smoothed features_, and then _Measure->Show measurement maps_ and select one of your smoothed features (you may be able to do this without the smoothing, depending on your data/images). You should be able to visually find the hotspots, and could then use the ""Points tool"" to mark the center of each hot spot manually. Adding a different classification of spot for each type of marker would get you a set of points of various classifications, which you could then use to compare distances. If your images are fluorescent, and you can split the channels, you might be able to run simple tissue detection on each individual channel to get centroid coordinates for hotspots (sufficient gaussian blur). Also, if you were to simplify the question to ""how many immune cells are within X um of my hotspot"" you could generate the annotation, import it, then _Objects->Expand Annotations_ and count how many immune cells are within that expanded annotation (which could all be automated). It would no doubt be a bit trickier than that if you are dealing with overlapping hotspots. There may be other ways as well, but that's be best first stab going in blind.; If you are able to open a thread on the forum or share an image I might be able to be more specific.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/181#issuecomment-400134063:1308,simpl,simple,1308,https://qupath.github.io,https://github.com/qupath/qupath/issues/181#issuecomment-400134063,2,['simpl'],"['simple', 'simplify']"
Usability,"Ok, if the deletion part is commented out entirely, and the names are not overlapping, my only thoughts are whether the removal of the selectDetections code changes anything, as that slowdown has caused problems in another script that dealt with merging annotations (https://github.com/qupath/qupath/issues/129). The other would be to simply include the folder name and let the function generate the filename, to see if that part is working. `saveDetectionMeasurements(""H://"", )`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357022294:335,simpl,simply,335,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357022294,1,['simpl'],['simply']
Usability,"Ok, so I've learned that OpenCV has a maximum number of channels, defined as `CV_CN_MAX`. That's set as 512, so any attempt to exceed that will fail. Without a major rewrite of the pixel classifier, the most QuPath can do is provide a more informative error message.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418:12,learn,learned,12,https://qupath.github.io,https://github.com/qupath/qupath/issues/947#issuecomment-1092122418,1,['learn'],['learned']
Usability,"Okay, I think I describe what I want to do. And I would like to do that as automatically as possible, so in qupath in a .groovy script, I guess:. 1) I have a folder with IHC-fluorescence images (DAPI + antibody staining) of tumors with stroma. In Qupath:; For every image of the folder:; 2) In QuPath - perform cell detection; 3) In Qupath - object classification with a pretrained classifier (tumor vs. stroma); 4) Export detections with annotation into .roi file. In Fiji:; For every image of the folder:; 5) open .roi file; 6) --> discriminate tumor and stroma; 7) perform DNA-damage focus analysis in tumor and stroma separately (algorithm potentially uses other Plugins); 8) Finished. So, I want to use quPath for what it does very, very good and fast, cell identification, segmentation and classification, and not for anything else. Scripting in FIJI is more or less easy for me, so once I have the .roi files, I can do almost anything with them there. Just, for the ""QuPath part"", I dont even know how to script those simple steps, because there is not much documentation, no Qupath API, so its hard for me to even get started. I am not a professional programmer, but a biologist with some (Python, Java, ImageJ) programming background,. So, do you think, something like this is possible?. Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. Best regards and thank you; Philipp",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401542503:1025,simpl,simple,1025,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401542503,1,['simpl'],['simple']
Usability,"One option would be to have multiple test classes with different `@BeforeEach` or `@BeforeAll` sections?. Related question: is the style guide for one assert, or just to test one function?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1563#issuecomment-2265062068:137,guid,guide,137,https://qupath.github.io,https://github.com/qupath/qupath/pull/1563#issuecomment-2265062068,1,['guid'],['guide']
Usability,"One other thing... I find that the easiest way to avoid detecting outside the annotation is to modify the ImageJ macro, rather than do post-processing in QuPath. You can take advantage of the fact that, for any non-rectangular region, QuPath sends the ROI to ImageJ as well. And so ImageJ's *Edit &rarr; Clear Outside* can help. (In practice, it can be a bit more tricky than that... you might need to complicate your macro with checks to see whether there is a ROI present in the first place, and you might need to use *Edit &rarr; Selection &rarr; Select None* and *Edit &rarr; Selection &rarr; Restore Selection* within your macro if you find that you need to do some processing prior to using *Clear Outside*.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288508331:304,Clear,Clear,304,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288508331,2,['Clear'],['Clear']
Usability,"One problem I have occasionally seen with CZI is that a request for the *entire* image is made whenever only a small part is needed. This inevitably causes memory problems, but I have not yet been able to investigate when and why this might happen only for specific images. In the meantime I'd rather avoid suggesting that a huge amount of memory is required to use QuPath; it shouldn't be. Certainly with less memory available there may be problems if running something especially intensive (e.g. cell detection, even subcellular detection) across very large regions, but in that case the easiest solution is simply to restrict the analysis to smaller regions. But yes, if you can spare a few more GB it would be very good to increase what is available to QuPath. For what it's worth, my laptop has 16 GB RAM and I give about 8 GB to QuPath, although I've also used 4 GB for analysis (or less for just browsing and annotation). There are also some more memory-related tips at https://github.com/qupath/qupath/wiki/Troubleshooting#setting-memory-limits. It would be good to confirm whether the trouble only occurs when working with cell detection on large regions (at least hundreds of thousands of cells). My suspicion is that this isn't the case, and it is more likely to be related to the current patchy support for CZI - which is something I hope can be improved within the next few months. But I could be wrong on this if the behavior is fine whenever only small regions are considered.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343393030:610,simpl,simply,610,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343393030,1,['simpl'],['simply']
Usability,"Oof, only a couple years since I started all this, but I'm not sure I would trust myself to do that at this point.; I feel like it is one of those situations where it would either best be hidden as a preference or ""Advanced"" option, or, with a single line of text at the top of the dialog stating something along the lines of ""Only change the values for the stains you are interested in, leave the rest at -1."". For simplicity's sake I would opt for the single line of text, but I think that would help a lot of users looking at that dialog for the first time, without being too much of a pain to code or bothersome to more experienced users.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/304#issuecomment-518301395:416,simpl,simplicity,416,https://qupath.github.io,https://github.com/qupath/qupath/issues/304#issuecomment-518301395,1,['simpl'],['simplicity']
Usability,"Oooh, that script would have been useful a few times! I have wanted the ability to split ROIs, though I don't recall why at the moment. If the tissue regions are visually distinct, this forum thread might also give you a way to automatically create the regions from your simple tissue detection, though it will never be perfect! Also, the more features you use, the larger sample size you will need, and I don't know how well that will work with your data set. Image quality/lighting also needs to be similar throughout :). https://groups.google.com/forum/#!topic/qupath-users/gm0YYJxSriA. edit: woah, I triggered some kind of title effect with the formatting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/99#issuecomment-328362033:271,simpl,simple,271,https://qupath.github.io,https://github.com/qupath/qupath/issues/99#issuecomment-328362033,1,['simpl'],['simple']
Usability,"Oops, I somehow missed the followup question. I don't use any particular packages just to calculate areas, it's pretty much just a use of the base sum function. I'm certain there are more elegant ways to do this using functions, but I only have basic programming experience so for loops it is!; ```; path = ""Your file path here""; setwd(path); outFile <-""test areas.csv"". #Replace .txt with whatever identifier will pick up all of the files you want to analyze. Detections or Annotations are common choices; file.names <- dir(path,pattern = "".txt""). #an empty frame to place data into; Areas <- data.frame(). #simple for loop to read each file and keep a sum of the cell areas.; for(i in 1:length(file.names)){; data.raw <- read_delim(file.names[i],""\t"", escape_double = FALSE, trim_ws = TRUE). #place the file names in the first column; Sample = tools::file_path_sans_ext(file.names[i]); Areas[i,1]<-Sample. #Sum of cell areas here. Add extra lines for mean of intensity/OD, etc; Areas[i,2]<-sum(data.raw$""Cell: Area""). }; Areas$""Area mm^2""<- Areas$V2/1000000. #set row names to F if you don't want a numbered list as the first column; write.csv(Areas, outFile, row.names=T); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/59#issuecomment-290314163:609,simpl,simple,609,https://qupath.github.io,https://github.com/qupath/qupath/issues/59#issuecomment-290314163,1,['simpl'],['simple']
Usability,"Pete [mailto:notifications@github.com]; Sent: Monday, 8 January 2018 6:19 AM; To: qupath/qupath <qupath@noreply.github.com>; Cc: Christopher Rowe <Christopher.W.Rowe@uon.edu.au>; Author <author@noreply.github.com>; Subject: Re: [qupath/qupath] PositiveCellDetection and Classifier fails (#130). It sounds like a memory issue to me too, although I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qu",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:1427,clear,clear,1427,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['clear'],['clear']
Usability,"Pete has a script that doesn't follow the borders you drew quite so tightly, but will classify area by the nearest cell, seen here: https://gist.github.com/petebankhead/e23393125fa57fe91c67f5003cbea3e2. You may be looking for something more like superpixel segmentation and classification, however, if you want to create regions that follow the general tissue outline more closely. I have used this several times to create annotations that separate two different types of tissue, either based on texture or coloration. It can be a bit tricky, however, and requires a bit of troubleshooting and decisions on what measurements to apply to the SLICs. Based on your image, the difference is fairly clear-cut and you might be able to get away with something as simple as OD Sum.; The specific tool is _Analyze->Region Identification->Tiles and superpixels_ and then either DoG or SLIC Superpixel segmentation. I tend to prefer SLICs for tissue segementation. Note that this WILL remove all detections (your cells, in this case) and should generally be done before any cell creation in a script. Essentially it makes a jigsaw puzzle of the selected annotation based on the flow of the colors in the tissue. ; ![image](https://user-images.githubusercontent.com/23145209/47020475-4b6d4600-d10e-11e8-8ec7-fccdd85860c6.png). You can then apply color measurements to each of those tiles and then classify them. ; ![image](https://user-images.githubusercontent.com/23145209/47020737-e1a16c00-d10e-11e8-868c-9d1255766fce.png). Finally you could merge all classified SLICs (which are detections) back into annotations using the _Tile classifications to annotations_ in the same menu, and perform cell detection within the new annotations. These annotations will have your area measurements as normal. If you want to apply a sum of all Tumor etc areas to the parent annotation, that will require another script. I am pretty sure this is discussed in more detail on the forums somewhere including scripts. *Runs and h",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/229#issuecomment-430244183:694,clear,clear-cut,694,https://qupath.github.io,https://github.com/qupath/qupath/issues/229#issuecomment-430244183,2,"['clear', 'simpl']","['clear-cut', 'simple']"
Usability,"Pete,; Sorry, I am still learning how to post my queries in the forum, This was my; message. Can you advise please? Thank you very much, suba; Hello, I am able to load the images from the Qupath project, however, when; I double-click on the whole slide, I am getting an error message : **Unable; to build Image server: (view log below) for all the images but one that was; added recently to the project. Can anyone please suggest how to restore my; data please? Thank you, Suba; INFO: Initializing type adapters; INFO: Bio-Formats version 6.5.1; INFO: Loaded extension Bio-Formats options (Bio-Formats 6.5.1) (17 ms); INFO: Loaded extension Experimental extension (1 ms); INFO: Loaded extension ImageJ extension (44 ms); INFO: Loaded extension JPen extension (19 ms); INFO: Loaded extension Processing extension (28 ms); INFO: Loaded extension Rich script editor extension (235 ms); INFO: Loaded extension SVG export extension (1 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Trying to load project Z:\Kotb Lab\General\ALL INFECT and INFECT; images\INF 69 DR3 DR4 repeat for Ganesh manuscript Qupath data\dr3 gfap new; 042121\project.qpproj; INFO: Project set to Project: dr3 gfap new 042121-project; INFO: Image data set to ImageData: Brightfield (H-DAB), PR301S1 2021-04-23; 07.49.55.ndpi; WARN: Unable to open file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; with OpenSlide: URI has an authority component; ERROR: Load ImageData: Unable to build ImageServer for file://; undmed-files.med.und.edu/Basic%20Sciences/Kotb%20Lab/General/ALL%20INFECT%20and%20INFECT%20images/INF%2069%20DR3%20DR4%20repeat%20for%20Ganesh%20manuscript%20Qupath%20data/dr3%20gfap%20new%20042121/PR287S8%20-%202021-04-12%2009.52.58.ndpi; (args=[]) with requested provider; qupath.lib.im",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-827610434:25,learn,learning,25,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-827610434,1,['learn'],['learning']
Usability,"Potentially, with a bit of effort. It's easier if you can avoid needing to handle mouse clicks etc., and don't mind simply placing the circle at the center of the current field of view. You can always then move it afterwards if you need to refine the position manually, using the existing *Move* tool. A similar processing for creating a rectangle is described on [this blog post](https://petebankhead.github.io/qupath/scripting/2018/03/09/script-create-fixed-size-region.html). `RectangleROI` appears twice in that script. If you just replace it with `EllipseROI` in both places it should do the job (and of course change the `PathClass` bit if you want). The `sizeMicrons` value specified in the script should correspond to the diameter.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/158#issuecomment-376154987:116,simpl,simply,116,https://qupath.github.io,https://github.com/qupath/qupath/issues/158#issuecomment-376154987,1,['simpl'],['simply']
Usability,"Probably best make a new PR, there shouldn't be changes to `.gitignore` included either :). Meanwhile, it seems this doesn't fix the bug I thought it was going to fix, i.e. extra tiles are generated along x but not along y:. <img width=""1300"" alt=""Screenshot 2022-08-18 at 16 15 08"" src=""https://user-images.githubusercontent.com/4690904/185431356-8140d40f-b121-485d-ad00-77d0934ba235.png"">. The objects shown in the screenshot can be reproduced using. ```groovy; clearAllObjects(); createSelectAllObject(true); runPlugin('qupath.lib.algorithms.TilerPlugin', '{""tileSizeMicrons"":200.0,""trimToROI"":false,""makeAnnotations"":true,""removeParentAnnotation"":false}'); ```. Creating objects outside the image is probably not a good idea anyway, so it's not clear to me whether the x or y behavior is less bad. The inconsistency doesn't seem good... but I wouldn't want to add a 'fix' unless it's totally clear that it's an improvement, since any change will impact the reproducibility of scripts across QuPath versions. Anyhow, I'm not seeing a change of behavior when using the code from the PR. Could you please fill in the info from the bug report template? It's still not clear to me what the bug is or whether the fix fixes it.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219630526:464,clear,clearAllObjects,464,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219630526,4,['clear'],"['clear', 'clearAllObjects']"
Usability,"QuPath already stores the data for each image in separate files called `data.qpdata`, so splitting up the project probably won't help. You can find these `data.qpdata` files by hunting through the subfolders of your project. If they are usable, it should be possible to open a `data.qpdata` file by dragging it onto QuPath directly (ideally without a project open, since otherwise QuPath will attempt to import the image to the project). Working off a local disk should be best, especially for project data. The images *can* be elsewhere, but using cloud storage can be really troublesome - unless you've made sure that they are also kept on your device, and there is no possibility of them being automatically offloaded. The file format of your images may also be relevant: .mrxs and .vsi have lots of little files for a single image, which complicates things even more with cloud storage since some might be present and some not. The forum is probably a better place to discuss that, since lots more users are active there, and using QuPath in different scenarios to me: https://forum.image.sc/tag/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1313#issuecomment-1706900693:237,usab,usable,237,https://qupath.github.io,https://github.com/qupath/qupath/issues/1313#issuecomment-1706900693,1,['usab'],['usable']
Usability,"QuPath gives the tools to do all kinds of things, but some are easier than others. Distinct commands (e.g. cell detection) can be combined with others (e.g. classifying cells as positive or negative, interactive machine learning) for particular applications (e.g. scoring Ki-67). But these or other commands could be combined in different ways for different applications. QuPath doesn't have a 'Ki-67 scoring' algorithm in particular, but it has the pieces that can be used to create and customize one. _However_... there are a lot of things that I _wouldn't_ try with QuPath's built in commands only, and mitosis detection in H&E is one of them. I'd say the detection task is too difficult and specialized for QuPath's generic cell detection currently. Solving that is a substantial research project in itself (and the subject of some [grand challenges](https://mitos-atypia-14.grand-challenge.org)). That's one of the reasons why QuPath supports scripts and extensions: it's possible to create highly specialist algorithms elsewhere, and either integrate them into QuPath or at least visualize the results through QuPath. Therefore some of the ways in which QuPath can help are:; * for manual counting; * for exporting manual counts as 'ground truth' into a format that can be used to help create a new algorithm, using whatever image processing / machine learning / deep learning libraries and tools you like; * for visualizing the results of an algorithm directly in the context of a whole slide image (using QuPath's objects, classifications & visualization tools to help); * as the platform for running and sharing any algorithm you might create (if it's implemented as a QuPath script or extension). The first of these is pretty laborious, while the last three will take some effort and knowledge on the image analysis side. That's the side I come from... I created QuPath because I needed the tools myself to write new algorithms, and then to share them with pathologists and other researchers",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414438828:220,learn,learning,220,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414438828,1,['learn'],['learning']
Usability,"QuPath's undo support is pretty bad - I spoke about it recently in this video: https://youtu.be/zFTnfv_XWg4?t=41. Fixing it _properly_ will likely involve making some scarily-large changes to the core behavior, but we'll explore whether it can be made less bad in this specific scenario.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1487#issuecomment-2011332965:9,undo,undo,9,https://qupath.github.io,https://github.com/qupath/qupath/issues/1487#issuecomment-2011332965,1,['undo'],['undo']
Usability,"Regarding the 'pink' issue, it looks related to https://github.com/openmicroscopy/bioformats/issues/2811. I don't see any way to resolve it within QuPath, and it requires a fix on the Bio-Formats side. If you just need to check what the label shows, you could try the script I posted at https://github.com/qupath/qupath/issues/141#issuecomment-358951720 - but it really is a terrible hack, which at best shows an image that looks a bit more plausible. As @rleigh-codelibre points out at https://github.com/openmicroscopy/bioformats/issues/2811#issuecomment-359474813 it doesn't restore the _right_ pixels, merely ones that are less obviously wrong. At best, it might be enough to see more or less what the image should contain without needing to open a new application... but it isn't a proper solution. When I look at the images you posted above with `tiffinfo`, it's clear that the _Photometric Interpretation_ stored in the file really is _YCbCr_ and my hack-y script overrides this. ---. For setting the color, you could try this:; ```groovy; // Set the LUT color for the first channel & repaint; def viewer = getCurrentViewer(); def channels = viewer.getImageDisplay().getAvailableChannels(). channels[0].setLUTColor(50, 200, 250). viewer.repaintEntireImage(); ```; where the three numbers are red, green & blue values (0-255). On a related note, `tiffinfo` also shows the file contains this for the main image:; ```; <channelSettings>; <channel index=""0"" name=""DAPI"" rgb=""#0000ff"" counterstain=""true"" spacingZ=""1000"" />; <channel index=""1"" name=""DsRED"" rgb=""#ffffff"" spacingZ=""1000"" />; <channel index=""2"" name=""Spectrum Green"" rgb=""#00ff00"" spacingZ=""1000"" />; <channel index=""3"" name=""Spectrum Far Red"" rgb=""#ff0000"" spacingZ=""1000"" />; </channelSettings>; ```; I can't see anywhere that Bio-Formats has parsed the channel names and colors, and this isn't currently accessible to QuPath. If the `LeicaSCNReader` were to be updated, and it was possible to get that information included, it coul",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409882684:869,clear,clear,869,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409882684,1,['clear'],['clear']
Usability,"Since you're building from source anyway, commenting out the line 275 - `glyph.setColor(color)` - from `IconFactory.java` should at least stop the exception (the icon color will be wrong, but not the color displayed in the viewer): ; https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/tools/IconFactory.java#L275. The exception is really mysterious though, since it's complaining about a value being bound immediately after it has been explicitly unbound... so I'm really not sure yet what's going on. Setting the color simply sets the `textFillProperty()` so it's very odd.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1202#issuecomment-1375336175:555,simpl,simply,555,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202#issuecomment-1375336175,1,['simpl'],['simply']
Usability,"So edited a few more that appeared clickable when they shouldn't be (as they are not collapsible).; I wasn't able to test `ExportChartPane.java`, `KaplanMeierDisplay.java` as I couldn't find them in the running app but I believe the latter doesn't need adjusting.; Additionally, I wasn't able to launch `TMASummaryViewer.java` in the app (File -> TMA data -> launch TMA data viewer) so added it as a comment. Unsure if this is the case for anyone else? ; Lastly I believe the `simplifyTitledPane` class of `PaneTools.java` seems to not be used at all. Unsure if I'm missing something, if not should it be used or removed?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2096390478:477,simpl,simplifyTitledPane,477,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2096390478,1,['simpl'],['simplifyTitledPane']
Usability,"So the lack of a buffered stream is probably unimportant, since digging down deeper I see that a `PrintWriter` is used... which involves some buffering (as far as I can tell). Which may explain why I didn't really spot any clear improvement when using a `BufferedOutputStream`.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1045#issuecomment-1230386652:223,clear,clear,223,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045#issuecomment-1230386652,1,['clear'],['clear']
Usability,"So, after creating a project with the proper .tif file, how would I add the existing .qpdata to the project in such a way that it overlays with the .tif file? I'm really sorry, as I am sure this is really simple, I'm a cell biologist and not computer savvy at all",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461103648:205,simpl,simple,205,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461103648,1,['simpl'],['simple']
Usability,"Some assorted responses:. * You say 'QuPath did it again', but it’s not clear if QuPath is actually doing what it is supposed to in deleting objects. I already described that you should not do automated counts in the same region after manual counting. Did you read my explanation above? If it does not describe your situation, please be more specific. https://github.com/qupath/qupath/issues/112#issuecomment-342941759. * QuPath is written in Java, and is therefore limited by the amount of memory assigned to it on first startup, or under *Help &rarr; Show setup options*. Additional memory being available on the computer doesn’t change this; QuPath won't use it. * My best guess remains that the memory problems are related to the handling of CZI images - which is something I will investigate, but I have very little free time currently and it may take a while. It is not a format I have used much myself, and I have very little relevant data that I can use to test it properly. * If you want to investigate this yourself, try doing simple processing steps using images in another file format (e.g. Aperio or Hamamatsu - maybe from http://openslide.cs.cmu.edu/download/openslide-testdata/). If the problem persists then my guess is wrong, and it is not reliant on file format. But then if you describe your exact steps I may be able to reproduce the issue. * If you are optimizing positive classification settings, re-running the cell detection would be a horribly slow way to do it. Running this one-line script and adjusting the values should be *much* faster:; ```groovy; setCellIntensityClassifications('Nucleus: DAB OD mean', 0.2); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-344522051:72,clear,clear,72,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-344522051,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Some undo support is now available in v0.2.0-m1 (and beyond), and explained [on my blog](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#new-limited-support-for-undo).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/75#issuecomment-518580699:5,undo,undo,5,https://qupath.github.io,https://github.com/qupath/qupath/issues/75#issuecomment-518580699,2,['undo'],['undo']
Usability,"Sorry this has taken so long, but v0.3.0 has finally been released (within the past few minutes....). It finally has better support for extensions, and so the [QuPath TensorFlow extension](https://github.com/qupath/qupath-extension-tensorflow) can now be in its own repository. We now have a pretty general way to support deep learning via [`DnnModel`](https://github.com/qupath/qupath/blob/4eb74946602d8df605402909c753fca027fa3c26/qupath-core-processing/src/main/java/qupath/opencv/dnn/DnnModel.java). I'm sure the design will need to be improved in the future, but the general idea is to try to require as little as possible to implement a new deep learning extension: basically, implement `DnnModel` and (ideally) also register it with `GsonTools`.; [Here](https://github.com/qupath/qupath-extension-tensorflow/blob/main/src/main/java/qupath/ext/tensorflow/TensorFlowExtension.java#L46) is where that happens for TensorFlow. [StarDist](https://github.com/qupath/qupath-extension-stardist) is now also in its own extension; the builder can take a `DnnModel` as an input as an alternative to a path, so it's relatively easy to add an alternative way or using the model. There's no longer any need to build QuPath from source because [OpenCV can be used instead](https://qupath.readthedocs.io/en/stable/docs/advanced/stardist.html). The main reason for all this is that it will make it much easier to use deep learning models within QuPath in different ways, e.g. for object classification, or for semantic segmentation as a drop-in replacement for a pixel classifier. In fact, as long as DnnModel is JSON-serializable (ideally just requires a URI) then this already works, but the process needs to be cleaned up and documented. In the meantime, there are a few videos showing U-Net as live pixel classifier [here](https://twitter.com/petebankhead/status/1406856875732258821?s=20). @dkurt I completely understand if you've lost interest in this after all this time, but if you ever want to update your",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/665#issuecomment-912009706:327,learn,learning,327,https://qupath.github.io,https://github.com/qupath/qupath/pull/665#issuecomment-912009706,2,['learn'],['learning']
Usability,"Sorry to put the question in the wrong place. Thank you for making QuPath.; It is amazingly useful, and I am just starting to get the hang of some of; the features... I have much to learn. All the best!. Andrew. On Wed, May 22, 2019 at 11:50 PM Pete <notifications@github.com> wrote:. > Please use https://forum.image.sc/tags/qupath for questions about using; > the software and other related discussions - GitHub issues is intended just; > for issues & bugs.; >; > Anything else here will be closed to try to keep things organized and; > easier to find as the project gets bigger.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/319?email_source=notifications&email_token=AJTPPDUGBSIIMOYSZHM5L23PWY5DNA5CNFSM4HO2JLM2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWBHWDQ#issuecomment-495090446>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AJTPPDQJW6I2MKUA5ZIHDFLPWY5DNANCNFSM4HO2JLMQ>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/319#issuecomment-495094339:182,learn,learn,182,https://qupath.github.io,https://github.com/qupath/qupath/issues/319#issuecomment-495094339,1,['learn'],['learn']
Usability,"Sounds like fun! I think in the past I have mostly seen identifying the tumor region by texture and such, then modifying the annotation using an expansion (for tumor border regions) or contraction for infiltration.; https://gist.github.com/petebankhead/7e69e9252416da0a677eb4d3a999e442. The next closest thing I could think of would be using SLICs and color/texture measurements (Haralick, LBP, etc) to define the tile areas by a variety of added measurements. I have done a bit of that to automatically generate annotations for different types of tissue areas, but it isn't going to be as good as, say, a deep learning model. Some of the above was discussed here: https://groups.google.com/forum/#!topic/qupath-users/gm0YYJxSriA. Otherwise it sounds more like smoothing added measurements between classes (cells where 40-60% of the cells nearby are one class, and 40-60% another class would get a subclass), might be the way to go. Pete might have some better ideas, but it really sounds like it might be more of a deep learning project! Accurate understanding of context can be difficult to simulate in tissue using a standard classifier, and it is hard to recommend anything too specific without a concrete example (types of staining, fluorescence vs bf, etc can vary what might work a lot).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452908873:611,learn,learning,611,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452908873,2,['learn'],['learning']
Usability,"Thank you Pete for your clear explanation!; If Qpath is not intended to deal with Millions of cells, could you recommend a software which have abilities to do it?; Thank you!; Charles",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/831#issuecomment-950153737:24,clear,clear,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/831#issuecomment-950153737,1,['clear'],['clear']
Usability,"Thank you Pete. Kathy. From: Pete <notifications@github.com>; Reply-To: qupath/qupath <reply@reply.github.com>; Date: Monday, June 8, 2020 at 12:11 PM; To: qupath/qupath <qupath@noreply.github.com>; Cc: ""Kathleen T. Yee"" <KYee@umc.edu>, Author <author@noreply.github.com>; Subject: [EXTERNAL]Re: [qupath/qupath] Zoom In and Zoom Out (#518). This looks like a simple bug, albeit one that has existed for some months at least - weirdly without being reported before. Should be fixed in the next minor release, but I first need to check it in more detail. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fqupath%2Fqupath%2Fissues%2F518%23issuecomment-640758278&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716768343&sdata=I6ByW3NeHWrDm7VTBAvpv2MpkhL6TLrhVIKQdriYgAA%3D&reserved=0>, or unsubscribe<https://nam01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAP4MNEYF5JGJNVJRBCHLL3DRVULSZANCNFSM4NYSD4CA&data=02%7C01%7Ckyee%40umc.edu%7Cd4b7b44c44274db73a8308d80bcef036%7C78a0681ef0be47e280498616858818a5%7C0%7C1%7C637272330716773334&sdata=3J8BiWMPaBCV6Q7lr8IOEGiTxaRqEaq2AUvxwH2crGY%3D&reserved=0>. Individuals who have received this information in error or are not authorized to receive it must promptly return or dispose of the information and notify the sender. Those individuals are hereby notified that they are strictly prohibited from reviewing, forwarding, printing, copying, distributing or using this information in any way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640759146:359,simpl,simple,359,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640759146,1,['simpl'],['simple']
Usability,Thank you Pete. That's clear.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/209#issuecomment-418069254:23,clear,clear,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/209#issuecomment-418069254,1,['clear'],['clear']
Usability,Thank you a lot for your time. I just learnt I still have lots to learn.; Looking forward to seeing how v2.0 implementation ^^,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048404518:38,learn,learnt,38,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048404518,2,['learn'],"['learn', 'learnt']"
Usability,"Thank you both for answering! @Svidro and @petebankhead ; I started all over again, so I don't have the workflow anymore. Nevertheless, what I meant was that I used indeed the pointing tool. I had two populations, one negative and one positive. After I ran the positive cell detection, the negative population was gone. And unfortunately, there is no undo button. My goal was indeed compare the manual counting and the automated counting. For optimization. I don't know whether the error is the lack of RAM, I checked and i have 3,3GB available. And I only have 4 ROI's in one image. When I run the analysis, I make sure nothing is selected and choose the option 'all annotation'. It might be, but it might be not, because sometimes it also does not analyse only 1 ROI, but other times it does. However, the log it says 'memory error'. the programs that are running on my computer besides Qupaht are google chrome (1tab), one note with an excel file, and file explorer. ![capture](https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG); ![capture2](https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG); ![capture3](https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG). I really don't know why sometimes it works or not, but i'll be more careful in what I'll do.; Unfortunately, there was also no backup file in the folder after the failure of saving.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343227944:351,undo,undo,351,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343227944,1,['undo'],['undo']
Usability,"Thank you for all the efforts made!!!; Great software!; Best; Mark. Am 21.03.2019 um 17:31 schrieb Pete <notifications@github.com<mailto:notifications@github.com>>:. The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/293#issuecomment-475304459>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AuilfNnzXk1GVc4-ge5_v30DpTB5ZAJ6ks5vY7PcgaJpZM4cBwau>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475308947:715,usab,usable,715,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475308947,1,['usab'],['usable']
Usability,"Thank you for the feedback. Unfortunately it cannot be consistently reproduced. True, I am messing with the stain vectors, working with 2-plex brightfield IHC. Knowing it is just a matter of visualization and brightness/contrast and that does not affect analysis sounds safe to close this issue. Best wishes,; Carlos",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/464#issuecomment-622329244:18,feedback,feedback,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/464#issuecomment-622329244,1,['feedback'],['feedback']
Usability,"Thank you, later I will post my question at google group, and describe it more clearly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/185#issuecomment-406674542:79,clear,clearly,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/185#issuecomment-406674542,1,['clear'],['clearly']
Usability,"Thanks @ap--!. From a quick search of the QuPath code, we do use `new File(uri)` in quite a lot of places, so I'd like to understand better what the problem is to see if we need to eliminate it entirely. I had a look at the other discussion, but I'm still fuzzy on the real-world implications and how I could properly test any fix. I saw the combination of URIs that do and don't work and I also saw; ```; print(java.io.File(java.net.URI(""file://localhost/c$/Windows"")).exists()) # fails URI has an authority component (bug as this is completely valid path); ```; but I guess I don't understand when and why that matters, or if the URI could simply be given in some other way?. Unfortunately, I use Windows very rarely, network shares on Windows even less, and don't know much about more exotic URIs...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1049#issuecomment-1240602285:642,simpl,simply,642,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049#issuecomment-1240602285,1,['simpl'],['simply']
Usability,"Thanks @finglis the more I think about this, the more I think we **really** need this. Relatedly, I wonder if we could build on the idea to make auto-estimating the image type smarter?. My first (and entirely untested) idea would be to . * loop through all the known stain vector combinations; * apply the stain vectors to an image; * and calculate the mean absolute value (for example) of the residual; * select the vectors where the error is minimized. This would only be suitable for 2 stains and might not handle artifacts very well, so I imagine it would need some refinement. But perhaps we can incorporate more prior knowledge (e.g. that stains should be negative) while still keeping the method simple and fast to compute. The goal would be to enable a user to have the (probably small) number of stain vectors that are relevant for their images based upon their image sources/scanners, and have QuPath make more intelligent suggestions which to use - rather than relying upon scripting or using *Estimate stain vectors* on every image. But I guess any auto-estimate is likely to be wrong sometimes. So some other related ideas:. * We could incorporate stain selection into the ""Project import"" dialog (alongside where we set the image type) to give another way of ensuring an image batch has consistent stain vectors set.; * We could add a 'Run for project'-like command that specifically exists to transfer the image type and stain vectors from the current image to all images in the project. This can already be scripted easily, but isn't very approachable for people who really don't want to handle scripts. Logging the ideas here for consideration when we come to tackle the original enhancement, and in case any are worth discussing.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437:703,simpl,simple,703,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247#issuecomment-1452171437,1,['simpl'],['simple']
Usability,"Thanks @franfcunha !. I recently opened a (very small, single-channel) .jp2 image in QuPath with the help of Bio-Formats, but I do not have a whole slide image in that format to test. JPEG2000 *does* currently appear on the [Bio-Formats list of supported formats](https://www.openmicroscopy.org/site/support/bio-formats5.4/supported-formats.html) with a tick in the 'pyramid' column... but I am not sure whether that should be interpreted as meaning pyramidal .jp2 whole slide images are supported, or if it is simply a comment on the capabilities of the format. I would suggest asking the OME team about this through their [mailing list](http://lists.openmicroscopy.org.uk/mailman/listinfo/ome-users/) - they are the experts. Apart from that, in QuPath under *View &rarr; Show log* you may get more useful information to help track down the source of any error. Where Bio-Formats is involved, I would also recommend trying to open a cropped/lower resolution part of any problematic image with [Fiji](http://fiji.sc) as well, since the Bio-Formats plugin for Fiji is much more established. This can helps to track down whether the problem is most likely to be with the file itself, the file reader, or the QuPath extension.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/72#issuecomment-299391470:511,simpl,simply,511,https://qupath.github.io,https://github.com/qupath/qupath/issues/72#issuecomment-299391470,1,['simpl'],['simply']
Usability,"Thanks @petebankhead!; My Java's not quite good enough to comment on all of it in detail, but it looks great, thank you! I like the interesting solution to parsing arguments; it's definitely simpler to implement than the space-delimited alternative proposed, and I like the idea of having two ways to invoke it.; I've left one comment and was going to ask if you've seen it, but as you've already replied to it, I guess you have!; Best wishes, Julian",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/654#issuecomment-795641077:191,simpl,simpler,191,https://qupath.github.io,https://github.com/qupath/qupath/issues/654#issuecomment-795641077,1,['simpl'],['simpler']
Usability,"Thanks @zindy I'll try to have a look later. First thought is that I'd rather *not* have the second commit, unless you have a clear need for a public `getPreviouslySelectedTool()` method?. In general, I'd rather shrink the API and make it more stable, and avoid adding public methods just-in-case. But it could be added if it is really needed somewhere.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1219437840:126,clear,clear,126,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1219437840,1,['clear'],['clear']
Usability,"Thanks @zindy! Just a quick update to say I've been discussing how best to support scripting arguments with @melvingelbard, since he has done most of the command line work. I think a combination of the method you use (creating a global `args` variable) and using picocli for parsing would work well. Meanwhile, we have a few other related-ish scripting issues to deal with, including; * supporting the ability to run scripts from other scripts.; * revising the Groovy integration to use an approach other than JSR223: https://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html. The benefit of JSR223 is it potentially enables QuPath to support multiple scripting languages (e.g. Jython), but this comes at the expense of supporting every one of them a bit less than it otherwise could. I'm tempted to commit to Groovy-only and make the support better, rather than attempting to support Jython & more - I'd be very interested to know your thoughts on that. Anyhow, this is the reason why this pull request will take a bit more thought - I think it would be good to add args support at the same time as we make the other changes, hopefully in the next release.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/647#issuecomment-741703766:573,guid,guide-integrating,573,https://qupath.github.io,https://github.com/qupath/qupath/pull/647#issuecomment-741703766,1,['guid'],['guide-integrating']
Usability,"Thanks Andrew, I'm very glad you like it - and extensions would be welcome!. I think what you're seeing is intended design. A few things that might help:; * Spaces are used (strictly) as the delimiter when you manually input a stain vector - in the example that doesn't work, commas were given instead; * All the numbers adjust when you change any one of them, because QuPath will automatically normalize them to become a unit vector; * It is actually possible to give a sample of each color... although I'm not entirely sure if/where this is documented. Just draw a small rectangle in the area you want, then double-click on the stain you want to change. It should ask if you want to set the values from the ROI - instead of typing them manually. Another possibly-undocumented thing is that if you use 'Estimate stain vectors', you can actually grab the end of one of the stain vectors and move it around by dragging. Although figuring out the appropriate moves to reposition a vector in 3D based on three separate 2D plots isn't entirely easy...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/104#issuecomment-332890329:765,undo,undocumented,765,https://qupath.github.io,https://github.com/qupath/qupath/issues/104#issuecomment-332890329,1,['undo'],['undocumented']
Usability,"Thanks Benjamin! That's really good to know, I had not realised that installing the redistributable was necessary. I have added the link to https://github.com/qupath/qupath/wiki/Supported-image-formats#zeiss-czi. On the topic of CZI support, I have recently learned there may be some memory issues connected to reading CZI files that have been 'prestitched' using QuPath + Bio-Formats... is this something you have encountered / solved at all?. In the example I looked at, reading a single tile at the highest resolution would require preallocating an array that is the size of the entire full-resolution image whenever JPEG-XR compression was used... which would lead to out-of-memory errors in most cases. However I am not clear on the exact cause of this, and any insights would be very welcome.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/43#issuecomment-272952005:258,learn,learned,258,https://qupath.github.io,https://github.com/qupath/qupath/issues/43#issuecomment-272952005,2,"['clear', 'learn']","['clear', 'learned']"
Usability,"Thanks Pete, it was as simple as that, issue solved.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/349#issuecomment-518576771:23,simpl,simple,23,https://qupath.github.io,https://github.com/qupath/qupath/issues/349#issuecomment-518576771,1,['simpl'],['simple']
Usability,"Thanks Pete,. As you can see, I'm not a sophisticated github user, but I love QuPath!. I'll try again. Regan. Regan Fulton, M.D., Ph.D.; CEO and Co-Founder; Array Science, LLC; 475 Gate 5 Road, #100; Sausalito, CA 94965; (415) 577-7360. www.arrayscience.com. On Wed, Jul 19, 2023 at 9:17 AM Pete ***@***.***> wrote:. > Have you tried the troubleshooting instructions here?; > https://qupath.readthedocs.io/en/0.4/docs/intro/installation.html#macos; >; > Right-click + open has always worked for me, across multiple Mac computers; > - but Apple do sometimes change things. Recently, I find I need to; > right-click + open for the installer, and then also right-click + open for; > the app itself the *first* time I use it (but a simple double-click works; > after that).; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/1281#issuecomment-1642383068>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ANU5KKI5I3C4RIZ6WYUK5D3XRACBDANCNFSM6AAAAAA2QFEV3E>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1281#issuecomment-1642387865:728,simpl,simple,728,https://qupath.github.io,https://github.com/qupath/qupath/issues/1281#issuecomment-1642387865,1,['simpl'],['simple']
Usability,"Thanks Pete,. For the time being I've dealt with the multiple subtractions simply by adding all of the areas that need to be subtracted first. When things are passed in the right order things seem to work OK. I haven't looked through the code enough to understand if it's spurious or not yet, but locking also seems to make it more reliable. If it becomes an issue I'll dive a little deeper as you suggest. Besides occasionally having to learn some java-specific construction, I seem to be meandering through the code OK. . Colin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/78#issuecomment-303464822:75,simpl,simply,75,https://qupath.github.io,https://github.com/qupath/qupath/issues/78#issuecomment-303464822,2,"['learn', 'simpl']","['learn', 'simply']"
Usability,"Thanks Peter. Quick and clear as usual. ; I'm getting the feeling that the latter will be a bit longer but more reliable. I assume the same approach could be taken with IntelliJ, no? ; It might be a bit of work but I think this would be an interesting feature for QuPath to have, and there might be a way to get several different user groups to collaborate and contribute images for training.; Thanks again for the direction.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/76#issuecomment-301125628:24,clear,clear,24,https://qupath.github.io,https://github.com/qupath/qupath/issues/76#issuecomment-301125628,1,['clear'],['clear']
Usability,"Thanks a lot for the solution to Q1. . For Q2, I was trying to do something as simple as finding the polygon coordinates of holes and remove any polygons with smaller number of vertices. The trouble is the coordinates of the outer boundary of an annotation and the holes seem to merge together when you query them with `annotation.getROI.getPolygonPoints()`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/219#issuecomment-420535392:79,simpl,simple,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/219#issuecomment-420535392,1,['simpl'],['simple']
Usability,"Thanks everyone for the feedback - I'll merge this for now to avoid making too much of a mess while merging other PRs, but might return to it later.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1072#issuecomment-1279727287:24,feedback,feedback,24,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072#issuecomment-1279727287,1,['feedback'],['feedback']
Usability,"Thanks for considering the request. I think it would still be nice to be able to re-name within the hierarchy view. The pattern could be homologous to as in the ""Annotations"" view where under the ""Hierarchy"" view (right-click --> set-properties), so that users can predict and expect the behavior that they have already learned in the ""Annotations"" view ~ just as you suggested above.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/42#issuecomment-481330513:320,learn,learned,320,https://qupath.github.io,https://github.com/qupath/qupath/issues/42#issuecomment-481330513,1,['learn'],['learned']
Usability,"Thanks for reporting this. I have not been working with CZI images myself, but I recently received one example image with this problem. Unfortunately, I have not yet been able to identify the exact cause, beyond the fact that too much memory is used. Because the image is not being read by QuPath directly (but rather Bio-Formats) it is a bit harder for me to track down where exactly the problem lies. However, I will continue to investigate, and add an update here when I learn more. In the meantime, I have been told that the Zeiss ZEN software is able to export the different scenes as separate images, which can then be read into a [QuPath project](https://github.com/qupath/qupath/wiki/Projects). Therefore this may be a workaround that enables you to work with the images in QuPath.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/45#issuecomment-274611030:474,learn,learn,474,https://qupath.github.io,https://github.com/qupath/qupath/issues/45#issuecomment-274611030,1,['learn'],['learn']
Usability,"Thanks for the advice!; I will firstly start with immunohistochemistry; the H&E step will be in a month or two. I hope to learn QuPath more fluently during this time, but I am almost sure this was not the last scream for help I post on Your forum :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374023479:122,learn,learn,122,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374023479,1,['learn'],['learn']
Usability,"Thanks for the beta suggestion, I will check it out! . I attached an example of the data - it does not seem too different from some of the examples online. . ![image](https://user-images.githubusercontent.com/1241691/40502889-50725814-5f5a-11e8-9ffb-3f662387fa64.png). Curious, do you offer or plan to offer a supervised learning-based object detection tool, sort of like Ilastik? I develop a 3D image segmentation tool ITK-SNAP (for MRIs, CTs) and we have been successful with using random forests for segmentation. User paints some examples and the software extrapolates to the rest of the image. Unlike Ilastik we don't have the user generate engineered features, but just train using neighboring intensity values and let the random forest figure out which features are important and which aren't. The random forest code (C++) is fairly self-contained in case it is of any interest:. https://sourceforge.net/p/c3d/git/ci/master/tree/itkextras/RandomForest/. Thanks again,; Paul",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/67#issuecomment-391804783:321,learn,learning-based,321,https://qupath.github.io,https://github.com/qupath/qupath/issues/67#issuecomment-391804783,1,['learn'],['learning-based']
Usability,"Thanks for the clear bug report again, it should be fixed now.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/942#issuecomment-1087804966:15,clear,clear,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/942#issuecomment-1087804966,1,['clear'],['clear']
Usability,"Thanks for the clear description & example - could you have a look at the pull request to see if that resolves the problem? If you're able to test it with all your thousands of ROIs that would be great, in case any new badness has been introduced. My hope is that this will only be important for updating 'old' ROIs, since anything new created in v0.2.0 from now on will use JTS from an earlier stage and avoid the Shape &rarr; Geometry pain. (Side note is interesting, I'll check it out!)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/434#issuecomment-610230010:15,clear,clear,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/434#issuecomment-610230010,1,['clear'],['clear']
Usability,"Thanks for the clear description, I can reproduce the problem but it's not clear to me where exactly the character is getting messed up. Consequently, I can't tell it's something that can be properly resolved within QuPath or not. Specifically, if I launch QuPath from the command line passing a path containing ø then it works as it should. However, if I double-click on the same file, then somewhere the character becomes Ã˜. It appears that QuPath 'receives' the wrong version, and I don't know if this is thanks to Windows, jpackage or something else. There is a known bug in jpackage (used to create the .exe) whereby the application cannot be started if it is in a path that contains a non-ASCII character, and this impacts QuPath: https://bugs.openjdk.java.net/browse/JDK-8205991. I suspect therefore this isn't a QuPath bug, but rather a jpackage-related one.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-495929397:15,clear,clear,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-495929397,2,['clear'],['clear']
Usability,"Thanks for the clear description, I'll try to fix this for v0.4.1 :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1175#issuecomment-1337428008:15,clear,clear,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/1175#issuecomment-1337428008,1,['clear'],['clear']
Usability,"Thanks for the clear report, I wasn't aware of the 255 argument limit. I think switching to a list makes sense. I'll look into this soon - there are a few scripting things that need an overhaul before v0.4.0.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/915#issuecomment-1041907962:15,clear,clear,15,https://qupath.github.io,https://github.com/qupath/qupath/issues/915#issuecomment-1041907962,1,['clear'],['clear']
Usability,"Thanks for the detailed response Peter. That's a great starting point. ; As a follow up, is there a good place to learn about how to access QuPath data from the groovy scripting interface? Perhaps a list of the available data stored in various objects and the methods that can be used to access them? The examples are a great start, and have been very good at interpreting the kinds of things we're hoping to do, but it can be hard to go beyond them (short of diving deeper into the QuPath code itself).; The software has been very impressive so far - great interface and the scripting capability makes it feel quite extensible. Best,; Colin",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/44#issuecomment-273939189:114,learn,learn,114,https://qupath.github.io,https://github.com/qupath/qupath/issues/44#issuecomment-273939189,1,['learn'],['learn']
Usability,"Thanks for the feedback - I much prefer the look of this. Remaining issues:. - Probably lots I've not noticed; - When you make the height large, it drags out into empty unused space at the bottom (pictured). Have tried various VBox.vgrow settings, but no avail. ![Screenshot from 2023-10-05 16-16-21](https://github.com/qupath/qupath/assets/10779688/547cea53-f03c-4f01-9ec1-ca5828082f61)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1342#issuecomment-1749116788:15,feedback,feedback,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/1342#issuecomment-1749116788,1,['feedback'],['feedback']
Usability,"Thanks for the feedback! ; I've made the modifications to address all your bullet points and edited the PR description.; If there's anything more I can do, please do tell me!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/687#issuecomment-811996638:15,feedback,feedback,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/687#issuecomment-811996638,1,['feedback'],['feedback']
Usability,"Thanks for the feedback!. > The main question (maybe to discuss with @alanocallaghan and @finglis) is whether we should use Optional instead of just returning null. I am slightly in favor of using it sometimes - especially when the return really is optional - but here it seems to be used where throwing an exception would be preferable.; > ; > Returning null can be informative, inasmuch as it suggests we have a sparse image without pixels for every location - and shouldn't happen whenever there has been an exception. You're right, I was overusing `Optional`. Now, each time an error occurs, an exception is thrown. I kept `Optional` only when a function is not guaranteed to return a result AND no error occurred during its execution. > ReaderWrapper looks very tied to the 'OME' way of doing things (Bio-Formats and OMERO); I'd expect a general image reader to return something more informative than a byte[][], which can only be interpreted with a lot of other return values and Bio-Formats logic. So it isn't very easy to use in a standalone way.; > ; > That isn't in itself a problem, but if writing a general image reader for use with the OMERO web API or [IIIPImage Server](https://iipimage.sourceforge.io/documentation/server) (for example) I imagine it would be far harder to return a byte[][] than a BufferedImage.; > ; > So I think it should either 1) embrace being Bio-Formats/OMERO-specific, and prioritise simplicity, or 2) incorporate more of the processing logic that converts the byte[][] into a BufferedImage, and prioritise reusability. If the goal is for ReaderWrapper and ReaderPool to be reusable, it needs to be easy to generate and work with their return values. I changed `ReaderWrapper` to be as generic as possible (its read function now returns a `BufferedImage`). However, I wanted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:15,feedback,feedback,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['feedback'],['feedback']
Usability,Thanks for the feedback!; I'll close this PR and reopen a simpler one [here](https://github.com/qupath/qupath/pull/670) to facilitate integration.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-790729141:15,feedback,feedback,15,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-790729141,2,"['feedback', 'simpl']","['feedback', 'simpler']"
Usability,"Thanks for the prompt response, but the example I gave was probably one of the more simple type of structures that I'm interested in looking at. Another type of structure I'd be interested in looking at is the marginal invasive zone of a tumour. While at first it may seem simple (boundary between tumour and non-tumor tissue), there isn't always a clear boundary; instead there could be a lot of interwoven tumour tissue among non-tumour tissue. ; I'd be interested in a function that could classify (after training) this boundary, and I imagine it'd take into account the ratio of tumour to non-tumour regions or something like that if the computer found that to be a reliable and consistent variable in the classification of this structure.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/254#issuecomment-452897098:84,simpl,simple,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/254#issuecomment-452897098,3,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Thanks for the quick reply. I just want to run the simple tissue detection plugin and then save the result. `runPlugin('qupath.imagej.detect.tissue.SimpleTissueDetection2', '{""threshold"": 0, ""requestedDownsample"": 5.0, ""minAreaPixels"": 100000.0, ""maxHoleAreaPixels"": 5000.0, ""darkBackground"": true, ""smoothImage"": true, ""medianCleanup"": true, ""dilateBoundaries"": false, ""smoothCoordinates"": true, ""excludeOnBoundary"": false, ""singleAnnotation"": true}');`. This is the automated script for my operation.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/200#issuecomment-411335497:51,simpl,simple,51,https://qupath.github.io,https://github.com/qupath/qupath/issues/200#issuecomment-411335497,1,['simpl'],['simple']
Usability,"Thanks for the tip. Haha I need to refactor how I setup the qupath source code.... now I've squashed the commits but I had to ignore the folders for my extensions... sorry for all the complications, maybe you can cherry pick just the ""fixed ROITools.computeTiledROIs"" commit? I'm still learning git.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219620729:286,learn,learning,286,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219620729,1,['learn'],['learning']
Usability,"Thanks for your answer.; I tried to follow your tips, but I am a bit lost with the different steps and how to perform them. 1/ Detect tissue using : `Analyze>Preprocessing>Simple Tissue Detection` ✓ ; 2/ Split it into multiple tiles : `Analyze>Region Identification>Tiles & Super Pixels` then select `Make annotation tiles` and `Remove parents annotation` ✓ ; 3/ Sending each tile to ImageJ for thresholding : `Extensions->ImageJ->ImageJ Macro runner`; So at this step, I am not sure how to perform that. As an example, I set the following into the Image Macro runner:; ```; run(""8-bit"");; setAutoThreshold(""Huang dark"");; //setThreshold(187, 255);; setOption(""BlackBackground"", false);; run(""Convert to Mask"");; run(""Analyze Particles..."", "" show=Overlay display clear"");; ```; Then I selected `Send ROI to ImageJ`, `Clear Current child Object` and `Create detection object from ImageJ overlay`. ![image](https://cloud.githubusercontent.com/assets/1775952/23943366/7c26ced2-096f-11e7-9cb9-f8ca32c9e1eb.png). To run it on the wholde slide, I selected all the annotation and pressed `Run`. Is that the correct way ?. And after running, indeed it worked:; ![image](https://cloud.githubusercontent.com/assets/1775952/23943815/fe38edd2-0970-11e7-9b84-b3cf189a51b3.png). For some reason, the background has also been selected, although it was outside of the tile.; -My first question is how to avoid that?. -Second question, all detected objects are by tile, is there a way to merge the connected one?. And finally, it works tile by tile, but in case I would like to perform the Weka segmentation (which could be done easily thanks to the bridge you made via an ImageJ Macro), since the weka segmentation perform filtering (gqussian, hessian etc...), ideally, I would like to process the tile with a little bit of extra border so for example a gaussian filter with a kernel of 4 will take into account the pixel outside of the tile. But right now, it will only take into account the pixels inside the tile.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-286702227:172,Simpl,Simple,172,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-286702227,3,"['Clear', 'Simpl', 'clear']","['Clear', 'Simple', 'clear']"
Usability,"Thanks for your fast answer Pete! We started to train people to use QuPath in our institute for a research purpose, so far I've got really go feedback! Thanks again for having release this great software and in opensource!; Could we find somewhere the API like the ImageJ project did ( https://imagej.nih.gov/ij/developer/api/index.html ) ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/102#issuecomment-332442980:142,feedback,feedback,142,https://qupath.github.io,https://github.com/qupath/qupath/issues/102#issuecomment-332442980,1,['feedback'],['feedback']
Usability,"Thanks for your help, yes that (QuPath v0.5.0 release candidate) seems to be opening the WSI as one image rather than several separate dcm images. However like you said it still displays the list of dcm files in the Image List which may not be desired. . Not sure what's next in terms of this ticket - the main concern is addressed but the open UX issue may want to be handled separately.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1397#issuecomment-1779286034:345,UX,UX,345,https://qupath.github.io,https://github.com/qupath/qupath/issues/1397#issuecomment-1779286034,1,['UX'],['UX']
Usability,"Thanks for your reply - yes, jnilib should be an apple-only thing. Sounds good that it's getting through the imports now. Do you have an (RGB) image open when you run the script? The script assumes that you do. If you do have an image open, yet it still doesn't work, could you try the following simple script to check what QuPath is seeing:. ```groovy; print(""Current image data: "" + getCurrentImageData()); print(""Current image server: "" + getCurrentImageData().getServer()); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/27#issuecomment-262779794:296,simpl,simple,296,https://qupath.github.io,https://github.com/qupath/qupath/issues/27#issuecomment-262779794,1,['simpl'],['simple']
Usability,Thanks so much for the suggestions and feedback!,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1580#issuecomment-2277736935:39,feedback,feedback,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/1580#issuecomment-2277736935,1,['feedback'],['feedback']
Usability,"Thanks! Changing this solved it. I'm now trying to quantify the number of dots as a ratio of nuclear:cytoplasmic location. I'm using the script at the bottom of this page:. https://github.com/qupath/qupath/wiki/Spot-detection. This tells me the location of the spot when it is selected. However, I want to know the number of nuclear vs cytoplasmic dots when the cell is selected. I guess the nearest measure of this (using the above script) is just the Nuclear DAB OD mean vs Cytoplasmic DAB mean, but I'd like to know the actual number of dots as a nuclear:cytoplasmic ratio if possible?. Apologies if this is a simple question!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-346583086:613,simpl,simple,613,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-346583086,1,['simpl'],['simple']
Usability,"Thanks! I've just pushed some changes that I was working on while you were reviewing... since it basically rewrites `createROIs` to make it simpler and less a hack-y adjustment of the original, I think it addresses your last comments.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1520#issuecomment-2104104339:140,simpl,simpler,140,https://qupath.github.io,https://github.com/qupath/qupath/pull/1520#issuecomment-2104104339,1,['simpl'],['simpler']
Usability,"Thanks! What do you think of shifting the OpenSlide extension to a repository of its own?. Now that I've learned about `includeBuild` and `includeFlat`, it's more feasible to develop extensions in separate repos - even if they end up bundled in the distribution by default.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1325#issuecomment-1714284915:105,learn,learned,105,https://qupath.github.io,https://github.com/qupath/qupath/pull/1325#issuecomment-1714284915,1,['learn'],['learned']
Usability,"Thanks, I *think* the solution might be simply to include `System.exit(-1)` in the `catch` clause here:; https://github.com/qupath/qupath/blob/864ac71893a8749ff226c99e51642a5e10ea89ea/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/ConvertCommand.java#L250-L255. @Rylern could you check this please?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1451#issuecomment-1907884661:40,simpl,simply,40,https://qupath.github.io,https://github.com/qupath/qupath/issues/1451#issuecomment-1907884661,1,['simpl'],['simply']
Usability,"Thanks, I can reproduce the behavior - the entire object hierarchy is removed.; Furthermore, `clearTMAGrid()` no longer works from a script.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/646#issuecomment-734917139:94,clear,clearTMAGrid,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/646#issuecomment-734917139,1,['clear'],['clearTMAGrid']
Usability,"Thanks, I'll close this issue since the main concern is addressed. We don't really have the capacity to tackle the UX issue, since it is a particularly awkward one. Any 'quick' solution would likely add considerable complexity to import code that is already very convoluted, and any 'thorough' solution could take weeks of effort - so for the foreseeable future it'll need to be up to the user to select just one dcm file.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1397#issuecomment-1826759128:115,UX,UX,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/1397#issuecomment-1826759128,1,['UX'],['UX']
Usability,"Thanks, although I remain quite confused. If you find time to write up a bug report that clearly shows the broken and fixed behavior then that would be really helpful. Otherwise, I'll be on the lookout for problems with the tiling, but I'm not sure I'll have time to look in much detail any time soon without a demonstration that the current behavior is critically broken. As far as I can tell, any current bugginess may lead to inefficiency but I'd like an example where it gives a wrong result to understand what to fix. Ideally there would be a test added to [`TestRoiTools`](https://github.com/qupath/qupath/blob/dddad1fe5c567015e07bed8c05940c4403b8d07f/qupath-core/src/test/java/qupath/lib/roi/TestRoiTools.java) that fails before and passes afterwards.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219701264:89,clear,clearly,89,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219701264,1,['clear'],['clearly']
Usability,"Thanks, feel free to reopen in the future if this changes. The longer term plan is to revise how the brightness/contrast works and computes image histograms, so the issue might change... (Specifically, the histogram used to determine contrast settings is currently generated from a lower-resolution image. But the min/max values calculated at a lower resolution don't necessarily match with the 'true' min/max values in the image. They might also be thwarted by compression artifacts. So I'd like to improve this behavior generally in a later version with a smarter histogram calculation, and only fix things in the current implementation that are clearly broken.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/464#issuecomment-622330814:648,clear,clearly,648,https://qupath.github.io,https://github.com/qupath/qupath/issues/464#issuecomment-622330814,1,['clear'],['clearly']
Usability,"Thanks, it is great to be able to go through the z-stacks. I find the viewer very responsive compared to other image analysis/viewing softwares!. The script to adjust fluorescence contrast is a fairly good/quick option to adjust the settings. One question though: is it possible to also adjust manually the default colours for each channels within the same script? I've tried something like `channels[0].setColor(color)` but it is not working.... do you know which code would do the trick?. Another question related to the `.scn` format. The first image is the label but appears all pink. Do you know a way of seeing the actual label? (which would normally display in other viewers, and wouldn't be pink). And the label doesn't seem recognised as a label by QuPath but is showing in the image list, I guess it could be possible to avoid this?. Many thanks",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/191#issuecomment-409745698:82,responsiv,responsive,82,https://qupath.github.io,https://github.com/qupath/qupath/issues/191#issuecomment-409745698,1,['responsiv'],['responsive']
Usability,"Thanks, the screenshot suggests it's the `Files.exists()` check that is so slow. QuPath is probably calling this quite a lot, because it's usually really inexpensive - and *not* calling it leaves open the (admittedly small) possibility that the file has been deleted between calls. I could try to cut down on this, but I'm skeptical that it will help because it sounds a lot like it's only the first call that is slow. In fact, I'd be curious as to whether accessing each file is slow or just the first one on the disk. That should be relatively easy to test by creating a much smaller project and comparing the speed. Either way, it sounds like the problem lurks in the realm of Java, the operating system, and the hard drive. I'm not sure if there's much can be done about it in QuPath. I'd suggest:. * try accessing the images some other way before opening them in QuPath (e.g. through Windows Explorer), in case 'pre-warning' the OS is somehow useful; * try copying the images to a local drive (if possible); * try timing a simple script with a file on the same disk, e.g. ```groovy; import java.nio.file.*; var path = '/path/to/some/file'; println ""Exists: ${Files.exists(Paths.get(path))}""; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045:1028,simpl,simple,1028,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154#issuecomment-1327044045,1,['simpl'],['simple']
Usability,"Thanks, this is some excellent detective work!. Closing in favor of https://github.com/qupath/qupath/pull/1476 for v0.5.1 because it is simpler (and written based on the info you posted here), but we may revisit it as this is more listener-friendly.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1462#issuecomment-1973332453:136,simpl,simpler,136,https://qupath.github.io,https://github.com/qupath/qupath/pull/1462#issuecomment-1973332453,1,['simpl'],['simpler']
Usability,"Thanks, this script only works because Groovy permits access to package-private classes/constructors/methods, e.g. [`ChannelTransformFeatureServer`](https://github.com/qupath/qupath/blob/8136994f8e6ef2f3a33a72467fd7c71c35977ad6/qupath-core/src/main/java/qupath/lib/images/servers/ChannelTransformFeatureServer.java#L52) and [`ExtractChannel`](https://github.com/qupath/qupath/blob/8136994f8e6ef2f3a33a72467fd7c71c35977ad6/qupath-core/src/main/java/qupath/lib/images/servers/ColorTransforms.java#L262). So this couldn't be used (easily) from Java. In my mind, `TransformedServerBuilder` was intended to be the main way to create a new server that applies transforms so that users don't need to learn about other classes. It also limits the main source to [one page on the javadocs](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TransformedServerBuilder.html). Similarly, static methods of `ColorTransforms` can be used [here](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ColorTransforms.html). To further simplify the script, I'd suggest concatenating lists rather than streams - since this is likely more intuitive for more people. And you can use [`server.nChannels()`](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html#nChannels()) instead of needing to query the metadata and get the size of the channels list. So you might use; ```groovy; def channels = getCurrentServer().getMetadata().getChannels().collect {c -> ColorTransforms.createChannelExtractor(c.name)}; channels += [ColorTransforms.createLinearChannelCombination(coeffs)]; ```; but I think something like this is more readable to more people; ```groovy; def channels = []; for (int c = 0; c < server.nChannels(); c++); channels.add(ColorTransforms.createChannelExtractor(c.name)); channels.add(ColorTransforms.createLinearChannelCombination(coeffs)); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1566#issuecomment-2260153194:693,learn,learn,693,https://qupath.github.io,https://github.com/qupath/qupath/pull/1566#issuecomment-2260153194,3,"['intuit', 'learn', 'simpl']","['intuitive', 'learn', 'simplify']"
Usability,"Thanks. I've used this and come up with a measurement that is an expression of the Cell DAB OD mean:Nucleus DAB OD mean. This is an alright proxy, but doesn't account for variances in the OD of the dots themselves. . Ideally I would have a measurement of the absolute number of dots within the nucleus vs cytoplasm for every cell I click on. However I can't work out how to write a script for this as these measurements aren't visible when a cell is selected, only when a dot is selected. How do I add these measurements (number of dots in the nucleus and number of dots in the cytoplasm) so that I can combine them using the script you mentioned?. Apologies again if this is a simple question. Thanks for your help",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/119#issuecomment-347189540:678,simpl,simple,678,https://qupath.github.io,https://github.com/qupath/qupath/issues/119#issuecomment-347189540,1,['simpl'],['simple']
Usability,"That is a very interesting read. I am indeed reading about the DE-9IM interesection matrix, thank you for the detailed reply.; Initially I was rather afraid of an inconsistent behaviour of which I really didn't understand much. I wouldn't worry about the private method, tho. I'm closing this PR. However, now it's a lot more clear but I guess the `ROI` documentation could be a little more explicit on its behaviour. Would you accept a PR that simply states that the what the code assumes as ""inside""? I know you said that _potentially_ it has a different interpretation of insideness, but perhaps having a general rule is better than nothing. Just so that you know: I was interested in testing if a point outside of a ROI's bounding box is **always** outside of the ROI itself. Where the bounding box is defined as:; ```java; new Rectangle2D.Double(roi.getBoundsX(), roi.getBoundsY(), roi.getBoundsWidth(), roi.getBoundsHeight()); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048154154:326,clear,clear,326,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048154154,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"That is correct, and as far as I know it is the only possible behavior for the simple tissue detection command. I have always added any extra annotations after that first step. . If you do not want that behavior, you could also create an ImageJ script that does something similar, and then run it on all existing annotations. Assuming the ImageJ script was set up correctly (downsampling to fit ImageJ's file size requirements, etc), you could use Thresholding+Analyze Particles and then return the created outlines as annotation objects. . That is actually more like what I do for fluorescent tissue detection, and it can work fairly well.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-441513852:79,simpl,simple,79,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-441513852,1,['simpl'],['simple']
Usability,"That looks like the sort of thing that Simple Tissue Detection might work for with the correct settings. Something around 220 threshold maybe, with a medium requested pixel size and minimum area (keep setting these lower until you are picking up all of what you want). Also you will probably want to uncheck Single annotation. The requested pixel size is probably the most important measurement to play around with if you use this method. David beat me to it! His method is also probably better in the long run, though this gives another, slightly simpler method. I would also be careful about using too many features in your classifier, or at least make sure your training set is significantly larger than the number of features you use!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349094523:39,Simpl,Simple,39,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349094523,2,"['Simpl', 'simpl']","['Simple', 'simpler']"
Usability,"That sounds like it might be possible, as long as the mitotic nuclei are distinct enough visually to easily distinguish, but in the case of the Ki67 detection, that was done with DAB staining so the same method would not work on H&E slides. It is simply detecting ""brown"" in the cell. Perhaps a higher Hematoxylin OD or something similar would work for your H&E slides. It sounds very similar to things done with deep learning already, but may be possible with either a scripted classifier or the classifier function in QuPath as long as you can give it a big enough training set. . Though, this seems like less of a QuPath technical issue, and more of a [question for the forum](https://groups.google.com/forum/#!forum/qupath-users).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414434663:247,simpl,simply,247,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414434663,2,"['learn', 'simpl']","['learning', 'simply']"
Usability,That version of `simplifyTitledPane` was only removed/deprecated a few months ago so I'd be inclined to let it linger until 1.0 at least https://github.com/qupath/qupath/commit/a728924ca0b54f0070801dd3f2d6bbd700bf60a9,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1517#issuecomment-2096398497:17,simpl,simplifyTitledPane,17,https://qupath.github.io,https://github.com/qupath/qupath/pull/1517#issuecomment-2096398497,1,['simpl'],['simplifyTitledPane']
Usability,"That's awesome. Thank you!. I will try to implement it with JTS, then.; However the implication is that ""Polygons do not contain their boundary"", correct? Does that mean that if I'm testing if a point `p` is inside the boundary or **on** the boundary, i should check that `JVT.Geometry.covers(p) || JVT.Geometry.intersects(p)`, right?. I'm saying this because of what the DE-9IM article says about the `contains`/`withIn` predicates; > This issue is caused by the final clause of the Contains definition above: ""at least one point of the interior of B lies in the interior of A"". For this case, the predicate Covers has more intuitive semantics (see definition), avoiding boundary considerations.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578:625,intuit,intuitive,625,https://qupath.github.io,https://github.com/qupath/qupath/pull/1492#issuecomment-2048226578,1,['intuit'],['intuitive']
Usability,"The annotations probably are unlocked. You can check this by trying to move them, or looking for the lock symbol under the annotations tab. You will only see draggable points if the annotation ROI is 'simple', e.g. a rectangle, line or polygon. More complicated ROIs (e.g. containing disconnected pieces or holes) are represented differently and can't be edited by dragging points. However they can be edited using the Brush or Wand tool. Since I don't think there's a bug here, I'll close the issue. Feel free to start a topic [on the forum](https://forum.image.sc/tag/qupath) if you would like to discuss this behavior/QuPath's use, or reopen the issue if my explanation is wrong and there really is a problem with unlock not working.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1224#issuecomment-1416687799:201,simpl,simple,201,https://qupath.github.io,https://github.com/qupath/qupath/issues/1224#issuecomment-1416687799,1,['simpl'],['simple']
Usability,"The backup will only show up, I think, if you have successfully saved the; file at least once. It isn't an autosave feature. Regarding the memory, 3.3 GB is quite low. For small scale testing I; usually got away with 16GB, and for larger projects 64+. I am not sure,; but you may be able to circumvent this somewhat by running each of your 4; ROIs in turn, and saving after each. On Nov 9, 2017 9:23 AM, ""Eline8"" <notifications@github.com> wrote:. > Thank you both for answering! @Svidro <https://github.com/svidro> and; > @petebankhead <https://github.com/petebankhead>; > I started all over again, so I don't have the workflow anymore.; > Nevertheless, what I meant was that I used indeed the pointing tool. I had; > two populations, one negative and one positive. After I ran the positive; > cell detection, the negative population was gone. And unfortunately, there; > is no undo button.; >; > My goal was indeed compare the manual counting and the automated counting.; > For optimization.; >; > I don't know whether the error is the lack of RAM, I checked and i have; > 3,3GB available. And I only have 4 ROI's in one image. When I run the; > analysis, I make sure nothing is selected and choose the option 'all; > annotation'. It might be, but it might be not, because sometimes it also; > does not analyse only 1 ROI, but other times it does. However, the log it; > says 'memory error'. the programs that are running on my computer besides; > Qupaht are google chrome (1tab), one note with an excel file, and file; > explorer.; >; > [image: capture]; > <https://user-images.githubusercontent.com/33484227/32604466-0266ac66-c54e-11e7-9a9b-ede61554510b.PNG>; > [image: capture2]; > <https://user-images.githubusercontent.com/33484227/32604472-05d80ef8-c54e-11e7-97d1-b1540f6ee388.PNG>; > [image: capture3]; > <https://user-images.githubusercontent.com/33484227/32604473-07eafa66-c54e-11e7-9aca-94fae7d0e9da.PNG>; >; > I really don't know why sometimes it works or not, but i'll be more; > careful",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343229740:879,undo,undo,879,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343229740,1,['undo'],['undo']
Usability,"The behavior has been unchanged in v0.2.0 milestones for many months (without previous complaint) and it is now too late to make any substantial change before v0.2.0. QuPath v0.1.2 handled projects in a much simpler way, but this is insufficient for many recent and planned features for which a single local file path isn't enough to identify an image. v0.2.0 therefore stores both the absolute and relative paths. If the relative path to the project file is maintained, QuPath will show a dialog and prepopulate the necessary changes to the absolute paths to update the project. The user only has to accept these changes and the project will be updated. This should allow everything to be 'corrected' immediately when the project is opened. If the absolute paths were *not* updated, then resolving relative paths every time they are required would be rather a lot more complex, and could result in projects being silently updated in unexpected ways (e.g. when changing an image name, trigging the project file to be rewritten). The current behavior aims to strike a compromise between being easy to use and not causing unexpected problems. To avoid the 'update URIs' dialog in am multi-user setting, each user can duplicate the *project.qpproj* file and use the duplicate as their own view on it, i.e. they open and update the project file to contain the absolute paths relevant to them. To facilitate this, when dragging a project directory on top of QuPath one can choose the precise file to open from a drop-down list. There is also a *Recent Projects* option to reopen the last project. > **Please respect the request to use image.sc for questions and discussions, not GitHub.**; > ![bug report](https://user-images.githubusercontent.com/4690904/80976463-68b25400-8e1b-11ea-8c19-739a35dd4942.png)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/468#issuecomment-623497951:208,simpl,simpler,208,https://qupath.github.io,https://github.com/qupath/qupath/issues/468#issuecomment-623497951,1,['simpl'],['simpler']
Usability,"The current limited rotation is intentional and not a bug. There are several discussions about it, including here: https://forum.image.sc/t/rotating-view-in-qupath/23925. I have changed the label to enhancement as it is really a feature request. I do intend QuPath to support rotating images in 90 degree increments where this is decided at the beginning (i.e. before doing any annotations or creating any objects), as I think this is often needed. I've written most of the code but have a bit more work to do to get it into the user interface as a usable feature. In the meantime, for publication images you can always rotate the resulting image in other software (e.g. ImageJ).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/293#issuecomment-475304459:549,usab,usable,549,https://qupath.github.io,https://github.com/qupath/qupath/issues/293#issuecomment-475304459,1,['usab'],['usable']
Usability,"The issue looks to be the same as https://github.com/qupath/qupath/issues/336, in which case the switch to use OpenJFX 13 in the next release of QuPath will hopefully resolve it. If you want to try building it from the `dev-m5` branch (some guidance [here](https://petebankhead.github.io/qupath/2019/10/01/building-qupath.html)) please do let me know if it does work or not. Otherwise I hope v0.2.0-m5 will be available within the next week.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/369#issuecomment-541389834:241,guid,guidance,241,https://qupath.github.io,https://github.com/qupath/qupath/issues/369#issuecomment-541389834,1,['guid'],['guidance']
Usability,"The method of opening the project doesn't matter. I just tested drag&drop, open dialog and recent dialog. All have the same problem. Regarding your other question, only if I add enough buttons to the source to cause the problem. For example, if I add; ```java; nodes.add(ActionTools.createToggleButton(ActionTools.createAction(() -> {; 	}, ""something"", IconFactory.createNode(QuPathGUI.TOOLBAR_ICON_SIZE, QuPathGUI.TOOLBAR_ICON_SIZE,; 	PathIcons.BRUSH_TOOL), null), true, true));; nodes.add(new Separator(Orientation.VERTICAL));; nodes.add(ActionTools.createButton(ActionTools.createAction(() -> {}, ""Convert""), false));; ```; (sorry for the formatting) to qupath-gui-fx/src/main/java/qupath/lib/gui/ToolBarComponent.java line 170 (just before `toolbar.getItems().setAll(nodes);`) it demonstrates the issue. This is simply adding one toggle button, one separator and one text button to the end (sorry, I'd forgotten about the toggle button). I have no actions on these buttons which would interfere, nor any accelerator etc.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1184#issuecomment-1352389017:816,simpl,simply,816,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184#issuecomment-1352389017,1,['simpl'],['simply']
Usability,"The pull request above contains a proposed fix. Upon reflection, I'm not sure where exactly the encoding issue arises (Java, jpackage, Wix used to create the exe, the Windows command prompt... or somewhere between them) so I haven't been able to find any clear documentation of expected behavior. I hope the suggested fix is sufficiently modest that it can fix most issues without creating new ones, but that remains to be tested. Feedback/fixes/suggestions welcome. If it looks basically ok, it will be included in v0.2.1.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/320#issuecomment-645185707:255,clear,clear,255,https://qupath.github.io,https://github.com/qupath/qupath/issues/320#issuecomment-645185707,2,"['Feedback', 'clear']","['Feedback', 'clear']"
Usability,"The server path is now a URI, not just a String (which helps support images that aren't local files). The problem seems to be the method of manually parsing the path in your script to create a directory name assumes the older, simpler paths (i.e. without URI scheme, or possibly query/fragment parts).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472892770:227,simpl,simpler,227,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472892770,1,['simpl'],['simpler']
Usability,"The third option listed above is now integrated, and locale information is added to `.qpdata` files. This has been done in a way that should not break compatibility with any existing saved files. Testing involved varying the locale using commands such as those below (one at a time):. ``` groovy; Locale.setDefault(Locale.UK);; Locale.setDefault(Locale.GERMAN);; Locale.setDefault(Locale.JAPAN);; Locale.setDefault(Locale.CHINA);; ```. ...and then testing whether files written with one locale could then be read using another. This appears to be working, but further insights and bug-reports relating to location-specific issues would be welcome. The fix will be included in `v0.0.5`. (Note: I could conceive of trouble with `ClassNotFoundExceptions` in the event of attempting to deserialize a `.qpdata` file where the saved `Locale` is not available... however it's not clear to me whether this could or would ever actually happen. In the even that it does, QuPath should default to not changing the locale at all - and so would still have a reasonable chance of succeeding.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/18#issuecomment-258824636:873,clear,clear,873,https://qupath.github.io,https://github.com/qupath/qupath/issues/18#issuecomment-258824636,1,['clear'],['clear']
Usability,"The updates required for Java 16 were more substantial than I'd hoped... this is my first attempt. It relates to:; * https://github.com/qupath/qupath/issues/615; * https://github.com/qupath/qupath/pull/639; * https://github.com/qupath/qupath/pull/640. I'm not entirely satisfied with the outcome, particularly in dropping the version number and whether this will cause Windows installation pains for any update, but I don't have more time to grapple with it at the moment. And continuing to rely on Java 14 for the next release seems worse. Feedback / suggestions welcome :). @EgorBushmelev @yli-hallila @anotherBunchOfAtoms @ertugrulcetin @juliangilbey @ajay1685 @melvingelbard",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/685#issuecomment-803035454:541,Feedback,Feedback,541,https://qupath.github.io,https://github.com/qupath/qupath/pull/685#issuecomment-803035454,1,['Feedback'],['Feedback']
Usability,There are warnings on startup and at the [bottom of the info page](https://qupath.github.io/QuPath-v0.2.0)... It's not clear from your description did you open a project or work with .qpdata files directly?,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/292#issuecomment-475308624:119,clear,clear,119,https://qupath.github.io,https://github.com/qupath/qupath/issues/292#issuecomment-475308624,1,['clear'],['clear']
Usability,"There is a shape simplification step used when viewing annotations at a lower resolution, to avoid needing to paint all the vertices frequently. I'm not sure why it is failing in this case. Does the issue occur only when combined with your code, or also when QuPath is used alone?; Can you provide any steps to reproduce, or files containing annotations that exhibit this behavior?. Just in case, note that ROIs are supposed to be immutable - so if any exterior code violates that (e.g. by manipulating private fields with ROIs) then the result would be Bad.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/416#issuecomment-601616473:17,simpl,simplification,17,https://qupath.github.io,https://github.com/qupath/qupath/issues/416#issuecomment-601616473,1,['simpl'],['simplification']
Usability,"There is indeed a need to install the redistributables on Windows, as far as I know - it's mentioned [here](https://github.com/qupath/qupath/wiki/Supported-image-formats#zeiss-czi). But the Mac trouble suggests it's something else. I know that the support for CZI in QuPath using the Bio-Formats is pretty varied. Sometimes it works, but I've learned of cases recently where it doesn't. I think TMAs (with lots of scenes?) are especially troublesome. I have spotted a few ways to fix the QuPath Bio-Formats extension that I believe will help, and I hope to have these changes made by the middle/end of next week, and I'll write another update here. Hopefully they will fix the issue with your files, but if not then I will investigate further.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/135#issuecomment-357022776:343,learn,learned,343,https://qupath.github.io,https://github.com/qupath/qupath/issues/135#issuecomment-357022776,1,['learn'],['learned']
Usability,"There should be a variety of ways to do this in a script. One would be selecting each annotation in turn using getAnnotationObjects() and looping through them. For each annotation you generate your detections, output detections, then clear detections.; Another way could be to use a loop to a classification for each annotation (Class1, Class2, etc) and then you will end up with one data file, but the detection entries would be easily separable based on the classification column.; In version 1.3, there is a column that names the parent annotation for each detection, which could also be used to select certain detections without creating a classification.; Version 1.3 installation instructions (it is a test version!) can be found here: https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/225#issuecomment-427051030:234,clear,clear,234,https://qupath.github.io,https://github.com/qupath/qupath/issues/225#issuecomment-427051030,1,['clear'],['clear']
Usability,"There's a description of how I've done it in the past in the [Scientific Reports paper](https://www.nature.com/articles/s41598-017-17204-5). In particular, see the [Supplementary material](https://static-content.springer.com/esm/art%3A10.1038%2Fs41598-017-17204-5/MediaObjects/41598_2017_17204_MOESM1_ESM.pdf) - especially around p 13. The supplementary material also shows a really elaborate script on p15... but actually it's *much* simpler now:; ```groovy; setCellIntensityClassifications('Cell: DAB OD max', 0.35); ```. However, all of that is too complicated If you are will to draw regions of interest, and don't need to bother with separating out epithelial/non-epithelial cells (which may be really difficult and not accurate enough in brightfield images for PD-L1). In that case, it should be much easier to simply run *Positive cell detection* as described [here](https://github.com/qupath/qupath/wiki/Detecting-objects). The only thing you should need to chnage is the measurement at the bottom (*Nucleus: DAB OD mean* probably isn't right, *Cell: DAB OD max* or *Cell: DAB OD mean* should do better).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/161#issuecomment-375336894:435,simpl,simpler,435,https://qupath.github.io,https://github.com/qupath/qupath/issues/161#issuecomment-375336894,2,['simpl'],"['simpler', 'simply']"
Usability,"This commit aims to fix the use of non-default directories: https://github.com/petebankhead/qupath/commit/8d7693b22c79446b0d92b6dac1afab6ccb2b0745. Note that you can set the directory in the preferences, but search for 'user' rather than 'extensions'. Note that this is in a particular branch of my fork; I plan to sanitize the various branches/forks in the near future to make it a bit clearer where everything is/should be.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/298#issuecomment-476286936:387,clear,clearer,387,https://qupath.github.io,https://github.com/qupath/qupath/issues/298#issuecomment-476286936,1,['clear'],['clearer']
Usability,"This is a very shoddy way of doing the detections per annotation, and is written for version 1.2 where the default names might not be unique. 1.3 could simply use the annotation name instead of incremental numbers. If the annotations were all uniquely (manually) named, that could potentially be used for the file name.; https://gist.github.com/Svidro/5e4c29630e8d2ef36988184987d1028f#file-export-detections-per-annotation-groovy. Note that this is very slow and poorly written :) It would be much more elegant to write out the detection measurements that had already been created by using getChildObjects... but this was something I could easily do!. Good luck and let me know if you have any questions.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/234#issuecomment-432762268:152,simpl,simply,152,https://qupath.github.io,https://github.com/qupath/qupath/issues/234#issuecomment-432762268,1,['simpl'],['simply']
Usability,"This looks expected to me, and not a bug. The image will be opened using the server defined within the project. The script simply re-opens the same image using Bio-Formats. If you are generating a project, you can specify the *Image provider* to be Bio-Formats at that point, thereby avoiding the need to use the script at all.; https://qupath.readthedocs.io/en/latest/docs/tutorials/projects.html#add-images",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/658#issuecomment-754589459:123,simpl,simply,123,https://qupath.github.io,https://github.com/qupath/qupath/issues/658#issuecomment-754589459,1,['simpl'],['simply']
Usability,"This looks like a simple bug, albeit one that has existed for some months at least - weirdly without being reported before. Should be fixed in the next minor release, but I first need to check it in more detail.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/518#issuecomment-640758278:18,simpl,simple,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/518#issuecomment-640758278,1,['simpl'],['simple']
Usability,"This relates to https://github.com/qupath/qupath/issues/1634. Because CUDA detection and PyTorch downloading is all performed by DeepJavaLibrary, we are very limited in what we can do on the QuPath side. Then there is the issue of how Java loads native library dependencies - and especially the platform-specific fun of how *sub*-dependencies are handled. And the potential interference of environment variables or other things that could be installed. It is, in short, hard. The page on the docs is currently our best 'general' approach to help with this, based on many hours trying to find something workable across computers: https://qupath.readthedocs.io/en/stable/docs/deep/gpu.html#gpu-support. We will continue to try to improve this, but I'll close the issue because I don't think there is any clearly-defined QuPath bug here that we can address. To try to avoid fragmenting the discussion in multiple places, I suggest posting on the forum. There are more users active on the forum who might potentially be able to help from their own experience, and there are already some related discussions, e.g. https://forum.image.sc/search?q=qupath%20gpu%20order%3Alatest",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057:802,clear,clearly-defined,802,https://qupath.github.io,https://github.com/qupath/qupath/issues/1636#issuecomment-2346013057,1,['clear'],['clearly-defined']
Usability,"This script may be useful as a workaround, but I haven't checked if it has any unwelcome side-effects. The bug will need fixed in a later release.; ```groovy; def hierarchy = getCurrentHierarchy(); hierarchy.clearTMAGrid(); hierarchy.tmaGrid = null; fireHierarchyUpdate(); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/646#issuecomment-734918607:208,clear,clearTMAGrid,208,https://qupath.github.io,https://github.com/qupath/qupath/issues/646#issuecomment-734918607,1,['clear'],['clearTMAGrid']
Usability,"This should be fixed now in the next release, so that the visibility of an object is used to determine whether it is sent to ImageJ or not. This also includes whether cells are shown with their boundaries and/or nuclei. Regarding converting to ImageJ selections, that should already happen. It should already be the case that the objects are sent as ImageJ Rois on top of an ImageJ overlay - so you can either remove the overlay, or send its Rois to the ROI manager. If you do the latter, you should also see that the names of the Rois have also been set according to their names/classifications within QuPath. Also, the 'primary' selected object (i.e. the one that was currently active whenever the _Extract region to ImageJ_ command was run) should automatically be converted to an ImageJ Roi and set as the active selection in ImageJ - _unless_ it was a rectangle. There isn't really so much point in sending rectangles Rois, since they will simply occupy the whole image (and can easily be recreated in ImageJ if necessary with _Edit &rarr; Selection &rarr; Select All_) - but all non-rectangles should be transferred, as shown below. Hopefully that works well enough to be suitably heroic... ![ij_screenshot](https://cloud.githubusercontent.com/assets/4690904/19360208/7cf2f31c-9175-11e6-9a60-b8878b6e7543.jpg)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/5#issuecomment-253588979:945,simpl,simply,945,https://qupath.github.io,https://github.com/qupath/qupath/issues/5#issuecomment-253588979,1,['simpl'],['simply']
Usability,"This update does allow the export to run as expected when saving as ""ome.tif"". It might be useful to have a check/warning prior to attempting to write a file that is too large to a basic .tif. If I attempt the same export to .tif, after a long pause I get:. `WARN: Unable to write image; ERROR: IOException at line 22: Unable to write F:\filepath\Sox2 region_0_annotationLabels.tif! No compatible writer found.`. Oddly enough, I ran into trouble with the new Telerium openjdk not recognizing `gradlew ` when trying to set that up on my new computer, but was able to build and test things out on my old one so... I will look into that later.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/984#issuecomment-1183514515:244,pause,pause,244,https://qupath.github.io,https://github.com/qupath/qupath/issues/984#issuecomment-1183514515,1,['pause'],['pause']
Usability,"To answer your question, when I do the debug seting in imagej I can se ethat the threshold fails quite extremely. Perhaps it's becasue the threshold expects a light image on a dark bkrd. Or, it could be due to the other channels in my image, some of which are extremely noisy and really ought to be excluded from the threshold calculation. I think it would be useful if we could perform simple processing (brightness/contrast) on the core image before it's sent to imJ for core detection.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/196#issuecomment-411736810:387,simpl,simple,387,https://qupath.github.io,https://github.com/qupath/qupath/issues/196#issuecomment-411736810,1,['simpl'],['simple']
Usability,"True, I will give it some thought and investigate a bit when I return to the tool to update the icon. Left/right would break down for a horizontal line, although that could be resolved. However it's not clear to me what a kind of result a U shape of polyline should produce.... inner/outer is an easier concept there, but returns to closed polygons. But it gets worse when thinking of S shapes... or intersecting polylines. If we can come up with a clear and unambiguous definition for what polyline expansions make sense then we can look at how it might be implemented. Failing that, is there a way that adding extra commands/options could preserve your current approach, but make it more streamlined?. I've also been looking into the ability to transform ROIs to a Java Topology Suite-compatible format, which should give more options for interesting shape transforms and determining spatial relationships... although I don't recall anything in the library directly helpful here.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/228#issuecomment-430150335:203,clear,clear,203,https://qupath.github.io,https://github.com/qupath/qupath/issues/228#issuecomment-430150335,2,['clear'],['clear']
Usability,"Try opening the image in a project. This has been discussed elsewhere for other file formats:; https://forum.image.sc/t/third-milestone-on-the-path-to-qupath-v0-2-0/27953/7. You can request to auto-estimate the image type in the preferences (the default for v0.1.2). See also https://petebankhead.github.io/qupath/2019/08/20/fourth-milestone.html for more information about how to set the image type when importing images for a project. The channel colors in QuPath are/should be read directly from Bio-Formats; the relevant code is at https://github.com/qupath/qupath/blob/master/qupath-extension-bioformats/src/main/java/qupath/lib/images/servers/bioformats/BioFormatsImageServer.java#L514; If it doesn't, then it's a bug in QuPath. But at this point it's not clear to me if the colors differ because of something in QuPath, something in Bio-Formats or something in the software that wrote the file in the first place.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/361#issuecomment-530792826:762,clear,clear,762,https://qupath.github.io,https://github.com/qupath/qupath/issues/361#issuecomment-530792826,1,['clear'],['clear']
Usability,"Update to 1: I've removed the dialog height limit in v0.4.2, which has just been released. I'll close this issue now since selecting/deselecting all is possible as in my last answer. We might add buttons/checkboxes with these options in the future, but I think we need to explore the whole topic of UX more first - to try to make QuPath's options easier to find, but without making the user interface too cluttered and confused. I don't know what the solution to that is, but I hope someone can figure it out :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1201#issuecomment-1397436014:299,UX,UX,299,https://qupath.github.io,https://github.com/qupath/qupath/issues/1201#issuecomment-1397436014,1,['UX'],['UX']
Usability,"Upon closer inspection, this may not be a v0.2.x change... `Geometry.isValid()` checks can be slow to the point of not being usable for complex geometries (e.g. constructed from a high-resolution pixel classification).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/527#issuecomment-644812072:125,usab,usable,125,https://qupath.github.io,https://github.com/qupath/qupath/issues/527#issuecomment-644812072,1,['usab'],['usable']
Usability,"Upon further reflection, my understanding is that you likely ran positive cell detection in a ROI that was the 'parent object' for the negative point class - but not the positive class - which is why the negative points only disappeared*. When you run cell detection with a 'parent object' selected, then any 'child objects' inside it will automatically be deleted, and replaced with the detected cells. This is *usually* the right/most intuitive thing that should happen, and is not a bug. If this didn’t happen, then you if ran the cell detection command twice with the same parent selected, you would end up having every cell counted twice - not to mention the strange things that might happen with overlapping objects if you were to run other tiling/superpixel commands. It's not clear to me what was the purpose of doing manual counts followed by automated counts within the exact same region, but (as you've found) it is something that is not supported. You *could* do it the opposite way (i.e. automated counts followed by manual counts). However, if it was my goal to compare manual and automated cell counting then I would do the automatic counts in duplicate project and keep the data separated. Furthermore, you can do automated counts and then select 'Convert detections to points' within the 'Points tool' to initialize the (manually-editable) points that can subsequently be modified to generate 'semi-automated counts'. With regard to being unable to reopen a data file, this is something that has been reported some months ago (e.g. #58), but I'm not aware of it being an ongoing problem - or at least not one I have ever been able to reproduce. If QuPath fails to write a complete data file, then you should find that a '.qpdata.backup' file exits somewhere inside your project/data folder. If you strip the '.backup' data part from the file name, then it should be possible to recover the last saved version. > *-Information about the object hierarchy is at https://github.com/qupath",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-342941759:437,intuit,intuitive,437,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-342941759,2,"['clear', 'intuit']","['clear', 'intuitive']"
Usability,"We did end up getting self-contained binaries for all platforms built and hosted on SciJava Maven for the 4.0.0 OpenSlide release. Hopefully with the release of the Apple M1 GitHub runners in the next few months, we can contribute these changes into the upstream build cycle. The current status of OpenSlide in QuPath is that each platform contains a self-contained OpenSlide binary, which we hook into with JNA. This means the JNI-based OpenSlide-Java is no longer needed for us, which simplifies the build quite a bit. Users can override this by pointing QuPath to their own version of OpenSlide. These changes are available in the current v0.5.0 rc(1/2) and will be in the full 0.5.0 release of QuPath also. Closing this as all of the necessary changes now are in different repos unrelated to QuPath core.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1777323272:487,simpl,simplifies,487,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1777323272,1,['simpl'],['simplifies']
Usability,"Well this turned into something rather a lot more complicated than I'd hoped... Attempted fix in https://github.com/petebankhead/qupath/commit/c331ba1a79223311f31e82d33482dc3102f99480. What *should* happen is that behavior remains the same, however unbeknown to most the Bio-Formats server now accepts arguments of the form `[""--bfOptions"" ""key=value""]` that will be passed to the reader. The 'easy' (sort of) way to access these is via the following script:; ```groovy; def bfOptions = qupath.lib.images.servers.bioformats.BioFormatsServerOptions.getInstance(); bfOptions.setReaderOptions([""zeissczi.autostitch"": ""false""]); ```; This will set the option for the current QuPath session; to reset it, either restart QuPath or call `options.clearReaderOptions()`. The necessary autostitching flag should then be retained if the image is added to a project. Because this happens regardless of whether the flag is relevant (e.g. it's for a totally different file type) it's best to clear the options when they aren't needed. If you can build QuPath from the same branch as the commit, please let me know if you find any problems. > Sidenote: Thanks to @melvingelbard you should also see a Bio-Formats series chooser when opening images even outside a project.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/396#issuecomment-582323621:739,clear,clearReaderOptions,739,https://qupath.github.io,https://github.com/qupath/qupath/issues/396#issuecomment-582323621,2,['clear'],"['clear', 'clearReaderOptions']"
Usability,"Well, Pete's forum, really! I am just a user that really enjoys this; stuff. :). On Mar 18, 2018 10:56 AM, ""geodza"" <notifications@github.com> wrote:. > Thanks for the advice!; > I will firstly start with immunohistochemistry; the H&E step will be in a; > month or two. I hope to learn QuPath more fluently during this time, but I; > am almost sure this was not the last scream for help I post on Your forum :); >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/157#issuecomment-374023479>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-bKNly9QrF-G4kkz87cALU9U6BG3ks5tfp_bgaJpZM4Sl4d_>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/157#issuecomment-374036497:280,learn,learn,280,https://qupath.github.io,https://github.com/qupath/qupath/issues/157#issuecomment-374036497,1,['learn'],['learn']
Usability,"Well, clearly I didn't actually read the error message, sorry... looks like it's OpenCV and not OpenSlide that seems to be triggering the trouble.; Could you replace `openslide` with `opencv` in those last instructions...?. Or if you are feeling particularly bold you could also try switching to the `java9` branch on my fork, where I am trying out a different version of OpenCV - which might possibly avoid the problem entirely.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/150#issuecomment-368861735:6,clear,clearly,6,https://qupath.github.io,https://github.com/qupath/qupath/issues/150#issuecomment-368861735,1,['clear'],['clearly']
Usability,"Well, it's increasingly clear how much my normal functioning depends upon a spellchecker.... Fixed them now, but unfortunately one instance of `pyramidize` remains - it will turn up on .qpproj files, so changing it without a lot of extra caution would cause compatibility troubles.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/496#issuecomment-632777903:24,clear,clear,24,https://qupath.github.io,https://github.com/qupath/qupath/pull/496#issuecomment-632777903,1,['clear'],['clear']
Usability,"What do you call from the command line?. And can you simple run your script from the QuPath _Script editor_, following some of the Wiki documentation (e.g. [here](https://github.com/qupath/qupath/wiki/Writing-custom-scripts))?. I have not had time to focus on the command line interface for QuPath, and prefer to work from the script editor. This allows you to choose _Run &rarr; Run for project_ for simpler batch processing. Eventually I hope to have another look at the command line, but there are many other tasks to be done first. It would help to understand exactly what you want to do, in case there are easier ways to achieve that goal.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420273639:53,simpl,simple,53,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420273639,2,['simpl'],"['simple', 'simpler']"
Usability,"What do you mean with the information in the initial form?; Actually, I already followed the guideliness of that site.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/330#issuecomment-501888323:93,guid,guideliness,93,https://qupath.github.io,https://github.com/qupath/qupath/issues/330#issuecomment-501888323,1,['guid'],['guideliness']
Usability,"What happens if you simply replace the `makeTiles` line with the following ?. ```groovy; def pathROIs = RoiTools.makeTiles(roi, tW, tH, trimToROI).reverse(); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1277#issuecomment-1621867685:20,simpl,simply,20,https://qupath.github.io,https://github.com/qupath/qupath/issues/1277#issuecomment-1621867685,1,['simpl'],['simply']
Usability,"What's the motivation in switching from ; ```java; public SimpleBooleanProperty(boolean initialValue); ```; to; ```java; public SimpleBooleanProperty(Object bean,; String name,; boolean initialValue); ```; ?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1601#issuecomment-2312153765:58,Simpl,SimpleBooleanProperty,58,https://qupath.github.io,https://github.com/qupath/qupath/pull/1601#issuecomment-2312153765,2,['Simpl'],['SimpleBooleanProperty']
Usability,"When I attempt to create a new project, and open the folder containing the .tif image file, I get a dialogue box telling me the project directory must be empty. However I can simply open the .tif image in qupath if that helps. In that the originial .tif will open, without the analyses or objects overlayed. Each .tif file and its correlative .qpdata file are stored together in the same folder.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461094561:175,simpl,simply,175,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461094561,1,['simpl'],['simply']
Usability,"When splitting annotations by lines, my expectation is that the thickness will usually be 0. Supporting different units risks increasing the code complexity considerably, because the command must also be scriptable and then somehow the units need to incorporated into any script. Additionally, QuPath is moving towards greater generality. It is increasingly used for images where µm is an inappropriate unit, so I'm reluctant to add additional code that assumes µm as the only alternative to pixels. And a properly generic system will take a lot more effort to develop (not helped by the fact that Java has no built-in support for converting units... it's a recurring theme, e.g. [here](https://jcp.org/en/jsr/detail?id=385), but as far as I'm aware there are a multiple implementations and it's not clear which, if any, we should use). This also affects the sparse image server: at the point the dialog is shown, we don't know if the pixel size is available in µm for the regions that will be required to generate the server. Furthermore, the dialog itself is [auto-generated from a `ParameterList`](https://github.com/qupath/qupath/blob/main/qupath-extension-processing/src/main/java/qupath/process/gui/commands/CreateTrainingImageCommand.java#L90), which limits the ability to toggle between units. Added to that, I'm not terribly happy with the generation of 'dynamic' training images generally; the code is really complex (since the images can be quite heterogeneous), and performance can be poor whenever many images need to be accessed to create the final result. Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. I'll leave this open for a while in case there are further comments, but my feeling is that the development-and-maintainence-time-to-benefit ratio isn't favorable enough to work on this in the core QuPath software; there are too many higher priorities, and if I'd rather focus efforts on simplicity, maintain",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932:800,clear,clear,800,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932,1,['clear'],['clear']
Usability,"When you run the *Estimate stain vectors*, it is good to have the smallest region selected that contains 'a bit of everything' (red staining, nuclei, background - although probably not the yellow pigment here). If the region selected is large, then QuPath will need to scale it down and then may give a less good estimate. You can also set individual stains manually by drawing very small rectangles around an area containing the stain, and then double-clicking the name of the stain under the *Image* tab. Ideally, a really good estimate would allow you to set a higher intensity threshold and still detect what you want - but not what you don't. However it is quite possible that no settings really achieve this. Since I understand you are looking at counts - and not intensity values - you *could* set the image type to be *Brightfield (other)* and then this activates the 'third' stain color. You could then set that based upon a small rectangle drawn in a yellow area. QuPath will then try to separate this as an extra stain. This will certainly negatively impact intensity measurements, and I'm not sure if it's a good idea. Nevertheless, the meaningfulness of intensity measurements in this kind of image is probably pretty limited anyway, so it is perhaps worth a try to see if it results in much better detection of what you can see by eye really should be detected. In the future, I'm wondering if it would be better to create a machine learning approach in QuPath for tasks like this, i.e. something more 'learn-by-example' (like with training the tumor/stroma cell distinction), rather than relying on color deconvolution. I think the current approach may be too simple, because there are always little anomalies or artefacts that can play havoc with trying to set a threshold for detection. What do you think? Are there any other changes/additions that would help here?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368339801:1447,learn,learning,1447,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368339801,3,"['learn', 'simpl']","['learn-by-example', 'learning', 'simple']"
Usability,"Which version of QuPath are you using? In recent milestones there is a [memory monitor command that can be used to clear the cache directly](https://petebankhead.github.io/qupath/2019/11/02/fifth-milestone.html#memory-monitor--show-input). In general, QuPath retains image tiles cached in memory until that cache is full, after which they are deleted. It does *not* empty the cache when an image is closed, because it's quite possible the same image might be reopened later - and in general it isn't needed to do so. This behavior is intentional. In v0.2.0-m8 you can adjust the proportion of memory given to this tile cache under *Edit &rarr; Preferences...*. One potential explanation is that QuPath generally stores some pieces of information (e.g. a thumbnail) about previously-opened files outside the normal tile cache, and these might not be cleared - but usually they are very small and so don't cause a problem. But I have seen rare instances were .czi files read by Bio-Formats have huge memory requirements. To check this, can you look to see the file size for one of the `.bfmemo` files created by Bio-Formats? There are paths shown in the log message you give. Usually each file should be just a few MB in size.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/393#issuecomment-576002136:115,clear,clear,115,https://qupath.github.io,https://github.com/qupath/qupath/issues/393#issuecomment-576002136,2,['clear'],"['clear', 'cleared']"
Usability,"Would it work for your analysis to export all of the information you need on the stromal cells (and whatever else you are studying) first, and then delete everything that is not pathClass Tumor? That is the simplest way I can think of to prevent the other overlays from being sent to ImageJ.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/108#issuecomment-335856403:207,simpl,simplest,207,https://qupath.github.io,https://github.com/qupath/qupath/issues/108#issuecomment-335856403,1,['simpl'],['simplest']
Usability,"Would there be a way to associate it with a task that isn't required for `run` (e.g. `assemble` or `processResources`), which puts the docs into the required place - but wouldn't be called for someone calling `./gradlew run` alone?. Not sure if this is an option, but `./gradlew run --dry-run` shows the tasks that will be run. If it's not straightforward, I agree that the delay of a few seconds is more annoying than the benefit for the javadocs - so better not to generate them. Edit: simpler alternative to the above might be to just require a separate task to be called if the javadocs should be generated (but which `jpackage` probably still depends upon, either directly or indirectly).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1513#issuecomment-2096382810:488,simpl,simpler,488,https://qupath.github.io,https://github.com/qupath/qupath/pull/1513#issuecomment-2096382810,1,['simpl'],['simpler']
Usability,"Wow, thanks, that replicates the issue for me too. This sounds like a bug / intuitive behavior within the Delaunay triangulation. It's concerning that measurements can be added multiple times to the same objects. It suggests that the results might not be fully deterministic, depending upon the status of the object hierarchy and precisely which annotations are selected. I'm reluctant to fix the underlying issue in a 0.0.x release, but we should try to replace the command entirely. An implementation with [`DelaunayTools`](https://github.com/qupath/qupath/blob/df81345068455f09f42f50e97dc7b69a591e27f7/qupath-core/src/main/java/qupath/lib/analysis/DelaunayTools.java#L77) should be cleaner than the current OpenCV-based one. **As I understand it, this shows that the existing Delaunay command should not be used for nested annotations that contain detections.**. Single annotations, or annotations arranged in a 'flat' way (so that the same detection is not a descendent of more than one selected annotation) should be ok.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902:76,intuit,intuitive,76,https://qupath.github.io,https://github.com/qupath/qupath/issues/1444#issuecomment-1943698902,1,['intuit'],['intuitive']
Usability,"Yea, that's from recentering the tiles. If you comment out the portion of the code that centers the tiles then I get the behavior that I wanted for my extension.; ```; // Center the tiles; // xMin = (int)(bounds.getCenterX() - (nx * w * .5));; // yMin = (int)(bounds.getCenterY() - (ny * h * .5));; ```; For a byRow image:; ![row no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441453-7fbba950-4a83-4dd9-96c9-d6b83237a966.png). For a byColumn image:; ![column no center roitools computeTiledROIs](https://user-images.githubusercontent.com/28576964/185441429-ec886abf-4068-4b9f-ab74-939bd5fd4513.png). Also, prepared geometries code (line 695 of RoiTools) will not be executed unless the geometry has > 1000 points, so you will not be able to easily test this for a parentROI that is a rectangle. From the images above, you can see that I have made some very large complex annotations using the SimpleThresholder and I was encountering this problem when tiling those annotations. The original fix is mainly to adjust the behavior of the code so that it actually is using the prepared geometries that are calculated. If you step through the code with a debugger, you can see that the rowParents or columnParents are not indexed by y or x but by yi and xi, so the geometries are never retrieved from these maps. And the columnParents geometries are sometimes not correct because the envelope for intersection did not go across the entire column. The final result depends on if you want the tiled objects to be centered or not within the parent annotation. Perhaps you could fix it by adding an additional ""center tiles"" argument for the places that need tiling, but I'm sure this would break a lot of things. I do not have the time to fill out a bug report now, but just wanted to let you know about this.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929:937,Simpl,SimpleThresholder,937,https://qupath.github.io,https://github.com/qupath/qupath/pull/1039#issuecomment-1219671929,1,['Simpl'],['SimpleThresholder']
Usability,"Yeah, I think it was me that introduced that script :) https://github.com/qupath/qupath/issues/130#issuecomment-355845333 . There's an option *Run &rarr; Clear cache (batch processing)* built-in now that should do the same thing:; https://github.com/qupath/qupath/blob/533ce0cf50ca2a5627b55a8c1fe351cdc72e0694/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L1681-L1687. I think it's off by default, since emptying the catch is often not welcome. But I still don't have a very clear idea why it continues to prove useful :/",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1322#issuecomment-1715904774:154,Clear,Clear,154,https://qupath.github.io,https://github.com/qupath/qupath/issues/1322#issuecomment-1715904774,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"Yeah, I was over-enthusiastic in converting `Collectors.toList()` to simply use `toList()` when updating to Java 17 - this problem has emerged a few times. See https://github.com/qupath/qupath/commit/1710f51e7846b9b85367da2a716a8b67c8805e92 for more info. The reason I didn't just undo it is that `Collectors.toList()` *also* seems to be wrong - at least inasmuch as it makes no guarantees of mutability: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Collectors.html#toList(); So the fact it worked previously was kind of incidental or accidental. Therefore my thinking was that we could stick with `Stream.toList()` where that works, and then where mutability is required we use instead; ```java; stream.collect(Collectors.toCollection(ArrayList::new)); ```. I hadn't spotted this as a failure case, so we certainly should change it - but I think better to make the change that explicitly generates an `ArrayList` to avoid relying upon the happenstance of `Collectors.toList()` being mutable.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1282#issuecomment-1648260545:69,simpl,simply,69,https://qupath.github.io,https://github.com/qupath/qupath/pull/1282#issuecomment-1648260545,2,"['simpl', 'undo']","['simply', 'undo']"
Usability,"Yeah, I'm not generally a fan of very dockable UIs myself... and there's no native JavaFX support. Lots of docking makes me thing of complex IDEs, which I'd expect only a minority of QuPath users to feel comfortable with (I'm not sure if I'm even one of them, and I use complex IDEs all the time). An entire UI overhaul is certainly a good idea, but much more long term - I'm thinking here about stuff we could do within the next couple of weeks that would meaningfully improve the UX. Meanwhile, the PR shows me there are definite bugs with my proposed approach - at least when it comes to stuff like cell detection, when windows change focus before the processing is complete. The fact that is broken suggests the underlying code to run parallel tasks ought to be strengthened though, so I'm tempted to persist a bit longer with the PR - irrespective of whether we end up exposing the 'detachable viewer' part through the UI or not.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1709739777:482,UX,UX,482,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1709739777,1,['UX'],['UX']
Usability,"Yes, the change was made in response to user feedback but I didn't want to point fingers :point_up: :point_up:",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/354#issuecomment-523526830:45,feedback,feedback,45,https://qupath.github.io,https://github.com/qupath/qupath/issues/354#issuecomment-523526830,1,['feedback'],['feedback']
Usability,"Yes, the trouble comes from the background estimate whenever a large region is broken up into tiles for processing. The technique QuPath is using to estimate the background is 'opening by reconstruction'; this starts out by estimating the background locally for every pixel, and then propagating this information throughout the tile. The propagation is helpful most of the time, since this handles cases where there may be quite a lot of texture in the background quite well; and usually it doesn't propagate very far. But it's not helpful all of the time... particularly where there are substantial differences in the amount of 'background' (or staining outside nuclei) within tiles and between neighboring tiles. So my suggestion would also be to either set the background radius very high, or set it to zero to turn off background estimation entirely. The second option is likely better if you can still find nucleus detection settings that work. Depending upon what you want to do next, you might also try the 'Fast cell counts' command. It is much simpler and does not provide nearly so much information, but it also does not handle background in the same way.... so gives an alternative.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/80#issuecomment-305385370:1053,simpl,simpler,1053,https://qupath.github.io,https://github.com/qupath/qupath/issues/80#issuecomment-305385370,1,['simpl'],['simpler']
Usability,"Yes, you have to create the project, then copy the images into the project.; Sorry for not being clearer on the order. Or don't bother making the project portable and just import the tif from; wherever it currently is. Then create a data folder and put the qpdata file; in it. In the end, you just need an image with name X ""in your project,""; and a qpdata file with name X in the data folder. On Wed, Feb 6, 2019, 8:43 AM Clemonsg109 <notifications@github.com wrote:. > When I attempt to create a new project, and open the folder containing the; > .tif image file, I get a dialogue box telling me the project directory must; > be empty. However I can simply open the .tif image in qupath if that helps.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/266#issuecomment-461094561>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AWEq-Ty73DDH2yTiSdH3yk3EKsJTz5gPks5vKwZEgaJpZM4allUl>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/266#issuecomment-461098234:97,clear,clearer,97,https://qupath.github.io,https://github.com/qupath/qupath/issues/266#issuecomment-461098234,2,"['clear', 'simpl']","['clearer', 'simply']"
Usability,"Yes. We can make changes, but need to be cautious and ideally keep the `Project` interface as simple as we can. The thinking is that we want projects to not *necessarily* be backed by files on the local file system. So you might have a QuPath project that behaves like a 'view' on an OMERO project (for example). I think this idea is already used by QuPath Edu - see [here](https://github.com/openmicroanatomy/qupath-edu-extension/blob/dd67a5edccd8e548dd0739c6bde624fff276b21f/src/main/java/qupath/edu/EduProject.java#L54).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1537#issuecomment-2139836229:94,simpl,simple,94,https://qupath.github.io,https://github.com/qupath/qupath/issues/1537#issuecomment-2139836229,1,['simpl'],['simple']
Usability,"You can also open the `project.qpproj` file directly in a text editor, and then use 'Find & Replace' to change the paths. That is probably easier and faster than reimporting. You could even duplicate the project file and keep the duplicates in the same directory, each with the paths including a drive letter you might need. So you might have `projectD.qpproj`, `projectE.qppro`j, `projectF.qpproj`... each containing the different paths that you might need. Ultimately the data for each image is stored inside the 'data' subdirectory inside the project folder, with a filename based only on the name of the image (not its full path). Therefore just open the project file that contains the correct paths, and it should immediately have access to the same data. There is a little bit of information about how projects are structured at https://github.com/qupath/qupath/wiki/Project-structure; It's usually best to leave QuPath to take care of the files in the project directory... but it is intentionally quite simple so that, if you know more or less what it is doing, you can certainly hack it a bit to behave the way you need.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/114#issuecomment-342855367:1010,simpl,simple,1010,https://qupath.github.io,https://github.com/qupath/qupath/issues/114#issuecomment-342855367,1,['simpl'],['simple']
Usability,"You could try running the script below to brutally reset the histograms:; ```groovy; def display = getCurrentViewer().getImageDisplay(); display.cachedHistogramMaps.clear(); display.histogramMap.clear(); ```; It might help you avoid a restart, but I'm not sure...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/131#issuecomment-355843907:165,clear,clear,165,https://qupath.github.io,https://github.com/qupath/qupath/issues/131#issuecomment-355843907,2,['clear'],['clear']
Usability,"You may want to open a [forum ](https://groups.google.com/forum/#!forum/qupath-users)thread where you can show some examples. Most examples I have seen of identifying TILs in HE staining were using deep learning, but if you can figure out a way to identify them among the rest of your cells, you should be able to do it. Extracting the data into a single worksheet is fairly easy, and can been seen in the following two links:; https://petebankhead.github.io/qupath/scripting/2018/03/04/script-annotation-export.html; https://petebankhead.github.io/qupath/scripting/2018/03/05/script-annotation-results-merge.html. I generally use SLICs to classify sub-annotation areas, then merge them into annotations (after some smoothing) to separate out tissues for cell detection. Aand I got horribly distracted by laser problems and Pete beat me to it :)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/262#issuecomment-458656502:203,learn,learning,203,https://qupath.github.io,https://github.com/qupath/qupath/issues/262#issuecomment-458656502,1,['learn'],['learning']
Usability,"You probably already know this and maybe it's not even relevant any longer, but anyway: It appears the RichTextFX team has been replaced and is now actively maintained. Also, [this](https://www.mirkosertic.de/blog/2015/04/a-javafx-based-lua-editor/) might be a simple way to implement a robust script editor. I hope this is useful 😄",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/241#issuecomment-481208920:261,simpl,simple,261,https://qupath.github.io,https://github.com/qupath/qupath/issues/241#issuecomment-481208920,1,['simpl'],['simple']
Usability,"[openslide-winbuild](https://github.com/openslide/openslide-winbuild) now uses Meson to build a single unified DLL with all of its dependencies linked in. (Well, almost all: libssp and winpthreads are generated by the compiler toolchain and remain separate DLLs for now. One of them will go away eventually, and hopefully both.) There's still a `build.sh` wrapper script, but it's not strictly necessary anymore; it's mostly for building the source zip and binary zips for distribution. The substance of the build all happens in Meson, in the `meson` subdirectory. That code might be a good starting point for macOS and/or Linux builds. It'd surely need some adjustments, but I'd be willing to consider PRs to add support for those platforms. Feel free to take a look; feedback would be welcome!. @petebankhead Any maintenance help with OpenSlide Java would be welcome. I'd be happy to discuss further if you'd like.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1483719436:769,feedback,feedback,769,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1483719436,1,['feedback'],['feedback']
Usability,"` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is made, ReaderPool could still be subclassed, but wouldn't have to be subclassed. I made `ReaderPool` a concrete class by using a `Supplier` like you suggested (well, not exactly a `Supplier` but a `Callable` because I needed to throw exceptions). I removed the child classes of `ReaderPool`. > Elsewhere ReaderPool contains a lot of logic for image reading, which feels like it belongs in the reader itself - not the pool for managing readers. And it's also quite Bio-Formats-focussed, since the idea of a series within an image is quite Bio-Formats-specific.; > ; > So overall I don't have a clear idea of the logical separation between ReaderWrapper and ReaderPool. It feels like the logic of image reading is now more split across more classes + Bio-Formats itself, and it's quite hard to trace what is happening.; > . I moved the image reading logic from `ReaderPool` to `ReaderWrapper`. > It only supports returning all pixels for all channels simultaneously. In preparation for the future, it would be beneficial to have an API that optionally supports returning individual channels.; > ; > * This isn't needed if the refactoring is minor. But any major refactoring has a chance of regression (in terms of some obscure images failing), so we should try to avoid doing it multiple times. Should I add a `openImage(TileRequest tileRequest, int series, int channel, boolean isRGB, ColorModel colorModel)` function to `ReaderPool`?. > Associated images can sometimes be very big - even pyramidal or with multiple channels. So the logic for reading them doesn't have to be fundamentally different to the logic fo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:3037,clear,clear,3037,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['clear'],['clear']
Usability,"```; String imgpath = server.getPath(); print(imgpath); ```; // this retuens: file:/D:/QMDownload/5/Leica_scn/Leica-Fluorescence-1.scn#2. ```; int dotNich = imgpath.lastIndexOf("".""); int slashNich = imgpath.lastIndexOf(""\\""); int diColonNich = imgpath.lastIndexOf("":""). // ----make output folder; 	String dirOutput = (imgpath[0..dotNich-1] + ""_tif""); 	print(""dirOutput="" + dirOutput); ```. 	// this returns dirOutput=file:/D:/QMDownload/5/Leica_scn/Leica-Fluorescence-1_tif. ```; 	def subdir = new File(dirOutput); 	//subdir.mkdir(). // ----clear the folder; 	//subdir.eachFileMatch(~/.*.*/) { file ->; 	// file.delete(); 	//}. File file = new File(dirOutput, name); // ----Save the image; 	IJ.save(imp, file.getAbsolutePath()); ```; 	// file.getAbsolutePath() returns a weired path like: C:\Program Files\QuPath-0.2.0-m1\app\file:\D:\QMDownload\5\Leica_scn\Leica-Fluorescence-1_tif\Leica-Fluorescence-1.scn (d=1.00, x=0, y=1500, w=2000, h=1500, z=0).tif; ```; // ----Print progress; 	counter++; 	println(""Written tile "" + counter + "" to "" + file.getAbsolutePath()); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472925432:541,clear,clear,541,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472925432,1,['clear'],['clear']
Usability,"```; def roiOutput3 = RoiTools.subtract(roi1, RoiTools.union(roi2, roi3, roi4)); ```; makes sense to me by building/layering functions together logically but from your other suggestions, maybe. ```; public static ROI subtract(ROI baseROI, Collection<ROI> roisToSubtract) {; // Loop through one or more roisToSubtract, and remove them from baseROI; }; ```; will make it clear/less ambiguous to which ROIs are being subtracted from the baseROI, e.g.; ```; def roiOutput = RoiTools.subtract(baseROI, [roi1, roi2, roi3, ...]); ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/995#issuecomment-1167534365:369,clear,clear,369,https://qupath.github.io,https://github.com/qupath/qupath/issues/995#issuecomment-1167534365,1,['clear'],['clear']
Usability,"a lot of badly-classified data that you then need to remember to ignore later. However, it does then require being able to estimate in advance which cores should be classified together. 4. If you want to use a separate classifier for every core, you could try a more drastic approach of exporting every core as a separate image. To do this, first dearray your slide. Then, you can use [Extension &rarr; ImageJ &rarr; ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) to export each image. You need a very simple macro, like the one below:; ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```; where you’ll need to change the path to be something more suitable for your computer. It takes advantage of the fact that the ‘title’ of the image sent to ImageJ is the same as the TMA core, so using this as the filename can help you identify the core afterwards. > This may give you individual core images that are a bit big... you can change ""tif” to “jpg” to decrease the file size, or you can set the ""Downsample factor” value to 2 to export a lower-resolution image. The advantage of using “tif” is that the micron information is preserved, while if you use “jpg” then this is lost. After doing this export you can then import all your core images into a new project. You’ll almost certainly want to use scripting for batch processing in this case, and there will be another couple of things to do (e.g. apply dearraying to detect a single core in each image, or use *Objects &rarr; Create full image annotation* to give you a region in which to detect cells). ---. Personally, I think Option 1 is the ‘cleanest’ solution, but may be very time-consuming. All the others would give some kind of data management headache - but maybe it is worth it. Of course, there may also be more creative solutions that I haven’t considered. I would be interested to know what you choose in the end. Good luck!. Pete. PS. Thanks for the positive feedback!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:4506,feedback,feedback,4506,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['feedback'],['feedback']
Usability,"achFileMatch(ResourceGroovyMethods.java:1534); at org.codehaus.groovy.runtime.ResourceGroovyMethods.eachFileMatch(ResourceGroovyMethods.java:1565); at org.codehaus.groovy.runtime.dgm$989.invoke(Unknown Source); at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244); at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53); at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115); at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:135); at Script2.run(Script2.groovy:100); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:766); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:696); at qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:676); at qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1033); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515); at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628); at java.base/java.lang.Thread.run(Thread.java:834). ```. The error line was:; ```; // clear the folder; line 99: subdir.eachFileMatch(~/.*.*/) { file ->; line 100: file.delete(); line 101: }; ```. Here the error take place on the dir stuff, not related to server. But this runs OK in 0.1.2; I also found that the folder was not created at line 98:; `subdir.mkdir()`",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472886695:4833,clear,clear,4833,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472886695,1,['clear'],['clear']
Usability,"actually there is. You can use a script that exporte your annotations. runs the simple tissue detection, re-imports your annotations, then substracts everything of simple tissue detection of your ROI. . Then finally you have your annotations with simple tissue detection inside. ; That requires quite some scripting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-460298789:80,simpl,simple,80,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-460298789,3,['simpl'],['simple']
Usability,"ah right, Svidro! simple tissue detection is the much faster and more convenient way to do it! I was thinking to complicated ^-^",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/121#issuecomment-349097979:18,simpl,simple,18,https://qupath.github.io,https://github.com/qupath/qupath/issues/121#issuecomment-349097979,1,['simpl'],['simple']
Usability,"ar counterstain in the first channel. This morning I tried to address this, and hopefully you find it functions better in [v0.0.5](https://github.com/qupath/qupath/releases/tag/v0.0.5), which I've just uploaded. An example image from a fluorescence microscope is shown below. ![qupath_fluorescence_cells](https://cloud.githubusercontent.com/assets/4690904/20115597/cf2682ae-a5f0-11e6-88c9-82298e3cd1ea.jpg). A few important points (which will eventually be documented on the Wiki):; - QuPath tries to identify brightfield and fluorescence images when they are opened (although you can ask it not to under _Auto-estimate image type on opening_ option in the _Preferences_); if it gets it wrong, you will need to double-click the `Image type` in the _Image_ tab to set this manually to fluorescence.; - The `Image type` needs to be set before running the _Cell detection_ command, to make sure that the right options are displayed; - The _Threshold_ option under _Intensity parameters_ will be important, and will likely need to be adjusted... the default is simply selected for all images of that type and bit-depth, and not based on the information present in the image; - If you are working with images at a relatively low resolution (such as in the screenshot I showed), it can be helpful to decrease the _Detection line thickness_ parameter in the _Preferences_ so that the cell or nucleus outlines do not obscure your view too much.; - The _Brightness/Contrast_ options currently misbehave somewhat with fluorescence. If you want to show/hide specific channels, it's actually better to simply type the number of the channel you want to hide or show several times (i.e. just the number 1, 2 or 3 etc.). This should toggle it on or off. Actually, this last trick to change visible channels also works for brightfield, except that 1 indicates the RGB image, 2 the first color deconvolved channel, 2 the second... and so on through multiple color transforms. I hope this is useful. Best wishes,. Pete",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/12#issuecomment-259250203:1482,simpl,simply,1482,https://qupath.github.io,https://github.com/qupath/qupath/issues/12#issuecomment-259250203,2,['simpl'],['simply']
Usability,"arr; Calculate features &rarr; Add Intensity features (experimental)* and choose a few color transforms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?) and remove them - thereby allowing you to avoid the memory and computational requirements of sto",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2693,clear,clear,2693,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['clear'],['clear']
Usability,"ation, if you have time to test it, I've also added the side-to-side wheel clicks (or shift + normal mousewheel scrolling). I've spent some time trying to understand how [Mouse Events](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/MouseEvent.html) are handled in JavaFX and I *think* I managed to sort out the issues I was initially having: Behaviour when dragging with middle button pressed, fast clicks, when to consume events or not, debouncing... Incidentally, the debouncing code is not strictly necessary, but it was an interesting exercise in working with a broken mouse. Also, I *think* `MouseEvent.MOUSE_RELEASED` should be added to the [list of ignored events here](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L1039) as without, I had to deal with the (middle) button release event multiple times as part of the events generated by JavaFX in the course of pressing a mouse button. Finally, I've also UX tested the behaviours we discussed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) and reproduced in the first comment. For now,; * Windows,; * with my ""fancy"" mouse; * with the shift+scrollwheel substitute for side-to-side scrolling; * my Lenovo T460 touchpad; * with scroll touch gestures enabled or disabled; * with inverted mouse enabled or disabled; * with ctrl to modify opacity; ; I couldn't use ""Zoom"" or ""Rotate"" touch gestures, because I don't think my very basic touchpad understands them, so I couldn't see any effects on QuPath. Panning does work as expected (with my very last commit). ~~**todo** I will edit my comment when I test a Linux build on my old powerbook with Mint, which (maybe) will let me use more touch gestures.~~ I haven't been able to use touch gestures with QuPath in my Cinnamon desktop environment so far, but with a mouse, my code behaves in Mint/Ubuntu the way it does on Windows. For now, my code ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123:1240,UX,UX,1240,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037#issuecomment-1243226123,1,['UX'],['UX']
Usability,"but depending on the nature of your tissue, a simple SLIC command with a classifier and subsequent tiles to annotations would be the easier way.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/248#issuecomment-460299389:46,simpl,simple,46,https://qupath.github.io,https://github.com/qupath/qupath/issues/248#issuecomment-460299389,1,['simpl'],['simple']
Usability,"cs.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 1690.3.3); 	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 1228.0.0); 	/System/Library/Frameworks/CoreText.framework/Versions/A/CoreText (compatibility version 1.0.0, current version 1.0.0); 	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0); ```; and notably `/usr/local/opt/gettext/lib/libintl.8.dylib` stops him from using it on an x86-64 machine, though this doesn't seem to be a problem on CI machines. ## Linux. The below is out dated; when dynamically linking `glib`, our binaries are fine. > While it's easy enough to get a SO of openslide with minimal dependencies (`libpcre2-8` stubbornly remains dynamically > linked), issues arise when trying to load this alongside JavaFX. Specifically, we get a glib warning followed by an error:; > ```; > (java:71634): GLib-GObject-WARNING **: 14:32:40.458: cannot register existing type 'gchar'; > **; > GLib-GObject:ERROR:../../../meson/subprojects/glib-2.72.0/gobject/gvaluetypes.c:454:_g_value_types_init: assertion failed: (type == G_TYPE_CHAR); > ```; > This is less urgent, as we can just distribute QuPath as `deb`/`rpm` packages, and specify `openslide-tools` as a dependency, as we will no longer depend on `openslide-java`. ## Plan for 0.5.0 release. - Windows will use a JAR of the OpenSlide builds, which we can extract to temp files and then load.; - Linux releases will depend on `openslide-tools`; if this is installed, then `libopenslide.so` should be on the search path.; - Mac builds will require homebrew (or similar) installs of `openslide`. However, if we could resolve the issues with the mac and Linux binaries, then it'd be great to use the same (or at least similar) processes on all platforms. Would appreciate any feedback/advice from @bgilbert and @jcupitt on the best way forward, or if yous have run into some of these issues before.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495:6722,feedback,feedback,6722,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-1723504495,1,['feedback'],['feedback']
Usability,"d complex shapes with holes, it is also possible - but considerably more awkward. 3. Create some kind of ```PathObject``` for each ```PolygonROI```; probably a ```PathDetectionObject``` (if there will be a lot of them) or ```PathAnnotationObject``` (if there won't). There is some more information [here](https://github.com/qupath/qupath/wiki/Types-of-object). 4. Add each ```PathObject``` to the object hierarchy in QuPath so that it can be displayed. There is some information relevant to the last 3 steps at https://github.com/qupath/qupath/issues/61. For the first step, there are a few different options:. * If you are much more comfortable with Python rather than Groovy/Java, then you could try one of the methods of using Python with QuPath described [in the Wiki](https://github.com/qupath/qupath/wiki/Working-with-Python). Conceivably, you might even be able to run your whole code that way… or else just parse the results exported in a Python-friendly format. * You could try using OpenCV via its Java bindings via Groovy via QuPath. If you set things up as described [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ) then the dependencies should be accessible. * You could write a simple Python script to export the coordinates for each contour, and then write a simple Groovy script to parse this and bring the coordinates into QuPath. Of these, I would choose the last option. There may be some merit in the others, but I expect they would be more complicated to set up. There are lots of tricks and shortcuts in Groovy that may help with the parsing, e.g. in order to extract floating point coordinates (such as those required to construct the ```PolygonROI```) from a String you might use this:. ```groovy; String inputString = ""1.0, 2.0, 3.0, 4.0, 50.0""; float[] x = inputString.tokenize(',') as float[]; print x; ```. Finally, I should mention that the coordinates should be in pixel units corresponding to the highest-resolution plane in your SVS file.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-307854757:1545,simpl,simple,1545,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-307854757,2,['simpl'],['simple']
Usability,"d that the ObjectClassifier would _never_ need to read pixels because it currently only uses the detections' measurements. Surely the code must be changed in preparation of the advent of the `FeatureExtractor`. And for this, using `ProjectImageEntry.readHierarchy()` is probably the better option.; > [...] creating a classifier without needing to go through the UI [...]. I am not sure about this, though. You often want to leverage the live-update feature when creating a classifier. That is one of the most handy feature when tweaking a classifier. If that option was removed, it would be unfortunate. -------------------------. However i think you missed a point. The major issue this PR wants to address is the ability to a script in batch as fast as possible (and when it is possible); > an alternative approach [...] that doesn't involve any big API changes - and which can be used when you can know in advance that the image doesn't need to be accessed. Just to be clear, this PR's only API change is adding in [`ProjectImageEntry.java:L195`](https://github.com/qupath/qupath/pull/1488/files#diff-14ed5cabf5566ab4eb5d1ae31a25d75c8dd49e3c50e1cc05ce10ff21936b9a9fR195), where it adds a new public method `readImageData(boolean)` asking whether to read or not the image file. It also provides a default implementation `readImageData()` that always reads it, so that all previous code relied on this assumption don't break.; Furthermore, as you suggested the current approach can be used when _you know in advance_ that the image doesn't need to be accessed:; ![image](https://github.com/qupath/qupath/assets/34198340/3525d599-2609-422b-a5f8-64c1660d505c). Now, I agree this interface may not be the best one as it could easily just be a checkbox option in the ScriptEditor. For now, though, i think it is enough to enjoy the benefits that this PR brings. > > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076:1142,clear,clear,1142,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2022463076,1,['clear'],['clear']
Usability,"d to create and customize one. _However_... there are a lot of things that I _wouldn't_ try with QuPath's built in commands only, and mitosis detection in H&E is one of them. I'd say the detection task is too difficult and specialized for QuPath's generic cell detection currently. Solving that is a substantial research project in itself (and the subject of some [grand challenges](https://mitos-atypia-14.grand-challenge.org)). That's one of the reasons why QuPath supports scripts and extensions: it's possible to create highly specialist algorithms elsewhere, and either integrate them into QuPath or at least visualize the results through QuPath. Therefore some of the ways in which QuPath can help are:; * for manual counting; * for exporting manual counts as 'ground truth' into a format that can be used to help create a new algorithm, using whatever image processing / machine learning / deep learning libraries and tools you like; * for visualizing the results of an algorithm directly in the context of a whole slide image (using QuPath's objects, classifications & visualization tools to help); * as the platform for running and sharing any algorithm you might create (if it's implemented as a QuPath script or extension). The first of these is pretty laborious, while the last three will take some effort and knowledge on the image analysis side. That's the side I come from... I created QuPath because I needed the tools myself to write new algorithms, and then to share them with pathologists and other researchers. For me, it's an algorithm development platform that takes away a lot of the difficulty in working with whole slide images. But I also try to make it user-friendly, as there's not much point in creating the algorithms if no one can use them... I write some more about the technical side [on my blog](https://petebankhead.github.io) and as @Svidro says there are more posts on the applications [on the Google Group](; https://groups.google.com/forum/#!forum/qupath-user).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414438828:2152,user-friendly,user-friendly,2152,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414438828,1,['user-friendly'],['user-friendly']
Usability,"e caller, but has the advantage of allowing the same reader to be reused for different images / series. This might have some small improvements in performance (especially if initializing a reader is slow), but could be brittle and easy to get wrong. > * The `T getImage(int series);` function should be removed, and the `T getImage(TileRequest tileRequest, int[] channels, boolean isRGB, ColorModel colorModel, int series)` function should be used instead. Ideally yes. As the `HnE_3_1x1component_data.tif` example, shows, we don't know what kind of image will be returned by `getImage(int series)`, and so having a separate API that assumes a single-resolution, non-pyramidal, 2D image seems to add (rather than reduce) complexity. > However I didn't understand where the `OMEPixelParser` class would be in all of this. As seen with the `HnE_3_1x1component_data.tif` example, we don't know for sure what. I think we should go back to thinking about the *ideal* design here, based upon what needs to be reusable - and also what are the simplest and safest changes that can be made before the v0.5.0 release. My understanding of the original requirements is. 1. **Essential** The OMERO `Gateway` returns byte arrays in a format very similar to Bio-Formats, and the logic convert these into a `BufferedImage` (with suitable `ColorModel` etc.) is complex. This should be extracted from `BioFormatsImageServer` for reuse.; 2. **Nice to have** The `BioFormatsImageServer` also has a reader pool concept, which *might* be beneficial for the OMERO image server as well.; ; Achieving 1. requires a class to do the parsing, but doesn't necessarily require reader wrappers and reader pools at all. These seem to be where the main dangers lie, because Bio-Formats is complex to use in a multithreaded context. On the other hand, the parsing doesn't need to know anything about an `IFormatReader` - it just needs the minimal, immutable info required to convert bytes-to-BufferedImage. If you can extract the byte",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547:3395,simpl,simplest,3395,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1714232547,1,['simpl'],['simplest']
Usability,"e current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. if (server.willParallelize()); print 'For this to work, you will need to turn off parallelization in the QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byte[] buf, int row, int col) throws FormatException, IOException {; ifd.putIFDValue(IFD.PHOTOMETRIC_INTERPRETATION, PhotoInterp.RGB.code); return super.getTile(ifd, buf, row, col",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:2187,clear,clearCacheForServer,2187,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,2,['clear'],['clearCacheForServer']
Usability,"e, and wrote detailed instructions for setting it up with IntelliJ to script with auto-completion & access to the full source code (and internal javadocs) [here](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ). At this time, all continued work and support is entirely unfunded and unpaid. I'm also not a professional programmer (nor a biologist). As described in the [Getting help](https://github.com/qupath/qupath/wiki/Getting-help) section of the Wiki, the [Google Group](https://groups.google.com/forum/#!forum/qupath-users) exists to answer questions and cover any gaps in the documentation. Therefore, please do try to be fair in your expectations :). > Overall, its very sad that there is so limited possibilities for scripting and export of those objects. It kind of destroys all that nice classification features, because it cannot be integrated in practical workflows. I think, the project would profit a lot to improve there asap, because, the core functionality itself is very interesting for people. Segmentation is either too slow, too complex or not precise enough with other tools. I hope the above comments explain why this is the case. The possibilities with Groovy are pretty limitless - sometimes all it takes is to ask. But the software is being used by hundreds of groups across the world for very different applications (if you see the [Citing QuPath](https://github.com/qupath/qupath/wiki/Citing-QuPath) page you will observe that others _do_ manage to use it in 'practical workflows'), and from what you describe you aren't working with whole slide images. Adding the functionality you want to the core software would potentially not benefit anyone else using it... which is why the ability to script things is so essential. I wish the software could do everything already, but it's a process. But for reasons that should become clear in the next few months, it's a pretty exciting time and I hope you'll like what is to come over the next year or two.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401546472:4042,clear,clear,4042,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401546472,1,['clear'],['clear']
Usability,"elected cores are shown as yellow, rather than dark/light blue, having the ‘Hierarchy’ tab open is useful to show you whether the selected core is missing or not. 3. You could do something similar to the above, but set the ‘missing’ status before cell detection… so you end up without any cells in the cores that shouldn’t be included. This helps avoid generating a lot of badly-classified data that you then need to remember to ignore later. However, it does then require being able to estimate in advance which cores should be classified together. 4. If you want to use a separate classifier for every core, you could try a more drastic approach of exporting every core as a separate image. To do this, first dearray your slide. Then, you can use [Extension &rarr; ImageJ &rarr; ImageJ macro runner](https://github.com/qupath/qupath/wiki/Working-with-ImageJ#running-macros) to export each image. You need a very simple macro, like the one below:; ```; saveAs(""tif"", ""/Users/peteb/Desktop/export/"" + getTitle()); ```; where you’ll need to change the path to be something more suitable for your computer. It takes advantage of the fact that the ‘title’ of the image sent to ImageJ is the same as the TMA core, so using this as the filename can help you identify the core afterwards. > This may give you individual core images that are a bit big... you can change ""tif” to “jpg” to decrease the file size, or you can set the ""Downsample factor” value to 2 to export a lower-resolution image. The advantage of using “tif” is that the micron information is preserved, while if you use “jpg” then this is lost. After doing this export you can then import all your core images into a new project. You’ll almost certainly want to use scripting for batch processing in this case, and there will be another couple of things to do (e.g. apply dearraying to detect a single core in each image, or use *Objects &rarr; Create full image annotation* to give you a region in which to detect cells). ---. Personally,",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/57#issuecomment-288818401:3065,simpl,simple,3065,https://qupath.github.io,https://github.com/qupath/qupath/issues/57#issuecomment-288818401,1,['simpl'],['simple']
Usability,"ell: Circularity"", ""Cytoplasm: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 3 min - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 sum"", ""Nucleus: Channel 2 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 3 mean"", ""Cell: Channel 3 std dev"", ""Cytoplasm: Channel 2 max"", ""Nucleus: Channel 3 min - Smoothed (FWHM 25 µm)"", ""Cytoplasm: Channel 1 min"", ""Nucleus: Channel 4 mean"", ""Nucleus: Channel 1 max"", ""Cell: Channel 3 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 range"", ""Cell: Area - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 4 max"", ""Nucleus: Perimeter"", ""Cytoplasm: Channel 2 mean"", ""Cytoplasm: Channel 4 max"", ""Cytoplasm: Channel 3 mean - Smoothed (FWHM 25 µm)"", ""Cell: Channel 1 max - Smoothed (FWHM 25 µm)"", ""Cell: Area"", ""Nucleus: Max caliper"", ""Cell: Channel 2 std dev - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Area - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 1 sum - Smoothed (FWHM 25 µm)"", ""Cell: Channel 2 max"", ""Nucleus: Channel 3 max - Smoothed (FWHM 25 µm)"", ""Nucleus/Cell area ratio"", ""Cytoplasm: Channel 1 std dev"", ""Cytoplasm: Channel 2 min - Smoothed (FWHM 25 µm)"", ""Cell: Min caliper"", ""Cell: Channel 3 mean - Smoothed (FWHM 25 µm)"", ""Nucleus: Channel 2 range"", ""Nucleus: Channel 2 min - Smoothed (FWHM 25 µm)"");. //create dectection results//; saveDetectionMeasurements('D:IFproject_0_19', ). this resulted in a text file being saved with the core name, then i opened it in excel and deleted all remaining columns until i was left with ""class"", ""cell channel 1 mean""-""cell channel 4 mean""; (I am not actually interested in channel 4, that is my nuclear stain).; i sorted the table by 'class' and separated tumor and stroma cell detections, i counted the number of detections for each class type and and summed the intensities for each channel. i divided the intensity for each channel by the totally number of detections in that class. Just to obtain a simple relative amount of the marker within that tissue type.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/16#issuecomment-391785100:6082,simpl,simple,6082,https://qupath.github.io,https://github.com/qupath/qupath/issues/16#issuecomment-391785100,1,['simpl'],['simple']
Usability,"erably, because the command must also be scriptable and then somehow the units need to incorporated into any script. Additionally, QuPath is moving towards greater generality. It is increasingly used for images where µm is an inappropriate unit, so I'm reluctant to add additional code that assumes µm as the only alternative to pixels. And a properly generic system will take a lot more effort to develop (not helped by the fact that Java has no built-in support for converting units... it's a recurring theme, e.g. [here](https://jcp.org/en/jsr/detail?id=385), but as far as I'm aware there are a multiple implementations and it's not clear which, if any, we should use). This also affects the sparse image server: at the point the dialog is shown, we don't know if the pixel size is available in µm for the regions that will be required to generate the server. Furthermore, the dialog itself is [auto-generated from a `ParameterList`](https://github.com/qupath/qupath/blob/main/qupath-extension-processing/src/main/java/qupath/process/gui/commands/CreateTrainingImageCommand.java#L90), which limits the ability to toggle between units. Added to that, I'm not terribly happy with the generation of 'dynamic' training images generally; the code is really complex (since the images can be quite heterogeneous), and performance can be poor whenever many images need to be accessed to create the final result. Therefore I wonder if creating a new command that defaults to writing the image as a new file would be preferable anyway. I'll leave this open for a while in case there are further comments, but my feeling is that the development-and-maintainence-time-to-benefit ratio isn't favorable enough to work on this in the core QuPath software; there are too many higher priorities, and if I'd rather focus efforts on simplicity, maintainability and generalizability in the code. Anyone else can create a new extension to provide an alternative implementation for any of the commands if they want to.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932:1981,simpl,simplicity,1981,https://qupath.github.io,https://github.com/qupath/qupath/issues/1407#issuecomment-1783782932,1,['simpl'],['simplicity']
Usability,"erience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores need to be selected for the command to work), but in this case there's an alternative:; ```groovy; annotations = getAnnotationObjects().findAll {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeAnnotations(annotations); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```; For me all three of these methods seem to work, at least in my simple example.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:1427,pause,pauses,1427,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,2,"['pause', 'simpl']","['pauses', 'simple']"
Usability,"esenting+1 to +4 can be useful to distinguish populations with both high and low members versus a medium number of spots, but once you want to compare samples by a single number you might be better off with the spot count Mean/Median/Standard deviation, since those are all probably one or two lines of code. Plus I am not sure how well the new version of the H-score would compare to older publications, even if the math was adjusted to a 0-300 scale. I second using the Brightfield (other) when eliminating yellow areas like that for brightfield ISH. Sometimes once you have enough colors, though, you have to apply multiple sets of measurements to the ISH spots (select the subcellular detections, pick your color vectors, Add Intensity Measurements), and then filter them in a script, and update a ""Filtered Red Estimated Num spots"" or something like that. Two color brightfield ISH with red blood cells in the background gets to be a real pain. For a first pass you could try moving the color vectors in Estimate color vectors to something like :; ![image](https://user-images.githubusercontent.com/23145209/36652180-ed8010a8-1a61-11e8-8d09-d639962fd706.png); One vector picks up as much red as possible, and one to get ""the rest"" of what is in your sample. They do not need to be the same as when you did the cell detection. Picking up Groovy isn't bad if you understand programming basics like variables, if/for loops, etc. The main trick (for me) is learning the QuPath specific functions to use, and making use of either Gists, the forums, or IntelliJ to figure out how doable my plans actually are! I mostly just modify other people's scripts. I'm trying to fill out some of what I have learned in my Gists as I go along. On the image, it looks like you are missing quite a few of the smaller spots. If that isn't intentional, I would try turning off all of the check boxes, lowering the min spot size, and make use of the clusters as all of those get combined into the Num spots estimated.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/146#issuecomment-368380554:1597,learn,learning,1597,https://qupath.github.io,https://github.com/qupath/qupath/issues/146#issuecomment-368380554,2,['learn'],"['learned', 'learning']"
Usability,"exported coordinates; * Create an annotation for the ROI; * Add the annotation to the object hierarchy. Most code for specific ROIs is [here](https://github.com/qupath/qupath/tree/master/qupath-core/src/main/java/qupath/lib/roi) - so you could create rectangles, ellipses or lines if required, or just stick with [PolygonROI](https://github.com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/roi/PolygonROI.java) for polygons. The most useful constructor is:; ```groovy; public PolygonROI(float[] x, float[] y, int c, int z, int t); ```; For ```c```, ```z``` and ```t``` (channel, z-slide & time point) you can probably use ```-1```, ```0```, ```0``` by default. . After creating your polygon ROI, then create a [```PathAnnotationObject```](https://github.com/qupath/qupath/blob/master/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java) with the ROI:; ```groovy; public PathAnnotationObject(ROI pathROI); ```. and finally you can add this annotation to the hierarchy simply with; ```groovy; addObject(annotation); ```. I have some memory of Aperio ImageScope having a concept of layers, and also 'negative' regions; I don't know if this would also be in your XML. If so, these may not have exact matches inside QuPath, but there are various tricks you could use if you find they are needed (e.g. combining or subtracting ROIs, adding them to the hierarchy in different ways, setting names, classifications or colors etc.). If you haven't already, I suggest checking out the Wiki for [Writing custom scripts](https://github.com/qupath/qupath/wiki/Writing-custom-scripts) and [Advanced scripting with IntelliJ](https://github.com/qupath/qupath/wiki/Advanced-scripting-with-IntelliJ), which can help with writing the code and accessing the QuPath source. Finally, it may also be useful to know that, if you want to use any other Java libraries to help, then you can drag the required Jar file onto QuPath to copy it into QuPath's extensions directory. Even if the Jar",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/61#issuecomment-290912225:1392,simpl,simply,1392,https://qupath.github.io,https://github.com/qupath/qupath/issues/61#issuecomment-290912225,1,['simpl'],['simply']
Usability,"h-0.1.2/deploy/jars/jinput-2.0.6.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jinput-platform-2.0.6-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jpen-2-150301-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/jutils-1.0.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-classic-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/logback-core-1.1.7.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/opencv-3.1.0-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-linux.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-osx.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/openslide-3.4.1_2-natives-windows.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/reactfx-2.0-M4u1.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/richtextfx-0.6.10.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/slf4j-api-1.7.20.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/undofx-1.2.jar:/oamp/bio/QuPath/0.1.2/qupath-0.1.2/deploy/jars/wellbehavedfx-0.1.1.jar:./ QuPath -image ../9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg -script t6.groovy; 03:18:04.245 [main] [INFO ] QuPath - Launching QuPath with args: -image, ../9624CE91-1DA8-40AE-89AC-41412BE756DB.jpg, -script, t6.groovy",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/216#issuecomment-420540074:3588,undo,undofx-,3588,https://qupath.github.io,https://github.com/qupath/qupath/issues/216#issuecomment-420540074,1,['undo'],['undofx-']
Usability,"hread.java:748). INFO: Selected style: Modena Light. INFO: Performing update check... INFO: Starting QuPath with parameters: []. . I deinstalled the other version but there it did work without any problems. Is there any way to deinstall qupath so that I can try to install it again?. . Best,. Marcel. . . Von: Pete [mailto:notifications@github.com] ; Gesendet: Dienstag, 7. August 2018 03:02; An: qupath/qupath; Cc: 2010mars2010; Author; Betreff: Re: [qupath/qupath] touch gestures: zooms when moving up/down (#188). . I only got one problem: QuPath cannot open any *.svs (scanscope virtual slide) images any more. Do you have a solution for that?. I this running on Windows 10, and are there any errors under View → Show log when you try to open an .svs file? Does it work with the other version of QuPath on the same machine (v0.1.2)?. My guess is that OpenSlide isn't loading for you, but it's the same version as in v0.1.2... so it one works, then I'd expect the other to work as well. If you were running QuPath from an IDE (e.g. IntelliJ, eclipse) then paths would also need to be set for OpenSlide to work, and that would be an explanation. But if instead you follow the step by step instructions <https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide> right to the end, it should result in a QuPath.exe file that work if you double-click it without any further effort. The other option is to install the latest QuPath Bio-Formats extension <https://github.com/qupath/qupath-bioformats-extension> ... but it shouldn't be necessary for standard .svs files. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub <https://github.com/qupath/qupath/issues/188#issuecomment-410954902> , or mute the thread <https://github.com/notifications/unsubscribe-auth/Ans9t66btf2pNKUFzGRoCitGUIq4Cyj0ks5uOTtLgaJpZM4VcquC> . <https://github.com/notifications/beacon/Ans9t8H3MmRIa4B_NLD4ME359kClICBNks5uOTtLgaJpZM4VcquC.gif>",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/188#issuecomment-411621646:2820,guid,guide,2820,https://qupath.github.io,https://github.com/qupath/qupath/issues/188#issuecomment-411621646,1,['guid'],['guide']
Usability,"icrons:"" + HasPixelSizeMicrons). double PixelHeightMicrons; double PixelWidthMicrons; double PixelZSpacingMicrons. if (HasPixelSizeMicrons){; PixelHeightMicrons = server.getPixelHeightMicrons(); print(""PixelHeightMicrons:"" + PixelHeightMicrons); PixelWidthMicrons = server.getPixelWidthMicrons(); print(""PixelWidthMicrons:"" + PixelWidthMicrons); PixelZSpacingMicrons = server.getZSpacingMicrons(); print(""PixelZSpacingMicrons:"" + PixelZSpacingMicrons); }else{; PixelHeightMicrons = 1.0; print(""PixelHeightMicrons:"" + PixelHeightMicrons); PixelWidthMicrons = 1.0; print(""PixelWidthMicrons:"" + PixelWidthMicrons); PixelZSpacingMicrons = 1.0; print(""PixelZSpacingMicrons:"" + PixelZSpacingMicrons); }. String imgpath = server.getPath(); print(imgpath); int dotNich = imgpath.lastIndexOf("".""); int slashNich = imgpath.lastIndexOf(""\\""). // make output folder; String dirOutput = (imgpath[0..dotNich-1] + ""_tif""); print(""dirOutput="" + dirOutput); def subdir = new File(dirOutput); subdir.mkdir(); // clear the folder; subdir.eachFileMatch(~/.*.*/) { file ->; file.delete(); }; ```. The ourput was:. ```; INFO: Height:6338; INFO: Width:4737; INFO: ZSlices:1; INFO: nChannels:3; INFO: nTimepoints:1; INFO: TimeUnit:SECONDS; INFO: Magnification:20; INFO: HasPixelSizeMicrons:true; INFO: PixelHeightMicrons:0.5; INFO: PixelWidthMicrons:0.5; INFO: PixelZSpacingMicrons:NaN; INFO: file:/D:/QMDownload/5/%5Bfailed_handOK%5DLeica_scn/Leica-Fluorescence-1.scn#2; INFO: dirOutput=file:/D:/QMDownload/5/%5Bfailed_handOK%5DLeica_scn/Leica-Fluorescence-1_tif. ERROR: Error at line 99: C:\Program Files\QuPath-0.2.0-m1\app\file:\D:\QMDownload\5\%5Bfailed_handOK%5DLeica_scn\Leica-Fluorescence-1_tif. ERROR: Script error; at org.codehaus.groovy.runtime.ResourceGroovyMethods.checkDir(ResourceGroovyMethods.java:1160); at org.codehaus.groovy.runtime.ResourceGroovyMethods.eachFileMatch(ResourceGroovyMethods.java:1534); at org.codehaus.groovy.runtime.ResourceGroovyMethods.eachFileMatch(ResourceGroovyMethods.java:1565); at",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/280#issuecomment-472886695:2255,clear,clear,2255,https://qupath.github.io,https://github.com/qupath/qupath/issues/280#issuecomment-472886695,1,['clear'],['clear']
Usability,"ing a downsampled image to ImageJ and using blur+thresholding tools there to generate the initial annotation. It worked well as long as the staining/nuclear density was great enough. For the rest, QuPath should be easy as long as you have a multichannel image. What format are you using?; Depending on the sensitivity you need, QuPath automatically includes your red and green channel mean intensities, so as long as you expand the cytoplasm out far enough, you will get a measure of how much stain is within that space. For the kind of staining I see in your image, I would also recommend the _Analyze->Cell analysis->Subcellular detection_ command, as it can generate a much more exact value for the ""amount of stain above a threshold"" within a given cell, without being diluted by empty space. This command will only work, though, if your image has Pixel width and height included in the metadata. Once you have the data you need on a cell to cell basis, it's as simple as creating a classifier, either with a training set and the classifier command, or creating your own, exact value, classifier. The slower way of doing this is creating your own classifier through the menu system, which Pete shows:; https://github.com/qupath/qupath/wiki/Object-classifications; about half way down the page. Using that setup, you can generate positive cells for each channel and a set of dual positive cells. My preferred method is using a script to classify. The following script is a toned down version of one Pete has posted elsewhere, but it generally gets the job done. Plus you can expand it out as much as you want using the code that is currently there. Want to classify based on two features? Add a ""def myNewFeature"" and a new ""double val2"" line inside the for loop. You can make the if statments as convoluted as you have the time or desire for, and it is much easier than changing things through the menu classification system.; ```. import qupath.lib.objects.classes.PathClass; import qupath.lib.o",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/126#issuecomment-351212559:1060,simpl,simple,1060,https://qupath.github.io,https://github.com/qupath/qupath/issues/126#issuecomment-351212559,1,['simpl'],['simple']
Usability,"ing e.g. a `sort_keys.txt` file with a list of the keys that are used. The purpose of `ResourceManager` (for me at least) is that it supports having several named resources, typically implementations of a specific serializable class. So we might have something like this:. ```java; class SortingKeys {; List<String> keys;. List<String> getKeys() {; return Collections.unmodifiableList(keys);; }. }. var sortingManager = project.getResources(""resources/sorting_keys"", SortingKeys.class, ""json"");; var sortKeys = sortingManager.contains(""sortKeys"") ? sortingManager.getResource(""sortKeys).getKeys() : Collections.emtpyList();; ```; but then it is still 'unconventional' to use a `Manager` when we only have a single resource with a fixed name (here, `""sortKeys""`). ---. What not use the alternative approach of extending the `Project` interface to implement [`MetadataStore`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/objects/MetadataStore.java#L37) - or adding `String` metadata support similar to how it already works with [`ProjectImageEntry`](https://github.com/qupath/qupath/blob/df21dcbaab953837d40aabd856d14b79faca6b7b/qupath-core/src/main/java/qupath/lib/projects/ProjectImageEntry.java#L49)?. Then the UI can store keys as a list of strings easily, with any key of its choosing and the result serialized within the project. To me, a `Map<String, String>` feels simpler and more intuitive. The advantages I see of a `Manager` are:; 1. It avoids adding to the `project.qpproj` file size (in case someone attempts to add ridiculously-large strings); 2. The sort order wouldn't be lost if a project is saved in an older version of QuPath. But these are only an issue of the `Map` is serialized directly within `project.qpproj`. We *could* potentially overcome both of these by storing the `Map` in a separate `.json` file anyway within `resources/sorting` - without needing to rely on `Manager` to do so. What do you think?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470:2418,simpl,simpler,2418,https://qupath.github.io,https://github.com/qupath/qupath/pull/1584#issuecomment-2283509470,2,"['intuit', 'simpl']","['intuitive', 'simpler']"
Usability,"ion.getROI(). tw = (int) roi.getBoundsWidth(); th = (int) roi.getBoundsHeight(). if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; //if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500)){; //print result; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");; //IJ.run(imp, ""Median..."", ""radius=5"");; IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; // python code for normalisation and structure convolution; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");; //getHistogram(values, counts, 256); IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");; ; rm = RoiManager;; rm = RoiManager.getInstance(); ; ; if((rm==null) || (rm.getCount()<1)){; print(""No objects found""); }else{; //print rm.getCount(); //RoiManager.roiManager(""count""); //rm.runCommand(imp,""Measure"");; //rm.runCommand(imp,""Update"");; IJ.run(imp, ""Send Overlay to QuPath"", ""choose_object_type=Detection include_measurements"");. // Get a suitable file name; //String name = String.format(""%s (d=%.2f, x=%d, y=%d, w=%d, h=%d, z=%d).%s"", serverName, downsample, xi, yi, wi, hi, z, ext); // Create an output file; //File file = new File(dirOutput, name); // Save the image; //IJ.save(imp, file.getAbsolutePath()); // Print progress; //imp.show() ; rm.reset() ; ; }; ; //counter++; imp2 = IJ.getImage();; imp2.close();; }; ; }. ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357429324:1990,clear,clear,1990,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357429324,1,['clear'],['clear']
Usability,"is makes sense, but are there use cases where it would not be appropriate?. I can't think of any myself... however, if you run a command like; ```; selectAnnotations(); ```; then if there is more than 1 annotation available, the one that will become the 'primary' selected annotation is (from the user's perspectively) essentially random. Randomness doesn't feel good in this scenario, but neither does seemingly not having a selected object when you can plainly see that you definitely have selected object**s** (as is currently the case). > Or at least to me, this does not make sense. Not only does it quickly become more complex, but I personally don't believe a larger ROI is any more important than a smaller one. Perhaps it depends on the context. Good! Inasmuch as I don't like the idea much either. Its only benefit really is that it makes the choice non-random. I think sometimes it would 'feel' like the right choice, e.g. imagine if you have one large tissue annotation and two little annotations inside. I think making the large one the primary selection would feel somehow intuitive. But if, on the other hand, you have three annotations of similar size and importance I agree it doesn't make much sense. And it's probably better not to introduce too much predictable-but-dubious behavior, lest *someone* make it a key part of their workflow... So yeah, I think the size-based idea can be discarded. > I am not sure about null, but if having a primary selected object is important, not having one could throw a meaningful error rather than returning null. Hmmm, that sounds like it could work for code internal to QuPath, as long as it always checks both for `getSelectedObject()` and `getSelectedObjects()`. Although if calling either method in a script, the ambiguity and potential for confusion remains. Although then the question resurfaces, is it better to just leave things as they are?. In any case, the proposed change is implemented at https://github.com/qupath/qupath/pull/759",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/758#issuecomment-869217737:1122,intuit,intuitive,1122,https://qupath.github.io,https://github.com/qupath/qupath/issues/758#issuecomment-869217737,1,['intuit'],['intuitive']
Usability,"ith an image when it is first added to a project*. This only happens the first time the data file is saved.; * The `ImageServerMetadata` is updated as soon as an image is opened in a project to ensure that the name specified in the project matches that in the server metadata. This triggers the server to be loaded if; * The `ImageServerMetadata` isn't available, or; * The `ImageServerMetadata` is available, but contains the wrong name (e.g. the name was changed in a project, but then the data file wasn't saved afterwards); * *Run for project* will always force the `ImageServer` to be loaded, because it will always save the data - and this act of saving requires the `ImageServer`. So you can only get advantages if you avoid *Run for project*, e.g. by using *Run for project (without save)* instead.; * We can't rely on not saving if there have been no changes, because the script editor now automatically fires a hierarchy change after completion. This means QuPath *always* thinks that the script may have changed the `ImageData`, so `ImageData.isChanged()` returns true. We didn't used to do this, but then we had to keep telling users to add `fireHierarchyUpdate()` at the end of many otherwise simple-looking scripts, and that was a pain for everyone. This basically means that lazy-loading only works if the data for an image has been saved at least once, and the user hasn't messed around too much with image names within their project. The 'easy' way to trigger an image to be saved once is to do a 'Run for project' script - even if the script doesn't do anything. This should be enough to prompt the `ImageServerMetadata` to become embedded within the project. Although it should also usually happen in practice anyway, just through working with the images for some kind of annotation or analysis, so the other solution is... just don't worry about it. If this works properly, you should end up with lazy-loading a lot of the time - just not necessarily quite as often as you'd want.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037:1552,simpl,simple-looking,1552,https://qupath.github.io,https://github.com/qupath/qupath/pull/1489#issuecomment-2273821037,1,['simpl'],['simple-looking']
Usability,"ith consolidating the last portion of the code into a parallel stream, but it is not much faster than the original code for one parentROI. In my case, I want to calculate the intersections for multiple ROIs with the tile, so it was easier for me to write the code similar to the snippet below:. ```; //		have to make all these ""final"" temp variables.... probably a better way; 		double finalYMin = yMin;; 		double finalXMin = xMin;; 		boolean finalByColumn = byColumn;; 		Map<Integer, Geometry> finalColumnParents = columnParents;; 		boolean finalByRow = byRow;; 		Map<Integer, Geometry> finalRowParents = rowParents;; 		List<ROI> tileROIs = Collections.synchronizedList(new ArrayList<>());; 		var plane = parentROI.getImagePlane();; 		AtomicInteger nullInterExcepetions = new AtomicInteger(0);; 		IntStream.range(0, nx).parallel().forEach(xi -> {; 			double x = finalXMin + xi * w - overlap;; //			A very hacky way to consolidate the code into 1 loop.; //			Atomic Reference doesn't behave when getting hit by multiple streams setting potentially different values for each stream...; 			Geometry outerGeometryLocal = finalByColumn ? finalColumnParents.getOrDefault(xi, geometry) : geometry;; 			IntStream.range(0, ny).parallel().forEach(yi -> {; 				double y = finalYMin + yi * h - overlap;; 				Geometry geometryLocal = finalByRow ? finalRowParents.getOrDefault(yi, geometry) : outerGeometryLocal;. 				// Create the tile; 				var rect = GeometryTools.createRectangle(x, y, w + overlap * 2, h + overlap * 2);; 				Geometry inter = intersect(rect, geometryLocal);; 				if(inter==null) {; 					nullInterExcepetions.incrementAndGet();; 					return;; 				}; 				ROI roi = GeometryTools.geometryToROI(inter, plane);; 				tileROIs.add(roi);; 			});; 		});. 		if (nullInterExcepetions.get() > 0) {; 			logger.warn(""Tiles lost during tiling: {}"", nullInterExcepetions.get());; 			logger.warn(""You may be able to avoid tiling errors by calling 'Simplify shape' on any complex annotations first."");; 		}; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298:2005,Simpl,Simplify,2005,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043#issuecomment-1219923298,1,['Simpl'],['Simplify']
Usability,"lementing `QuPathExtension`, the `META-INF/services/qupath.lib.gui.extensions.QuPathExtension` part is crucial (see [here](https://github.com/qupath/qupath/wiki/Creating-extensions), or [this](https://docs.oracle.com/javase/tutorial/ext/basics/spi.html#implement-the-service-provider) may also help - since the general idea isn't QuPath-specific). But if you just want to access the contents of the .jar from the script, then this shouldn't be necessary. It sounds like the problem you are seeing happens inside the imported code, because if I import something that doesn't exist then at least the errors are displayed (and sensible), e.g.:; ```groovy; print 'hello'. import something.that.does.not.exist; ```; gives me; ```; ERROR: Error: startup failed:; Script18.groovy: 4: unable to resolve class something.that.does.not.exist; @ line 4, column 1.; import something.that.does.not.exist; ^. 1 error; ```. When that happens, QuPath doesn't handle such exceptions very well and I've also seen the multiple-logging problem occasionally when things go badly wrong. A recent fix I made on my fork should help address this: https://github.com/petebankhead/qupath/commit/c3f8fd49f8c14dbf7956490d2fa4f79d8e11b057. Finally, there are different ways to integrate Groovy into a Java application: http://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html; Currently, QuPath goes down the _JSR 223 javax.script API_ route to give (potentially at least) support for different scripting languages. I'm tentatively considering a switch to use _GroovyShell_ instead, which looks like it makes it easier to access other classes. I haven't yet explored the implications, but I think that Option 1) having really good Groovy support (only) would be more worthwhile than Option 2) trying to support multiple languages/syntaxes (but none of them quite as well). If you've any thoughts on that please let me know, I'd be interested in other opinions before getting too embroiled in making the changes.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/253#issuecomment-450918869:1867,guid,guide-integrating,1867,https://qupath.github.io,https://github.com/qupath/qupath/issues/253#issuecomment-450918869,1,['guid'],['guide-integrating']
Usability,"let@ciml.univ-mrs.fr>; Author <author@noreply.github.com>; Objet : Re: [qupath/qupath] resolution very bad with mrxs format (#187). The contents of TIFF images can be quite variable, some compatible and some not. QuPath doesn't handle the file formats itself, but rather uses OpenSlide, Bio-Formats or ImageJ. Because all three libraries 'think' they can handle TIFF files, and a decision is made based on a basic parsing of the metadata, I'm not sure which one will actually be trying (and failing) in your case. If you have the Bio-Formats extension installed, then you can customize whether or not it is used (or ignored) preferentially using the preferences described at the bottom of this page: https://github.com/qupath/qupath-bioformats-extension. By either always using Bio-Formats or never using Bio-Formats for .tif, you might have more success in reading this specific TIFF in QuPath. Regarding 'a way to calculate the intensity for fluorescence above a threshold' do you want the mean fluorescence intensity, or something else? I would expect that the mean is quite dependent on the threshold value chosen. In any case, there's currently no built-in command to get exactly this in QuPath directly, and you may need to rely on ImageJ. Four ways you might approach this are:. * Using Send region to ImageJ interactively; * Via an ImageJ macro run through QuPath; * Using a Groovy script, somewhat like this one<https://petebankhead.github.io/qupath/scripting/2018/03/08/script-imagej-to-qupath.html>; * Using a script, macro or Simple tissue detection to generate the QuPath annotation first, then within QuPath calling Analyze → Calculate features → Add intensity features (experimental). —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/187#issuecomment-407034348>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AnjxC6_wpAcAAwaZNs36171_gwZkNzouks5uJburgaJpZM4VYHCt>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/187#issuecomment-407035378:1799,Simpl,Simple,1799,https://qupath.github.io,https://github.com/qupath/qupath/issues/187#issuecomment-407035378,1,['Simpl'],['Simple']
Usability,"libvips in QuPath: I'd be very flattered, of course! The difficulty might be in how to integrate it. The simplest way would be to bundle the binary and just shell out to it. As you say, things like deepzoom and TIFF pyramid build might benefit, but of course you'd need a test case and some benchmarks to try to quantify any possible improvement. There are Java bindings for libvips, but I've not been involved with them and I don't how complete they are, or if they are tough enough for a demanding program like QuPath. That would need a chunk of work. I did pyvips and it should be complete and reliable. Do you use much Python inside QuPath? That might be the simplest way to experiment with more integration, such as using openslide via libvips.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/627#issuecomment-715899157:105,simpl,simplest,105,https://qupath.github.io,https://github.com/qupath/qupath/issues/627#issuecomment-715899157,2,['simpl'],['simplest']
Usability,"ll trigger a lot of costly checks and events. Calling `addObjects` and passing a list should do much better. So the loop above could become; ```groovy; def pathObjects = []; for (i = 0; i <num_rois; i++) {; // The rest of the stuff, as above; pathObjects << new PathDetectionObject(roi); }; addObjects(pathObjects); ```; If this still doesn't perform well enough, and you don't mind deleting anything that might already exist on the hierarchy, using the following instead of `addObjects()` should perform better still:; ```groovy; clearAllObjects(); getCurrentHierarchy().getRootObject().addPathObjects(pathObjects); fireHierarchyUpdate(); ```. Anyhow, the reason I think that it should work one way or another is that you can generate similar numbers of vertices running the cell detection in QuPath itself. In that case, various tricks are used to help, e.g.; * Contours are smoothed after detection, and then simplified to reduce the numbers of vertices that need to be drawn; * Image tiles representing the objects are drawn on demand and cached - similar to having a pyramidal image, but one where the tiles are quickly created only when needed; * When viewing the image at a sufficiently low resolution, QuPath will check if a detection is well represented by a single pixel or rectangle and just draw that instead (to avoid the effort of handling all the vertices). You could do the polygon simplification on the OpenCV side, perhaps with `approxPolyDP`, or else on the QuPath side after already generating the polygon, using [`ShapeSimplifier.simplifyPolygon(PolygonROI polygon, final double altitudeThreshold)`](https://github.com/qupath/qupath/blob/v0.1.2/qupath-core/src/main/java/qupath/lib/roi/experimental/ShapeSimplifier.java#L145). Despite all that, I haven't tried doing this exact conversion before and my guess is that you might have a problem with having really really huge text files. If that's the case then it could be the bottleneck... but that can be solved too if necessary.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/81#issuecomment-357045269:1424,simpl,simplified,1424,https://qupath.github.io,https://github.com/qupath/qupath/issues/81#issuecomment-357045269,3,['simpl'],"['simplification', 'simplified', 'simplifyPolygon']"
Usability,"lor transforms separate from the GUI in order to support stain separation in the pixel classifier and thresholder.... which was needed [to make the sluggish and limited 'Positive pixel counter' unnecessary](https://qupath.readthedocs.io/en/latest/docs/tutorials/measuring_areas.html)... which was needed for my sanity so I'd have to stop answering questions about such a poorly-implemented command (that I had originally implemented). Doing this involved writing a completely separate way of representing the transforms than the one used by `ImageDisplay`. Eventually I think this kind of color transform approach should completely replace the (currently GUI-only) color transforms for better consistency and more maintainable code. More generally, I need to be thinking broadly about existing users as well as how the software will need to look a year from now, or two years from now, to meet a host of new applications. And I need to think about how much of those years will go into maintaining existing things where it is *already* clear they are not using the right approach. Often, there are lots of considerations that I haven't articulated anywhere (there just isn't time), but which are impacted by the choices. For example: finding a better approach to handle brightness/contrast perhaps could/should also support serializing the image histograms (since `ImageDisplay` uses them). Storing these histograms would make opening images a great deal faster as well. But then, having histograms separated from the GUI (and JavaFX) would also make intensity distribution information instantly available in general. This might open up new and faster processing and analysis options - including the use of automated thresholds based on such histograms. If something is not public, it can be freely changed without breaking other extensions (and also well-behaved scripts). If it is public, other extensions and scripts that use it will definitely break. Each breaking change costs a) user annoyance, ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/26#issuecomment-632668731:3216,clear,clear,3216,https://qupath.github.io,https://github.com/qupath/qupath/issues/26#issuecomment-632668731,1,['clear'],['clear']
Usability,"ly does for performance).; * The low resolution 'overview' image seems to be corrupt. It is somehow interpreted by Bio-Formats as a single-channel non-pyramidal image yet throws an error when one tries to open it directly. However the image itself must be ok, as it looks fine in the Zeiss software. If this image can be shared with the Bio-Formats team, they may be able to address these issues. Finally, one of the delays to m3 is I've been doing the groundwork to make image servers smarter. The relevance here is that it means that an image server is able to dynamically crop and/or reposition parts of an image to generate 'pseudo' whole slide images in QuPath, which might be composed of different pieces. They can also do extra fancy things like apply color transforms or concatenate channels. It will take some time to make this to become a fully-usable part of the software, but it relates to the problem as follows:; * if your cores are as separate images, QuPath should be able to merge them together to _act_ like they are in the same image; * if you have multiple TMA slides, QuPath could dynamically crop out the cores and assemble pseudo-slides that position the cores however you like. This means, for example, your image might group samples from a patient side by side for easy comparison - even if they were actually spread across multiple slides originally. This has some limitations, e.g. if your cores aren't in a pyramidal format (but rather one 5000x5000 pixel image, for example) then combining these together dynamically won't end well. To get any kind of usable performance, it will be necessary to convert the files to make them pyramidal. I hope that makes some kind of sense, describing what's possible now, what problematic, and what's coming... > **Important PS.** There's currently a post advertised to join me at work on QuPath [here](https://www.vacancies.ed.ac.uk/pls/corehrrecruit/erq_jobspec_version_4.jobspec?p_id=048500). With more than me working on it, things ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/337#issuecomment-509982536:2458,usab,usable,2458,https://qupath.github.io,https://github.com/qupath/qupath/issues/337#issuecomment-509982536,1,['usab'],['usable']
Usability,"m/qupath/qupath/blob/61a382e1e345e671b3fde32da08e03f08f4f7bcf/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/AbstractPathDraggingROITool.java#L100)); * This sanity check isn't applied with the *Subtract selected annotations* command... so the 'empty' ROI does not result in the object being automatically removed; * Sometimes the sanity check can be triggered later... but it entirely clear when and why. I've flagged this as a bug, since something here is definitely not right and should be fixed. I do think that there is a broader issue with the usefulness of the commands for combining annotations; these can and should behave more predictably. It may not be helped by the fact that for a long time (before release) QuPath didn't support multiple objects being selected simultaneously, and much of the original code was written back in those days; as you can imagine, this was quite limiting. You're completely right about support for subtracting multiple annotations being tricky from a how-to-present-this-to-the-user point of view. I will give this some more thought. My preference would be to replace the existing commands to combine annotations with entirely new ones that have more clearly defined purposes and limitations. In the meantime, since you're already coding, it might be helpful to create your own script/extension to handle your specific needs. To do this, I'd suggest looking into [PathROIToolsAwt.java](https://github.com/qupath/qupath/blob/a3e9246640f9819701d57c513bb21a0546cff130/qupath-core-awt/src/main/java/qupath/lib/roi/PathROIToolsAwt.java) - specifically ```getArea(ROI roi)``` and ```getShapeROI(...)```. The first of these can convert a QuPath ROI into a [```java.awt.geom.Area```](https://docs.oracle.com/javase/8/docs/api/java/awt/geom/Area.html). An ```Area``` has methods to add/subtract/intersect with other ```Area``` objects. Then you can use ```getShapeROI(...)``` to convert the result back into a QuPath ROI and create a new annotation if needed.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/78#issuecomment-302926092:2139,clear,clearly,2139,https://qupath.github.io,https://github.com/qupath/qupath/issues/78#issuecomment-302926092,1,['clear'],['clearly']
Usability,"maybe the openslide-winbuild cross compiling script can be used ..... Am Mo., 18. Jan. 2021 um 10:19 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> As I understand it, MSYS2 is for; > building software on Windows. It might be handy in the future, but it won't; > solve the biggest problem that we need to somehow be able to create; > portable builds on all platforms. Currently, Windows is the least; > problematic because 'official' builds exist; Mac and Linux rely on package; > managers.; >; > Simply rebuilding from source on Mac/Linux isn't sufficient to solve the; > problem either, because of the numerous sub-dependencies that must be; > built, and also the platform-specific way in which these are subsequently; > loaded on different platforms. I can specify exactly which OpenSlide shared; > library to load, but then this results in the sub-dependencies also being; > loaded (e.g. pixman, cairo, libtiff...) and it's here that system-wide; > versions are often picked up. This is very hard (impossible?) to control; > from Java alone because the loading of sub-dependencies doesn't use the; > Java library path.; >; > I can get things to work on Windows/Linux/Mac fine, I just can't get; > things to work in a portable way. Somehow we need a streamlined process of; > building on *all* platforms that packages up all dependencies in a; > self-contained manner.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-762108942>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZG4EB24ORI5S5CJAQYLS2P4L3ANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-762412806:538,Simpl,Simply,538,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-762412806,1,['Simpl'],['Simply']
Usability,"ngle object, but if multiple objects were added then we fired a more general structure change event. I guess this was because, when adding a single object, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`. What it be sufficient to change the problematic condition to this?. ```java; // Try to avoid calling too often; 		if (undoingOrRedoing || event.isChanging() || maxUndoHierarchySize.get() <= 0); 			return;. 		// During processing, we have ParallelTileObjects changing to show which part of the image is being handled; 		// - but we don't want to record these; 		if (!event.getChangedObjects().isEmpty() && event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject)); 			return;; ```. From a quick try, I think that's enough to fix #1487 but you're deeper into the code than me. The `ParallelTileObjects` are the squares that appear during certain commands, like cell detection, to indicate what is happening. I expect that we could *dra",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:1764,Undo,UndoRedoManager,1764,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,1,['Undo'],['UndoRedoManager']
Usability,"ns"": 400.0, ""threshold"": 0.09, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');; Thread.sleep(100). Error log:. INFO: Starting script at Thu Sep 27 09:20:09 CEST 2018; ERROR: QuPath exception; at com.sun.glass.ui.Application.checkEventThread(Application.java:443); at com.sun.glass.ui.View.getNativeView(View.java:449); at com.sun.glass.ui.win.WinAccessible.get_HostRawElementProvider(WinAccessible.java:672); at com.sun.glass.ui.win.WinAccessible.UiaRaiseAutomationEvent(Native Method); at com.sun.glass.ui.win.WinAccessible.sendNotification(WinAccessible.java:287); at javafx.scene.Node.notifyAccessibleAttributeChanged(Node.java:9604); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:2003); at javafx.scene.control.TableView$TableViewSelectionModel.focus(TableView.java:1985); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.clearSelection(TableView.java:2733); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateDefaultSelection(TableView.java:2928); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.updateItemsObserver(TableView.java:2907); at javafx.scene.control.TableView$TableViewArrayListSelectionModel.access$2000(TableView.java:2028); at javafx.scene.control.TableView$TableViewArrayListSelectionModel$1.invalidated(TableView.java:2052); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:349); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146); at javafx.scene.control.TableView.setItems(TableView.java:843); at qupath.lib.gui.panels.PathImage",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/223#issuecomment-424986075:2520,clear,clearSelection,2520,https://qupath.github.io,https://github.com/qupath/qupath/issues/223#issuecomment-424986075,1,['clear'],['clearSelection']
Usability,"ns*... in which case the rectangle can hang around for longer. It still *does* disappear (sometimes...) if I select it, then start drawing a new annotation - but not entirely consistently. What I think is happening is this:; * Whenever a ROI is effectively removed (either with the brush tool or subtraction), it results in a rectangle at location (0, 0) with zero width and zero height - this is nevertheless still drawn on screen; * When removing with the brush tool, a sanity check is applied to see if the resulting ROI has no area - and if so, the object is removed (e.g. [see here](https://github.com/qupath/qupath/blob/61a382e1e345e671b3fde32da08e03f08f4f7bcf/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/tools/AbstractPathDraggingROITool.java#L100)); * This sanity check isn't applied with the *Subtract selected annotations* command... so the 'empty' ROI does not result in the object being automatically removed; * Sometimes the sanity check can be triggered later... but it entirely clear when and why. I've flagged this as a bug, since something here is definitely not right and should be fixed. I do think that there is a broader issue with the usefulness of the commands for combining annotations; these can and should behave more predictably. It may not be helped by the fact that for a long time (before release) QuPath didn't support multiple objects being selected simultaneously, and much of the original code was written back in those days; as you can imagine, this was quite limiting. You're completely right about support for subtracting multiple annotations being tricky from a how-to-present-this-to-the-user point of view. I will give this some more thought. My preference would be to replace the existing commands to combine annotations with entirely new ones that have more clearly defined purposes and limitations. In the meantime, since you're already coding, it might be helpful to create your own script/extension to handle your specific needs. To do this, I'd sug",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/78#issuecomment-302926092:1332,clear,clear,1332,https://qupath.github.io,https://github.com/qupath/qupath/issues/78#issuecomment-302926092,1,['clear'],['clear']
Usability,"nsion OpenCV extensions (4 ms); INFO: Loaded extension Rich script editor extension (562 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; WARN: No changelog found - will not check for updates; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: deneme-project; WARN: Openslide: Property 'openslide.mpp-x' not available, will return default value NaN; WARN: Openslide: Property 'openslide.mpp-y' not available, will return default value NaN; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; INFO: Image data set to ImageData: Not set, B-11285-15_2.tif; ERROR: QuPath exception: missing initial moveto in path definition; at java.desktop/java.awt.geom.Path2D$Float.needRoom(Unknown Source); at java.desktop/java.awt.geom.Path2D.closePath(Unknown Source); at qupath.lib.roi.ShapeSimplifier.simplifyPath(ShapeSimplifier.java:310); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper$ShapeProvider.simplifyByDownsample(PathHierarchyPaintingHelper.java:542); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper$ShapeProvider.getShape(PathHierarchyPaintingHelper.java:584); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintROI(PathHierarchyPaintingHelper.java:434); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintObject(PathHierarchyPaintingHelper.java:400); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintSpecifiedObjects(PathHierarchyPaintingHelper.java:160); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:231); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1761); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:420); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:257); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:508); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:428); ...",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376#issuecomment-554873027:2074,simpl,simplifyByDownsample,2074,https://qupath.github.io,https://github.com/qupath/qupath/issues/376#issuecomment-554873027,1,['simpl'],['simplifyByDownsample']
Usability,"nsive about merging quickly because it would be quite a significant change, and add complexity when we're trying to reduce it. So it will take some thought and I'd like to understand the problem better. > This last change alone allowed, on my projects, to improve the time when creating an object classifier from ~10/15minutes to ~5seconds. Can you explain why it takes so long? Huge numbers of images? Slow file format, or is it where the images are stored?. > Additionally, allowed to modify `ObjectClassifierCommand` too so that it can read all detections' measurements in the training set without uselessly reading the image files. The [`ObjectClassifier`](https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html) takes an `ImageData` by design because an object classifier *could* require pixel access... and this is very likely to be important in the future. This is because, when I rewrote object classifiers some years ago, I was thinking of future classifiers that will use deep learning models to classify based upon image patches - and not only measurements. That's why there is also a general [`FeatureExtractor`](https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/FeatureExtractor.html) class. This all basically works, we just haven't yet had time to wrap it up for wider use. > You can now pass a `openImage` boolean to `ProjectImageEntry.readImageData()` that, when false, just avoids getting the default image server, but just uses an instance of `ImageServerStub`. While not identical, the current `ProjectImageEntry.readHierarchy()` is intended for when you need objects but not everything else. This already lets you access all measurements etc. without touching the image. You can then create a new `ImageData` with a dummy `ImageServer` if you need to. So an alternative approach might be to try to script creating a classifier without needing to go through the UI, in a way that doesn't involve any big API changes - and wh",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811:1127,learn,learning,1127,https://qupath.github.io,https://github.com/qupath/qupath/pull/1488#issuecomment-2021998811,1,['learn'],['learning']
Usability,"ntHandler.java:699); at com.sun.glass.ui.View.handleDragDrop(View.java:712); at com.sun.glass.ui.View.notifyDragDrop(View.java:1037); WARN: Error opening /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ: Could not open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with ImageJ; WARN: Unable to open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif with OpenSlide: /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif: Not a file that OpenSlide can recognize; ERROR: Unable to build whole slide server - check your classpath for a suitable library (e.g. OpenSlide, BioFormats); 	; ERROR: /Applications/QuPath.app/Contents/Java/QuPathApp.jar:qupath/qupath-core-0.1.2.jar:qupath/qupath-core-awt-0.1.2.jar:qupath/qupath-core-processing-0.1.2.jar:qupath/qupath-core-processing-awt-0.1.2.jar:qupath/qupath-extension-ij-0.1.2.jar:qupath/qupath-extension-input-0.1.2.jar:qupath/qupath-extension-opencv-0.1.2.jar:qupath/qupath-extension-openslide-0.1.2.jar:qupath/qupath-extension-pen-0.1.2.jar:qupath/qupath-extension-script-editor-0.1.2.jar:qupath/qupath-gui-fx-0.1.2.jar:qupath/qupath-processing-ij-0.1.2.jar:qupath/qupath-processing-opencv-0.1.2.jar:jars/commons-math3-3.6.1.jar:jars/controlsfx-8.40.12.jar:jars/flowless-0.4.5.jar:jars/groovy-2.4.7.jar:jars/groovy-jsr223-2.4.7.jar:jars/gson-2.8.0.jar:jars/ij-1.51g.jar:jars/jfxtras-common-8.0-r5.jar:jars/jfxtras-menu-8.0-r5.jar:jars/jinput-2.0.6.jar:jars/jpen-2-150301.jar:jars/jutils-1.0.0.jar:jars/logback-classic-1.1.7.jar:jars/logback-core-1.1.7.jar:jars/opencv-3.1.0.jar:jars/openslide-3.4.1_2.jar:jars/packager.jar:jars/reactfx-2.0-M4u1.jar:jars/richtextfx-0.6.10.jar:jars/slf4j-api-1.7.20.jar:jars/undofx-1.2.jar:jars/wellbehavedfx-0.1.1.jar:QuPathApp.jar; ERROR: Open image: Sorry, I can't open /Users/dzf/camelyon16-grand-challenge/data/TrainingData/Train_Tumor/Tumor_005.tif. Thank you for your help!",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/156#issuecomment-371771791:10895,undo,undofx-,10895,https://qupath.github.io,https://github.com/qupath/qupath/issues/156#issuecomment-371771791,1,['undo'],['undofx-']
Usability,"obably not typical :) Never used CZI images, so I have no idea about the effect of those. Anyway, giving a few things a shot. One thing I already noticed is that when I zip around an image and cap out the available memory that way, I tend to run into detection problems. However, as you say, this isn't a hardware memory limit problem, as I can lower the memory cap down to 2GB on a fairly large image (Annotation area 1.3x10^8 um^2) and have it run successfully, but slowly. If I fill up those 2 GB by looking around the image, though, it failed it's cell detection. Even on a comparatively small image (2.5x10^6 um^2) I ran into problems once the memory was filled. On the other hand, once I bumped the available memory up to 5GB, I stopped running into errors on the smaller image, though it was very difficult to fill the image buffer. On the larger image I could quite easily cap out the image buffer around 5GB and then sometimes ran into errors. Although sometimes the program would simply go over the 5GB limit and everything would be fine. I am afraid I wasn't able to find anything usefully consistent. . Anyway, the error, whenever I ran into it looks familiar:. > ERROR: Error running plugin: java.lang.OutOfMemoryError: Java heap space; at java.util.concurrent.FutureTask.report(FutureTask.java:122); at java.util.concurrent.FutureTask.get(FutureTask.java:192); at qupath.lib.plugins.AbstractPluginRunner.awaitCompletion(AbstractPluginRunner.java:242); at qupath.lib.plugins.AbstractPluginRunner.runTasks(AbstractPluginRunner.java:204); at qupath.lib.plugins.PluginRunnerFX.runTasks(PluginRunnerFX.java:94); at qupath.lib.plugins.AbstractPlugin.runPlugin(AbstractPlugin.java:134); at qupath.lib.plugins.ParameterDialogWrapper$1.run(ParameterDialogWrapper.java:163); at java.lang.Thread.run(Thread.java:745); Caused by Java heap space at java.util.ArrayDeque.allocateElements(ArrayDeque.java:142); at java.util.ArrayDeque.<init>(ArrayDeque.java:198). Edit:; Actually this part might be mo",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/112#issuecomment-343336690:1134,simpl,simply,1134,https://qupath.github.io,https://github.com/qupath/qupath/issues/112#issuecomment-343336690,1,['simpl'],['simply']
Usability,"of settings that were used in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, p",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1164,Simpl,Simple,1164,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"or every location - and shouldn't happen whenever there has been an exception. You're right, I was overusing `Optional`. Now, each time an error occurs, an exception is thrown. I kept `Optional` only when a function is not guaranteed to return a result AND no error occurred during its execution. > ReaderWrapper looks very tied to the 'OME' way of doing things (Bio-Formats and OMERO); I'd expect a general image reader to return something more informative than a byte[][], which can only be interpreted with a lot of other return values and Bio-Formats logic. So it isn't very easy to use in a standalone way.; > ; > That isn't in itself a problem, but if writing a general image reader for use with the OMERO web API or [IIIPImage Server](https://iipimage.sourceforge.io/documentation/server) (for example) I imagine it would be far harder to return a byte[][] than a BufferedImage.; > ; > So I think it should either 1) embrace being Bio-Formats/OMERO-specific, and prioritise simplicity, or 2) incorporate more of the processing logic that converts the byte[][] into a BufferedImage, and prioritise reusability. If the goal is for ReaderWrapper and ReaderPool to be reusable, it needs to be easy to generate and work with their return values. I changed `ReaderWrapper` to be as generic as possible (its read function now returns a `BufferedImage`). However, I wanted a `ReaderWrapper` class common to Bio-Formats and OMERO (because they have a lot of code in common), so I created the `OMEReaderWrapper` class (not sure of the name) that is a child of `ReaderWrapper`, and a parent of `BioFormatsReaderWrapper` and `IceOmeroReaderWrapper`. > ReaderPool then is abstract, but has very few abstract methods. One is to create a ReaderWrapper. This probably isn't helpful outside the class. It could also be handled with composition rather than inheritance by passing a Supplier<ReaderWrapper> as an argument to its constructor if really necessary, like when creating a ThreadLocal. If this change is",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979:1424,simpl,simplicity,1424,https://qupath.github.io,https://github.com/qupath/qupath/pull/1287#issuecomment-1709836979,1,['simpl'],['simplicity']
Usability,"ost and my failing memory, I suspect that the idea was that the 'object added' event would just handle a single object, but if multiple objects were added then we fired a more general structure change event. I guess this was because, when adding a single object, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`. What it be sufficient to change the problematic condition to this?. ```java; // Try to avoid calling too often; 		if (undoingOrRedoing || event.isChanging() || maxUndoHierarchySize.get() <= 0); 			return;. 		// During processing, we have ParallelTileObjects changing to show which part of the image is being handled; 		// - but we don't want to record these; 		if (!event.getChangedObjects().isEmpty() && event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject)); 			return;; ```. From a quick try, I think that's enough to fix #1487 but you're deeper into the code than me. The `ParallelTileObjects` are the squares that appe",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:1698,Undo,UndoRedoManager,1698,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,1,['Undo'],['UndoRedoManager']
Usability,"otation(PathObject pathObject) {; def roiName = pathObject.getROI()?.getRoiName(); pathObject.setPathClass(PathClass.getInstance(roiName)); }; ```. I think it makes sense for such classifiers to be added to a single *Object classification* submenu, rather than split between *Detection* and *Annotation* (also, there might one day be a need to classify *TMA cores*, which don't fit into either category). Also, the top of the *Train object classifier* dialog makes it possible to select different types of objects to classify. <img width=""418"" alt=""Train object classifier"" src=""https://github.com/qupath/qupath/assets/4690904/d6977ca8-a018-4d33-bd7c-f31eed611749"">. Admittedly, these are all detections or subtypes of detection... but that's because I couldn't think of a good workflow to use them for annotations (since you're using annotations to train the classifier, how should QuPath distinguish between which annotations are for training and which should be classified...?). The internal representation of the object classifier is capable of specifying the type of object it should be applied to, even though we have no easy way to interactively create annotation classifiers through the user interface, or examples where that is actually used. Perhaps more usefully, we plan to enable the use of deep learning models for classification - and these don't have the complication of needing annotations for training. Much of the code to enable this has already been written, but we need to figure out how best to link it up to the user interface and provide meaningful models for the feature to be useful. When it *is* useful, I expect it to become *very* useful. QuPath's best features probably don't exist yet, but we try to design the software thinking far enough into the future so that they can be added... For that reason, if the fact that most commands under *Object classification* currently only work for detections is confusing, I think we need some other way to resolve that confusion.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110:2913,learn,learning,2913,https://qupath.github.io,https://github.com/qupath/qupath/issues/1501#issuecomment-2075386110,1,['learn'],['learning']
Usability,"possibility they were saved with a different version of the software, or someone else might have changed some obscure setting?. Your description and the screenshots are very helpful to rule out some of my other guesses; because the images are both described as 14-bit and read using Bio-Formats, I don't see any clear reason why there would be a problem - although I see there is a small difference in the width & height, which makes me wonder if there was at least some small change at the time of acquisition... but I don't know what. I'd suggest trying to open the images in [Fiji](http://fiji.sc) and checking under *Image &rarr; Properties...* to see if the pixel size information is there. If it is, the first thing I'd do is make sure you have the latest [QuPath Bio-Formats extension & bioformats_package.jar](https://github.com/qupath/qupath-bioformats-extension), and try again. Alternatively, you can manually enter the pixel width & height values in Fiji (if you know them - is it safe to assume they are the same as in your other images?). Then you can save the image with pixel sizes as a TIFF in Fiji, and read the TIFF rather than ND2 file into QuPath. However, I should warn you: if you use the save-as-TIFF-in-Fiji trick, then ImageJ will be used to read the image and there is an unfortunate bug in QuPath v0.1.2 that means for this application you should probably also change the preferences to only use 1 parallel thread (described [here](https://github.com/qupath/qupath/issues/74)). Alternatively, you could try the latest-not-quite-released QuPath changes described [here](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html), which should include a fix for the bug. (In case that sounds alarming: the bug shouldn't cause any trouble if you see *Server type: Bio-Formats* or *Server type: OpenSlide*, only *Server type: ImageJ* is affected - and even then not always. It should be fairly clear if it causes trouble, in that spots appear where they shouldn't.)",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/163#issuecomment-379493712:2066,clear,clear,2066,https://qupath.github.io,https://github.com/qupath/qupath/issues/163#issuecomment-379493712,1,['clear'],['clear']
Usability,"ps://github.com/zeiss-microscopy/libCZI. I think Option 1 has additional advantages and is probably needed in the longer term.; Option 3 involves more work to support one particular format than I'm able to take on myself, but perhaps someone would like to try. It _might_ give improvements over relying only on Bio-Formats... but it would _definitely_ be a lot more work to develop and support cross-platform. Option 2 (merging) is 'easiest' if that involves writing a new pyramidal OME-TIFF file... but that rather increases the amount of data involved, and requires knowing the coordinates where each core comes from. A practical issue here is that I have seen a .czi TMA (I believe yours, @arnmayer :) ) that Bio-Formats has several problems with. This thwarts any plan we might develop to resolve this independently of Zeiss or the Bio-Formats team. Specifically:; * Sometimes the co-ordinates defining the TMA core locations accessed through Bio-Formats appears simply to be wrong, so it's not possible to figure out where they _should_ be; * The size of the Bio-Formats reader is astronomically large (> 1 GB), which makes opening files slow. You can see this in the size of the .bfmemo files if they are created. This also means that it's not possible to create multiple readers (which QuPath normally does for performance).; * The low resolution 'overview' image seems to be corrupt. It is somehow interpreted by Bio-Formats as a single-channel non-pyramidal image yet throws an error when one tries to open it directly. However the image itself must be ok, as it looks fine in the Zeiss software. If this image can be shared with the Bio-Formats team, they may be able to address these issues. Finally, one of the delays to m3 is I've been doing the groundwork to make image servers smarter. The relevance here is that it means that an image server is able to dynamically crop and/or reposition parts of an image to generate 'pseudo' whole slide images in QuPath, which might be composed of d",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/337#issuecomment-509982536:1264,simpl,simply,1264,https://qupath.github.io,https://github.com/qupath/qupath/issues/337#issuecomment-509982536,1,['simpl'],['simply']
Usability,"r an existing installation (through _Edit &rarr; Preferences..._), and thereby do more complex ImageJ analysis - including the use of additional plugins - all launched and managed from within QuPath via Groovy. However, I haven't got that to work with _all_ plugins and functionality of Fiji because of conflicts in dependencies... or perhaps just because I don't know enough about the ImageJ2 API. That might well be solvable if it turns out to be necessary, but it hasn't been something I've needed myself or anyone else has asked for yet (that I recall). Direct export of ROIs only wouldn't help most QuPath applications, for the reasons outlined above (i.e. most are for whole slide images, in which case you'll need to scale the image as well - and then exporting the pixels as well as the ROIs is necessary, which _is_ possible). But I appreciate that it makes sense in your case. Just to be clear: you should be able to run the script unchanged across your entire folder if you just add all the images to a QuPath project, and choose _Run &rarr; Run for project (without save)_ from the QuPath script editor. Because that script doesn't make changes, there's no point saving the (same) results after running the script to update the `.qpdata` files... although it also shouldn't matter if you do. Regarding documentation, at the time of the QuPath's release I was in the process of leaving the university where I wrote it, and lacked the time and resources to document the API and find somewhere to host it; also, I didn't consider it stable enough at that point anyway, and planned to continue working on it. For reasons largely beyond my control this wasn't possible, unfortunately, but you can access a lot of the existing Javadocs through setting up scripting with IntelliJ (and indeed a similar process works to set up IntelliJ for Groovy scripting with Fiji). In a couple of months I will start a new position and be able to manage QuPath as a more active open source project - and be a b",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/182#issuecomment-401622161:1206,clear,clear,1206,https://qupath.github.io,https://github.com/qupath/qupath/issues/182#issuecomment-401622161,1,['clear'],['clear']
Usability,"ransformation` - since a list of `Number` is harder for a user (even if helpful for scripting). Although then I wonder... would a builder become a better way to handle it?. * An important use case is when we may want to transform *all* the objects in a hierarchy *and maintain the hierarchical relationships*. I think this requires a separate code path that recursively transforms all child objects, assigning them to the appropriately-transformed new parent object.; * A similar use case would be wanting to transform all objects recursively, but *without* them already being part of any hierarchy. For example, during import of objects before they are added to a hierarchy that already contains objects (which don't need to be transformed).; * I think perhaps `PathObjectTools.transformObject` should either take a 'doRecursive' parameter or have a separate method for recursively applying the transform - also checking for a null ROI. This would mean it can be applied to the root object of a hierarchy to transform the entire hierarchy easily and intuitively.; ; * I don't think we should give a serialize export option in the menus. We should move away from Java serialization as much as possible, and discourage anyone from use it; we should still support it for import though. Groovy make serialization quite easy if it's required in a script anyway... except if things are circular. Which brings me to... * `exportObjectsAsSerialized` looks like it doesn't actually use the transformed list; it also potentially allows circular references via parents/children, which could be confusing and/or buggy. I don't think we need this method if we are discouraging serialization (although I could be wrong... especially if we find a way to use it internally for convenience). * *If* `importObjectsFromSerialized` is in the public API, I think it should handle things other than lists, e.g. individual objects, arrays of objects, collections. But I'd prefer to expose it in the public API only if its ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:2535,intuit,intuitively,2535,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,1,['intuit'],['intuitively']
Usability,"reHierarchyUpdate(); ```. Closer inspection reveals a few Groovy tricks at work:. * `List.each { }` as a shorter alternative to for loops; * Avoid explicitly calling getters (e.g. `channel.name` rather than `channel.getName()`, `cell.measurements` rather than `cell.getMeasurements()` or - previously in QuPath - `cell.getMeasurementList()`; * Getting from a map using `map[key]` syntax (rather than `map.get(key)`; * Calling a method on a list to get it applied to all elements... so `cells.measurements[measurementName].average()` first extracts all the measurements, then averages them; * Sneakily applying a `setClassifications()` again by accessing it like a property - and using collection concatenation with `=+` to join the old classifications to the new ones; * this works in the opposite direction, with `-=` to remove one or more classifications. The changes have been made without introducing any changes to QuPath's data files, since `PathClass` and `MeasurementList` are still doing the main work, it's just that there are now alternative ways to interact with them. They are designed to map well with Groovy tricks, while still behaving sensibly from Java. There are a few outstanding questions to be resolved, including:; * how much should classification names be validated?; * should duplicate classification names be permitted?. Duplicate names are currently allowed, but can also easily be restricted, e.g. see; ```groovy; // Add the same class multiple times; def p = getSelectedObject(); for (int i = 0; i < 10; i++) {; p.classifications += ['Class 1']; }; println p.classifications. // Calling this enforces uniqueness; p.classifications = p.classifications as Set; println p.classifications. fireHierarchyUpdate(); ```; which prints; ```; INFO: [Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1, Class 1]; INFO: [Class 1]; ```. **If anyone wants to try the PR, I'd appreciate feedback - or any bugs or things I've failed to think about**",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235:3700,feedback,feedback,3700,https://qupath.github.io,https://github.com/qupath/qupath/pull/1094#issuecomment-1289456235,1,['feedback'],['feedback']
Usability,"rialization quite easy if it's required in a script anyway... except if things are circular. Which brings me to... * `exportObjectsAsSerialized` looks like it doesn't actually use the transformed list; it also potentially allows circular references via parents/children, which could be confusing and/or buggy. I don't think we need this method if we are discouraging serialization (although I could be wrong... especially if we find a way to use it internally for convenience). * *If* `importObjectsFromSerialized` is in the public API, I think it should handle things other than lists, e.g. individual objects, arrays of objects, collections. But I'd prefer to expose it in the public API only if its benefits are clear enough. * It looks like `.qpdata` is being used for serialized object lists. We really shouldn't add a new file type with the same extension. Rather, we *can* read objects from an existing `.qpdata` file using [`PathIO.readHierarchy(File)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/io/PathIO.java#L410) - this should work even if the server is unavailable itself. The ability to import from old `.qpdata` files is important, but I'd like to avoid encouraging anyone to write `.qpdata` files other than those handled internally within projects (to make it easier for us to replace the format in the future). * A common use case will be transferring objects between images in the same project. Ideally this would be possible without exporting/importing, but rather simply choosing the project entry for import. Internally, this can use [`ProjectImageEntry.readHierarchy()`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/projects/ProjectImageEntry.java#L210).; * Adding this to the UI is tricky, since navigating long lists of project entries is awkward.... could it be supported by dragging an entry from the project list onto a viewer?",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/666#issuecomment-787868344:4341,simpl,simply,4341,https://qupath.github.io,https://github.com/qupath/qupath/pull/666#issuecomment-787868344,1,['simpl'],['simply']
Usability,"rictive, though I don't know if it would be annoyingly so. This isn't exactly what I meant, but anyway: it's already the case. You can use *View &rarr; Multi-view... &rarr;* to create a grid of viewers, and the toggles apply across all of them. I agree it's sometimes restrictive, but my feeling is that it would cause more trouble if that didn't happen. What I really meant though was that a single viewer could be extracted into its own window, but the main QuPath window would remain as it always was. That's the approach in the PR. The alternative was that viewers are either all in grid mode or all in 'detached' mode (floating windows), but not a combination of both. > Final thought is, if we implement this, we need to consider what should be the advantage of having one QuPath instance with two viewers over having two QuPath instances open each with one viewer, and we should probably aim our design in that direction. Otherwise it could both be a lot of work and even end up with ambiguity in user experience (eg ""if I press this button, which image is affected...? or both...?""). We already have the ambiguity - it's 'resolved' by there being a red boundary around the 'active' window, and it's also the title in the title bar. But we might need to make this much more prominent, and I think the PR currently has some focussing surprises (I guess because bringing the main window into focus can grab it away from the detached viewer that we previously had active). I guess the advantage of two QuPath instances is hinted at by your previous comment: that would free you from having synchronized display settings. But it's pretty hard to get two instances launched on macOS - I can get them via the terminal, but double-clicking the app is stubbornly singleton. The big *disadvantage* of multiple QuPath instances is that there are no measures taken to 'lock' projects, and stop things getting messed up by incompatible changes being made in different instances. But I guess that's another ",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081:2243,user experience,user experience,2243,https://qupath.github.io,https://github.com/qupath/qupath/issues/1317#issuecomment-1708778081,1,['user experience'],['user experience']
Usability,"rithm in particular, but it has the pieces that can be used to create and customize one. _However_... there are a lot of things that I _wouldn't_ try with QuPath's built in commands only, and mitosis detection in H&E is one of them. I'd say the detection task is too difficult and specialized for QuPath's generic cell detection currently. Solving that is a substantial research project in itself (and the subject of some [grand challenges](https://mitos-atypia-14.grand-challenge.org)). That's one of the reasons why QuPath supports scripts and extensions: it's possible to create highly specialist algorithms elsewhere, and either integrate them into QuPath or at least visualize the results through QuPath. Therefore some of the ways in which QuPath can help are:; * for manual counting; * for exporting manual counts as 'ground truth' into a format that can be used to help create a new algorithm, using whatever image processing / machine learning / deep learning libraries and tools you like; * for visualizing the results of an algorithm directly in the context of a whole slide image (using QuPath's objects, classifications & visualization tools to help); * as the platform for running and sharing any algorithm you might create (if it's implemented as a QuPath script or extension). The first of these is pretty laborious, while the last three will take some effort and knowledge on the image analysis side. That's the side I come from... I created QuPath because I needed the tools myself to write new algorithms, and then to share them with pathologists and other researchers. For me, it's an algorithm development platform that takes away a lot of the difficulty in working with whole slide images. But I also try to make it user-friendly, as there's not much point in creating the algorithms if no one can use them... I write some more about the technical side [on my blog](https://petebankhead.github.io) and as @Svidro says there are more posts on the applications [on the Google Group",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/205#issuecomment-414438828:1358,learn,learning,1358,https://qupath.github.io,https://github.com/qupath/qupath/issues/205#issuecomment-414438828,2,['learn'],['learning']
Usability,"rms along with *Mean* and *Compute Haralick features* from the bottom (and others if you like). If your square tiles are tiny, set *Region* to be either *Square tiles* or *Circular tiles* and choose a tile diameter depending upon how widely you want QuPath to look around each tile for calculating textures. Press *Run* and then choose *Process all: Detections*.; * Train a classifier as described [in the Wiki](https://github.com/qupath/qupath/wiki/Classifying-objects). Check out [this issue](https://github.com/qupath/qupath/issues/50) if you find the *Brush tool* isn't working for you.; * Optionally run *Analyze &rarr; Region identification &rarr; Tiles & superpixels &rarr; Tile classifications to annotations*.... if you find it helpful. It's always best to save your data before doing this, since all the options have some kind of logic behind them... but it's often not entirely clear which are the options you want on a first go. There is no *Undo*, but if you save before running the command, *File &rarr; Revert* can get you back to where you were. The end result is a rather 'blocky' classification, where the size of the blocks depends upon how large the tiles are that you created. But if you need to downsample your image 8 times to get good enough performance with the Weka plugin, then using tiles that are 8x8 pixels gives you just as good a resolution in the end. Furthermore, with QuPath you can add some other kinds of features, particularly Haralick texture features on color-deconvolved images, which can be a better fit for pathology applications compared to some of the Weka features (which may be better for other applications). And you can do other things in QuPath to help with efficiency, such as create a script to find all pixels with high intensity values (background?) and remove them - thereby allowing you to avoid the memory and computational requirements of storing and classifying them. Therefore while there is some overhead involved in QuPath using objects ra",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/56#issuecomment-288506877:2758,Undo,Undo,2758,https://qupath.github.io,https://github.com/qupath/qupath/issues/56#issuecomment-288506877,1,['Undo'],['Undo']
Usability,"ro lets me experience the trouble described in the original question (albeit not an error message). I'm not entirely sure where it is going wrong, but I assume that it is somehow connected to multithreading, and things not being done in quite the right order. I suspect it's also connected to the selection changing while other processing is happening. This will be triggering some activity in the thread responsible for the user interface. Here are three ways to try to work around this - hopefully at least one of them will work. ### Method 1 - Do everything in the application thread; As the *very* first line of your script (with no spaces above it), add; ```; guiscript=true; ```; to force the script to run in the same thread as the user interface. This can often help work around troublesome multithreading issues for scripts that run very quickly. It's probably not a good idea here because the processing is likely to take a while, and the GUI will be totally blocked. ### Method 2 - Pause briefly; Adding `Thread.sleep(time)` pauses the script for a specified number of milliseconds, which can be enough to get things on track.; ```groovy; selectObjects {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeSelectedAnnotations(); Thread.sleep(100); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```. ### Method 3 - Avoid depending on selections; If possible, it's usually good to avoid depending on objects being selected if you don't have to. Sometimes it's necessary (e.g. if you're running a command like cell detection, the annotations/TMA cores need to be selected for the command to work), but in this case there's an alternative:; ```groovy; annotations = getAnnotationObjects().findAll {it.isAnnotation() && it.getROI().getROIType() == 'Rectangle'}; mergeAnnotations(annotations); selectObjects {it.isAnnotation() && it.getPathClass() == getPathClass(""Tumor"")}; ```; For me all three of these methods seem to work, at least in my s",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/129#issuecomment-354864318:1384,Pause,Pause,1384,https://qupath.github.io,https://github.com/qupath/qupath/issues/129#issuecomment-354864318,1,['Pause'],['Pause']
Usability,"rp; import loci.formats.tiff.TiffParser; import qupath.lib.gui.QuPathGUI; import qupath.lib.images.servers.BioFormatsImageServer; import qupath.lib.scripting.QPEx. // Access the current image; def server = QPEx.getCurrentImageData().getServer() as BioFormatsImageServer. if (server.willParallelize()); print 'For this to work, you will need to turn off parallelization in the QuPath preferences!'. // Create a new reader that intercepts the photometric interpretation, and 'trick' QuPath into using it; def classList = new ClassList<>(IFormatReader.class); classList.addClass(LeicaSCNReaderRGB); def reader2 = new ImageReader(classList); reader2.setFlattenedResolutions(false); def factory = new ServiceFactory(); def service = factory.getInstance(OMEXMLService.class); def meta = service.createOMEXMLMetadata(); reader2.setMetadataStore(meta); reader2.setId(server.filePath); server.manager.mapPrimary.put(server.filePath, BufferedImageReader.makeBufferedImageReader(reader2)). // Clear the tile cache; def viewer = QPEx.getCurrentViewer(); def imageData = viewer.getImageData(); Platform.runLater {; viewer.setImageData(null); viewer.getImageRegionStore().clearCacheForServer(server); viewer.setImageData(imageData); }. // See https://github.com/openmicroscopy/bioformats/blob/master/components/formats-bsd/src/loci/formats/in/MinimalTiffReader.java; class LeicaSCNReaderRGB extends LeicaSCNReader {. /** Reinitialize the underlying TiffParser. */; protected void initTiffParser() {; QuPathGUI.getInstance().logger.info('INITIALIZING TIFF PARSER'); if (this.in == null) {; try {; this.in = new RandomAccessInputStream(getCurrentFile(), 16);; }; catch (IOException e) {; LOGGER.error(""Could not initialize stream"", e);; }; }; tiffParser = new TiffParserRGB(this.in);; tiffParser.setDoCaching(false);; tiffParser.setUse64BitOffsets(use64Bit);; }. }. class TiffParserRGB extends TiffParser {. public TiffParserRGB(RandomAccessInputStream stream) {; super(stream); }. public byte[] getTile(IFD ifd, byt",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/141#issuecomment-358985847:2011,Clear,Clear,2011,https://qupath.github.io,https://github.com/qupath/qupath/issues/141#issuecomment-358985847,2,['Clear'],['Clear']
Usability,"s only to provide a way to assign classes to annotations manually. It's very possible to have objects with other classes in the image; this happens often (e.g. with 'Positive cell detection' you can get cells with 'Positive' and 'Negative' classes - but these don't need to appear in the class list for it to work). ### The uniqueness of classes; If you create a new class in the class list and it has _exactly_ the same name as a previous one, then it should refer to _exactly_ the same class. If the class doesn't exist, it will be created. But if it exists anywhere in the image, then the existing class with that name will be used. This is important for how QuPath does things. Unfortunately, the rule is _very_ strict. Any difference in class name (e.g. different capitalization, spaces) results in a different class. So it is necessary to be very careful when doing this. > I _think_ the color for the class is random. I may have changed that for the next version to make the color pseudo-random, but consistently the same if the same name is typed (making it easier to identify discrepancies). I'll have to check the code to make sure if I made this change or only thought about it... ### What to do in the short term; There are three main options in the short term:; * Add the classes you need manually (and looking out for any problems/tiny discrepancies) if/when they are lost; * Create a script to set the contents of the class list more easily (this is possible, but needs caution as well... if the class list is corrupt in v0.1.2, QuPath won't start); * [Follow the instructions to build my test version](https://petebankhead.github.io/qupath/2018/03/19/qupath-updates.html#step-by-step-guide) that already has some of these changes available, ahead of them being actually packed up into a full QuPath release. If a script to set the class list would save you a lot of time, let me know I can help create one; otherwise, I hope one of the other two options and this explanation can help.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/243#issuecomment-437784159:2601,guid,guide,2601,https://qupath.github.io,https://github.com/qupath/qupath/issues/243#issuecomment-437784159,1,['guid'],['guide']
Usability,"sed in that example - in particular, note that the default 'Requested pixel size' is large (20) in the first screenshot showing tissue detection, and the boundary is very coarse and inaccurate for the TMA core. In the second screenshot, this value is low (4), and the boundary is much better. The description is:. > For detecting large areas of tissue, e.g. a whole face section, you probably want a large value, e.g. 20 µm. For small regions of tissue, e.g. a TMA core, you probably want a smaller value, e.g. 2-5 µm. These values depend upon the pixel size information being stored in the image; if you are working with an image where that information is missing (e.g. a JPEG, a PNG) or incorrect then that would cause trouble. Apart from that, if you could provide any screenshots showing your results then this would help identify what is wrong. If the background is particularly dark and yellow then it *could* be the problem, because *Simple tissue detection* works by converting your image to grayscale first, and then applies a threshold to find darker or lighter pixels (this is why it's 'simple'... it doesn't use color information in any smarter way than that). If the background is dark enough, maybe this grayscale image doesn't have good enough contrast for the detection to work. But usually this isn't the case. If that does turn out that something more sophisticated is needed, then there would be other ways to detect the tissue that can be adapted to your particular images (e.g. with an ImageJ macro). But since these would require considerably more effort, it would be worth it to try to find *Simple tissue detection* settings that work well enough first. Finally, depending upon what you want to do you might not need to detect the tissue at all - I often don't. For example, you could simply detect cells within the TMA core directly. This can give you some measurements (e.g. percentages of positive cells, H-scores), but not others (e.g. tissue area, positive cell density).",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/53#issuecomment-282469327:1838,Simpl,Simple,1838,https://qupath.github.io,https://github.com/qupath/qupath/issues/53#issuecomment-282469327,2,"['Simpl', 'simpl']","['Simple', 'simply']"
Usability,"sion (90 ms); INFO: Loaded extension JPen extension (34 ms); INFO: Loaded extension OpenCV extensions (4 ms); INFO: Loaded extension Rich script editor extension (562 ms); INFO: OpenSlide version 3.4.1; INFO: Selected style: null; INFO: Performing update check...; WARN: No changelog found - will not check for updates; INFO: Starting QuPath with parameters: []; INFO: Project set to Project: deneme-project; WARN: Openslide: Property 'openslide.mpp-x' not available, will return default value NaN; WARN: Openslide: Property 'openslide.mpp-y' not available, will return default value NaN; WARN: Openslide: Property 'openslide.objective-power' not available, will return default value NaN; INFO: Image data set to ImageData: Not set, B-11285-15_2.tif; ERROR: QuPath exception: missing initial moveto in path definition; at java.desktop/java.awt.geom.Path2D$Float.needRoom(Unknown Source); at java.desktop/java.awt.geom.Path2D.closePath(Unknown Source); at qupath.lib.roi.ShapeSimplifier.simplifyPath(ShapeSimplifier.java:310); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper$ShapeProvider.simplifyByDownsample(PathHierarchyPaintingHelper.java:542); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper$ShapeProvider.getShape(PathHierarchyPaintingHelper.java:584); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintROI(PathHierarchyPaintingHelper.java:434); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintObject(PathHierarchyPaintingHelper.java:400); at qupath.lib.gui.viewer.PathHierarchyPaintingHelper.paintSpecifiedObjects(PathHierarchyPaintingHelper.java:160); at qupath.lib.gui.viewer.overlays.HierarchyOverlay.paintOverlay(HierarchyOverlay.java:231); at qupath.lib.gui.viewer.QuPathViewer.paintViewer(QuPathViewer.java:1761); at qupath.lib.gui.viewer.QuPathViewer.paintCanvas(QuPathViewer.java:420); at qupath.lib.gui.viewer.QuPathViewerPlus.paintCanvas(QuPathViewerPlus.java:257); at qupath.lib.gui.viewer.QuPathViewer.lambda$repaint$4(QuPathViewer.java:508); at com.sun.j",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/376#issuecomment-554873027:1967,simpl,simplifyPath,1967,https://qupath.github.io,https://github.com/qupath/qupath/issues/376#issuecomment-554873027,1,['simpl'],['simplifyPath']
Usability,"sorry for the bug tag, I cannot for the life of me find where to remove that. It is clearly not a bug, just a request.... . All the best",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/466#issuecomment-622334575:84,clear,clearly,84,https://qupath.github.io,https://github.com/qupath/qupath/issues/466#issuecomment-622334575,1,['clear'],['clearly']
Usability,"t include any code that directly relates to the GPU - everything happens through OpenCV/JavaCPP (and sometimes also PyTorch/TensorFlow/DJL). If you search for `the provided PTX was compiled with an unsupported toolchain` you should find lots of discussions separately from QuPath; it seems that the issue is normally related to the driver. I tried to replicate the issue with the only Windows computer I have access to (including a GeForce 1060) and could not - it runs without errors, and `DnnTools.isCudaAvailable()` returns true. > Given that issue https://github.com/qupath/qupath/issues/841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?. I don't think that can be relevant here. I'm not sure that there is any bug here that can be fixed within QuPath. I have seen such error messages before, but the solution was always to update my graphics card driver. Have you tried this?. Note that QuPath v0.4.0 gives a range of options for deep learning, but CUDA incompatibilities will mean that probably not all can work at once (e.g. I could get PyTorch with GPU acceleration today by installing CUDA 11.7, but TensorFlow seems to require 11.3... I'm not sure there's a combination that gets both working together). I don't see that there's really anything much more we can do apart from simply removing the option of GPU acceleration altogether and not documenting it as an option - but that seems a shame when often it does work. > I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Because QuPath doesn't directly access the GPU, please check the .jar files within each installation. I don't know what the problem could be, unless it is somehow related to the inclusion of some Deep Java Library dependencies - or if you have other extensions installed that are conflicting.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127:1077,learn,learning,1077,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180#issuecomment-1341628127,2,"['learn', 'simpl']","['learning', 'simply']"
Usability,"t, we knew that it could only affect ancestor and descendent objects in QuPath v0.1.2 and earlier. But if we changed multiple objects, then all the *potential* auto-resolved parent/child relationships between objects would be too complex to decipher. Instead, it was easier and safer to fire an event that basically said: _'something big changed, don't try to figure out exactly what, but just update to handle the hierarchy as it now is'_. I'm reluctant to switch to `addObjects` firing an event that doesn't include all the objects that were added, in case there is any legacy code that might be sensitive to the change. Which leads to... > So, [this condition](https://github.com/qupath/qupath/blob/3544e613b40fd123236936d76e2cb5ee08d855f7/qupath-gui-fx/src/main/java/qupath/lib/gui/UndoRedoManager.java#L474) is true, the event is ignored, and the UndoRedoManager doesn't update its state. It looks like I failed to recognize that ; ```java; event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject); ```; would return true when `getChangedObjects().isEmpty()`. What it be sufficient to change the problematic condition to this?. ```java; // Try to avoid calling too often; 		if (undoingOrRedoing || event.isChanging() || maxUndoHierarchySize.get() <= 0); 			return;. 		// During processing, we have ParallelTileObjects changing to show which part of the image is being handled; 		// - but we don't want to record these; 		if (!event.getChangedObjects().isEmpty() && event.getChangedObjects().stream().allMatch(p -> p instanceof ParallelTileObject)); 			return;; ```. From a quick try, I think that's enough to fix #1487 but you're deeper into the code than me. The `ParallelTileObjects` are the squares that appear during certain commands, like cell detection, to indicate what is happening. I expect that we could *dramatically* simplify `PathObjectHierarchyEvent` for future versions - but if we can make undo/redo less bad with a small change, that would be excellent.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306:2120,undo,undoingOrRedoing,2120,https://qupath.github.io,https://github.com/qupath/qupath/pull/1578#issuecomment-2276091306,3,"['simpl', 'undo']","['simplify', 'undo', 'undoingOrRedoing']"
Usability,"thanks again @petebankhead. That was the issue. I'm posting the code in case somebody else is interested. . ```; if( (tw>400) && (tw>400) && (roi.getScaledArea(pixelWidth, pixelHeight)>9500) && (counter<10)){; RegionRequest request = RegionRequest.createInstance(path, 4, (int) roi.getBoundsX(), (int) roi.getBoundsY(),(int) roi.getBoundsWidth(), (int) roi.getBoundsHeight(), 0, 0); ; ; // Read the image region; ImagePlus imp = serverIJ.readImagePlusRegion(request).getImage(true); IJ.run(imp, ""8-bit"", """");; IJ.run(imp, ""Median..."", ""radius=3"");. IJ.run(imp, ""Statistical Region Merging"", ""q=10 showaverages"");; IJ.run(imp, ""Invert"", """");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Set Measurements..."", ""area mean standard modal min centroid center bounding fit shape feret's integrated median skewness kurtosis add redirect=None decimal=3"");; IJ.run(imp, ""Make Binary"", """");; IJ.run(imp, ""Erode"", """");; IJ.run(imp, ""Erode"", """");. // code for normalisation and preprocessing prior to segmentation. IJ.run(imp, ""Analyze Particles..."", ""size=20-Infinity circularity=0.40-1.00 display clear summarize add in_situ"");. RoiManager manager = RoiManager.getInstance();; if (manager == null); manager = new RoiManager(). if((manager==null) || (manager.getCount()<1)){; print(""No object detected""); }else{; ; // call IJ roi to qupath roi conversion; def ijROIs = QUPath_Send_Overlay_to_QuPath.createPathObjectsFromROIs(imp,; manager.getRoisAsArray(),; serverOriginal,; (double) 4,; true,true,0,0,0). for (annotationIJ in ijROIs) {; def roiIter = annotationIJ.getROI(); def pathObject3 = new PathDetectionObject(roiIter); addObject(pathObject3); }. manager.reset(); ; }; ; //print QP.detectionObjects.lastIndexOf(); ; counter++; imp2 = IJ.getImage();; imp2.close(); ; }; ```",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357668235:1089,clear,clear,1089,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357668235,1,['clear'],['clear']
Usability,the removal of selectDetectionMeasurement() and guiscript=true didn't change anything. . I will give a try to the suggestions above and try from another machine. The current platform is a Windows but at home I have a Mac. . Will let you know. Thanks a mill for the quick feedback.,MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/136#issuecomment-357023840:271,feedback,feedback,271,https://qupath.github.io,https://github.com/qupath/qupath/issues/136#issuecomment-357023840,1,['feedback'],['feedback']
Usability,"ugh I'm not certain. Hopefully the log can help. I plan to write a better script to help explore memory issues soon, but in the meantime you could try this very basic one:. // Print the current memory situation. def runtime = Runtime.getRuntime(). double scale = 1.0/1024.0/1024.0. print 'Max memory (MB): ' + (runtime.maxMemory() * scale). print 'Total memory (MB): ' + (runtime.totalMemory() * scale). print 'Used memory (MB): ' + ((runtime.totalMemory() - runtime.freeMemory()) * scale). // Try to reclaim whatever memory we can, including emptying the tile cache. javafx.application.Platform.runLater {. getCurrentViewer().getImageRegionStore().cache.clear(). System.gc(). }. The top bit gives some numbers on current memory usage. Roughly, the 'max' is what QuPath/Java is allowed to use, the 'total' is what it is currently claiming the right to access (which might change over time, potentially increasing towards the 'max' as required), and the 'used' value is what is currently needed. The second bit of the script then tries to bring down the 'used' value by clearing out the cache of image tiles and reclaiming whatever memory if can. So if you run the script twice in a row, the 'used' memory value should generally be lower the second time, assuming you had previously been browsing around the image (and therefore filling up the tile cache). Running this script before running the cell detection might increase the chances of it ending successfully. If it still sometimes fails, but it looks like a memory problem, then either increasing the memory limit or decreasing the number of parallel threads could help - see https://github.com/qupath/qupath/wiki/Troubleshooting for more info. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/qupath/qupath/issues/130#issuecomment-355845333>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AhgDyN_FkkG6m9PVrCtutL6J2PYQHVfHks5tIRihgaJpZM4RUCsS>.",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/130#issuecomment-355877016:1841,clear,clearing,1841,https://qupath.github.io,https://github.com/qupath/qupath/issues/130#issuecomment-355877016,1,['clear'],['clearing']
Usability,"using MSYS2 building openslide is simply calling ./configure && make &&; make install avoiding winbuild.sh/cross compilation. Did you rebuild pixman; or other openslide dependencies from source on Linux?. Am So., 17. Jan. 2021 um 18:52 Uhr schrieb Pete <notifications@github.com>:. > @kwiechen <https://github.com/kwiechen> thanks for the suggestion, I; > haven't looked into this - what would it involve and what would it solve?; > Currently, 'official' Windows builds are available for OpenSlide and seem; > to work fine. It is portability on Mac/Linux that poses the biggest problem; > (especially since pixman included in the last LTS Ubuntu release causes; > trouble).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qupath/qupath/issues/629#issuecomment-761851656>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AEG6ZGYDJUF6JH7JKL7LHRDS2MPVPANCNFSM4S6NHNUA>; > .; >",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/629#issuecomment-761857622:34,simpl,simply,34,https://qupath.github.io,https://github.com/qupath/qupath/issues/629#issuecomment-761857622,1,['simpl'],['simply']
Usability,"y to create margins for the; annotations. I do not run out of memory, but using the memory monitor I; notice a sawtooth pattern whe is the freezes happen. Perhaps it will run better if run from the command line since it no longer; will have to compete with the application thread?. I will set up a more powerful computer tomorrow. Perhaps that will handle; the problem. 7. feb. 2019 20:46 skrev ""Pete"" <notifications@github.com>:. It's hard to tell much here without a clearer idea of what 'a lot of rather; large and complex annotations' means, but it may very well be that there; are too many vertices that that slows down the rendering too much (on the; JavaFX application thread, same as the menus and rest of the GUI). If so it; isn't really a bug, but more pushing QuPath with a different application; than that for which it was previously designed/optimized... See https://github.com/qupath/qupath/wiki/Types-of-object for differences; in object types, and why it's not really intended to have very large; numbers of annotations. You might try having fewer vertices somehow, perhaps with *Objects →; Simplify annotation shape* or splitting larger annotations into smaller; ones (since annotations outside the field of view do not need to be; rendered). Or write a script that periodically converts annotations you; won't need to change any more into detections. Or try to leave parts of the; image that are particularly complex *unannotated*, and then interpret the; unannotated region appropriately later. (I was actually looking into this today for completely different reasons,; and may be able to improve the annotation handling somewhat... but it; doesn't help you now). —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub; <https://github.com/qupath/qupath/issues/267#issuecomment-461569891>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/Af9pL416T51gEDAwcX1cjYHyo1TwguiQks5vLIKAgaJpZM4anysq>; .",MatchSource.ISSUE_COMMENT,qupath,qupath,v0.5.1,https://github.com/qupath/qupath/issues/267#issuecomment-461575920:1293,Simpl,Simplify,1293,https://qupath.github.io,https://github.com/qupath/qupath/issues/267#issuecomment-461575920,1,['Simpl'],['Simplify']
