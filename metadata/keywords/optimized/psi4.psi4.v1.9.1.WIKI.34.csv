quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"//cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:5498,depend,dependency,5498,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependency']
Integrability,"/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed; # goto GH:psi4/psi4 > Settings > Branches > 1.3.x > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/4385008 # !Varies!; # uncheck ""Include administrators"" and Save changes. >>> git push upstream 1.3.x; >>> git push upstream v1.3.1. # re-engage ""Include administrators"" protections. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev, psi4-docs.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have cre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:7645,interface,interface,7645,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['interface'],['interface']
Integrability,"/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed; # goto GH:psi4/psi4 > Settings > Branches > 1.3.x > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/4385008 # !Varies!; # uncheck ""Include administrators"" and Save changes. >>> git push upstream 1.3.x; >>> git push upstream v1.3.1. # re-engage ""Include administrators"" protections. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda, so skip di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:7831,interface,interface,7831,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,3,['interface'],['interface']
Integrability,"/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:17271,wrap,wrappers,17271,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['wrap'],['wrappers']
Integrability,"/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: str; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html:1492,integrat,integrated,1492,psi4manual/1.4.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html,2,['integrat'],['integrated']
Integrability,"0 compliance.; This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without upda",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:37529,rout,route,37529,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['rout'],['route']
Integrability,"0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). classmethod from_serial(json_data); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Vector, arg0: int) -> float. docstring. get(self: psi4.core.Vector, arg0: int, arg1: int) -> float. docstring. name; The name of the Vector. Used in printing. nirrep(self: psi4.core.Vector) → int; docstring. np; View without only one irrep. classmethod np_read(filename, prefix=''). np_write(filename=None, prefix=''). nph; View with irreps. print_out(self: psi4.core.Vector) → None; docstring. scale(self: psi4.core.Vector, arg0: float) → None; docstring. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, arg0: int, arg1: float) -> None. docstring. set(self: psi4.core.Vector, arg0: int, arg1: int, arg2: float) -> None. docstring. shape; Shape of the Psi4 data object. to_array(matrix, copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:np.array or list of of np.array. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data._to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(data); Converts an object with a .nph accessor to a serialized dictionary. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.vector.html:6606,depend,depending,6606,psi4manual/1.1.0/api/psi4.core.vector.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.vector.html,1,['depend'],['depending']
Integrability,"0,; maxiter: int = 60,; verbose: int = 1,; nonneg_only: bool = False) -> Dict[str, Any]:; """"""Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine. If the large matrix `A` has dimension `{NxN}` and N is very large, and only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:19408,depend,dependent,19408,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,4,['depend'],['dependent']
Integrability,"0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:16329,wrap,wrapper,16329,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['wrap'],['wrapper']
Integrability,"0.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/quickadddatabase-1.html:3550,rout,route,3550,psi4manual/1.2.1/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/quickadddatabase-1.html,2,['rout'],['route']
Integrability,"030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:21354,interface,interface,21354,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['interface'],['interface']
Integrability,"030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:21356,interface,interface,21356,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['interface'],['interface']
Integrability,"087; # (1.1, 102) -75.990085 -76.201498 -76.204676. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A; """"""). Rvals = [0.9, 1.0, 1.1]; Avals = range(100, 103, 2). rows = []; table = []. psi4.set_options({""basis"": ""cc-pvdz""}). for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; psi4.energy('mp2'); escf = psi4.variable('SCF TOTAL ENERGY'); edfmp2 = psi4.variable('MP2 TOTAL ENERGY'); escsmp2 = psi4.variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]). import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,. PSIthonPsiAPIenergy('mp2', bsse_type='cp'). psi4.energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,. PSIthonPsiAPI# all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). energy('mp2/cc-pv[dt]z'). # all equivalent. psi4.energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). psi4.energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapola",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:16082,integrat,integrated,16082,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['integrat'],['integrated']
Integrability,"098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; Psi4 input file. Depending on the nature of preceeding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a Psi4-style molecule, the; interface cannot judge whether a sandwich mode (drop the Psi4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the Psi4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a Psi4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-Psi4 computations in an input file, place all; the sandwich jobs at the beginning before declaring Psi4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a Psi4 input file is; written to the Psi4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:18007,interface,interface,18007,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['interface'],['interface']
Integrability,"0:.<66}PASSED'.format(label); print(msg); sys.stdout.flush(); core.print_out(msg + '\n'). # Test functions; [docs]def compare_values(expected, computed, digits, label, exitonfail=True):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* < 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; if digits > 1:; thresh = 10 ** -digits; message = (""\t%s: computed value (%.*f) does not match (%.*f) to %d digits."" % (label, digits+1, computed, digits+1, expected, digits)); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(expected - computed) > thresh:; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:6834,message,message,6834,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"0:550]. 11; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. 12; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function run_dftd3() or run_dftd4(). (These functions; call QCEngine, which is the same PSI4 + dftd3/dftd4 interface that is called during an scf job.); This “D-only” route is much faster than running a DFT-D energy.; Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a dftd3 “D-only” calculation. But; in a dftd4 “D-only” calculation, functional information overrides; any user-specified dispersion parameters. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.Molecule.run_df",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dftd3-1.html:9507,interface,interface,9507,psi4manual/1.5.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dftd3-1.html,3,['interface'],['interface']
Integrability,"0; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:21670,interface,interface,21670,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['interface'],['interface']
Integrability,"0; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:21672,interface,interface,21672,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['interface'],['interface']
Integrability,"0]. [11]; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. [12]; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function run_dftd3() or run_dftd4(). (These functions; call QCEngine, which is the same PSI4 + dftd3/dftd4 interface that is called during an scf job.); This “D-only” route is much faster than running a DFT-D energy.; This route is NOT available for s-dftd3. File an issue if a definite need arises.; Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a dftd3 “D-only” calculation. But; in a dftd4 “D-only” calculation, functional information overrides; any user-specified dispersion parameters. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:12419,interface,interface,12419,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['interface'],['interface']
Integrability,"1 = core.Dimension.from_list(dim1); dim2 = core.Dimension.from_list(dim2). if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""). ret = self(name, dim1, dim2). start1 = 0; start2 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1; start2 += d2. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); ret.np[:] = arr; return ret. elif arr_type == core.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError(""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""). dim1 = core.Dimension.from_list(dim1); ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret.np[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def _to_array(matrix, copy=True, dense=False):; """"""; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters; ----------; matrix : :py:class:`~psi4.core.Matrix` or :py:class:`~psi4.core.Vector`; Pointers to which Psi4 core class should be used in the construction.; copy : bool, optional; Copy the data if `True`, return a view otherwise; dense : bool, optional; Converts irreped Psi4 objects to diagonally blocked dense arrays if `True`. Returns a list of arrays otherwise. Returns; -------; array : ndarray or list of ndarray; Returns either a list of np.array's or the base array depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html:5131,interface,interface,5131,psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,2,['interface'],['interface']
Integrability,"1 = core.Dimension.from_list(dim1); dim2 = core.Dimension.from_list(dim2). if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""). ret = self(name, dim1, dim2). start1 = 0; start2 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1; start2 += d2. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); ret.np[:] = arr; return ret. elif arr_type == core.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError(""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""). dim1 = core.Dimension.from_list(dim1); ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret.np[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def _to_array(matrix: Union[core.Matrix, core.Vector], copy: bool = True, dense: bool = False) -> Union[np.ndarray, List[np.ndarray]]:; """"""; Converts a Psi4 Matrix or Vector to a NumPy array. Either copies the data or simply; constructs a view. Parameters; ----------; matrix; Pointers to which Psi4 core class should be used in the construction.; copy; Copy the data if `True`, return a view otherwise; dense; Converts irreped Psi4 objects to diagonally blocked dense arrays if `True`. Returns a list of arrays otherwise. Returns; -------; numpy.ndarray; Returns either a list of np.array's or the base array depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Examples; --------. >>> data = psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html:5230,interface,interface,5230,psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html,3,['interface'],['interface']
Integrability,"1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""; if verbose is None:; verbose = core.get_global_option('PRINT'). for pvar, action in pvdefs.items():; if verbose >= 2:; print(""""""building %s %s"""""" % (pvar, '.' * (50 - len(pvar))), end=''). psivars = core.scalar_variables(); data_rich_args = []. for pv in action['args']:; if isinstance(pv, str):; if pv in psivars:; data_rich_args.append(psivars[pv]); else:; if verbose >= 2:; print(""""""EMPTY, missing {}"""""".format(pv)); break; else:; data_rich_args.append(pv); else:; result = action['func'](data_rich_args); core.set_variable(pvar, result); if verbose >= 2:; print(""""""SUCCESS""""""). [docs]def provenance_stamp(routine: str, module: str = None) -> Dict[str, str]:; """"""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""; prov = {'creator': 'Psi4', 'version': __version__, 'routine': routine}; if module:; prov[""module""] = module. return prov. [docs]def plump_qcvar(; val: Union[float, str, List],; shape_clue: str,; ret: str = 'np') -> Union[float, np.ndarray, core.Matrix]:; """"""Prepare serialized QCVariable for :py:func:`~psi4.core.set_variable` by; converting flat arrays into shaped ones and floating strings. Parameters; ----------; val; flat (?, ) list or scalar or string, probably from JSON storage.; shape_clue; Label that includes (case insensitive) one o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html:19600,rout,routine,19600,psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,1,['rout'],['routine']
Integrability,"1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2022, The Psi4 Project.; Last updated o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html:3657,message,message,3657,psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,1,['message'],['message']
Integrability,"1,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4697,interoperab,interoperability,4697,psi4manual/1.0.0/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html,2,['interoperab'],['interoperability']
Integrability,"1. FULL_MATRIX (CCEOM); CCEOM — Do ?. Type: boolean; Default: false. FZC_A_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_OEI. FZC_B_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_OEI. FZC_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_OEI. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 20. GUESS (SCF); SCF — The type of guess orbitals. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Values: UNIT, H0_BLOCK, DFILE, IMPORT; Defaul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:39318,depend,dependent,39318,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['depend'],['dependent']
Integrability,"1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:6193,depend,dependencies,6193,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:3550,rout,route,3550,psi4manual/1.3.2/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html,2,['rout'],['route']
Integrability,"126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mint",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17401,depend,depend,17401,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc13d; Tests analytic CC2 gradients. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cubeprop-esp; RHF orbitals and density for water. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pubchem2; Superficial test of PubChem interface. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. casscf-fzc-sp; CASSCF/6-31G** energy point. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:3138,interface,interface,3138,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['interface'],['interface']
Integrability,"1301 USA.; #; #@END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import print_function. [docs]class QcdbException(Exception):; """"""Error class for QCDB.""""""; pass. [docs]class FeatureNotImplemented(QcdbException):; """"""Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: Feature %s is not yet implemented.\n\n' % (msg)). [docs]class ValidationError(QcdbException):; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. [docs]class ParsingValidationError(QcdbException):; """"""Error called for problems with syntax from a QC output file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class FragmentCountError(QcdbException):; """"""Error called molecule has wrong number of fragments for method.; Prints error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; #print('\nQcdbException: %s\n\n' % (msg)). [docs]class BasisSetFileNotFound(QcdbException):; """""". """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException BasisSetFileNotFound: %s\n\n' % (msg)). [docs]class BasisSetNotFound(QcdbException):; """""". """"""; def __init__(self, msg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/exceptions.html:1935,message,message,1935,psi4manual/1.0.0/_modules/qcdb/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/exceptions.html,1,['message'],['message']
Integrability,"15).; (doi: 10.1021/acs.jctc.5b00817). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (zipped archive or git repository from; https://github.com/psi4/psi4).; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++11 compliance (i.e., GCC version 4.9 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/introduction-1.html:19400,depend,dependencies,19400,psi4manual/1.1.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/introduction-1.html,2,['depend'],['dependencies']
Integrability,"18}$J) conversion factor ; psi_cal2J = 4.184 # Calorie to joule conversion factor ; psi_dipmom_au2si = 8.47835281E-30 # Atomic units to SI units (Cm) conversion factor for dipoles ; psi_dipmom_au2debye = 2.54174623 # Atomic units to Debye conversion factor for dipoles ; psi_dipmom_debye2si = 3.335640952E-30 # Debye to SI units (Cm) conversion factor for dipoles ; psi_c_au = 137.035999679 # Speed of light in atomic units ; psi_hartree2ev = 27.21138 # Hartree to eV conversion factor ; psi_hartree2wavenumbers = 219474.6 # Hartree to cm$^{-1}$ conversion factor ; psi_hartree2kcalmol = 627.5095 # Hartree to kcal mol$^{-1}$ conversion factor ; psi_hartree2MHz = 6.579684E9 # Hartree to MHz conversion factor ; psi_kcalmol2wavenumbers = 349.7551 # kcal mol$^{-1}$ to cm$^{-1}$ conversion factor ; psi_e0 = 8.854187817E-12 # Vacuum permittivity (Fm$^{-1}$) ; psi_na = 6.02214179E23 # Avagadro's number ; psi_me = 9.10938215E-31 # Electron rest mass (in kg) . wrappers¶; Module with functions that call the four main driver; functions: driver.energy, driver.optimize,; driver.response, and driver.frequency. auto_fragments(name, **kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT; usage: auto_fragments(‘’). call_function_in_1st_argument(funcarg, **largs)[source]¶; Function to make primary function call to energy(), opt(), etc.; with options dictionary largs.; Useful when funcarg to call is stored in variable. convert(p, symbol)[source]¶. reconstitute_bracketed_basis(needarray)[source]¶; Function to reform a bracketed basis set string from a sequential series; of basis sets (e.g, form ‘cc-pv[q5]z’ from array [cc-pvqz, cc-pv5z]). The; basis set array is extracted from the f_basis field of a NEED dictionary in; complete_basis_set(). Result is used to print a nicely; formatted basis set string in the results table. split_menial(menial)[source]¶; Function used by complete_basis_set() to separate; menial ‘scftot’ ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html:11426,wrap,wrappers,11426,psi4manual/4.0b2/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html,6,['wrap'],['wrappers']
Integrability,"19-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4. try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]; class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html:1263,interface,interfaces,1263,psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html,2,['interface'],['interfaces']
Integrability,"19-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]; class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html:1263,interface,interfaces,1263,psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,1,['interface'],['interfaces']
Integrability,"19-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orienta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html:1261,interface,interfaces,1261,psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,1,['interface'],['interfaces']
Integrability,"1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess¶; Code author: Justin M. Turney; Section author: Justin M. Turney; Module: Keywords, Samples. Installation¶; Binary. DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, dkh has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; dkh can be obtained through conda install dkh -c psi4.; Then enable it as a feature with ENABLE_dkh,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect dkh and activate dependent code. Previous bullet had details. To build PSI4 from source and use; dkh from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove dkh. Source. If using PSI4 built from source and you want dkh built from; from source also,; enable it as a feature with ENABLE_dkh,; and let the build system fetch and build it and activate dependent code. Input¶; For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects.; Minimal input for DKH single-point computation looks like this:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the DKH_ORDER option. The version of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dkh-1.html:1197,depend,dependent,1197,psi4manual/1.2.1/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dkh-1.html,2,['depend'],['dependent']
Integrability,"1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. [6](1, 2) [Smith:2016:2197]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same Psi4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Ret",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:6831,rout,route,6831,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,2,['rout'],['route']
Integrability,"2 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2446,message,message,2446,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['message'],['message']
Integrability,"2, normal:1, low:0}""); owner_group: Optional[str] = Field(None, description=""group in the chown sense.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description="":py:class:`~qcelemental.models.AtomicResult` return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs]; @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs]; @validator(""method""); def set_method(cls, method):; return method.lower(). [docs]; @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs]; def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": self.protocols,; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs]; def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. from qcelemental.models import Molecule. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; protocols=self.protocols,; tag=self.tag,; priority=self.priority,; owner_group=self.owner_group,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""compl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:4285,protocol,protocols,4285,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,2,['protocol'],['protocols']
Integrability,"2, normal:1, low:0}""); owner_group: Optional[str] = Field(None, description=""group in the chown sense.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description="":py:class:`~qcelemental.models.AtomicResult` return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs]; @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs]; @validator(""method""); def set_method(cls, method):; return method.lower(). [docs]; @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs]; def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": self.protocols,; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs]; def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. try:; # QCFractal v0.15.8; from qcportal.models import KeywordSet, Molecule; qca_next_branch = False; except ImportError:; # QCFractal `next`; from qcelemental.models import Molecule; qca_next_branch = True. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). if not qca_next_branch:; # QCFractal v0.15.8. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. r = client.add_compute(""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:4310,protocol,protocols,4310,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,1,['protocol'],['protocols']
Integrability,"2, arg3, arg4, arg5, ...); docstring. DSYR(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYR2(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYR2K(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYRK(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:2527,rout,routines,2527,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,4,['rout'],['routines']
Integrability,"2, arg3, arg4, arg5, ...); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Rese",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:2768,rout,routines,2768,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['rout'],['routines']
Integrability,"2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is perfor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:24633,rout,routing,24633,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['rout'],['routing']
Integrability,"23. 230; 25. 266; 27. 302; 29. 350; 31. 434; 35. 590; 41. 770; 47. 974; 53. 1202; 59. 1454; 65. 1730; 71. 2030; 77. 2354; 83. 2702; 89. 3074; 95. 3470; 101. 3890; 107. 4334; 113. 4802; 119. 5294; 125. 5810; 131. The spherical grids are rotated according to a common set of rules developed; during the implementation of SG1. At the moment, the rules for tetrahedral,; octohedral, and icosohedral systems are not complete, so there may be some; ambiguity in the grid orientation for these systems. A complete grid orientation; rule set will be available in RC1.; Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which; at the moment may be either TREUTLER or BECKE, while the number of radial points; are controlled by the DFT_RADIAL_POINTS option, which is any positive; integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater; radius of each atom, as described in Becke’s 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to; force the radial grid to span a larger extent in space. The MultiExp, Mura, and; EM radial grids will be available in RC1.; The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME; option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann; weighting scheme is under development, and will be available in RC1.; Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For ea",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dft-1.html:16260,integrat,integration,16260,psi4manual/1.0.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dft-1.html,10,['integrat'],['integration']
Integrability,"2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess¶; Code author: Justin M. Turney; Section author: Justin M. Turney; Module: Keywords, Samples. Installation¶; Binary. DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, dkh has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; dkh can be obtained through conda install dkh -c psi4.; Then enable it as a feature with ENABLE_dkh,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect dkh and activate dependent code. Previous bullet had details. To build PSI4 from source and use; dkh from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove dkh. Source. If using PSI4 built from source and you want dkh built from; from source also,; enable it as a feature with ENABLE_dkh,; and let the build system fetch and build it and activate dependent code. Input¶; For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects.; Minimal input for DKH single-point computation looks like this:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the DKH_ORDER option. The version of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dkh-1.html:1197,depend,dependent,1197,psi4manual/1.3.2/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dkh-1.html,2,['depend'],['dependent']
Integrability,"2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dcft8; DCFT calculation",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:1232,wrap,wrappers,1232,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['wrap'],['wrappers']
Integrability,"2rdm_casscf::v2rdm_casscf.; Following the CMake project name (though not restricted to it –; PSI4 managment could change the pattern), the user flag to enable; an add-on is ENABLE_AddOn_name. Note that runtime-only; add-ons don’t go through this enabling process.; Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; addon_name.; The conda package and internal to; PSI4 (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; addon_name.; Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that’s what PSI4 does. How to integrate an Add-On into build, testing, and docs¶. In all cases, put Add-Ons in alphabetic order, ignoring any “lib” in the name.; psi4/CMakeLists.txt; Add the ENABLE_AddOn_name line; Add the external_addon_name dependency to the psi4-core external project; Add the AddOn_name_DIR variable passing to the psi4-core external project. psi4/psi4/CMakeLists.txt; Add a block imitating Libint if Add-On required or CheMPS2 if not; required; If there are shared resources to the external that need; to be found by PSI4 in PSIDATADIR, follow the efpfrag; pattern of libefp to symlink them in. psi4/psi4/src/CMakeLists.txt; No changes should be required unless both (1) code in export_*; or core.cc needs the USING_AddOn_name definition or; AddOn header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/; If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:2188,depend,dependency,2188,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,6,['depend'],['dependency']
Integrability,"3) gradient [Eh/a0]. Notes; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of func trumping dashparam holds, rather than the; run_dftd3() behavior of dashparam extending or overriding func. run_gcp(func=None, dertype=None, verbose=1)[source]¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters. func (str, optional) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (int or str, optional) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Unused at present. Returns. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.molecule.html:31006,interface,interface,31006,psi4manual/1.5.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.molecule.html,2,['interface'],['interface']
Integrability,"3) gradient [Eh/a0]. Notes; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of func trumping dashparam holds, rather than the; run_dftd3() behavior of dashparam extending or overriding func. run_gcp(func=None, dertype=None, verbose=1)[source]¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Molecule.html:31307,interface,interface,31307,psi4manual/1.7.x/api/psi4.core.Molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Molecule.html,4,['interface'],['interface']
Integrability,"3, arg4, arg5, ...); docstring. DSYR2(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYR2K(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYRK(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:2591,rout,routines,2591,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['rout'],['routines']
Integrability,"3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; -------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:16385,wrap,wrapper,16385,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['wrap'],['wrapper']
Integrability,"3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through Psi4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:15886,wrap,wrapper,15886,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrapper']
Integrability,3_wfn_lesser)); #; # # Establish method for fourth delta correction energy; # if 'delta4_wfn' in kwargs:; # do_delta4 = True; # cbs_delta4_wfn = kwargs['delta4_wfn'].lower(); # if not (cbs_delta4_wfn in VARH.keys()):; # raise ValidationError('Requested DELTA4 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn)); #; # if 'delta4_wfn_lesser' in kwargs:; # cbs_delta4_wfn_lesser = kwargs['delta4_wfn_lesser'].lower(); # else:; # cbs_delta4_wfn_lesser = cbs_delta3_wfn; # if not (cbs_delta4_wfn_lesser in VARH.keys()):; # raise ValidationError('Requested DELTA4 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn_lesser)); #; # # Establish method for fifth delta correction energy; # if 'delta5_wfn' in kwargs:; # do_delta5 = True; # cbs_delta5_wfn = kwargs['delta5_wfn'].lower(); # if not (cbs_delta5_wfn in VARH.keys()):; # raise ValidationError('Requested DELTA5 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta5_wfn)); #; # if 'delta5_wfn_lesser' in kwargs:; # cbs_delta5_wfn_lesser = kwargs['delta5_wfn_lesser'].lower(); # else:; # cbs_delta5_wfn_lesser = cbs_delta4_wfn; # if not (cbs_delta5_wfn_lesser in VARH.keys()):; # raise ValidationError('Requested DELTA5 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta5_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and not do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; #elif do_scf and do_corl and do_delta an,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:34326,wrap,wrapper,34326,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,3,['wrap'],['wrapper']
Integrability,"4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; PSI4 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; PSI4 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; General GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties.; For more tables with capabilities details:. Full Capabilities (first below) lists all methods; Capabilities Breakdown (second below) lists selected methods by reference, etc.; Module Capabilities lists selected methods by implementation; Energy, Energy (DFT), Energy (MRCC), Energy (CFOUR) fu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/introduction.html:23767,depend,dependencies,23767,psi4manual/1.9.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/introduction.html,1,['depend'],['dependencies']
Integrability,"4 [beta5] documentation. Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». Source code for aliases; #; #@BEGIN LICENSE; #; # PSI4: an ab initio quantum chemistry software package; #; # This program is free software; you can redistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import re; import os; import math; import warnings; import psi4; import p4util; from driver import *; from wrappers import *; #from extend_Molecule import *; from molutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrill_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:1064,wrap,wrappers,1064,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['wrap'],['wrappers']
Integrability,"4 developers; have access, though we have identified at least one case in which; the Goto libraries yielded faulty DGEMM calls. On Mac OS X; systems, the vecLib package that comes with Xcode works well.; If you prefer to use the ACML; (http://developer.amd.com/tools/cpu-development/amd-core-math-library-acml/); we highly recommend using the latest version. Older versions; of ACML have been known to cause problems. PSI4 does not require a Fortran compiler, unless the resident BLAS; and LAPACK libraries require Fortran-based system libraries. If you see; compiler complaints about missing symbols like “do_fio” or “e_wsfe”, then; your libraries were most likely compiled with g77 or gfortran, which; require -lg2c to resolve the Fortran I/O calls. Use of the same gcc; package for PSI4 should normally resolve this problem. The PSI4 configure script can often identify and use several; different BLAS and LAPACK libraries, but its ability to do this; automatically depends on a number of factors, including correspondence; between the compiler used for PSI4 and the compiler used to build; BLAS/LAPACK, placement of the libraries in commonly searched directories,; etc. PSI4’s configure script will find your BLAS and LAPACK if any of the; the following are installed in standard locations (e.g. /usr/local/lib):. ATLAS: libf77blas.a and libatlas.a, plus netlib’s liblapack.a; MKL 8: libmkl.so and libmkl_lapack64.a (with the corresponding; Intel compilers); Goto: libgoto.a and netlib’s liblapack.a; Cray SCSL (e.g. on SGI Altix): libscs.so (NB: No Fortran compiler; is necessary in this case, so --with-fc=no should work.); ESSL (e.g. on AIX systems): libessl.a. If configure cannot identify your BLAS and LAPACK libraries; automatically, you can specify them on the command-line using the; --with-blas and --with-lapack arguments described above. Here are a few; examples that work on the PSI4 developers’ systems:. Linux with ATLAS:; --with-blas='-lf77blas -latlas' --with-lapack='-llapack -l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/installfile.html:22499,depend,depends,22499,psi4manual/4.0b5/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/installfile.html,1,['depend'],['depends']
Integrability,"4 it will stop working\n"",; category=FutureWarning,; stacklevel=2). print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Compute the Levenshtein distance between two strings."""""". oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1, options, max_distance):; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`."""""". return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str = None, max_width: int = 80, min_width: int = 30):; """""" put a message string into a box for extra attention. Parameters; -----------; message; message string to be boxed. max_width; maximal character width of the box. Returns; --------; str; box containing the message as a multiline string; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/text.html:6926,message,message,6926,psi4manual/1.6.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/text.html,4,"['message', 'wrap']","['message', 'wrap']"
Integrability,"4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6461,depend,dependencies,6461,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:6997,depend,dependencies,6997,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['depend'],['dependencies']
Integrability,"4, this keyword controls whether to enable GPU support on the internally-built GauXC instance. When using an external GauXC build, this keyword must align with the GPU capabilities of the external GauXC install. To control the sn-LinK algorithm, here are the list of options provided. SNLINK_RADIAL_POINTS: Number of radial points to use for the sn-LinK grid. Defaults to 70.; SNLINK_SPHERICAL_POINTS: Number of spherical points to use for the sn-LinK grid. Defaults to 302.; SNLINK_RADIAL_SCHEME: Radial quadrature scheme to use for the sn-LinK grid. Defaults to MURA. Note that, although different from the more common Psi4 radial quadrature scheme of TREUTLER, the default of MURA matches the default radial quadrature scheme used by GauXC.; SNLINK_INTS_TOLERANCE: The integral screening tolerance used in the sn-LinK algorithm. Defaults to the INTS_TOLERANCE option.; SNLINK_USE_GPU: Select whether to execute the sn-LinK algorithm on GPU or not. Setting this option to true will fail unless the Psi4-GauXC interface is compiled with GPU support. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elem",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:44138,interface,interface,44138,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['interface'],['interface']
Integrability,"4. Initially install PSI4 stable release with non-current python. 1>>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. 1>>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. 1>>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. 1>>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. 1>>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). 1; 2>>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. 1>>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fun",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:21765,depend,dependency,21765,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['depend'],['dependency']
Integrability,"4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1092,contract,contraction,1092,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html,2,['contract'],['contraction']
Integrability,"4.1 -0.3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:15837,wrap,wrapper,15837,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['wrap'],['wrapper']
Integrability,"4.Deriv(ccwfn); grad = derivobj.compute(); del derivobj. ccwfn.set_gradient(grad). optstash.restore(); return ccwfn. [docs]def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; optstash = p4util.OptionsState(; ['TRANSQT2', 'DELETE_TEI'],; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN']). if name == 'bccd':; psi4.set_local_option('TRANSQT2', 'WFN', 'BCCD'); psi4.set_local_option('CCSORT', 'WFN', 'BCCD'); psi4.set_local_option('CCTRANSORT', 'WFN', 'BCCD'); psi4.set_local_option('CCENERGY', 'WFN', 'BCCD'). elif name == 'bccd(t)':; psi4.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); psi4.set_local_option('CCSORT', 'WFN', 'BCCD_T'); psi4.set_local_option('CCENERGY', 'WFN', 'BCCD_T'); psi4.set_local_option('CCTRANSORT', 'WFN', 'BCCD_T'); psi4.set_local_option('CCTRIPLES', 'WFN', 'BCCD_T'); else:; raise ValidationError(""proc.py:run_bccd name %s not recognized"" % name). # Bypass routine scf if user did something special to get it to converge; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs) # C1 certified. # Needed for (T).; if (psi4.get_option('SCF', 'REFERENCE') == 'ROHF'):; ref_wfn.semicanonicalize(). # Ensure IWL files have been written; proc_util.check_iwl_file_from_scf_type(psi4.get_option('SCF', 'SCF_TYPE'), ref_wfn). psi4.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'); psi4.set_local_option('CCTRANSORT', 'DELETE_TEI', 'false'). bcc_iter_cnt = 0; while True:; if (psi4.get_global_option(""RUN_CCTRANSORT"")):; psi4.cctransort(ref_wfn); else:; psi4.transqt2(ref_wfn); psi4.ccsort(). ref_wfn = psi4.ccenergy(ref_wfn); psi4.print_out('Brueckner convergence check: %s\n' % bool(psi4.get_variable('BRUECKNER CONVERGED'))); if (psi4.get_variable('BRUECKNER CONVERGED') == True):; break. if bcc_iter_cnt >= psi4.get_option('CCENERGY', 'BCCD_MAXITER'):; psi4.print_out(""\n\nWarning! BCCD did not converge within the maximum number of iterations.""); psi4.pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:56513,rout,routine,56513,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['rout'],['routine']
Integrability,"4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.orbitalspace.html:4263,depend,dependencies,4263,psi4manual/1.2.1/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.orbitalspace.html,1,['depend'],['dependencies']
Integrability,"4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None; Print information about the orbital space to the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:4263,depend,dependencies,4263,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html,1,['depend'],['dependencies']
Integrability,"4.driver.p4util.util import set_memory; from psi4 import core. # globally available regex strings; pubchemre = re.compile(r'^(\s*pubchem\s*:\s*(.*)\n)$', re.MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; if isbasis:; wordre = re.compile(r'(([$]?)([-+()*.,\w\""\'/\\]+))'); else:; wordre = re.compile(r'(([$]?)([-+()*.\w\""\'/\\]+))'); string = wordre.sub(process_word_quotes, string); return string. def dequotify(string):; if string[0] == '""' and string[-1] == '""':; return string[1:-1]; else:; return string. def process_option(spaces, module, key, value, line):; """"""Function to process a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html:2561,wrap,wrap,2561,psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,1,['wrap'],['wrap']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters. func (str, optional) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (int or str, optional) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Unused at present. Returns. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP by S. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gcp-1.html:3555,interface,interface,3555,psi4manual/1.4.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gcp-1.html,2,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters. func (str, optional) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (int or str, optional) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Unused at present. Returns. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP by S. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/gcp-1.html:3555,interface,interface,3555,psi4manual/1.5.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/gcp-1.html,2,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters. func (str, optional) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (int or str, optional) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Unused at present. Returns. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP by S. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/gcp.html:3555,interface,interface,3555,psi4manual/1.6.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/gcp.html,1,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP by S. Grimme.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/gcp.html:4095,interface,interface,4095,psi4manual/1.7.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/gcp.html,1,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP; run_gcp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/gcp.html:4617,interface,interface,4617,psi4manual/master/gcp.html,https://psicode.org,https://psicode.org/psi4manual/master/gcp.html,1,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP; run_gcp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/gcp.html:4097,interface,interface,4097,psi4manual/1.8.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/gcp.html,1,['interface'],['interface']
Integrability,"4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters:. func (Optional[str]) – Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype (Union[int, str, None]) – Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP; run_gcp(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gCP ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/gcp.html:4610,interface,interface,4610,psi4manual/1.9.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/gcp.html,1,['interface'],['interface']
Integrability,"4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:12604,wrap,wrappers,12604,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,4,['wrap'],['wrappers']
Integrability,"4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:17885,wrap,wrappers,17885,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['wrap'],['wrappers']
Integrability,"4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, and numpy. Of gcc-ness, it has minimal, run-time libraries,; not compilers, though, for Linux/Windows, full gcc and run-time gcc are the same.; It doesn’t have the run-time qc addons psi4-rt (e.g., dftd3) or build tools (e.g., sphinx and cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers, not runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., DFTD3 and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select bet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:8543,depend,dependencies,8543,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['depend'],['dependencies']
Integrability,"4¶; For features to be incorporated fully into the PSI4 ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let’s; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in PSI4 already to perform tasks like these that are; required, e.g., for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in PSI4 and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in Exposing C++ code to Python. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths.; A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Pyth",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_ways_to_add-1.html:4684,rout,routines,4684,psi4manual/1.4.0/prog_ways_to_add-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_ways_to_add-1.html,9,['rout'],['routines']
Integrability,"5 (2015). Neese:2009:98; F. Neese, F. Wennmohs, and A. Hansen; Chem. Phys. 356, 98-109 (2009). Izsak:2011:144105; R. Izsák and F. Neese; J. Chem. Phys. 135, 144105 (2011). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. Smith:2020:184108; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/bibliography.html:12939,depend,dependent,12939,psi4manual/1.6.x/bibliography.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/bibliography.html,1,['depend'],['dependent']
Integrability,"5' : run_omp2_5,; 'dftsapt' : run_dftsapt,; 'infsapt' : run_infsapt,; 'sapt0' : run_sapt,; 'sapt2' : run_sapt,; 'sapt2+' : run_sapt,; 'sapt2+(3)' : run_sapt,; 'sapt2+3' : run_sapt,; 'sapt2+(ccd)' : run_sapt,; 'sapt2+(3)(ccd)': run_sapt,; 'sapt2+3(ccd)' : run_sapt,; 'sapt0-ct' : run_sapt_ct,; 'sapt2-ct' : run_sapt_ct,; 'sapt2+-ct' : run_sapt_ct,; 'sapt2+(3)-ct' : run_sapt_ct,; 'sapt2+3-ct' : run_sapt_ct,; 'sapt2+(ccd)-ct' : run_sapt_ct,; 'sapt2+(3)(ccd)-ct' : run_sapt_ct,; 'sapt2+3(ccd)-ct' : run_sapt_ct,; 'mp2c' : run_mp2c,; 'ccenergy' : run_ccenergy, # full control over ccenergy; 'ccsd' : run_ccenergy,; 'ccsd(t)' : run_ccenergy,; 'cc2' : run_ccenergy,; 'cc3' : ru",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:2035,interface,interface,2035,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['interface'],['interface']
Integrability,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:10231,depend,depending,10231,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,15,['depend'],['depending']
Integrability,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in Psi4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; Psi4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule Psi4-style).; Internally, Psi4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a Psi4 library basis set and also introduces; the final stage of conversion toward Psi4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:10004,depend,depending,10004,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['depend'],['depending']
Integrability,"53}FAILED""); logging.error(f"" {message:.<53}""). if return_message:; return passfail, message; else:; return passfail. def tnm() -> str:; """"""Returns the name of the calling function, usually name of test case."""""". return sys._getframe().f_back.f_code.co_name. [docs]def compare_values(; expected: Union[float, List, np.ndarray],; computed: Union[float, List, np.ndarray],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to :func:`numpy.isclose`. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.allclose`.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:1687,message,messages,1687,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,1,['message'],['messages']
Integrability,"53}FAILED""); logging.error(f"" {message:.<53}""). if return_message:; return passfail, message; else:; return passfail. def tnm() -> str:; """"""Returns the name of the calling function, usually name of test case."""""". return sys._getframe().f_back.f_code.co_name. [docs]def compare_values(; expected: Union[float, List, np.ndarray],; computed: Union[float, List, np.ndarray],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to np.isclose. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.allclose.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use :py:func:`comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:1633,message,messages,1633,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,1,['message'],['messages']
Integrability,"550]. 11; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.Molecule.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters. func (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized; from dashcoeff[dashlvl][func] can be overwritten via; dashpar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:9180,rout,route,9180,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,2,['rout'],['route']
Integrability,"615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: En",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/pcmsolver-1.html:4370,depend,dependencies,4370,psi4manual/1.3.2/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/pcmsolver-1.html,2,['depend'],['dependencies']
Integrability,"66]. 8; [Chai:2010:6615]. 9; [Pernal:2009:263201]. 10; [Podeszwa:2010:550]. 11; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.Molecule.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)¶; Compute dispersion correction via Grimme’s DFTD3 program. Parameters. func (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters init",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:9129,interface,interface,9129,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,2,['interface'],['interface']
Integrability,"6_64-apple-darwin13.4.0. # build with Clang; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:34527,rout,route,34527,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['rout'],['route']
Integrability,"6_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:37554,rout,route,37554,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['rout'],['route']
Integrability,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:12907,wrap,wrappers,12907,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['wrap'],['wrappers']
Integrability,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:12909,wrap,wrappers,12909,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['wrap'],['wrappers']
Integrability,"80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:16877,wrap,wrapper,16877,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['wrap'],['wrapper']
Integrability,"80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through Psi4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for examp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:16378,wrap,wrapper,16378,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrapper']
Integrability,"82 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8065,message,message,8065,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['message'],['message']
Integrability,"82 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_prop",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8065,message,message,8065,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['message'],['message']
Integrability,"87331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.91786912",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:20964,interface,interface,20964,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,4,['interface'],['interface']
Integrability,"87331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by Psi4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while Psi4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of Psi4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.91786912",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:21029,interface,interface,21029,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['interface'],['interface']
Integrability,"97x_2tqz_superfunctional() in module functional. build_wb97x_superfunctional() in module functional. build_wb97xd_superfunctional() in module functional. build_wblyp_superfunctional() in module functional. build_wpbe0_superfunctional() in module functional. build_wpbe_superfunctional() in module functional. build_wpbe_x_functional() in module functional. build_wpbe_x_superfunctional() in module functional. build_wpbesol0_superfunctional() in module functional. build_wpbesol_superfunctional() in module functional. build_wpbesol_x_functional() in module functional. build_wpbesol_x_superfunctional() in module functional. build_ws_x_functional() in module functional. build_ws_x_superfunctional() in module functional. build_wsvwn_superfunctional() in module functional. C. C-side; . setting keywords. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (DCFT). (OCC). (STABILITY). (TRANSQT2). CACHETYPE (CCENERGY). (CCEOM). call_function_in_1st_argument() in module wrappers. CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). CartesianEntry class in qcdb.libmintscoordentry. CAS_FILES_WRITE (CLAG). cbs(); . extrapolation schemes. output. setting keywords. theory, [1]. CBSCORRELATIONENERGY. CBSREFERENCEENERGY. CBSTOTALENERGY. CC; . theory. CC (DETCI). CC(n-1)(n)_LCORRELATIONENERGY. CC(n-1)(n)_LTOTALENERGY. CC(n-1)(n)CORRELATIONENERGY. CC(n-1)(n)TOTALENERGY. CC, coupled cluster. CC2CORRELATIONENERGY. CC2TOTALENERGY. CC3_FOLLOW_ROOT (CCEOM). CC3CORRELATIONENERGY. CC3TOTALENERGY. CC4CORRELATIONENERGY. CC4TOTALENERGY. CC_A_RAS3_MAX (DETCI). CC_B_RAS3_MAX (DETCI). CC_DIIS_MAX_VECS (OCC). CC_DIIS_MIN_VECS (OCC). CC_EX_LEVEL (DETCI). CC_FIX_EXTERNAL (DETCI). CC_FIX_EXTERNAL_MIN (DETCI). CC_MACRO (DETCI). CC_MAXITER (OCC). CC_MIXED (DETCI). CC_NUM_THREADS (CCENERGY). (CCEOM). (CCTRIPLES). (PSIMRCC). CC_OS_SCALE (CCENERGY). CC_RAS34_MAX (DETCI). CC_RAS3_MAX (DETCI). CC_RAS4_MAX (DETCI). CC_SCALE_O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:9193,wrap,wrappers,9193,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,": %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); PsiMod.print_out(tables). return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options ; # are set for different qc steps.; [docs]def run_plugin_omega(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls, as well; as typical options, to access Rob Parrish's omega plugin. >>> energy('plugin_omega'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). plugfile = PsiMod.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; PsiMod.plugin_load(""%s"" % (plugfile)). PsiMod.set_global_option('BASIS', 'AUG-CC-PVDZ'); PsiMod.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); PsiMod.set_global_option('REFERENCE', 'UHF'); PsiMod.set_global_option('SCF_TYPE', 'DF'); energy('scf', **kwargs). PsiMod.set_global_option('dft_functional', 'wB97'); PsiMod.set_global_option('dft_order_spherical', 25); PsiMod.set_global_option('dft_num_radial', 35); PsiMod.set_global_option('omega_procedure', 'ip'); PsiMod.set_global_option('maxiter', 50); PsiMod.set_global_option('d_convergence', 5); PsiMod.set_global_option('e_convergence', 7); PsiMod.plugin(""plugin_omega.so""). return PsiMod.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrillgroup_gold_standard'] = sherrillgroup_gold_standard; procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/aliases.html:5308,rout,routines,5308,psi4manual/4.0b2/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/aliases.html,1,['rout'],['routines']
Integrability,": BOYS, PIPEK_MEZEY; Default: BOYS. DLPNO_MAXITER¶. Maximum number of iterations to determine the MP2 amplitudes. Type: integer; Default: 50. E_CONVERGENCE¶. Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. LOCAL_CONVERGENCE¶. Convergence criteria for the Foster-Boys orbital localization. Type: conv double; Default: 1.0e-12. LOCAL_MAXITER¶. Maximum iterations in Foster-Boys localization. Type: integer; Default: 1000. PNO_CONVERGENCE¶. General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. R_CONVERGENCE¶. Residual convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. Expert Expert Options¶. DLPNO_ALGORITHM¶. Which DLPNO Algorithm to run (not set by user). Type: string; Possible Values: MP2; Default: MP2. F_CUT¶. Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations. Type: double; Default: 1e-5. S_CUT¶. Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. T_CUT_CLMO¶. Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO¶. Basis set coefficient threshold for including basis function (n) in domain of PAO (u). Type: double; Default: 1e-3. T_CUT_DO¶. DOI threshold for including PAO (u) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_DO_PRE¶. DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening. Type: double; Default: 3e-2. T_CUT_DO_IJ¶. DOI threshold for treating LMOs (i,j) as interacting. Type: double; Default: 1e-5. T_CUT_MKN¶. Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i). Type: double; Default: 1e-3. T_CUT_PNO¶. Occupation number threshold for removing PNOs. Type: double; Default: 1e-8. T_CUT_PRE¶. Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting. Type: double; Default: 1e-6. Expert DOI Grid Options¶. D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__dlpno.html:1468,depend,dependencies,1468,psi4manual/master/autodir_options_c/module__dlpno.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__dlpno.html,1,['depend'],['dependencies']
Integrability,": an open-source quantum chemistry software package; #; # Copyright (c) 2007-2016 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This program is free software; you can redistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. [docs]def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :ref:`Wavefu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html:1224,wrap,wrappers,1224,psi4manual/1.0.0/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html,1,['wrap'],['wrappers']
Integrability,": bool = False,; commandsInsteadDict: bool = False,; globalsOnly: bool = False,; stateInsteadMediated: bool = False,; ) -> Union[Dict, str]:; """"""Capture current state of :py:class:`psi4.core.Options` information. Parameters; ----------; changedOnly; Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict; Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in 'GLOBALS' subdictionary; and locals in subdictionaries by module.; globalsOnly; Record only global options to save time querying the; :py:class:`~psi4.core.Options` object.; When False, record module-level options, too.; stateInsteadMediated; When ``True``, querying this function for options to be later *reset* into the same; state -- the raw values and has_changed status at the global and local levels.; When ``False``, querying this function for mediated options to be *used* -- the results; of the globals/locals handshake as computed by the Options object itself. Here,; ``dict[module][option][value]`` is the value to be used by module. Returns; -------; Dict; When `commandsInsteadDict` is False.; str; When `commandsInsteadDict` is True. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - command return doesn't revoke has_changed setting for unchanged with changedOnly=False. - not all kwargs are independent. """"""; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}; options = collections.defaultdict(dict); commands = ''; for opt in core.get_global_option_list():; hoc = core.has_global_option_changed(opt); if hoc or not changedOnly:; if opt in ['DFT_CUSTOM_FUNCTIONAL', 'EXTERN']: # Feb 2017 hack; continue; val = core.get_global_option(opt); options['GLOBALS'][opt] = {'value': val, 'has_changed': hoc}; if isinstance(val, str):; commands += """"""core.set_global_option('%s', '%s')\n"""""" % (opt, val); else:; co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html:12004,mediat,mediated,12004,psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,4,['mediat'],['mediated']
Integrability,": docstrings from *.py files in psi4/psi4/share/psi4/databases; Basis Sets: *.gbs files in psi4/psi4/share/psi4/basis; C++ Keywords: psi4/psi4/src/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/psi4/include/psi4/psifiles.h. Some documentation is even extracted from PSI4 objects at runtime. psi4: docstrings for the psi4 built-in module constructed in psi4/psi4/src/psi4; DFT: functional availability and characteristics as encoded in psi4/psi4/driver/procedures/dft_functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/psi4/driver/qcdb/basislistdunning.py and psi4/psi4/driver/qcdb/basislistother.py. Building all the documentation takes ~15 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~15 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; 1>>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Doc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/documentation-1.html:3105,depend,dependency,3105,psi4manual/1.2.1/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/documentation-1.html,6,['depend'],['dependency']
Integrability,": integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105295,integrat,integration,105295,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Integrability,": psi4.core.MintsHelper, arg0: int, arg1: bool, arg2: bool) → psi4.core.CdSalcList¶; Returns a CdSalcList object. core_hamiltonian_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative T + V + Perturb integrals. dipole_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative dipole integrals. electric_field(self: psi4.core.MintsHelper, origin: List[float] = [0.0, 0.0, 0.0], deriv: int = 0) → List[psi4.core.Matrix]¶; Vector electric field integrals. electric_field_value(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶; Electric field expectation value at given sites. factory(self: psi4.core.MintsHelper) → psi4.core.MatrixFactory¶; Returns the Matrix factory being used. induction_operator(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶; Induction operator, formed by contracting electric field integrals with dipole moments at given coordinates (needed for EFP and PE). integral(self: psi4.core.MintsHelper) → psi4.core.IntegralFactory¶; Integral factory being used. integrals(self: psi4.core.MintsHelper) → None¶; Molecular integrals. integrals_erf(self: psi4.core.MintsHelper, w: float = - 1.0) → None¶; ERF integrals. integrals_erfc(self: psi4.core.MintsHelper, w: float = - 1.0) → None¶; ERFC integrals. kinetic_grad(self: psi4.core.MintsHelper, arg0: psi4.core.Matrix) → psi4.core.Matrix¶; First nuclear derivative kinetic integrals. mo_elec_dip_deriv1(self: psi4.core.MintsHelper, atom: int, C1: psi4.core.Matrix, C2: psi4.core.Matrix) → List[psi4.core.Matrix]¶; Gradient of MO basis electric dipole integrals: returns (3 * natoms) matrices. mo_erf_eri(self: psi4.core.MintsHelper, omega: float, C1: psi4.core.Matrix, C2: psi4.core.Matrix, C3: psi4.core.Matrix, C4: psi4.core.Matrix) → psi4.core.Matrix¶; MO ERFC Omega Integrals. mo_eri(self: psi4.core.MintsHelper, C1: psi4.core.Matrix, C2: p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.mintshelper.html:12775,contract,contracting,12775,psi4manual/1.4.0/api/psi4.core.mintshelper.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.mintshelper.html,2,['contract'],['contracting']
Integrability,":; * output goes to output file; * gradient returned as psi4.core.Matrix, not list o’lists; * scratch is written to randomly named subdirectory of psi scratch; * psivar “DISPERSION CORRECTION ENERGY” is set; * verbose triggered when PRINT keywork of SCF module >=3. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg2. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1); Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; vector, s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html:50642,interface,interface,50642,psi4manual/1.2.1/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html,1,['interface'],['interface']
Integrability,":; cbs_method_kwargs = ['scf_wfn', 'corl_wfn', 'delta_wfn']; cbs_method_kwargs += [f'delta{x}_wfn' for x in range(2, 6)]; for method in cbs_method_kwargs:; if method in kwargs:; cbs_methods.append(kwargs[method]); return cbs_methods. def _parse_cbs_gufunc_string(method_name):; """""" A helper function that parses a ``""method/basis""`` input string; into separate method and basis components. Also handles delta corrections. Parameters; ----------; method_name : str; A ``""method/basis""`` style string defining the calculation. Returns; -------; tuple; Tuple in the ``(method_list, basis_list)`` format, where ``method_list``; is the list of the component methods, and ``basis_list`` is the list of; basis sets forming the extrapolation for each specified method.; E.g. ``""mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz""`` would return:; ``([""mp2"", ""ccsd(t)""], [""cc-pv[tq]z"", ""cc-pvtz""])``.; """""". method_name_list = re.split(r""""""\+(?=\s*[Dd]:)"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(; ""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(f""""""CBS gufunc: Too many brackets given! {method_str}""""""). if method_str.count('/') != 1:; raise ValidationError(f""""""CBS gufunc: All methods must specify a basis with '/'. {method_str}""""""). if num > 0:; method_str = method_str.strip(); if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; A text based parser of the CBS method string. Provided to handle ""method/basis""; specification of the requested calculations. Also handles ""simple"" (i.e.; one-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html:63754,wrap,wrapper,63754,psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,2,['wrap'],['wrapper']
Integrability,":; errors.append((name, ""'None' does not match."")). else:; errors.append((name, f""Type {type(expected)} not understood -- stopping recursive compare."")). return errors. [docs]def compare_recursive(; expected: Union[Dict, BaseModel, ""ProtoModel""], # type: ignore; computed: Union[Dict, BaseModel, ""ProtoModel""], # type: ignore; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; forgive: List[str] = None,; equal_phase: Union[bool, List] = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""; Recursively compares nested structures such as dictionaries and lists. Parameters; ----------; expected; Reference value against which `computed` is compared.; Dict may be of any depth but should contain Plain Old Data.; computed; Input value to compare against `expected`.; Dict may be of any depth but should contain Plain Old Data.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Notes; -----. .. code-block:: python. absolute(computed - expected) <= (atol + rtol * absolute(expected)). """"""; label = label or sys._getframe().f_back.f_code.co_name; if atol >= 1:; raise ValueError(; ""Prior to v0.4.0, ``compare_recursive`` used to 10**-atol any atol >=1. That has ceased, so please express your atol literally.""; ); if return_handler is None:; return_handler = _handle_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:11990,message,messages,11990,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['messages']
Integrability,":; from p4xcpt import *; except ImportError:; from .exceptions import *; from .dashparam import *; from .molecule import Molecule. # DGAS This should be removed!; import psi4. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be independently compiled and found in; :envvar:`PATH` or :envvar:`PSIPATH`.; *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. """"""; # Create (if necessary) and update qcdb.Molecule; if isinstance(self, Molecule):; # called on a qcdb.Molecule; pass; elif isinstance(self, psi4.Molecule):; # called on a python export of a psi4.Molecule (py-side through Psi4's driver); self.create_psi4_string_from_molecule(); elif isinstance(self, basestring):; # called on a string representation of a psi4.Molecule (c-side through psi4.Dispersion); self = Molecule(self); else:; raise ValidationError(""""""Argument mol must be psi4string or qcdb.Molecule""""""); self.update_geometry(). # Validate arguments; dashlvl = dashlvl.lower(); dashlvl = dash_alias['-' + dashlvl][1:] if ('-' + dashlvl) in dash_alias.keys() else dashlvl; if dashlvl not in dashcoeff.keys():; raise ValidationError(""""""-D correction level %s is not available. Choose among %s."""""" % (dashlvl, dashcoeff.keys())). if dertype is None:; dertype = -1; elif der0th.match(str(dertype)):; dertype = 0; el",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html:2254,interface,interface,2254,psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/interface_dftd3.html,1,['interface'],['interface']
Integrability,":class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]; class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string desc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:5189,rout,routine,5189,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['rout'],['routine']
Integrability,":py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col),; computed.get(irrep, row, col))); failed = 1; break. if (failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:9448,message,message,9448,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,":py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" %; (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" %; (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if (failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:9349,message,message,9349,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"; """"""Error called for problems with syntax input file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class IncompleteAtomError(QcdbException):; """"""Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg. [docs]class ParsingValidationError(QcdbException):; """"""Error called for problems with syntax from a QC output file. Prints; error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException: %s\n\n' % (msg)). [docs]class FragmentCountError(QcdbException):; """"""Error called molecule has wrong number of fragments for method.; Prints error message *msg* to standard output stream. """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; #print('\nQcdbException: %s\n\n' % (msg)). [docs]class BasisSetFileNotFound(QcdbException):; """""". """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException BasisSetFileNotFound: %s\n\n' % (msg)). [docs]class BasisSetNotFound(QcdbException):; """""". """"""; def __init__(self, msg, silent=False):; QcdbException.__init__(self, msg); self.msg = msg; if not silent:; print('\nQcdbException BasisSetNotFound: %s\n\n' % (msg)). [docs]class BasisSetNotDefined(QcdbException):; """""". """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nQcdbException BasisSetNotDefined: %s\n\n' % (msg)). [docs]class Dftd3Error(QcdbException):; """""". """"""; def __init__(self, msg):; QcdbException.__init__(self, msg); self.msg = msg; print('\nDftd3Error: %s\n\n' % (msg)). Quick search. Enter search terms or a module, class or function",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/exceptions.html:2507,message,message,2507,psi4manual/1.0.0/_modules/qcdb/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/exceptions.html,1,['message'],['message']
Integrability,"; ""driver"": driver,; ""derivative_int"": derivative_int,; ""method"": circs[1],; ""link"": docslink,; ""method_type"": (circs[3], f""{circs[2].upper()}={circs[3]}""),; ""reference"": (circs[4], f""REFERENCE={circs[4]}""),; ""qc_module"": (circs[5], f""QC_MODULE={circs[5] or '(auto)'}""),; # Note on fcae: most select_* functions don't consider this circumstance. Index 0 of tuple documents this.; # Index 1 of tuple always returns the circumstance, regardless of whether considered, so user can look up availability in table.; ""fcae"": (all_electron, f""FREEZE_CORE={core.get_global_option('FREEZE_CORE')}""),; }. # Note that this message is not generally seen, as driver_util catches and edits it from `stats`; conditions2 = [stats[k][1] for k in [""method_type"", ""reference"", ""fcae"", ""qc_module""]]; msg = f""Method={stats['method']} is not available for target derivative level (dertype={derivative_int}) under conditions {', '.join(conditions2)}. See {stats['link']}."". PsiException.__init__(self, msg); self.message = msg; self.stats = stats. # Dftd3Error ceased to be used by v1.4. Class removed by v1.7; # class Dftd3Error(PsiException):. [docs]; class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detecte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:12761,message,message,12761,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"; ""driver"": driver,; ""derivative_int"": derivative_int,; ""method"": circs[1],; ""link"": docslink,; ""method_type"": (circs[3], f""{circs[2].upper()}={circs[3]}""),; ""reference"": (circs[4], f""REFERENCE={circs[4]}""),; ""qc_module"": (circs[5], f""QC_MODULE={circs[5] or '(auto)'}""),; # Note on fcae: most select_* functions don't consider this circumstance. Index 0 of tuple documents this.; # Index 1 of tuple always returns the circumstance, regardless of whether considered, so user can look up availability in table.; ""fcae"": (all_electron, f""FREEZE_CORE={core.get_global_option('FREEZE_CORE')}""),; }. # Note that this message is not generally seen, as driver_util catches and edits it from `stats`; conditions2 = [stats[k][1] for k in [""method_type"", ""reference"", ""fcae"", ""qc_module""]]; msg = f""Method={stats['method']} is not available for target derivative level (dertype={derivative_int}) under conditions {', '.join(conditions2)}. See {stats['link']}."". PsiException.__init__(self, msg); self.message = msg; self.stats = stats. # Dftd3Error ceased to be used by v1.4. Class removed by v1.7; # class Dftd3Error(PsiException):. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:12737,message,message,12737,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import numpy as np. from psi4 import core; from .exceptions import *. ### Matrix and Vector properties. # The next three functions make me angry; def translate_interface(interface):; """"""; This is extra stupid with unicode; """""". if sys.version_info[0] > 2:; return interface. nouni_interface = {}; for k, v in interface.items():; if k == 'typestr':; nouni_interface[k.encode('ascii', 'ignore')] = v.encode('ascii', 'ignore'); else:; nouni_interface[k.encode('ascii', 'ignore')] = v. return nouni_interface. class numpy_holder(object):; """"""; Blank object, stupid. Apparently you cannot create a view directly from a dictionary; """"""; def __init__(self, interface):; self.__array_interface__ = translate_interface(interface). def _get_raw_views(self, copy=False):; """"""; Gets simple raw view of the passed in object.; """"""; ret = []; for data in self.array_interface():. # Yet another hack; if isinstance(data[""shape""], list):; data[""shape""] = tuple(data[""shape""]). if 0 in data[""shape""]:; ret.append(np.empty(shape=data[""shape""])); else:; ret.append(np.array(numpy_holder(data), copy=copy)); return ret. def _find_dim(arr, ndim):; """"""; Helper function to help deal with zero or sized arrays; """""". # Zero arrays; if (arr is None) or (arr is False):; return [0] * ndim. # Make sure this is a numpy array like thing; try:; arr.shape; except:; raise ValidationError(""Expected numpy array, found object of type '%s'"", type(arr)). if len(arr.shape) == ndim:; return [arr.shape[x] for x in range(ndim)]; else:; raise ValidationError(""Input array does not have a valid shape.""). [docs]def array_to_matrix(self, arr, name=""New Matrix"", dim1=None, dim2=None):; """"""; Converts a numpy array or list of numpy arra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html:1817,interface,interface,1817,psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,1,['interface'],['interface']
Integrability,"; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Parameters; ----------; eqn_description : str; Type of QC routine that has failed (e.g., SCF); iteration : int; What iteration we failed on. """""". def __init__(self, eqn_description, iteration):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, iteration)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:1837,message,message,1837,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"; # class PsiImportError(PsiException):. [docs]class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:3575,message,message,3575,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: str; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html:1530,rout,routines,1530,psi4manual/1.4.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html,2,['rout'],['routines']
Integrability,"; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core, extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:1569,message,message,1569,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"; #elif (lowername == 'scs-mi-omp3'):; # psi4.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp3-vdw'):; psi4.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'DO_SCS', 'TRUE'); psi4.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); psi4.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = p4util.OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; psi4.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; psi4.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'DO_SOS', 'TRUE'); psi4.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); psi4.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = p4util.OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); psi4.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = p4util.OptionsState(; ['GLOBALS', 'DERTYPE']). psi4.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); psi4.deriv(). optstash.restore",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/proc.html:9136,rout,routine,9136,psi4manual/4.0b5/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/proc.html,1,['rout'],['routine']
Integrability,"; #user_df_basis_mp2 = PsiMod.get_option('DF_BASIS_MP2'); #user_df_basis_cc = PsiMod.get_option('DF_BASIS_CC'); #user_df_basis_sapt = PsiMod.get_option('DF_BASIS_SAPT'); #user_df_basis_elst = PsiMod.get_option('DF_BASIS_ELST'); b_user_wfn = PsiMod.has_global_option_changed('WFN'); user_wfn = PsiMod.get_option('WFN'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:61973,wrap,wrapper,61973,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"; (self.entry_number(), self.is_computed(), self.Z(), self.charge(),; self.mass(), self.symbol(), self.label(), self.is_ghosted(),; self.coordinates, self.PYbasissets, self.PYshells)). [docs]class CartesianEntry(CoordEntry):; """"""Class to hold all information about an atom, including its; coordinate specification as three Cartesians. """""". def __init__(self, entry_number, Z, charge, mass, symbol, label, x, y, z, basis=None, shells=None):; CoordEntry.__init__(self, entry_number, Z, charge, mass, symbol, label, basis, shells); self.x = x; self.y = y; self.z = z. [docs] def compute(self):; """"""Computes the values of the coordinates (in whichever units; were inputted), returning them in a Vector. """"""; if self.computed:; return self.coordinates; self.coordinates[0] = self.x.compute(); self.coordinates[1] = self.y.compute(); self.coordinates[2] = self.z.compute(); self.computed = True; return self.coordinates. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates and any variables that may depend on it. """"""; self.coordinates[0] = x; self.coordinates[1] = y; self.coordinates[2] = z. self.x.rset(x); self.y.rset(y); self.z.rset(z). self.computed = True. [docs] def type(self):; """"""The type of CoordEntry specialization.""""""; return 'CartesianCoord'. [docs] def print_in_input_format(self):; """"""Prints the updated geometry, in the format provided by the user.""""""; xstr = self.x.variable_to_string(12); ystr = self.y.variable_to_string(12); zstr = self.z.variable_to_string(12); return "" %17s %17s %17s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] def print_in_input_format_cfour(self):; """"""Prints the updated geometry, in the format provided by the user.; This, for Cfour, not different from regular version. """"""; xstr = self.x.variable_to_string(12); ystr = self.y.variable_to_string(12); zstr = self.z.variable_to_string(12); return "" %17s %17s %17s\n"" % (xstr, ystr, zstr); # should go to outfile. [docs] ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html:12358,depend,depend,12358,psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,1,['depend'],['depend']
Integrability,"; * output goes to output file; * gradient returned as psi4.core.Matrix, not list o’lists; * scratch is written to randomly named subdirectory of psi scratch; * psivar “DISPERSION CORRECTION ENERGY” is set; * verbose triggered when PRINT keywork of SCF module >=3. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg2. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; vect",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:141638,interface,interface,141638,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,3,['interface'],['interface']
Integrability,"; -------; numpy.ndarray; The Lorentzian profile.; """"""; prefactor = 1.0 / np.pi; numerator = self.gamma(x_0) / 2.0; denominator = (self.domain - x_0)**2 + numerator**2. return prefactor * (numerator / denominator). [docs] def maximum(self, x_0: float) -> float:; """"""Maximum value of Lorentzian profile centered at `x_0`. Parameters; ----------; x_0; Center of the Lorentzian, i.e. its maximum. """"""; return 2.0 / (np.pi * self.gamma(x_0)). [docs]def prefactor_opa() -> float:; r""""""Prefactor for converting microscopic observable to decadic molar; extinction coefficient in one-photon absorption. Notes; -----; This function implements the calculation of the following prefactor:. .. math::. k = \frac{4\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c}. The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index :math:`n` is, in general, frequency-dependent. We; assume it to be constant and equal to 1.; """""". N_A = constants.get(""Avogadro constant""); c = constants.get(""speed of light in vacuum""); hbar = constants.get(""Planck constant over 2 pi""); e_0 = constants.get(""electric constant""); au_to_Coulomb_centimeter = constants.get(""elementary charge"") * constants.get(; ""Bohr radius"") * constants.conversion_factor(""m"", ""cm""). numerator = 4.0 * np.pi**2 * N_A; denominator = 3 * 1000 * np.log(10) * (4 * np.pi * e_0) * hbar * c. return (numerator / denominator) * au_to_Coulomb_centimeter**2. [docs]def prefactor_ecd() -> float:; r""""""Prefactor for converting microscopic observable to decadic molar; extinction coefficient in electronic circular dichroism. Notes; -----; This function implements the calculation of the following prefactor:. .. math::. k = \frac{16\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c^{2}}. The prefactor is computed in SI units and then adjusted for the fact th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/spectrum.html:4642,depend,dependent,4642,psi4manual/1.7.x/_modules/psi4/driver/p4util/spectrum.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/spectrum.html,1,['depend'],['dependent']
Integrability,"; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cbs-1.html:1131,wrap,wrapper,1131,psi4manual/1.2.1/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:12775,wrap,wrapped,12775,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['wrap'],['wrapped']
Integrability,"; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:12777,wrap,wrapped,12777,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['wrap'],['wrapped']
Integrability,"; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28# DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. name: string, name of the functional, for custom defined functionals used for printing only.; xc_functionals: dict, definition of a complete (X + C) functional based in LibXC name; x_functionals: dict, definition of exchange functionals using LibXC names; c_functionals: dict, definition of correlation functionals using LibXC names; x_hf: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; c_mp2: dict, parameters dealing with MP2 correlation for double hybrid DFT; dispersion: dict, definition of dispersion corrections; citation: string, citation for the method, for printing purposes; description: string, description of the method, for printing purposes. The full interface is defined in :ref:driver/procrouting/dft_funcs/dict_builder.py, all standard; functionals provided in Psi4 are implemented in the dict_*_funcs.py files in the same folder. table of contents. DFT: Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms; IP Fitting; Fractional Particle Curves; Dispersion Corrections; Recommendations; Advanced Functional Use and Manipulation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:30288,interface,interface,30288,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,2,['interface'],['interface']
Integrability,"; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3; 4; 5unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:13829,message,message,13829,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,6,['message'],['message']
Integrability,"; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOU",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:29831,rout,route,29831,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['rout'],['route']
Integrability,"; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). full_hess_every = psi4.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = p4util.OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. psi4.get_active_molecule().update_geometry(); mol = psi4.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= psi4.get_global_option('GEOM_MAXITER'):; mol = psi4.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully "" +\; ""making sure all symmetry-dependent information in "" +\; ""the input, such as DOCC, is correct.""); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; if (n > 1) and (not isSowReap):; psi4.set_local_option('SCF', 'GUESS', 'READ'). # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (thisenergy == 0.0):; return 0.0. # S/R: Move opt data file from last pass into namespace for this pass; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (n != 0):; psi4.IOManager.shared_object().set_specific_retention(1, True); psi4.IOManager.shared_object().set_specific_path(1, './'); if 'opt_datafile' in kwargs:; restartfile = kwargs.pop('opt_datafile'); if(psi4.me() == 0):; shutil.copy(restartfile, p4util.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:51716,depend,dependent,51716,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['depend'],['dependent']
Integrability,"; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: inte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:12035,depend,depending,12035,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,6,['depend'],['depending']
Integrability,"; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:15244,wrap,wrapper,15244,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['wrap'],['wrapper']
Integrability,"; DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ...; int n = 100;. // Allocate A matrix;; double** A = block_matrix(n,n);. // Call the LAP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:5075,rout,routines,5075,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,9,['rout'],['routines']
Integrability,"; DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:5199,rout,routines,5199,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,4,['rout'],['routines']
Integrability,"; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF); SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF); SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:104231,integrat,integration,104231,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Integrability,"; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:6173,rout,routines,6173,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['rout'],['routines']
Integrability,"; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cfour.html:35122,rout,route,35122,psi4manual/1.7.x/cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cfour.html,1,['rout'],['route']
Integrability,"; PsiMod.ccsort(); returnvalue = PsiMod.ccenergy(). optstash.restore(); return returnvalue. [docs]def run_cc_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. """"""; PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_global_option('WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_global_option('WFN', 'CCSD_T'). PsiMod.cchbar(); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). if (name.lower() != 'ccenergy'):; PsiMod.set_global_option('WFN', 'SCF'); PsiMod.revoke_global_option_changed('WFN'); PsiMod.set_global_option('DERTYPE', 'NONE'); PsiMod.revoke_global_option_changed('DERTYPE'). [docs]def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; if (name.lower() == 'bccd'):; PsiMod.set_global_option('WFN', 'BCCD'). # Bypass routine scf if user did something special to get it to; # converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.set_global_option('DELETE_TEI', 'false'). while True:; PsiMod.transqt2(); PsiMod.ccsort(); returnvalue = PsiMod.ccenergy(); PsiMod.print_out('Brueckner convergence check: %d\n' % PsiMod.get_variable('BRUECKNER CONVERGED')); if (PsiMod.get_variable('BRUECKNER CONVERGED') == True):; break. return returnvalue. [docs]def run_bccd_t(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. """"""; PsiMod.set_global_option('WFN', 'BCCD_T'); run_bccd(name, **kwargs). return PsiMod.cctriples(). [docs]def run_scf_property(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to :py:func:`~proc.run_scf`",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/proc.html:15167,rout,routine,15167,psi4manual/4.0b3/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/proc.html,1,['rout'],['routine']
Integrability,"; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function; from __future__ import absolute_import. import re; import os; import sys; import uuid; from psi4.driver import pubchem; from psi4.driver.p4util.exceptions import *; from psi4.driver.p4util.util import set_memory; from psi4 import core. # globally available regex strings; pubchemre = re.compile(r'^(\s*pubchem\s*:\s*(.*)\n)$', re.MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html:2165,wrap,wrapping,2165,psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,1,['wrap'],['wrapping']
Integrability,"; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. mbis-6; MBIS calculation on H2O. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. numpy-array-interface; Numpy interface testing. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. cc13d; Tests analytic CC2 gradients. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf3; File retention, docc, socc, and bond distances specified explicitly. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:41304,interface,interface,41304,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,4,['interface'],['interface']
Integrability,"; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gau2grid by D. G. A. Smith. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/gau2grid.html:2393,depend,dependencies,2393,psi4manual/1.8.x/gau2grid.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/gau2grid.html,1,['depend'],['dependencies']
Integrability,"; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gau2grid by D. G. A. Smith. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/gau2grid.html:2393,depend,dependencies,2393,psi4manual/1.9.x/gau2grid.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/gau2grid.html,1,['depend'],['dependencies']
Integrability,"; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; To indicate MRCC as the target software, set QC_MODULE=MRCC.; This is a change as of October 2022; previously, one prefixed the method by “mr”; to indicate MRCC (e.g., energy('mrccsdt')).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). 'ccsdt' in the call to energy() plus qc_module=mrcc instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the qc_module=mrcc is optional since PSI4 has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of QC_MODULE; will default to the CCENERGY module, and specification with value mrcc is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use 'ccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC.; Perturbative methods (ccsd(t), ccsdtqp(h)_l, etc.); are available with REFERENCE ROHF in versions of MRCC published; at least after July 1, 2014.; When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101] PSI4 will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]. QC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/mrcc.html:1677,rout,route,1677,psi4manual/1.7.x/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/mrcc.html,4,['rout'],['route']
Integrability,"; Wavefunction.; # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:10802,wrap,wraps,10802,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,8,['wrap'],['wraps']
Integrability,"; Wavefunction.; # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within Psi4; input files. For example, to loop over three basis sets, the following code can; be used:; basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:11370,wrap,wraps,11370,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['wrap'],['wraps']
Integrability,"; actives += """"""core.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""core.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""core.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\ncore.set_memory_bytes(%s)\n\n"""""" % (core.get_memory()); for chgdopt in core.get_global_option_list():; if core.has_global_option_changed(chgdopt):; chgdoptval = core.get_global_option(chgdopt); #chgdoptval = core.get_option(chgdopt); if isinstance(chgdoptval, (str, bytes)):; commands += """"""core.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""core.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; pass; #raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'. if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(True)\n""""""; commands += """"""molecule.fix_com(True)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""core.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""core.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects resul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:19693,wrap,wrapper,19693,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,1,['wrap'],['wrapper']
Integrability,"; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; The conda package is compiled to least-common-denominator, namely SSE instruction set.; If using the PSI4 binary, simint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/simint-1.html:1427,depend,dependent,1427,psi4manual/1.4.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/simint-1.html,9,['depend'],['dependent']
Integrability,"; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:22206,message,message,22206,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,2,['message'],['message']
Integrability,"; cbs_method_kwargs = ['scf_wfn', 'corl_wfn', 'delta_wfn']; cbs_method_kwargs += ['delta%d_wfn' % x for x in range(2, 6)]; for method in cbs_method_kwargs:; if method in kwargs:; cbs_methods.append(kwargs[method]); return cbs_methods. def _parse_cbs_gufunc_string(method_name):; """""" A helper function that parses a ``""method/basis""`` input string; into separate method and basis components. Also handles delta corrections. Parameters; ----------; method_name : str; A ``""method/basis""`` style string defining the calculation. Returns; -------; tuple; Tuple in the ``(method_list, basis_list)`` format, where ``method_list``; is the list of the component methods, and ``basis_list`` is the list of; basis sets forming the extrapolation for each specified method.; E.g. ``""mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz""`` would return:; ``([""mp2"", ""ccsd(t)""], [""cc-pv[tq]z"", ""cc-pvtz""])``.; """""". method_name_list = re.split(""""""\+(?=\s*[Dd]:)"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(; ""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(""""""CBS gufunc: Too many brackets given! %s """""" % method_str). if method_str.count('/') != 1:; raise ValidationError(""""""CBS gufunc: All methods must specify a basis with '/'. %s"""""" % method_str). if num > 0:; method_str = method_str.strip(); if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; A text based wrapper of the CBS function. Provided to handle ""method/basis""; specification of the requested calculations. Also handles ""simple"" (i.e.; one-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:62196,wrap,wrapper,62196,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody() for computation of interaction energies wit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cfour.html:25524,interface,interface,25524,psi4manual/1.7.x/cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cfour.html,4,['interface'],['interface']
Integrability,"; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:25401,interface,interface,25401,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,5,['interface'],['interface']
Integrability,"; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; for method in cbs_methods:; _filter_renamed_methods(""gradient"", method); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); _filter_renamed_methods(""gradient"", lowername); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:41265,depend,dependent,41265,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['depend'],['dependent']
Integrability,"; docstring. DSYR2(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYR2K(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYRK(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:2610,rout,routines,2610,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,4,['rout'],['routines']
Integrability,"; fix_com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; molecular_charge=molecular_charge,; molecular_multiplicity=molecular_multiplicity,; comment=comment,; provenance=provenance,; connectivity=connectivity,; domain='qm',; missing_enabled_return=missing_enabled_return,; tooclose=tooclose,; zero_ghost_fragments=zero_ghost_fragments,; nonphysical=nonphysical,; mtol=mtol,; verbose=verbose). qmol = core.Molecule.from_dict(molrec); geom = np.array(molrec[""geom""]).reshape((-1, 3)); qmol._initial_cartesian = core.Matrix.from_array(geom). if return_dict:; return qmol, molrec; else:; return qmol. @classmethod; def _molecule_from_schema(cls, molschema: Dict, return_dict: bool = False, nonphysical: bool = False, verbose: int = 1) -> Union[core.Molecule, Tuple[core.Molecule, Dict]]:; """"""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~psi4.core.Molecule.from_arrays`. Parameters; ----------; molschema; Dictionary form of Molecule following known schema.; return_dict; Additionally return Molecule dictionary intermediate.; nonphysical; Do allow masses outside an element's natural range to pass validation?; verbose; Amount of printing. Returns; -------; mol : :py:class:`psi4.core.Molecule`; molrec : dict; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""; molrec = qcel.molparse.from_schema(molschema, nonphysical=nonphysical, verbose=verbose). qmol = core.Molecule.from_dict(molrec); geom = np.array(molrec[""geom""]).reshape((-1, 3)); qmol._initial_cartesian = core.Matrix.from_array(geom). if return_dict:; return qmol, molrec; else:; return qmol. [docs]; def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the core.Molecule class. """"""; cls.__setattr__ = molecule_set_attr; cls.__getattr__ = molecule_get_attr. cls.to_arrays = qcdb.Molecule.to_arrays;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/molutil.html:4935,wrap,wrapper,4935,psi4manual/1.8.x/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/molutil.html,3,['wrap'],['wrapper']
Integrability,"; import math; import sys; from typing import Dict, List, Tuple, Union. import numpy as np; from qcelemental import Datum. import psi4 # for typing. from .constants import constants; from .libmintsmolecule import compute_atom_map. LINEAR_A_TOL = 1.0E-2 # tolerance (roughly max dev) for TR space. __all__ = [""compare_vibinfos"", ""filter_nonvib"", ""filter_omega_to_real"", ""harmonic_analysis"", ""hessian_symmetrize"", ""print_molden_vibs"", ""print_vibs"", ""thermo""]. [docs]; def compare_vibinfos(expected: Dict[str, Datum], computed: Dict[str, Datum], tol: float, label: str, verbose: int = 1, forgive: List = None, required: List = None, toldict: Dict[str, float] = None) -> bool:; """"""Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters; ----------; expected; Reference value against which `computed` is compared.; computed; Input value to compare against `expected`. Must contain all fields of `expected`.; tol; Absolute tolerance.; label; Label for passed and error messages.; verbose; Control printing.; forgive; Keys in top level which may change between `expected` and `computed` without triggering failure.; required; Keys in top level which must be present in `computed`. (""omega"" recc. for vibs.); toldict; Tolerances for specific keys. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise. """"""; np.set_printoptions(formatter={'float': '{: 0.4f}'.format}). def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass.; """"""; msg = f'\t{label:.<66}PASSED'; print(msg); sys.stdout.flush(). def print_stuff(asp, same, ref, val, space=''):; if verbose >= 1:; print(asp, ':', same); if (verbose >= 2) or (not same and verbose >= 1):; print('\texp:', space, ref); print('\tobs:', space, val); if verbose >= 1:; if not same:; try:; print('\tdif:', space, val - ref); except TypeError:; print('\tdif: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html:2111,message,messages,2111,psi4manual/1.9.x/_modules/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html,4,['message'],['messages']
Integrability,"; import os; import sys; import uuid. from psi4 import core; from psi4.driver.qcdb.molparse import pubchem; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # globally available regex strings; pubchemre = re.compile(r'^(\s*pubchem\s*:\s*(.*)\n)$', re.MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; if isbasis:; wordre = re.compile(r'(([$]?)([-+()*.,\w\""\'/\\]+))'); else:; wordre = re.compile(r'(([$]?)([-+()*.\w\""\'/\\]+))'); string = wordre.sub(process_word_quotes, string); return string. def dequotify(string):; if string[0] == '""' and str",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html:2406,message,message,2406,psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,2,['message'],['message']
Integrability,; molutil — PSI4 [beta5] documentation. /p4util; ; p4util.basislist — PSI4 [beta5] documentation; p4util.basislistdunning — PSI4 [beta5] documentation; p4util.basislistother — PSI4 [beta5] documentation; p4util.optproc — PSI4 [beta5] documentation; p4util.procutil — PSI4 [beta5] documentation; p4util.text — PSI4 [beta5] documentation; p4util.util — PSI4 [beta5] documentation. pcmgetkw — PSI4 [beta5] documentation; pcmpreprocess — PSI4 [beta5] documentation; proc — PSI4 [beta5] documentation; psiexceptions — PSI4 [beta5] documentation; pubchem — PSI4 [beta5] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta5] documentation; qcdb.exceptions — PSI4 [beta5] documentation; qcdb.libmintscoordentry — PSI4 [beta5] documentation; qcdb.libmintsmolecule — PSI4 [beta5] documentation; qcdb.molecule — PSI4 [beta5] documentation; qcdb.psiutil — PSI4 [beta5] documentation; qcdb.vecutil — PSI4 [beta5] documentation. qmmm — PSI4 [beta5] documentation; wrappers — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy__cachelevel.txt; ccenergy__cachet,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1625627,wrap,wrappers,1625627,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['wrap'],['wrappers']
Integrability,; molutil — PSI4 [beta5] documentation. /p4util; ; p4util.basislist — PSI4 [beta5] documentation; p4util.basislistdunning — PSI4 [beta5] documentation; p4util.basislistother — PSI4 [beta5] documentation; p4util.optproc — PSI4 [beta5] documentation; p4util.procutil — PSI4 [beta5] documentation; p4util.text — PSI4 [beta5] documentation; p4util.util — PSI4 [beta5] documentation. pcmgetkw — PSI4 [beta5] documentation; pcmpreprocess — PSI4 [beta5] documentation; proc — PSI4 [beta5] documentation; psiexceptions — PSI4 [beta5] documentation; pubchem — PSI4 [beta5] documentation. /qcdb; ; qcdb.dbproc — PSI4 [beta5] documentation; qcdb.exceptions — PSI4 [beta5] documentation; qcdb.libmintscoordentry — PSI4 [beta5] documentation; qcdb.libmintsmolecule — PSI4 [beta5] documentation; qcdb.molecule — PSI4 [beta5] documentation; qcdb.psiutil — PSI4 [beta5] documentation; qcdb.vecutil — PSI4 [beta5] documentation. qmmm — PSI4 [beta5] documentation; wrappers — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation; Overview: module code — PSI4 [beta5] documentation. _sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__onepdm_grid_cutoff.txt; ccdensity__onepdm_grid_dump.txt; ccdensity__onepdm_grid_stepsize.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccenergy__analyze.txt; ccenergy__ao_basis.txt; ccenergy__brueckner_orbs_r_convergence.txt; ccenergy__cachelevel.txt; ccenergy__cachety,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1517585,wrap,wrappers,1517585,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['wrap'],['wrappers']
Integrability,"; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers.; All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b vectors; int n = 100;; double* a = init_array(n);; double* b = init_array(n);. // Allocate A matrix;; double** A = block_matrix(n,n);; double** B = block_matrix(n,n);; double** C = block_matrix(n,n);. // Call the BLAS1 dot product between a and b; // n can be ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:1663,rout,routine,1663,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,18,['rout'],['routine']
Integrability,"; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/quickadddatabase.html:3467,rout,route,3467,psi4manual/1.6.x/quickadddatabase.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/quickadddatabase.html,1,['rout'],['route']
Integrability,"; psi4.driver.driver_cbs_helper.register_xtpl_function() to make; user-defined functions known to PSI4. psi4.driver.driver_cbs_helper.register_xtpl_function(func)[source]¶; Register a user-defined extrapolation function to use like an built-in one. Parameters; func (Callable) – A Python function that applies a basis set extrapolation formula to scalars and optionally to; NumPy arrays. See psi4/psi4/driver/driver_cbs_helper.py and pywrap-cbs1 for; examples. The name of the function should follow the pattern <scf|corl>_xtpl_<scientist>_<#basis>. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; Some existing examples are below. psi4.driver.aliases.sherrill_gold_standard(**kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses the composite wrapper to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:30467,wrap,wrapper,30467,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,1,['wrap'],['wrapper']
Integrability,"; reference = core.get_option(""SCF"", ""REFERENCE""); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option(""QC_MODULE""). func = None; if reference in [""RHF"", ""UHF""]:; if mtd_type == ""CONV"":; if module in [""""]:; core.print_out(""""""\nThis method is not available with conventional integrals. Add ""set """"""; """"""cc_type df"" or ""set cc_type cd"" to input to access this method.\n""""""); elif mtd_type == ""DF"":; if module in ["""", ""OCC""]:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop(""probe"", False):; return; else:; return func(name, **kwargs). def select_cc2(name, **kwargs):; """"""Function selecting the algorithm for a CC2 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). # [LAB Aug 2022] I'm leaving MRCC CC2 in as a route, but my c.2014 MRCC consistently yields:; # ""Approximate CC methods are not implemented for excitation level 2!""; # [LAB Aug 2022] DF CC2 enabled for test_gradient but only by deliberate `set qc_module ccenergy`; # since not advertised. See #2710. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module in ['CCENERGY']:; func = run_ccenergy; elif reference == 'UHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:33881,rout,route,33881,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,4,['rout'],['route']
Integrability,"; return cbs_methods. def _parse_cbs_gufunc_string(method_name):; method_name_list = re.split( """"""\+(?![^\[\]]*\]|[^\(\)]*\))"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(""""""CBS gufunc: Too many brackets given! %s """""" % method_str). if method_str.count('/') != 1:; raise ValidationError(""""""CBS gufunc: All methods must specify a basis with '/'. %s"""""" % method_str). if num > 0:; if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; Text based wrapper of the CBS function.; """""". # Catch kwarg issues; kwargs = p4util.kwargs_lower(kwargs); return_wfn = kwargs.pop('return_wfn', False); psi4.clean_variables(); user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False); ptype = kwargs.pop('ptype', None). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()); molecule.update_geometry(). # Sanitize total_method_name; label = total_method_name; total_method_name = total_method_name.lower(); total_method_name = total_method_name.replace(' ', ''). # Split into components; method_list, basis_list = _parse_cbs_gufunc_string(total_method_name). # Single energy call?; single_call = len(method_list) == 1; single_call &= '[' not in basis_list[0]; single_call &= ']' not in basis_list[0]. if single_call:; method_name = method_list[0]; basis = basis_list[0]. # Save some global variables so we can reset them later; optstash ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:57268,wrap,wrapper,57268,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"; self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(*circs); PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:2857,message,message,2857,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"; self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer."""""". def __init__(self, eqn_description, maxit, wfn):; ConvergenceError.__init__(self, eqn_description, maxit); self.wfn = wfn. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(*circs); PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:2859,message,message,2859,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers.; All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b vectors; int n = 100;; double* a = init_array(n);; double* b = init_array(n);. // Allocate A matrix;; double** A = block_matrix(n,n);; double** B = block_matrix(n,n);; double** C = bloc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:1627,rout,routines,1627,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,9,['rout'],['routines']
Integrability,"; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested PK integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/conventional procedure can significantly accelerate SCF; computations requiring exact integrals, especially when used in concert with the; integral-direct conventional algorithm.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/scf-1.html:4095,contract,contracted,4095,psi4manual/4.0b4/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/scf-1.html,4,['contract'],['contracted']
Integrability,"; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """"""; import psi4; import pubchem; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/inputparser.html:1607,wrap,wrapping,1607,psi4manual/4.0b5/_modules/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/inputparser.html,1,['wrap'],['wrapping']
Integrability,";; ""ParsingError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems parsing a text file. Prints error message""];; ""PsiException"" -> ""ParsingError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PastureRequiredError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when the specified value of *option* requires some""];; ""PsiException"" -> ""PastureRequiredError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PsiException"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error class for Psi.""];; ""PsiImportError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems import python dependencies. Prints error message""];; ""PsiException"" -> ""PsiImportError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""QMMM"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""Table"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Class defining a flexible Table object for storing data.""];; ""TestComparisonError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when a test case fails due to a failed""];; ""PsiException"" -> ""TestComparisonError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""ValidationError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems with t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:204121,depend,dependencies,204121,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['depend'],['dependencies']
Integrability,"= """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""core.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; core.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule; moleculeclone.set_geometry(displacement). # Perform the energy calculation; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); energies.append(core.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; core.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(moleculeclone, forcexyz=True).encode('utf-8')); freagent.write(p4util.format_options_for_input(moleculeclone, **kwargs).encode('utf-8')); p4util.format_kwargs_for_input(freagent, **kwargs); freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (energy.__name__, lowername)); freagent.write(""""""core.print_out('\\nHESSIAN RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""). # S/R: Read energy from each displaced geometry output file and save in energies array; elif freq_mode == 'reap':; exec(banners); core.set_variable('NUCLEAR REPULSION ENERGY', moleculeclone.nuclear_repulsion_energy()); energies.append(p4util.extract_sowreap_from_output(rfile, 'HESSIAN', n, freq_linkage, True)). # S/R: Quit sow after writing files. Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:79001,wrap,wrapper,79001,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['wrap'],['wrapper']
Integrability,"= """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if freq_mode == 'continuous':. # print progress to file and screen; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)); print("""""" %d"""""" % (n + 1), end=('\n' if (n + 1 == ndisp) else '')); sys.stdout.flush(). # Load in displacement into the active molecule; moleculeclone.set_geometry(displacement). # Perform the energy calculation; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); energies.append(psi4.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; psi4.clean(). # S/R: Write each displaced geometry to an input file; elif freq_mode == 'sow':; moleculeclone.set_geometry(displacement). # S/R: Prepare molecule, options, kwargs, function call and energy save; with open('%s.in' % (rfile), 'wb') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(moleculeclone, forcexyz=True).encode('utf-8')); freagent.write(p4util.format_options_for_input(moleculeclone, **kwargs).encode('utf-8')); p4util.format_kwargs_for_input(freagent, **kwargs); freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (energy.__name__, lowername)); freagent.write(""""""psi4.print_out('\\nHESSIAN RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""). # S/R: Read energy from each displaced geometry output file and save in energies array; elif freq_mode == 'reap':; exec(banners); psi4.set_variable('NUCLEAR REPULSION ENERGY', moleculeclone.nuclear_repulsion_energy()); energies.append(p4util.extract_sowreap_from_output(rfile, 'HESSIAN', n, freq_linkage, True)). # S/R: Quit sow after writing files. Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:77019,wrap,wrapper,77019,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['wrap'],['wrapper']
Integrability,"= ''; actives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_option_changed(chgdopt):; chgdoptval = PsiMod.get_global_option(chgdopt); #chgdoptval = PsiMod.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'; commands += """"""PsiMod.set_global_option('BASIS', '%s')\n"""""" % (user_basis); if not((user_df_basis_scf == """") or (user_df_basis_scf == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SCF', '%s')\n"""""" % (user_df_basis_scf); if not((user_df_basis_mp2 == """") or (user_df_basis_mp2 == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_MP2', '%s')\n"""""" % (user_df_basis_mp2); if not((user_df_basis_sapt == """") or (user_df_basis_sapt == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SAPT', '%s')\n"""""" % (user_df_basis_sapt); if not((user_df_basis_elst == """") or (user_df_basis_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:40799,wrap,wrapper,40799,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:39300,depend,dependent,39300,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,2,['depend'],['dependent']
Integrability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_option('SCF', 'SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:35865,depend,dependent,35865,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); psi4.clean_variables(). # no analytic derivatives for scf_type cd; if psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:34634,depend,dependent,34634,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['depend'],['dependent']
Integrability,"= 1; break. if(failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadeq",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:11984,message,message,11984,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"= False; if symbol in [x.upper() for x in what]:; found = True; msg = """"""line %5d"""""" % (lineno). # Read in the next line; line = lines[lineno]; lineno += 1. # Need to do the following until we match a ""****"" which is the end of the basis set; while not separator.match(line):; # Match shell information; if shell.match(line):; what = shell.match(line); shell_type = str(what.group(1)).upper(); nprimitive = int(what.group(2)); scale = float(what.group(3)). if len(shell_type) == 1:; am = shell_to_am[shell_type[0]]. exponents = [0.0] * nprimitive; contractions = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives1.match(line); # Must match primitives1; will work on the others later; if not what:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line %d: %s"""""" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions[p] = contraction. # We have a full shell, push it to the basis set; shell_list.append(ShellInfo(am, contractions, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')). elif len(shell_type) == 2:; # This is to handle instances of SP, PD, DF, FG, ...; am1 = shell_to_am[shell_type[0]]; am2 = shell_to_am[shell_type[1]]. exponents = [0.0] * nprimitive; contractions1 = [0.0] * nprimitive; contractions2 = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives2.match(line); # Must match primitivies2; if not what:; raise ValidationError(""Gaussian94BasisSetParser::parse: Unable to match an exponent with two contractions: line %d: %s"" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contracti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html:6454,contract,contraction,6454,psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,1,['contract'],['contraction']
Integrability,"= H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; NYI Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; NYI Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; NYI Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; File to. dictify_database_docstrings()[source]¶.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:57887,rout,routine,57887,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,6,['rout'],['routine']
Integrability,"= []; for indx_job, job in enumerate(JOBS):; for menial in VARH[job['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); JOBS_EXT.append(dict(zip(f_fields, [temp_wfn, temp_portion, job['f_basis'], job['f_zeta'], 0.0]))). #instructions += """"""\n Full listing of computations to be obtained (required and bonus).\n""""""; #for mc in JOBS_EXT:; # instructions += """""" %12s / %-24s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); PsiMod.print_out(instructions). psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(PSIF_SCF_MOS, True). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\nPsiMod.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); commands += """"""PsiMod.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()). exec(commands). # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = PsiMod.get_variable(VARH[temp_wfn][menial]). PsiMod.clean(). psioh.set_specific_retention(PSIF_SCF_MOS, False). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Results ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:74691,depend,dependent,74691,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['depend'],['dependent']
Integrability,"= re.match(r'^\s*(\w+)[\s=]+(.*?)$', command); # Is the syntax correct? If so, process the line; if matchobj:; result += process_option(spaces, module, matchobj.group(1), matchobj.group(2), command); # Reset the string; command = """"; else:; bad_option_syntax(command); return result. def process_from_file_command(matchobj):; """"""Function that process a match of ``from_file`` in molecule block.""""""; string = matchobj.group(2); mol = core.mol_from_file(string, 1); tempmol = [line for line in mol.split('\n') if line.strip() != '']; mol2 = set(tempmol); mol = """"; for i in mol2:; mol += i; mol += ""\n""; return mol. [docs]def process_pubchem_command(matchobj):; """"""Function to process match of ``pubchem`` in molecule block.""""""; string = matchobj.group(2); if re.match(r'^\s*[0-9]+\s*$', string):; # This is just a number - must be a CID; pcobj = pubchem.PubChemObj(int(string), '', ''); try:; return pcobj.getMoleculeString(); except Exception as e:; return e.message; else:; # Search pubchem for the provided string; try:; results = pubchem.getPubChemResults(string); except Exception as e:; return e.message. # N.B. Anything starting with PubchemError will be handled correctly by the molecule parser; # in libmints, which will just print the rest of the string and exit gracefully.; if not results:; # Nothing!; return ""PubchemError\n\tNo results were found when searching PubChem for %s.\n"" % (string); elif len(results) == 1:; # There's only 1 result - use it; return results[0].getMoleculeString(); else:; # There are multiple results. Print and exit; msg = ""\tPubchemError\n""; msg += ""\tMultiple pubchem results were found. Replace\n\n\t\tpubchem:%s\n\n"" % (string); msg += ""\twith the Chemical ID number or exact name from one of the following and re-run.\n\n""; msg += ""\t Chemical ID IUPAC Name\n\n""; for result in results:; msg += ""%s"" % (result); if result.name().lower() == string.lower():; #We've found an exact match!; return result.getMoleculeString(); return msg. def process_molecule_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html:6459,message,message,6459,psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,1,['message'],['message']
Integrability,"= run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'ADCC' and extras.addons(""adcc""):; func = run_adcc; elif module in ['', 'BUILTIN']:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if func is None:; raise ManagedMethodError(['select_adc2', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def build_disp_functor(name, restricted, save_pairwise_disp=False, **kwargs):. if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft.build_superfunctional(name, restric",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:30101,rout,routine,30101,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['rout'],['routine']
Integrability,"= run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in {'ADCC', ''} and extras.addons(""adcc""):; func = run_adcc; elif module in {'BUILTIN', ''}:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if func is None:; raise ManagedMethodError(['select_adc2', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def build_disp_functor(name, restricted, save_pairwise_disp=False, **kwargs):. if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft.build_superfunctional(name, r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:30941,rout,routine,30941,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['routine']
Integrability,"= symbol_re.match(line); result += """"""%s mol.set_basis_by_symbol(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('symbol'), m.group('basis')). elif label_re.match(line):; m = label_re.match(line); result += """"""%s mol.set_basis_by_label(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('label'), m.group('basis')). elif all_re.match(line):; m = all_re.match(line); result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, m.group('basis')). else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if len(result.split('\n')) == 3:; # case with no [basname] markers where whole block is contents of gbs file; result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, name); result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(name), basblock[0]); else:; message = (""Conflicting basis set specification: assign lines present but shells have no [basname] label.""""""); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(basblock[idx]), basblock[idx + 1]). result += """"""%s return basstrings\n"""""" % (spaces); result += """"""%spsi4.set_global_option(\""%s\"", \""%s\"")"""""" % (spaces, basistype, name); return result. [docs]def process_pcm_command(matchobj):; """"""Function to process match of ``pcm name? { ... }``.""""""; spacing = str(matchobj.group(1)) # Ignore..; name = str(matchobj.group(2)) # Ignore..; block = str(matchobj.group(3)); fp = open('pcmsolver.inp', 'w'); fp.write(block); fp.close(); import pcm_placeholder; sys.path.append(pcm_placeholder.PCMSolver_PARSE_DIR); import pcmsolver; pcmsolver.parse_pcm_input('pcmsolver.inp'); return """" # The file has been wr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html:11796,message,message,11796,psi4manual/1.0.0/_modules/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html,1,['message'],['message']
Integrability,"= symbol_re.match(line); result += """"""%s mol.set_basis_by_symbol(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('symbol'), m.group('basis')). elif label_re.match(line):; m = label_re.match(line); result += """"""%s mol.set_basis_by_label(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('label'), m.group('basis')). elif all_re.match(line):; m = all_re.match(line); result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, m.group('basis')). else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if len(result.split('\n')) == 3:; # case with no [basname] markers where whole block is contents of gbs file; result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, name); result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(name), basblock[0]); else:; message = (""Conflicting basis set specification: assign lines present but shells have no [basname] label.""""""); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(basblock[idx]), basblock[idx + 1]). result += """"""%s return basstrings\n"""""" % (spaces); result += """"""{}qcdb.libmintsbasisset.basishorde['{}'] = {}\n"""""" \; .format(spaces, name.upper(), 'basisspec_psi4_yo__' + cleanbas); result += """"""%score.set_global_option(\""%s\"", \""%s\"")"""""" % (spaces, basistype, name); return result. def process_pcm_command(matchobj):; """"""Function to process match of ``pcm name? { ... }``.""""""; spacing = str(matchobj.group(1)) # Ignore..; name = str(matchobj.group(2)) # Ignore..; block = str(matchobj.group(3)) # Get input to PCMSolver; # Setup unique scratch directory and move in, as done for other add-ons; psioh = co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html:12229,message,message,12229,psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,1,['message'],['message']
Integrability,"= symbol_re.match(line); result += """"""%s mol.set_basis_by_symbol(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('symbol'), m.group('basis')). elif label_re.match(line):; m = label_re.match(line); result += """"""%s mol.set_basis_by_label(""%s"", ""%s"", role=role)\n"""""" % \; (spaces, m.group('label'), m.group('basis')). elif all_re.match(line):; m = all_re.match(line); result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, m.group('basis')). else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if len(result.split('\n')) == 3:; # case with no [basname] markers where whole block is contents of gbs file; result += """"""%s mol.set_basis_all_atoms(""%s"", role=role)\n"""""" % \; (spaces, name); result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(name), basblock[0]); else:; message = (""Conflicting basis set specification: assign lines present but shells have no [basname] label.""""""); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; result += """"""%s basstrings['%s'] = \""\""\""\n%s\n\""\""\""\n"""""" % \; (spaces, basname(basblock[idx]), basblock[idx + 1]). result += """"""%s return basstrings\n"""""" % (spaces); result += """"""{}qcdb.libmintsbasisset.basishorde['{}'] = {}\n"""""" \; .format(spaces, name.upper(), 'basisspec_psi4_yo__' + cleanbas); result += """"""%score.set_global_option(\""%s\"", \""%s\"")"""""" % (spaces, basistype, name); return result. def process_pcm_command(matchobj):; """"""Function to process match of ``pcm name? { ... }``.""""""; spacing = str(matchobj.group(1)) # Ignore..; name = str(matchobj.group(2)) # Ignore..; block = str(matchobj.group(3)) # Get input to PCMSolver; suffix = str(os.getpid()) + '.' + str(uuid.uuid4())[:8]; pcmsolver_fname = 'pcmsolv",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html:10245,message,message,10245,psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,9,['message'],['message']
Integrability,"=35, strNotOutfile=False)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126485,message,message,126485,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['message'],['message']
Integrability,"=====================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_hessian | (nat * 3, nat * 3) | when driver is h | interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type)|; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | | | | |; +--------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:42114,depend,depending,42114,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,5,['depend'],['depending']
Integrability,"=None, real=None, elbl=None, name=None, units='Angstrom', input_units_to_au=None, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False); Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns:. Return type:psi4.core.Molecule. from_dict(arg0: dict) → psi4.core.Molecule; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, verbose=1); Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters:; molschema (dict) – Dictionary form of Molecule following known schema.; return_dict (bool, optional) – Additionally return Molecule dictionary intermediate.; verbose (int, optional) – Amount of printing. Returns:; mol (psi4.core.Molecule); molrec (dict, optional) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True, enable_efp=True, missing_enabled_return_qm='none', missing_enabled_return_efp='none', verbose=1). fx(self: psi4.core.Molecule, arg0: int) → float; x position of atom arg1 (0-indexed including dummies in Bohr). fy(self: psi4.core.Molecule, arg0: int) → float; y position of atom arg1 (0-indexed including dummies in Bohr). fz(self: psi4.core.Molecule, arg0: int) → float; z position of atom arg1 (0-indexed including dummies in Bohr). geometry(self: psi4.core.Molecule) → psi4.cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html:41560,wrap,wrapper,41560,psi4manual/1.2.1/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html,1,['wrap'],['wrapper']
Integrability,"> C, H4 = H) (0-indexed); >>> print H2OH2O.symbol(4); H. symmetrize()[source]¶; Force the molecule to have the symmetry specified in pg.; This is to handle noise coming in from optking. symmetry_frame(tol=1e-08)[source]¶; Determine symmetry reference frame. If noreorient is not set,; this is the rotation matrix applied to the geometry in update_geometry.; >>> print H2OH2O.symmetry_frame(); [[1.0, -0.0, 0.0], [0.0, 1.0, 0.0], [0.0, -0.0, 1.0]]. symmetry_from_input()[source]¶; Returns the symmetry specified in the input.; >>> print H2OH2O.symmetry_from_input(); C1. translate(r)[source]¶; Translates molecule by r.; >>> H2OH2O.translate([1.0, 1.0, 0.0]). unique(iuniq)[source]¶; Returns the overall number of the iuniq’th unique atom. units()[source]¶; Gets the geometry units; >>> print H2OH2O.units(); Angstrom. update_geometry()[source]¶; Updates the geometry, by (re)interpreting the string used to; create the molecule, and the current values of the variables.; The atoms list is cleared, and then rebuilt by this routine.; This function must be called after first instantiation of Molecule.; >>> H2 = qcdb.Molecule(""H\nH 1 0.74\n""); >>> print H2.natom(); 0; >>> H2.update_geometry(); >>> print H2.natom(); 2. valid_atom_map(tol=0.01)[source]¶; Check if current geometry fits current point group. x(atom)[source]¶; x position of atom (0-indexed) in Bohr; >>> print H2OH2O.x(4); 3.17549201425. xyz(atom, posn=None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. atom_present_in_geom(geom, b, tol=1e-08)[source]¶; Function used by set_full_point_group() to scan a given geometry; and determine if an atom is present at a given location. compute_atom_map(m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:93291,rout,routine,93291,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['rout'],['routine']
Integrability,">> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for clus",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:8160,message,message,8160,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['message'],['message']
Integrability,">> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). """"""; scf = {; 'wfn': 'hf',; 'basis': kwargs.pop('scf_basis', 'aug-cc-pVQZ'),; 'scheme': kwargs.pop('scf_scheme', 'xtpl_highest_1'); }; corl = {; 'wfn': kwargs.pop('corl_wfn', 'mp2'),; 'basis': kwargs.pop('corl_basis', 'aug-cc-pV[TQ]Z'),; 'scheme': kwargs.pop('corl_scheme', 'corl_xtpl_helgaker_2'); }; delta = {; 'wfn': kwargs.pop('delta_wfn', 'ccsd(t)'),; 'wfn_lesser': kwargs.pop('delta_wfn_lesser', 'mp2'),; 'basis': kwargs.pop('delta_basis', 'aug-cc-pVTZ'),; 'scheme': kwargs.pop('delta_scheme', 'xtpl_highest_1'); }. return [scf, corl, delta]. [docs]def allen_focal_point(**kwargs) -> CBSMetadata:; r""""""Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_3`. MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. CCSDT and CCSDT(Q); are plain deltas. This wrapper requires :ref:`Kallay's MRCC code <sec:mrcc>`. .. math:: E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html:4337,wrap,wrapper,4337,psi4manual/1.6.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html,1,['wrap'],['wrapper']
Integrability,">>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['df-scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['df-mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'df-mp2corl': 'DF-MP2 CORRELATION ENERGY'}; VARH['cc2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY',; 'cc2corl': 'CC2 CORRELATION ENERGY'}; VARH['ccsd'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY',; 'ccsdcorl': 'CCSD CORRELATION ENERGY'}; VARH['bccd'] = { 'scf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:59033,wrap,wrapper,59033,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,2,['wrap'],['wrapper']
Integrability,">>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY', ; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY', ; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp4(sdq)'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATIO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:60441,wrap,wrapper,60441,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PITZER (TRANSQT); TRANSQT — Do use Pitzer ordering?. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PR (ADC); ADC — Do use the partial renormalization scheme for the ground state wavefunction?. Type: boolean; Default: false. PRECONDITIONER (DETCI); DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and ITER_INV approaches are all ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:90339,integrat,integration,90339,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"A 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function; from __future__ import absolute_import. import re; import os; import sys; import uuid; from psi4.driver import pubchem; from psi4.driver.p4util.exceptions import *; from psi4.driver.p4util.util import set_memory; from psi4 import core. # globally available regex strings; pubchemre = re.compile(r'^(\s*pubchem\s*:\s*(.*)\n)$', re.MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html:1996,message,message,1996,psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,2,['message'],['message']
Integrability,"A 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import. from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer."""""". def __init",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:2031,message,message,2031,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"A 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import; from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__ini",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:2029,message,message,2029,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import. from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:1749,message,message,1749,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import; from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:1747,message,message,1747,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"A. Hess. Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess¶; Code author: Justin M. Turney; Section author: Justin M. Turney; Module: Keywords, Samples. Installation¶; Binary. DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, dkh has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; dkh can be obtained through conda install dkh -c psi4.; Then enable it as a feature with ENABLE_dkh,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect dkh and activate dependent code. To remove a conda installation, conda remove dkh. Source. If using PSI4 built from source and you want dkh built from; from source also,; enable it as a feature with ENABLE_dkh,; and let the build system fetch and build it and activate dependent code. Input¶; For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects.; Minimal input for DKH single-point computation looks like this:; molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the DKH_ORDER option. The version of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). Ho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/dkh.html:1132,depend,dependent,1132,psi4manual/1.8.x/dkh.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/dkh.html,1,['depend'],['dependent']
Integrability,"A. Hess. Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess¶; Code author: Justin M. Turney; Section author: Justin M. Turney; Module: Keywords, Samples. Installation¶; Binary. DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, dkh has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; dkh can be obtained through conda install dkh -c psi4.; Then enable it as a feature with ENABLE_dkh,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect dkh and activate dependent code. To remove a conda installation, conda remove dkh. Source. If using PSI4 built from source and you want dkh built from; from source also,; enable it as a feature with ENABLE_dkh,; and let the build system fetch and build it and activate dependent code. Input¶; For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects.; Minimal input for DKH single-point computation looks like this:; molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the DKH_ORDER option. The version of the code found in; PSI4 is capable of up to 4th-order DKH calculations. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. DKH_ORDER¶. Order of Douglas-Kroll-Hess. Type: integer; Default: 2. Reference¶; When using this code please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). Ho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dkh.html:1132,depend,dependent,1132,psi4manual/1.9.x/dkh.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dkh.html,1,['depend'],['dependent']
Integrability,AD_D_CONVERGENCE (SCF). SAD_E_CONVERGENCE (SCF). SAD_F_MIX_START (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). sanitize_basisname() in module basislist. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_FACTOR (DFTSAPT). SAPT_MEM_SAFETY (SAPT). SAPT_OS_SCALE (SAPT). SAPT_SS_SCALE (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTSAPT0ENERGY. SAPTSAPT2+(3)(CCD)ENERGY. SAPTSAPT2+(3)ENERGY. SAPTSAPT2+(CCD)ENERGY. SAPTSAPT2+3(CCD)ENERGY. SAPTSAPT2+3ENERGY. SAPTSAPT2+ENERGY. SAPTSAPT2ENERGY. save() Table method. SAVE_JK (SCF). save_string_for_psi4() Molecule method. save_string_xyz() LibmintsMolecule method. save_to_checkpoint() LibmintsMolecule method. save_xyz() LibmintsMolecule method. SCALE (STABILITY). scale() in module qcdb.vecutil. Table method. SCF. theory. scf_helper() in module proc. SCF_MAXITER (DCFT). SCF_MEM_SAFETY_FACTOR (SCF). SCF_TYPE (CPHF). (SCF). scf_xtpl_helgaker_2() in module wrappers. scf_xtpl_helgaker_3() in module wrappers. SCFDIPOLEX. SCFDIPOLEY. SCFDIPOLEZ. SCFQUADRUPOLEXX. SCFQUADRUPOLEXY. SCFQUADRUPOLEXZ. SCFQUADRUPOLEYY. SCFQUADRUPOLEYZ. SCFQUADRUPOLEZZ. SCFTOTALENERGY. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM). schoenflies_symbol() LibmintsMolecule method. SCHWARZ_CUTOFF (CPHF). scratch files. SCREEN_INTS (LMP2). SCS (LMP2). SCS_CCSD (CCENERGY). (FNOCC). SCS_CEPA (FNOCC). SCS_MP2 (CCENERGY). (FNOCC). SCS_N (LMP2). SCS_TYPE (OCC). SCSN_MP2 (CCENERGY). SEKINO (CCLAMBDA). (CCRESPONSE). SEM_MAXITER (ADC). SEMICANONICAL (CCENERGY). (CCEOM). (CCSORT). (CCTRIPLES). (TRANSQT2). set_active_fragment() LibmintsMolecule method. set_active_fragments() LibmintsMolecule method. set_basis_all_atoms() LibmintsMolecule method. set_basis_by_label() LibmintsMolecule method. set_basis_by_number() LibmintsMolecule method. set_basis_by_symbol() LibmintsMolecule method. set_com_fixed() LibmintsMolecule method. set_coordinates() CartesianEntry method. ZMatrixEntry,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:40644,wrap,wrappers,40644,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"ANSQT). SOS_SCALE (OMP2). (OMP3). SOS_SCALE2 (OMP2). (OMP3). SOS_TYPE (OMP2). (OMP3). SPINADAPT_ENERGIES (CCENERGY). split_menial() in module wrappers. SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STABILITY_ADD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. TAU_SQUARED (DCFT). tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CEPA. CI. Coupled-Pair Methods. DF-MP2. DFT. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OMP3). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:41806,wrap,wrappers,41806,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"ANSQT). SO_V_FILE (TRANSQT). SOCC (GLOBALS). (MCSCF). SOLVER_CONVERGENCE (CPHF). (SOLVER), [1]. SOLVER_EXACT_DIAGONAL (CPHF). SOLVER_MAX_SUBSPACE (CPHF). (SOLVER), [1]. SOLVER_MAXITER (CPHF). (SOLVER), [1]. SOLVER_MIN_SUBSPACE (CPHF). (SOLVER), [1]. SOLVER_N_GUESS (CPHF). (SOLVER), [1]. SOLVER_N_ROOT (CPHF). (SOLVER), [1]. SOLVER_NORM (CPHF). (SOLVER), [1]. SOLVER_PRECONDITION (CPHF). (SOLVER), [1]. SOLVER_PRECONDITION_MAXITER (CPHF). SOLVER_PRECONDITION_STEPS (CPHF). SOLVER_QUANTITY (CPHF). SOLVER_TYPE (CPHF). SORTED_TEI_FILE (TRANSQT). SOS_SCALE (OMP2). SOS_SCALE2 (OMP2). SPINADAPT_ENERGIES (CCENERGY). split_menial() (in module wrappers). SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STEP_TYPE (OPTKING). success() (in module util). superfunctional_list() (in module functional). symmetry. molecule. T. T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table (class in text). TAU_SQUARED (DCFT). tblhead() (in module wrappers). TDHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() (in module functional). TEST_DERIVATIVE_B (OPTKING). text (module). theory; . ADC. CC. CI. DF-MP2. DFT. SAPT. SCF. cbs(), [1]. threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SIZE (PLUGIN_TEST_MATRIX), [1]. TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. units; . molecule. UNITS (GLOBALS). UPDATE (DETCI). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). util (module). V. VAL_EX_LEVEL (DETCI). validate_bracketed_basis() (in module wrappers). validate_scheme_args() (in module wrappers). ValidationError. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:27688,wrap,wrappers,27688,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"ANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the dia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:109309,integrat,integration,109309,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"ANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:106651,integrat,integration,106651,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; from psi4.driver import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html:1682,integrat,integrated,1682,psi4manual/1.1.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html,1,['integrat'],['integrated']
Integrability,"APT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; mem",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sapt-1.html:19252,depend,depend,19252,psi4manual/1.1.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sapt-1.html,2,['depend'],['depend']
Integrability,"ATADIR, follow the efpfrag; pattern of libefp to symlink them in. psi4/psi4/src/CMakeLists.txt. No changes should be required unless both (1) code in export_*; or core.cc needs the USING_AddOn_name definition or; AddOn header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/. If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in CMake files or #ifdef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/external/upstream/. Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:3534,depend,dependencies,3534,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['depend'],['dependencies']
Integrability,"ATH': os.environ.get('LD_LIBRARY_PATH'); }. if 'path' in kwargs:; lenv['PATH'] = kwargs['path'] + ':' + lenv['PATH']; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Load the GENBAS file; genbas_path = qcdb.search_file('GENBAS', lenv['PATH']); if genbas_path:; try:; shutil.copy2(genbas_path, psioh.get_default_path() + cfour_tmpdir); except shutil.Error: # should only fail if src and dest equivalent; pass; psi4.print_out(""\n GENBAS loaded from %s\n"" % (genbas_path)); psi4.print_out("" CFOUR to be run from %s\n"" % (psioh.get_default_path() + cfour_tmpdir)); else:; message = """"""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""; psi4.print_out(message); psi4.print_out(' Search path that was tried:\n'); psi4.print_out(lenv['PATH'].replace(':', ', ')). # Generate the ZMAT input file in scratch; if 'path' in kwargs and os.path.isfile('ZMAT'):; psi4.print_out("" ZMAT loaded from %s\n"" % (psioh.get_default_path() + kwargs['path'] + '/ZMAT')); else:; with open('ZMAT', 'w') as cfour_infile:; cfour_infile.write(write_zmat(lowername, dertype)). internal_p4c4_info['zmat'] = open('ZMAT', 'r').read(); #psi4.print_out('\n====== Begin ZMAT input for CFOUR ======\n'); #psi4.print_out(open('ZMAT', 'r').read()); #psi4.print_out('======= End ZMAT input for CFOUR =======\n\n'); #print('\n====== Begin ZMAT input for CFOUR ======'); #print(open('ZMAT', 'r').read()); #print('======= End ZMAT input for CFOUR =======\n'). if 'genbas' in kwargs:; with open('GENBAS', 'w') as cfour_basfile:; cfour_basfile.write(kwargs['genbas'].replace('\nblankline\n', '\n\n')); psi4.print_out(' GENBAS loaded from kwargs string\n'). # Close psi4 output file and reopen wit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html:6278,message,message,6278,psi4manual/1.0.0/_modules/procedures/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html,1,['message'],['message']
Integrability,"Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""; message: str; iteration: int; wfn: co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:6221,rout,routine,6221,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems parsing a text file. Prints error message""];; ""PsiException"" -> ""ParsingError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PastureRequiredError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when the specified value of *option* requires some""];; ""PsiException"" -> ""PastureRequiredError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PsiException"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error class for Psi.""];; ""PsiImportError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems import python dependencies. Prints error message""];; ""PsiException"" -> ""PsiImportError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""QMMM"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""Table"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Class defining a flexible Table object for storing data.""];; ""TestComparisonError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when a test case fails due to a failed""];; ""PsiException"" -> ""TestComparisonError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""ValidationError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems with the input file. Prints""];; ""PsiException"" -> ""ValidationError"" [arrowsi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:204148,message,message,204148,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['message'],['message']
Integrability,"BALS', 'DERTYPE'],; ['CCLAMBDA', 'WFN'],; ['CCDENSITY', 'WFN']). PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_local_option('CCLAMBDA', 'WFN', 'CCSD_T'); PsiMod.set_local_option('CCDENSITY', 'WFN', 'CCSD_T'). PsiMod.cchbar(); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). optstash.restore(). [docs]def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'DELETE_TEI'],; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN']); ; if (name.lower() == 'bccd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'BCCD'); PsiMod.set_local_option('CCSORT', 'WFN', 'BCCD'); PsiMod.set_local_option('CCENERGY', 'WFN', 'BCCD'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'). while True:; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.ccenergy(); PsiMod.print_out('Brueckner convergence check: %d\n' % PsiMod.get_variable('BRUECKNER CONVERGED')); if (PsiMod.get_variable('BRUECKNER CONVERGED') == True):; break. optstash.restore(). [docs]def run_bccd_t(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD(T) calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN'],; ['CCTRIPLES', 'WFN']). PsiMod.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCSORT', 'WFN', 'BCCD_T'); PsiMod.set_local_option('CCENERGY', 'WFN', 'BCC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:24542,rout,routine,24542,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"BCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). visualization. W. WABEI_LOWDISK (CCHBAR). WebMO. WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (CLAG). (DETCI). (GLOBALS). (LMP2). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). WFN_TYPE (OCC). wrappers module. WRITER_FILE_LABEL (GLOBALS). X. x() LibmintsMolecule method. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xyz() LibmintsMolecule method. Y. y() LibmintsMolecule method. Z. Z() CoordEntry method. LibmintsMolecule method. z() LibmintsMolecule method. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() in module qcdb.vecutil. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). ZMatrixEntry class in qcdb.libmintscoordentry. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:45840,wrap,wrappers,45840,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME¶. Pruning Scheme. Type: string; Default: FLAT. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environmental Effects; EXTERN; ONEPOT_GRID_READ; PERTURB_DIPOLE; PERTURB_H; PERTURB_MAGNITUDE; PERTURB_WITH; PHI_POINTS; RADIUS; R_POINTS; THETA_POINTS; THICKNESS. DFSCF Algorithm;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:16450,integrat,integration,16450,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,2,['integrat'],['integration']
Integrability,"BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Unlike run_dftd3, ``func`` overwrites any; parameter initialized via `dashparam`.; dashlvl; Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in `dashcoeff` or ""alias"" or; ""formal"" to run.; dashparam; Values for the same keys as `dashcoeff[dashlvl]['default']`; used to provide custom values. Unlike run_dftd3, will not have; effect if `func` given. Must provide all parameters.; Extra parameters will error.; dertype; Maximum derivative level at which to run DFTD3. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. Notes; -----; This function wraps the QCEngine dftd4 harness which wraps the internal DFTD4 Python API.; As such, the upstream convention of `func` trumping `dashparam` holds, rather than the; :py:func:`run_dftd3` behavior of `dashparam` extending or overriding `func`. """"""; import qcengine as qcng. if dertype is None:; derint, derdriver = -1, 'gradient'; else:; derint, derdriver = parse_dertype(dertype, max_derivative=1). resinp = {; 'molecule': self.to_schema(dtype=2),; 'driver': derdriver,; 'model': {; 'method': func,; 'basis': '(auto)',; },; 'keywords': {; 'verbose': verbose,; },; }; if dashlvl:; resinp['keywords']['level_hint'] = dashlvl; if dashparam:; resinp['keywords']['params_tweaks'] = dashparam. jobrec = qcng.compute(resinp, 'dftd4', raise_error=True); jobrec = jobrec.dict(). # hack as not checking type GRAD; for k, qca in jobrec['extras']['qcvars'].items():; if isinstance(qca, (list, np.ndarray)):; jobrec['extras']['qcvars'][k] = np.array(qca).reshape(-1, 3). if isinstance(self, Molecule):; pass; else:; from psi4 import core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html:43625,wrap,wraps,43625,psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,8,['wrap'],['wraps']
Integrability,"Bases: pybind11_object; Computes numerical integrals using a DFT grid.; Methods Summary. dd_density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. density_integral(self, grid_data, D); Compute an integral int rho(r) f(r) where f is a vector-valued function. numint_grid(self). potential_integral(self, arg0); Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. Methods Documentation. dd_density_integral(self: psi4.core.NumIntHelper, grid_data: list[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Matrix¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_atoms, n_data). density_integral(self: psi4.core.NumIntHelper, grid_data: list[psi4.core.Matrix], D: psi4.core.Matrix) → psi4.core.Vector¶; Compute an integral int rho(r) f(r) where f is a vector-valued function. f is represented for each block of points of the integration grid as a matrix (n_data, n_points). Return has shape (n_data). numint_grid(self: psi4.core.NumIntHelper) → psi4.core.DFTGrid¶. potential_integral(self: psi4.core.NumIntHelper, arg0: list[psi4.core.Vector]) → psi4.core.Matrix¶; Compute an integral int chi_mu(r) chi_nu(r) f(r) where f is a scalar function represented for each block of points of the integration grid as a vector of n_points. table of contents. NumIntHelper; NumIntHelper; NumIntHelper.dd_density_integral(); NumIntHelper.density_integral(); NumIntHelper.numint_grid(); NumIntHelper.potential_integral(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; NumIntHelper. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.NumIntHelper.html:1320,integrat,integration,1320,psi4manual/master/api/psi4.core.NumIntHelper.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.NumIntHelper.html,2,['integrat'],['integration']
Integrability,"C ======\n'); core.print_out(open('fort.56', 'r').read()); core.print_out('===== End fort.56 input for MRCC ======\n'). # Modify the environment:; # PGI Fortan prints warning to screen if STOP is used; lenv['NO_STOP_MESSAGE'] = '1'. # Obtain the number of threads MRCC should use; lenv['OMP_NUM_THREADS'] = str(core.get_num_threads()). # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if core.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; lenv['OMP_NUM_THREADS'] = str(core.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; external_exe = 'dmrcc'; try:; retcode = subprocess.Popen([external_exe], bufsize=0, stdout=subprocess.PIPE, env=lenv); except OSError as e:; sys.stderr.write('Program %s not found in path or execution failed: %s\n' % (external_exe, e.strerror)); core.print_out('Program %s not found in path or execution failed: %s\n' % (external_exe, e.strerror)); message = (""Program %s not found in path or execution failed: %s\n"" % (external_exe, e.strerror)); raise ValidationError(message). c4out = ''; while True:; data = retcode.stdout.readline(); if not data:; break; core.print_out(data.decode('utf-8')); c4out += data.decode('utf-8'). # Scan iface file and grab the file energy.; ene = 0.0; for line in open('iface'):; fields = line.split(); m = fields[1]; try:; ene = float(fields[5]); if m == ""MP(2)"":; m = ""MP2""; core.set_variable(m + ' TOTAL ENERGY', ene); core.set_variable(m + ' CORRELATION ENERGY', ene - vscf); except ValueError:; continue. # The last 'ene' in iface is the one the user requested.; core.set_variable('CURRENT ENERGY', ene); core.set_variable('CURRENT CORRELATION ENERGY', ene - vscf). # Load the iface file; iface = open('iface', 'r'); iface_contents = iface.read(). # Delete mrcc tempdir; os.chdir('..'); try:; # Delete unless we're told not to; if (keep is False and not('path' in kwargs)):; shutil.rmtree(mrcc_tmpdir); except OSError as e:; print('Unable to remove ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:115845,message,message,115845,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,5,['message'],['message']
Integrability,"C simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; Interface to DFTD3 by S. Grimme; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/mrcc-1.html:2272,interface,interface,2272,psi4manual/4.0b4/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/mrcc-1.html,2,['interface'],['interface']
Integrability,"C simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Table Of Contents. Interface to MRCC by M. Kállay; Installation; Running MRCC. Previous topic; Interfaces: Enhancing PSI4 Capabilities; Next topic; Interface to DFTD3 by S. Grimme; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Interfaces: Enhancing PSI4 Capabilities ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/mrcc-1.html:2272,interface,interface,2272,psi4manual/4.0b5/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/mrcc-1.html,2,['interface'],['interface']
Integrability,"CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; —; Y; Y. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; —; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/cc-1.html:2597,interface,interface,2597,psi4manual/4.0b4/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html,2,['interface'],['interface']
Integrability,"CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; —; Y; Y. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; —; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. a-CCSD(T); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'a-ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/cc-1.html:2597,interface,interface,2597,psi4manual/4.0b5/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/cc-1.html,2,['interface'],['interface']
Integrability,"CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of PSI4. Reference; Method; Energy; Gradient; Exc. Energies; LR Props. RHF; CC2; Y; N; Y; Y. UHF; CC2; Y; N; Y; N. ROHF; CC2; Y; N; Y; N. RHF; CCSD; Y; Y; Y; Y. RHF; CCSD(T); Y; N; —; —. ROHF; CCSD; Y; Y; Y; N. ROHF; CCSD(T); Y; N; —; —. UHF; CCSD; Y; Y; Y; N. UHF; CCSD(T); Y; Y; —; —. RHF; CC3; Y; N; Y; N. UHF; CC3; Y; N; Y; N. ROHF; CC3; Y; N; Y; N. Brueckner; CCD; Y; N; N; N. Brueckner; CCD(T); Y; N; —; —. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provid",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/cc-1.html:2559,interface,interface,2559,psi4manual/4.0b2/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cc-1.html,4,['interface'],['interface']
Integrability,"CCSD scales as , where; is the number of occupied orbitals and is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the ; operator. The computational cost of this additional term scales as; , making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; Psi4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within Psi4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, Psi4; can interface to Kállay’s MRCC code (see MRCC). Current coupled cluster capabilities of Psi4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; —; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; —; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by Psi4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:2604,interface,interface,2604,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['interface'],['interface']
Integrability,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html:3980,contract,contractions,3980,psi4manual/1.0.0/autodoc_psifiles-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psifiles-1.html,8,['contract'],['contractions']
Integrability,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_AMPS; SAPT Amplitudes. 197; PSIF_SAPT_TEMP; SAPT Temporary worlds",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html:3972,contract,contractions,3972,psi4manual/4.0b4/autodoc_psifiles-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_psifiles-1.html,4,['contract'],['contractions']
Integrability,"CF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATION_SCHEME (STABILITY); STABILITY — Method for following eigenvectors, either 0 by angles or 1 by antisymmetric matrix. Type: integer; Default: 0. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_SQUARED (DETCI); DETCI — Do calculate the value of for each root?. Type: boolean; Default: false. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — SAD Guess Cholesky Cutoff (for eliminating redundancies). Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_F_MIX_START (SCF); SCF (Expert) — SAD Guess F-mix Iteration Start. Type: integer; Default: 50. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_B, 3-TRIMER, 3-DIMER_AB, 3-DIMER_BC, 3-DIMER_AC, 3-MONOMER_A, 3-MONOMER_B, 3-MONOMER_C; Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:87448,depend,dependencies,87448,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"CF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:109163,integrat,integration,109163,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"CF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:106505,integrat,integration,106505,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"CIROOTnDIPOLEY. CIROOTnDIPOLEZ. CIROOTnQUADRUPOLEXX. CIROOTnQUADRUPOLEXY. CIROOTnQUADRUPOLEXZ. CIROOTnQUADRUPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENERGY. CIS_AD_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_AMPLITUDE_CUTOFF (CPHF). (PLUGIN_FOCK), [1]. CIS_DOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CIS_NO_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_OPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_TOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CISDCORRELATIONENERGY. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() (in module util). compare_matrices() (in module util). compare_strings() (in module util). compare_values() (in module util). compare_vectors() (in module util). compilers. complete_basis_set(); . see cbs(); . complete_basis_set() (in module wrappers). COMPLEX_TOLERANCE (CCEOM). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() (in module wrappers). copy() (Table method). copy_file_from_scratch() (in module util). copy_file_to_scratch() (in module util). CORE (module), [1]. corl_xtpl_helgaker_2() (in module wrappers). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_REFERENCE (PSIMRCC). CORR_WFN (PSIMRCC). Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() (in module wrappers). CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CPHF_TASKS (CPHF). (PLUGIN_FOCK), [1]. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (PLUGIN_DFADC), [1]. D. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). database(). adding new. available. output. se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:8229,wrap,wrappers,8229,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; L",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3513,depend,dependencies,3513,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run Psi4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that Python,; CMake, NumPy, and Libint (and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime, not buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. Libint — [what is this?] [min version]; pybind11 — [what is this?] [min version]. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:3511,depend,dependencies,3511,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"CPInt built from; from source also,; enable it as a feature with ENABLE_ecpint,; and let the build system fetch and build it and activate dependent code. How to configure LibECPInt for building Psi4¶; Role and Dependencies. Role — In PSI4, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) LibECPInt; Upstream Dependencies — LibECPInt \(\Leftarrow\) None. CMake Variables. ENABLE_ecpint — CMake variable toggling whether Psi4 builds with LibECPInt; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing include/libecpint.hpp; ecpint_DIR — CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing lib/cmake/ecpint/ecpint-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_ecpint — CMake variable to force internal build of ecpint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_ecpint — CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_ecpint=ON. Build without LibECPInt. >>> cmake. Link against pre-built. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. table of contents. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LibECPInt by R. Shaw. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/ecpint.html:2437,depend,dependencies,2437,psi4manual/1.6.x/ecpint.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/ecpint.html,1,['depend'],['dependencies']
Integrability,"CSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3967,wrap,wrapper,3967,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['wrap'],['wrapper']
Integrability,"CSD(T)gradients. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. freq-masses; check nonphysical masses possible. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft1; DFT Functional Test all values update for new BraggSlater radii. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. scf-level-shift-rks; SCF level shift on an RKS computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:30535,depend,depend,30535,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"CTV[db_rxn]:; actives += """"""psi4.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""psi4.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\npsi4.set_memory(%s)\n\n"""""" % (psi4.get_memory()); for chgdopt in psi4.get_global_option_list():; if psi4.has_global_option_changed(chgdopt):; chgdoptval = psi4.get_global_option(chgdopt); #chgdoptval = psi4.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""psi4.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""psi4.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; pass; #raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'. if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(True)\n""""""; commands += """"""molecule.fix_com(True)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""psi4.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""psi4.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""psi4.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:19870,depend,dependent,19870,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['depend'],['dependent']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/pcmsolver.html:5000,depend,dependencies,5000,psi4manual/master/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/master/pcmsolver.html,1,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/pcmsolver-1.html:4593,depend,dependencies,4593,psi4manual/1.2.1/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/pcmsolver-1.html,2,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html:4655,depend,dependencies,4655,psi4manual/1.4.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html,2,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html:4655,depend,dependencies,4655,psi4manual/1.5.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/pcmsolver-1.html,2,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/pcmsolver.html:4655,depend,dependencies,4655,psi4manual/1.6.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/pcmsolver.html,1,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/pcmsolver.html:4991,depend,dependencies,4991,psi4manual/1.7.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/pcmsolver.html,1,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/pcmsolver.html:4993,depend,dependencies,4993,psi4manual/1.8.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/pcmsolver.html,1,['depend'],['dependencies']
Integrability,"Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcmsolver.h; PCMSolver_DIR — CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing share/cmake/PCMSolver/PCMSolverConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_PCMSolver — CMake variable to force internal build of PCMSolver instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_PCMSolver — CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_PCMSolver=ON. Build without PCMSolver. >>> cmake. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/pcmsolver.html:4993,depend,dependencies,4993,psi4manual/1.9.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/pcmsolver.html,1,['depend'],['dependencies']
Integrability,"ComparisonError(message); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); psi4.print_out(""The Failed Test Matrices\n""); psi4.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:6036,message,message,6036,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['message'],['message']
Integrability,"Computer"": {; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }; }; }. Fields:. driver (qcelemental.models.common_models.DriverEnum); findifrec (Dict[str, Any]); metameta (Dict[str, Any]); method (str); molecule (Any); task_list (Dict[str, psi4.driver.task_base.BaseComputer]). Validators:. set_driver » driver; set_molecule » molecule. field driver: DriverEnum [Required]¶. Validated by:. set_driver. field findifrec: Dict[str, Any] = {}¶. field metameta: Dict[str, Any] = {}¶. field method: str [Required]¶. field molecule: Any = None¶. Validated by:. set_molecule. field task_list: Dict[str, BaseComputer] = {}¶. computer¶; alias of AtomicComputer. build_tasks(obj, **kwargs)[source]¶. compute(client=None)[source]¶; Run each job in task list. Parameters:; client (Optional[FractalClient]) – . get_psi_results(return_wfn=False)[source]¶; Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: (e/g/h, wfn). Parameters:; return_wfn (bool) – Whether to additionally return the dummy Wavefunction; calculation result as the second element of a tuple. Contents are:. undisplaced molecule; compute basis if simple, else dummy basis def2-svp; e/g/h member data; QCVariables; module. Return type:; Union[float, Matrix, Tuple[Union[float, Matrix], Wavefunction]]. Returns:. ret – Gradient or Hessian according to self.driver.; wfn – Wavefunction described above when return_wfn specified. get_results(client=None)[source]¶; Return results as FiniteDifference-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶. validator set_driver  »  driver[source]¶. validator set_molecule  »  molecule[source]¶. table of contents. Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Visualization of Normal Modes; Molden ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/freq.html:9986,interface,interface,9986,psi4manual/1.7.x/freq.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/freq.html,1,['interface'],['interface']
Integrability,"DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:59640,depend,dependencies,59640,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['depend'],['dependencies']
Integrability,"DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_INCORE (DDX)¶DDX — Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LMAX (DDX)¶DDX — Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_LOGFILE (DDX)¶DDX (Expert) — Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_MAXITER (DDX)¶DDX — Maximal number of iterations used inside DDX. Type: integer; Default: 100. DDX_MODEL (DDX)¶DDX — Switch available solvation models. Type: string; Possible Values: PCM, COSMO; Default: PCM. DDX_N_LEBEDEV (DDX)¶DDX — Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. DDX_RADII (DDX)¶DDX — Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING (DDX)¶DDX — Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET (DDX)¶DDX — Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SHIFT (DDX)¶DDX (Expert) — Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. DDX_SOLUTE_RADIAL_POINTS (DDX)¶DDX — Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS (DDX)¶DDX — Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_SOLVATION_CONVERGENCE (DDX)¶DDX — Tolerance to which DDX linear systems are solved. Type: conv double; Default: 1e-8. DDX_SOLVENT (DDX)¶DDX — Solvent to use. Not case sensitive.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:98219,depend,depends,98219,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,1,['depend'],['depends']
Integrability,"DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_LMAX¶. Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_N_LEBED",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:6091,integrat,integration,6091,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['integrat'],['integration']
Integrability,"DEL¶. Switch available solvation models. Type: string; Possible Values: PCM, COSMO, LPB; Default: PCM. DDX_RADII¶. Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_KAPPA¶. Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:6670,integrat,integration,6670,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,3,['integrat'],['integration']
Integrability,"DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CEPA_LEVEL (CEPA); CEPA — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (CEPA); CEPA — Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. CEPA_SCALE_OS (CEPA); CEPA — Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS (CEPA); CEPA — Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_VABCD_DIRECT (CEPA); CEPA — Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. CHECK_C_ORTHONORM (TRANSQT); TRANSQT — Do check MO orthogonality condition?. Type: boolean; Default: false. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_NUM_THREADS (DETCI); DETCI — Number of threads for DETCI. Type: integer; Default: 1. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AD_STATES (CPHF); CPHF — Which states to save AD Matrices for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_AMPLITUDE_CUTOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. CIS_DOPDM_STATES (CPHF); CPHF — Which states to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:15903,contract,contraction,15903,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['contract'],['contraction']
Integrability,"DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:8858,depend,depend,8858,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['depend'],['depend']
Integrability,"DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC proced",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6103,rout,routines,6103,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['rout'],['routines']
Integrability,"DIENT']); elif derint == 0:; return float(jobrec['extras']['qcvars']['DISPERSION CORRECTION ENERGY']); elif derint == 1:; return jobrec['extras']['qcvars']['DISPERSION CORRECTION GRADIENT']. [docs] def run_gcp(self, func: str = None, dertype: Union[int, str] = None, verbose: int = 1):; """"""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func : str, optional; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype : int or str, optional; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose : int, optional; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""; import qcengine as qcng. if dertype is None:; derint, derdriver = -1, 'gradient'; else:; derint, derdriver = parse_dertype(dertype, max_derivative=1). resinp = {; 'molecule': self.to_schema(dtype=2),; 'driver': derdri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html:43038,interface,interface,43038,psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,3,['interface'],['interface']
Integrability,"DII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_KAPPA¶. Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:7116,integrat,integration,7116,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,3,['integrat'],['integration']
Integrability,"DIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . Coupled-Pair Methods. theory. COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (OMP3). D. d() CoordEntry ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:14048,wrap,wrappers,14048,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,Database — PSI4 [beta2] documentation; Creating a Database — PSI4 [beta2] documentation; Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation; Symmetry-Adapted Perturbation Theory — PSI4 [beta2] documentation; Hartree–Fock Theory — PSI4 [beta2] documentation; Hartree–Fock Theory — PSI4 [beta2] documentation; Search — PSI4 [beta2] documentation; Embarrassing Parallelism — PSI4 [beta2] documentation; Embarrassing Parallelism — PSI4 [beta2] documentation; Test Suite and Sample Inputs — PSI4 [beta2] documentation; Test Suite and Sample Inputs — PSI4 [beta2] documentation; A PSI4 Tutorial — PSI4 [beta2] documentation; A PSI4 Tutorial — PSI4 [beta2] documentation. /_modules; ; aliases — PSI4 [beta2] documentation; driver — PSI4 [beta2] documentation; frac — PSI4 [beta2] documentation; functional — PSI4 [beta2] documentation; input — PSI4 [beta2] documentation; molutil — PSI4 [beta2] documentation; proc — PSI4 [beta2] documentation; procutil — PSI4 [beta2] documentation; psiexceptions — PSI4 [beta2] documentation; pubchem — PSI4 [beta2] documentation; qmmm — PSI4 [beta2] documentation; text — PSI4 [beta2] documentation; util — PSI4 [beta2] documentation; wrappers — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation; Overview: module code — PSI4 [beta2] documentation. /_sources; . /autodir_options_c; ; adc__cachelevel.txt; adc__memory.txt; adc__newton_convergence.txt; adc__norm_tolerance.txt; adc__num_amps_print.txt; adc__pole_maxiter.txt; adc__pr.txt; adc__reference.txt; adc__roots_per_irrep.txt; adc__sem_maxiter.txt; ccdensity__ael.txt; ccdensity__ao_basis.txt; ccdensity__cachelevel.txt; ccdensity__gauge.txt; ccdensity__ints_tolerance.txt; ccdensity__onepdm.txt; ccdensity__opdm_relax.txt; ccdensity__prop_all.txt; ccdensity__prop_root.txt; ccdensity__prop_sym.txt; ccdensity__reference.txt; ccdensity__roots_per_irrep.txt; ccdensity__wfn.txt; ccdensity__xi.txt; ccdensity__xi_connect.txt; ccdensity__zeta.txt; ccenergy__abcd.txt; ccener,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:983906,wrap,wrappers,983906,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['wrap'],['wrappers']
Integrability,"Decimal vars; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:8174,message,message,8174,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"Detailed Installation of Psi4; Useful Commands; Troubleshooting. Compiling and Installing from Source¶; Detailed directions on; obtaining,; prerequisites,; building and installing,; and FAQ; are maintained on the GitHub Wiki.; If uncertain, start here. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell Psi4 where to write its temporary; (“scratch”) files. Electronic structure packages like Psi4 can; create rather large temporary disk files. It is very important to; ensure that Psi4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, Psi4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell Psi4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file. For C shell (~/.tcshrc file):; setenv PSI_SCRATCH /scratch/user. For Bash (~/.bashrc file):; export PSI_SCRATCH=/scratch/user. Psi4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/external-1.html:1620,depend,depending,1620,psi4manual/1.0.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/external-1.html,2,['depend'],['depending']
Integrability,"Dict[str, Any] = Field(default_factory=dict, description=""The keywords to use in the computation.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description=""AtomicResult return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs] @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs] @validator(""method""); def set_method(cls, method):; return method.lower(). [docs] @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs] def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": {; ""stdout"": True,; },; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs] def compute(self, client: Optional[""FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True; from qcportal.models import KeywordSet, Molecule. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). r = client.add_compute(; ""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]; ); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:3521,protocol,protocols,3521,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,1,['protocol'],['protocols']
Integrability,"Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma -c psi4.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gdma from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() rout",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gdma-1.html:1289,depend,dependent,1289,psi4manual/1.2.1/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gdma-1.html,4,['depend'],['dependent']
Integrability,"E(l, m)[source]¶; Given l and m compute a pure function offset.; #define INT_IPURE(l, m) ((l)+(m)). INT_NCART(am)[source]¶; Gives the number of cartesian functions for an angular momentum.; define INT_NCART(am) ((am>=0) ? ((((am)+2)*((am)+1))>>1) : 0). INT_NFUNC(pu, am)[source]¶; Gives the number of functions for an angular momentum based on pu.; #define INT_NFUNC(pu,am) ((pu)?INT_NPURE(am):INT_NCART(am)). INT_NPURE(am)[source]¶; Gives the number of spherical functions for an angular momentum.; #define INT_NPURE(am) (2*(am)+1). class ShellInfo(am, c, e, pure, nc, center, start, pt='Normalized')[source]¶; This class has the same behavior as GaussianShell, but implements everything using; slower data structures, which are easier to construct. These are used to build the; basis set, which builds more efficient pointer-based GaussianShell objects.; @param e An array of exponent values.; @param am Angular momentum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. AMCHAR()[source]¶; The character symbol for the angular momentum of the given contraction (upper case). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an en",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:99839,contract,contraction,99839,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['contract'],['contraction']
Integrability,"E. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; from __future__ import print_function; from __future__ import absolute_import; import os; import re; import sys; import json; import shutil. import numpy as np. from psi4.driver import driver_util; from psi4.driver import driver_cbs; from psi4.driver import driver_nbody; from psi4.driver import p4util; from psi4.driver import qcdb; from psi4.driver.procrouting import *; from psi4.driver.p4util.exceptions import *; # never import wrappers or aliases into this file. def _find_derivative_type(ptype, method_name, user_dertype):; r""""""; Figures out the derivative type (0, 1, 2) for a given method_name. Will; first use user default and then the highest available derivative type for; a given method.; """""". if ptype not in ['gradient', 'hessian']:; raise ValidationError(""_find_derivative_type: ptype must either be gradient or hessian.""). dertype = ""(auto)"". # If user type is None, try to find the highest derivative; if user_dertype is None:; if (ptype == 'hessian') and (method_name in procedures['hessian']):; dertype = 2; # Will need special logic if we ever have managed Hessians; elif method_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:1768,wrap,wrappers,1768,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['wrap'],['wrappers']
Integrability,ED (DETCI). S_TOLERANCE (SCF). SAD_CHOL_TOLERANCE (SCF). SAD_D_CONVERGENCE (SCF). SAD_E_CONVERGENCE (SCF). SAD_F_MIX_START (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). sanitize_basisname() in module basislist. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_OS_SCALE (SAPT). SAPT_SS_SCALE (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTSAPT0ENERGY. SAPTSAPT2+(3)ENERGY. SAPTSAPT2+3ENERGY. SAPTSAPT2+ENERGY. SAPTSAPT2ENERGY. save() Table method. SAVE_JK (SCF). save_string_for_psi4() Molecule method. save_string_xyz() LibmintsMolecule method. save_to_checkpoint() LibmintsMolecule method. save_xyz() LibmintsMolecule method. SCALE (STABILITY). scale() in module qcdb.vecutil. Table method. SCF. theory. scf_helper() in module proc. SCF_MAXITER (DCFT). SCF_MEM_SAFETY_FACTOR (SCF). SCF_TYPE (CPHF). (SCF). scf_xtpl_helgaker_2() in module wrappers. scf_xtpl_helgaker_3() in module wrappers. SCFDIPOLEX. SCFDIPOLEY. SCFDIPOLEZ. SCFQUADRUPOLEXX. SCFQUADRUPOLEXY. SCFQUADRUPOLEXZ. SCFQUADRUPOLEYY. SCFQUADRUPOLEYZ. SCFQUADRUPOLEZZ. SCFTOTALENERGY. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM). schoenflies_symbol() LibmintsMolecule method. SCHWARZ_CUTOFF (CPHF). scratch files. SCREEN_INTS (LMP2). SCS (LMP2). (MP2). SCS_CCSD (CCENERGY). SCS_CEPA (CEPA). SCS_MP2 (CCENERGY). SCS_N (LMP2). (MP2). SCS_TYPE (OMP2). (OMP3). SCSN_MP2 (CCENERGY). SEKINO (CCLAMBDA). (CCRESPONSE). SEM_MAXITER (ADC). SEMICANONICAL (CCENERGY). (CCEOM). (CCSORT). (CCTRIPLES). (TRANSQT2). set_active_fragment() LibmintsMolecule method. set_active_fragments() LibmintsMolecule method. set_basis_all_atoms() LibmintsMolecule method. set_basis_by_label() LibmintsMolecule method. set_basis_by_number() LibmintsMolecule method. set_basis_by_symbol() LibmintsMolecule method. set_com_fixed() LibmintsMolecule method. set_coordinates() CartesianEntry method. ZMatrixEntry method. set_fixed() CoordValue method,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:38387,wrap,wrappers,38387,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"EFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/libefp.html:8632,depend,dependencies,8632,psi4manual/master/libefp.html,https://psicode.org,https://psicode.org/psi4manual/master/libefp.html,1,['depend'],['dependencies']
Integrability,"EGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2016 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This program is free software; you can redistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """"""; from __future__ import absolute_import; import re; import os; import math; from driver import *. [docs]class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. [docs] def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = psi4.has_option_changed(""BASIS""); ribasisChanged = psi4.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = psi4.has_option_changed(""SCF_TYPE""). basis = psi4.get_option(""BASIS""); ribasis = psi4.get_option(""DF_BASIS_SCF""); scftype = psi4.get_option(""SCF_TYPE""). psi4.print_out("" => Diffu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qmmm.html:1139,integrat,integrate,1139,psi4manual/1.0.0/_modules/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qmmm.html,1,['integrat'],['integrate']
Integrability,"ELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' in kwargs:; # do_delta3 = True; # cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); # if cbs_delta3_wfn not in VARH.keys():; # raise ValidationError(""""""Requested DELTA3 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn)); #; # cbs_delta3_wfn_lesser = kwargs.get('delta3_wfn_lesser', cbs_delta2_wfn).lower(); # if not (cbs_delta3_wfn_lesser in VARH.keys()):; # raise ValidationError(""""""Requested DELTA3 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn_lesser)); #; # # Establish method for fourth delta correction energy; # if 'delta4_wfn' in kwargs:; # do_delta4 = True; # cbs_delta4_wfn = kwargs['delta4_wfn'].lower(); # if not (cbs_delta4_wfn in VARH.keys()):; # raise ValidationError('Requested DELTA4 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn)); #; # if 'delta4_wfn_lesser' in kwargs:; # cbs_delta4_wfn_lesser = kwargs['delta4_wfn_lesser'].lower(); # else:; # cbs_delta4_wfn_lesser = cbs_delta3_wfn; # if not (cbs_delta4_wfn_lesser in VARH.keys()):; # raise ValidationError('Requested DELTA4 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:32999,wrap,wrapper,32999,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,3,['wrap'],['wrapper']
Integrability,"ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:15209,message,message,15209,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['message'],['message']
Integrability,ENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (LMP2); LMP2 — Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. R_CONVERGENCE (OMP2); OMP2 — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (OMP3); OMP3 — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS1 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS2 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS3 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:99108,integrat,integration,99108,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"ENERGY (PSIMRCC). PubChem. pubchem module. PubChemObj class in pubchem. PUREAM (GLOBALS). PYTHONPATH, [1], [2], [3]. Q. QC_COUPLING (DCFT). qcdb module. qcdb.__init__ module. qcdb.dbproc module. qcdb.exceptions module. qcdb.libmintscoordentry module. qcdb.libmintsmolecule module. qcdb.molecule module. qcdb.periodictable module. qcdb.physconst module. qcdb.psiutil module. qcdb.vecutil module. QcdbException. QCISD(T). QCISD(T)CORRELATIONENERGY. QCISD(T)TOTALENERGY. QCISDCORRELATIONENERGY. QCISDTOTALENERGY. QMMM class in qmmm. qmmm module. QRHF (TRANSQT). query_yes_no() in module qcdb.psiutil. quotify() in module input. R. r() CoordEntry static method. R4S (DETCI). R_CONVERGENCE (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CIS). (DCFT). (DETCI). (FNOCC). (LMP2). (OCC). (PSIMRCC). R_POINTS (SCF). RADIUS (SCF). RAS1 (DETCI). (TRANSQT). RAS2 (DETCI). (TRANSQT). RAS3 (DETCI). (TRANSQT). RAS34_MAX (DETCI). RAS3_MAX (DETCI). RAS4 (DETCI). (TRANSQT). RAS4_MAX (DETCI). reconstitute_bracketed_basis() in module wrappers. REFERENCE (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (DCFT). (DETCI). (LMP2). (MCSCF). (RESPONSE). (SCF). (STABILITY). (TRANSQT). (TRANSQT2). REFERENCE_SYM (DETCI). reinterpret_coordentries() LibmintsMolecule method. reinterpret_coordentry() LibmintsMolecule method. RELAX_GUESS_ORBITALS (DCFT). RELAX_TAU (DCFT). release_symmetry_information() LibmintsMolecule method. REORDER (TRANSQT). REPL_OTF (DETCI). reset_point_group() LibmintsMolecule method. RESPONSE_ALGORITHM (DCFT). RESTART (CCENERGY). (CCLAMBDA). (CCRESPONSE). (DETCI). RESTART_EOM_CC3 (CCEOM). restore() OptionsState method. OptionState method. RESTRICTED_DOCC (DETCI). (PSIMRCC). (TRANSQT). RESTRICTED_UOCC (DETCI). (TRANSQT). RFO_FOLLOW_ROOT (OPTKING). RFO_ROOT (OPTKING). RGC10 module, [1]. RHF_TRIPLETS (CCEOM). RMS_DISP_G_CONVERGENCE (OPTKING). RMS_FORCE_G_CONVERGENCE (OPTKING). RMS_MOGRAD_CONVERGENCE (OCC). ROOTS_PER_IRREP (ADC). (CCDENSITY). (CCEOM). (CCLAMB",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:36262,wrap,wrappers,36262,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"ENERGY'] = ret_energy; if self.driver == 'gradient':; qcvars['CURRENT GRADIENT'] = ret_ptype; properties[""return_gradient""] = ret_ptype; elif self.driver == 'hessian':; qcvars['CURRENT GRADIENT'] = ret_gradient; qcvars['CURRENT HESSIAN'] = ret_ptype; properties[""return_gradient""] = ret_gradient; properties[""return_hessian""] = ret_ptype. component_results = self.dict()['task_list']; for k, val in component_results.items():; val['molecule'] = val['molecule'].to_schema(dtype=2). nbody_model = AtomicResult(; **{; 'driver': self.driver,; 'model': {; 'method': self.method,; 'basis': self.basis,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__),; 'extras': {; 'qcvars': qcvars,; 'component_results': component_results,; },; 'return_result': ret_ptype,; 'success': True,; }). return nbody_model. [docs] def get_psi_results(self, return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into ManyBody-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - supersystem molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; nbody_model = self.get_results(); ret = nbody_model.return_result. wfn = core.Wavefunction.build(self.molecule, ""def2-svp"", quiet=True). # TODO all besides nbody may be better candidates for extras than qcvars. energy/gradient/hessian_body_dict in particular are too simple for qcvars (e.g., ""2""); dicts = [; #""energies"", # retired; #""ptype"", # retired; ""intermediates"",; ""intermediates_energy"", #""intermediates2"",; ""intermediates_gradient"", #""intermediates",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:90836,interface,interface,90836,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,2,['interface'],['interface']
Integrability,"EN_VIRT¶. Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD¶. Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:28684,contract,contracted,28684,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['contract'],['contracted']
Integrability,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:69484,depend,depending,69484,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['depend'],['depending']
Integrability,"ESPONSE.; The most important keywords associated with CC-LR calculations are as follows. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. Table Of Contents. CC: Coupled Cluster Methods; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:9844,depend,dependent,9844,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['depend'],['dependent']
Integrability,"ESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). visualization. W. WABEI_LOWDISK (CCHBAR). WebMO. WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (CLAG). (DETCI). (GLOBALS). (LMP2). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). WFN_TYPE (OCC). wrappers module. WRITER_FILE_LABEL (GLOBALS). X. x() LibmintsMolecule method. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xyz() LibmintsMolecule method. Y. y() LibmintsMolecule method. Z. Z() CoordEntry method. LibmintsMolecule method. z() LibmintsMolecule method. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() in module qcdb.vecutil. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). ZMatrixEntry class in qcdb.libmintscoordentry. Quick search. Enter search terms or a module, class or function name.; . Navigat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:45373,wrap,wrappers,45373,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"ESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Support for using Psi4 as an MDI engine.; For details regarding MDI, see https://molssi.github.io/MDI_Library/html/index.html. """""". __all__ = [; ""mdi_init"",; ""mdi_run"",; ""MDIEngine"",; ]. import numpy as np; import qcelemental as qcel. import psi4. _have_mdi = False; try:; from mdi import MDI_Init, MDI_MPI_get_world_comm, MDI_Accept_Communicator, \; MDI_Send, MDI_Recv, MDI_Recv_Command, MDI_INT, MDI_DOUBLE, \; MDI_Register_Node, MDI_Register_Command; _have_mdi = True; except ImportError:; pass. try:; from mpi4py import MPI; use_mpi4py = True; except ImportError:; use_mpi4py = False. class MDIEngine():; def __init__(self, scf_method: str, **kwargs):; """""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """""". # Method used when the SCF command is received; self.scf_method = scf_method. # Additional arguments for energy, gradient, or optimization calculations; self.kwargs = kwargs. # Molecule all MDI operations are performed on; input_molecule = kwargs.pop('molecule', psi4.core.get_active_molecule()); _ini_cart = getattr(input_molecule, ""_initial_cartesian"", None); self.molecule = input_molecule.clone(); if _ini_cart:; self.molecule._initial_cartesian = _ini_cart; psi4.core.set_active_molecule(self.molecule). # Most recent SCF energy; self.energy = 0.0. # Variables used when MDI sets a lattice of point charges; self.nlattice",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/mdi_engine.html:1840,interface,interface,1840,psi4manual/1.8.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/mdi_engine.html,1,['interface'],['interface']
Integrability,"ESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Support for using Psi4 as an MDI engine.; For details regarding MDI, see https://molssi.github.io/MDI_Library/html/index.html. """""". __all__ = [; ""mdi_init"",; ""mdi_run"",; ""MDIEngine"",; ]. import numpy as np; import qcelemental as qcel. import psi4. _have_mdi = False; try:; from mdi import MDI_Init, MDI_MPI_get_world_comm, MDI_Accept_Communicator, \; MDI_Send, MDI_Recv, MDI_Recv_Command, MDI_INT, MDI_DOUBLE, \; MDI_Register_Node, MDI_Register_Command; _have_mdi = True; except ImportError:; pass. try:; from mpi4py import MPI; use_mpi4py = True; except ImportError:; use_mpi4py = False. class MDIEngine():; def __init__(self, scf_method: str, **kwargs):; """""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """""". # Method used when the SCF command is received; self.scf_method = scf_method. # Additional arguments for energy, gradient, or optimization calculations; self.kwargs = kwargs. # Molecule all MDI operations are performed on; input_molecule = kwargs.pop('molecule', psi4.core.get_active_molecule()); self.molecule = input_molecule.clone(); psi4.core.set_active_molecule(self.molecule). # Most recent SCF energy; self.energy = 0.0. # Variables used when MDI sets a lattice of point charges; self.nlattice = 0 # number of lattice point charges; self.clattice = [] # list of lattice coordinates; self.lattice = [] # list of lattice ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html:1838,interface,interface,1838,psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/mdi_engine.html,1,['interface'],['interface']
Integrability,"E_UNITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gdma-1.html:5699,depend,dependencies,5699,psi4manual/1.2.1/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gdma-1.html,13,['depend'],['dependencies']
Integrability,"F (Expert) — Pruning Scheme. Type: string; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF); SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF); SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:102864,integrat,integration,102864,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,F). SAD_F_MIX_START (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). sanitize() Getkw method. Section method. sanitize_basisname() in module p4util.basislist. sanity_check() Keyword method. Section method. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_OS_SCALE (SAPT). SAPT_SS_SCALE (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTSAPT0ENERGY. SAPTSAPT2+(3)(CCD)ENERGY. SAPTSAPT2+(3)ENERGY. SAPTSAPT2+(CCD)ENERGY. SAPTSAPT2+3(CCD)ENERGY. SAPTSAPT2+3ENERGY. SAPTSAPT2+ENERGY. SAPTSAPT2ENERGY. save() Table method. SAVE_JK (SCF). save_string_xyz() LibmintsMolecule method. Molecule method. save_to_checkpoint() LibmintsMolecule method. save_xyz() LibmintsMolecule method. SCALE (STABILITY). scale() in module qcdb.vecutil. Table method. SCF. theory. scf_helper() in module proc. SCF_MAXITER (DCFT). SCF_MEM_SAFETY_FACTOR (SCF). SCF_TYPE (CPHF). (SCF). scf_xtpl_helgaker_2() in module wrappers. scf_xtpl_helgaker_3() in module wrappers. SCFDIPOLEX. SCFDIPOLEY. SCFDIPOLEZ. SCFQUADRUPOLEXX. SCFQUADRUPOLEXY. SCFQUADRUPOLEXZ. SCFQUADRUPOLEYY. SCFQUADRUPOLEYZ. SCFQUADRUPOLEZZ. SCFTOTALENERGY. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM). schoenflies_symbol() LibmintsMolecule method. SCHWARZ_CUTOFF (CPHF). scratch files. SCREEN_INTS (CCENERGY). SCS (CCENERGY). (CPHF). SCS_CCSD (CCENERGY). (FNOCC). SCS_CEPA (FNOCC). SCS_MP2 (CCENERGY). (FNOCC). SCS_N (CCENERGY). (CPHF). SCS_TYPE (OCC). SCSN_MP2 (CCENERGY). Section class in pcmgetkw. SEKINO (CCLAMBDA). (CCRESPONSE). SEM_MAXITER (ADC). SEMICANONICAL (CCENERGY). (CCEOM). (CCSORT). (CCTRIPLES). (TRANSQT2). set() Keyword method. Section method. set_active_fragment() LibmintsMolecule method. set_active_fragments() LibmintsMolecule method. set_basis_all_atoms() LibmintsMolecule method. set_basis_by_label() LibmintsMolecule method. set_basis_by_number() LibmintsMolecule method. set_basis_by_symbol() LibmintsMolecule method. s,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:43608,wrap,wrappers,43608,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,F). SAD_PRINT (SCF). sanitize() Getkw method. Section method. sanitize_basisname() in module p4util.basislist. sanity_check() Keyword method. Section method. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_OS_SCALE (SAPT). SAPT_SS_SCALE (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTSAPT0ENERGY. SAPTSAPT2+(3)(CCD)ENERGY. SAPTSAPT2+(3)ENERGY. SAPTSAPT2+(CCD)ENERGY. SAPTSAPT2+3(CCD)ENERGY. SAPTSAPT2+3ENERGY. SAPTSAPT2+ENERGY. SAPTSAPT2ENERGY. save() Table method. SAVE_JK (SCF). save_string_xyz() LibmintsMolecule method. Molecule method. save_to_checkpoint() LibmintsMolecule method. save_xyz() LibmintsMolecule method. SCALE (STABILITY). scale() in module qcdb.vecutil. Table method. SCF. theory. scf_helper() in module proc. SCF_MAXITER (DCFT). SCF_MEM_SAFETY_FACTOR (SCF). SCF_TYPE (CPHF). (SCF). scf_xtpl_helgaker_2() in module wrappers. scf_xtpl_helgaker_3() in module wrappers. SCFDIPOLEX. SCFDIPOLEY. SCFDIPOLEZ. SCFQUADRUPOLEXX. SCFQUADRUPOLEXY. SCFQUADRUPOLEXZ. SCFQUADRUPOLEYY. SCFQUADRUPOLEYZ. SCFQUADRUPOLEZZ. SCFTOTALENERGY. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM). schoenflies_symbol() LibmintsMolecule method. SCHWARZ_CUTOFF (CPHF). scratch files. SCREEN_INTS (CCENERGY). SCS (CCENERGY). (CPHF). SCS_CCSD (CCENERGY). (FNOCC). SCS_CEPA (FNOCC). SCS_MP2 (CCENERGY). (FNOCC). SCS_N (CCENERGY). (CPHF). SCS_TYPE (OCC). SCSN_MP2 (CCENERGY). Section class in pcmgetkw. SEKINO (CCLAMBDA). (CCRESPONSE). SEM_MAXITER (ADC). SEMICANONICAL (CCENERGY). (CCEOM). (CCSORT). (CCTRIPLES). (TRANSQT2). set() Keyword method. Section method. set_active_fragment() LibmintsMolecule method. set_active_fragments() LibmintsMolecule method. set_basis_all_atoms() LibmintsMolecule method. set_basis_by_label() LibmintsMolecule method. set_basis_by_number() LibmintsMolecule method. set_basis_by_symbol() LibmintsMolecule method. set_caseless() GetkwParser method. set_com_,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:43650,wrap,wrappers,43650,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"F; threaded [3]. Mk-MRCCSD; Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRCCSD(T); Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRPT2; Y; N; RHF/ROHF/TCSCF; threaded [3]. CEPA(n); Y; N; RHF; threaded [3]. ACPF/AQCC; Y; N; RHF; threaded [3]. OMP2; Y; Y; RHF/UHF/RKS/UKS; partially threaded. OMP3; Y; N; RHF/UHF/RKS/UKS; partially threaded. Geometry optimization (currently restricted to true minima on the potential; energy surface) can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is; distributed for free and without any guarantee of reliability,; accuracy, or suitability for any particular purpose. No obligation; to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries directed to; crawdad@vt.edu.; For bug reports, specific and detailed information, with example; inputs, would be appreciated. Questions or comments regarding; this user’s manual may be sent to; sherrill@gatech.edu.; Footnotes. [1]UHF-CCSD(T) gradients only, as of beta3. [2]RHF reference only. DF-MP2 is recommended as a faster alternative. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) threading through BLAS routines only. [4](1, 2) DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. Table Of Contents. Introduction; Overview; Citing PSI4; Supported Architectures; Capabilities; Technical Support. Previous topic; <no title>; Next topic; Installation and Runtime Configuration; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 21, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/introduction-1.html:10028,rout,routines,10028,psi4manual/4.0b3/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/introduction-1.html,2,['rout'],['routines']
Integrability,"FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". __all__ = [""process_input""]. import os; import re; import sys; import uuid. from psi4 import core; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html:1727,message,message,1727,psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,4,['message'],['message']
Integrability,"FO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:197489,depend,depending,197489,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,8,['depend'],['depending']
Integrability,"Field(None, description=""group in the chown sense.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description="":py:class:`~qcelemental.models.AtomicResult` return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs]; @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs]; @validator(""method""); def set_method(cls, method):; return method.lower(). [docs]; @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs]; def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": self.protocols,; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs]; def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. from qcelemental.models import Molecule. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; protocols=self.protocols,; tag=self.tag,; priority=self.priority,; owner_group=self.owner_group,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".forma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:4302,protocol,protocols,4302,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,2,['protocol'],['protocols']
Integrability,"Field(None, description=""group in the chown sense.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description="":py:class:`~qcelemental.models.AtomicResult` return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs]; @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs]; @validator(""method""); def set_method(cls, method):; return method.lower(). [docs]; @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs]; def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": self.protocols,; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs]; def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. try:; # QCFractal v0.15.8; from qcportal.models import KeywordSet, Molecule; qca_next_branch = False; except ImportError:; # QCFractal `next`; from qcelemental.models import Molecule; qca_next_branch = True. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). if not qca_next_branch:; # QCFractal v0.15.8. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. r = client.add_compute(""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:4327,protocol,protocols,4327,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,1,['protocol'],['protocols']
Integrability,"For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_nam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:17928,message,messages,17928,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['message'],['messages']
Integrability,"Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Parameters; ----------; eqn_description : str; Type of QC routine that has failed (e.g., SCF); iteration : int; What iteration we failed on. """""". def __init__(self, eqn_description, iteration):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, iteration); PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class Optimizati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:1992,message,message,1992,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:105044,integrat,integration,105044,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Integrability,"General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core, extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning. For; cases where the syntax just has to jump, this can be used to trap; the old syntax at first error and suggest the new. """""". def __init__(self, old, new, version, elaboration):",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:1977,depend,dependencies,1977,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,3,['depend'],['dependencies']
Integrability,"Getkw class in pcmgetkw. getkw() Getkw method. Section method. getkw_bnf() GetkwParser method. GetkwParser class in pcmgetkw. getMoleculeString() PubChemObj method. getPubChemResults() in module pubchem. getSDF() PubChemObj method. getXYZFile() PubChemObj method. Ghost Atoms. gradient() in module driver. GRADIENT_WRITE (FINDIF). grimme_dftd3() Molecule method. GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. has_zmatrix() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() in module driver. HESSIAN_WRITE (FINDIF). HF. HFTOTALENERGY. highest_1() in module wrappers. HSG module, [1]. HTBH module, [1]. HTR40 module, [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). import_ignorecase() in module p4util.procutil. IncompleteAtomError. inertia_tensor() LibmintsMolecule method. Molecule method. inertia_tensor_partial() Molecule method. inertial_system() Molecule method. inertial_system_partial() Molecule method. init_with_checkpoint() LibmintsMolecule method. init_with_io() LibmintsMolecule method. init_with_xyz() qcdb.libmintsmolecule.LibmintsMolecule class method. qcdb.molecule.Molecule class method. inputparser module. installing. INTCOS_GENERATE_EXIT (OPTKING). interactive module. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCENERGY). (CCSORT). (DCFT). (DFM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:25138,wrap,wrappers,25138,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"Group(tag_begin+name+tag_end)+sect_begin. 		# Grammar; 		keyword = name + eql + kstr; 		vector = name + eql + vec; 		data=Combine(dmark+name)+SkipTo(end_data)+end_data; 		section=Forward(); 		sect_def=(sect | tag_sect ) #| vec_sect); 		input=section | data | vector | keyword ; 		section << sect_def+ZeroOrMore(input) + sect_end. 		# Parsing actions	; 		ival.setParseAction(self.conv_ival); 		dval.setParseAction(self.conv_dval); 		lval.setParseAction(self.conv_lval); 		keyword.setParseAction(self.store_key); 		vector.setParseAction(self.store_vector); 		data.setParseAction(self.store_data); 		sect.setParseAction(self.add_sect); 		tag_sect.setParseAction(self.add_sect); 		sect_end.setParseAction(self.pop_sect). 		bnf=ZeroOrMore(input) + StringEnd().setFailAction(parse_error); 		bnf.ignore(pythonStyleComment); 		return bnf. [docs]def parse_error(s,t,d,err):; 	print ""Parse error, line %d: %s"" % ( lineno(err.loc,err.pstr), ; 			line(err.loc,err.pstr)); 	sys.exit(1). ######## Convenience routines for callbacks ########. [docs]def check_opt(sect,key):; 	try:; 		k=sect[key]; 	except:; 		print 'You have a typo in the code for key', key; 		sys.exit(1); 	if k is not None:; 		if k.is_set():; 			return True; 	return False. [docs]def check_required(list, sect):; 	err=""Error: Required option '%s' not set in section '%s%s'!"" ; 	for i in list:; 		if not check_opt(sect, i):; 			if sect.name == sect.tag or sect.tag is None:; 				print err % (i, sect.name, ''); 			else:; 				print err % (i, sect.name, '<' + sect.tag + '>'); 			sys.exit(1). [docs]def check_ignored(list, sect):; 	warn=""Warning: The '%s' option will be ignored in section '%s%s'."" ; 	for i in list:; 		if check_opt(sect, i):; 			if sect.name == sect.tag:; 				print warn % (i, sect.name, ''); 			else:; 				print warn % (i, sect.name, '<' + sect.tag + '>'). ####################################################. [docs]def test( strng ):; 	bnf = GetkwParser(); 	try:; 		tokens=bnf.parseString(strng); 	except ParseException, err:; 	",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html:19612,rout,routines,19612,psi4manual/4.0b5/_modules/pcmgetkw.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html,1,['rout'],['routines']
Integrability,"H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of Psi4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in Psi4 are; _nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. _nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Datab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:12621,wrap,wrappers,12621,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrappers']
Integrability,"H has assigned them. These artifacts only linger for a day.; Log in to vergil root and move to /var/www/html/psicode-download.; Use the pull_gha_installers script to download the installers from GH to vergil. First two arguments are first and last of the artifact numbers, and third argument is an auth token. bash pull_gha_installers.sh 47226565 47226573 715...4f3.; Make WindowsWSL and any other symlinks the script head matter advises. Generate download page for psicode.org¶. Be in repo psicode-hugo-website; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controll",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:15909,message,messages,15909,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,5,['message'],['messages']
Integrability,"HSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""; if verbose is None:; verbose = core.get_global_option('PRINT'). for pvar, action in pvdefs.items():; if verbose >= 2:; print(""""""building %s %s"""""" % (pvar, '.' * (50 - len(pvar))), end=''). psivars = core.scalar_variables(); data_rich_args = []. for pv in action['args']:; if isinstance(pv, str):; if pv in psivars:; data_rich_args.append(psivars[pv]); else:; if verbose >= 2:; print(""""""EMPTY, missing {}"""""".format(pv)); break; else:; data_rich_args.append(pv); else:; result = action['func'](data_rich_args); core.set_variable(pvar, result); if verbose >= 2:; print(""""""SUCCESS""""""). [docs]def provenance_stamp(routine: str, module: str = None) -> Dict[str, str]:; """"""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""; prov = {'creator': 'Psi4', 'version': __version__, 'routine': routine}; if module:; prov[""module""] = module. return prov. [docs]def plump_qcvar(; val: Union[float, str, List],; shape_clue: str,; ret: str = 'np') -> Union[float, np.ndarray, core.Matrix]:; """"""Prepare serialized QCVariable for :py:func:`~psi4.core.set_variable` by; converting flat arrays into shaped ones and floating strings. Parameters; ----------; val; flat (?, ) list or scalar or string, probably from JSON storage.; shape_clue; Label that includes (case insensitive) one of the following as; a clue to the array's natural dimensions: 'gradient', 'hessian'; ret; {'np', 'psi4'}; Wheth",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html:19737,rout,routine,19737,psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/procutil.html,1,['rout'],['routine']
Integrability,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_faq.html:2642,depend,dependencies,2642,psi4manual/master/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html,1,['depend'],['dependencies']
Integrability,"How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands; Troubleshooting. Scratch Files and Elementary Restart¶; One very important part of user configuration at the end of the; installation process; is to tell PSI4 where to write its temporary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or through the ~/.psi4rc file; (see section ~/.psi4rc File). Most of the time, PSI_SCRATCH; is preferred, and it overrides any existing ~/.psi4rc setting. You can set up; PSI_SCRATCH by issuing the following commands in a terminal,; or including them in the appropriate rc file.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:4266,depend,depending,4266,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,6,['depend'],['depending']
Integrability,"I4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code.; To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/simint-1.html:1195,depend,dependent,1195,psi4manual/1.1.0/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/simint-1.html,2,['depend'],['dependent']
Integrability,"I4 Capabilities; Interface to gau2grid by D. G. A. Smith. Interface to gau2grid by D. G. A. Smith¶; Code author: D. G. A. Smith; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gau2grid has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gau2grid-1.html:1198,depend,dependent,1198,psi4manual/1.4.0/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gau2grid-1.html,9,['depend'],['dependent']
Integrability,"I4 [beta3] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html:1045,rout,routine,1045,psi4manual/4.0b3/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optionshandling-1.html,2,['rout'],['routine']
Integrability,"I4 [beta4] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html:1045,rout,routine,1045,psi4manual/4.0b4/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html,2,['rout'],['routine']
Integrability,"I4 [beta5] documentation. Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Programming: Using the Core Libraries ». LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/optionshandling-1.html:1045,rout,routine,1045,psi4manual/4.0b5/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/optionshandling-1.html,2,['rout'],['routine']
Integrability,"I4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint2.h; Libint2_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing lib/cmake/libint2/libint2-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint2 — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint2 — CMake variable to force detecting pre-built Libint and not falling back on internal build; BUILD_Libint2_GENERATOR — CMake variable to allow internal build to start from generator source, not generated source; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. Build bundled shared library with up to AM=5. >>> cmake -DBUILD_SHARED_LIBS=ON. Build custom library from generator source. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libint by E. Valeev. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/libint.html:3194,depend,dependencies,3194,psi4manual/master/libint.html,https://psicode.org,https://psicode.org/psi4manual/master/libint.html,1,['depend'],['dependencies']
Integrability,"I4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libxc-1.html:2460,depend,dependencies,2460,psi4manual/1.4.0/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libxc-1.html,2,['depend'],['dependencies']
Integrability,"I4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/libxc-1.html:2460,depend,dependencies,2460,psi4manual/1.5.0/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/libxc-1.html,2,['depend'],['dependencies']
Integrability,"IAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS¶. Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME¶. Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME¶. Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF¶. Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B¶. Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C¶. Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF¶. post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS¶. Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. LOCAL_CONVERGENCE¶. The convergence on the orbital localization procedure. Type: conv double; Default: 1e-12. LOCAL_MAXITER¶. The maxiter on the orbital localization procedure. Type: integer; Default: 200. NL_DISPERSION_PARAMETERS¶. Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. SAVE_UHF_NOS¶. Save the UHF NOs. Type: boolean; Default: false. UHF_NOONS¶. The number of NOONs to print in a UHF calc. Type: string; Default: 3. TDSCF¶. TDSCF_COEFF_CUTOFF¶. Cutoff for printing excitations and de-excitations contributing to each excited state. Type: double; Default: 0.1. TDSCF_GUESS¶. Guess type, only ‘denominators’ currently supported. Type: string; Default: DENOMINATORS. TDSCF_MAXITER¶. Maximum number of TDSCF solver iterations. Type: integer; Default: 60. TDSCF_PRINT¶. Verbosity level in TDSCF. Type: integer; Default: 1. TDSCF_R_CONVERGENCE¶. Convergence threshold f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__scf.html:15768,integrat,integration,15768,psi4manual/1.7.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__scf.html,1,['integrat'],['integration']
Integrability,"IAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS¶. Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME¶. Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME¶. Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF¶. Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B¶. Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C¶. Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF¶. post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS¶. Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. LOCAL_CONVERGENCE¶. The convergence on the orbital localization procedure. Type: conv double; Default: 1e-12. LOCAL_MAXITER¶. The maxiter on the orbital localization procedure. Type: integer; Default: 200. NL_DISPERSION_PARAMETERS¶. Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. SAVE_UHF_NOS¶. Save the UHF NOs. Type: boolean; Default: false. UHF_NOONS¶. The number of NOONs to print in a UHF calc. Type: string; Default: 3. TDSCF¶. TDSCF_COEFF_CUTOFF¶. Cutoff for printing excitations and de-excitations icontributing to each excited state. Type: double; Default: 0.1. TDSCF_GUESS¶. Guess type, only ‘denominators’ currently supported. Type: string; Default: DENOMINATORS. TDSCF_MAXITER¶. Maximum number of TDSCF solver iterations. Type: integer; Default: 60. TDSCF_PRINT¶. Verbosity level in TDSCF. Type: integer; Default: 1. TDSCF_R_CONVERGENCE¶. Convergence threshold ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html:13046,integrat,integration,13046,psi4manual/1.4.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html,5,['integrat'],['integration']
Integrability,"IENT"", grad); core.set_variable(f""{name.upper()} TOTAL GRADIENT"", grad); core.set_variable(""CURRENT GRADIENT"", grad). optstash.restore(); return ccwfn. def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; optstash = p4util.OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN']). if name == 'bccd':; core.set_local_option('TRANSQT2', 'WFN', 'BCCD'); core.set_local_option('CCSORT', 'WFN', 'BCCD'); core.set_local_option('CCTRANSORT', 'WFN', 'BCCD'); core.set_local_option('CCENERGY', 'WFN', 'BCCD'). elif name == 'bccd(t)':; core.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); core.set_local_option('CCSORT', 'WFN', 'BCCD_T'); core.set_local_option('CCENERGY', 'WFN', 'BCCD_T'); core.set_local_option('CCTRANSORT', 'WFN', 'BCCD_T'); core.set_local_option('CCTRIPLES', 'WFN', 'BCCD_T'); else:; raise ValidationError(""proc.py:run_bccd name %s not recognized"" % name). # Bypass routine scf if user did something special to get it to converge; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs) # C1 certified. # Needed for (T).; if (core.get_option('SCF', 'REFERENCE') == 'ROHF'):; ref_wfn.semicanonicalize(). # Ensure IWL files have been written; proc_util.check_iwl_file_from_scf_type(core.get_global_option('SCF_TYPE'), ref_wfn). core.set_local_option('CCTRANSORT', 'DELETE_TEI', 'false'). bcc_iter_cnt = 0; if (core.get_global_option(""RUN_CCTRANSORT"")):; sort_func = core.cctransort; else:; try:; from psi4.driver.pasture import addins; core.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'); sort_func = addins.ccsort_transqt2; except Exception:; raise PastureRequiredError(""RUN_CCTRANSORT""). while True:; sort_func(ref_wfn). ref_wfn = core.ccenergy(ref_wfn); core.print_out('Brueckner convergence check: %s\n' % bool(core.variable('BRUECKNER CONVERGED'))); if core.variable('BRUECKNER CONVERGED'):; break. if bcc_iter_cnt >= core.get_option('CCENERGY', 'BCCD_M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:92113,rout,routine,92113,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['routine']
Integrability,"IENT"", grad); core.set_variable(f""{name.upper()} TOTAL GRADIENT"", grad); core.set_variable(""CURRENT GRADIENT"", grad). optstash.restore(); return ccwfn. def run_bccd(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a Brueckner CCD calculation. """"""; optstash = p4util.OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['CCENERGY', 'WFN']). if name == 'bccd':; core.set_local_option('TRANSQT2', 'WFN', 'BCCD'); core.set_local_option('CCSORT', 'WFN', 'BCCD'); core.set_local_option('CCTRANSORT', 'WFN', 'BCCD'); core.set_local_option('CCENERGY', 'WFN', 'BCCD'). elif name == 'bccd(t)':; core.set_local_option('TRANSQT2', 'WFN', 'BCCD_T'); core.set_local_option('CCSORT', 'WFN', 'BCCD_T'); core.set_local_option('CCENERGY', 'WFN', 'BCCD_T'); core.set_local_option('CCTRANSORT', 'WFN', 'BCCD_T'); core.set_local_option('CCTRIPLES', 'WFN', 'BCCD_T'); else:; raise ValidationError(""proc.py:run_bccd name %s not recognized"" % name). # Bypass routine scf if user did something special to get it to converge; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs) # C1 certified. # Needed for (T).; if (core.get_option('SCF', 'REFERENCE') == 'ROHF'):; ref_wfn.semicanonicalize(). # Ensure IWL files have been written; proc_util.check_iwl_file_from_scf_type(core.get_global_option('SCF_TYPE'), ref_wfn). core.set_local_option('CCTRANSORT', 'DELETE_TEI', 'false'). bcc_iter_cnt = 0; if (core.get_global_option(""RUN_CCTRANSORT"")):; sort_func = core.cctransort; else:; try:; from psi4.driver.pasture import addins; core.set_local_option('TRANSQT2', 'DELETE_TEI', 'false'); sort_func = addins.ccsort_transqt2; except:; raise PastureRequiredError(""RUN_CCTRANSORT""). while True:; sort_func(ref_wfn). ref_wfn = core.ccenergy(ref_wfn); core.print_out('Brueckner convergence check: %s\n' % bool(core.variable('BRUECKNER CONVERGED'))); if (core.variable('BRUECKNER CONVERGED') == True):; break. if bcc_iter_cnt >= core.get_option('CCENERGY', 'BCCD_M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:90980,rout,routine,90980,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['rout'],['routine']
Integrability,"ILITY TENSOR @ xNM¶; The quadrupole polarizability in atomic units [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM¶. CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM¶; The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. CCD TOTAL ENERGY¶. CCD CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. CC ALPHA-ALPHA PAIR ENERGIES¶. CCSD ALPHA-ALPHA PAIR ENERGIES¶. CC2 ALPHA-ALPHA PAIR ENERGIES¶. CC3 ALPHA-ALPHA PAIR ENERGIES¶. MP2 ALPHA-ALPHA PAIR ENERGIES¶; Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. CC ALPHA-BETA PAIR ENERGIES¶. CCSD ALPHA-BETA PAIR ENERGIES¶. CC2 ALPHA-BETA PAIR ENERGIES¶. CC3 ALPHA-BETA PAIR ENERGIES¶. MP2 ALPHA-BETA PAIR ENERGIES¶; Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. CC SINGLET PAIR ENERGIES¶. CCSD SINGLET PAIR ENERGIES¶. CC2 SINGLET PAIR ENERGIES¶. CC3 SINGLET PAIR ENERGIES¶. MP2 SINGLET PAIR ENER",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html:16707,depend,dependence,16707,psi4manual/1.7.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html,4,['depend'],['dependence']
Integrability,"ILITY TENSOR @ xNM¶; The quadrupole polarizability in atomic units [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (LEN) @ xNM¶. CCSD SPECIFIC ROTATION (LEN) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (VEL) @ xNM¶. CCSD SPECIFIC ROTATION (VEL) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 SPECIFIC ROTATION (MVG) @ xNM¶. CCSD SPECIFIC ROTATION (MVG) @ xNM¶; The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM¶. CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM¶; The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. CCD TOTAL ENERGY¶. CCD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the coupled-cluster doubles level of theory. CC ALPHA-ALPHA PAIR ENERGIES¶. CCSD ALPHA-ALPHA PAIR ENERGIES¶. CC2 ALPHA-ALPHA PAIR ENERGIES¶. CC3 ALPHA-ALPHA PAIR ENERGIES¶. MP2 ALPHA-ALPHA PAIR ENERGIES¶; Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. CC ALPHA-BETA PAIR ENERGIES¶. CCSD ALPHA-BETA PAIR ENERGIES¶. CC2 ALPHA-BETA PAIR ENERGIES¶. CC3 ALPHA-BETA PAIR ENERGIES¶. MP2 ALPHA-BETA PAIR ENERGIES¶; Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. CC SINGLET PAIR ENERGIES¶. CCSD SINGLET PAIR ENERGIES¶. CC2 SINGLET PAIR ENERGIES¶. CC3 SINGLET PAIR ENERGIES¶. MP2 SINGLET PAIR ENERGI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html:16500,depend,dependence,16500,psi4manual/1.6.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html,1,['depend'],['dependence']
Integrability,"IMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14226,message,message,14226,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['message'],['message']
Integrability,"IPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Installation and Runtime Configuration. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/external.html:24260,depend,dependencies,24260,psi4manual/1.8.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/external.html,1,['depend'],['dependencies']
Integrability,"IPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external.html:24260,depend,dependencies,24260,psi4manual/1.9.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external.html,1,['depend'],['dependencies']
Integrability,"ISD against DETCI CISD. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. fnocc7; Test fnocc with linear dependencies. props4; Electrostatic potential and electric field evaluated on a grid around water. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. scf-guess-read2; Test if the the guess read in the same basis converges. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 mol",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:44699,depend,depend,44699,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"ITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; from __future__ import print_function; from __future__ import absolute_import; import sys; import re; import math; import os; import shutil. import psi4. # Import driver helpers; import driver_util; import driver_cbs; import driver_nbody. from procedures import *; import p4util; from p4util.exceptions import *; # never import wrappers or aliases into this file. def _find_derivative_type(ptype, method_name, user_dertype):; r""""""; Figures out the derivative type (0, 1, 2) for a given method_name. Will; first use user default and then the highest available derivative type for; a given method.; """""". if ptype not in ['gradient', 'hessian']:; raise ValidationError(""_find_derivative_type: ptype must either be gradient or hessian.""). dertype = ""(auto)"". # If user type is None, try to find the highest derivative; if user_dertype is None:; if (ptype == 'hessian') and (method_name in procedures['hessian']):; dertype = 2; # Will need special logic if we ever have managed Hessians; elif method_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:1709,wrap,wrappers,1709,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['wrap'],['wrappers']
Integrability,"ITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import os; import re; import sys; import json; import shutil. import numpy as np. from psi4.driver import driver_util; from psi4.driver import driver_cbs; from psi4.driver import driver_nbody; from psi4.driver import driver_findif; from psi4.driver import p4util; from psi4.driver import qcdb; from psi4.driver.procrouting import *; from psi4.driver.p4util.exceptions import *. # never import wrappers or aliases into this file. def _find_derivative_type(ptype, method_name, user_dertype):; r""""""; Figures out the derivative type (0, 1, 2) for a given method_name. Will; first use user default and then the highest available derivative type for; a given method.; """""". if ptype not in ['gradient', 'hessian']:; raise ValidationError(""_find_derivative_type: ptype must either be gradient or hessian.""). dertype = ""(auto)"". # If user type is None, try to find the highest derivative; if user_dertype is None:; if (ptype == 'hessian') and (method_name in procedures['hessian']):; dertype = 2; # Will need special logic if we ever have managed Hessians; elif method_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able to be Non",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:1728,wrap,wrappers,1728,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['wrap'],['wrappers']
Integrability,"ITS¶. Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_RADIUS¶. The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH¶. The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/gdma-1.html:5569,depend,dependencies,5569,psi4manual/1.1.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/gdma-1.html,2,['depend'],['dependencies']
Integrability,"ITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. [docs]def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :ref:`Wavefunction<sec:psimod_Wavefunction>`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html:1751,rout,routines,1751,psi4manual/1.0.0/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html,1,['rout'],['routines']
Integrability,"ITY). (CCEOM). (CCLAMBDA). PROPERTIES (GLOBALS). PROPERTY (CCENERGY). (CCRESPONSE). (CCSORT). (RESPONSE). property(); . setting keywords. property() (in module driver). psi4 command line option; . --new-plugin <name>. -V, --version. -a, --append. -d, --debug. -h, --help. -i <filename>, --input <filename>. -m, --messy. -n <threads>, --nthread <threads>. -o <filename>, --output <filename>. -p <prefix>, --prefix <prefix>. -v, --verbose. -w, --wipe. PSI_SCRATCH. PsiException. psiexceptions (module). PSIMRCC (TRANSQT). psirc. PT_ENERGY (PSIMRCC). PubChem. pubchem (module). PubChemObj (class in pubchem). PUREAM (GLOBALS). PYTHONPATH. Q. QMMM (class in qmmm). qmmm (module). QRHF (TRANSQT). R. R4S (DETCI). R_CONVERGENCE (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CIS). (DCFT). (DETCI). (LMP2). (OMP2). (PSIMRCC). RAS1 (DETCI). (TRANSQT). RAS2 (DETCI). (TRANSQT). RAS3 (DETCI). (TRANSQT). RAS34_MAX (DETCI). RAS3_MAX (DETCI). RAS4 (DETCI). (TRANSQT). RAS4_MAX (DETCI). reconstitute_bracketed_basis() (in module wrappers). REFERENCE (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (DETCI). (LMP2). (MCSCF). (MP2). (PLUGIN_DFADC), [1]. (PLUGIN_MP2), [1]. (RESPONSE). (SCF). (STABILITY). (TRANSQT). (TRANSQT2). REFERENCE_SYM (DETCI). REORDER (TRANSQT). REPL_OTF (DETCI). RESPONSE_ALGORITHM (DCFT). RESTART (CCENERGY). (CCLAMBDA). (CCRESPONSE). (DETCI). RESTART_EOM_CC3 (CCEOM). RESTRICTED_DOCC (DETCI). (PSIMRCC). (TRANSQT). RESTRICTED_UOCC (DETCI). (TRANSQT). RFO_FOLLOW_ROOT (OPTKING). RFO_ROOT (OPTKING). RGC10 (module), [1]. RHF_TRIPLETS (CCEOM). RI_BASIS_ADC (PLUGIN_DFADC), [1]. RI_BASIS_SCF (JK), [1]. RMS_DISP_G_CONVERGENCE (OPTKING). RMS_FORCE_G_CONVERGENCE (OPTKING). RMS_MOGRAD_CONVERGENCE (OMP2). ROOTS_PER_IRREP (ADC). (CCDENSITY). (CCEOM). (CCLAMBDA). (CIS). ROTATE_MO_ANGLE (MCSCF). ROTATE_MO_IRREP (MCSCF). ROTATE_MO_P (MCSCF). ROTATE_MO_Q (MCSCF). ROTATION_SCHEME (STABILITY). run_adc() (in module proc). run_bccd() (in module proc). run_bccd_t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:22998,wrap,wrappers,22998,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Programming with the Core Libraries; LibOptions: globals, locals, has_changed and all that. LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/psi4/src/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.ad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/optionshandling.html:1054,rout,routine,1054,psi4manual/1.8.x/optionshandling.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/optionshandling.html,1,['rout'],['routine']
Integrability,"Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Programming with the Core Libraries; LibOptions: globals, locals, has_changed and all that. LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/psi4/src/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.ad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/optionshandling.html:1054,rout,routine,1054,psi4manual/1.9.x/optionshandling.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/optionshandling.html,1,['rout'],['routine']
Integrability,"Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':; optstash.restore(); optstash_conv.restore(); if return_wfn:; return (None, None); else:; return None; elif freq_mode == 'reap':; wfn = core.Wavefunction.build(molecule, core.get_global_option('BASIS')). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = core.fd_freq_1(molecule, gradients, irrep) # TODO or moleculeclone?; wfn.set_hessian(H); wfn.set_gradient(G0); wfn.set_frequencies(core.get_frequencies()). # The last item in the list is the reference energy, return it; core.set_variable('CURRENT ENERGY', energies[-1]). core.set_parent_symmetry(''); optstash.restore(); optstash_conv.restore(). _hessian_write(wfn). if return_wfn:; return (wfn.hessian(), wfn); else:; return wfn.hessian(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; displacements = core.fd_geoms_freq_0(moleculeclone, irrep); moleculeclone.fix_orientation(True); moleculeclone.reinterpret_coordentry(False). # Record undisplaced symmetry for projection of diplaced point groups; core.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if freq_mode == 'sow':; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:77989,depend,dependent,77989,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"Installing from Binary; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable; PsiAPI Tutorial: Using Psi4 as a Python Module. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Capabilities and Alternate Implementations; Notes on Options; Notes on PSI Variables; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DFT-NL; DCT: Density Cumulant Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; CC: Coupled Cluster Theory; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; MCSCF: Multi-Configurational Self-Consistent-Field; SAPT: Symmetry-Adapted Perturbation Theory; F/I-SAPT: Functional Group and/or Intramolecular SAPT; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; Evaluation of One-Electron Properties — oeprop(); Vibrational and Thermochemical Analysis; TDSCF: Time-dependent Hartree–Fock and density-functional theory. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to the BrianQC GPU module by the BrianQC team; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to CPPE by M. Scheurer; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LibECPInt by R. Shaw; Interface to LIBEFP by I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x.html:1832,depend,dependent,1832,psi4manual/1.9.x.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html,5,['depend'],['dependent']
Integrability,"K potentials for C, D, and E. dHF(self); SAPT0 delta HF. disp(self, arg0, arg1, arg2); Computes the MP2-based DispE20 and Exch-DispE20 energy. do_cubes(self); Prepare cube files for orbital/density pictures. elst(self); SAPT0 electrostatics. exch(self); SAPT0 exchange. fdisp(self); F-SAPT0 dispersion. fdrop([external_potentials]); Drop output files from FSAPT calculation. felst(self); F-SAPT0 electrostatics. fexch(self); F-SAPT0 exchange. find(self); F-SAPT0 induction. flocalize(self); F-SAPT0 localize. freeze_core(self); Freeze the core orbitals. ind(self); SAPT0 induction. kinetic(self); Build the kinetic integrals T. localize(self); Localize the active occupied orbitals via IBO2. matrices(self); Return the interally computed matrices (not copied). molecule(self); Returns the FISAPT's molecule. nuclear(self); Build the nuclear potentials V and interaction energies. overlap(self); Build the overlap integrals S. partition(self); Partition the nuclei and electrons. plot(); Filesystem wrapper for FISAPT::plot. print_header(self); Print header, bases, sizes, etc. print_trailer(self); Print SAPT results. raw_plot(self, arg0); Plot some analysis files. scalars(self); Return the interally computed scalars (not copied). scf(self); Solve the relaxed SCF equations for A0 and B0. sinf_disp(self, arg0, arg1, arg2); Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self); Produce unified matrices for A', B', and C'. unify_part2(self); Finish producing unified matrices for A', B', and C'. vectors(self); Return the interally computed vectors (not copied). Methods Documentation. compute_energy(external_potentials=None)¶; Computes the FSAPT energy. FISAPT::compute_energy. coulomb(self: psi4.core.FISAPT) → None¶; Build the J/K potentials for C, D, and E. dHF(self: psi4.core.FISAPT) → None¶; SAPT0 delta HF. disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FISAPT.html:1319,wrap,wrapper,1319,psi4manual/1.8.x/api/psi4.core.FISAPT.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FISAPT.html,1,['wrap'],['wrapper']
Integrability,"K(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time, nthread); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:2720,rout,routines,2720,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['rout'],['routines']
Integrability,"L + 1 real combinations of the spherical harmonics are built from; the (L+1)(L+2)/2 Cartesian Gaussians, according to H. Schlegel and M.; Frish, IJQC, 54, 83-87, 1995. Unlike Cartesian functions these functions; are all strictly normalized. Note that in PSI4, the real combinations of; spherical harmonic functions (see the paragraph below Eq. 15 in the; Schlegel paper) are ordered as: 0, 1+, 1-, 2+, 2-, …. USO (Unique Symmetry-Adapted Orbitals): Spatial symmetry-adapted; combinations of SOs, blocked according to irrep. The total number of USOs; is the same as the number of SOs, but the number of USOs within each irrep; is usually much smaller, which can lead to significant performance; improvements. Note that this basis is sometimes unfortunately referred to; as the SO basis, so it’s a bit context specific. OSO (Orthogonal Symmetry-Adapted Orbitals): USOs orthogonalized by; Symmetric or Canonical Orthogonalization. The number of OSOs may be; slightly smaller than the total number of USOs, due to removal of linear; dependencies via Canonical Orthogonalization. The OSOs are rarely; encountered, as usually we go straight from USOs to MOs. MO (Molecular Orbitals): The combination of OSOs that diagonalizes; the Fock Matrix, so each basis function is a Hartree-Fock (or Kohn-Sham); molecular orbital. The number of OSOs and MOs is always the same. MOs are; orthonormal. LO (Localized Orbitals): Localized occupied orbitals, a different; combination of the occupied molecular orbitals which enhances spatial; locality. LOs do not diagonalize the occ-occ block of the Fock Matrix, but; remain orthonormal to each other and the virtual space. How to name orbital dimensions¶; There are a number of different names used to refer to the basis set size.; These may seem redundant, but they have subtly different meanings, as; detailed below.; A calculation can use either pure (5D, 7F, 9G, etc.) basis functions or; Cartesian (6D, 10F, 15G, etc.), as dictated by the input file / basis set; spe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:11074,depend,dependencies,11074,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,4,['depend'],['dependencies']
Integrability,"L method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and not do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and not do_delta2:; pass; elif do_scf and do_corl and do_delta and do_delta2:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) + delta2 (%s) not valid. These steps are cummulative.' %; (do_scf, do_corl, do_delta, do_delta2)). # Establish list of valid basis sets for correlation energy; if do_corl:; if 'corl_basis' in kwargs:; BSTC,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:62926,wrap,wrapper,62926,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,3,['wrap'],['wrapper']
Integrability,L method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Establish method for third delta correction energy; if 'delta3_wfn' in kwargs:; do_delta3 = 1; cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); if not (cbs_delta3_wfn in VARH.keys()):; raise ValidationError('Requested DELTA3 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta3_wfn)). if 'delta3_wfn_lesser' in kwargs:; cbs_delta3_wfn_lesser = kwargs['delta3_wfn_lesser'].lower(); else:; cbs_delta3_wfn_lesser = 'mp2'; if not (cbs_delta3_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA3 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to pro,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:71792,wrap,wrapper,71792,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"LARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the num",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:189002,rout,routing,189002,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['rout'],['routing']
Integrability,"LATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF); SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF); SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:104084,integrat,integration,104084,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"LATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); psi4.set_variable('CBS TOTAL ENERGY', finalenergy); psi4.set_variable('CURRENT REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); psi4.set_variable('CURRENT CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); psi4.set_variable('CURRENT ENERGY', finalenergy); return finalenergy. # Transform and validate basis sets from 'cc-pV[Q5]Z' into [cc-pVQZ, cc-pV5Z] and [4, 5]; [docs]def validate_bracketed_basis(basisstring):; r""""""Function to transform and validate basis sets for cbs(). A basis set with no; paired square brackets is passed through with zeta level 0 (e.g., '6-31+G(d,p)'; is returned as [6-31+G(d,p)] and [0]). A basis set with square brackets is; checked for sensible sequence and Dunning-ness and returned as separate basis; sets (e.g., 'cc-pV[Q5]Z' is returned as [cc-pVQZ, cc-pV5Z] and [4, 5]). Note; that this function has no communication with the basis set library to check; if the basis actually exists. Used by :py:func:`~wrappers.complete_basis_set`. """"""; ZETA = ['d', 't', 'q', '5', '6']; BSET = []; ZSET = []; if re.match(r'.*cc-.*\[.*\].*z$', basisstring, flags=re.IGNORECASE):; basispattern = re.compile(r'^(.*)\[(.*)\](.*)$'); basisname = basispattern.match(basisstring); for b in basisname.group(2):; if b not in ZETA:; raise ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSET) - 1]) - ZETA.index(b)) != 1:; raise ValidationError('Basis set \'%s\' has out-of-order zeta level \'%s\'.' % (basisstring, b)); BSET.append(basisname.group(1) + b + basisname.group(3)); if b == 'd':; b = '2'; if b == 't':; b = '3'; if b == 'q':; b = '4'; ZSET.append(int(b)); elif re.match(r'.*\[.*\].*$', basisstring, flags=re.IGNORECASE):; raise ValidationError('Basis set surrounding series indicator [] in \'%s\' is invalid.' % (basisstring)); else:; BSET.append(basisstring); ZSET.append(0). return [BSET, ZSET]. # Reform string basis set descriptor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:90993,wrap,wrappers,90993,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"LDEN_FILE¶. The name of a molden-style output file which is only generated if the user specifies one. Type: string; Default: No Default. PRINT_BASIS¶. Flag to print the basis set. Type: boolean; Default: false. PRINT_MOS¶. Flag to print the molecular orbitals. Type: boolean; Default: false. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. SAVE_JK¶. Keep JK object for later use?. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS; Default: PK. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DF_BASIS_GUESS¶. When BASIS_GUESS is",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html:1868,depend,dependencies,1868,psi4manual/4.0b3/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html,2,['depend'],['dependencies']
Integrability,"LE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. PRINT_BASIS¶. Flag to print the basis set. Type: boolean; Default: false. PRINT_MOS¶. Flag to print the molecular orbitals. Type: boolean; Default: false. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. SAVE_JK¶. Keep JK object for later use?. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD; Default: PK. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DF_BASIS_GUESS¶. When BASIS_GUESS is",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html:2355,depend,dependencies,2355,psi4manual/4.0b5/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html,2,['depend'],['dependencies']
Integrability,"LE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:66869,wrap,wrapper,66869,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"LE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:22624,message,message,22624,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['message'],['message']
Integrability,"LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2019 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import time. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. class IPIBroker(Client):; def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed() == True, ""Orientation must be fixed!""; assert self.initial_molecule.point_gro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html:1169,interface,interfaces,1169,psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html,2,['interface'],['interfaces']
Integrability,"LICITY¶. Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING¶. Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL¶. Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM¶. All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF¶. Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP¶. Specifies ho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:39156,message,message,39156,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,17,['message'],['message']
Integrability,"LITUDE_CUTOFF (CPHF). CIS_DOPDM_STATES (CPHF). CIS_MEM_SAFETY_FACTOR (CPHF). CIS_NO_STATES (CPHF). CIS_OPDM_STATES (CPHF). CIS_TOPDM_STATES (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FAC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:14102,wrap,wrappers,14102,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"LITUDE_CUTOFF (CPHF). CIS_DOPDM_STATES (CPHF). CIS_MEM_SAFETY_FACTOR (CPHF). CIS_NO_STATES (CPHF). CIS_OPDM_STATES (CPHF). CIS_TOPDM_STATES (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . Coupled-Pair Methods. theory. COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:13853,wrap,wrappers,13853,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"LO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zLO = NEED['LO']['f_zeta']. # LAB TODO add ability to pass alternate parameter values in. #",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:82704,wrap,wrappers,82704,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,3,['wrap'],['wrappers']
Integrability,"Libint (and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime, not buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. Libint — [what is this?] [min version]; pybind11 — [what is this?] [min version]. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.4+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:4659,depend,dependencies,4659,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. import os; import re; import warnings; from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in rang",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html:1558,integrat,integrated,1558,psi4manual/1.7.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html,2,['integrat'],['integrated']
Integrability,"Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (zipped archive or git repository from; https://github.com/psi4/psi4).; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++11 compliance (i.e., GCC version 4.9 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/introduction-1.html:19494,contract,contracted,19494,psi4manual/1.1.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/introduction-1.html,2,['contract'],['contracted']
Integrability,"List, np.ndarray],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to np.isclose. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.allclose.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use :py:func:`compare_recursive`.; * Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. .. code-block:: python. absolute(computed - expected) <= (atol + rtol * absolute(expected)). """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:1985,message,message,1985,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,1,['message'],['message']
Integrability,"L¶. Switch available solvation models. Type: string; Possible Values: PCM, COSMO; Default: PCM. DDX_RADII¶. Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:5814,integrat,integration,5814,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['integrat'],['integration']
Integrability,"MAX is recommended and done by default. Type: integer; Default: 9. DDX_INCORE (DDX)¶DDX — Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LMAX (DDX)¶DDX — Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_LOGFILE (DDX)¶DDX (Expert) — Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_MAXITER (DDX)¶DDX — Maximal number of iterations used inside DDX. Type: integer; Default: 100. DDX_MODEL (DDX)¶DDX — Switch available solvation models. Type: string; Possible Values: PCM, COSMO, LPB; Default: PCM. DDX_N_LEBEDEV (DDX)¶DDX — Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. DDX_RADII (DDX)¶DDX — Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING (DDX)¶DDX — Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET (DDX)¶DDX — Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SHIFT (DDX)¶DDX (Expert) — Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. DDX_SOLUTE_RADIAL_POINTS (DDX)¶DDX — Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS (DDX)¶DDX — Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_SOLVATION_CONVERGENCE (DDX)¶DDX — Tolerance to which DDX linear systems are solved. Type: conv double; Default: 1e-8. DDX_SOLVENT (DDX)¶DDX — Solvent to use. Not case sensitive.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html:98226,depend,depends,98226,psi4manual/1.8.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html,3,['depend'],['depends']
Integrability,"MOORDER (TRANSQT). move_to_com() LibmintsMolecule method. MP2; . density-fitting. MP2.5CORRELATIONENERGY. MP2.5TOTALENERGY. MP2_AMPS_PRINT (CCENERGY). MP2_CCSD_METHOD (PSIMRCC). MP2_GUESS (PSIMRCC). MP2_OS_SCALE (CCENERGY). (DFMP2). (LMP2). (MP2). (OMP2). (OMP3). MP2_SCALE_OS (CEPA). MP2_SCALE_SS (CEPA). MP2_SS_SCALE (CCENERGY). (DFMP2). (LMP2). (MP2). (OMP2). (OMP3). MP2_TYPE (MP2). MP2CORRELATIONENERGY. MP2R12A (TRANSQT). MP2TOTALENERGY. MP3CORRELATIONENERGY. MP3L_ENERGY (OMP3). MP3TOTALENERGY. MPN (DETCI). MPN_ORDER_SAVE (DETCI). MPN_SCHMIDT (DETCI). MPN_WIGNER (DETCI). MPnCORRELATIONENERGY. MPnTOTALENERGY. MRCC. MRCC_LEVEL (MRCC). MRCC_METHOD (MRCC). MRCC_NUM_SINGLET_ROOTS (MRCC). MRCC_NUM_TRIPLET_ROOTS (MRCC). MRCC_OMP_NUM_THREADS (MRCC). MRCC_RESTART (MRCC). MS0 (DETCI). mscale() in module qcdb.vecutil. mult() in module qcdb.vecutil. multiplicity; . molecule. multiplicity() LibmintsMolecule method. multiplicity_specified() LibmintsMolecule method. multireference. N. n_body() in module wrappers. nactive_fragments() LibmintsMolecule method. nallatom() LibmintsMolecule method. name() BasisFamily method. LibmintsMolecule method. PubChemObj method. VariableValue method. NAT_ORBS (OMP2). (OMP3). (SAPT). NAT_ORBS_T2 (SAPT). NAT_ORBS_WRITE (DETCI). NAT_ORBS_WRITE_ROOT (DETCI). natom() LibmintsMolecule method. NBC10 module, [1]. NCB31 module, [1]. negated() VariableValue method. NEGLECT_DISTANT_PAIR (LMP2). nequivalent() LibmintsMolecule method. new_get_attr() in module molutil. new_set_attr() in module molutil. NEW_TRIPLES (CCENERGY). (CCEOM). NEWTON_CONVERGENCE (ADC). nfragments() LibmintsMolecule method. nfrozen_core() LibmintsMolecule method. NHTBH module, [1]. NO_DFILE (DETCI). no_reorient; . molecule. NO_RESPONSE (SAPT). NO_SINGLES (PSIMRCC). norm() in module qcdb.vecutil. NORM_TOLERANCE (ADC). normalize() in module qcdb.vecutil. nuclear_repulsion_energy() LibmintsMolecule method. nuclear_repulsion_energy_deriv1() LibmintsMolecule method. nuclear_repulsion_energy_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:27816,wrap,wrappers,27816,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"MP2 natural orbital approximations. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. sad-scf-type; Test SAD SCF guesses on noble gas atom. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mbis-6; MBIS calculation on H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. sapt11; sapt example with orbital freezing with alkali me",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:14244,wrap,wrapper,14244,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['wrap'],['wrapper']
Integrability,"MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; if isbasis:; wordre = re.compile(r'(([$]?)([-+()*.,\w\""\'/\\]+))'); else:; wordre = re.compile(r'(([$]?)([-+()*.\w\""\'/\\]+))'); string = wordre.sub(process_word_quotes, string); return string. def dequotify(string):; if string[0] == '""' and string[-1] == '""':; return string[1:-1]; else:; return string. def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; module = module.upper(); key = key.upper(); isbasis = True if 'BASIS' in k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html:2674,wrap,wrapped,2674,psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/inputparser.html,2,['wrap'],['wrapped']
Integrability,"MakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydan",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:15384,message,message,15384,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['message'],['message']
Integrability,"Manager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. crashclean(self: psi4.core.IOManager) → None; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None; Set the specific file number to be retained. shared_object() → psi4.core.IOManager; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html:3294,protocol,protocol,3294,psi4manual/1.3.2/api/psi4.core.iomanager.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.iomanager.html,1,['protocol'],['protocol']
Integrability,"Mod.print_out('\\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print ' %d' % (n + 1),; if (n + 1) == ndisp:; print '\n',. # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec banners. try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:28029,wrap,wrapper,28029,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['wrap'],['wrapper']
Integrability,"N radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. mom-h2o-4; MOM excitation from LUMO HOMO+4. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cbs-xtpl-dict; Extrapolated water energies. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. linK-2; RKS ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:35223,interface,interface,35223,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,4,['interface'],['interface']
Integrability,"N""] = H0; qcvars[""CBS TOTAL HESSIAN""] = H0; properties[""return_hessian""] = H0. D0 = assembled_results[""dipole""]; if D0 is not None:; qcvars[""CURRENT DIPOLE""] = D0; qcvars[""CBS DIPOLE""] = D0. DD0 = assembled_results[""dipole gradient""]; if DD0 is not None:; qcvars[""CURRENT DIPOLE GRADIENT""] = DD0; qcvars[""CBS DIPOLE GRADIENT""] = DD0. cbs_model = AtomicResult(; **{; 'driver': self.driver,; #'keywords': self.keywords,; 'model': {; 'method': self.method,; 'basis': self.basis,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__, module=assembled_results[""module""]),; 'extras': {; 'qcvars': qcvars,; 'cbs_record': copy.deepcopy(self.cbsrec),; },; 'return_result': assembled_results['ret_ptype'],; 'success': True,; }). logger.debug('CBS QCSchema\n' + pp.pformat(cbs_model.dict())). return cbs_model. [docs] def get_psi_results(self, return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; cbs_model = self.get_results(). if cbs_model.driver == 'energy':; ret_ptype = cbs_model.return_result; else:; ret_ptype = core.Matrix.from_array(cbs_model.return_result); wfn = _cbs_schema_to_wfn(cbs_model). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. def _cbs_schema_to_wfn(cbs_model):; """"""Helper function to produce Wavefunction from a Composite-flavored AtomicResult."""""". mol = core.Molecule.from_schema(cbs_model.molecule.d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:60781,interface,interface,60781,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,1,['interface'],['interface']
Integrability,"N'],; ['WRITER_FILE_LABEL']). # Define some quantum chemical knowledge, namely what methods are subsumed in others. do_scf = True; do_corl = False; do_delta = False; do_delta2 = False; do_delta3 = False; do_delta4 = False; do_delta5 = False. user_writer_file_label = core.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(); molstr = molecule.create_psi4_string_from_molecule(); natom = molecule.natom(). # Establish method for correlation energy; cbs_corl_wfn = kwargs.pop('corl_wfn', '').lower(); if cbs_corl_wfn:; do_corl = True. # Establish method for reference energy; if do_corl and cbs_corl_wfn.startswith('c4-'):; default_scf = 'c4-hf'; else:; default_scf = 'hf'; cbs_scf_wfn = kwargs.pop('scf_wfn', default_scf).lower(). if do_scf:; if cbs_scf_wfn not in VARH.keys():; raise ValidationError(""""""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_scf_wfn)). # ... resume correlation logic; if do_corl:; if cbs_corl_wfn not in VARH.keys():; raise ValidationError(""""""Requested CORL method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_corl_wfn)). cbs_corl_wfn_lesser = kwargs.get('corl_wfn_lesser', cbs_scf_wfn).lower(); if cbs_corl_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:39498,wrap,wrapper,39498,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"NERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CBS TOTAL ENERGY', finalenergy); PsiMod.set_variable('CURRENT REFERENCE ENERGY', GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT CORRELATION ENERGY', finalenergy - GRAND_NEED[0]['d_energy']); PsiMod.set_variable('CURRENT ENERGY', finalenergy); return finalenergy. # Transform and validate basis sets from 'cc-pV[Q5]Z' into [cc-pVQZ, cc-pV5Z] and [4, 5]; [docs]def validate_bracketed_basis(basisstring):; r""""""Function to transform and validate basis sets for cbs(). A basis set with no; paired square brackets is passed through with zeta level 0 (e.g., '6-31+G(d,p)'; is returned as [6-31+G(d,p)] and [0]). A basis set with square brackets is; checked for sensible sequence and Dunning-ness and returned as separate basis; sets (e.g., 'cc-pV[Q5]Z' is returned as [cc-pVQZ, cc-pV5Z] and [4, 5]). Note; that this function has no communication with the basis set library to check; if the basis actually exists. Used by :py:func:`~wrappers.complete_basis_set`. """"""; ZETA = ['d', 't', 'q', '5', '6']; BSET = []; ZSET = []; if re.match(r'.*cc-.*\[.*\].*z$', basisstring, flags=re.IGNORECASE):; basispattern = re.compile(r'^(.*)\[(.*)\](.*)$'); basisname = basispattern.match(basisstring); for b in basisname.group(2):; if b not in ZETA:; raise ValidationError('Basis set \'%s\' has invalid zeta level \'%s\'.' % (basisstring, b)); if len(ZSET) != 0:; if (int(ZSET[len(ZSET) - 1]) - ZETA.index(b)) != 1:; raise ValidationError('Basis set \'%s\' has out-of-order zeta level \'%s\'.' % (basisstring, b)); BSET.append(basisname.group(1) + b + basisname.group(3)); if b == 'd':; b = '2'; if b == 't':; b = '3'; if b == 'q':; b = '4'; ZSET.append(int(b)); elif re.match(r'.*\[.*\].*$', basisstring, flags=re.IGNORECASE):; raise ValidationError('Basis set surrounding series indicator [] in \'%s\' is invalid.' % (basisstring)); else:; BSET.append(basisstring); ZSET.append(0). return [BSET, ZSET]. # Reform string basis set descriptor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:75206,wrap,wrappers,75206,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,3,['wrap'],['wrappers']
Integrability,"NESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""; Nexus of psi4.driver module with primary user-facing functions, including; single-point energies, geometry optimizations, properties, and vibrational; frequency calculations. """"""; import copy; import json; import logging; import os; import re; import shutil; from typing import Dict, Optional, Union. import numpy as np. from psi4 import core # for typing. from . import driver_cbs, driver_findif, driver_nbody, driver_util, p4util, qcdb, task_planner; from .constants import constants, nppp, nppp10, pp; from .mdi_engine import mdi_run; from .p4util.exceptions import *; from .procrouting import *; from .task_base import AtomicComputer. # never import wrappers or aliases into this file. logger = logging.getLogger(__name__). def _energy_is_invariant(gradient_rms, stationary_criterion=1.e-2):; """"""Polls options and probes `gradient` to return whether current method; and system expected to be invariant to translations and rotations of; the coordinate system. """"""; stationary_point = gradient_rms < stationary_criterion # 1.e-2 pulled out of a hat. mol = core.get_active_molecule(); efp_present = hasattr(mol, 'EFP'). translations_projection_sound = (not core.get_option('SCF', 'EXTERN') and not core.get_option('SCF', 'PERTURB_H'); and not efp_present); rotations_projection_sound = (translations_projection_sound and stationary_point). return translations_projection_sound, rotations_projection_sound. def _filter_renamed_methods(compute, method):; r""""""Raises UpgradeHelper when a method has been renamed.""""""; if method == ""dcft"":; raise UpgradeHelper(compute + ""('dcft')"", compute + ""('dct')"", 1.4,; "" All instances of 'dcft' should be replaced with 'dct'."")",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver.html:1750,wrap,wrappers,1750,psi4manual/1.9.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver.html,2,['wrap'],['wrappers']
Integrability,"NG). GAUGE (CCDENSITY). (CCRESPONSE). GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() (in module molutil). get_memory() (in module util). get_num_threads() (in module util). get_psifile() (in module procutil). getCartesian() (PubChemObj method). getMoleculeString() (PubChemObj method). getPubChemResults() (in module pubchem). getSDF() (PubChemObj method). getXYZFile() (PubChemObj method). gradient() (in module driver). GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. HBC6 (module), [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_TYPE (OMP2). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() (in module driver). HF. highest_1() (in module wrappers). HSG (module), [1]. HTBH (module), [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). input (module). INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING). INTCOS_GENERATE_EXIT (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). ip_fitting() (in module frac). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). ISTOP (DETCI). IVO (TRANSQT). J. J_FILE (TRANSQT). JOBTYPE (CCLAMBDA). (MP2). JSCH (module), [1]. K. KEEP_INTCOS (OPTKING). KEEP_J (TRANSQT). KEEP_OEIFILE (CCSORT). KEEP_PRESORT (TRANSQT). KEEP_TEIFILE (CCSORT). keywords; . C-side, setting. cbs(), setting. cp(), setting. database(), setting. energy(), se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:14692,wrap,wrappers,14692,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"NPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:28967,message,message,28967,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['message'],['message']
Integrability,"NPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:25995,message,message,25995,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['message'],['message']
Integrability,"NSQT). MODULE (CPHF). (PLUGIN_FOCK), [1]. molden() (in module driver). molecule; . PubChem. charge. multiple fragments. multiple in input file. multiplicity. no_reorient. setting keywords. specification. symmetry. units. molutil (module). MOM_OCC (SCF). MOM_START (SCF). MOM_VIR (SCF). MOORDER (TRANSQT). MP2; . density-fitting. MP2.5CORRELATIONENERGY. MP2.5TOTALENERGY. MP2_AMPS_PRINT (CCENERGY). MP2_CCSD_METHOD (PSIMRCC). MP2_GUESS (PSIMRCC). MP2_OS_SCALE (CCENERGY). (DFMP2). (LMP2). (MP2). (OMP2). MP2_SS_SCALE (CCENERGY). (DFMP2). (LMP2). (MP2). (OMP2). MP2CORRELATIONENERGY. MP2R12A (TRANSQT). MP2TOTALENERGY. MP3CORRELATIONENERGY. MP3TOTALENERGY. MPN (DETCI). MPN_ORDER_SAVE (DETCI). MPN_SCHMIDT (DETCI). MPN_WIGNER (DETCI). MPnCORRELATIONENERGY. MPnTOTALENERGY. MRCC. MRCC_LEVEL (MRCC). MRCC_METHOD (MRCC). MRCC_NUM_SINGLET_ROOTS (MRCC). MRCC_NUM_TRIPLET_ROOTS (MRCC). MRCC_OMP_NUM_THREADS (MRCC). MRCC_RESTART (MRCC). MS0 (DETCI). multiplicity; . molecule. multireference. N. n_body() (in module wrappers). name() (PubChemObj method). NAT_ORBS (OMP2). (SAPT). NAT_ORBS_T2 (SAPT). NAT_ORBS_WRITE (DETCI). NAT_ORBS_WRITE_ROOT (DETCI). NBC10 (module), [1]. NEGLECT_DISTANT_PAIR (LMP2). new_get_attr() (in module molutil). new_set_attr() (in module molutil). NEW_TRIPLES (CCENERGY). (CCEOM). NEWTON_CONV (PLUGIN_DFADC), [1]. NEWTON_CONVERGENCE (ADC). NHTBH (module), [1]. NO_DFILE (DETCI). no_reorient; . molecule. NO_RESPONSE (SAPT). NO_SINGLES (PSIMRCC). NORM_TOL (PLUGIN_DFADC), [1]. NORM_TOLERANCE (ADC). NUCLEARREPULSIONENERGY. NUM_AMPS_PRINT (ADC). (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (DETCI). NUM_DETS_PRINT (DETCI). NUM_FROZEN_DOCC (GLOBALS). NUM_FROZEN_UOCC (GLOBALS). NUM_INIT_VECS (DETCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_BRACKET_ALPHA (PLUGIN_OMEGA), [1]. OMEGA_CONV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:18514,wrap,wrappers,18514,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"NU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import; import psi4. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nCSXException: %s\n\n' % (msg)). [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html:1846,message,message,1846,psi4manual/1.0.0/_modules/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html,1,['message'],['message']
Integrability,"NV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(name, ref_wfn, reference):; """"""Builds the correct wavefunction from the provided information; """""". if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])). # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; wfn = core.RHF(ref_wfn, superfunc); elif reference == ""ROHF"":; wfn = core.ROHF(ref_wfn, superfunc); elif reference in [""UHF"", ""UKS""]:; wfn = core.UHF(ref_wfn, superfunc); elif reference == ""CUHF"":; wfn = core.CUHF(ref_wfn, superfunc); else:; raise V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html:25837,rout,route,25837,psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['route']
Integrability,"NV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; """"""Builds the correct (R/U/RO/CU HF/KS) wavefunction from the; provided information, sets relevant auxiliary basis sets on it,; and prepares any empirical dispersion. """"""; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft.build_superfunctional(name, (reference in [""RKS"", ""RHF""])). # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; wfn = core.RHF(ref_wfn, superfunc); elif reference == ""ROHF"":; wfn = core.ROHF(ref_wfn, superfunc); elif reference in [""UHF"", ""UKS""]:; wfn = cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:25759,rout,route,25759,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['route']
Integrability,"NV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """""". if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)). # Buil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:25695,rout,route,25695,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['route']
Integrability,"NV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'ADCC' and extras.addons(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:29324,rout,route,29324,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['rout'],['route']
Integrability,"NV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in {'ADCC', ''} and extras.a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:30164,rout,route,30164,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['rout'],['route']
Integrability,"Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; GaussianShell. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.Gaus",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.GaussianShell.html:1026,contract,contraction,1026,psi4manual/1.7.x/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.GaussianShell.html,1,['contract'],['contraction']
Integrability,"None). # Sanitize total_method_name; total_method_name = total_method_name.lower(); total_method_name = total_method_name.replace(' ', ''). # Split into components; method_list, basis_list = _parse_cbs_gufunc_string(total_method_name). # Single energy call?; single_call = len(method_list) == 1; single_call &= '[' not in basis_list[0]; single_call &= ']' not in basis_list[0]. if single_call:; method_name = method_list[0]; basis = basis_list[0]. return {'method': method_name, 'basis': basis}. # Drop out for unsupported calls; if ptype is None:; raise ValidationError(""A CBS call was detected, but no ptype was passed in. Please alert a dev.""); elif ptype not in [""energy"", ""gradient"", ""hessian""]:; raise ValidationError(f""{ptype.title()}: Cannot extrapolate or delta correct {ptype} yet.""). # Catch kwarg issues for CBS methods only; user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False). # If we are not a single call, let CBS wrapper handle it!; cbs_kwargs = {}; cbs_kwargs['ptype'] = ptype; cbs_kwargs['verbose'] = cbs_verbose. if user_dertype is not None:; cbs_kwargs['dertype'] = user_dertype. # Find method and basis; metadata = []; if method_list[0] in ['scf', 'hf', 'c4-scf', 'c4-hf']:; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'scf_scheme' in kwargs:; stage['scheme'] = kwargs.pop('scf_scheme'); stage['stage'] = ""scf""; stage['treatment'] = ""scf""; else:; # _validate_cbs_inputs will produce scf stage automatically; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'corl_scheme' in kwargs:; stage['scheme'] = kwargs.pop('corl_scheme'); stage['stage'] = ""corl""; stage['treatment'] = ""corl""; metadata.append(stage). # ""method/basis"" syntax only allows for one delta correction; # via ""method/basis+D:delta/basis"". Maximum length of method_list is 2.; if len(method_list) == 2:; stage = {}; stage['wfn'] = method_list[1]; stage['basis'] = basis_list[1]; if 'delta_scheme' in kwargs:; sta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:41334,wrap,wrapper,41334,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,5,['wrap'],['wrapper']
Integrability,"None)[source]¶; Returns a Vector3 with x, y, z position of atom (0-indexed); in Bohr or coordinate at posn; >>> print H2OH2O.xyz(4); [3.175492014248769, -0.7062681346308132, -1.4334725450878665]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; File to. dictify_database_docstrings()[source]¶. useful()[source]¶. Module with non-generic exceptions classes. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. format_string_for_qchem()[source]¶. classmethod i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:59270,message,message,59270,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,4,['message'],['message']
Integrability,"OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; inputparser; interactive; pubchem; psiexceptions; frac; molutil; p4regex; proc; dashparam; driver; gaussian_n; pcmgetkw; wrappers; qmmm; diatomic; functional; pcmpreprocess; aliases; grendel; p4util; p4const; qcdb. psi4: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/contents.html:2532,wrap,wrappers,2532,psi4manual/4.0b5/contents.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/contents.html,1,['wrap'],['wrappers']
Integrability,"OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14009,message,message,14009,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['message'],['message']
Integrability,"OLERANCE (CCEOM). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() (in module wrappers). copy() (Table method). copy_file_from_scratch() (in module util). copy_file_to_scratch() (in module util). CORE (module), [1]. corl_xtpl_helgaker_2() (in module wrappers). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_REFERENCE (PSIMRCC). CORR_WFN (PSIMRCC). Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() (in module wrappers). CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CPHF_TASKS (CPHF). (PLUGIN_FOCK), [1]. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (PLUGIN_DFADC), [1]. D. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). database(). adding new. available. output. setting keywords. database() (in module wrappers). db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DEBUG (CPHF). (GLOBALS). (JK), [1]. (PLUGIN_FOCK), [1]. (PLUGIN_OMEGA), [1]. (SOLVER), [1]. DELETE_AO (TRANSQT). DELETE_RESTR_DOCC (TRANSQT). DELETE_TEI (TRANSQT2). DELETE_TPDM (TRANSQT). DENOMINATOR_ALGORITHM (SAPT). DENOMINATOR_DELTA (SAPT). density-fitting; . MP2. DERTYPE (GLOBALS). DETCI_FREEZE_CORE (DETCI). DF-MP2. theory. DF-MP2CORRELATIONENERGY. DF-MP2TOTALENERGY. DF_BASIS_ELST (SAPT). DF_BASIS_MP2 (DFMP2). (LMP2). DF_BASIS_SAPT (SAPT). DF_BASIS_SCF (CPHF). (QCSCF), [1]. (SCF). DF_FITTING_CONDITION (SCF). DF_INTS_IO (DFMP2). (SCF). DF_INTS_NUM_THREADS (DFMP2). (SCF). DF_LMP2 (LMP2). DFMP2_MEM_FACTOR (DFMP2). DFT. available functionals. theory. DFT_ALPHA (SCF). DFT_BASIS_TOLERANCE (SCF). DFT_BLOCK_MAX_POINTS (SCF). DFT_BLOCK_MAX_RADIUS (SCF). DFT_BLOCK_MIN_POINTS (SCF). DFT_BLOCK_SCHEME (SCF). DFT_BS_RADIUS_ALPHA (SCF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:9256,wrap,wrappers,9256,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"ONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:109058,integrat,integration,109058,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"ONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:106400,integrat,integration,106400,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"ONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . Coupled-Pair Methods. theory. COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (OMP3). D. d() CoordEntry static method. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). dash_server() in module dashparam. dashparam module. database(). adding new. available. output. setting keywords. databas",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:14300,wrap,wrappers,14300,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"OSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respecti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:6108,depend,dependency,6108,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['depend'],['dependency']
Integrability,"Options. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/notes_py-1.html:1364,wrap,wrapped,1364,psi4manual/1.1.0/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/notes_py-1.html,4,['wrap'],['wrapped']
Integrability,"Otherwise, the; output filename defaults to the the input filename with; “.out” extension. --psiapi-path¶; Generates a bash command to source correct Python interpreter and path for python -c ""import psi4"". --qcschema, --schema¶; Runs input files as QCSchema. Can either be JSON or MessagePack input. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -t <subset>, --test <subset>¶; Runs pytest tests. If pytest-xdist installed, parallel with -n. -v, --verbose¶; Print the Psithon to Python translation of the input file. -V, --version¶; Print version information.; # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. Environment Variables¶; These environment variables will influence PSI4‘s behavior. CONDA_PREFIX¶; Set when a conda environment is activated. Note that if PSI4 has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. HOST¶; Set when a conda environment with conda compilers is activated. Used; when compatibly building PSI4 from source against conda; dependencies. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PATH is preferred for; executables to accommodate QCEngine. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/external.html:20552,depend,dependencies,20552,psi4manual/1.6.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/external.html,5,['depend'],['dependencies']
Integrability,"P is used; os.environ['NO_STOP_MESSAGE'] = '1'. # Obtain user's OMP_NUM_THREADS so that we don't blow it away.; omp_num_threads_found = 'OMP_NUM_THREADS' in os.environ; if omp_num_threads_found == True:; omp_num_threads_user = os.environ['OMP_NUM_THREADS']. # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if psi4.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = str(psi4.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; external_exe = 'dmrcc'; try:; retcode = subprocess.Popen([external_exe], bufsize=0, stdout=subprocess.PIPE, env=lenv); except OSError as e:; sys.stderr.write('Program %s not found in path or execution failed: %s\n' % (cfour_executable, e.strerror)); p4out.write('Program %s not found in path or execution failed: %s\n' % (external_exe, e.strerror)); message = (""Program %s not found in path or execution failed: %s\n"" % (external_exe, e.strerror)); raise ValidationError(message). c4out = ''; while True:; data = retcode.stdout.readline(); if not data:; break; if psi4.outfile_name() == 'stdout':; sys.stdout.write(data); else:; p4out.write(data); p4out.flush(); c4out += data. # try:; # if psi4.outfile_name() == 'stdout':; # retcode = subprocess.call('dmrcc', shell=True, env=lenv); # else:; # retcode = subprocess.call('dmrcc >> ' + current_directory + '/' + psi4.outfile_name(), shell=True, env=lenv); #; # if retcode < 0:; # print('MRCC was terminated by signal %d' % -retcode, file=sys.stderr); # exit(1); # elif retcode > 0:; # print('MRCC errored %d' % retcode, file=sys.stderr); # exit(1); #; # except OSError as e:; # print('Execution failed: %s' % e, file=sys.stderr); # exit(1). # Restore the OMP_NUM_THREADS that the user set.; if omp_num_threads_found == True:; if psi4.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS') == True:; os.environ['OMP_NUM_THREADS'] = omp_num_threads_user. # Scan iface file and grab the file energy.; ene = 0.0; for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:94955,message,message,94955,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['message'],['message']
Integrability,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/detci-1.html:11699,interface,interface,11699,psi4manual/1.2.1/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/detci-1.html,23,['interface'],['interface']
Integrability,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which Psi4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:10492,interface,interface,10492,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['interface'],['interface']
Integrability,"P2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:8261,depend,depending,8261,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['depend'],['depending']
Integrability,"P2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:7664,depend,depending,7664,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['depend'],['depending']
Integrability,"P3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:208020,depend,dependencies,208020,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"P8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:4491,interoperab,interoperability,4491,psi4manual/1.0.0/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html,2,['interoperab'],['interoperability']
Integrability,"PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Support for using Psi4 as an MDI engine.; For details regarding MDI, see https://molssi.github.io/MDI_Library/html/index.html. """""". __all__ = [; ""mdi_init"",; ""mdi_run"",; ""MDIEngine"",; ]. import numpy as np; import qcelemental as qcel. import psi4. _have_mdi = False; try:; from mdi import (; MDI_DOUBLE,; MDI_INT,; MDI_Accept_Communicator,; MDI_Init,; MDI_MPI_get_world_comm,; MDI_Recv,; MDI_Recv_Command,; MDI_Register_Command,; MDI_Register_Node,; MDI_Send,; ); _have_mdi = True; except ImportError:; pass. try:; from mpi4py import MPI; use_mpi4py = True; except ImportError:; use_mpi4py = False. class MDIEngine():; def __init__(self, scf_method: str, **kwargs):; """""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """""". # Method used when the SCF command is received; self.scf_method = scf_method. # Additional arguments for energy, gradient, or optimization calculations; self.kwargs = kwargs. # Molecule all MDI operations are performed on; input_molecule = kwargs.pop('molecule', psi4.core.get_active_molecule()); _ini_cart = getattr(input_molecule, ""_initial_cartesian"", None); self.molecule = input_molecule.clone(); if _ini_cart:; self.molecule._initial_cartesian = _ini_cart; psi4.core.set_active_molecule(self.molecule). # Most recent SCF energy; self.energy = 0.0. # Variables used when MDI sets a lattice of point charges; self.nlattice",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html:1850,interface,interface,1850,psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html,2,['interface'],['interface']
Integrability,"PCG_MAXITER (OCC); OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation in . Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. PITZER (TRANSQT); TRANSQT — Do use Pitzer ordering?. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PR (ADC); ADC — Do use the partial renormalization scheme for the ground state wavefunction?. Type: boolean; Default: false. PRECONDITIONER (DETCI); DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which approximates the Hamiltonian matrix by the diagonal elements; H0BLOCK_INV which uses an exact Hamiltonian of H0_BLOCKSIZE and explicitly inverts it; GEN_DAVIDSON which does a spectral decomposition of H0BLOCK; ITER_INV using an iterative approach to obtain the correction vector of H0BLOCK. The H0BLOCK_INV, GEN_DAVIDSON, and ITER_INV approaches are all ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:95921,integrat,integration,95921,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Integrability,"PMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT¶. Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD¶. Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row ato",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:28471,contract,contracted,28471,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['contract'],['contracted']
Integrability,"POT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_THETA¶. FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. COSX Algorithm¶. COSX_INTS_TOLERANCE¶. Screening criteria for integrals and intermediates in COSX. Type: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html:11054,integrat,integration,11054,psi4manual/1.6.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html,5,['integrat'],['integration']
Integrability,"POT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_THETA¶. FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. SAD Guess Algorithm¶. SAD_D_CONVERGENCE¶. Convergence criterion for SCF density in SAD Guess. Type: conv ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html:8774,integrat,integration,8774,psi4manual/1.1.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"POT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_THETA¶. FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. SAD Guess Algorithm¶. SAD_D_CONVERGENCE¶. Convergence criterion for SCF density in the SAD guess, analogo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:8875,integrat,integration,8875,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,6,['integrat'],['integration']
Integrability,"PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. Always: edit version and commit jinja variables.; Possibly: edit source/url field for trial locations.; Always: edit sha256 jinja variable from e.g., curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256; Always: edit build/number. Either reset to 0 if version increments or bump if version doesn’t increment.; Possibly: uncomment skip: true  # [py != 310] if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you’ll have to issue a comment @conda-forge-admin, please rerender for the; matrix slimming to take effect.; Possibly: remove any old patches that are now in the main codebase.; Possibly: add in or remove any dependency or ecosystem packages.; Possibly: for any relevant addition, make sure -D CMAKE_INSIST_FIND_PACKAGE_<project>=ON or; -D ENABLE_<project>=ON is set in build.sh and bld.bat.; Possibly: add or release version constraints or architecture constraints (e.g., [not win]) on packages. Submit the PR and rerender (cmd above). Monitor the CI.; When all CI lanes are passing and the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they’re been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag¶. Check that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:8196,depend,dependency,8196,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['depend'],['dependency']
Integrability,"PSI4 binary, Libint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libint can be obtained through conda install libint.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libint and activate dependent code. To remove a conda installation, conda remove libint. Source. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/libint-1.html:2246,depend,dependencies,2246,psi4manual/1.1.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/libint-1.html,2,['depend'],['dependencies']
Integrability,"PSI4 from source and use; Libxc from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libxc-1.html:2545,depend,dependencies,2545,psi4manual/1.2.1/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libxc-1.html,2,['depend'],['dependencies']
Integrability,"PSI4. PSI4 API: Linking C++ and Python; GaussianShell. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the giv",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.GaussianShell.html:1087,contract,contraction,1087,psi4manual/1.7.x/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.GaussianShell.html,3,['contract'],['contraction']
Integrability,"PSIF_CC_OEI_NEW. 114; PSIF_CC_GAMMA_NEW. 115; PSIF_CC_AINTS_NEW. 116; PSIF_CC_BINTS_NEW. 117; PSIF_CC_CINTS_NEW. 118; PSIF_CC_DINTS_NEW. 119; PSIF_CC_EINTS_NEW. 120; PSIF_CC_FINTS_NEW. 121; PSIF_CC_LAMBDA. 122; PSIF_CC_RAMPS. 123; PSIF_CC_LAMPS. 124; PSIF_CC_LR. 125; PSIF_CC_DIIS_ERR. 126; PSIF_CC_DIIS_AMP. 127; PSIF_CC_TMP. 128; PSIF_CC_TMP0. 129; PSIF_CC_TMP1. 130; PSIF_CC_TMP2. 131; PSIF_CC_TMP3. 132; PSIF_CC_TMP4. 133; PSIF_CC_TMP5. 134; PSIF_CC_TMP6. 135; PSIF_CC_TMP8. 137; PSIF_CC_TMP9. 138; PSIF_CC_TMP10. 139; PSIF_CC_TMP11. 140; PSIF_EOM_D. 141; PSIF_EOM_CME. 142; PSIF_EOM_Cme. 143; PSIF_EOM_CMNEF. 144; PSIF_EOM_Cmnef. 145; PSIF_EOM_CMnEf. 146; PSIF_EOM_SIA. 147; PSIF_EOM_Sia. 148; PSIF_EOM_SIJAB. 149; PSIF_EOM_Sijab. 150; PSIF_EOM_SIjAb. 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_psifiles-1.html:3181,contract,contractions,3181,psi4manual/1.4.0/autodoc_psifiles-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_psifiles-1.html,5,['contract'],['contractions']
Integrability,"PSIF_CC_OEI_NEW. 114; PSIF_CC_GAMMA_NEW. 115; PSIF_CC_AINTS_NEW. 116; PSIF_CC_BINTS_NEW. 117; PSIF_CC_CINTS_NEW. 118; PSIF_CC_DINTS_NEW. 119; PSIF_CC_EINTS_NEW. 120; PSIF_CC_FINTS_NEW. 121; PSIF_CC_LAMBDA. 122; PSIF_CC_RAMPS. 123; PSIF_CC_LAMPS. 124; PSIF_CC_LR. 125; PSIF_CC_DIIS_ERR. 126; PSIF_CC_DIIS_AMP. 127; PSIF_CC_TMP. 128; PSIF_CC_TMP0. 129; PSIF_CC_TMP1. 130; PSIF_CC_TMP2. 131; PSIF_CC_TMP3. 132; PSIF_CC_TMP4. 133; PSIF_CC_TMP5. 134; PSIF_CC_TMP6. 135; PSIF_CC_TMP8. 137; PSIF_CC_TMP9. 138; PSIF_CC_TMP10. 139; PSIF_CC_TMP11. 140; PSIF_EOM_D. 141; PSIF_EOM_CME. 142; PSIF_EOM_Cme. 143; PSIF_EOM_CMNEF. 144; PSIF_EOM_Cmnef. 145; PSIF_EOM_CMnEf. 146; PSIF_EOM_SIA. 147; PSIF_EOM_Sia. 148; PSIF_EOM_SIJAB. 149; PSIF_EOM_Sijab. 150; PSIF_EOM_SIjAb. 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_AMPS; SAPT Amplitudes. 197; PSIF_SAPT_TEMP; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_psifiles.html:3181,contract,contractions,3181,psi4manual/1.7.x/autodoc_psifiles.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_psifiles.html,4,['contract'],['contractions']
Integrability,"PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. typecheck() Keyword method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). verify_cavity() in module pcmpreprocess. verify_green() in module pcmpreprocess. verify_medium() in module pcmpreprocess. verify_spheres() in module pcmpreprocess. verify_top() in module pcmpreprocess. visualization. W. WABEI_LOWDISK (CCHBAR). WebMO. WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CPHF). (DETCI). (GLOBALS). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). WFN_TYPE (OCC). wrappers module. WRITER_FILE_LABEL (GLOBALS). X. x() LibmintsMolecule method. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xvalidate() Keyword method. Section method. xyz() LibmintsMolecule method. Y. y() LibmintsMolecule method. yes GetkwParser attribute. Z. Z() CoordEntry method. LibmintsMolecule method. z() LibmintsMolecule method. ZA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:48838,wrap,wrappers,48838,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"PT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. freq-masses; check nonphysical masses possible. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft1; DFT Functional Test all values update for new BraggSlater radii. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. scf-level-shift-rks; SCF level shift on an RKS computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:30638,depend,depend,30638,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"Parser method. conv_ival() GetkwParser method. conv_lval() GetkwParser method. convert() in module wrappers. convert_area_scalar() in module pcmpreprocess. convert_length_array() in module pcmpreprocess. convert_length_scalar() in module pcmpreprocess. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module p4util.util. copy_file_to_scratch() in module p4util.util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module p4util.basislist. corresponding_jkfit() in module p4util.basislist. corresponding_orbital() in module p4util.basislist. corresponding_rifit() in module p4util.basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. create_psi4_string_from_molecule() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OCC). D. d() CoordEntry static method. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). dash_server() in module dashparam. dashparam module. database(). adding new. available. output. setting keywords. database() in module wrappers. db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DCFT. theory. DCFT_FUNCTIONAL (DCFT). DCFT_GUESS (DCFT). deactivate_all_fragments() LibmintsMolecule method. DEBUG (CPHF). (GLOBALS). DELETE_AO (TRANSQT). DELETE_RESTR_DOCC (TRANSQT). DELETE_TEI (TRANSQT2). DELETE_TPDM (TRANSQT). DENOMINA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:15885,wrap,wrappers,15885,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(*circs); PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:2635,message,message,2635,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer."""""". def __init__(self, eqn_description, maxit, wfn):; ConvergenceError.__init__(self, eqn_description, maxit); self.wfn = wfn. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:2637,message,message,2637,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:29036,contract,contraction,29036,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['contract'],['contraction']
Integrability,"Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) doe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:8958,message,message,8958,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" %; (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) doe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:8859,message,message,8859,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ProtocolEnum""; }; ]; }; },; ""additionalProperties"": false; },; ""AtomicComputer"": {; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""protocols"": {; ""title"": ""Protocols"",; ""description"": ""Output modifications."",; ""default"": {; ""stdout"": true; },; ""anyOf"": [; {; ""$ref"": ""#/definitions/AtomicResultProtocols""; },; {; ""type"": ""object""; }; ]; },; ""tag"": {; ""title"": ""Tag"",; ""description"": ""The tags to pass along to compute managers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/cbs.html:37648,protocol,protocols,37648,psi4manual/1.8.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/cbs.html,6,['protocol'],['protocols']
Integrability,"Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import numpy as np. from psi4 import core; from .exceptions import *. ### Matrix and Vector properties. # The next three functions make me angry; def translate_interface(interface):; """"""; This is extra stupid with unicode; """""". if sys.version_info[0] > 2:; return interface. nouni_interface = {}; for k, v in interface.items():; if k == 'typestr':; nouni_interface[k.encode('ascii', 'ignore')] = v.encode('ascii', 'ignore'); else:; nouni_interface[k.encode('ascii', 'ignore')] = v. return nouni_interface. class numpy_holder(object):; """"""; Blank object, stupid. Apparently you cannot create a view directly from a dictionary; """"""; def __init__(self, interface):; self.__array_interface__ = translate_interface(interface). def _get_raw_views(self, copy=False):; """"""; Gets simple raw view of the passed in object.; """"""; ret = []; for data in self.array_interface():. # Yet another hack; if isinstance(data[""shape""], list):; data[""shape""] = tuple(data[""shape""]). if 0 in data[""shape""]:; ret.append(np.empty(shape=data[""shape""])); else:; ret.append(np.array(numpy_holder(data), copy=copy)); return ret. def _find_dim(arr, ndim):; """"""; Helper function to help deal with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html:1277,interface,interface,1277,psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,1,['interface'],['interface']
Integrability,"Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; gcp — [what is gCP?]; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:7174,depend,dependencies,7174,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; simple-dftd3 — [what is DFTD3?] (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp; dftd4 — <sec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:7442,depend,dependencies,7442,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. """"""; import inspect; import os; import re; import shutil; import subprocess; import sys; import uuid. import qcelemental as qcel. from psi4 import core. from .. import p4util, qcdb; from ..p4util.exceptions import *. # never import driver, wrappers, or aliases into this file. P4C4_INFO = {}. [docs]; def run_cfour(name, **kwargs):; """"""Function that prepares environment and input files; for a calculation calling Stanton and Gauss's CFOUR code.; Also processes results back into Psi4 format. This function is not called directly but is instead called by; :py:func:`~psi4.driver.energy` or :py:func:`~psi4.driver.optimize` when a Cfour; method is requested (through *name* argument). In order to function; correctly, the Cfour executable ``xcfour`` must be present in; :envvar:`PATH` or :envvar:`PSIPATH`. .. hlist::; :columns: 1. * Many :ref:`PSI Variables <apdx:cfour_psivar>` extracted from the Cfour output; * Python dictionary of associated file constants accessible as ``P4C4_INFO['zmat']``, ``P4C4_INFO['output']``, ``P4C4_INFO['grd']``, *etc.*. :type name: str; :param name: ``'c4-scf'`` || ``'c4-ccsd(t)'`` || ``'cfour'`` || etc. First argument, usually unlabeled. Indicates the computational; method to be applied to the system. :type k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/interface_cfour.html:1669,wrap,wrappers,1669,psi4manual/1.9.x/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/interface_cfour.html,2,['wrap'],['wrappers']
Integrability,"Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mp2-1; All-electron MP2 6-31G** geometry optimization of water. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. pubchem2; Superficial test of PubChem interface. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/testsuite.html:1516,interface,interface,1516,psi4manual/1.7.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/testsuite.html,1,['interface'],['interface']
Integrability,"QCElemental version) https://pydantic-docs.helpmanual.io/#. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is this?] [min version]; cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:6259,message,message,6259,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,"['depend', 'message']","['dependencies', 'message']"
Integrability,"QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) None. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/libefp-1.html:8550,depend,dependencies,8550,psi4manual/1.1.0/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/libefp-1.html,2,['depend'],['dependencies']
Integrability,"R']['CFOUR_MEMORY_SIZE']['value'] = int(mem); options['CFOUR']['CFOUR_MEM_UNIT']['value'] = 'MB'. for item in options['CFOUR']:; options['CFOUR'][item]['clobber'] = True; return text, options. # Ways of modifying a computation; # global: set global c-side option; # local: set local c-side option; # kwarg: set kwarg; # i-local: set global=local c-side option to an interface module; # ro-def: code uses default entirely specified by read_options; # module-def: code uses default that is complex mixture of read_options settings; # i-def: interfaced code uses defaults not entirely expressed in read_options; # driver-def: driver code sets complex defaults; #; # Pure psi4 operation; # kwarg ~= local > global > driver-def > module-def > ro-def; #; # Interfaced psi4 operation; # kwarg ~= i-local > local > global > driver-def > i-def. # P4 infrastructure replacing interfaced infrastructure (mol, basis, mem) where unavoidable overlap in how things are specified (mult in mol{} vs keyword) is treated as a clobber & complain if conflict VS P4 infrastructure as an aliased/convenient leak into interfaced infrastructure (psi) and is strictly no clobber or complain. [docs]def muster_psi4options(opt):; """"""Translate psi4 keywords *opt* that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the 'clobber' property is set to False. """"""; text = ''; options = defaultdict(lambda: defaultdict(dict)). if 'GLOBALS' in opt:; if 'PUREAM' in opt['GLOBALS']:; options['CFOUR']['CFOUR_SPHERICAL']['value'] = \; opt['MINTS']['PUREAM']['value']. if 'SCF' in opt:; if 'REFERENCE' in opt['SCF']:; options['CFOUR']['CFOUR_REFERENCE']['value'] = \; {'RHF': 'RHF',; 'UHF': 'UHF',; 'ROHF': 'ROHF'}[opt['SCF']['REFERENCE']['value']]. if 'D_CONVERGENCE' in opt['SCF']:; options['CFOUR']['CFOUR_SCF_CONV']['value'] = \; conv_float2negexp(opt['SCF']['D_CONVERGENCE']['value']). if 'MAXITER' in opt['SC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/cfour.html:27797,interface,interfaced,27797,psi4manual/1.0.0/_modules/qcdb/cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/cfour.html,2,['interface'],['interfaced']
Integrability,"R, follow the efpfrag; pattern of libefp to symlink them in. psi4/psi4/src/CMakeLists.txt; No changes should be required unless both (1) code in export_*; or core.cc needs the USING_AddOn_name definition or; AddOn header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/; If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in CMake files or #ifdef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/psi4/external/upstream/; Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/psi4/common/ are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; psi4/external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/; In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:3523,depend,dependencies,3523,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,6,['depend'],['dependencies']
Integrability,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psithoninput.html:13332,integrat,integrated,13332,psi4manual/1.6.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psithoninput.html,1,['integrat'],['integrated']
Integrability,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; 1energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; lar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:14863,integrat,integrated,14863,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,6,['integrat'],['integrated']
Integrability,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:13332,integrat,integrated,13332,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,4,['integrat'],['integrated']
Integrability,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the Psi4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the Psi4 suite.; As seen in the neon dimer example from the A Psi4 Tutorial section,; the _nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,:; cp('mp2'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; Psi4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:13900,integrat,integrated,13900,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['integrat'],['integrated']
Integrability,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:68775,depend,depending,68775,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['depend'],['depending']
Integrability,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:69196,depend,depending,69196,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,6,['depend'],['depending']
Integrability,"RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE¶. A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A¶. mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html:5977,depend,dependent,5977,psi4manual/1.7.x/autodir_options_c/module__occ.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html,4,['depend'],['dependent']
Integrability,"RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE¶. A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html:6390,depend,dependent,6390,psi4manual/1.4.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html,5,['depend'],['dependent']
Integrability,"RG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:5732,depend,dependencies,5732,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['depend'],['dependencies']
Integrability,"ROOT , sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. Expert Guess Vectors¶. FILTER_GUESS¶. Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1 FILTER_GUESS_DET2 and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1¶. Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS . Type: array; Default: No Default. FILTER_GUESS_DET2¶. Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS . Type: array; Default: No Default. FILTER_GUESS_SIGN¶. The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET¶. If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html:16742,rout,routine,16742,psi4manual/4.0b2/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html,8,['rout'],['routine']
Integrability,"RO}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n} f_{damp}(R_{ij})\]. \[f_{damp}(R_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}\]; A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of dispersion corrections¶. Extension 1; Variant; Computing Program (engine); DFT_DISPERSION_PARAMETERS 11. -D; alias to -D2. -D1; -D1 2;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:4657,interface,interface,4657,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,4,['interface'],"['interface', 'interfaced']"
Integrability,"RO}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n} f_{damp}(R_{ij})\]. \[f_{damp}(R_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}\]; A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of dispersion corrections¶. Extension [1]; Variant; Computing Program (engine); DFT_DISPERSION_PARAMETER",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dftd3-1.html:4622,interface,interface,4622,psi4manual/1.3.2/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dftd3-1.html,4,['interface'],"['interface', 'interfaced']"
Integrability,"RTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; from psi4.driver import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html:1720,rout,routines,1720,psi4manual/1.1.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html,1,['rout'],['routines']
Integrability,"Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10038,depend,dependencies,10038,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; compute_shell(...); compute_shell( (TwoBodyAOInt)arg1, (int)arg2, (int)arg3, (int)arg4, (int)arg5) -> None :; docstring; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/psimod-1.html:155576,contract,contracts,155576,psi4manual/4.0b5/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/psimod-1.html,2,['contract'],['contracts']
Integrability,"SA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". ## Force Python 3 print syntax, if this is python 2.X; #if sys.hexversion < 0x03000000:; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import sys; import uuid. from psi4 import core; from psi4.driver.qcdb.molparse import pubchem; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # globally available regex strings; pubchemre = re.compile(r'^(\s*pubchem\s*:\s*(.*)\n)$', re.MULTILINE | re.IGNORECASE). # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html:2012,message,message,2012,psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/inputparser.html,2,['message'],['message']
Integrability,"SCALE (CCENERGY). (CPHF). (DFMP2). (OCC). MP2_SCALE_OS (FNOCC). MP2_SCALE_SS (FNOCC). MP2_SOS_SCALE (OCC). MP2_SOS_SCALE2 (OCC). MP2_SS_SCALE (CCENERGY). (CPHF). (DFMP2). (OCC). MP2_TYPE (CPHF). (DFMP2). (OCC). MP2CORRELATIONENERGY. MP2R12A (TRANSQT). MP2TOTALENERGY. MP3CORRELATIONENERGY. MP3TOTALENERGY. MP4. MP4(SDQ)CORRELATIONENERGY. MP4(SDQ)TOTALENERGY. MP4(SDTQ)CORRELATIONENERGY. MP4(SDTQ)TOTALENERGY. MP4(T)CORRECTIONENERGY. MP4CORRELATIONENERGY. MP4TOTALENERGY. MPN (DETCI). MPN_ORDER_SAVE (DETCI). MPN_SCHMIDT (DETCI). MPN_WIGNER (DETCI). MPnCORRELATIONENERGY. MPnTOTALENERGY. MRCC. MRCC_LEVEL (MRCC). MRCC_METHOD (MRCC). MRCC_NUM_DOUBLET_ROOTS (MRCC). MRCC_NUM_SINGLET_ROOTS (MRCC). MRCC_NUM_TRIPLET_ROOTS (MRCC). MRCC_OMP_NUM_THREADS (MRCC). MRCC_RESTART (MRCC). MS0 (DETCI). mscale() in module qcdb.vecutil. mult() in module qcdb.vecutil. multiplicity; . molecule. multiplicity() LibmintsMolecule method. multiplicity_specified() LibmintsMolecule method. multireference. N. n_body() in module wrappers. nactive_fragments() LibmintsMolecule method. nallatom() LibmintsMolecule method. name() BasisFamily method. LibmintsMolecule method. PubChemObj method. VariableValue method. NAT_ORBS (FNOCC). (OCC). NAT_ORBS_T2 (SAPT). NAT_ORBS_T3 (SAPT). NAT_ORBS_V4 (SAPT). NAT_ORBS_WRITE (DETCI). NAT_ORBS_WRITE_ROOT (DETCI). natom() LibmintsMolecule method. NBC10 module, [1]. NCB31 module, [1]. negated() VariableValue method. NEGLECT_DISTANT_PAIR (CCENERGY). nequivalent() LibmintsMolecule method. new_get_attr() in module molutil. new_set_attr() in module molutil. NEW_TRIPLES (CCENERGY). (CCEOM). NEWTON_CONVERGENCE (ADC). nfragments() LibmintsMolecule method. nfrozen_core() LibmintsMolecule method. NHTBH module, [1]. no GetkwParser attribute. NO_DFILE (DETCI). no_reorient; . molecule. NO_RESPONSE (SAPT). NO_SINGLES (PSIMRCC). norm() in module qcdb.vecutil. NORM_TOLERANCE (ADC). normalize() in module qcdb.vecutil. nuclear_repulsion_energy() LibmintsMolecule method. nuclear_repulsion_ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:31074,wrap,wrappers,31074,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (psi4.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % psi4.psi_top_srcdir()); database = p4util.import_ignorecase(db_name); if database is None:; psi4.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); psi4.print_out('\nSearc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:29923,wrap,wrappers,29923,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"SCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. typecheck() Keyword method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). verify_cavity() in module pcmpreprocess. verify_green() in module pcmpreprocess. verify_medium() in module pcmpreprocess. verify_spheres() in module pcmpreprocess. verify_top() in module pcmpreprocess. visualization. W. WABEI_LOWDISK (CCHBAR). WebMO. WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CPHF). (DETCI). (GLOBALS). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). WFN_TYPE (OCC). wrappers module. WRITER_FILE_LABEL (GLOBALS). X. x() LibmintsMolecule method. XI (CCDENSITY). XI_CONNECT (CCDENSITY). xvalidate() Keyword method. Section method. xyz() LibmintsMolecule method. Y. y() LibmintsMolecule method. yes GetkwParser attribute. Z. Z() CoordEntry method. LibmintsMolecule method. z() LibmintsMolecule method. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. zero() in module qcdb.vecutil. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). ZMatrixEntry class in qcdb.libmintscoordentry. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:49492,wrap,wrappers,49492,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Moller-Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Moller-Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between Psi4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a Psi4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in Psi4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the Psi4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:28654,interface,interface,28654,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['interface'],['interface']
Integrability,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:27583,interface,interface,27583,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,15,['interface'],['interface']
Integrability,"SDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module p4util.util. compare_matrices() in module p4util.util. in module qcdb.psiutil. compare_strings() in module p4util.util. compare_values() in module p4util.util. in module qcdb.psiutil. compare_vectors() in module p4util.util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. conv_dval() GetkwParser method. conv_ival() GetkwParser method. conv_lval() GetkwParser method. convert() in module wrappers. convert_area_scalar() in module pcmpreprocess. convert_length_array() in module pcmpreprocess. convert_length_scalar() in module pcmpreprocess. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module p4util.util. copy_file_to_scratch() in module p4util.util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module p4util.basislist. corresponding_jkfit() in module p4util.basislist. corresponding_orbital() in module p4util.basislist. corresponding_rifit() in module p4util.basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:14980,wrap,wrappers,14980,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"SD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and bet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:121293,rout,routine,121293,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,12,['rout'],['routine']
Integrability,"SE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2019-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import time. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. class IPIBroker(Client):; def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().sym",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html:1174,interface,interfaces,1174,psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,1,['interface'],['interfaces']
Integrability,"SET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_3(**largs):; r""""""Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:80682,wrap,wrappers,80682,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,3,['wrap'],['wrappers']
Integrability,"SI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:5259,depend,dependency,5259,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['depend'],['dependency']
Integrability,"SI4. Psithon Functions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/notes_py-1.html:1382,wrap,wrapped,1382,psi4manual/1.4.0/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/notes_py-1.html,4,['wrap'],['wrapped']
Integrability,"SI4. Psithon Functions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/notes_py-1.html:1382,wrap,wrapped,1382,psi4manual/1.5.0/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/notes_py-1.html,4,['wrap'],['wrapped']
Integrability,"SIS_SCF', guessbasisdf). # Print some info about the guess; PsiMod.print_out('\n'); banner('Guess SCF, %s Basis' % (guessbasis)); PsiMod.print_out('\n'). # Perform the guess scf; PsiMod.scf(). # Move files to proper namespace; PsiMod.IO.change_file_namespace(180, (namespace + '.guess'), namespace); PsiMod.IO.set_default_namespace(namespace). # Set to read and project, and reset bases to final ones; optstash2.restore(); PsiMod.set_local_option('SCF', 'GUESS', 'READ'). # Print the banner for the standard operation; PsiMod.print_out('\n'); banner(name.upper()); PsiMod.print_out('\n'). # Do the full scf; e_scf = PsiMod.scf(precallback, postcallback). else:; e_scf = PsiMod.scf(precallback, postcallback). optstash.restore(); return e_scf. [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['MP2', 'WFN']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). PsiMod.transqt2(); PsiMod.ccsort(); returnvalue = PsiMod.mp2(). optstash.restore(); return returnvalue. [docs]def run_mp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['MP2', 'WFN'],; ['DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_mp2(name, **kwargs). PsiMod.set_local_option('MP2', 'WFN', 'MP2'); PsiMod.deriv(). optstash.restore(). [docs]def run_dfmp2_gradient(name, **kwargs):; """"""Function encoding sequence ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/proc.html:9495,rout,routine,9495,psi4manual/4.0b3/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/proc.html,1,['rout'],['routine']
Integrability,"Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cppe-1.html:1227,depend,dependent,1227,psi4manual/1.4.0/cppe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html,9,['depend'],['dependent']
Integrability,"Set method. shell_to_ao_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_ao_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_basis_function()¶; Python Library Documentation: method shell_to_basis_function; shell_to_basis_function(...) unbound psi4.BasisSet method. shell_to_basis_function( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_basis_function(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.shell_to_center()¶; Python Library Documentation: method shell_to_center; shell_to_center(...) unbound psi4.BasisSet method. shell_to_center( (BasisSet)arg1, (int)arg2) -> int :. docstring; C++ signature :. i shell_to_center(N3psi8BasisSetE {lvalue},i). psi4.BasisSet.zero_ao_basis_set()¶; Python Library Documentation: built-in function zero_ao_basis_set; zero_ao_basis_set(...). zero_ao_basis_set() -> BasisSet :. Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; C++ signature :. N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(). BasisSetParser¶. BoysLocalizer¶. psi4.BoysLocalizer.L()¶; Python Library Documentation: property. Localized orbital coefficients. psi4.BoysLocalizer.U()¶; Python Library Documentation: property. Orbital rotation matrix. psi4.BoysLocalizer.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :. docstring; C++ signature :. N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.BoysLocalizer.converged()¶; Python Library Documentation: property. Did the localization procedure converge?. psi4.BoysLocalizer.localize()¶; Python Library Documentation: method localize; localize(...) unbound psi4.BoysLocalizer method. localize( (Localizer)arg1) -> None :. Perform the localization procedure; C++ signature :. void localize(N3psi9LocalizerE {lvalue}). C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:58548,contract,contraction,58548,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['contract'],['contraction']
Integrability,"Sherrill group. Uses the composite wrapper to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type:; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306, https://doi.org/10.1063/1.2747241 .; Uses the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). Return type:; List[Dict[str, Any]]. Additional composite aliases are easy to defin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cbs.html:31481,wrap,wrapper,31481,psi4manual/1.7.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cbs.html,1,['wrap'],['wrapper']
Integrability,"Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import math; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/aliases.html:1524,rout,routines,1524,psi4manual/1.3.2/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/aliases.html,1,['rout'],['routines']
Integrability,"Special subset '%s' not available for database %s."""""" % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError(""""""Subset element '%s' not a member of database %s."""""" % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = p4util.drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; core.print_out(""\n\n""); p4util.banner((""Database %s Computation"" % (db_name))); core.print_out(""\n""). # write index of calcs to output file; if db_mode == 'continuous':; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; core.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if db_mode == 'sow':; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single input file (%s-master.in) with a database(mode='reap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer archite",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:16076,wrap,wrapper,16076,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,3,['wrap'],['wrapper']
Integrability,"Special subset '%s' not available for database %s."""""" % (db_subset, db_name)); else:; temp = []; for rxn in db_subset:; if rxn in HRXN:; temp.append(rxn); else:; raise ValidationError(""""""Subset element '%s' not a member of database %s."""""" % (str(rxn), db_name)); HRXN = temp. temp = []; for rxn in HRXN:; temp.append(ACTV['%s-%s' % (dbse, rxn)]); HSYS = p4util.drop_duplicates(sum(temp, [])). # Sow all the necessary reagent computations; psi4.print_out(""\n\n""); p4util.banner((""Database %s Computation"" % (db_name))); psi4.print_out(""\n""). # write index of calcs to output file; if db_mode == 'continuous':; instructions = """"""\n The database single-job procedure has been selected through mode='continuous'.\n""""""; instructions += """""" Calculations for the reagents will proceed in the order below and will be followed\n""""""; instructions += """""" by summary results for the database.\n\n""""""; for rgt in HSYS:; instructions += """""" %-s\n"""""" % (rgt); instructions += """"""\n Alternatively, a farming-out of the database calculations may be accessed through\n""""""; instructions += """""" the database wrapper option mode='sow'/'reap'.\n\n""""""; psi4.print_out(instructions). # write sow/reap instructions and index of calcs to output file and reap input file; if db_mode == 'sow':; instructions = """"""\n The database sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructions += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructions += """""" has produced a number of input files (%s-*.in) for individual database members\n"""""" % (dbse); instructions += """""" and a single input file (%s-master.in) with a database(mode='reap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer archite",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:16188,wrap,wrapper,16188,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['wrap'],['wrapper']
Integrability,"Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". __all__ = [; ""ConvergenceError"",; ""MissingMethodError"",; ""ManagedMethodError"",; ""OptimizationConvergenceError"",; ""ParsingError"",; ""PastureRequiredError"",; ""PsiException"",; ""SCFConvergenceError"",; ""TDSCFConvergenceError"",; ""TestComparisonError"",; ""UpgradeHelper"",; ""ValidationError"",; ""docs_table_link"",; ""sanitize_method"",; ]. from typing import Any, Dict, List, Optional. from psi4 import core, extras. [docs]; class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html:2050,message,message,2050,psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,2,['message'],['message']
Integrability,"Symmetry computations are temporarily disabled.""); scf_molecule.set_multiplicity(1); core.set_local_option('SCF', 'GUESS', 'READ'); core.print_out('\n'); p4util.banner(' Computing broken symmetry solution from high-spin triplet guess '); core.print_out('\n'). # cast clean-up; if cast:. # Move files to proper namespace; core.IO.change_file_namespace(180, guesspace, namespace); core.IO.set_default_namespace(namespace). optstash2.restore(). # Print the banner for the standard operation; core.print_out('\n'); p4util.banner(bannername.upper()); core.print_out('\n'). # the SECOND scf call; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); if banner:; core.print_out(""\n ---------------------------------------------------------\n"");; core.print_out("" "" + banner.center(58));. scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); core.set_legacy_wavefunction(scf_wfn). # The wfn from_file routine adds the npy suffix if needed, but we add it here so that; # we can use os.path.isfile to query whether the file exists before attempting to read; read_filename = scf_wfn.get_scratch_filename(180) + '.npy'; if ((core.get_option('SCF', 'GUESS') == 'READ') and os.path.isfile(read_filename)):; old_wfn = core.Wavefunction.from_file(read_filename). Ca_occ = old_wfn.Ca_subset(""SO"", ""OCC""); Cb_occ = old_wfn.Cb_subset(""SO"", ""OCC""). if old_wfn.molecule().schoenflies_symbol() != scf_molecule.schoenflies_symbol():; raise ValidationError(""Cannot compute projection of different symmetries.""). if old_wfn.basisset().name() == scf_wfn.basisset().name():; core.print_out(f"" Reading orbitals from file {read_filename}, no projection.\n\n""); scf_wfn.guess_Ca(Ca_occ); scf_wfn.guess_Cb(Cb_occ); else:; core.print_out(f"" Reading orbitals from file {read_filename}, projecting to new basis.\n\n""); core.print_out("" Computing basis projection from %s to %s\n\n"" % (old_wfn.basisset().name(), scf_wfn.basisset().name())). pCa = scf_wfn.bas",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:44153,rout,routine,44153,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['rout'],['routine']
Integrability,"T)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into ac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6172,rout,routines,6172,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['rout'],['routines']
Integrability,"TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". __all__ = [""process_input""]. import os; import re; import uuid. from psi4 import core; from psi4.driver.p4util.exceptions import *; from psi4.driver.p4util.util import set_memory. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html:1717,message,message,1717,psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,4,['message'],['message']
Integrability,"TAL HESSIAN""] = H0; properties[""return_hessian""] = H0. # if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD. findif_model = AtomicResult(; **{; 'driver': self.driver,; 'model': {; ""basis"": self.basis,; 'method': self.method,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__, module=self.findifrec[""reference""][""module""]),; 'extras': {; 'qcvars': qcvars,; 'findif_record': copy.deepcopy(self.findifrec),; },; 'return_result': self.findifrec['reference'][self.driver.name],; 'success': True,; }). logger.debug('\nFINDIF QCSchema:\n' + pp.pformat(findif_model.dict())). return findif_model. [docs]; def get_psi_results(; self,; client: Optional[""qcportal.FractalClient""] = None,; *,; return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - undisplaced molecule; - compute basis if simple, else dummy basis def2-svp; - e/g/h member data; - QCVariables; - module. Returns; -------; ret; Gradient or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; findif_model = self.get_results(client=client). ret_ptype = core.Matrix.from_array(findif_model.return_result); wfn = _findif_schema_to_wfn(findif_model). gradient_write(wfn); hessian_write(wfn). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. def _findif_schema_to_wfn(findif_model: AtomicResult) -> core.Wavefunction:; """"""Helper function to produce Wavefunction and Psi4 files from a FiniteDifference-flavo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html:52519,interface,interface,52519,psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,3,['interface'],['interface']
Integrability,"TCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'FCI', 'TRUE'); elif (name.lower() == 'cisd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 2); elif (name.lower() == 'cisdt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 3); elif (name.lower() == 'cisdtq'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 4); elif (name.lower() == 'ci'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); level = kwargs['level']; PsiMod.set_local_option('DETCI', 'EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; PsiMod.MintsHelper().integrals(). PsiMod.transqt2(); returnvalue = PsiMod.detci(). optstash.restore(); return returnvalue. [docs]def run_dfmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. .. caution:: Get rid of madness-era restart file. """"""; optstash = OptionsState(; ['DF_BASIS_MP2']). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; targetfile = filepath + prefix + '.' + pid + '.' + namespace + '.32'; if(P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/proc.html:27165,rout,routine,27165,psi4manual/4.0b3/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/proc.html,1,['rout'],['routine']
Integrability,"TCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'FCI', 'TRUE'); elif (name.lower() == 'cisd'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 2); elif (name.lower() == 'cisdt'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 3); elif (name.lower() == 'cisdtq'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'EX_LEVEL', 4); elif (name.lower() == 'ci'):; PsiMod.set_local_option('TRANSQT2', 'WFN', 'DETCI'); PsiMod.set_local_option('DETCI', 'WFN', 'DETCI'); level = kwargs['level']; PsiMod.set_local_option('DETCI', 'EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; PsiMod.MintsHelper().integrals(). PsiMod.transqt2(); PsiMod.detci(). optstash.restore(). [docs]def run_dfmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. """"""; optstash = OptionsState(; ['DF_BASIS_MP2'],; ['SCF', 'SCF_TYPE']). # Alter default algorithm; if not PsiMod.has_option_changed('SCF', 'SCF_TYPE'):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'). if 'restart_file' in kwargs:; restartfile = kwargs.pop('restart_file'); # Rename the checkpoint file to be consistent with psi4's file system; psioh = PsiMod.IOManager.shared_object(); psio = PsiMod.IO.shared_object(); filepath = psioh.get_file_path(32); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; tar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:40439,rout,routine,40439,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"TER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(); psi4.set_global_option(""BASIS"", psi4.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:71146,wrap,wrapper,71146,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"TES (CPHF). CIS_MEM_SAFETY_FACTOR (CPHF). CIS_NO_STATES (CPHF). CIS_OPDM_STATES (CPHF). CIS_TOPDM_STATES (CPHF). CISDCORRELATIONENERGY. CISDDIPOLEX. CISDDIPOLEY. CISDDIPOLEZ. CISDQUADRUPOLEXX. CISDQUADRUPOLEXY. CISDQUADRUPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module p4util.util. compare_matrices() in module p4util.util. in module qcdb.psiutil. compare_strings() in module p4util.util. compare_values() in module p4util.util. in module qcdb.psiutil. compare_vectors() in module p4util.util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. conv_dval() GetkwParser method. conv_ival() GetkwParser method. conv_lval() GetkwParser method. convert() in module wrappers. convert_area_scalar() in module pcmpreprocess. convert_length_array() in module pcmpreprocess. convert_length_scalar() in module pcmpreprocess. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module p4util.util. copy_file_to_scratch() in module p4util.util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module p4util.basislist. corresponding_jkfit() in module p4util.basislist. correspondi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:14635,wrap,wrappers,14635,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"TION_STEPS (CPHF). SOLVER_QUANTITY (CPHF). SOLVER_TYPE (CPHF). SORTED_TEI_FILE (TRANSQT). SOS_TYPE (OCC). SPINADAPT_ENERGIES (CCENERGY). split_menial() in module wrappers. SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STABILITY_ADD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . mole",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:44019,wrap,wrappers,44019,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"TM; -D3 [6] w/ reparameterized and more flexible original zero-damping w/ 3-body ATM; s-dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\beta\), \(s_9\)]. -D3MBJ2B, -D3MBJ, -D3M(BJ); -D3 [6] w/ reparameterized newer Becke-Johnson rational damping w/o 3-body ATM; s-dftd3 OR dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3MBJATM; -D3 [6] w/ reparameterized newer Becke-Johnson rational damping w/ 3-body ATM; s-dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\), \(s_9\)]. -NL; Grimme’s -NL (DFT plus VV10 correlation) [7]; PSI4‘s nl; [\(b\), \(c\)] via NL_DISPERSION_PARAMETERS. -CHG; Chai & Head-Gordon dispersion formula [8]; PSI4‘s libdisp; [\(s_6\)]. -DAS2009; Podeszwa & Szalewicz dispersion formula [9]; PSI4‘s libdisp; [\(s_6\)]. -DAS2010; Podeszwa & Szalewicz dispersion formula [10]; PSI4‘s libdisp; [\(s_6\)]. -D4BJEEQATM, -D4BJ, -D4; -D4 [12]; dftd4; [\(a_1\), \(a_2\), \(alp\), \(s_6\), \(s_8\), \(s_9\)]. Three-Body Dispersion Corrections¶; In addition to the previously discussed two-body dispersion corrections,; the dftd3/PSI4 interface enables computations of three-body dispersion; corrections. In DFT-D3, three-body dispersion is approximated with the; Axilrod-Teller-Muto model:. \[E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neq B\neq C}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC})\]; where \(\theta_a\) is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and \(\bar{r}_{ABC}\) is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. \[C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}\]; See the DFT-D3 documentation; for more details.; For now, the three-body correction can be called by using the run_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dftd3.html:10064,interface,interface,10064,psi4manual/1.9.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dftd3.html,2,['interface'],['interface']
Integrability,"TM; -D3 [6] w/ reparameterized and more flexible original zero-damping w/ 3-body ATM; s-dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\beta\), \(s_9\)]. -D3MBJ2B, -D3MBJ, -D3M(BJ); -D3 [6] w/ reparameterized newer Becke-Johnson rational damping w/o 3-body ATM; s-dftd3 OR dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3MBJATM; -D3 [6] w/ reparameterized newer Becke-Johnson rational damping w/ 3-body ATM; s-dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\), \(s_9\)]. -NL; Grimme’s -NL (DFT plus VV10 correlation) [7]; PSI4‘s nl; [\(b\), \(c\)] via NL_DISPERSION_PARAMETERS. -CHG; Chai & Head-Gordon dispersion formula [8]; PSI4‘s libdisp; [\(s_6\)]. -DAS2009; Podeszwa & Szalewicz dispersion formula [9]; PSI4‘s libdisp; [\(s_6\)]. -DAS2010; Podeszwa & Szalewicz dispersion formula [10]; PSI4‘s libdisp; [\(s_6\)]. -D4BJEEQATM, -D4BJ, -D4; -D4 [12]; dftd4; [\(a_1\), \(a_2\), \(alp\), \(s_6\), \(s_8\), \(s_9\)]. Three-Body Dispersion Corrections¶; In addition to the previously discussed two-body dispersion corrections,; the dftd3/PSI4 interface enables computations of three-body dispersion; corrections. In DFT-D3, three-body dispersion is approximated with the; Axilrod-Teller-Muto model:. \[E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neqB\neqC}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC})\]; where \(\theta_a\) is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and \(\bar{r}_{ABC}\) is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. \[C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}\]; See the DFT-D3 documentation; for more details.; For now, the three-body correction can be called by using the run_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:9838,interface,interface,9838,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,2,['interface'],['interface']
Integrability,"T_EXCH_DISP_SCALE_SCHEME (SAPT)¶SAPT — Scheme for approximating exchange-dispersion for SAPT-DFT. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211611,integrat,integration,211611,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['integrat'],['integration']
Integrability,"The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.9420",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cppe-1.html:1482,depend,dependent,1482,psi4manual/1.4.0/cppe-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html,9,['depend'],['dependent']
Integrability,"The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dkh.html:3341,depend,dependencies,3341,psi4manual/1.7.x/dkh.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dkh.html,1,['depend'],['dependencies']
Integrability,"The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html:1406,contract,contraction,1406,psi4manual/1.5.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html,5,['contract'],['contraction']
Integrability,"The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html:1406,contract,contraction,1406,psi4manual/1.4.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html,1,['contract'],['contraction']
Integrability,"The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:12096,message,message,12096,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]; class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:5238,message,message,5238,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"True if self.puream == 'Pure' else False. [docs] def center(self):; """"""Returns the center of the Molecule this shell is on""""""; return self.center. [docs] def ncenter(self):; """"""Returns the atom number this shell is on. Used by integral derivatives for indexing.""""""; return self.nc. [docs] def exp(self, prim):; """"""Returns the exponent of the given primitive""""""; return self.PYexp[prim]. [docs] def coef(self, pi):; """"""Return coefficient of pi'th primitive""""""; return self.PYcoef[pi]. [docs] def erd_coef(self, pi):; """"""Return ERD normalized coefficient of pi'th primitive""""""; return self.PYerd_coef[pi]. [docs] def original_coef(self, pi):; """"""Return unnormalized coefficient of pi'th primitive""""""; return self.PYoriginal_coef[pi]. [docs] def exps(self):; """"""Returns the exponent of the given primitive""""""; return self.PYexp. [docs] def coefs(self):; """"""Return coefficient of pi'th primitive and ci'th contraction""""""; return self.PYcoef. [docs] def original_coefs(self):; """"""Return unnormalized coefficient of pi'th primitive and ci'th contraction""""""; return self.PYoriginal_coef. [docs] def pyprint(self, outfile=None):; """"""Print out the shell""""""; text = """""" %c %3d 1.00\n"""""" % (self.AMCHAR(), self.nprimitive()); for K in range(self.nprimitive()):; text += """""" %20.8f %20.8f\n"""""" % (self.PYexp[K], self.PYoriginal_coef[K]). if outfile is None:; return text; else:; with open(outfile, mode='w') as handle:; handle.write(text). [docs] def pyprint_gamess(self, outfile=None):; """"""Print out the shell in Gamess format""""""; text = """"""%c %3d\n"""""" % (self.AMCHAR(), self.nprimitive()); for K in range(self.nprimitive()):; text += """"""%3d %15.8f %15.8f\n"""""" % (K + 1, self.PYexp[K], self.PYoriginal_coef[K]). if outfile is None:; return text; else:; with open(outfile, mode='w') as handle:; handle.write(text). def __str__(self):; """"""String representation of shell""""""; return self.pyprint(outfile=None). [docs] def normalize(self, l, m, n):; """"""Normalize the angular momentum component""""""; return 1.0. [docs] ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:8895,contract,contraction,8895,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"True)). # S/R: Quit sow after writing files. Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':; optstash.restore(); optstash_conv.restore(); if return_wfn:; return (None, None); else:; return None; elif freq_mode == 'reap':; wfn = psi4.new_wavefunction(molecule, psi4.get_global_option('BASIS')). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = psi4.fd_freq_1(molecule, gradients, irrep) # TODO or moleculeclone?; wfn.set_hessian(H); wfn.set_frequencies(psi4.get_frequencies()). # The last item in the list is the reference energy, return it; psi4.set_variable('CURRENT ENERGY', energies[-1]). psi4.set_parent_symmetry(''); optstash.restore(); optstash_conv.restore(). if return_wfn:; return (wfn.hessian(), wfn); else:; return wfn.hessian(). else:; psi4.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; displacements = psi4.fd_geoms_freq_0(moleculeclone, irrep); moleculeclone.fix_orientation(True); moleculeclone.reinterpret_coordentry(False). # Record undisplaced symmetry for projection of diplaced point groups; psi4.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if freq_mode == 'sow':; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:72456,depend,dependent,72456,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['depend'],['dependent']
Integrability,"True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{float(cptd):.{digits1}f}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). diff = cptd - xptd; if xptd.shape == ():; diff_str = f""{float(diff):.{digits1}f}""; message = """"""\t{}: computed value ({}) does not match ({}) {} by difference ({})."""""".format(; label, cptd_str, xptd_str, digits_str, diff_str; ); else:; diff[isclose] = 0.0; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()); with np.errstate(divide=""ignore"", invalid=""ignore""):; diffrel = np.divide(diff, xptd); np.nan_to_num(diffrel, copy=False); diffraw = cptd - xptd; digits_str += f"" (o-e: RMS {_rms(diffraw):.1e}, MAX {np.amax(np.absolute(diffraw)):.1e}, RMAX {np.amax(np.absolute(diffrel)):.1e})""; message = """"""\t{}: computed value does not match {}.\n Expected:\n{}\n Observed:\n{}\n Difference (passed elements are zeroed):\n{}\n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]; def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:5348,message,message,5348,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,3,['message'],['message']
Integrability,"True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{float(cptd):.{digits1}f}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). diff = cptd - xptd; if xptd.shape == ():; diff_str = f""{float(diff):.{digits1}f}""; message = """"""\t{}: computed value ({}) does not match ({}) {} by difference ({})."""""".format(; label, cptd_str, xptd_str, digits_str, diff_str; ); else:; diff[isclose] = 0.0; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()); with np.errstate(divide=""ignore"", invalid=""ignore""):; diffrel = np.divide(diff, xptd); np.nan_to_num(diffrel, copy=False); diffraw = cptd - xptd; digits_str += f"" (o-e: RMS {_rms(diffraw):.1e}, MAX {np.amax(np.absolute(diffraw)):.1e}, RMAX {np.amax(np.absolute(diffrel)):.1e})""; message = """"""\t{}: computed value does not match {}.\n Expected:\n{}\n Observed:\n{}\n Difference (passed elements are zeroed):\n{}\n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:5195,message,message,5195,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in the density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS1 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS2 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (DETCI); DETCI (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS3 (TRANSQT); TRANSQT (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:102705,integrat,integration,102705,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"UHF; threaded [3]. CCSD; Y; Y; RHF/ROHF/UHF; threaded [3]. CCSD(T); Y; Y [1]; RHF/ROHF/UHF; threaded (pthreads). CC3; Y; —; RHF/ROHF/UHF; threaded (pthreads). EOM-CCSD; Y; Y; RHF/ROHF/UHF; threaded [3]. Mk-MRCCSD; Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRCCSD(T); Y; N; RHF/ROHF/TCSCF; threaded [3]. Mk-MRPT2; Y; N; RHF/ROHF/TCSCF; threaded [3]. Geometry optimization (currently restricted to true minima on the potential; energy surface) can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties. Technical Support¶; The PSI4 package is; distributed for free and without any guarantee of reliability,; accuracy, or suitability for any particular purpose. No obligation; to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries directed to; crawdad@vt.edu.; For bug reports, specific and detailed information, with example; inputs, would be appreciated. Questions or comments regarding; this user’s manual may be sent to; sherrill@gatech.edu.; Footnotes. [1]UHF-CCSD(T) gradients only, as of beta2. [2]RHF reference only. DF-MP2 is recommended as a faster alternative. [3](1, 2, 3, 4, 5, 6, 7, 8) threading through BLAS routines only. [4](1, 2) DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. Table Of Contents. Introduction; Overview; Citing PSI4; Obtaining and Installing PSI4; Supported Architectures; Capabilities; Technical Support. Previous topic; <no title>; Next topic; A PSI4 Tutorial; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/introduction-1.html:9478,rout,routines,9478,psi4manual/4.0b2/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html,2,['rout'],['routines']
Integrability,"UPOLEXZ. CISDQUADRUPOLEYY. CISDQUADRUPOLEYZ. CISDQUADRUPOLEZZ. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OCC). D. d() CoordEntry static method. D_CONVERGENCE (DFTSAPT).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:14351,wrap,wrappers,14351,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"UPOLEYY. CIROOTnQUADRUPOLEYZ. CIROOTnQUADRUPOLEZZ. CIROOTnTOTALENERGY. CIS_AD_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_AMPLITUDE_CUTOFF (CPHF). (PLUGIN_FOCK), [1]. CIS_DOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CIS_NO_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_OPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_TOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CISDCORRELATIONENERGY. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() (in module util). compare_matrices() (in module util). compare_strings() (in module util). compare_values() (in module util). compare_vectors() (in module util). compilers. complete_basis_set(); . see cbs(); . complete_basis_set() (in module wrappers). COMPLEX_TOLERANCE (CCEOM). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() (in module wrappers). copy() (Table method). copy_file_from_scratch() (in module util). copy_file_to_scratch() (in module util). CORE (module), [1]. corl_xtpl_helgaker_2() (in module wrappers). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_REFERENCE (PSIMRCC). CORR_WFN (PSIMRCC). Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() (in module wrappers). CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CPHF_TASKS (CPHF). (PLUGIN_FOCK), [1]. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (PLUGIN_DFADC), [1]. D. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). database(). adding new. available. output. setting keywords. database() (in module wrappers). db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:8330,wrap,wrappers,8330,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"UR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV¶. Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM¶. Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE¶. Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 In",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:11020,contract,contraction,11020,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,13,['contract'],['contraction']
Integrability,"Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* match",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:11290,message,message,11290,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"VDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:41132,depend,dependent,41132,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['depend'],['dependent']
Integrability,"ValidationError(""""""Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line %d: %s"""""" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions[p] = contraction. # We have a full shell, push it to the basis set; shell_list.append(ShellInfo(am, contractions, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')). elif len(shell_type) == 2:; # This is to handle instances of SP, PD, DF, FG, ...; am1 = shell_to_am[shell_type[0]]; am2 = shell_to_am[shell_type[1]]. exponents = [0.0] * nprimitive; contractions1 = [0.0] * nprimitive; contractions2 = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives2.match(line); # Must match primitivies2; if not what:; raise ValidationError(""Gaussian94BasisSetParser::parse: Unable to match an exponent with two contractions: line %d: %s"" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions1[p] = contraction. # Do the other contraction; contraction = float(what.group(3)). # Scale the contraction and save the information; contraction *= scale; contractions2[p] = contraction. shell_list.append(ShellInfo(am1, contractions1, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')); shell_list.append(ShellInfo(am2, contractions2, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')); else:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unable to parse basis sets with spd, or higher grouping""""""); else:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Expected shell information, but got: line %d: %s"""""" % (lineno, line)); line = lines[lineno]; lineno += 1. break. if not found:; #raise BasisSetN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html:7325,contract,contractions,7325,psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,1,['contract'],['contractions']
Integrability,"Whether this basis set object has an ECP associated with it. has_puream(self); Spherical harmonics?. make_filename(arg0); Returns filename for basis name: pluses, stars, parentheses replaced and gbs extension added. max_am(self); Returns maximum angular momentum used. max_function_per_shell(self); The max number of basis functions in a shell. max_nprimitive(self); The max number of primitives in a shell. molecule(self); Molecule object. move_atom(self, arg0, arg1); Translate a given atom by a given amount. n_ecp_core(*args, **kwargs); Overloaded function. n_ecp_shell_on_center(self, i); Return the number of ECP shells on a given center. n_frozen_core(self[, local, molecule]); Returns the number of orbital (non-ECP) frozen core electrons. name(self); Callback handle, may represent string or function. nao(self); Returns number of atomic orbitals (Cartesian). nbf(self); Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self); Returns total number of primitives in all contractions. nshell(self); Returns number of shells. nshell_on_center(self, i); Return the number of shells on a given center. print_detail_out(self); Prints detailed basis set info to outfile. print_out(self); Prints basis set info to outfile. shell(*args, **kwargs); Overloaded function. shell_on_center(self, c, i); Return the i'th shell on center. shell_to_ao_function(self, i); Return the function number for the first function for the i'th shell. shell_to_basis_function(self, i); Given a shell return its first basis function. shell_to_center(self, i); Return the atomic center for the i'th shell. zero_ao_basis_set(); Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. Methods Documentation. ao_to_shell(self: psi4.core.BasisSet, i: int) → int¶; Given a cartesian function (AO) number what shell does it correspond to. blend(self: psi4.core.BasisSet) → str¶; Plus-separated string of [basisna",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.basisset.html:1989,contract,contractions,1989,psi4manual/1.5.0/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.basisset.html,6,['contract'],['contractions']
Integrability,"Windows, through the Ubuntu shell). If using the PSI4 binary, gCP has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/gcp-1.html:1283,interface,interface,1283,psi4manual/1.1.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/gcp-1.html,2,['interface'],['interface']
Integrability,"X_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:5887,integrat,integration,5887,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['integrat'],['integration']
Integrability,"Y. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() (in module util). compare_matrices() (in module util). compare_strings() (in module util). compare_values() (in module util). compare_vectors() (in module util). compilers. complete_basis_set(); . see cbs(); . complete_basis_set() (in module wrappers). COMPLEX_TOLERANCE (CCEOM). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() (in module wrappers). copy() (Table method). copy_file_from_scratch() (in module util). copy_file_to_scratch() (in module util). CORE (module), [1]. corl_xtpl_helgaker_2() (in module wrappers). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_REFERENCE (PSIMRCC). CORR_WFN (PSIMRCC). Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() (in module wrappers). CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CPHF_TASKS (CPHF). (PLUGIN_FOCK), [1]. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (PLUGIN_DFADC), [1]. D. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). database(). adding new. available. output. setting keywords. database() (in module wrappers). db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DEBUG (CPHF). (GLOBALS). (JK), [1]. (PLUGIN_FOCK), [1]. (PLUGIN_OMEGA), [1]. (SOLVER), [1]. DELETE_AO (TRANSQT). DELETE_RESTR_DOCC (TRANSQT). DELETE_TEI (TRANSQT2). DELETE_TPDM (TRANSQT). DENOMINATOR_ALGORITHM (SAPT). DENOMINATOR_DELTA (SAPT). density-fitting; . MP2. DERTYPE (GLOBALS). DETCI_FREEZE_CORE (DETCI). DF-MP2. theory. DF-MP2CORRELATIONENERGY. DF-MP2TOTALENERGY. DF_BASIS_ELST (SAPT). DF_BASI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:8821,wrap,wrappers,8821,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"Yoriginal_coef, self.PYexp,; self.puream, nc, c,; self.start, 'Unnormalized'); else:; return ShellInfo(self.l, self.PYoriginal_coef, self.PYexp,; self.puream, self.nc, self.center,; self.start, 'Unnormalized'); # better to just deepcopy?. [docs] def nprimitive(self):; """"""The number of primitive Gaussians""""""; return len(self.PYexp). [docs] def nfunction(self):; """"""Total number of basis functions""""""; return INT_NFUNC(self.puream, self.l). [docs] def ncartesian(self):; """"""Total number of functions if this shell was Cartesian""""""; return self.PYncartesian. [docs] def am(self):; """"""The angular momentum of the given contraction""""""; return self.l. [docs] def amchar(self):; """"""The character symbol for the angular momentum of the given contraction""""""; return 'spdfghiklmnopqrtuvwxyz'[self.l]. [docs] def AMCHAR(self):; """"""The character symbol for the angular momentum of the given contraction (upper case)""""""; return 'SPDFGHIKLMNOPQRTUVWXYZ'[self.l]. [docs] def is_cartesian(self):; """"""Returns true if contraction is Cartesian""""""; return True if self.puream == 'Cartesian' else False. [docs] def is_pure(self):; """"""Returns true if contraction is pure""""""; return True if self.puream == 'Pure' else False. [docs] def center(self):; """"""Returns the center of the Molecule this shell is on""""""; return self.center. [docs] def ncenter(self):; """"""Returns the atom number this shell is on. Used by integral derivatives for indexing.""""""; return self.nc. [docs] def exp(self, prim):; """"""Returns the exponent of the given primitive""""""; return self.PYexp[prim]. [docs] def coef(self, pi):; """"""Return coefficient of pi'th primitive""""""; return self.PYcoef[pi]. [docs] def erd_coef(self, pi):; """"""Return ERD normalized coefficient of pi'th primitive""""""; return self.PYerd_coef[pi]. [docs] def original_coef(self, pi):; """"""Return unnormalized coefficient of pi'th primitive""""""; return self.PYoriginal_coef[pi]. [docs] def exps(self):; """"""Returns the exponent of the given primitive""""""; return self.PYexp. [docs] def co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:7699,contract,contraction,7699,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"[""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. 12; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function run_dftd3() or run_dftd4(). (These functions; call QCEngine, which is the same PSI4 + dftd3/dftd4 interface that is called during an scf job.); This “D-only” route is much faster than running a DFT-D energy.; Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a dftd3 “D-only” calculation. But; in a dftd4 “D-only” calculation, functional information overrides; any user-specified dispersion parameters. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.Molecule.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=1)¶; Compute disp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dftd3-1.html:9567,rout,route,9567,psi4manual/1.5.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dftd3-1.html,3,['rout'],['route']
Integrability,"['level']; maxnvect = (level + 1) / 2 + (level + 1) % 2; PsiMod.set_global_option('MAX_NUM_VECS', maxnvect); if ((level + 1) % 2):; PsiMod.set_global_option('MPN_ORDER_SAVE', 2); else:; PsiMod.set_global_option('MPN_ORDER_SAVE', 1); elif (name.lower() == 'fci'):; PsiMod.set_global_option('WFN', 'DETCI'); PsiMod.set_global_option('FCI', 'TRUE'); elif (name.lower() == 'cisd'):; PsiMod.set_global_option('WFN', 'DETCI'); PsiMod.set_global_option('EX_LEVEL', 2); elif (name.lower() == 'cisdt'):; PsiMod.set_global_option('WFN', 'DETCI'); PsiMod.set_global_option('EX_LEVEL', 3); elif (name.lower() == 'cisdtq'):; PsiMod.set_global_option('WFN', 'DETCI'); PsiMod.set_global_option('EX_LEVEL', 4); elif (name.lower() == 'ci'):; PsiMod.set_global_option('WFN', 'DETCI'); level = kwargs['level']; PsiMod.set_global_option('EX_LEVEL', level); # Call a plain energy('detci') and have full control over options; elif(name.lower() == 'detci'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and input.yes.match(str(kwargs['bypass_scf']))):; run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_local_option('scf', 'scf_type') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.transqt2(); returnvalue = PsiMod.detci(). if (name.lower() != 'detci'):; PsiMod.set_global_option('WFN', 'SCF'); PsiMod.revoke_global_option_changed('WFN'); PsiMod.set_global_option('MPN', 'FALSE'); PsiMod.revoke_global_option_changed('MPN'); PsiMod.set_global_option('MAX_NUM_VECS', 12); PsiMod.revoke_global_option_changed('MAX_NUM_VECS'); PsiMod.set_global_option('MPN_ORDER_SAVE', 0); PsiMod.revoke_global_option_changed('MPN_ORDER_SAVE'); PsiMod.set_global_option('FCI', 'FALSE'); PsiMod.revoke_global_option_changed('FCI'); PsiMod.set_global_option('EX_LEVEL', 2); PsiMod.revoke_global_option_changed('EX_LEVEL'). return returnvalue. [docs]def run_dfmp2(name, **kwargs):; """"""Function enco",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/proc.html:20150,rout,routine,20150,psi4manual/4.0b2/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/proc.html,1,['rout'],['routine']
Integrability,"[beta4] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/notes_py-1.html:1409,wrap,wrapped,1409,psi4manual/4.0b4/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/notes_py-1.html,4,['wrap'],['wrapped']
Integrability,"[beta5] » ; Psithon Functions: Invoking a Calculation ». Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; nearest preceeding molecule declared in a molecule name {...} block. Note; that the value of this keyword (name in the example) is a Python object and; so is not wrapped in quotes like a string. Previous topic; Psithon Functions: Invoking a Calculation; Next topic; Energy; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/notes_py-1.html:1409,wrap,wrapped,1409,psi4manual/4.0b5/notes_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/notes_py-1.html,4,['wrap'],['wrapped']
Integrability,"\(s_{r,6}\)]. -D3; alias to -D3ZERO. -D3ZERO; -D3 4 w/ original zero-damping; dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\alpha_6\), \(s_{r,8}\)]. -D3BJ; -D3 5 w/ newer Becke-Johnson rational damping; dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3(BJ); alias to -D3BJ. -D3M; alias to -D3MZERO. -D3MZERO; -D3 6 w/ reparameterized and more flexible original zero-damping; dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\beta\)]. -D3MBJ; -D3 6 w/ reparameterized newer Becke-Johnson rational damping; dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3M(BJ); alias to -D3MBJ. -NL; Grimme’s -NL (DFT plus VV10 correlation) 7; PSI4‘s nl; [\(b\), \(c\)] via NL_DISPERSION_PARAMETERS. -CHG; Chai & Head-Gordon dispersion formula 8; PSI4‘s libdisp; [\(s_6\)]. -DAS2009; Podeszwa & Szalewicz dispersion formula 9; PSI4‘s libdisp; [\(s_6\)]. -DAS2010; Podeszwa & Szalewicz dispersion formula 10; PSI4‘s libdisp; [\(s_6\)]. Three-Body Dispersion Corrections¶; In addition to the previously discussed two-body dispersion corrections,; the dftd3/PSI4 interface enables computations of three-body dispersion; corrections. In DFT-D3, three-body dispersion is approximated with the; Axilrod-Teller-Muto model:. \[E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neqB\neqC}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC})\]; where \(\theta_a\) is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and \(\bar{r}_{ABC}\) is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. \[C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}\]; See the DFT-D3 documentation; for more details.; For now, the three-body correction can be called by using the run_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:6797,interface,interface,6797,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,2,['interface'],['interface']
Integrability,"\)]. -D3BJ; -D3 5 w/ newer Becke-Johnson rational damping; dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3(BJ); alias to -D3BJ. -D3M; alias to -D3MZERO. -D3MZERO; -D3 6 w/ reparameterized and more flexible original zero-damping; dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\beta\)]. -D3MBJ; -D3 6 w/ reparameterized newer Becke-Johnson rational damping; dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3M(BJ); alias to -D3MBJ. -NL; Grimme’s -NL (DFT plus VV10 correlation) 7; PSI4‘s nl; [\(b\), \(c\)] via NL_DISPERSION_PARAMETERS. -CHG; Chai & Head-Gordon dispersion formula 8; PSI4‘s libdisp; [\(s_6\)]. -DAS2009; Podeszwa & Szalewicz dispersion formula 9; PSI4‘s libdisp; [\(s_6\)]. -DAS2010; Podeszwa & Szalewicz dispersion formula 10; PSI4‘s libdisp; [\(s_6\)]. -D4; alias to -D4BJEEQATM. -D4BJ; alias to -D4BJEEQATM. -D4BJEEQATM; -D4 12; dftd4; [\(a_1\), \(a_2\), \(alp\), \(s_6\), \(s_8\), \(s_9\)]. Three-Body Dispersion Corrections¶; In addition to the previously discussed two-body dispersion corrections,; the dftd3/PSI4 interface enables computations of three-body dispersion; corrections. In DFT-D3, three-body dispersion is approximated with the; Axilrod-Teller-Muto model:. \[E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neqB\neqC}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC})\]; where \(\theta_a\) is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and \(\bar{r}_{ABC}\) is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. \[C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}\]; See the DFT-D3 documentation; for more details.; For now, the three-body correction can be called by using the run_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dftd3-1.html:7092,interface,interface,7092,psi4manual/1.5.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dftd3-1.html,3,['interface'],['interface']
Integrability,"\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]\end{split}\]; Here, \(T\) is the noninteracting quasiparticle kinetic energy operator,; \(V\) is the nucleus-electron attraction potential, \(D^{\mathrm{T}}\); is the total electron density matrix, and \(E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]\) is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence \(E_{\mathrm{xc}}\) is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; \(\rho_\alpha\) or \(\rho_\beta\),. \[\rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1)\]; The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; \(\gamma_{\alpha\alpha}\), \(\gamma_{\alpha\beta}\) or; \(\gamma_{\beta\beta}\) to build an inhomogeneity; parameter. \[\gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1)\]. \[\gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1)\]; where,. \[\nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1)\]; GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate.; Another local variant which has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in whi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:3049,depend,depend,3049,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,15,['depend'],['depend']
Integrability,"\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""corl_xtpl_helgaker_2: datatype is not recognized '{type(valueLO)}'.""). xtpl_procedures = {; ""xtpl_highest_1"": xtpl_highest_1,; ""scf_xtpl_helgaker_2"": scf_xtpl_helgaker_2,; ""scf_xtpl_truhlar_2"": scf_xtpl_truhlar_2,; ""scf_xtpl_karton_2"": scf_xtpl_karton_2,; ""scf_xtpl_helgaker_3"": scf_xtpl_helgaker_3,; ""corl_xtpl_helgaker_2"": corl_xtpl_helgaker_2,; }. composite_procedures = {; ""sherrill_gold_standard"": sherrill_gold_standard,; ""allen_focal_point"": allen_focal_point,; }. [docs]def register_xtpl_function(func: Callable):; """"""Register a user-defined extrapolation function to use like an built-in one. Parameters; ----------; func; A Python function that applies a basis set extrapolation formula to scalars and optionally to; NumPy arrays. See :source:`psi4/driver/driver_cbs_helper.py` and :srcsample:`pywrap-cbs1` for; examples. The name of the function should follow the pattern ``<scf|corl>_xtpl_<scientist>_<#basis>``. """"""; if func.__name__.split(""_"")[-1].isdigit():; xtpl_procedures[func.__name__] = func; else:; raise ValidationError(""Extrapolation function names follow <scf|corl>_xtpl_<scientist>_<#basis>""). [docs]def register_composite_function(func: Callable):; """"""Register a user-defined composite method function to use like a built-in one. Parameters; ----------; func; A Python function that defines a configuration of the :py:func:`psi4.driver.cbs` wrapper.; See :source:`psi4/driver/aliases.py` and :srcsample:`cbs-xtpl-nbody` for examples. """"""; composite_procedures[func.__name__] = func. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.driver_cbs_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:22431,wrap,wrapper,22431,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,1,['wrap'],['wrapper']
Integrability,"\n')\n""""""; banners += """"""banner(' Gradient %d Computation: Displacement %d')\n"""""" % (opt_iter, n + 1); banners += """"""PsiMod.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; PsiMod.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = PsiMod.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; PsiMod.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(format_molecule_for_input(molecule)); freagent.write(format_options_for_input()); format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""PsiMod.print_out('\\nGRADIENT RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.close(). # S/R: Read energy from each displaced geometry output file and save in energies array; elif (opt_mode.lower() == 'reap'):; E = 0.0; exec(banners). try:; freagent = open('%s.out' % (rfile), 'r'); except IOError:; ValidationError('Aborting upon output file \'%s.out\' not found.\n' % (rfile)); return 0.0; else:; while 1:; line = freagent.readline(); if not line:; if E == 0.0:; ValidationError('Aborting upon output file \'%s.out\' has no %s RESULT line",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/driver.html:30523,wrap,wrapper,30523,psi4manual/4.0b3/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/driver.html,2,['wrap'],['wrapper']
Integrability,"\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = psi4.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; psi4.clean(). psi4.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; psi4.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; psi4.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; psi4.get_active_molecule().reinterpret_coordentry(True). optstash.restore(); # TODO: add return statement of hessian matrix; # TODO: set current energy to un-displaced energy. else:; # If not, perform finite difference of energies; print('Performing finite difference calculations by energies'). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not psi4.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 11); if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = psi4.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:64586,depend,dependent,64586,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['depend'],['dependent']
Integrability,"\s+([+-]?\d*\.?\d+)\s+([KMG]i?B)',; re.IGNORECASE); temp = re.sub(memory_string, process_memory_command, temp). # Process ""basis file ... ""; basis_file = re.compile(r'(\s*?)basis\s+file\s*(\b.*\b)\s*$',; re.MULTILINE | re.IGNORECASE); temp = re.sub(basis_file, process_basis_file, temp). # Process ""basis name { ... }""; basis_block = re.compile(r'(\s*?)basis[=\s]*\{(.*?)\}',; re.MULTILINE | re.DOTALL | re.IGNORECASE); temp = re.sub(basis_block, process_basis_block, temp). # Process ""basis file ... ""; file_pid = re.compile(r'(\s*?)filename\s*(\b.*\b)\s*$',; re.MULTILINE | re.IGNORECASE); temp = re.sub(file_pid, process_filename, temp). # imports; imports = 'from PsiMod import *\n'; imports += 'from physconst import *\n'; imports += 'from molutil import *\n'; imports += 'from driver import *\n'; imports += 'from text import *\n'; imports += 'from inpsight import *\n'; imports += 'from wrappers import *\n'; imports += 'from gaussian_n import *\n'; imports += 'from aliases import *\n'; imports += 'from psiexceptions import *\n'; imports += 'from util import *\n'; imports += 'from qmmm import *\n'; imports += 'from frac import *\n'; imports += 'from diatomic import *\n'; imports += 'from functional import *\n'; imports += 'from pubchem import *\n'; imports += 'from psifiles import *\n'; imports += 'import pickle\n'; imports += 'psi4_io = PsiMod.IOManager.shared_object()\n'. # psirc (a baby PSIthon script that might live in ~/.psi4rc); psirc = ''; homedir = os.path.expanduser('~'); psirc_file = homedir + '/.psi4rc'; if os.path.isfile(psirc_file):; fh = open(psirc_file); psirc = fh.read(); fh.close(). # Override scratch directory if user specified via env_var; scratch = ''; scratch_env = PsiMod.Process.environment['PSI_SCRATCH']; if len(scratch_env):; scratch += 'psi4_io.set_default_path(""%s"")\n' % (scratch_env). blank_mol = 'geometry(""""""\n'; blank_mol += '0 1\nH\nH 1 0.74\n'; blank_mol += '"""""",""blank_molecule_psi4_yo"")\n'. temp = imports + psirc + scratch + blank_mol + temp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/input.html:21829,wrap,wrappers,21829,psi4manual/4.0b4/_modules/input.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/input.html,1,['wrap'],['wrappers']
Integrability,"\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). Return type; List[Dict[str, Any]]. Additional composite aliases are easy to define by the; user. Follow models in psi4/psi4/driver/aliases.py; and cbs-xtpl-nbody and use the; psi4.driver.driver_cbs_helper.register_composite_function(); to make user-defined functions known to PSI4. psi4.driver.driver_cbs_helper.register_composite_function(func)[source]¶",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:31653,wrap,wrapper,31653,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,1,['wrap'],['wrapper']
Integrability,"] for atoms.; real (ndarray of bool) – (nat, ) Real/ghostedness for atoms.; elbl (ndarray of str) – (nat, ) Label with any tagging information from element spec.; fragment_separators (list of int) – (nfr - 1, ) list of atom indices at which to split geom into fragments.; fragment_charges (list of float) – (nfr, ) list of charge allocated to each fragment.; fragment_multiplicities (list of int) – (nfr, ) list of multiplicity allocated to each fragment.; molecular_charge (float) – total charge on system.; molecular_multiplicity (int) – total multiplicity on system.; comment (str, optional) – Additional comment for molecule.; provenance (dict of str) – Accumulated history of molecule, with fields “creator”, “version”, “routine”.; connectivity (list of tuples of int, optional) – (nbond, 3) list of (0-indexed) (atomA, atomB, bond_order) (int, int, double) tuples; EFP extension (this + units is minimal); fragment_files (list of str) – (nfr, ) lowercased names of efp meat fragment files.; hint_types ({‘xyzabc’, ‘points’}) – (nfr, ) type of fragment orientation hint.; geom_hints (list of lists of float) – (nfr, ) inner lists have length 6 (xyzabc; to orient the center) or; 9 (points; to orient the first three atoms) of the EFP fragment.; QMVZ extension (geom_unsettled replaces geom); geom_unsettled (list of lists of str) – (nat, ) all-string Cartesian and/or zmat anchor and value contents; mixing anchors, values, and variables.; variables (list of pairs) – (nvar, 2) pairs of variables (str) and values (float). May be incomplete. Raises; qcelemental.ValidationError – For most anything wrong. class qcelemental.ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.4;  · . PSI4. External API Objects. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external_apis-1.html:10478,message,message,10478,psi4manual/1.4.0/external_apis-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external_apis-1.html,2,['message'],['message']
Integrability,"] for atoms.; real (ndarray of bool) – (nat, ) Real/ghostedness for atoms.; elbl (ndarray of str) – (nat, ) Label with any tagging information from element spec.; fragment_separators (list of int) – (nfr - 1, ) list of atom indices at which to split geom into fragments.; fragment_charges (list of float) – (nfr, ) list of charge allocated to each fragment.; fragment_multiplicities (list of int) – (nfr, ) list of multiplicity allocated to each fragment.; molecular_charge (float) – total charge on system.; molecular_multiplicity (int) – total multiplicity on system.; comment (str, optional) – Additional comment for molecule.; provenance (dict of str) – Accumulated history of molecule, with fields “creator”, “version”, “routine”.; connectivity (list of tuples of int, optional) – (nbond, 3) list of (0-indexed) (atomA, atomB, bond_order) (int, int, double) tuples; EFP extension (this + units is minimal); fragment_files (list of str) – (nfr, ) lowercased names of efp meat fragment files.; hint_types ({‘xyzabc’, ‘points’}) – (nfr, ) type of fragment orientation hint.; geom_hints (list of lists of float) – (nfr, ) inner lists have length 6 (xyzabc; to orient the center) or; 9 (points; to orient the first three atoms) of the EFP fragment.; QMVZ extension (geom_unsettled replaces geom); geom_unsettled (list of lists of str) – (nat, ) all-string Cartesian and/or zmat anchor and value contents; mixing anchors, values, and variables.; variables (list of pairs) – (nvar, 2) pairs of variables (str) and values (float). May be incomplete. Raises; qcelemental.ValidationError – For most anything wrong. class qcelemental.ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  · ; 1.5;  · . PSI4. External API Objects. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/external_apis-1.html:10478,message,message,10478,psi4manual/1.5.0/external_apis-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/external_apis-1.html,2,['message'],['message']
Integrability,"] » ; Interfaces: Enhancing Psi4 Capabilities ». Interface to CFOUR by J. Stanton and J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; Psi4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by Psi4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If Psi4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for Psi4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through Ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:1138,interface,interface,1138,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['interface'],['interface']
Integrability,"]. from typing import Any, Dict, List, Optional; from psi4 import core, extras. [docs]; class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False; pass. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !-----",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:2479,message,message,2479,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"]. y(atom)[source]¶; y position of atom (0-indexed) in Bohr; >>> print H2OH2O.y(4); -0.706268134631. z(atom)[source]¶; z position of atom (0-indexed) in Bohr; >>> print H2OH2O.z(4); -1.43347254509. Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; File to. dictify_database_docstrings()[source]¶. drop_duplicates(seq)[source]¶; Function that given an array or array of arrays seq, returns an; array without any duplicate entries. There is no guarantee of which; duplicate entry is dropped. useful()[source]¶. Module with non-generic exceptions classes. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Molecule(psi4molstr=None)[source]¶; Class to store python extensions to the MoleculeLibmints class.; Multiple classes allows separation of libmints and extension methods. BFS()[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. auto_fragments()[source]¶; Detects fragments in an unfragmented molecule using BFS; algorithm. Returns a new Molecule in Cartesian, fixed-geom; (no variable values), no dummy-atom format. Any non-default; charge and multiplicity assigned to first fragment. format_molecule_for_molpro()[source]¶. format_mol",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:63623,message,message,63623,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['message'],['message']
Integrability,"].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' in kwargs:; # do_delta3 = True; # cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); # if cbs_delta3_wfn not in VARH.keys():; # raise ValidationError(""""""Requested DELTA3 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn)); #; # cbs_delta3_wfn_lesser = kwargs.get('delta3_wfn_lesser', cbs_delta2_wfn).lower(); # if not (cbs_delta3_wfn_lesser in VARH.keys()):; # raise ValidationError(""""""Requested DELTA3 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn_lesser)); #; # # Establish method for fourth delta correction energy; # if 'delta4_wfn' in kwargs:; # do_delta4 = True; # cbs_delta4_wfn = kwargs['delta4_wfn'].lower(); # if not (cbs_delta4_wfn in VARH.keys()):; # raise ValidationError('Requested DELTA4 method \'%s\' is not recognized. Add it to VARH in wrapper.py to procee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:32656,wrap,wrapper,32656,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,3,['wrap'],['wrapper']
Integrability,"]:; exp_per_am[am].append(self.shells[shell_per_am[am][Q] + first_shell].exp(K)). # Collect coefficients for each exp among all functions, zero otherwise; for Q in range(len(shell_per_am[am])):; K = 0; for ep in range(len(exp_per_am[am])):; if abs(exp_per_am[am][ep] - self.shells[shell_per_am[am][Q] + first_shell].exp(K)) < 1.0e-8:; coef_per_am[am].append(self.shells[shell_per_am[am][Q] + first_shell].original_coef(K)); if (K + 1) != self.shells[shell_per_am[am][Q] + first_shell].nprimitive():; K += 1; else:; coef_per_am[am].append(0.0). # Write number of exponents for each shell; for am in range(max_am_center + 1):; text += """"""%5d"""""" % (len(exp_per_am[am])); text += '\n\n'. for am in range(max_am_center + 1):; # Write exponents for each shell; for ep in range(len(exp_per_am[am])):; text += """"""%14.7f"""""" % (exp_per_am[am][ep]); if ((ep + 1) % 5 == 0) or ((ep + 1) == len(exp_per_am[am])):; text += '\n'; text += '\n'. # Write contraction coefficients for each shell; for ep in range(len(exp_per_am[am])):; for bf in range(len(shell_per_am[am])):; text += """"""%10.7f """""" % (coef_per_am[am][bf * len(exp_per_am[am]) + ep]); text += '\n'; text += '\n'. if out is None:; return text; else:; with open(out, mode='w') as handle:; handle.write(text). # <<< Misc. Methods >>>. [docs] def refresh(self):; """"""Refresh internal basis set data. Useful if someone has pushed; to shells. Pushing to shells happens in the BasisSetParsers, so; the parsers will call refresh(). This function is now defunct. """"""; raise FeatureNotImplemented('BasisSet::refresh'). @staticmethod; [docs] def make_filename(name):; """"""Converts basis set name to a compatible filename.; * @param basisname Basis name; * @return Compatible file name. """"""; # Modify the name of the basis set to generate a filename: STO-3G -> sto-3g; basisname = name. # First make it lower case; basisname = basisname.lower(). # Replace all '(' with '_'; basisname = basisname.replace('(', '_'). # Replace all ')' with '_'; basisname = basisname.rep",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html:39051,contract,contraction,39051,psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,1,['contract'],['contraction']
Integrability,"]; def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.array_equal`.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.array(computed); except Exception:; return return_handler(False, label, f""""""\t{label}: inputs not cast-able to ndarray."""""", return_message, quiet). if xptd.shape != cptd.shape:; return return_handler(; False,; label,; f""""""\t{label}: computed shape ({cptd.shape}) does not match ({xptd.shape})."""""",; return_message,; quiet,; ). isclose = np.asarray(xp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:6664,message,message,6664,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,6,['message'],['message']
Integrability,"]; for indx_job, job in enumerate(JOBS):; for menial in VARH[job['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); JOBS_EXT.append(dict(zip(f_fields, [temp_wfn, temp_portion, job['f_basis'], job['f_zeta'], 0.0]))). #instructions += """"""\n Full listing of computations to be obtained (required and bonus).\n""""""; #for mc in JOBS_EXT:; # instructions += """""" %12s / %-24s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); PsiMod.print_out(instructions). psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(PSIF_SCF_DB_MOS, True). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\nPsiMod.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); exec(commands). # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = PsiMod.get_variable(VARH[temp_wfn][menial]). PsiMod.clean(). psioh.set_specific_retention(PSIF_SCF_DB_MOS, False). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Results ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec(cbsbanners). # Insert obtained energies into the array that stores the cbs stages; for stage in GRAND_NEED:; for lvl in stage['d_need'].items():; MODELCHEM.append(lvl[1]). for job in JOBS_EXT:; if ((",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:71205,depend,dependent,71205,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,1,['depend'],['dependent']
Integrability,"]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; As of October 2018, only two explicit `deltaN_[wfn,basis,scheme]` sets of options are active; if more delta functions are required, use the `cbs_metadata` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/cbs-1.html:11131,wrap,wrapper,11131,psi4manual/1.3.2/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; As of October 2018, only two explicit `deltaN_[wfn,basis,scheme]` sets of options are active; if more delta functions are required, use the `cbs_metadata` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cbs-1.html:17143,wrap,wrapper,17143,psi4manual/1.4.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cbs-1.html,4,['wrap'],['wrapper']
Integrability,"][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; 1energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:14978,wrap,wrapper,14978,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,6,['wrap'],['wrapper']
Integrability,"][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful featur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:13447,wrap,wrapper,13447,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,4,['wrap'],['wrapper']
Integrability,"]][mc['f_wfn'] + mc['f_portion']]). # Expand listings to all that will be obtained; JOBS_EXT = []; for indx_job, job in enumerate(JOBS):; for menial in VARH[job['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); JOBS_EXT.append(dict(zip(f_fields, [temp_wfn, temp_portion, job['f_basis'], job['f_zeta'], 0.0]))). #instructions += """"""\n Full listing of computations to be obtained (required and bonus).\n""""""; #for mc in JOBS_EXT:; # instructions += """""" %12s / %-24s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); PsiMod.print_out(instructions). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec cbsbanners. # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\nPsiMod.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); exec commands. # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = PsiMod.get_variable(VARH[temp_wfn][menial]). PsiMod.clean(). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""PsiMod.print_out('\\n')\n""""""; cbsbanners += """"""banner(' CBS Results ')\n""""""; cbsbanners += """"""PsiMod.print_out('\\n')\n\n""""""; exec cbsbanners. # Insert obtained energies into the array that stores the cbs stages; for stage in GRAND_NEED:; for lvl in stage['d_need'].iteritems():; MODELCHEM.append(lvl[1]). for job in JOBS_EXT:; if ((lvl[1]['f_wfn'] == job['f_wfn']) and (lvl[1]['f_port",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:70012,depend,dependent,70012,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['depend'],['dependent']
Integrability,"]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:8898,message,message,8898,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" %; (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if (abs(expected.get(irrep, row, col) - c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:8799,message,message,8799,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"]¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type; Union[bool, Tuple[bool, str]]. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number of rows and columns for each irrep.; For comparing actual numerical contents, the matrices are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:18550,message,message,18550,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,2,['message'],['message']
Integrability,"_2`; * :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_karton_2`. :type corl_alpha: float; :param corl_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2` correlation; extrapolation to the corl stage. The supplied \alpha does not impact delta or any further stages. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. :type delta_alpha: float; :param delta_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed; :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2` correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different \alpha might; be more appropriate. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. * Combined interface; ; :type cbs_metadata: List[Dict]; :param cbs_metadata: |dl| autogenerated from above keywords |dr| || ``[{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}]`` || etc. This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. * ```wfn```: typically ```HF```, which is subsumed in correlated methods anyway.; * ```basis```: basis set, can be in a bracketed form (eg. ```cc-pv[tq]z```). | Other supported arguments for the first dictionary are:. * ```scheme```: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as ```basis```.; * ```alpha```: alpha for the above scheme, if the default is to be overriden; * ```options```: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both ```options``` and ```options_lo```. This is helpful for calculatin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:31048,interface,interface,31048,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,4,['interface'],['interface']
Integrability,"_A_FILE (TRANSQT); TRANSQT — Alpha-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_B_FILE (TRANSQT); TRANSQT — Beta-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_FILE (TRANSQT); TRANSQT — Frozen-core file. Type: integer; Default: PSIF_OEI. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to CORE except for geometry optimizations, in which case READ becomes the default after the first geometry step. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:51520,depend,dependent,51520,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['depend'],['dependent']
Integrability,"_A_FILE (TRANSQT); TRANSQT — Alpha-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_B_FILE (TRANSQT); TRANSQT — Beta-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_FILE (TRANSQT); TRANSQT — Frozen-core file. Type: integer; Default: PSIF_OEI. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GUESS (SCF); SCF — The type of guess orbitals. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Values: UNIT, H0_BLOCK, DFILE, IMPORT; Defaul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:48292,depend,dependent,48292,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['depend'],['dependent']
Integrability,"_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, CheMPS2 has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. Previous bullet had details. To build PSI4 from source and use; Libint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whethe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/chemps2-1.html:1578,depend,dependent,1578,psi4manual/1.2.1/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/chemps2-1.html,4,['depend'],['dependent']
Integrability,"_DOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CIS_NO_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_OPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CIS_TOPDM_STATES (CPHF). (PLUGIN_FOCK), [1]. CISDCORRELATIONENERGY. CISDTCORRELATIONENERGY. CISDTOTALENERGY. CISDTQCORRELATIONENERGY. CISDTQTOTALENERGY. CISDTTOTALENERGY. CISTATE-AVERAGEDCORRELATIONENERGY. CISTATE-AVERAGEDTOTALENERGY. CITOTALENERGY. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() (in module util). compare_matrices() (in module util). compare_strings() (in module util). compare_values() (in module util). compare_vectors() (in module util). compilers. complete_basis_set(); . see cbs(); . complete_basis_set() (in module wrappers). COMPLEX_TOLERANCE (CCEOM). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() (in module wrappers). copy() (Table method). copy_file_from_scratch() (in module util). copy_file_to_scratch() (in module util). CORE (module), [1]. corl_xtpl_helgaker_2() (in module wrappers). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_REFERENCE (PSIMRCC). CORR_WFN (PSIMRCC). Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() (in module wrappers). CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. CPHF_TASKS (CPHF). (PLUGIN_FOCK), [1]. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (PLUGIN_DFADC), [1]. D. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). database(). adding new. available. output. setting keywords. database() (in module wrappers). db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DEBUG (CPHF). (GLOBALS). (JK), [1]. (PLUGIN_FOCK), [1]. (PLUGIN_OMEGA), [1]",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:8502,wrap,wrappers,8502,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['wrap'],['wrappers']
Integrability,"_Matrix: If dim1 is supplied must supply dim2 also""); ; dim1 = psi4.Dimension.from_list(dim1) ; dim2 = psi4.Dimension.from_list(dim2) . if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""); ; ret = self(name, dim1, dim2); ; start1 = 0; start2 = 0; for num, interface in enumerate(ret.array_interfaces()):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1 ; start2 += d2. return ret; ; # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); ret_view = np.asarray(ret); ret_view[:] = arr; return ret. elif arr_type == psi4.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError (""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""); ; dim1 = psi4.Dimension.from_list(dim1) ; ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.array_interfaces()):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1 . return ret; ; # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret_view = np.asarray(ret); ret_view[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def to_array(matrix, copy=True, dense=False):; """"""; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view.; """"""; if matrix.nirrep() > 1:. # We will copy when we make a large matrix; if dense:; copy = False. ret = []; for h in matrix.array_interfaces():; if 0 in h.__array_interface__[""shape""]:; ret.append(np.empty(shape = h.__array_interface__[""shape""])); else:; ret.append(np.array(h, copy=copy)). # Return the list of arrays; if dense is False:; return ret; ; # Build the dense matrix; if isinstance(matrix, psi4.Vector):; ret_type = '1D'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/numpy_helper.html:5645,interface,interface,5645,psi4manual/1.0.0/_modules/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/numpy_helper.html,1,['interface'],['interface']
Integrability,"_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_KAPPA¶. Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:7043,integrat,integration,7043,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,3,['integrat'],['integration']
Integrability,"_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF); SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF); SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:103978,integrat,integration,103978,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/detci-1.html:10669,interface,interface,10669,psi4manual/4.0b3/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html,6,['interface'],['interface']
Integrability,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; FROZEN_UOCC; MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Previous topic; Int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/detci-1.html:10646,interface,interface,10646,psi4manual/4.0b2/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/detci-1.html,2,['interface'],['interface']
Integrability,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/detci-1.html:12363,interface,interface,12363,psi4manual/1.2.1/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/detci-1.html,6,['interface'],['interface']
Integrability,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Pe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/detci-1.html:14909,interface,interface,14909,psi4manual/1.4.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html,9,['interface'],['interface']
Integrability,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which Psi4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. Table Of Contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:11156,interface,interface,11156,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['interface'],['interface']
Integrability,"__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class MissingMethodError(ValidationError):; """"""Error called when method not available. """""". def __init__(self, msg):; ValidationError.__init__(self, msg); self.message = '\nMissingMethodError: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; modulemsg = ""not available""; else:; modulemsg = f""not directable to QC_MODULE '{circs[5]}'"". if len(circs) == 7:; msg = f""""""{circs[0]}: Method '{circs[1]}' with {circs[2]} '{circs[3]}', FREEZE_CORE '{not circs[6]}', and REFERENCE '{circs[4]}' {modulemsg}""""""; else:; msg = f""""""{circs[0]}: Method '{circs[1]}' with {circs[2]} '{circs[3]}' and REFERENCE '{circs[4]}' {modulemsg}""""""; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -S. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for mor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:7048,message,message,7048,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -H. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {; ""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]; }. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt = option, modlist = mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join([ ""-DENABLE_{}=ON"".format(module); for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args = module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. Module code. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:5303,message,message,5303,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,2,['message'],['message']
Integrability,"__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nCSXException: %s\n\n' % (msg)). [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(*circs); PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class Dftd3Error(PsiException):; """""". """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; print('\nDftd3Error: %s\n\n' % (msg)). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Modu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html:2485,message,message,2485,psi4manual/1.0.0/_modules/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html,1,['message'],['message']
Integrability,"_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:21756,interface,interface,21756,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['interface'],['interface']
Integrability,"_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). """"""; kwargs = p4util.kwargs_lower(kwargs); metadata = _process_cbs_kwargs(kwargs); return_wfn = kwargs.pop('return_wfn', False); verbose = kwargs.pop('verbose', 0); ptype = kwargs.pop('ptype'). if ptype not in ['energy', 'gradient', 'hessian']:; raise ValidationError(""""""Wrapper complete_basis_set is unhappy to be calling; function '%s' instead of 'energy', 'gradient' or 'hessian'."""""" % ptype). optstash = p4util.OptionsState(['BASIS'], ['WFN'], ['WRITER_FILE_LABEL']). # Define some quantum chemical knowledge, namely what methods are subsumed in others. user_writer_file_label = core.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(); natom = molecule.natom(). if metadata[0][""wfn""] not in VARH.keys():; raise ValidationError(; """"""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (metadata[0][""wfn""])). if len(metadata) > 1:; for delta in metadata[1:]:; if delta[""wfn""] not in VARH.keys():; raise ValidationError(; """"""Requested higher %s method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (delta[""treatment""], delta[""wfn""])); if delta[""wfn_lo""] not in VARH.keys():; raise ValidationError(; """"""Requested lesser %s method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (delta[""treatment""], delta[""wfn_lo""])). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""core.print_out('\\n')\n""""""; cbsbanners += """"""p4util.banner(' CBS Setup: %s ' % label)\n""""""; cbsbanners += """"""core.print_out('\\n')\n\n""""""; exec(cbsbanners). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = [; 'd_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy', 'd_gradient', 'd_hessian', 'd_alpha'; ]; f_fields = ['f_wfn', 'f_basis', 'f_zeta', 'f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:46913,wrap,wrapper,46913,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). """"""; kwargs = p4util.kwargs_lower(kwargs); metadata = _process_cbs_kwargs(kwargs); return_wfn = kwargs.pop('return_wfn', False); verbose = kwargs.pop('verbose', 0); ptype = kwargs.pop('ptype'). if ptype not in ['energy', 'gradient', 'hessian']:; raise ValidationError(""""""Wrapper complete_basis_set is unhappy to be calling; function '%s' instead of 'energy', 'gradient' or 'hessian'."""""" % ptype). optstash = p4util.OptionsState(['BASIS'], ['WFN'], ['WRITER_FILE_LABEL']). # Define some quantum chemical knowledge, namely what methods are subsumed in others. user_writer_file_label = core.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(); natom = molecule.natom(). if metadata[0][""wfn""] not in VARH.keys():; raise ValidationError(; """"""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (metadata[0][""wfn""])). if len(metadata) > 1:; for delta in metadata[1:]:; if delta[""wfn""] not in VARH.keys():; raise ValidationError(; """"""Requested higher %s method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (delta[""treatment""], delta[""wfn""])); if delta[""wfn_lo""] not in VARH.keys():; raise ValidationError(; """"""Requested lesser %s method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" %; (delta[""treatment""], delta[""wfn_lo""])). # Build string of title banner; instructions = ""\n"" + p4util.banner(f"" CBS Setup{':' + label if label else ''} "", strNotOutfile=True) + ""\n""; core.print_out(instructions). # Call schemes for each portion of total energy to 'place orders' for calculations needed; d_fields = [; 'd_stage', 'd_scheme', 'd_basis', 'd_wfn', 'd_need', 'd_coef', 'd_energy', 'd_gradient', 'd_hessian', 'd_alpha'; ]; f_fields = ['f_wfn', 'f_basis', 'f_zeta', 'f_energy', 'f_gradient', 'f_hessian', 'f_options']; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html:48520,wrap,wrapper,48520,psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,2,['wrap'],['wrapper']
Integrability,"_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:2136,contract,contraction,2136,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html,2,['contract'],['contraction']
Integrability,"_df_basis_mp2 = PsiMod.get_option('DF_BASIS_MP2'); #user_df_basis_cc = PsiMod.get_option('DF_BASIS_CC'); #user_df_basis_sapt = PsiMod.get_option('DF_BASIS_SAPT'); #user_df_basis_elst = PsiMod.get_option('DF_BASIS_ELST'); b_user_wfn = PsiMod.has_global_option_changed('WFN'); user_wfn = PsiMod.get_global_option('WFN'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:63073,wrap,wrapper,63073,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"_group(self: psi4.core.Molecule, arg0: str) → None; Overrides symmetry from outside the molecule string. rotational_constants(self: psi4.core.Molecule, arg0: float) → psi4.core.Vector; Prints the rotational constants of the molecule. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule.; func - functional alias or None; dashlvl - functional type d2gr/d3zero/d3bj/d3mzero/d3mbj; dashparam - dictionary; dertype = derivative level. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html:28600,interface,interface,28600,psi4manual/1.1.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html,1,['interface'],['interface']
Integrability,"_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/quickadddatabase.html:3467,rout,route,3467,psi4manual/1.7.x/quickadddatabase.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/quickadddatabase.html,1,['rout'],['route']
Integrability,"_local_option('CCHBAR', 'WFN', 'CCSD_AT'); psi4.set_local_option('CCLAMBDA', 'WFN', 'CCSD_AT'); elif (lowername == 'cc2'):; psi4.set_local_option('TRANSQT2', 'WFN', 'CC2'); psi4.set_local_option('CCSORT', 'WFN', 'CC2'); psi4.set_local_option('CCENERGY', 'WFN', 'CC2'); elif (lowername == 'cc3'):; psi4.set_local_option('TRANSQT2', 'WFN', 'CC3'); psi4.set_local_option('CCSORT', 'WFN', 'CC3'); psi4.set_local_option('CCENERGY', 'WFN', 'CC3'); elif (lowername == 'eom-cc2'):; psi4.set_local_option('TRANSQT2', 'WFN', 'EOM_CC2'); psi4.set_local_option('CCSORT', 'WFN', 'EOM_CC2'); psi4.set_local_option('CCENERGY', 'WFN', 'EOM_CC2'); elif (lowername == 'eom-ccsd'):; psi4.set_local_option('TRANSQT2', 'WFN', 'EOM_CCSD'); psi4.set_local_option('CCSORT', 'WFN', 'EOM_CCSD'); psi4.set_local_option('CCENERGY', 'WFN', 'EOM_CCSD'); # Call a plain energy('ccenergy') and have full control over options, incl. wfn; elif(lowername == 'ccenergy'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') == 'DF' or psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; mints = psi4.MintsHelper(); mints.integrals(). psi4.transqt2(); psi4.ccsort(); psi4.ccenergy(). if (lowername == 'ccsd(at)' or lowername == 'a-ccsd(t)'):; 	psi4.cchbar(); 	psi4.cclambda(). optstash.restore(). [docs]def run_cc_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. """"""; optstash = p4util.OptionsState(; ['GLOBALS', 'DERTYPE'],; ['CCLAMBDA', 'WFN'],; ['CCDENSITY', 'WFN']). psi4.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; psi4.set_local_option('CCLAMBDA', 'WFN', 'CCSD'); psi4.set_local_option('CCDENSITY', 'WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; psi4.set_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/proc.html:24979,rout,routine,24979,psi4manual/4.0b5/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/proc.html,1,['rout'],['routine']
Integrability,"_multiplicities""],; zero_ghost_fragments=zero_ghost_fragments,; verbose=verbose,; ); del molinit[""fragment_charges""] # sometimes safe update is too picky about overwriting v_a_f_fragments values; del molinit[""fragment_multiplicities""]; update_with_error(molinit, processed). extern = domain == ""efp"". processed = validate_and_fill_frame(; extern=extern, fix_com=fix_com, fix_orientation=fix_orientation, fix_symmetry=fix_symmetry; ); update_with_error(molinit, processed). if verbose >= 2:; print(""RETURN FROM qcel.molparse.from_arrays(domain={})"".format(domain.upper())); pprint.pprint(molinit). if not np_out:; molinit = unnp(molinit). return molinit. def validate_and_fill_units(; name=None,; units=""Angstrom"",; input_units_to_au=None,; comment=None,; provenance=None,; connectivity=None,; always_return_iutau=False,; ):; molinit = {}. if name is not None:; molinit[""name""] = name. if comment is not None:; molinit[""comment""] = comment. def validate_provenance(dicary):; expected_prov_keys = [""creator"", ""routine"", ""version""]; try:; prov_keys = sorted(dicary.keys()); except AttributeError:; raise ValidationError(""Provenance entry is not dictionary: {}"".format(dicary)). if prov_keys == expected_prov_keys:; if not isinstance(dicary[""creator""], str):; raise ValidationError(; """"""Provenance key 'creator' should be string of creating program's name: {}"""""".format(; dicary[""creator""]; ); ); if not re.fullmatch(VERSION_PATTERN, dicary[""version""], re.VERBOSE):; raise ValidationError(; """"""Provenance key 'version' should be a valid PEP 440 string: {}"""""".format(dicary[""version""]); ); if not isinstance(dicary[""routine""], str):; raise ValidationError(; """"""Provenance key 'routine' should be string of creating function's name: {}"""""".format(; dicary[""routine""]; ); ); return True; else:; raise ValidationError(""Provenance keys ({}) incorrect: {}"".format(expected_prov_keys, prov_keys)). if provenance is None:; molinit[""provenance""] = {}; else:; if validate_provenance(provenance):; molinit[""provenance",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html:12479,rout,routine,12479,psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,3,['rout'],['routine']
Integrability,"_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able to be None or int, but hey, kids today...; if not isinstance(user_dertype, int):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype. if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; raise ValidationError('INTEGRAL_PACKAGE ERD does not play nicely with derivatives, so stopping.'). if (core.get_global_option('PCM')) and (dertype != 0):; core.print_out('\nPCM analytic gradients are not implemented yet, re-routing to finite differences.\n'); dertype = 0. if core.get_global_option(""RELATIVISTIC"") in [""X2C"", ""DKH""]:; core.print_out(""\nRelativistic analytic gradients are not implemented yet, re-routing to finite differences.\n""); dertype = 0. # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; elif (dertype == 1) and (method_name in procedures['gradient']):; pass; elif (dertype == 0) and (method_name in procedures['energy']):; pass; else:; alternatives = ''; alt_method_name = p4util.text.find_approximate_string_matches(method_name, procedures['energy'].keys(), 2); if len(alt_method_name) > 0:; alternatives = """""" Did you mean? %s"""""" % (' '.join(alt_method_name)). raise ValidationError(""""""Derivative method 'name' %s and derivative level 'dertype' %s are not available.%s""""""; % (method_name, str(dertype), alternatives)). dertype = min(dertype, derivatives[ptype]). return dertype. def _energy_is_invariant(gradient, stationary_criterion=1.e-2):; """"""Polls options and probes `gradient` to return whether current method; and system expected to be invariant to translations and rotations of; the coordinate system. """"""; stationar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:3573,rout,routing,3573,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['rout'],['routing']
Integrability,"_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("": "")"", ""["": ""]"", ""{"": ""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; message = (""Input error: extra %s"" % (ch)); raise TestComparisonError(message); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; message = (""Input error: %s closed with a %s"" % (opench, ch)); raise TestComparisonError(message); if len(parenstack) != 0:; all_matched = 0; if exit_on_error:; message = (""Input error: Unmatched %s"" % (parenstack.pop())); raise TestComparisonError(message). return all_matched. [docs]def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % (line). [docs]def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(\s*?)set\s+(?:([-,\w]+)\s+)?(\w+)[\s=]+\[.*', re.IGNORECASE); newinput = """"; while len(input_list):; line = input_list[0]; if set_re.match(line):; # We've found the start of a set matrix [ .... line - han",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html:17784,message,message,17784,psi4manual/1.0.0/_modules/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html,1,['message'],['message']
Integrability,"_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("": "")"", ""["": ""]"", ""{"": ""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; message = (""Input error: extra %s"" % (ch)); raise TestComparisonError(message); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; message = (""Input error: %s closed with a %s"" % (opench, ch)); raise TestComparisonError(message); if len(parenstack) != 0:; all_matched = 0; if exit_on_error:; message = (""Input error: Unmatched %s"" % (parenstack.pop())); raise TestComparisonError(message). return all_matched. def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % (line). def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(\s*?)set\s+(?:([-,\w]+)\s+)?(\w+)[\s=]+\[.*', re.IGNORECASE); newinput = """"; while len(input_list):; line = input_list[0]; if set_re.match(line):; # We've found the start of a set matrix [ .... line - hand it off for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html:16832,message,message,16832,psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,10,['message'],['message']
Integrability,"_rxn]:; actives += """"""core.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""core.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\ncore.set_memory_bytes(%s)\n\n"""""" % (core.get_memory()); for chgdopt in core.get_global_option_list():; if core.has_global_option_changed(chgdopt):; chgdoptval = core.get_global_option(chgdopt); #chgdoptval = core.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""core.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""core.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; pass; #raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'. if symmetry_override:; commands += """"""molecule.reset_point_group('c1')\n""""""; commands += """"""molecule.fix_orientation(True)\n""""""; commands += """"""molecule.fix_com(True)\n""""""; commands += """"""molecule.update_geometry()\n"""""". if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; commands += """"""core.set_global_option('REFERENCE', 'UHF')\n""""""; elif user_reference == 'RKS':; commands += """"""core.set_global_option('REFERENCE', 'UKS')\n"""""". commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). # all modes need to step through the reagents but all for different purposes; # continuous: defines necessary commands, executes energy(method) call, and collects results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html:19996,depend,dependent,19996,psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,2,['depend'],['dependent']
Integrability,"_scf_wfn not in VARH.keys():; raise ValidationError(""""""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_scf_wfn)). # Establish method for correlation energy; cbs_corl_wfn = kwargs.pop('corl_wfn', '').lower(); if cbs_corl_wfn:; do_corl = True. if do_corl:; if cbs_corl_wfn not in VARH.keys():; raise ValidationError(""""""Requested CORL method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_corl_wfn)). cbs_corl_wfn_lesser = kwargs.get('corl_wfn_lesser', cbs_scf_wfn).lower(); if cbs_corl_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:31789,wrap,wrapper,31789,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,2,['wrap'],['wrapper']
Integrability,"_type and wfn are freely changed, LOCALLY; # puream and df_basis_scf are freely changed, GLOBALLY; # PsiMod.scf() and PsiMod.mp2() are run. optstash.restore(). Note; Some options (BASIS, BASIS-like, and PUREAM) should always; be used globally (no module argument) with the OptionsState objects.; Similarly, within the body of the function, they should always be; queried and set globally. Same for FREEZE_CORE. Setting-Up Calculations; The other types of options calls in python driver functions are (a); those to query what option value an upcoming c++ module is going to use; (determined by user and defaults) and (b) those to set options to govern; the course of a procedure. Finding out the intended option value for a; molecule should employ the get_option() command; (and has_option_changed() for has_changed), which; (newly) requires a module for scope. (Previously, this command used the; “active module”, which isn’t well-defined in the context of the python; driver, and consequently, the command gave variable results, depending; on whether a get_local/set_local command had been previously executed to; define the active module.); if (PsiMod.get_option('SCF', 'REFERENCE') == 'RHF'):; PsiMod.set_local_option('SCF', 'REFERENCE', 'RKS'). Setting of options in python should use the; set_local_option() command. Using the local, rather; than global, scope will ensure that the newly set option will be used by; the module. Otherwise, if the python procedure set in the global scope; and the user had happened to set that option in local scope, the local; user option will take precedence against the programmer’s intent.; (Anyone who has heard advice to “query local, set global” should forget; that and follow the new scheme outlined here.). PsiMod Options Commands¶. PsiMod.get_global_option(keyword)¶; Given a string of keyword name, returns the value associated with the; keyword from the global options. Returns error if keyword is not; recognized. PsiMod.get_local_option(module, keyw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html:10480,depend,depending,10480,psi4manual/4.0b4/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optionshandling-1.html,2,['depend'],['depending']
Integrability,"_wfn'] = 'mp2'; name = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). [docs]def allen_focal_point(name='mp2', **kwargs):; r""""""Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; :py:func:`~wrappers.complete_basis_set` to evaluate the following; expression. SCF employs a three-point extrapolation according; to :py:func:`~wrappers.scf_xtpl_helgaker_3`. MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; :py:func:`~wrappers.corl_xtpl_helgaker_2`. CCSDT and CCSDT(Q); are plain deltas. This wrapper requires :ref:`Kallay's MRCC code <sec:mrcc>`. .. math:: E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. # SCF; if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'cc-pV[Q56]Z'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = scf_xtpl_helgaker_3. # delta MP2 - SCF; if not ('corl_wfn' in kwargs):; kwargs['corl_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:3802,wrap,wrapper,3802,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['wrap'],['wrapper']
Integrability,"_{at}}; \frac{C_n^{ij}}{(R_{ij})^n} f_{damp}(R_{ij})\]. \[f_{damp}(R_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}\]; A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature. Running DFTD3 or DFTD4¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the DFTD3 or DFTD4 programs. Once installed, the; dftd3/PSI4 and dftd4/PSI4 interfaces are transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the dftd4 program. Variants of dispersion corre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dftd3-1.html:4701,interface,interfaces,4701,psi4manual/1.5.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dftd3-1.html,6,['interface'],"['interfaced', 'interfaces']"
Integrability,"_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; For SAPT(DFT), the SAPT expansion is truncated at the same level of SAPT0, but the zeroth-order Hamiltonian is chosen to be \(K_A+K_B\), the monomer Kohn-Sham operators, instead of the Fock operators. The dispersion term needs to be computed with orbital relaxation for the result to be reasonable, and this is possible by computing dispersion energy through coupled frequency-dependent density susceptibility (FDDS). The exchange-dispersion term is estimated by scaling the uncoupled exchange-dispersion energy. (6)¶\[E_{SAPT(DFT)} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp,resp}^{(20)} + E_{exch-disp,resp}^{(20)}(est.) + \delta_{HF}^{(2)}\]. \[E_{disp,resp}^{(20)} = -\frac{1}{2\pi}\int_0^\infty d\omega \int d\mathbf{r}_A d\mathbf{r}'_A d\mathbf{r}_B d\mathbf{r}'_B \frac{1}{\left|\mathbf{r}_A-\mathbf{r}_B\right|}\frac{1}{\left|\mathbf{r}'_A-\mathbf{r}'_B\right|}\chi^A_{coup}\left(\mathbf{r}_A,\mathbf{r}'_A|i\omega\right)\chi^B_{coup}\left(\mathbf{r}_B,\mathbf{r}'_B|i\omega\right)\]. \[\chi_{coup}\left(\mathbf{r},\mathbf{r}'|\omega\right) = \chi_0\left(\mathbf{r},\mathbf{r}'|\omega\right) + \int d\omega d\mathbf{r}_1 d\mathbf{r}_2 \chi_0\left(\mathbf{r},\mathbf{r}_1|\omega\right)\left[\frac{1}{r_{12}} + f_{xc}\left(\mathbf{r}_1,\mathbf{r}_2,\",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sapt-1.html:4133,depend,dependent,4133,psi4manual/1.4.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sapt-1.html,9,['depend'],['dependent']
Integrability,"_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}\]; A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the DFTD3 or DFTD4 programs. Once installed, the; dftd3/PSI4 and dftd4/PSI4 interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Despite different defaults in these programs when run independently,; when run through PSI4 as EmpiricalDispersion engine, each should; produce the same result. Moreover, PSI4‘s own defaults and aliases; are unchanged by the new engines, so -D continues to mean -D2,; -D3 continues to mean zero-damping without 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:6242,interface,interfaces,6242,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['interface'],"['interfaced', 'interfaces']"
Integrability,"_{ij}) = \frac{1}{1 + 6 (R_{ij}/(s_{r,n} R_0^{ij}))^{- \alpha_n}}\]; A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the DFTD3 or DFTD4 programs. Once installed, the; dftd3/PSI4 and dftd4/PSI4 interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn’t deliberately disabled.; Despite different defaults in these programs when run independently,; when run through PSI4 as EmpiricalDispersion engine, each should; produce the same result. Moreover, PSI4‘s own defaults and aliases; are unchanged by the new engines, so -D continues to mean -D2,; -D3 continues to mean zero-damping without 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dftd3.html:6356,interface,interfaces,6356,psi4manual/1.9.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dftd3.html,4,['interface'],"['interfaced', 'interfaces']"
Integrability,"`-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; resp etc. instead of psi4-rt.; As of PSI4 v1.7, the psi4-rt package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like psi4/devtools/conda-envs .; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Win",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/conda.html:6445,depend,dependencies,6445,psi4manual/1.7.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/conda.html,4,['depend'],['dependencies']
Integrability,"`` || etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:43722,depend,dependent,43722,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['depend'],['dependent']
Integrability,"`conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACK",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:17116,depend,dependencies,17116,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"`conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:17345,depend,dependencies,17345,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['depend'],['dependencies']
Integrability,"`conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${Ad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:16801,depend,dependencies,16801,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"`getconf _NPROCESSORS_ONLN`; # >>> make install. # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gdma, Libint, PCMSolver, pybind11, simint; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:9445,depend,dependencies,9445,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(); psi4.set_global_option(""BASIS"", psi4.get_global_option(""BASIS"")). df_ints_io = psi4.get_global_option('DF_INTS_IO'); # inquire if above at all applies to dfmp2 or just scf; psi4.set_global_option('DF_INTS_IO', 'SAVE'); psioh = psi4.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). psi4.print_out(""\",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:19362,wrap,wrapper,19362,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"a given amount. Does not affect the underlying molecule object. n_ecp_core(*args, **kwargs)¶; Overloaded function. n_ecp_core(self: psi4.core.BasisSet) -> int. Returns the total number of core electrons associated with all ECPs in this basis. n_ecp_core(self: psi4.core.BasisSet, arg0: str) -> int. Returns the number of core electrons associated with any ECP on the specified atom type for this basis set. n_ecp_shell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of ECP shells on a given center. n_frozen_core(self: psi4.core.BasisSet, arg0: str, arg1: psi4.core.Molecule) → int¶; Returns the number of orbital (non-ECP) frozen core electrons. For a given molecule and FREEZE_CORE, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_on_center(self: psi4.core.BasisSet, c: int, i: int) → int¶; Return the i’th shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th she",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.basisset.html:5670,depend,depending,5670,psi4manual/1.4.0/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.basisset.html,1,['depend'],['depending']
Integrability,"a given amount. Does not affect the underlying molecule object. n_ecp_core(*args, **kwargs)¶; Overloaded function. n_ecp_core(self: psi4.core.BasisSet) -> int. Returns the total number of core electrons associated with all ECPs in this basis. n_ecp_core(self: psi4.core.BasisSet, arg0: str) -> int. Returns the number of core electrons associated with any ECP on the specified atom type for this basis set. n_frozen_core(self: psi4.core.BasisSet, arg0: str, arg1: psi4.core.Molecule) → int¶; Returns the number of orbital (non-ECP) frozen core electrons. For a given molecule and FREEZE_CORE, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int¶; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int¶; Return the atomic center for the i’th s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:5593,contract,contractions,5593,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,4,['contract'],['contractions']
Integrability,"a installation, conda remove libint. Source. Note that PSI4 uses v1. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint — CMake variable to force detecting pre-built Libint and not falling back on internal build; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. Build bundled shared library with AM=6. >>> cmake -DMAX_AM_ERI=6 -DBUILD_SHARED_LIBS=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/libint-1.html:2623,depend,dependencies,2623,psi4manual/1.3.2/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libint-1.html,2,['depend'],['dependencies']
Integrability,"a package can; be obtained through conda install gcp -c psi4 or conda install; psi4-rt -c psi4. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4. To remove a conda installation, conda remove gcp. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp) must be; found in your PSIPATH or PATH (in that order). If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672] and “PBEh-3c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gcp-1.html:1442,interface,interface,1442,psi4manual/1.2.1/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gcp-1.html,4,['interface'],['interface']
Integrability,"a(). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma()¶; Code author: Anthony J. Stone, Andrew C. Simmonett; Section author: Andrew C. Simmonett; Module: Keywords, PSI Variables, GDMA_INTERFACE. Installation¶; Binary. GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gdma has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gdma can be obtained through conda install gdma.; Then enable it as a feature with ENABLE_gdma,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gdma and activate dependent code. To remove a conda installation, conda remove gdma. Source. If using PSI4 built from source and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() rout",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/gdma-1.html:1155,depend,dependent,1155,psi4manual/1.1.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/gdma-1.html,2,['depend'],['dependent']
Integrability,"a_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCFT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCFT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:2305,depend,depends,2305,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,6,['depend'],['depends']
Integrability,"abel). [docs]; def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""; def moldenfile_to_string(fname):; with open(fname, 'r') as fn:; molden_string = fn.read(); return molden_string. ref = moldenfile_to_string(expected).splitlines(); calc = moldenfile_to_string(computed).splitlines(); if len(ref) != len(calc):; raise ValidationError(f""These two molden files have different lengths...\n""). high_accuracy = atol_exponent; index = 0; max_len = len(calc); tests = []; section = 0. geom_re = re.compile(r'^\s*(\w*)\s+(\d+)\s+(\d+)\s+(-?\d+.\d+)\s+(-?\d+.\d+)\s+(-?\d+.\d+)\s*$'); basis_header_re = re.compile(r'^\s*([s,p,d,f,g])\s*(\d*)\s*(\d*.\d*)\s*$'); s1_re = re.compile(r'^\s*(\d+.?\d*)\s+(\d+.?\d*)$'); s2_re = re.compile(r'^\s*(\d+)\s+(-?\d+.\d+[e,E][\+,-]\d+)\s*$'); sym_re = re.compile(r'^\s*Sym\s*=\s*(\w*)\s*$'); energy_re = re.compile(r'^\s*Ene\s*=\s*(-?\d*.?\d*[e,E]?\+?-?\d*)\s*$'); spin_re = re.compile(r'^\s*Spin\s*=\s*(\w*)\s*$'); occ_re = re.compile(r'^\s*Occup\s*=\s*(-?\d*.\d*[e,E]?-?\+?\d*)\s*$'). for i in range(max_len):; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:6180,message,messages,6180,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,3,['message'],['messages']
Integrability,"abel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if not assignments:; # case with no [basname] markers where whole block is contents of gbs file; mol.set_basis_all_atoms(name, role=role); basstrings[basname(name)] = basblock[0]; else:; message = (; ""Conflicting basis set specification: assign lines present but shells have no [basname] label.""; """"); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; basstrings[basname(basblock[idx])] = basblock[idx + 1]. return basstrings. anon.__name__ = 'basisspec_psi4_yo__' + cleanbas; qcdb.libmintsbasisset.basishorde[name.upper()] = anon; if set_option:; core.set_global_option(key, name). core.OEProp.valid_methods = [; 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES',; 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS'; ]. ## Option helpers. def py_psi_set_global_option_python(key, EXTERN):; """"""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""; if (key != ""EXTERN""):; raise ValidationError(""Options: set_global_option_python does not recognize keyword %s"" % key). if EXTERN == None:; core.EXTERN = None; core.set_global_option(""EXTERN"", False); elif isinstance(EXTERN, core.ExternalPotential):; # Well this is probably the worst hack I have done, thats saying something; core.EXTERN = EXTERN; core.set_global_option(""EXTERN"", True); else:; raise ValidationError(""Options: set_global_option_python can either be a NULL or External Potential object""). core.set_global_option_python = py_psi_set_global_option_python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.2.1;  · . PSI4. Module code. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/python_helpers.html:10455,rout,routing,10455,psi4manual/1.2.1/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/python_helpers.html,1,['rout'],['routing']
Integrability,"able is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the Psi4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the Psi4 suite.; As seen in the neon dimer example from the A Psi4 Tutorial section,; the _nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,:; cp('mp2'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; Psi4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerful feature of Psi4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2','S22',cp=1,benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:14307,wrap,wrapper,14307,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['wrap'],['wrapper']
Integrability,"abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); psi4.print_out(""The Failed Test Matrices\n""); psi4.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); psi4.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; psi4.print_out(""The computed vector\n""); computed.print_out(); psi4.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label). [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:7597,message,message,7597,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['message'],['message']
Integrability,"ac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]\end{split}\]; Here, \(T\) is the noninteracting quasiparticle kinetic energy operator,; \(V\) is the nucleus-electron attraction potential, \(D^{\mathrm{T}}\); is the total electron density matrix, and \(E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]\) is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence \(E_{\mathrm{xc}}\) is often referred to; as simply the exchange-correlation functional (exchange and correlation, not; just exchange-type correlation).; In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; \(\rho_\alpha\) or \(\rho_\beta\),. \[\rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1)\]; The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; \(\gamma_{\alpha\alpha}\), \(\gamma_{\alpha\beta}\) or; \(\gamma_{\beta\beta}\) to build an inhomogeneity; parameter. \[\gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1)\]. \[\gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1)\]; where,. \[\nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1)\]; GGA functionals are essentially",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:2879,depend,depending,2879,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,15,['depend'],['depending']
Integrability,"ace steps not needed; # goto GH:psi4/psi4 > Settings > Branches > 1.3.x > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/4385008 # !Varies!; # uncheck ""Include administrators"" and Save changes. >>> git push upstream 1.3.x; >>> git push upstream v1.3.1. # re-engage ""Include administrators"" protections. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev, psi4-docs.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; Nightly conda-builds work from master psi4. (Postrelease “practice” works from 1.N.x psi4.). Instead, switch source/git_tag from master to tag (e.g., v1.3rc1) in:. psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L. In cbcy, edit psi4ver to “v”-less tag. For releases and postreleases (not prereleases), in conda_build_config.yaml, edit ltrtver to a new non-dev label (probably a ditto) matching the release (e.g., “1.3”); Set kitandkapoodle.py to the normal *** stack. Should be (psi4, psi4-rt, psi4-d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:8662,depend,dependencies,8662,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['depend'],['dependencies']
Integrability,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; 1; 2; 3; 4RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/db-1.html:6550,wrap,wrapper,6550,psi4manual/1.3.2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/db-1.html,2,['wrap'],['wrapper']
Integrability,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/db-1.html:6565,wrap,wrapper,6565,psi4manual/1.4.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html,9,['wrap'],['wrapper']
Integrability,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; throu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/db-1.html:6316,wrap,wrapper,6316,psi4manual/1.0.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/db-1.html,2,['wrap'],['wrapper']
Integrability,"action. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. coord(self, arg0); Returns ith coordinate this shell is on. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. coord(self: psi4.core.GaussianShell, arg0: int) → float¶; Returns ith coordinate this shell is on. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html:1405,contract,contraction,1405,psi4manual/master/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html,1,['contract'],['contraction']
Integrability,"actor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_OPTIMIZATION (OPTKING)¶OPTKING — Save OptKing’s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:217456,integrat,integration,217456,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,4,['integrat'],['integration']
Integrability,"actory=dict, description=""The keywords to use in the computation.""); computed: bool = Field(False, description=""Whether quantum chemistry has been run on this task.""); result: Any = Field(default_factory=dict, description="":py:class:`~qcelemental.models.AtomicResult` return.""); result_id: Optional[str] = Field(None, description=""The optional ID for the computation.""). class Config(qcel.models.ProtoModel.Config):; pass. [docs] @validator(""basis""); def set_basis(cls, basis):; return basis.lower(). [docs] @validator(""method""); def set_method(cls, method):; return method.lower(). [docs] @validator(""keywords""); def set_keywords(cls, keywords):; return copy.deepcopy(keywords). [docs] def plan(self) -> AtomicInput:; """"""Form QCSchema input from member data."""""". atomic_model = AtomicInput(**{; ""molecule"": self.molecule.to_schema(dtype=2),; ""driver"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": {; ""stdout"": True,; },; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs] def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. try:; # QCFractal v0.15.8; from qcportal.models import KeywordSet, Molecule; qca_next_branch = False; except ImportError:; # QCFractal `next`; from qcelemental.models import Molecule; qca_next_branch = True. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). if not qca_next_branch:; # QCFractal v0.15.8. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. r = client.add_compute(""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:3696,protocol,protocols,3696,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,1,['protocol'],['protocols']
Integrability,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; Recently, we have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so this procedure will fail. In these; cases, you will see an error message of the form:; RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser:; Unable to find the basis set for HE. This failure can be fixed by either setting DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or by setting DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (). The overall SOSCF operation is; thus broken down into micro- and macroitera",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/scf-1.html:21026,message,message,21026,psi4manual/1.0.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/scf-1.html,2,['message'],['message']
Integrability,"ad and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4man",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:5835,message,message,5835,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['message'],['message']
Integrability,"addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/Windows. Substitute desired python version: 2.7, 3.5, 3.6. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:8936,depend,dependencies,8936,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,2,['depend'],['dependencies']
Integrability,"addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/Windows. Substitute desired python version: 3.5, 3.6, 3.7. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the executable add-ons (e.g., dftd3); >>> conda install numpy psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:8936,depend,dependencies,8936,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['depend'],['dependencies']
Integrability,"adeoff is rough here. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cbs-xtpl-func; optimization with method defined via cbs. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cubeprop; RHF orbitals and density for water. dft-smoke; DFT Functional Smoke Test. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-ecp; Water-Argon complex with ECP present; check of energies and forces. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. fci-h2o; 6-31G H2O Test FCI Energy Point. extern1; External potential calculation involving a TIP3P water and a QM water. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:6010,wrap,wrappers,6010,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['wrap'],['wrappers']
Integrability,"aders (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5063,depend,dependencies,5063,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"adient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13559,depend,depend,13559,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"ads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; MPFR https://www.mpfr.org/. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:5657,depend,dependency,5657,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['depend'],['dependency']
Integrability,"age SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name #TODO; kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name #.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; func = kwargs.pop('db_func', kwargs.pop('func', energy)); kwargs['db_func'] = func; # Bounce to CP if bsse kwarg (someday); if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""""""Database: Cannot specify bsse_type for database. Use the cp keyword withing database instead.""""""). allowoptexceeded = kwargs.get('allowoptexceeded', False); optstash = p4util.OptionsState(; ['WRITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; db_paths = []; db_paths.append(os.getcwd()); db_paths.extend(os.environ.get('PSIPATH', '').split(os.path.pathsep)); db_paths.append(os.path.join(core.get_datadir(), 'databases')); db_paths.append(os.path.dirname(__file__));",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:8286,wrap,wrappers,8286,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,8,['wrap'],['wrappers']
Integrability,"age SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name #TODO; kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name #.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; func = kwargs.pop('db_func', kwargs.pop('func', energy)); kwargs['db_func'] = func; # Bounce to CP if bsse kwarg (someday); if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""""""Database: Cannot specify bsse_type for database. Use the cp keyword withing database instead.""""""). allowoptexceeded = kwargs.get('allowoptexceeded', False); optstash = p4util.OptionsState(; ['WRITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; psidatadir = core.get_datadir(); #nolongerpredictable psidatadir = __file__ + '/../..' if psidatadir is None else psidatadir; libraryPath = ':' + os.path.abspath(psidatadir) + '/databases'; driver_loc = os.path.dirname(os.p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html:8365,wrap,wrappers,8365,psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html,1,['wrap'],['wrappers']
Integrability,"age SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name #TODO; kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name #.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; func = kwargs.pop('db_func', kwargs.pop('func', energy)); kwargs['db_func'] = func; # Bounce to CP if bsse kwarg (someday); if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""""""Database: Cannot specify bsse_type for database. Use the cp keyword withing database instead.""""""). optstash = p4util.OptionsState(; ['WRITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; psidatadir = os.environ.get('PSIDATADIR', None); #nolongerpredictable psidatadir = __file__ + '/../..' if psidatadir is None else psidatadir; libraryPath = ':' + os.path.abspath(psidatadir) + '/databases'; driver_loc = os.path.dirname(os.path.abspath(__file__)); dbPath = os.path.a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html:8354,wrap,wrappers,8354,psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,1,['wrap'],['wrappers']
Integrability,"age SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name #TODO; kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name #.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; func = kwargs.pop('db_func', kwargs.pop('func', energy)); kwargs['db_func'] = func; # Bounce to CP if bsse kwarg (someday); if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""""""Database: Cannot specify bsse_type for database. Use the cp keyword withing database instead.""""""). optstash = p4util.OptionsState(; ['WRITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; psidatadir = os.environ.get('PSIDATADIR', None); psidatadir = __file__ + '/../..' if psidatadir is None else psidatadir; libraryPath = ':' + os.path.abspath(psidatadir) + '/databases'; dbPath = os.path.abspath('.') + \; ':' + ':'.join([os.path.abspath(x) for x in os.environ.get('P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:8371,wrap,wrappers,8371,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['wrap'],['wrappers']
Integrability,"agonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. The full list is provided in appendix ADC; and many more sample input files can be found in the adc and adcc; subfolders of psi4/samples.; Note, that not all keywords are supported by all backends.; Switching between ADC backends.; Psi4 currently defaults to the built-in implementation for all ADC(2) energy calculations.; You can explicitly set the QC_MODULE option to 'adcc'; enforce using adcc also for this case. Interface to adcc¶; Code author: Michael F. Herbst; Section author: Michael F. Herbst; For most implemented ADC methods PSI4 relies; on an interface to the adcc python package.; The approach of adcc is to directly diagonalise the; ADC matrix \(\mathbf{A}\) in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; FREEZE_CORE and NUM_FROZEN_UOCC; are supported with all ADC methods using the adcc backend.; Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the me",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/adc-1.html:8796,interface,interface,8796,psi4manual/1.4.0/adc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/adc-1.html,5,['interface'],['interface']
Integrability,"ai:2010:6615]. [9][Pernal:2009:263201]. [10][Podeszwa:2010:550]. [11]Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); 1energy('bp86-d'). DFT-D3BJ optimization with default parameters; 1optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; 1; 2set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); 1; 2set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4’s libdisp; 1energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. table of contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dftd3-1.html:7997,interface,interface,7997,psi4manual/1.3.2/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dftd3-1.html,2,['interface'],['interface']
Integrability,"aika code. There are a; number of reasons motivating this switch. For methods requiring; potentials and fields evaluated at many external sites, such as PCM and; polarizable embedding, the efficiency of the one electron integrals can be rate; limiting. We also started to introduce integral screening, and it is important; to balance the screening used for one- and two-electron terms carefully, so this; is a good opportunity to re-evaluate the code. Finally, given the complexity; of the OS recursion code, the switch to an external library leaves a more; compact codebase to maintain. The one electron integrals which are not provided by Libint2; are now handled by a new implementation of the McMurchie-Davidson (M-D) algorithm,; leading to removal of the OS code in version 1.6. An overview of the one electron integrals; is shown in table Algorithms used for One Electron Integrals, together with the implementation they use.; The tips below serve as a guide to what changed,; why it changed, and how to interface with PSI4’s one-electron integral; machinery now. Calling compute_shell(int P, int Q)¶; The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing compute_shell(int P, int Q) method for the; caller; this then looked up the appropriate GaussianShell objects that were; passed into the corresponding (private) compute_pair(GaussianShell &s1,; GaussianShell &s2) function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the compute_shell(int P, int Q) simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private compute_pair() routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/prog_integrals.html:11798,interface,interface,11798,psi4manual/1.6.x/prog_integrals.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/prog_integrals.html,5,['interface'],['interface']
Integrability,"ain_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6008,depend,dependency,6008,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['depend'],['dependency']
Integrability,"ains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. (7)¶\[D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}\]; which is constructed from semicanonical amplitudes:. (8)¶\[\begin{split}t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}.\end{split}\]; PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations¶; Some practical notes on running the code:. DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions.; The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; PNO_CONVERGENCE keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]. For non-covalent interactions TIGHT is highly recommended.; The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant.; Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to; longer calculations.; All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size.; DLPNO-MP2 is not symmetry aware. This should not be a concern for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dlpnomp2-1.html:6813,depend,depends,6813,psi4manual/1.5.0/dlpnomp2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dlpnomp2-1.html,7,['depend'],['depends']
Integrability,"aise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l = data.find(tag, l) + len(tag); #if l == 4:; # break; cid = int(data[l:data.find(b""\n"", l)]); l = data.find(b'\t', l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj); i += 1. print(""\tFound %d results"" % (len(ans))); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print(e.message). for r in obj:; print(r); print(r.getMoleculeString()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/pubchem.html:5251,message,message,5251,psi4manual/4.0b3/_modules/pubchem.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/pubchem.html,1,['message'],['message']
Integrability,"aise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l = data.find(tag, l) + len(tag); #if l == 4:; # break; cid = int(data[l:data.find(b""\n"", l)]); l = data.find(b'\t', l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj); i += 1. print(""\tFound %d results"" % (len(ans))); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print(e.message). for r in obj:; print(r); print(r.getMoleculeString()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html:5251,message,message,5251,psi4manual/4.0b4/_modules/pubchem.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/pubchem.html,1,['message'],['message']
Integrability,"aise; molstr = ""%d\n%s\n%s"" % (self.natom, self.iupac, temp); return molstr. [docs] def getMoleculeString(self):; """"""Function to obtain a molecule string through; getCartesian() or fail.; """"""; try:; return self.getCartesian(); except Exception as e:; return e.message. [docs]def getPubChemResults(name):; """"""Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. """"""; url = 'http://www.ncbi.nlm.nih.gov/sites/entrez?db=pccompound&term=%s&format=text' % quote(name); print(""\tSearching PubChem database for %s"" % (name)); try:; loc = urlopen(url); except URLError as e:; msg = ""\tPubchemError\n%s\n\treceived when trying to open\n\t%s\n"" % (str(e), url); msg += ""\tCheck your internet connection, and the above URL, and try again.\n""; raise Exception(msg); data = loc.read(). ans = []; l = data.find(b""<pre>""); l = data.find(b""\n"", l); i = 1; while(True):; l = data.find(str(""%d. "" % i).encode(sys.getdefaultencoding()), l); if l == -1:; break; tag = b""MF: ""; l = data.find(tag, l) + len(tag); mf = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""IUPAC name: ""; l = data.find(tag, l) + len(tag); iupac = data[l:data.find(b'\n', l)].decode(sys.getdefaultencoding()); tag = b""CID:""; l = data.find(tag, l) + len(tag); #if l == 4:; # break; cid = int(data[l:data.find(b""\n"", l)]); l = data.find(b'\t', l) + 1. pubobj = PubChemObj(cid, mf, iupac); ans.append(pubobj); i += 1. print(""\tFound %d results"" % (len(ans))); return ans. if __name__ == ""__main__"":; try:; obj = getPubChemResults(""1-methoxy-4-[(E)-prop-1-enyl]benzene""); #obj = getPubChemResults(""sodium benzenesulfonate""); except Exception as e:; print(e.message). for r in obj:; print(r); print(r.getMoleculeString()). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/pubchem.html:6071,message,message,6071,psi4manual/4.0b5/_modules/pubchem.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/pubchem.html,1,['message'],['message']
Integrability,"aking it ideal for; large systems and multi-core CPUs. See COSX Exchange for more information. LINKAn implementation of the linear-scaling “Linear Exchange” (LinK); algorithm described in [Ochsenfeld:1998:1663]. The LINK algorithm provides; many of the benefits of integral-direct SCF algorithms, including no disk I/O,; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. SNLINKAn algorithm based on the “seminumerical Linear Exchange” (sn-LinK); approach described in [Laqua:2020:1456], SNLINK is only available if PSI4; is compiled with the GauXC library, described in [Williams-Young:2023:234104].; Algorithmically, SNLINK is very similar to COSX, differing primarily in screening of; the analytic 3-center integrals. In terms of implementation, SNLINK is more efficient,; owing to more highly-optimized integral contraction kernels; and supports execution; on Graphics Processing Units (GPUs). See Seminumerical Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:30779,contract,contraction,30779,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['contract'],['contraction']
Integrability,"al Cholesky filtered SCF. rasci-h2o; RASCI/6-31G** H2O Energy Point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. props4; Electrostatic potential and electric field evaluated on a grid around water. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cepa1; cc-pvdz H2O Test CEPA(1) Energy. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. sapt-sf1; Tests the Psi4 SF-SAPT code. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. scf-guess-read2; Test if the the guess read in the same basis converges. cc13d; Tests analytic CC2 gradients. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:3865,depend,dependent,3865,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['depend'],['dependent']
Integrability,"al Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; from __future__ import absolute_import; from __future__ import print_function; import sys; import math; import re; import os; import string; from .vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label, exitonfail=True):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* > 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; thresh = 10 ** -digits if digits > 1 else digits; if abs(expected - computed) > thresh:; print(""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if exitonfail:; sys.exit(1); else:; return; if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f)\n"" % (label, computed, expected)); print(""\tprobably because the computed value is nan.""); if exitonfail:; sys.exit(1); else:; return; _success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:1834,message,message,1834,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['message'],['message']
Integrability,"al Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". __all__ = [; ""ConvergenceError"",; ""MissingMethodError"",; ""ManagedMethodError"",; ""OptimizationConvergenceError"",; ""ParsingError"",; ""PastureRequiredError"",; ""PsiException"",; ""SCFConvergenceError"",; ""TDSCFConvergenceError"",; ""TestComparisonError"",; ""UpgradeHelper"",; ""ValidationError"",; ""docs_table_link"",; ""sanitize_method"",; ]. from typing import Any, Dict, List, Optional; from psi4 import core, extras. [docs]class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:1817,message,message,1817,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"al basis functions or not; self.puream = None. # <<< Arrays >>>. # The number of primitives (and exponents) in each shell; self.n_prim_per_shell = None; # The first (Cartesian) atomic orbital in each shell; self.shell_first_ao = None; # The first (Cartesian / spherical) basis function in each shell; self.shell_first_basis_function = None; # Shell number to atomic center.; self.shell_center = None; # Which shell does a given (Cartesian / spherical) function belong to?; self.function_to_shell = None; # Which shell does a given Cartesian function belong to?; self.ao_to_shell = None; # Which center is a given function on?; self.function_center = None; # How many shells are there on each center?; self.center_to_nshell = None; # What's the first shell on each center?; self.center_to_shell = None. # The flattened lists of unique exponents; self.uexponents = None; # The flattened lists of unique contraction coefficients (normalized); self.ucoefficients = None; # The flattened lists of unique contraction coefficients (as provided by the user); self.uoriginal_coefficients = None; # The flattened lists of ERD normalized contraction coefficients; self.uerd_coefficients = None; # The flattened list of Cartesian coordinates for each atom; self.xyz = None. # Divert to constructor functions; if len(args) == 0:; self.constructor_zero_ao_basis(); elif len(args) == 2 and \; isinstance(args[0], BasisSet) and \; isinstance(args[1], int):; self.constructor_basisset_center(*args); elif len(args) == 3 and \; isinstance(args[0], basestring) and \; isinstance(args[1], Molecule) and \; isinstance(args[2], OrderedDict):; self.constructor_role_mol_shellmap(*args); else:; raise ValidationError('BasisSet::constructor: Inappropriate configuration of constructor arguments'). # <<< Methods for Construction >>>. [docs] def initialize_singletons(self):; """"""Initialize singleton values that are shared by all basis set objects.""""""; # Populate the exp_ao arrays; for l in range(self.LIBINT_MAX_AM):; for i i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html:3094,contract,contraction,3094,psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,1,['contract'],['contraction']
Integrability,"al indices specified above (). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS¶. Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_THETA¶. FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. SAD Guess Algorithm¶. SAD_D_CONVERGENCE¶. Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE¶. Convergence criterion for SCF energy in SAD Guess. Type: conv double;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html:7045,integrat,integration,7045,psi4manual/4.0b5/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"al indices specified above (). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS¶. Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. SAD Guess Algorithm¶. SAD_D_CONVERGENCE¶. Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE¶. Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. DFT¶. DFT_ALPHA¶. The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE¶. DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BS_RADIUS_ALPHA¶. Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_CUSTOM_FUNCTIONAL¶. A custom DFT functional object (built by Python or NULL/None). Type: python; Default: No Default. DFT_DISPERSION_PARAMETERS¶. Parameters defining the dispersion correction. S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html:6666,integrat,integration,6666,psi4manual/4.0b3/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"al-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; gaussian_n; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/contents.html:2535,wrap,wrappers,2535,psi4manual/4.0b4/contents.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/contents.html,1,['wrap'],['wrappers']
Integrability,"al_option('MP_TYPE') if core.has_global_option_changed(""MP_TYPE"") else ""DF""; module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISD computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE') if core.has_global_option_changed(""MP_TYPE"") else ""DF""; module = core.get_global_option('QC_MODULE'); all_electron = (core.get_global_option('FREEZE_CORE') == ""FALSE""); # Considering only [df]occ. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:11517,rout,route,11517,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['rout'],['route']
Integrability,"al_phase is False:; equal_phase = []; elif equal_phase is True:; equal_phase = list(dict(errors).keys()); else:; equal_phase = [(ep if ep.startswith(""root."") else ""root."" + ep) for ep in equal_phase]; phased = []. for nomatch in sorted(errors):; for ep in equal_phase or []:; if nomatch[0].startswith(ep):; if nomatch[0] not in n_errors:; phased.append(nomatch); errors.remove(nomatch). if forgive is None:; forgive = []; else:; forgive = [(fg if fg.startswith(""root."") else ""root."" + fg) for fg in forgive]; forgiven = []. for nomatch in sorted(errors):; for fg in forgive or []:; if nomatch[0].startswith(fg):; forgiven.append(nomatch); errors.remove(nomatch). ## print if verbose >= 2 if these functions had that knob; # forgiven_message = []; # for e in sorted(forgiven):; # forgiven_message.append(e[0]); # forgiven_message.append(""forgiven "" + e[1]); # pprint.pprint(forgiven). message = []; for e in sorted(errors):; message.append(e[0]); message.append("" "" + e[1]). ret_msg_str = ""\n"".join(message). return return_handler(len(ret_msg_str) == 0, label, ret_msg_str, return_message, quiet). [docs]; def compare_molrecs(; expected,; computed,; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; forgive=None,; verbose: int = 1,; relative_geoms=""exact"",; return_message: bool = False,; return_handler: Callable = None,; ) -> bool:; """"""Function to compare Molecule dictionaries.""""""; # Need to manipulate the dictionaries a bit, so hold values; xptd = copy.deepcopy(expected); cptd = copy.deepcopy(computed). def massage_dicts(dicary):; # if 'fix_symmetry' in dicary:; # dicary['fix_symmetry'] = str(dicary['fix_symmetry']); # if 'units' in dicary:; # dicary['units'] = str(dicary['units']); if ""fragment_files"" in dicary:; dicary[""fragment_files""] = [str(f) for f in dicary[""fragment_files""]]; # and about int vs long errors; # if 'molecular_multiplicity' in dicary:; # dicary['molecular_multiplicity'] = int(dicary['molecular_multiplicity']); # if 'fragment_multiplicities' in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:14374,message,message,14374,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,3,['message'],['message']
Integrability,"al_phase is False:; equal_phase = []; elif equal_phase is True:; equal_phase = list(dict(errors).keys()); else:; equal_phase = [(ep if ep.startswith(""root."") else ""root."" + ep) for ep in equal_phase]; phased = []. for nomatch in sorted(errors):; for ep in equal_phase or []:; if nomatch[0].startswith(ep):; if nomatch[0] not in n_errors:; phased.append(nomatch); errors.remove(nomatch). if forgive is None:; forgive = []; else:; forgive = [(fg if fg.startswith(""root."") else ""root."" + fg) for fg in forgive]; forgiven = []. for nomatch in sorted(errors):; for fg in forgive or []:; if nomatch[0].startswith(fg):; forgiven.append(nomatch); errors.remove(nomatch). ## print if verbose >= 2 if these functions had that knob; # forgiven_message = []; # for e in sorted(forgiven):; # forgiven_message.append(e[0]); # forgiven_message.append(""forgiven "" + e[1]); # pprint.pprint(forgiven). message = []; for e in sorted(errors):; message.append(e[0]); message.append("" "" + e[1]). ret_msg_str = ""\n"".join(message). return return_handler(len(ret_msg_str) == 0, label, ret_msg_str, return_message, quiet). [docs]def compare_molrecs(; expected,; computed,; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; forgive=None,; verbose: int = 1,; relative_geoms=""exact"",; return_message: bool = False,; return_handler: Callable = None,; ) -> bool:; """"""Function to compare Molecule dictionaries.""""""; # Need to manipulate the dictionaries a bit, so hold values; xptd = copy.deepcopy(expected); cptd = copy.deepcopy(computed). def massage_dicts(dicary):; # if 'fix_symmetry' in dicary:; # dicary['fix_symmetry'] = str(dicary['fix_symmetry']); # if 'units' in dicary:; # dicary['units'] = str(dicary['units']); if ""fragment_files"" in dicary:; dicary[""fragment_files""] = [str(f) for f in dicary[""fragment_files""]]; # and about int vs long errors; # if 'molecular_multiplicity' in dicary:; # dicary['molecular_multiplicity'] = int(dicary['molecular_multiplicity']); # if 'fragment_multiplicities' in d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:14206,message,message,14206,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"alence/etc. is conserved and X-zeta/(X+d)zeta is; not, since this is the usual aux basis pattern.; augbasis is round up to the nearest aug-cc-pVXZ; rootbasis is round down to the nearest cc-pVXZ; auxbasis is round up to the nearest cc-pVXZ or aug-cc-pVXZ. Module with non-generic exceptions classes. exception BasisSetFileNotFound(msg)[source]¶. exception BasisSetNotDefined(msg)[source]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:56626,message,message,56626,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['message'],['message']
Integrability,"all pint -c conda-forge`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, pylibefp,; # qcelemental, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:11853,depend,dependencies,11853,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"alling from Source; Installing from Binary; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable; PsiAPI Tutorial: Using Psi4 as a Python Module. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Notes on Options; Alternate Implementations; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DFT-NL; DCT: Density Cumulant Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; CC: Coupled Cluster Theory; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; MCSCF: Multi-Configurational Self-Consistent-Field; SAPT: Symmetry-Adapted Perturbation Theory; F/I-SAPT: Functional Group and/or Intramolecular SAPT; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; Evaluation of One-Electron Properties — oeprop(); Vibrational and Thermochemical Analysis; TDSCF: Time-dependent Hartree–Fock and density-functional theory. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to the BrianQC GPU module by the BrianQC team; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to CPPE by M. Scheurer; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Psi4FockCI: A Gen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/index.html:1779,depend,dependent,1779,psi4manual/1.5.0/index.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/index.html,1,['depend'],['dependent']
Integrability,"als based on the orbital energey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD¶. Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use op",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:28771,contract,contracted,28771,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['contract'],['contracted']
Integrability,"als per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶. static from_file(wfn_data)¶; Summary. Parameters:wfn_data (str or dict) – If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns:A deserialized Wavefunction object. Return type:Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_amplitudes(self: psi4.core.CCWavefunction) → Dict[str, psi4.core.Matrix]¶. Get dict of converged T amplitudes. amps : dict (spacestr, SharedMatrix); spacestr is a description of the amplitude set using the following conventions.; I,J,K -> alpha occupied; i,j,k -> beta occupied; A,B,C -> alpha virtual; a,b,c -> beta virtual. The following entries are stored in the amps, depending on the reference type; RHF: “tIA”, “tIjAb”; UHF: tIA, tia, tIjAb, tIJAB, tijab; ROHF: tIA, tia, tIjAb, tIJAB, tijab. Examples; RHF T1 diagnostic = sqrt(sum_ia (T_ia * T_ia)/nelec); >>> mol = “””; … 0 1; … Ne 0.0 0.0 0.0; … symmetry c1”“”; >>> e, wfn = psi4.energy(“CCSD/cc-pvdz”, return_wfn=True); >>> t1 = wfn.get_amplitudes()[‘tia’].to_array(); >>> t1_diagnostic = np.sqrt(np.dot(t1.ravel(),t1.ravel())/ (2 * wfn.nalpha()); >>> t1_diagnostic == psi4.variable(“CC T1 DIAGNOSTIC”); True. Warning; Symmetry free calculations only (nirreps > 1 will cause error). Warning; No checks that the amplitudes will fit in core. Do not use for proteins. get_array(key)¶. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scrat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:13906,depend,depending,13906,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['depend'],['depending']
Integrability,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. PNO_CONVERGENCE (DLPNO)¶DLPNO — General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html:189496,integrat,integration,189496,psi4manual/1.5.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html,3,['integrat'],['integration']
Integrability,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. PNO_CONVERGENCE (DLPNO)¶DLPNO — General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:192882,integrat,integration,192882,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,1,['integrat'],['integration']
Integrability,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF)¶SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF)¶SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC)¶ADC — Maximum iteration number in pole searching. This option is only available for the built-in ADC backend. Type: integer; Default: 20. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:188526,integrat,integration,188526,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PNO_CONVERGENCE (DLPNO)¶DLPNO — General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html:194075,integrat,integration,194075,psi4manual/1.8.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html,3,['integrat'],['integration']
Integrability,"alue (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_addon.html:11454,integrat,integrate,11454,psi4manual/1.6.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_addon.html,1,['integrat'],['integrate']
Integrability,"ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:20554,interface,interface,20554,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['interface'],['interface']
Integrability,"ame, **kwargs):; """"""Function encoding sequence of PSI module calls for; a density cumulant functional theory calculation. """"""; optstash = OptionsState(; ['SCF', 'REFERENCE'],; ['DCFT', 'REFERENCE']). PsiMod.set_local_option('SCF', 'REFERENCE', 'UHF'); PsiMod.set_local_option('DCFT', 'REFERENCE', 'UHF'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs); PsiMod.dcft(). optstash.restore(). [docs]def run_dcft_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; DCFT gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_dcft(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. """"""; # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). return PsiMod.occ(). [docs]def run_omp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_omp2(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs). optstash.restore(). [docs]def run_mp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'ORB_OPT',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:1746,rout,routine,1746,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"ample of; a PBS job file for a threaded job, and a short explanation for each section.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; 1; 2; 3; 4; 5#!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; 1; 2; 3; 4; 5; 6; 7; 8cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; 1; 2; 3;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:13590,depend,depend,13590,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,6,['depend'],['depend']
Integrability,"amples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present). >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present). >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda. # won't work, as mkl.h header also needed. OpenBLAS. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). On Mac, the; native Accelerate libraries are also recommended.; For open-source LAPACK distributions, OpenBLAS (formerly GotoBLAS); is known to work, while ATLAS is known; (https://github.com/psi4/psi4/issues/391) to have stability issues; with the DFOCC module.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:32250,depend,depends,32250,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['depends']
Integrability,"ams”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:26130,interface,interface,26130,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['interface'],['interface']
Integrability,"an in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; kwargs = p4util.kwargs_lower(kwargs). # Figure out what kind of gradient this is; if hasattr(name, '__call__'):; if name.__name__ in ['cbs', 'complete_basis_set']:; gradient_type = 'cbs_wrapper'; else:; # Bounce to name if name is non-CBS function; gradient_type = 'custom_function'. elif kwargs.get('bsse_type', None) is not None:; gradient_type = 'nbody_gufunc'; elif '/' in name:; gradient_type = 'cbs_gufunc'; else:; gradient_type = 'conventional'. # Call appropriate wrappers; if gradient_type == 'nbody_gufunc':; return driver_nbody.nbody_gufunc(hessian, name.lower(), ptype='hessian', **kwargs); # Check if this is a CBS extrapolation; elif gradient_type == ""cbs_gufunc"":; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); elif gradient_type == ""cbs_wrapper"":; return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""); elif gradient_type != ""conventional"":; raise ValidationError(""Hessian: Does not yet support custom functions.""); else:; lowername = name.lower(). _filter_renamed_methods(""frequency"", lowername); ; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_ut",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:75437,wrap,wrappers,75437,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['wrap'],['wrappers']
Integrability,"an in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; kwargs = p4util.kwargs_lower(kwargs). # Figure out what kind of gradient this is; if hasattr(name, '__call__'):; if name.__name__ in ['cbs', 'complete_basis_set']:; gradient_type = 'cbs_wrapper'; else:; # Bounce to name if name is non-CBS function; gradient_type = 'custom_function'. elif kwargs.get('bsse_type', None) is not None:; gradient_type = 'nbody_gufunc'; elif '/' in name:; gradient_type = 'cbs_gufunc'; else:; gradient_type = 'conventional'. # Call appropriate wrappers; if gradient_type == 'nbody_gufunc':; return driver_nbody.nbody_gufunc(hessian, name.lower(), ptype='hessian', **kwargs); # Check if this is a CBS extrapolation; elif gradient_type == ""cbs_gufunc"":; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); elif gradient_type == ""cbs_wrapper"":; return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""); elif gradient_type != ""conventional"":; raise ValidationError(""Hessian: Does not yet support custom functions.""); else:; lowername = name.lower(). return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:62823,wrap,wrappers,62823,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['wrap'],['wrappers']
Integrability,"an something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and min",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:4671,depend,dependency,4671,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['depend'],['dependency']
Integrability,"an) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:11448,integrat,integrate,11448,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,2,['integrat'],['integrate']
Integrability,"an; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_DFT_DO_DHF (SAPT); SAPT — Compute the Delta-HF correction?. Type: boolean; Default: true. SAPT_DFT_FUNCTIONAL (SAPT); SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT); SAPT — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT); SAPT — Monomer A GRAC shift?. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT); SAPT — Monomer B GRAC shift?. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT); SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT); SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT); SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT); SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT); SAPT (Expert) — Interior option to clean up printing. Type: boo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:205617,integrat,integration,205617,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['integrat'],['integration']
Integrability,"anager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. crashclean(self: psi4.core.IOManager) → None; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None; Set the specific file number to be retained. shared_object() → psi4.core.IOManager; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.iomanager.html:3294,protocol,protocol,3294,psi4manual/1.2.1/api/psi4.core.iomanager.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.iomanager.html,1,['protocol'],['protocol']
Integrability,"analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:97068,wrap,wrapper,97068,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['wrap'],['wrapper']
Integrability,"anced Functional Use and Manipulation. [12]; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function run_dftd3() or run_dftd4(). (These functions; call QCEngine, which is the same PSI4 + dftd3/dftd4 interface that is called during an scf job.); This “D-only” route is much faster than running a DFT-D energy.; This route is NOT available for s-dftd3. File an issue if a definite need arises.; Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a dftd3 “D-only” calculation. But; in a dftd4 “D-only” calculation, functional information overrides; any user-specified dispersion parameters. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.Molecule.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=No",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:12535,rout,route,12535,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,4,['rout'],['route']
Integrability,"ancing PSI4 Capabilities. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, CheMPS2 has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. Previous bullet had details. To build PSI4 from source and use; Libint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/chemps2-1.html:1188,depend,dependent,1188,psi4manual/1.2.1/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/chemps2-1.html,4,['depend'],['dependent']
Integrability,"ancing PSI4 Capabilities. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, CheMPS2 has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:1186,depend,dependent,1186,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['depend'],['dependent']
Integrability,"and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the implied first argument.; Class methods are different than C++ or Java static methods.; If you want those, see the staticmethod builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix +",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146019,interface,interface,146019,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['interface'],['interface']
Integrability,"and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydan",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:14840,message,message,14840,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['message'],['message']
Integrability,"and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; Psi4 input file. Depending on the nature of preceeding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a Psi4-style molecule, the; interface cannot judge whether a sandwich mode (drop the Psi4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the Psi4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a Psi4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:17335,wrap,wrappers,17335,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrappers']
Integrability,"andard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:5763,depend,depends,5763,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,4,['depend'],['depends']
Integrability,"ange(100,103,2). rows = []; table = []. set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]). import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psithoninput.html:13196,wrap,wrapper,13196,psi4manual/1.7.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psithoninput.html,3,['wrap'],['wrapper']
Integrability,"anging its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Max",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html:209079,depend,dependencies,209079,psi4manual/1.5.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html,7,['depend'],['dependencies']
Integrability,"ansort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B, transA, transB); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. fcidump_tei_helper(nirrep, restricted, …); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). Deprecated since version 1.4. get_array_variables(). Deprecated since version 1.4. get_atomic_point_charges(). Deprecated since version 1.4. get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_gradient(). Deprecated since version 1.2. get_legacy_gradient(); Returns the global gradient as a (nat, 3) Matrix object. get_legacy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:4491,interface,interface,4491,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['interface'],['interface']
Integrability,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec GEOS[rgt]; molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""PsiMod.print_ou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:38673,wrap,wrapper,38673,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:38981,wrap,wrapper,38981,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,2,['wrap'],['wrapper']
Integrability,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; core.print_out(instructions). with open('%s-master.in' % (dbse), 'w') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # build string of title banner; banners = ''; banners += """"""core.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""core.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""core.print_out(' Database Contributions Map:\\n %",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:17723,wrap,wrapper,17723,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,3,['wrap'],['wrapper']
Integrability,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(p4util.format_molecule_for_input(GEOS[rgt])); molecule = psi4.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:39727,wrap,wrapper,39727,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"ap') command.\n"""""" % (dbse); instructions += """""" The former may look very peculiar since processed and pickled python rather than\n""""""; instructions += """""" raw input is written. Follow the instructions below to continue.\n\n""""""; instructions += """""" (1) Run all of the %s-*.in input files on any variety of computer architecture.\n"""""" % (dbse); instructions += """""" The output file names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructions). with open('%s-master.in' % (dbse), 'w') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""psi4.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""psi4.print_out(' Database Contributions Map:\\n %",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:17835,wrap,wrapper,17835,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['wrap'],['wrapper']
Integrability,"appers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; ADC: Ab Initio Polarization Propagator; SAPT: Symmetry-Adapted Perturbation Theory; CEPA: Coupled-Pair Methods; CC: Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; CI: Configuration Interaction; Geometry Optimization; Evaluation of One-Electron Properties. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that. Python Driver; basislist; input; pubchem; psiexceptions; frac; molutil; proc; dashparam; procutil; driver; optproc; physconst; wrappers; qmmm; basislistother; diatomic; functional; text; util; basislistdunning; aliases; qcdb. PsiMod: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/contents.html:2270,wrap,wrappers,2270,psi4manual/4.0b3/contents.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/contents.html,1,['wrap'],['wrappers']
Integrability,"apt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/testsuite.html:49290,depend,depend,49290,psi4manual/1.8.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/testsuite.html,2,['depend'],['depend']
Integrability,"arallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54182,depend,depending,54182,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['depend'],['depending']
Integrability,"arameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]; class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:6061,rout,routine,6061,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['rout'],['routine']
Integrability,"ard; Linux distribution); Python interpreter and headers (3.6 or 3.7) https://www.python.org/; CMake (3.8+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]; QCElemental — [what is this?]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff; pint https://pint.readthedocs.io/en/latest/; pydantic (depending on your QCElemental version) https://pydantic-docs.helpmanual.io/#. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:5392,depend,dependencies,5392,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"are for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:5259,depend,dependencies,5259,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"are message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. # CSXError ceased to be used by v1.4. Class removed by v1.7; # class CSXError(PsiException):. [docs]; class MissingMethodError(ValidationError):; """"""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; ValidationError.__init__(self, msg); self.message = '\nMissingMethodError: %s\n\n' % msg. [docs]; class ManagedMethodError(PsiException):; """"""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of gov",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:9873,message,message,9873,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"are_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:16282,message,message,16282,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['message'],['message']
Integrability,"arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. SCF). print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVariables that have been set in global memory. psi_top_srcdir(); Returns the location of the source code. psimrcc(arg0); Runs the multireference coupled cluster code. reopen_outfile(); Reopens the output file. revoke_global_option_changed(key); Clear the touched status for keyword key at global (all-module) scope. revoke_local_option_changed(module, key); Clear the touched status for keyword key at module scope. run_gdma(ref_wfn, datfilename); Runs the GDMA interface code. sapt(dimer_wfn, monoa_wfn, monob_wfn); Runs the symmetry adapted perturbation theory code. scalar_variable(key); Returns the double QCVariable key (case-insensitive); prefer variable(). scalar_variables(); Returns dictionary of all double QCVariables; prefer variables(). scatter(arg0, arg1, arg2, arg3, arg4); New Scatter function. scfgrad(ref_wfn); Run scfgrad, which is a specialized DF-SCF gradient program. scfhess(ref_wfn); Run scfhess, which is a specialized DF-SCF hessian program. set_active_molecule(molecule); Activates a previously defined molecule in global memory so next computations use it. set_array_variable(key, value); Sets the requested (case-insensitive) Matrix QCVariable; prefer set_variable(). set_datadir(psidatadir); Sets the path to shared text resources, PSIDATADIR. set_global_option(*args, **kwargs); Overloaded function. set_global_option_python(key, EXTERN); This is a fairly hacky way to get around EXTERN issues. set_local_option(*ar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psi4api.html:8229,interface,interface,8229,psi4manual/1.8.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psi4api.html,1,['interface'],['interface']
Integrability,"arg1: str, arg2: str) → None¶; set string option. set_str_i(self: psi4.core.Options, arg0: str, arg1: str, arg2: str) → None¶; set string option. validate_options(self: psi4.core.Options) → None¶; validate options for arg0 module. class psi4.core.OrbitalSpace¶; Bases: pybind11_builtins.pybind11_object; Contains information about the orbitals. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:153530,depend,dependencies,153530,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,4,['depend'],['dependencies']
Integrability,"array],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to :func:`numpy.isclose`. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.allclose`.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use :py:func:`compare_recursive`.; * Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. .. code-block:: python. absolute(computed - expected) <= (atol + rtol * absolute(expected)). """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:2050,message,message,2050,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,4,['message'],['message']
Integrability,"ary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT; Higher-Order Exchange Terms without Single-Exchange Approximation. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; Link Orbital Partitioning in I-SAPT; Other F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; Interface to adcc. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/methods.html:4323,depend,dependent,4323,psi4manual/master/methods.html,https://psicode.org,https://psicode.org/psi4manual/master/methods.html,1,['depend'],['dependent']
Integrability,"as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Navigation. Index. modules    .    .    ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/erd-1.html:2101,depend,dependencies,2101,psi4manual/1.1.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/erd-1.html,2,['depend'],['dependencies']
Integrability,"as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake file governing project plugin.; The plugin source and CMakeLists.txt is independent of platform; and PSI4 installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; PSI4 installation. Run psi4 --plugin-compile to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent PSI4; (the -C psi4PluginCache pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:4551,depend,dependencies,4551,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,15,['depend'],['dependencies']
Integrability,"as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; if isbasis:; wordre = re.compile(r'(([$]?)([-+()*.,\w\""\'/\\]+))'); else:; wordre = re.compile(r'(([$]?)([-+()*.\w\""\'/\\]+))'); string = wordre.sub(process_word_quotes, string); return string. def dequotify(string):; if string[0] == '""' and string[-1] == '""':; return string[1:-1]; else:; return string. def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; module = module.upper(); key = key.upper(); isbasis = True if 'BASIS' in key else False; value = quotify(value.strip(), isbasis=isbasis). if module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace():",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html:2505,wrap,wrap,2505,psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,7,['wrap'],['wrap']
Integrability,"as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; if isbasis:; wordre = re.compile(r'(([$]?)([-+:()*.,\w\""\'/\\]+))'); else:; wordre = re.compile(r'(([$]?)([-+()*.\w\""\'/\\]+))'); string = wordre.sub(process_word_quotes, string); return string. def dequotify(string):; if string[0] == '""' and string[-1] == '""':; return string[1:-1]; else:; return string. def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; module = module.upper(); key = key.upper(); isbasis = True if 'BASIS' in key else False; value = quotify(value.strip(), isbasis=isbasis). if module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/inputparser.html:2559,wrap,wrap,2559,psi4manual/1.8.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/inputparser.html,3,['wrap'],['wrap']
Integrability,"asis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition¶; Beyond setting DDX to true and selecting; a solvent model using DDX_MODEL,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity as well.; The solvent can be defined either by directly providing a dielectric; constant using DDX_SOLVENT_EPSILON or by looking up the dielectric; constant in from a solvent trivial name provided by DDX_SOLVENT; (e.g. water, ethanol, cis-1,2-dimethylcyclohexane).; By convention solvent names are all lowercase and use dashes (-) to separate; quantifiers like o, n etc.; The full list understood by ddx can be obtained using; import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (DDX_MODEL is LPB); additionally the Debye-Hückel parameter DDX_SOLVENT_KAPPA needs to be provided; (in units of inverse Bohr or inverse Angström, depending on the unit used to define; the molecular geometry). pyddx provides a handy utility function to compute; the Debye-Hückel parameter. For example; import pyddx; from qcelemental import constants. list_of_ions = [(+1, 0.1), (-1, 0.1)]; dielectric_constant = pyddx.data.solvent_epsilon[""water""]; temperature = 298.15 # Kelvin; kappa_invbohr = pyddx.solvent_kappa(list_of_ions, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a +1-charged ion; and 0.1 mol/l of a -1-charged ion.; The cavity in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the DDX_RADII_SET parameter.; Currently bondi [Bondi:1964:441] and uff ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:4168,depend,depending,4168,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,3,['depend'],['depending']
Integrability,"ass to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian coordinates in Bohr of cur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:38001,depend,depends,38001,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,6,['depend'],['depends']
Integrability,"ass to handle storage of Cartesian coordinate values, which; may be defined in terms of other variables through this mechanism, greatly; simplifying Z-matrix specification, for example. everything()[source]¶. fixed()[source]¶; Get whether the coordinate value is fixed or not. invalidate()[source]¶; Flag the current value as outdated. set_fixed(fixed)[source]¶; Set whether the coordinate value is fixed or not. class NumberValue(value, fixed=False)[source]¶; Specialization of CoordValue that is simply a number to be stored. clone()[source]¶; Returns new, independent NumberValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class VariableValue(name, geometryVariables, negate=False, fixed=False)[source]¶; Specialization of CoordValue, where the current value depends; on the list of geometry values stored by the molecule. clone()[source]¶; Returns new, independent VariableValue object. compute()[source]¶; Computes value of coordinate from member data. everything()[source]¶. name()[source]¶; Gets the name of the variable. negated()[source]¶; Gets whether the coordinate value is actually the negative of the variable value. rset(val)[source]¶; Resets value of coordinate if not fixed. type()[source]¶; Gets specialization type of CoordValue. variable_to_string(precision)[source]¶; Takes a CoordValue object, and returns a string for printing. class ZMatrixEntry(entry_number, Z, charge, mass, symbol, label, rto=None, rval=0, ato=None, aval=0, dto=None, dval=0, basis=None, shells=None)[source]¶; Class to hold all information about an atom, including its; coordinate specification as any position of ZMatrix. clone()[source]¶; Returns new, independent ZMatrixEntry object. compute()[source]¶; Compute the Cartesian c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:117348,depend,depends,117348,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['depend'],['depends']
Integrability,"ass,; real=real,; elbl=elbl,; name=name,; units=units,; input_units_to_au=input_units_to_au,; fix_com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; molecular_charge=molecular_charge,; molecular_multiplicity=molecular_multiplicity,; comment=comment,; provenance=provenance,; connectivity=connectivity,; domain='qm',; missing_enabled_return=missing_enabled_return,; tooclose=tooclose,; zero_ghost_fragments=zero_ghost_fragments,; nonphysical=nonphysical,; mtol=mtol,; verbose=verbose); if return_dict:; return core.Molecule.from_dict(molrec), molrec; else:; return core.Molecule.from_dict(molrec). @classmethod; def _molecule_from_schema(cls, molschema: Dict, return_dict: bool = False, nonphysical: bool = False, verbose: int = 1) -> Union[core.Molecule, Tuple[core.Molecule, Dict]]:; """"""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~psi4.core.Molecule.from_arrays`. Parameters; ----------; molschema; Dictionary form of Molecule following known schema.; return_dict; Additionally return Molecule dictionary intermediate.; nonphysical; Do allow masses outside an element's natural range to pass validation?; verbose; Amount of printing. Returns; -------; mol : :py:class:`psi4.core.Molecule`; molrec : dict; Dictionary representation of instance.; Only provided if `return_dict` is True. """"""; molrec = qcel.molparse.from_schema(molschema, nonphysical=nonphysical, verbose=verbose). qmol = core.Molecule.from_dict(molrec); geom = np.array(molrec[""geom""]).reshape((-1, 3)); qmol._initial_cartesian = core.Matrix.from_array(geom). if return_dict:; return qmol, molrec; else:; return qmol. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the core.Molecule class. """"""; cls.__setattr__ = molecule_set_attr; cls.__getattr__ = molecule_get_attr. cls.to_arrays = qcdb.Molecule.to_arrays; c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/molutil.html:4837,wrap,wrapper,4837,psi4manual/1.4.0/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/molutil.html,4,['wrap'],['wrapper']
Integrability,"ast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; The SCF algorithm is first converged on a smaller grid, followed by a final SCF; iteration on a larger grid. This results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. The size of the initial grid is controlled by the; keywords COSX_RADIAL_POINTS_INITIAL and COSX_SPHERICAL_POINTS_INITIAL.; The final grid is controlled by COSX_RADIAL_POINTS_FINAL and; COSX_SPHERICAL_POINTS_FINAL. The defaults for both grids aim to balance; cost and accuracy.; Screening thresholds over integrals, densities, and basis extents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE keywords, respectively. COSX_INTS_TOLERANCE; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/scf.html:30794,integrat,integration,30794,psi4manual/1.6.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/scf.html,2,['integrat'],['integration']
Integrability,"at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. Previous bullet had details. To build PSI4 from source and use; Libxc from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libxc-1.html:1767,depend,dependencies,1767,psi4manual/1.2.1/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libxc-1.html,4,['depend'],['dependencies']
Integrability,"at Quick Installation),; the gcp executable can be obtained through conda install gcp -c psi4; or conda install gcp-correction -c conda-forge.; To remove a conda installation, conda remove gcp or conda remove gcp-correction. Source. If using PSI4 built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by PSI4, the program binary (gcp or mctc-gcp) must be; found in your PATH so that QCEngine can detect it. Check if and where; found through qcengine info. If; PSI4 is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP¶; At present there is a limited interface to gCP that is used; only to implement the “HF-3c” [Sure:2013:1672], “PBEh-3c”; [Grimme:2015:054107], “B97-3c” [Brandenburg:2018:b973c], “r2SCAN-3c” [Grimme:2021:064103],; and “wB97X-3c” [Muller:2023:014103] methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements “B97-3c” and “r2SCAN-3c”.; The newest wB97X-3c method doesn’t use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the “3c” family.; A DFTD3 executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A DFTD4 python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; PSI4 will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to “empty” the basis; option for the scope of the c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/gcp.html:2019,interface,interface,2019,psi4manual/1.9.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/gcp.html,2,['interface'],['interface']
Integrability,"at entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dlpno(arg0); Runs the DLPNO codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B[, transA, transB]); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. dummy_einsums(ref_wfn); Runs the einsums placeholder code. dummy_integratorxx(ref_wfn); Runs the integratorxx placeholder code. fcidump_tei_helper(nirrep, restricted, ...); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). get_array_variables(). get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_local_option(module, key); Return keyword key value at module scope. get_memory(); Returns the amount of memory available to Psi (in bytes). get_num_threads(); Returns the number of threads to use in SMP parallel computations. get_option(module, key); Return keyword key value used by module. get_options(); Get options. get_output_file(); Returns output file name (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psi4api.html:4765,integrat,integratorxx,4765,psi4manual/master/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/master/psi4api.html,1,['integrat'],['integratorxx']
Integrability,"at excitation is only allowed if it is a single or double. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. aediis-1; ADIIS test case, from 10.1063/1.3304922. scf-response2; Compute the dipole polarizability for water with custom basis set. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cisd-sp; 6-31G** H2O Test CISD Energy Point. tdscf-7; TD-HF test variable access. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. mints3; Test individual integral objects for correctness. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. pubchem2; Superficial test of PubChem interface. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:5185,wrap,wrapper,5185,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['wrap'],['wrapper']
Integrability,"at is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6088,depend,dependency,6088,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,4,['depend'],['dependency']
Integrability,"at)arg2) -> Vector :; | Prints the rotational constants of the molecule; | ; | C++ signature :; | N3psi6VectorE rotational_constants(N3psi8MoleculeE {lvalue},d); | ; | run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False); | Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); | to compute the -D correction of level *dashlvl* using parameters for; | the functional *func*. The dictionary *dashparam* can be used to supply; | a full set of dispersion parameters in the absense of *func* or to supply; | individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; | gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; | unspecified. The dftd3 executable must be independently compiled and found in; | :envvar:`PATH` or :envvar:`PSIPATH`.; | *self* may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; | (works b/c psi4.Molecule has been extended by this method py-side and; | only public interface fns used) or a string that can be instantiated; | into a qcdb.Molecule.; | ; | save_string_xyz(...); | save_string_xyz( (Molecule)arg1) -> str :; | Saves the string of an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz(N3psi8MoleculeE {lvalue}); | ; | save_string_xyz_file(...); | save_string_xyz_file( (Molecule)arg1) -> str :; | Saves an XYZ file to arg2; | ; | C++ signature :; | Ss save_string_xyz_file(N3psi8MoleculeE {lvalue}); | ; | save_xyz_file(...); | save_xyz_file( (Molecule)arg1, (str)arg2, (bool)arg3) -> None :; | Saves an XYZ file to arg2; | ; | C++ signature :; | void save_xyz_file(N3psi8MoleculeE {lvalue},Ss,b); | ; | schoenflies_symbol(...); | schoenflies_symbol( (Molecule)arg1) -> str :; | Returns the Schoenflies symbol; | ; | C++ signature :; | Ss schoenflies_symbol(N3psi8MoleculeE {lvalue}); | ; | set_active_fragment(...); | set_active_fragment( (Molecule)arg1, (int)arg2) -> None :; | Sets the specified fragment arg2 to be Real; | ; | C++ signature",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:553375,interface,interface,553375,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['interface'],['interface']
Integrability,"at; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_summary(out=None)[source]¶; Prints a short string summarizing the basis set; * @param out The file stream to use for printing. Defaults to outfile. static pyconstruct(mol, key, target, fitrole='BASIS', other=None)[source]¶; Builds a BasisSet object for mol (either a qcdb.Molecule or; a string that can be instantiated into one) from basis set; sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:63033,contract,contraction,63033,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['contract'],['contraction']
Integrability,"atabase; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. To add EFP fragments to a molecule, see Molecule Specification. Job Control Keywords¶; PSI4 comprises a number of C++ modules that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file which control its function.; These keywords are detailed in Appendix Keywords by Module.; The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21# all equivalent. set globals basis cc-pVDZ. set basis cc-pVDZ. set globals basis = cc-pVDZ. set basis = cc-pVDZ. set globals{; basis cc-pVDZ; }. set {; basis cc-pVDZ; }. set {; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; 1; 2; 3; 4; 5set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; 1; 2; 3set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening [ is; on the same line as the name of the keyword.; Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the set keyword. Omitting the module; name, or using the name global or globals will result in the keyword being; applied to all modules. For example, in the following input; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule{; o; h 1 roh; h 1 roh 2 ahoh. roh = 0.957; ahoh = 104.5; }. set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:6113,wrap,wraps,6113,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,6,['wrap'],['wraps']
Integrability,"atch(line):; # Match shell information; if shell.match(line):; what = shell.match(line); shell_type = str(what.group(1)).upper(); nprimitive = int(what.group(2)); scale = float(what.group(3)). if len(shell_type) == 1:; am = shell_to_am[shell_type[0]]. exponents = [0.0] * nprimitive; contractions = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives1.match(line); # Must match primitives1; will work on the others later; if not what:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line %d: %s"""""" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions[p] = contraction. # We have a full shell, push it to the basis set; shell_list.append(ShellInfo(am, contractions, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')). elif len(shell_type) == 2:; # This is to handle instances of SP, PD, DF, FG, ...; am1 = shell_to_am[shell_type[0]]; am2 = shell_to_am[shell_type[1]]. exponents = [0.0] * nprimitive; contractions1 = [0.0] * nprimitive; contractions2 = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives2.match(line); # Must match primitivies2; if not what:; raise ValidationError(""Gaussian94BasisSetParser::parse: Unable to match an exponent with two contractions: line %d: %s"" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions1[p] = contraction. # Do the other contraction; contraction = float(what.group(3)). # Scale the contraction and save the information; contraction *= scale; contractions2[p] = co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html:6700,contract,contractions,6700,psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,1,['contract'],['contractions']
Integrability,"atch.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:13346,message,message,13346,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ate (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO¶. Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID¶. Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS¶. Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR¶. This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY¶. Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three pos",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:31855,integrat,integration,31855,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,17,['integrat'],['integration']
Integrability,"ate identity matrix. matadd(matrix1, matrix2, fac1=1.0, fac2=1.0)[source]¶; Matrix addition. mscale(matrix, d)[source]¶; Return matrix scaled by scalar d. mult(matrix1, matrix2)[source]¶; Matrix multiplication. naivemult(v, u)[source]¶; Compute by-element multiplication of vectors v and u. norm(v)[source]¶; Compute the magnitude of vector v. normalize(v)[source]¶; Compute normalized vector v. perp_unit(u, v)[source]¶; Compute unit vector perpendicular to length 3 vectors u and v. rotate(v, theta, axis)[source]¶; Rotate length 3 vector v about axis by theta radians. scale(v, d)[source]¶; Compute by-element scale by d of vector v. show(matrix)[source]¶; Print out matrix. sub(v, u)[source]¶; Compute difference of vectors v - u. transpose(matrix)[source]¶; Return matrix transpose. zero(m, n)[source]¶; Create zero matrix. class MolproIn(mem, mtd, bas, mol, sys, cast)[source]¶. format_basis()[source]¶. format_global_parameters()[source]¶. format_infile_string()[source]¶. Module with matplotlib plotting routines. These are not hooked up to; any particular qcdb data structures but can be called with basic; arguments. bars(data, title='', saveas=None, relpath=False, graphicsformat=['pdf'], view=True)[source]¶; Generates a ‘gray-bars’ diagram between model chemistries with error; statistics in list data, which is supplied as part of the dictionary; for each participating bar/modelchem, along with mc keys in argument; data. The plot is labeled with title and each bar with mc key and; plotted at a fixed scale to facilitate comparison across projects. composition_tile(db, aa1, aa2)[source]¶; Takes dictionary db of label, error pairs and amino acids aa1; and aa2 and returns a square array of all errors for that amino; acid pair, buffered by zeros. disthist(data, title='', xtitle='', xmin=None, xmax=None, me=None, stde=None, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Saves a plot with name saveas with a histogram representation; of the reaction errors",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:108492,rout,routines,108492,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['rout'],['routines']
Integrability,"ate of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28288,depend,depend,28288,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"ated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gdma-1.html:6501,depend,dependencies,6501,psi4manual/1.4.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gdma-1.html,2,['depend'],['dependencies']
Integrability,"ated with standard DMA. Type: double; Default: 4.0. How to configure gdma for building Psi4¶; Role and Dependencies. Role — In PSI4, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) gdma; Upstream Dependencies — gdma \(\Leftarrow\) Fortran. CMake Variables. ENABLE_gdma — CMake variable toggling whether Psi4 builds with gdma; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing include/GDMA/GDMA_MANGLE.h; gdma_DIR — CMake variable to specify where pre-built gdma can be found. Set to installation directory containing share/cmake/gdma/gdmaConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gdma — CMake variable to force internal build of gdma instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gdma — CMake variable to force detecting pre-built gdma and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_gdma=ON. Build without gdma. >>> cmake. Link against pre-built. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. table of contents. Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Installation; Input; Options; GDMA_LIMIT; GDMA_ORIGIN; GDMA_MULTIPOLE_UNITS; GDMA_RADIUS; GDMA_SWITCH. How to configure gdma for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(). © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/gdma-1.html:6501,depend,dependencies,6501,psi4manual/1.5.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/gdma-1.html,2,['depend'],['dependencies']
Integrability,"ath(self, fileno, path); Set the path for specific file numbers. set_specific_retention(self, fileno, retain); Set the specific file number to be retained. shared_object(); The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self, full_path, text); Write a string to a temporary file. Methods Documentation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None¶; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None¶; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. static shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; IOManager. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.iomanager.html:1931,protocol,protocol,1931,psi4manual/1.4.0/api/psi4.core.iomanager.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.iomanager.html,1,['protocol'],['protocol']
Integrability,"ath(self, fileno, path); Set the path for specific file numbers. set_specific_retention(self, fileno, retain); Set the specific file number to be retained. shared_object(); The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self, full_path, text); Write a string to a temporary file. Methods Documentation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None¶; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None¶; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. static shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; IOManager. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.iomanager.html:1931,protocol,protocol,1931,psi4manual/1.5.0/api/psi4.core.iomanager.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.iomanager.html,1,['protocol'],['protocol']
Integrability,"ation of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PPL_TYPE¶. Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. READ_SCF_3INDEX¶. Do read 3-index integrals from SCF files?. Type: boolean; Default: true. REGULARIZATION¶. Do use regularized denominators?. Type: boolean; Default: false. REG_PARAM¶. Regularization parameter. Type: double; Default: 0.4. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Default: DF-OMP2. table of contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOLDEN_WRITE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_STEP_MAX; MP2_AMP_TYPE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dfocc-1.html:5728,depend,depending,5728,psi4manual/1.3.2/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dfocc-1.html,2,['depend'],['depending']
Integrability,"ation of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PPL_TYPE¶. Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. READ_SCF_3INDEX¶. Do read 3-index integrals from SCF files?. Type: boolean; Default: true. REGULARIZATION¶. Do use regularized denominators?. Type: boolean; Default: false. REG_PARAM¶. Regularization parameter. Type: double; Default: 0.4. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. Table Of Contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html:5759,depend,depending,5759,psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,2,['depend'],['depending']
Integrability,"ation of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PPL_TYPE¶. Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. READ_SCF_3INDEX¶. Do read 3-index integrals from SCF files?. Type: boolean; Default: true. REGULARIZATION¶. Do use regularized denominators?. Type: boolean; Default: false. REG_PARAM¶. Regularization parameter. Type: double; Default: 0.4. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TRIPLES_IABC_TYPE¶. The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. table of contents. DFOCC; General; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_LAMBDA; CC_MAXITER; CHOLESKY; CHOLESKY_TOLERANCE; COMPUT_S2; CUTOFF; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EKT_IP; E_CONVERGENCE; HESS_TYPE; INTEGRAL_CUTOFF; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html:5730,depend,depending,5730,psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html,4,['depend'],['depending']
Integrability,"ation of scratch files. --new-plugin <name>¶; Creates a new directory <name> with files for writing a; new plugin. An additional argument specifies a template; to use, for example: --new-plugin name +mointegrals.; See Sec. Plugins: Adding New Functionality to Psi4 for available templates. -v, --verbose¶; Print a lot of information, including the Psithon translation of the input file. -V, --version¶; Print version information.; >>> psi4 --version; 0.4.262. -w, --wipe¶; Clean out scratch area. Environment Variables¶; These environment variables will influence Psi4‘s behavior. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; Configuring Psi4 through PSIPATH is preferred; to modifying this environment variable. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that Psi4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh; >>> setenv PSI_SCRATCH /scratch/user. # bash; >>> export PSI_SCRATCH=/scratch/user. You can also include the above commands in the respective rc file, i.e.; ~/.tcshrc for csh and tcsh or ~/.bashrc for Bash. PSIPATH¶; Path in which Psi4 looks for user extensions to the built-in; libraries. Specifically, dire",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/external-1.html:15770,interface,interfaced,15770,psi4manual/1.0.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/external-1.html,2,['interface'],['interfaced']
Integrability,"ation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (; '', gradient.get(at,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html:1559,rout,routines,1559,psi4manual/1.9.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html,2,['rout'],['routines']
Integrability,"ation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variabl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libefp-1.html:1106,depend,dependent,1106,psi4manual/1.2.1/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libefp-1.html,2,['depend'],['dependent']
Integrability,"ation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.gaussianshell.html:1031,contract,contraction,1031,psi4manual/1.2.1/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.gaussianshell.html,1,['contract'],['contraction']
Integrability,"ation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to LIBEFP by I. Kaliman¶; Code author: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, LIBEFP. PSI4 contains code to interface to the LIBEFP library developed; in L. Slipchenko’s group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; PSI4. Installation¶; Binary. libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, libefp has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; libefp can be obtained through conda install libefp -c psi4.; Then enable it as a feature with ENABLE_libefp,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect libefp and activate dependent code. Previous bullet had details. To build PSI4 from source and use; libefp from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove libefp. Source. If using PSI4 built from source and you want libefp built from; from source also,; enable it as a feature with ENABLE_libefp,; and let the build system fetch and build it and activate dependent code. EFP Fragments¶; LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed here; with source psi4/psi4/share/psi4/efpfrag. Any of these may be used directly in; a PSI4 input file as described here.; Creating new efp fragments requires the GAMESS quantum chemistry package.; Instructions on building new fragments are here.; Once your new fragment is ready, make it accessible to PSI4 by; including the directory in which the .efp file is located to the colon; separated environment variabl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/libefp-1.html:1106,depend,dependent,1106,psi4manual/1.3.2/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html,2,['depend'],['dependent']
Integrability,"ation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. GaussianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_builtins.pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:1031,contract,contraction,1031,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html,1,['contract'],['contraction']
Integrability,"ation; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully ""+\; ""making sure all symmetry-dependent information in ""+\; ""the input, such as DOCC, is correct.""); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; if (n > 1) and (not isSowReap):; PsiMod.set_local_option('SCF', 'GUESS', 'READ'). # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (thisenergy == 0.0):; return 0.0. # S/R: Move opt data file from last pass into namespace for this pass; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (n != 0):; PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); if 'opt_datafile' in kwargs:; restartfile = kwargs.pop('opt_datafile'); if(PsiMod.me() == 0):; shutil.copy(restartfile, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:51468,depend,dependent,51468,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['depend'],['dependent']
Integrability,"ations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATION_SCHEME (STABILITY); STABILITY — Method for following eigenvectors, either 0 by angles or 1 by antisymmetric matrix. Type: integer; Default: 0. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — SAD Guess Cholesky Cutoff (for eliminating redundancies). Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_F_MIX_START (SCF); SCF (Expert) — SAD Guess F-mix Iteration Start. Type: integer; Default: 50. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_B, 3-TRIMER, 3-DIMER_AB, 3-DIMER_BC, 3-DIMER_AC, 3-MONOMER_A, 3-MONOMER_B, 3-MONOMER_C; Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:109145,depend,dependencies,109145,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"ations alike SAD, see; [Lehtola:2019:1593]. This variant employs an updated rule for the; generalized Wolfsberg-Helmholz formula from [Ammeter:1978:3686]. READRead the previous orbitals from a wfn file, casting from; one basis to another if needed. Useful for starting anion; computations from neutral orbitals, or after small geometry; changes. At present, casting from a different molecular point; group is not supported. This becomes the default for the second; and later iterations of geometry optimizations. SAPSuperposition of Atomic Potentials. This is essentially a; modification of the core Hamiltonian, which includes screening; effects by using a radially screened effective atomic charge. The; screening effects have been calculated at the complete basis set; limit with finite-element calculations, see [Lehtola:2019:25945]; and [Lehtola:2020:012516]. The guess and its implementation have; been described in [Lehtola:2019:1593]. The guess is evaluated on a; DFT quadrature grid, so the guess energy depends slightly on the; used DFT quadrature. The current implementation is based on; exchange-only local density calculations that are but nanohartree; away from the complete basis set limit [Lehtola:2020:012516]. SAPGAUSuperposition of Atomic Potentials, but using error function based; fits to the atomic radial potentials as discussed in; [Lehtola:2020:144105]. The main difference to the SAP guess; discussed above [Lehtola:2019:25945] is that the SAPGAU scheme is; analytic, and can be efficiently formed in terms of three-center; two-electron integrals [Lehtola:2020:144105]. The potential in; the SAPGAU scheme is passed with the SAPGAU_BASIS; keyword. The default potential is given by the large fit to the; HelFEM potential, sap_helfem_large, described in; [Lehtola:2020:144105]. Note that this guess is known in the DIRAC; program as .SCRPOT and in the ERKALE program as SAPFIT. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/scf.html:19114,depend,depends,19114,psi4manual/1.9.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/scf.html,2,['depend'],['depends']
Integrability,"ations to be obtained (required and bonus).\n""""""; for mc in JOBS_EXT:; instructions += """""" %12s / %-24s for %s%s\n"""""" % \; (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']], addlremark[ptype]); psi4.print_out(instructions). psioh = psi4.IOManager.shared_object(); psioh.set_specific_retention(p4const.PSIF_SCF_MOS, True); # projection across point groups not allowed and cbs() usually a mix of symm-enabled and symm-tol calls; # needs to be communicated to optimize() so reset by that optstash; psi4.set_local_option('SCF', 'GUESS_PERSIST', True). Njobs = 0; # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""psi4.print_out('\\n')\n""""""; cbsbanners += """"""p4util.banner(' CBS Computation: %s / %s%s ')\n"""""" % \; (mc['f_wfn'].upper(), mc['f_basis'].upper(), addlremark[ptype]); cbsbanners += """"""psi4.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\npsi4.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); commands += """"""psi4.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()); exec(commands). # Make energy(), etc. call; response = func(molecule=molecule, **kwargs); if ptype == 'energy':; mc['f_energy'] = response; elif ptype == 'gradient':; mc['f_gradient'] = response; mc['f_energy'] = psi4.get_variable('CURRENT ENERGY'); if verbose > 1:; mc['f_gradient'].print_out(); elif ptype == 'hessian':; mc['f_hessian'] = response; mc['f_energy'] = psi4.get_variable('CURRENT ENERGY'); if verbose > 1:; mc['f_hessian'].print_out(); Njobs += 1; if verbose > 1:; psi4.print_out(""\nCURRENT ENERGY: %14.16f\n"" % mc['f_energy']). # Fill in energies for subsumed methods; if ptype == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in JOBS_EXT:; if (wfn == job['f_wfn']",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:46837,depend,dependent,46837,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,1,['depend'],['dependent']
Integrability,"atrices. ao_potential(*args, **kwargs); Overloaded function. ao_pvp(self); AO pvp integrals. ao_quadrupole(self); Vector AO quadrupole integrals. ao_tei_deriv1(self, atom[, omega, factory]); Gradient of AO basis TEI integrals: returns (3 * natoms) matrices. ao_tei_deriv2(self, atom1, atom2); Hessian of AO basis TEI integrals: returns (3 * natoms)^2 matrices. ao_traceless_quadrupole(self); Vector AO traceless quadrupole integrals. basisset(self); Returns the basis set being used. cdsalcs(self, arg0, arg1, arg2); Returns a CdSalcList object. core_hamiltonian_grad(self, arg0); First nuclear derivative T + V + Perturb integrals. dipole_grad(self, arg0); First nuclear derivative dipole integrals. electric_field(self[, origin, deriv]); Vector electric field integrals. electric_field_value(self, arg0, arg1); Electric field expectation value at given sites. factory(self); Returns the Matrix factory being used. induction_operator(self, arg0, arg1); Induction operator, formed by contracting electric field integrals with dipole moments at given coordinates (needed for EFP and PE). integral(self); Integral factory being used. integrals(self); Molecular integrals. integrals_erf(self[, w]); ERF integrals. integrals_erfc(self[, w]); ERFC integrals. kinetic_grad(self, arg0); First nuclear derivative kinetic integrals. mo_elec_dip_deriv1(self, atom, C1, C2); Gradient of MO basis electric dipole integrals: returns (3 * natoms) matrices. mo_erf_eri(self, omega, C1, C2, C3, C4); MO ERFC Omega Integrals. mo_eri(self, C1, C2, C3, C4); MO ERI Integrals. mo_f12(self, corr, C1, C2, C3, C4); MO F12 Integrals. mo_f12_double_commutator(self, corr, C1, C2, ...); MO F12 double commutator integrals. mo_f12_squared(self, corr, C1, C2, C3, C4); MO F12 squared integrals. mo_f12g12(self, corr, C1, C2, C3, C4); MO F12G12 integrals. mo_oei_deriv1(self, oei_type, atom, C1, C2); Gradient of MO basis OEI integrals: returns (3 * natoms) matrices. mo_oei_deriv2(self, oei_type, atom1, atom2, ...); Hessian of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.mintshelper.html:2872,contract,contracting,2872,psi4manual/1.5.0/api/psi4.core.mintshelper.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.mintshelper.html,1,['contract'],['contracting']
Integrability,"atrices.; ; ccenergy(...); ccenergy() -> float :; Runs the coupled cluster energy code.; ; cceom(...); cceom() -> float :; Runs the equation of motion coupled cluster code, for excited states.; ; cchbar(...); cchbar() -> float :; Runs the code to generate the similariry transformed Hamiltonian.; ; cclambda(...); cclambda() -> float :; Runs the coupled cluster lambda equations code.; ; ccresponse(...); ccresponse() -> float :; Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; dftsapt(...); dftsapt( (Wavefunction)arg1, (Wavefunction)arg2, (Wavefunction)arg3) -> float :; Runs the DFT variant of the symmetry adapted perturbation theory code.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/psimod-1.html:105654,contract,contracts,105654,psi4manual/4.0b4/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psimod-1.html,2,['contract'],['contracts']
Integrability,"atrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool=False, transB: bool",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html:14975,depend,depending,14975,psi4manual/1.2.1/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html,1,['depend'],['depending']
Integrability,"atrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶. vector_dot(self: psi4.core.Matrix, rhs: psi4.core.Matrix) → float¶",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:14982,depend,depending,14982,psi4manual/1.3.2/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html,1,['depend'],['depending']
Integrability,"atrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; ## First half of this fn -- entry means user wants a 2nd derivative by any means. kwargs = p4util.kwargs_lower(kwargs); basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Convert wrapper directives from options (where ppl know to find them) to kwargs (suitable for non-globals transmitting); kwargs['findif_verbose'] = core.get_option(""FINDIF"", ""PRINT""); kwargs['findif_stencil_size'] = core.get_option(""FINDIF"", ""POINTS""); kwargs['findif_step_size'] = core.get_option(""FINDIF"", ""DISP_SIZE""). # Select certain irreps; irrep = kwargs.pop('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; kwargs['findif_irrep'] = irrep. ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name); _filter_renamed_methods(""hessian"", lowername). # * Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # * Prevent methods that do not have associated derivatives; if lowername in energy_only_methods:; raise ValidationError(f""`hessian('{name}')` does not have an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:70612,wrap,wrapper,70612,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,1,['wrap'],['wrapper']
Integrability,"atrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; ## First half of this fn -- entry means user wants a 2nd derivative by any means. kwargs = p4util.kwargs_lower(kwargs); basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Convert wrapper directives from options (where ppl know to find them) to kwargs (suitable for non-globals transmitting); kwargs['findif_verbose'] = core.get_option(""FINDIF"", ""PRINT""); kwargs['findif_stencil_size'] = core.get_option(""FINDIF"", ""POINTS""); kwargs['findif_step_size'] = core.get_option(""FINDIF"", ""DISP_SIZE""). # Select certain irreps; irrep = kwargs.pop('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; kwargs['findif_irrep'] = irrep. ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name); _filter_renamed_methods(""hessian"", lowername). # * Prevent methods that do not have associated derivatives; if lowername in energy_only_methods:; raise ValidationError(f""`hessian('{name}')` does not have an associated Hessian.""). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowernam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:78715,wrap,wrapper,78715,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,4,['wrap'],['wrapper']
Integrability,"au2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html:2478,depend,dependencies,2478,psi4manual/1.2.1/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html,2,['depend'],['dependencies']
Integrability,"ault: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_KAPPA¶. Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_LMAX¶. Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_N_LEBED",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ddx.html:7320,integrat,integration,7320,psi4manual/1.8.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ddx.html,3,['integrat'],['integration']
Integrability,"ault: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME¶. Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environmental Effects; EXTERN; ONEPOT_GRID_READ; PERTURB_DIPOLE; PERTURB_H; PERTURB_MAGNITUDE; PERTURB_WITH; PHI_POINTS; RADIUS; R_POINTS; THETA_POINTS; THICKNESS. DFSCF Algorithm; DF_BUMP_R0; DF_BUMP_R1; DF_DOMA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__scf-1.html:15832,integrat,integration,15832,psi4manual/1.2.1/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__scf-1.html,2,['integrat'],['integration']
Integrability,"ault: No Default. ROTATE_MO_ANGLE (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:206122,depend,dependent,206122,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['depend'],['dependent']
Integrability,"available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++11 compliance (i.e., GCC version 4.9 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Once Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/introduction-1.html:20381,depend,dependencies,20381,psi4manual/1.2.1/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/introduction-1.html,2,['depend'],['dependencies']
Integrability,"ave an associated module; ['SCF', 'SCF_TYPE'],; ['SCF', 'GUESS'],; ['DFMP2', 'MP2_OS_SCALE'],; ). If options need to be set, set them anywhere here. Options should be set; locally to a module, except for those without a module in; OptionsState.; # include if necessary as globals; PsiMod.set_global_option('BASIS', guessbasis); PsiMod.set_global_option('DF_BASIS_SCF', guessbasisdf). # include if necessary as locals; PsiMod.set_local_option('TRANSQT2', 'WFN', 'MP2'); PsiMod.set_local_option('CCSORT', 'WFN', 'MP2'); PsiMod.set_local_option('MP2', 'WFN', 'MP2'). If the regular scf module is to be run, run it through; scf_helper() so that cast-up can be used. Also, add the; option to bypass it by pre-running scf, then running the module with this; bypass_scf kwarg. Also, if the full two-electron integrals are; necessary for the post-scf, compute them if only the df integrals were run; previously.; # include if scf module is to be run. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # include if TEI are needed beyond scf. # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; PsiMod.transqt2(); PsiMod.ccsort(); PsiMod.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Previous topic; LibOptions: globals, locals, has_changed and all that; Next topic; Python Driver; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/proc_py-1.html:2871,rout,routine,2871,psi4manual/4.0b4/proc_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/proc_py-1.html,2,['rout'],['routine']
Integrability,"ay):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]; def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; ext",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:17331,rout,routines,17331,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,3,['rout'],['routines']
Integrability,"ay):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:17249,rout,routines,17249,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,1,['rout'],['routines']
Integrability,"ay):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:17319,rout,routines,17319,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,1,['rout'],['routines']
Integrability,"b.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.interface_dftd3.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule.; func - functional alias or None; dashlvl - functional type d2gr/d3zero/d3bj/d3mzero/d3mbj; dashparam - dictionary; dertype = derivative level. table of contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dftd3-1.html:8648,interface,interface,8648,psi4manual/1.1.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dftd3-1.html,2,['interface'],['interface']
Integrability,"bals, locals, has_changed and all that. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Programming: Using the Core Libraries. LibOptions: globals, locals, has_changed and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options function. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/src/bin/psi4/read_options.cc.; An example of such a routine is; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str(""DATA_FILE"", ""data.dat"");; /*- The algorithm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/optionshandling-1.html:1002,rout,routine,1002,psi4manual/1.2.1/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/optionshandling-1.html,2,['rout'],['routine']
Integrability,"banal_wfn(wfn[, hess, irrep, molecule, …]); Function to perform analysis of a hessian or hessian block, specifically. write_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, iteration); Error called for problems with converging an iterative method. Dftd3Error(msg). EmpiricalDispersion(*[, name_hint, …]); Lightweight unification of empirical dispersion calculation modes. ManagedMethodError(circs). MissingMethodError(msg); Error called when method not available. OptimizationConvergenceError(…); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). SCFConvergenceError(eqn_description, …); Error called for problems with SCF iterations. TDSCFConvergenceError(iteration, wfn, what, …); Error called for problems with TDSCF iterations. Table([rows, row_label_width, …]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. UpgradeHelper(old, new, version, elaboration); Error called on previously valid syntax that now isn’t and a simple syntax transition is possible. ValidationError(msg); Error called for problems with the input file. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:22258,depend,dependencies,22258,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['depend'],['dependencies']
Integrability,"banners); exec(p4util.format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, psi4.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); psi4.set_variable('NATOM', molecule.natom()); psi4.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], psi4.get_variable('NUCLEAR REPULSION ENERGY'),; 4, '%s %.4f' % (rgt, psi4.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; psi4.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = psi4.get_variable(envv); psi4.set_global_option(""REFERENCE"", user_reference); psi4.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""psi4.print_variables()\n""""""); freagent.write(""""""psi4.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""psi4.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""psi4.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (psi4.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(),",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:44839,wrap,wrapper,44839,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_auxiliary(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss,Ss,Ss [,i]); | ; | pyconstruct_orbital(...); | pyconstruct_orbital( (Molecule)arg1, (str)arg2, (str)arg3 [, (int)arg4]) -> BasisSet :; | Returns new BasisSet for Molecule arg1 for target keyword name arg2 and target keyword value arg3. This suffices for orbital basis sets. For auxiliary basis sets, a default fitting role (e.g., RIFIT, JKFIT) arg4 and orbital keyword value arg5 are required. An optional argument to force the puream setting is arg4 for orbital basis sets and arg6 for auxiliary basis sets.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE pyconstruct_orbital(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss,Ss [,i]); | ; | zero_ao_basis_set(...); | zero_ao_basis_set() -> BasisSet :; | Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; | ; | C++ signature :; | N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class BasisSetParser(Boost.Python.instance); | docstring; | ; | Method resolution order:; | BasisSetParser; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __reduce__ = <un",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:381088,contract,contraction,381088,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['contract'],['contraction']
Integrability,"be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesyste",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:21323,message,message,21323,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['message'],['message']
Integrability,"be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:19946,message,message,19946,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,5,['message'],['message']
Integrability,"be cherry-picking from.; Cherry-pick backport PRs and commits (git cherry-pick sha), apply other changes manually, not; forgetting CI files or samples.; Possibly apply other changes manually, including:. CI file tweaks like LLVM version or dependency constraint.; samples files from a docs build.; psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag it (Tag postrelease for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; Publish GitHub postrelease), it’s ok to revise a tag (force push to maintenance branch). Add or increment patch number in psi4/metadata.py; leave the “z”s. Commit file.; Tag with git tag -a v1.8.2 -m ""v1.8.2"", then push git push --atomic upstream 1.8.x v1.8.2. Test core PSI4 thoroughly locally (ecosystem will get tested by c-f) by running; pytest ../tests/ -n auto (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; Start Tweak Conda for postrelease PR at conda-forge. This will thoroughly test the ecosystem.; If more changes are needed, git tag -d v1.8.2 to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don’t linger.; Start the draft parts of Publish GitHub postrelease from the backported PRs assembled here. Tweak Conda for postrelease¶. Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. Always: edit version and commit jinja variables.; Possibly: edit source/url field for trial locations.; Always: edit sha256 jinja variable from e.g., curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256; Always: edit build/number. Either re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:6714,depend,dependency,6714,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['depend'],['dependency']
Integrability,"be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible value. Job Control¶; PSI4 comprises a number of modules, written in C++, that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file, detailed in Appendix Keywords by Module, which; control its function. The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; set globals basis cc-pVDZ. or. set basis cc-pVDZ. or. set globals basis = cc-pVDZ. or. set basis = cc-pVDZ. or. set globals{; basis cc-pVDZ; }. or. set{; basis cc-pVDZ; }. or. set{; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; set{; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; set{; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening [ is; on the same line as the name of the keyword.; Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the set keyword. Omitting the module; name, or using the name global or globals will result in the keyword being; applied to all modules. For example, in the following input; molecule{; o; h 1 roh; h 1 roh 2 ahoh. roh = 0.957; ahoh = 104.5; }. set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html:15091,wrap,wraps,15091,psi4manual/4.0b2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html,2,['wrap'],['wraps']
Integrability,"ber of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. print_out(self: psi4.core.Vector) → None; Prints the vector to the output file. scale(self: psi4.core.Vector, sc: float) → None; Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None; Set a vector block. shape; Shape of the Psi4 data object. to_array(copy=True, dense=False); Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html:8356,depend,depending,8356,psi4manual/1.3.2/api/psi4.core.vector.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vector.html,1,['depend'],['depending']
Integrability,"ber of orbital (non-ECP) frozen core electrons. name(self); Callback handle, may represent string or function. nao(self); Returns number of atomic orbitals (Cartesian). nbf(self); Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self); Returns total number of primitives in all contractions. nshell(self); Returns number of shells. nshell_on_center(self, i); Return the number of shells on a given center. print_detail_out(self); Prints detailed basis set info to outfile. print_out(self); Prints basis set info to outfile. shell(*args, **kwargs); Overloaded function. shell_to_ao_function(self, i); Return the function number for the first function for the i’th shell. shell_to_basis_function(self, i); Given a shell return its first basis function. shell_to_center(self, i); Return the atomic center for the i’th shell. zero_ao_basis_set(); Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. Methods Documentation. ao_to_shell(self: psi4.core.BasisSet, i: int) → int¶; Given a cartesian function (AO) number what shell does it correspond to. blend(self: psi4.core.BasisSet) → str¶; Plus-separated string of [basisname] values. static build(mol, key=None, target=None, fitrole='ORBITAL', other=None, puream=-1, return_atomlist=False, quiet=False)¶. construct_from_pydict(arg0: psi4.core.Molecule, arg1: dict, arg2: int) → psi4.core.BasisSet¶; docstring. function_to_center(self: psi4.core.BasisSet, i: int) → int¶; The atomic center for the i’th function. function_to_shell(self: psi4.core.BasisSet, i: int) → int¶; Given a function number what shell does it correspond to. genbas(self: psi4.core.BasisSet) → str¶; Returns basis set per atom in CFOUR format. has_ECP(self: psi4.core.BasisSet) → bool¶; Whether this basis set object has an ECP associated with it. has_puream(self: psi4.core.BasisSet) → bool¶; Spherical harmonics?. make_filename(arg0: str) → str¶; Returns filenam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html:2331,contract,contraction,2331,psi4manual/1.2.1/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html,2,['contract'],['contraction']
Integrability,"bint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4708,depend,dependencies,4708,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"bitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. Basic DFOCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced DFOCC Keywords¶. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. HESS_TYPE¶. Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/occ-1.html:14677,depend,depending,14677,psi4manual/1.3.2/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/occ-1.html,2,['depend'],['depending']
Integrability,"bjects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry]",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:13212,message,message,13212,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,2,['message'],['message']
Integrability,"ble alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below:; molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2). rows = []; table = []. set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]). import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psithoninput.html:13088,integrat,integrated,13088,psi4manual/1.7.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psithoninput.html,3,['integrat'],['integrated']
Integrability,"ble from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libefp-1.html:8623,depend,dependencies,8623,psi4manual/1.4.0/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libefp-1.html,2,['depend'],['dependencies']
Integrability,"ble from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/libefp-1.html:8623,depend,dependencies,8623,psi4manual/1.5.0/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/libefp-1.html,2,['depend'],['dependencies']
Integrability,"ble or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). which is equivalent to; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/external-1.html:2884,rout,routines,2884,psi4manual/4.0b4/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html,4,['rout'],['routines']
Integrability,"bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged; """""". def __init__(self, iteration, wfn, what, stats):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class MissingMethodError(ValidationError):; """"""Error called when method not available. """""". def __init__(self, msg):; ValidationError.__init__(self, msg); self.message = '\nMissingMethodError: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; modulemsg = ""not available""; else:; modulemsg = f""not directable to QC_MODULE '{circs[5]}'"". if len(circs) == 7:; msg = f""""""{circs[0]}: Method '{circs[1]}' with {circs[2]} '{circs[3]}', FREEZE_CORE '{not circs[6]}', and REFERENCE '{circs[4]}' {modulemsg}""""""; else:; msg = f""""""{circs[0]}: Method '{circs[1]}' with {circs[2]} '{circs[3]}' and REFERENCE '{circs[4]}' {modulemsg}""""""; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Err",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:6122,message,message,6122,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"brary developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]. Installation¶; Binary. PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, PCMSolver has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; PCMSolver can be obtained through conda install pcmsolver -c psi4.; Then enable it as a feature with ENABLE_PCMSolver,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect PCMSolver and activate dependent code. To remove a conda installation, conda remove pcmsolver. Source. If using PSI4 built from source and you want PCMSolver built from; from source also,; enable it as a feature with ENABLE_PCMSolver,; and let the build system fetch and build it and activate dependent code. Using the polarizable continuum model¶; The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in PSI4, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309],; while ddx is based on a domain decomposition approach; [Cances:2013:054111] making it linear scaling.; For more details about ddx see the section on ddx.; Using PCMsolver is achieved instead by setting PCM true in your input file.; PSI4 understands the additional option PCM_SCF_TYPE with possible values total; (the default) or separate.; The latter forces the separate handling of nuclear and electronic electrostatic potentials and; polarization charges. It is mainly useful for debugging.; For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with:; pcm = {; Medium {; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/pcmsolver.html:1529,depend,dependent,1529,psi4manual/1.7.x/pcmsolver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/pcmsolver.html,4,['depend'],['dependent']
Integrability,"brary developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]. Installation¶; Binary. PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, PCMSolver has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; PCMSolver can be obtained through conda install pcmsolver -c psi4.; Then enable it as a feature with ENABLE_PCMSolver,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect PCMSolver and activate dependent code. To remove a conda installation, conda remove pcmsolver. Source. If using PSI4 built from source and you want PCMSolver built from; from source also,; enable it as a feature with ENABLE_PCMSolver,; and let the build system fetch and build it and activate dependent code. Using the polarizable continuum model¶; The inclusion of a PCM description of the solvent into your calculation; is achieved by setting PCM true in your input file.; PSI4 understands the additional option PCM_SCF_TYPE with possible values total; (the default) or separate.; The latter forces the separate handling of nuclear and electronic electrostatic potentials and; polarization charges. It is mainly useful for debugging.; For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with:; pcm = {; Medium {; Nonequilibrium = True; }; }. Note; At present PCM can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html:1529,depend,dependent,1529,psi4manual/1.4.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html,5,['depend'],['dependent']
Integrability,"bsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""corl_xtpl_helgaker_2: datatype is not recognized '{type(valueLO)}'.""). xtpl_procedures = {; ""xtpl_highest_1"": xtpl_highest_1,; ""scf_xtpl_helgaker_2"": scf_xtpl_helgaker_2,; ""scf_xtpl_truhlar_2"": scf_xtpl_truhlar_2,; ""scf_xtpl_karton_2"": scf_xtpl_karton_2,; ""scf_xtpl_helgaker_3"": scf_xtpl_helgaker_3,; ""corl_xtpl_helgaker_2"": corl_xtpl_helgaker_2,; }. composite_procedures = {; ""sherrill_gold_standard"": sherrill_gold_standard,; ""allen_focal_point"": allen_focal_point,; }. [docs]def register_xtpl_function(func: Callable):; """"""Register a user-defined extrapolation function to use like an built-in one. Parameters; ----------; func; A Python function that applies a basis set extrapolation formula to scalars and optionally to; NumPy arrays. See :source:`psi4/driver/driver_cbs_helper.py` and :srcsample:`pywrap-cbs1` for; examples. The name of the function should follow the pattern ``<scf|corl>_xtpl_<scientist>_<#basis>``. """"""; if func.__name__.split(""_"")[-1].isdigit():; xtpl_procedures[func.__name__] = func; else:; raise ValidationError(""Extrapolation function names follow <scf|corl>_xtpl_<scientist>_<#basis>""). [docs]def register_composite_function(func: Callable):; """"""Register a user-defined composite method function to use like a built-in one. Parameters; ----------; func; A Python function that defines a configuration of the :py:func:`psi4.cbs` wrapper.; See :source:`psi4/driver/aliases.py` and :srcsample:`cbs-xtpl-nbody` for examples. """"""; composite_procedures[func.__name__] = func. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.driver_cbs_helper. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:22346,wrap,wrapper,22346,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,1,['wrap'],['wrapper']
Integrability,"but may be other when wrappers are layered.; mc_level_idx (int) – Position in field self.nbodies_per_mc_level used to obtain nbodies, the list of n-body; levels (e.g., [1] or [1, 2] or [“supersystem”]) to which the modelchem specified in kwargs applies.; That is, nbodies = self.nbodies_per_mc_level[mc_level_idx].; Note the natural 1-indexing of nbodies _contents_, so [1] covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, mc_level_lbl = mc_level_idx + 1; Formerly nlevel as in nbody = self.nbody_list[nbody_level=nlevel].; kwargs (Dict[str, Any]) – Other arguments for initializing mb_computer. In particular, specifies model chemistry. Returns; Number of new tasks planned by this call.; Formerly, didn’t include supersystem in count. Return type; count. compute(client=None)[source]¶; Run quantum chemistry. Parameters; client (Optional[FractalClient]) – . get_psi_results(return_wfn=False)[source]¶; Called by driver to assemble results into ManyBody-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: (e/g/h, wfn). Parameters; return_wfn (bool) – Whether to additionally return the dummy Wavefunction; calculation result as the second element of a tuple. Contents are:. supersystem molecule; dummy basis, def2-svp; e/g/h member data; QCVariables. Return type; Union[float, Matrix, Tuple[Union[float, Matrix], Wavefunction]]. Returns. ret – Energy, gradient, or Hessian according to self.driver.; wfn – Wavefunction described above when return_wfn specified. get_results(client=None)[source]¶; Return results as ManyBody-flavored QCSchema. Return type; AtomicResult. Parameters; client (Optional[FractalClient]) – . prepare_results(results=None, client=None)[source]¶; Process the results from all n-body component molecular systems and model chemistry levels into final quantities. Parameters. results (Optional[Dict[str, Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]]]) – A set of tasks to pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/nbody.html:7893,interface,interface,7893,psi4manual/1.6.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/nbody.html,1,['interface'],['interface']
Integrability,"bute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import. from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:1443,message,message,1443,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"bute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import; from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:1441,message,message,1441,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"by looking for assign lines, and remove them; leftover_lines = []; assignments = False; for line in command_lines:; if symbol_re.match(line):; m = symbol_re.match(line); mol.set_basis_by_symbol(m.group('symbol'), m.group('basis'), role=role); assignments = True. elif label_re.match(line):; m = label_re.match(line); mol.set_basis_by_label(m.group('label'), m.group('basis'), role=role); assignments = True. elif all_re.match(line):; m = all_re.match(line); mol.set_basis_all_atoms(m.group('basis'), role=role); assignments = True. else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if not assignments:; # case with no [basname] markers where whole block is contents of gbs file; mol.set_basis_all_atoms(name, role=role); basstrings[_basname(name)] = basblock[0]; else:; message = (; ""Conflicting basis set specification: assign lines present but shells have no [basname] label.""; """"); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; basstrings[_basname(basblock[idx])] = basblock[idx + 1]. return basstrings. anon.__name__ = 'basisspec_psi4_yo__' + cleanbas; qcdb.libmintsbasisset.basishorde[name.upper()] = anon; if set_option:; core.set_global_option(key, name). core.OEProp.valid_methods = [; 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES',; 'MBIS_CHARGES','MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS'; ]. ## Option helpers. def _core_set_global_option_python(key, EXTERN):; """"""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""; if (key != ""EXTERN""):; raise Validati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html:21692,message,message,21692,psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,4,['message'],['message']
Integrability,"c-pvdz procedure for phenol dimer from the S22 database. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. numpy-array-interface; Numpy interface testing. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. sapt-ecp; sapt0 of charged system in ECP basis set. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. casscf-sp; CASSCF/6-31G** energy point. mbis-3; MBIS calculation on OH radical. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ao-casscf-sp; CASSCF/6-31G** energy point. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. fnocc6; Test method/basis with disk_df. c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:37975,depend,dependent,37975,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['depend'],['dependent']
Integrability,"c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gcp-1.html:3584,interface,interface,3584,psi4manual/1.2.1/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gcp-1.html,2,['interface'],['interface']
Integrability,"c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV¶. Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM¶. Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE¶. Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Ty",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:11125,contract,contraction,11125,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,26,['contract'],['contraction']
Integrability,"c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. name: string, name of the functional. for custom defined functionals used for printing only.; xc_functionals: dict, definition of a complete (X + C) functional based in LibXC name; x_functionals: dict, definition of exchange functionals using LibXC names; c_functionals: dict, definition of correlation functionals using LibXC names; x_hf: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; c_mp2: dict, parameters dealing with MP2 correlation for double hybrid DFT; dispersion: dict, definition of dispersion corrections; citation: string, citation for the method, for printing purposes; description: string, description of the method, for printing purposes. The full interface is defined in; psi4/psi4/driver/procrouting/dft/dft_builder.py. All; standard functionals provided in PSI4 are implemented in the; *_functionals.py files in the same folder. """"""; Superfunctional builder function & handlers.; The new definition of functionals is based on a dictionary with the following structure; dict = {; ""name"": """", name of the functional - matched against name.lower() in method lookup. ""alias"": [""""], alternative names for the method in lookup functions, processed with .lower(). ""citation"": """", citation of the method in the standard indented format, printed in output. ""description"": """", description of the method, printed in output. ""xc_functionals"": { definition of a full XC functional from LibXC; ""XC_METHOD_NAME"": {} must match a LibXC method, see libxc_functionals.py for examples; }, if present, the x/c_functionals and x_hf/c_mp2 parameters are not read!. ""x_functionals"": { definition of X contributions; ""X_METHOD_NAME"": { must match a LibXC method; ""alpha"": 1.0, coefficient for (globa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:30157,interface,interface,30157,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['interface'],['interface']
Integrability,"c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. name: string, name of the functional. for custom defined functionals used for printing only.; xc_functionals: dict, definition of a complete (X + C) functional based in LibXC name; x_functionals: dict, definition of exchange functionals using LibXC names; c_functionals: dict, definition of correlation functionals using LibXC names; x_hf: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; c_mp2: dict, parameters dealing with MP2 correlation for double hybrid DFT; dispersion: dict, definition of dispersion corrections; citation: string, citation for the method, for printing purposes; description: string, description of the method, for printing purposes. The full interface is defined in; psi4/psi4/driver/procrouting/dft/dft_builder.py. All; standard functionals provided in PSI4 are implemented in the; *_functionals.py files in the same folder.; Superfunctional builder function & handlers.; The new definition of functionals is based on a dictionary with the following structure; dict = {; ""name"": """", name of the functional - matched against name.lower() in method lookup. ""alias"": [""""], alternative names for the method in lookup functions, processed with .lower(). ""citation"": """", citation of the method in the standard indented format, printed in output. ""description"": """", description of the method, printed in output. ""xc_functionals"": { definition of a full XC functional from LibXC; ""XC_METHOD_NAME"": {} must match a LibXC method, see libxc_functionals.py for examples; }, if present, the x/c_functionals and x_hf/c_mp2 parameters are not read!. ""x_functionals"": { definition of X contributions; ""X_METHOD_NAME"": { must match a LibXC method; ""alpha"": 1.0, coefficient for (global) G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dft-1.html:28695,interface,interface,28695,psi4manual/1.3.2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dft-1.html,2,['interface'],['interface']
Integrability,"c_path(self, fileno, path); Set the path for specific file numbers. set_specific_retention(self, fileno, retain); Set the specific file number to be retained. shared_object(); The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self, full_path, text); Write a string to a temporary file. Methods Documentation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None¶; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None¶; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. static shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; IOManager. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.IOManager.html:1931,protocol,protocol,1931,psi4manual/1.6.x/api/psi4.core.IOManager.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.IOManager.html,1,['protocol'],['protocol']
Integrability,"cal spherical harmonics (near-field FMM interations). Type: integer; Default: 6. DDX_FMM_MULTIPOLE_LMAX¶. Maximal degree of multipole spherical harmonics (far-field FMM interactions). Using the same value as DDX_LMAX is recommended and done by default. Type: integer; Default: 9. DDX_INCORE¶. Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LMAX¶. Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_MAXITER¶. Maximal number of iterations used inside DDX. Type: integer; Default: 100. DDX_MODEL¶. Switch available solvation models. Type: string; Possible Values: PCM, COSMO; Default: PCM. DDX_N_LEBEDEV¶. Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. DDX_RADII¶. Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_SOLVATION_CONVERGENCE¶. Tolerance to which DDX linear systems are solved. Type: conv double; Default: 1e-8. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. Expert¶. DDX_ETA¶. Regularization parameter for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values ar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__ddx.html:1462,depend,depends,1462,psi4manual/1.7.x/autodir_options_c/module__ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__ddx.html,1,['depend'],['depends']
Integrability,"cal-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45305,depend,depending,45305,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['depend'],['depending']
Integrability,"cal-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:38925,depend,depending,38925,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['depending']
Integrability,"call?; single_call = len(method_list) == 1; single_call &= '[' not in basis_list[0]; single_call &= ']' not in basis_list[0]. if single_call:; method_name = method_list[0]; basis = basis_list[0]. # Save some global variables so we can reset them later; optstash = p4util.OptionsState(['BASIS']); core.set_global_option('BASIS', basis); ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); if core.get_option(""SCF"", ""DF_INTS_IO"") != ""SAVE"":; core.clean(); optstash.restore(). if return_wfn:; return (ptype_value, wfn); else:; return ptype_value. # Drop out for unsupported calls; if ptype not in [""energy"", ""gradient"", ""hessian""]:; raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)). # Catch kwarg issues for CBS methods only; user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False). # If we are not a single call, let CBS wrapper handle it!; cbs_kwargs = {}; cbs_kwargs['ptype'] = ptype; cbs_kwargs['return_wfn'] = True; cbs_kwargs['molecule'] = molecule; cbs_kwargs['verbose'] = cbs_verbose. if user_dertype != None:; cbs_kwargs['dertype'] = user_dertype. # Find method and basis; metadata = []; if method_list[0] in ['scf', 'hf', 'c4-scf', 'c4-hf']:; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'scf_scheme' in kwargs:; stage['scheme'] = kwargs.pop('scf_scheme'); stage['stage'] = ""scf""; stage['treatment'] = ""scf""; else:; # _validate_cbs_inputs will produce scf stage automatically; stage = {}; stage['wfn'] = method_list[0]; stage['basis'] = basis_list[0]; if 'corl_scheme' in kwargs:; stage['scheme'] = kwargs.pop('corl_scheme'); stage['stage'] = ""corl""; stage['treatment'] = ""corl""; metadata.append(stage). # ""method/basis"" syntax only allows for one delta correction; # via ""method/basis+D:delta/basis"". Maximum length of method_list is 2.; if len(method_list) == 2:; stage = {}; stage['wfn'] = method_list[1]; stage['basis'] = basis_list[1]; if ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html:66771,wrap,wrapper,66771,psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,2,['wrap'],['wrapper']
Integrability,"cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = PsiMod.Molecule.create_molecule_from_string(new_geom); new_mol.update_geometry(); new_mol.print_out(); activate(new_mol); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monome",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:4427,wrap,wrapper,4427,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps; html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI“; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set PSIDATADIR and why; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:41952,depend,dependencies,41952,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,4,['depend'],['dependencies']
Integrability,"case, from 10.1063/1.3304922. scf-response2; Compute the dipole polarizability for water with custom basis set. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cisd-sp; 6-31G** H2O Test CISD Energy Point. tdscf-7; TD-HF test variable access. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. mints3; Test individual integral objects for correctness. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. pubchem2; Superficial test of PubChem interface. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. extern2; External potential calculation invo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:6079,interface,interface,6079,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['interface'],['interface']
Integrability,"cate an analytic procedure both exists and is wanted?; if dertype == 1:; core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). optstash.restore(); if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). else:; core.print_out(""""""gradient() will perform gradient computation by finite difference of analytic energies.\n""""""). opt_iter = kwargs.get('opt_iter', 1); if opt_iter is True:; opt_iter = 1. if opt_iter == 1:; print('Performing finite difference calculations'). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; # print(""about to generate displacements""); displacements = core.fd_geoms_1_0(moleculeclone); # print(displacements); ndisp = len(displacements); # print(""generated displacments""). # This version is pretty dependent on the reference geometry being last (as it is now); print("""""" %d displacements needed ..."""""" % (ndisp), end=''); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if opt_mode == 'sow':; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO +=",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:38710,depend,dependent,38710,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['depend'],['dependent']
Integrability,"cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7380,rout,routing,7380,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['rout'],['routing']
Integrability,"cbs_gufunc_string(method_name):; method_name_list = re.split( """"""\+(?![^\[\]]*\]|[^\(\)]*\))"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(""""""CBS gufunc: Too many brackets given! %s """""" % method_str). if method_str.count('/') != 1:; raise ValidationError(""""""CBS gufunc: All methods must specify a basis with '/'. %s"""""" % method_str). if num > 0:; method_str = method_str.strip(); if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; Text based wrapper of the CBS function.; """""". # Catch kwarg issues; kwargs = p4util.kwargs_lower(kwargs); return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); user_dertype = kwargs.pop('dertype', None); cbs_verbose = kwargs.pop('cbs_verbose', False); ptype = kwargs.pop('ptype', None). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Sanitize total_method_name; label = total_method_name; total_method_name = total_method_name.lower(); total_method_name = total_method_name.replace(' ', ''). # Split into components; method_list, basis_list = _parse_cbs_gufunc_string(total_method_name). # Single energy call?; single_call = len(method_list) == 1; single_call &= '[' not in basis_list[0]; single_call &= ']' not in basis_list[0]. if single_call:; method_name = method_list[0]; basis = basis_list[0]. # Save some global variables so we can reset them later; optstash ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html:57711,wrap,wrapper,57711,psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:25163,depend,depend,25163,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['depend'],['depend']
Integrability,"cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). """""". ## Aliases ##; complete_basis_set = cbs. # LAB: below is a piece of pre-class cbs() that didn't make the transition. it has details, so preserving for future revival; #; # #psioh = core.IOManager.shared_object(); # #psioh.set_specific_retention(psif.PSIF_SCF_MOS, True); # # projection across point groups not allowed and cbs() usually a mix of symm-enabled and symm-tol calls; # # needs to be communicated to optimize() so reset by that optstash; # core.set_local_option('SCF', 'GUESS_PERSIST', True); #; # # Run necessary computations; # for mc in JOBS:; # kwargs['name'] = mc['f_wfn']; #; # # Build string of molecule and commands that are dependent on the database; # commands = '\n'; # commands += """"""\ncore.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); # commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; # (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()); # exec(commands); #; # psioh.set_specific_retention(psif.PSIF_SCF_MOS, False). def _expand_scheme_orders(scheme: str, basisname: List[str], basiszeta: List[int], wfnname: str, options: Dict) -> Dict[str, Dict[str, Any]]:; """"""Check that the length of *basiszeta* array matches the implied degree of; extrapolation in *scheme* name. Return a dictionary of same length as; basiszeta, with *basisname* and *basiszeta* distributed therein. """"""; Nxtpl = len(basiszeta). try:; scheme.split(); except AttributeError:; raise UpgradeHelper(scheme, repr(scheme.__name__), 1.6, ' Replace extrapolation function with funct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html:36264,depend,dependent,36264,psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html,2,['depend'],['dependent']
Integrability,"cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. scf-auto-cholesky; Cholesky filter a complete basis. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:45604,depend,dependencies,45604,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['depend'],['dependencies']
Integrability,"cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dft3; DFT in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:9108,wrap,wrappers,9108,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['wrap'],['wrappers']
Integrability,"ccess. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cepa-module; routing check on lccd, lccsd, cepa(0). scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunction",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:29060,rout,routing,29060,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['rout'],['routing']
Integrability,"cdb.molparse.from_arrays`. Returns; -------; :py:class:`psi4.core.Molecule`. """"""; molrec = qcdb.molparse.from_arrays(geom=geom,; elea=elea,; elez=elez,; elem=elem,; mass=mass,; real=real,; elbl=elbl,; name=name,; units=units,; input_units_to_au=input_units_to_au,; fix_com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; molecular_charge=molecular_charge,; molecular_multiplicity=molecular_multiplicity,; domain='qm',; missing_enabled_return=missing_enabled_return,; tooclose=tooclose,; zero_ghost_fragments=zero_ghost_fragments,; nonphysical=nonphysical,; mtol=mtol,; verbose=verbose); if return_dict:; return core.Molecule.from_dict(molrec), molrec; else:; return core.Molecule.from_dict(molrec). @classmethod; def molecule_from_schema(cls, molschema, return_dict=False, verbose=1):; """"""Construct Molecule from non-Psi4 schema. Light wrapper around :py:func:`~psi4.core.Molecule.from_arrays`. Parameters; ----------; molschema : dict; Dictionary form of Molecule following known schema.; return_dict : bool, optional; Additionally return Molecule dictionary intermediate.; verbose : int, optional; Amount of printing. Returns; -------; mol : :py:class:`psi4.core.Molecule`; molrec : dict, optional; Dictionary representation of instance.; Only provided if `return_dict` is True. """""". if (molschema.get('schema_name', '').startswith('qc_schema') and; (molschema.get('schema_version', '') == 1)):; # Lost Fields; # -----------; # * 'comment'; # * 'provenance'; ms = molschema['molecule']. if 'fragments' in ms:; frag_pattern = ms['fragments']; else:; frag_pattern = [np.arange(len(ms['symbols']))]. dcontig = qcdb.Molecule.contiguize_from_fragment_pattern(frag_pattern,; geom=ms['geometry'],; elea=None,; elez=None,; elem=ms['symbols'],; mass=ms.get('masses', None),; real=ms.get('real', None),; elbl=None,; throw_reorder=True). molrec = qcdb.molpa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/molutil.html:4617,wrap,wrapper,4617,psi4manual/1.2.1/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/molutil.html,1,['wrap'],['wrapper']
Integrability,"ce between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (“omega”) functionals. Insofar as faulty answers are; anticipated with INTEGRAL_PACKAGE erd, PSI4 will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. Installation¶; Binary. ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/erd-1.html:1686,depend,dependent,1686,psi4manual/1.1.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/erd-1.html,2,['depend'],['dependent']
Integrability,"ce, cols: psi4.core.Slice, block: psi4.core.Matrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the tran",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Matrix.html:16462,depend,depending,16462,psi4manual/1.7.x/api/psi4.core.Matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Matrix.html,4,['depend'],['depending']
Integrability,"ce]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with keys of most Cfour methods and values of dicts; with the PSI Variables returned by those methods. Used by cbs(); wrapper to avoid unnecessary computations in compound methods.; Result is appended to VARH. format_fjobarc(energy, map, elem, coordinates, gradient, dipole)[source]¶; Takes the key results from a gradient computation (energy,; element Z list elem, coordinates, gradient,; dipole, and atom ordering map) and writes a string fja; that exactly mimics the contents of a Cfour FJOBARC file. harvest(p4Mol, c4out, **largs)[source]¶; Parses all the pieces of output from Cfour: the stdout in; c4out and the contents of various scratch files like GRD stored; in their namesake keys in largs. Since all Cfour output uses; its own orientation and atom ordering for the given molecule,; a qcdb.Molecule p4Mol, if supplied, is used to transform the; Cfour output back into consistency with p4Mol. harvest_DIPOL(dipol)[source]¶; Parses the contents dipol of the Cfour DIPOL file into a dipol vector. harvest_FCM(fcm)[source]¶; Parses the contents fcm of the Cfour FCMFINAL file into a hessian array. harvest_GRD(grd)[source]¶; Parses th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:25046,wrap,wrapper,25046,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['wrap'],['wrapper']
Integrability,"cense along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core; from psi4 import extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Parameters; ----------; eqn_description : str; Type of QC routine that has failed (e.g., SCF); iteration : int; What iteration we failed on. """""". def __init__(self, eqn_description, iteration):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, iteration); PsiException.__init__(self, msg); self.iteration = iteration; self.m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:1965,depend,dependencies,1965,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['depend'],['dependencies']
Integrability,"ces.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry),; expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label, rtol=1.e-16):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:11122,message,message,11122,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ces.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" %; (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:11023,message,message,11023,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"cessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:3941,interface,interface,3941,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['interface'],['interface']
Integrability,"cf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; name = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). [docs]def allen_focal_point(name='mp2', **kwargs):; r""""""Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; :py:func:`~wrappers.complete_basis_set` to evaluate the following; expression. SCF employs a three-point extrapolation according; to :py:func:`~wrappers.scf_xtpl_helgaker_3`. MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; :py:func:`~wrappers.corl_xtpl_helgaker_2`. CCSDT and CCSDT(Q); are plain deltas. This wrapper requires :ref:`Kallay's MRCC code <sec:mrcc>`. .. math:: E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. # SCF; if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'cc-pV[Q56]Z'; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:3727,wrap,wrappers,3727,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['wrap'],['wrappers']
Integrability,"ch are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule nam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:13407,message,message,13407,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). frac-sym; Fractional occupation with symmetry. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. options1; check all variety of options parsing. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. mbis-2; MBIS calculation on OH- (Expanded Arrays). scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fnocc3; Test FNO-QCISD(T) computation. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. cepa-module; routing check on lccd, lccsd, cepa(0). opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. aediis-2; EDIIS test case from 10.1063/1.1470195. cc56; EOM-CCSD/6-31g excited state transition data for water cation. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:22320,rout,routing,22320,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['rout'],['routing']
Integrability,"character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical ha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html:1354,contract,contraction,1354,psi4manual/1.5.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html,5,['contract'],['contraction']
Integrability,"character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical ha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html:1354,contract,contraction,1354,psi4manual/1.4.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html,1,['contract'],['contraction']
Integrability,"chem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""hessian"", lowername, molecule, **kwargs); logger.debug('HESSIAN PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 2nd derivative. _filter_renamed_methods(""frequency"", lowername); core.clean_variables(). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util.negotiate_convergence_criterion((2, 2), lowername, return_optstash=True). # At stationary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwargs['ref_gradient']; else:; tmpkwargs = copy.deepcopy(kwargs); tmpkwargs.pop('dertype', None); G0 = gradient(lowername, molecule=molecule, **tmpkwargs); translations_projection_sound, rotations_projection_sound = _energy_is_invariant(G0.rms()); core.print_out(; '\n Based on options and gradient (rms={:.2E}), recommend {}projecting translations and {}projecting rotations.\n'; .format(G0.rms(), '' if translations_projection_sound else 'not ',; '' if rotations_projection_sound else 'not ')); if not core.has_option_changed('FINDIF', 'FD_PROJECT'):; core.set_local_option('FINDIF', 'FD_PROJECT', rotations_projection_sound). # We have the desired method. Do it.; logger.info(f""Compute hessian(): method={lowername},",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:72695,depend,dependent,72695,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,5,['depend'],['dependent']
Integrability,"ci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). """"""; kwargs = p4util.kwargs_lower(kwargs). # Bounce to MDI (MolSSI driver interface) if mdi kwarg; use_mdi = kwargs.pop('mdi', False); if use_mdi:; return mdi_run(name, **kwargs). core.print_out(""\nScratch directory: %s\n"" % core.IOManager.shared_object().get_default_path()). basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name). _filter_renamed_methods(""energy"", lowername). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""energy"", lowername, molecule, **kwargs); logger.debug('ENERGY PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:36661,interface,interface,36661,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,4,['interface'],['interface']
Integrability,"cient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html:3078,contract,contraction,3078,psi4manual/1.3.2/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.gaussianshell.html,2,['contract'],['contraction']
Integrability,"cies. frequency(name, **kwargs); Function to compute harmonic vibrational frequencies. gdma(wfn[, datafile]); Function to use wavefunction information in wfn and, if specified, additional commands in filename to run GDMA analysis with A. geometry(geom[, name]); Function to create a molecule object of name name from the geometry in string geom. get_memory(); Return the total memory allocation in bytes. gradient(name, **kwargs); Function complementary to optimize(). hessian(name, **kwargs); Function complementary to frequency(). ipi_broker(LOT[, molecule, serverdata, options]); Runs IPIBroker to connect to i-PI (https://ipi-code.org/). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. libint2_configuration(); Returns information on integral classes, derivatives, and AM from currently linked Libint2. libint2_print_out(). mdi_run(scf_method, **kwargs); Begin functioning as an MDI (MolSSI driver interface) engine. message_box(message[, max_width, min_width]); Put a message string into a box for extra attention. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Helper to specify the multiline PCMSolver syntax for PCM. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_method",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psi4api.html:18767,message,message,18767,psi4manual/master/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/master/psi4api.html,2,['message'],['message']
Integrability,"cified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html:8579,integrat,integration,8579,psi4manual/1.1.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html,2,['integrat'],['integration']
Integrability,"cited states). Response properties can be obtained; by calling the function properties() (instead of, for example, energy(),; e.g., properties('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cc-1.html:5098,depend,depending,5098,psi4manual/1.4.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cc-1.html,5,['depend'],['depending']
Integrability,"ck Installation),; erd can be obtained through conda install erd.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/erd-1.html:2833,depend,dependencies,2833,psi4manual/1.1.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/erd-1.html,2,['depend'],['dependencies']
Integrability,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:5676,message,message,5676,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,6,['message'],['message']
Integrability,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/tutorial-1.html:4849,message,message,4849,psi4manual/4.0b2/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html,4,['message'],['message']
Integrability,"clear() LibmintsMolecule method. clone() CartesianEntry method. LibmintsMolecule method. NumberValue method. VariableValue method. ZMatrixEntry method. COLLAPSE_SIZE (DETCI). COLLAPSE_WITH_LAST (CCEOM). compare_integers() in module util. compare_matrices() in module qcdb.psiutil. in module util. compare_strings() in module util. compare_values() in module qcdb.psiutil. in module util. compare_vectors() in module util. compilers. compiling. complete_basis_set(); . see cbs(); . complete_basis_set() in module wrappers. COMPLEX_TOLERANCE (CCEOM). compute() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. COMPUTE_MP4_TRIPLES (FNOCC). COMPUTE_TRIPLES (FNOCC). CONSECUTIVE_BACKSTEPS (OPTKING). contact. convert() in module wrappers. CoordEntry class in qcdb.libmintscoordentry. CoordValue class in qcdb.libmintscoordentry. copy() Table method. copy_file_from_scratch() in module util. copy_file_to_scratch() in module util. CORE module, [1]. corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OCC). D. d() CoordEntry static method. D_CONVERGENCE (DFTSAPT). (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). dash_server() in module dashparam. dashparam module. database(). adding new. available. output. setting keywords. database() in module wrappers. db()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:14603,wrap,wrappers,14603,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"code for psi4.driver.aliases; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. import os; import re; import warnings; from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>>",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html:1136,wrap,wrappers,1136,psi4manual/1.7.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"code for psi4.driver.aliases; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html:1138,wrap,wrappers,1138,psi4manual/1.9.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"code for psi4.driver.aliases; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. import os; import re; import warnings; from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>>",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/aliases.html:1138,wrap,wrappers,1138,psi4manual/1.8.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"code for psi4.driver.aliases; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2024 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with high-level functions calling wrappers and driver. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """""". __all__ = [; ""allen_focal_point"",; ""fake_file11"",; ""sherrill_gold_standard"",; ]. from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn: ""psi4.core.Wavefunction"", filename: str = 'fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :param filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/aliases.html:1145,wrap,wrappers,1145,psi4manual/master/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2017 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """"""; from __future__ import absolute_import; import re; import os; import math; from psi4.driver import *. class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/qmmm.html:1091,integrat,integrate,1091,psi4manual/1.1.0/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2018 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """"""; from __future__ import absolute_import. from psi4.driver import *. class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/qmmm.html:1093,integrat,integrate,1093,psi4manual/1.2.1/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2019 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4.driver import *. class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). core.set_global_option(""BASIS"", self.basisn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/qmmm.html:1093,integrat,integrate,1093,psi4manual/1.3.2/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2021 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4.driver import *. class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). core.set_global_option(""BASIS"", self.basisn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qmmm.html:1109,integrat,integrate,1109,psi4manual/1.4.0/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qmmm.html,2,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4.driver import *. class Diffuse():. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). core.set_global_option(""BASIS"", self.basisname); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qmmm.html:1109,integrat,integrate,1109,psi4manual/1.7.x/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4.driver import *. class Diffuse(object):. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). core.set_global_option(""BASIS"", self.basisn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/qmmm.html:1109,integrat,integrate,1109,psi4manual/1.6.x/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4 import core. from .driver import *; from .p4util.exceptions import UpgradeHelper. class Diffuse():. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determine",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qmmm.html:1111,integrat,integrate,1111,psi4manual/1.9.x/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4.driver import *. class Diffuse():. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). core.set_global_option(""BASIS"", self.basisname); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qmmm.html:1111,integrat,integrate,1111,psi4manual/1.8.x/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code for psi4.driver.qmmm; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2024 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with classes to integrate MM charges into; a QM calculation. """""". from psi4 import core. from .driver import *; from .p4util.exceptions import UpgradeHelper. class Diffuse():. def __init__(self, molecule, basisname, ribasisname):. self.molecule = molecule; self.basisname = basisname; self.ribasisname = ribasisname; self.basis = None; self.ribasis = None; self.da = None; self.Da = None; self.wfn = None. def __str__(self):. s = ' => Diffuse <=\n\n'; s = s + ' ' + str(self.molecule) + '\n'; s = s + ' ' + self.basisname + '\n'; s = s + ' ' + self.ribasisname + '\n'; s = s + '\n'. return s. def fitScf(self):; """"""Function to run scf and fit a system of diffuse charges to; resulting density. """"""; basisChanged = core.has_option_changed(""BASIS""); ribasisChanged = core.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = core.has_option_changed(""SCF_TYPE""). basis = core.get_option(""BASIS""); ribasis = core.get_option(""DF_BASIS_SCF""); scftype = core.get_global_option(""SCF_TYPE""). core.print_out("" => Diffuse SCF (Determine",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/qmmm.html:1118,integrat,integrate,1118,psi4manual/master/_modules/psi4/driver/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/qmmm.html,1,['integrat'],['integrate']
Integrability,"code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ERD by N. Flocke and V. Lotrich. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/erd.html:3118,depend,dependencies,3118,psi4manual/1.8.x/erd.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/erd.html,1,['depend'],['dependencies']
Integrability,"code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ERD by N. Flocke and V. Lotrich. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/erd.html:3118,depend,dependencies,3118,psi4manual/1.9.x/erd.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/erd.html,1,['depend'],['dependencies']
Integrability,cognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)). if 'delta2_wfn_lesser' in kwargs:; cbs_delta2_wfn_lesser = kwargs['delta2_wfn_lesser'].lower(); else:; cbs_delta2_wfn_lesser = 'mp2'; if not (cbs_delta2_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA2 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn_lesser)). # Establish method for third delta correction energy; if 'delta3_wfn' in kwargs:; do_delta3 = 1; cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); if not (cbs_delta3_wfn in VARH.keys()):; raise ValidationError('Requested DELTA3 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta3_wfn)). if 'delta3_wfn_lesser' in kwargs:; cbs_delta3_wfn_lesser = kwargs['delta3_wfn_lesser'].lower(); else:; cbs_delta3_wfn_lesser = 'mp2'; if not (cbs_delta3_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA3 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta3_wfn_lesser)). # Establish method for fourth delta correction energy; if 'delta4_wfn' in kwargs:; do_delta4 = 1; cbs_delta4_wfn = kwargs['delta4_wfn'].lower(); if not (cbs_delta4_wfn in VARH.keys()):; raise ValidationError('Requested DELTA4 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn)). if 'delta4_wfn_lesser' in kwargs:; cbs_delta4_wfn_lesser = kwargs['delta4_wfn_lesser'].lower(); else:; cbs_delta4_wfn_lesser = 'mp2'; if not (cbs_delta4_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA4 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn_lesser)). # Establish method for fifth delta correction energy; if 'delta5_wfn' in kwargs:; do_delta5 = 1; cbs_delta5_wfn = kwargs['delta5_wfn'].lower(); if not (cbs_delta5_wfn in VARH.keys()):; raise ValidationError('Requested DELTA5 method \'%s\' is not recognized. Add it to VARH in wrapper.py to,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:72770,wrap,wrapper,72770,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,cognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn)). if 'delta4_wfn_lesser' in kwargs:; cbs_delta4_wfn_lesser = kwargs['delta4_wfn_lesser'].lower(); else:; cbs_delta4_wfn_lesser = 'mp2'; if not (cbs_delta4_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA4 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta4_wfn_lesser)). # Establish method for fifth delta correction energy; if 'delta5_wfn' in kwargs:; do_delta5 = 1; cbs_delta5_wfn = kwargs['delta5_wfn'].lower(); if not (cbs_delta5_wfn in VARH.keys()):; raise ValidationError('Requested DELTA5 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta5_wfn)). if 'delta5_wfn_lesser' in kwargs:; cbs_delta5_wfn_lesser = kwargs['delta5_wfn_lesser'].lower(); else:; cbs_delta5_wfn_lesser = 'mp2'; if not (cbs_delta5_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA5 method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta5_wfn_lesser)). # Check that user isn't skipping steps in scf + corl + delta + delta2 sequence; if do_scf and not do_corl and not do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and not do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and not do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and do_delta2 and not do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and do_delta2 and do_delta3 and not do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and do_delta2 and do_delta3 and do_delta4 and not do_delta5:; pass; elif do_scf and do_corl and do_delta and do_delta2 and do_delta3 and do_delta4 and do_delta5:; pass; else:; raise ValidationError('Requested scf (%s) + corl (%s) + delta (%s) ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:74077,wrap,wrapper,74077,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; return_processed=False,; enable_qm=enable_qm,; enable_efp=enable_efp,; missing_enabled_return_qm=missing_enabled_return_qm,; missing_enabled_return_efp=missing_enabled_return_efp,; verbose=verbose); if return_dict:; return core.Molecule.from_dict(molrec['qm']), molrec; else:; return core.Molecule.from_dict(molrec['qm']). @classmethod; def molecule_from_arrays(cls,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,. name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,. fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,. molecular_charge=None,; molecular_multiplicity=None,. missing_enabled_return='error',; tooclose=0.1,; zero_ghost_fragments=False,; nonphysical=False,; mtol=1.e-3,; verbose=1,. return_dict=False):; """"""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcdb.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcdb.molparse.from_arrays`. Returns; -------; :py:class:`psi4.core.Molecule`. """"""; molrec = qcdb.molparse.from_arrays(geom=geom,; elea=elea,; elez=elez,; elem=elem,; mass=mass,; real=real,; elbl=elbl,; name=name,; units=units,; input_units_to_au=input_units_to_au,; fix_com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; molecular_charge=molecular_charge,; molecular_multiplicity=molecular_multiplicity,; domain='qm',; missing_enabled_return=missing_enabled_return,; tooclose=tooclose,; zero_ghost_fragments=zero_ghost_fragments,; nonphysical=nonphysical,; mtol=mtol,; verbose=verbose); if return_dict:; return core.Molecule.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/molutil.html:3394,wrap,wrapper,3394,psi4manual/1.2.1/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/molutil.html,1,['wrap'],['wrapper']
Integrability,"computed = np.asarray(computed); shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[en",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:13103,message,message,13103,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20DISP¶. For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND¶. For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_MEM_FACTOR¶. Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. Expert SAPT(DFT)¶. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA¶. Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS¶. Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF¶. Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. table of contents. SAPT; SAPT(HF); AIO_CPHF; AIO_DF_INTS; BASIS; CCD_E_CONVERGENCE; CCD_MAXITER; CCD_T_CONVERGENCE; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; EXCH_SCALE_ALPHA; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; MAX_CCD_DIISVECS; MIN_CCD_DIISVECS; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY. SAPT(DFT); SAPT_DFT_DO_DHF; SAPT_DFT_GRAC_DETERMINATION; SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B. Expert SAPT(HF); COUPLED_INDUCTION; DO_CCD_DISP; DO_IND_EXCH_SINF; DO_MBPT_DISP; DO_THIRD_ORDER;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__sapt-1.html:7061,integrat,integration,7061,psi4manual/1.3.2/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__sapt-1.html,4,['integrat'],['integration']
Integrability,"computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:15888,message,messages,15888,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['message'],['messages']
Integrability,"computed.print_out(); psi4.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label). [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2: ; TestComparisonError(""Input shapes do not match.""). if not np.allclose(expected, computed, atol=digits):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label). [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filena",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:9286,message,message,9286,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['message'],['message']
Integrability,"conda environment “p4env” instead of “root”. Second command only works on bash; for csh/tsch, setenv PATH /path/to/miniconda/envs/p4env/bin:$PATH instead. This creates a sandbox with just PSI4 and python (loaded as dependency).; 1; 2>>> conda create -y -n p4env psi4; >>> source activate p4env. Install a particular PSI4 version; 1>>> conda install psi4=0.1.12. Uninstall PSI4 from current environment; 1>>> conda remove psi4. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; libpython linked against conda python not system python; libm is linked against conda or system; blas, c++, and gcc libraries are absent because statically linked. 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> conda install conda-build # needed for next command; >>> conda inspect linkages psi4; python-2.7.9-2:; libpython2.7.so.1.0 (lib/libpython2.7.so.1.0); system-5.8-1:; libm.so.6 (lib/libm.so.6); system:; libc.so.6 (/lib64/libc.so.6); libdl.so.2 (/lib64/libdl.so.2); libpthread.so.0 (/lib64/libpthread.so.0); librt.so.1 (/lib64/librt.so.1); libutil.so.1 (/lib64/libutil.so.1); linux-vdso.so.1 (); not found:. table of contents. Conda Binary Distribution; How to install a Psi4 bi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:19329,rout,routine,19329,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['rout'],['routine']
Integrability,"conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:53016,integrat,integration,53016,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['integrat'],['integration']
Integrability,"convert(i,symbol):; Queue.append(i) # if you find you, put it in the que; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[frag].append(int(u + 1)) # add to group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:3992,wrap,wrappers,3992,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,2,['wrap'],['wrappers']
Integrability,"core.Dispersion, arg0: psi4.core.Molecule) → str¶; docstring. print_hessian(self: psi4.core.Dispersion, arg0: psi4.core.Molecule) → str¶; docstring. print_out(self: psi4.core.Dispersion) → None¶; docstring. s6(self: psi4.core.Dispersion) → float¶; docstring. s8(self: psi4.core.Dispersion) → float¶; docstring. set_bibtex(self: psi4.core.Dispersion, arg0: str) → None¶; Set the BibTeX key for the literature reference. set_citation(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. set_description(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. set_name(self: psi4.core.Dispersion, arg0: str) → None¶; docstring. sr6(self: psi4.core.Dispersion) → float¶; docstring. class psi4.core.ERI¶; Bases: psi4.core.TwoBodyAOInt; Computes normal two electron reuplsion integrals. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. class psi4.core.ESPPropCalc¶; Bases: psi4.core.Prop; ESPPropCalc gives access to routines calculating the ESP on a grid. compute_esp_over_grid_in_memory(self: psi4.core.ESPPropCalc, arg0: psi::Matrix) → psi::Vector¶; Computes ESP on specified grid Nx3 (as SharedMatrix). class psi4.core.ElectricFieldInt¶; Bases: psi4.core.OneBodyAOInt; Computes electric field integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which the one body ints are being computed. class psi4.core.ElectrostaticInt¶; Bases: psi4.core.OneBodyAOInt; Computes electrostatic integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → None¶; Compute integrals between basis functions in the given shell pair. origin¶; The origin about which ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:82151,rout,routines,82151,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['rout'],['routines']
Integrability,"core.HF method). print_rotational_constants() (psi4.core.Molecule method). print_stability_analysis() (psi4.core.HF method). print_tensor_pqQ() (psi4.core.FDDS_Dispersion method). print_trailer() (psi4.core.FISAPT method). PRINT_TRAJECTORY_XYZ_FILE (OPTKING). print_variables() (in module psi4.core). print_vector() (psi4.core.CIWavefunction method). print_vibs() (in module psi4.driver.qcdb.vib). priority (psi4.driver.AtomicComputer attribute). PROCESS_GRID (SCF). process_input() (in module psi4.driver). (in module psi4.driver.inputparser). project_densities() (psi4.core.FDDS_Dispersion method). Prop (class in psi4.core). prop(). . see properties(). prop() (in module psi4.driver). PROP_ALL (CCDENSITY). (CCLAMBDA). PROP_ROOT (CCDENSITY). (CCEOM). (CCLAMBDA). PROP_SYM (CCDENSITY). (CCEOM). (CCLAMBDA). PROPERTIES (GLOBALS). properties(). ; setting keywords. properties() (in module psi4.driver). (psi4.core.VBase method). PROPERTIES_ORIGIN (GLOBALS). PROPERTY (CCENERGY). (CCRESPONSE). protocols (psi4.driver.AtomicComputer attribute). ProtoIntVector (class in psi4.core). ProtoVector (class in psi4.core). provenance() (psi4.core.Molecule method). provenance_stamp() (in module psi4.driver.p4util). pseudoinverse() (psi4.core.Matrix method). psi4 command line option. ; --append. --help. --inplace. --input. --loglevel. --memory. --messy. --module. --nthread. --output. --psiapi-path. --psidatadir. --qcschema. --schema. --scratch. --skip-preprocessor. --test. --verbose. --version. -a. -h. -i. -k. -l. -m. -n. -o. -s. -t. -v. -V. psi4.core. ; module. psi4.driver. ; module. psi4.driver.p4util. ; module. psi4.driver.qcdb.vib. ; module. PSI4FOCKCI. psi4rc. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. psi_top_srcdir() (in module psi4.core). psiclean() (psi4.core.IOManager method). PSIDATADIR, [1], [2], [3], [4], [5], [6], [7], [8]. PsiException. psimrcc() (in module psi4.core). psio_entry (class in psi4.core). psioh. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/genindex.html:94699,protocol,protocols,94699,psi4manual/1.9.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/genindex.html,2,['protocol'],['protocols']
Integrability,"core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi4.core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float = 1e-06) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = ri_space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(combined: psi4.core.BasisSet, lindep_tol: float = 1e-06) → psi4.core.OrbitalSpace¶; Given combined basis sets, it constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, combined, is the two basis sets together but unorthogonalized The second argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. table of contents. OrbitalSpace; OrbitalSpace; OrbitalSpace.C(); OrbitalSpace.basisset(); OrbitalSpace.build_cabs_space(); OrbitalSpace.build_ri_space(); OrbitalSpace.dim(); OrbitalSpace.evals(); OrbitalSpace.id(); OrbitalSpace.integral(); OrbitalSpace.name(); OrbitalSpace.nirrep(); OrbitalSpace.print_out(). «; hide menu. menu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html:2155,depend,dependencies,2155,psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.OrbitalSpace.html,2,['depend'],['dependencies']
Integrability,"corl_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed :py:func:`~psi4.driver.driver_cbs.corl_xtpl_helgaker_2` correlation; extrapolation to the corl stage. The supplied \alpha does not impact delta or any further stages. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs.corl_xtpl_helgaker_2`. :type delta_alpha: float; :param delta_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed; :py:func:`~psi4.driver.driver_cbs.corl_xtpl_helgaker_2` correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different \alpha might; be more appropriate. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs.corl_xtpl_helgaker_2`. * Combined interface; ; :type cbs_metadata: List[Dict]; :param cbs_metadata: |dl| autogenerated from above keywords |dr| || ``[{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}]`` || etc. This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. * ```wfn```: typically ```HF```, which is subsumed in correlated methods anyway.; * ```basis```: basis set, can be in a bracketed form (eg. ```cc-pv[tq]z```). | Other supported arguments for the first dictionary are:. * ```scheme```: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as ```basis```.; * ```alpha```: alpha for the above scheme, if the default is to be overriden; * ```options```: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both ```options``` and ```options_lo```. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise no",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html:43242,interface,interface,43242,psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_cbs.html,3,['interface'],['interface']
Integrability,corl_xtpl_helgaker_2() in module wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OCC). D. d() CoordEntry static method. D_CONVERGENCE (DFTSAPT). (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). dash_server() in module dashparam. dashparam module. database(). adding new. available. output. setting keywords. database() in module wrappers. db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DCFT. theory. DCFT_FUNCTIONAL (DCFT). DCFT_GUESS (DCFT). deactivate_all_fragments() LibmintsMolecule method. DEBUG (CPHF). (DFTSAPT). (GLOBALS). DELETE_AO (TRANSQT). DELETE_RESTR_DOCC (TRANSQT). DELETE_TEI (TRANSQT2). DELETE_TPDM (TRANSQT). DENOMINATOR_ALGORITHM (SAPT). DENOMINATOR_DELTA (SAPT). density-fitting; . CCSD(T). MP2. DERTYPE (GLOBALS). DETCI_FREEZE_CORE (DETCI). determinant() in module qcdb.vecutil. DF-CCSD(T). DF-MP2. theory. DF_BASIS_CC (FNOCC). DF_BASIS_ELST (DFTSAPT). (SAPT). DF_BASIS_GUESS (SCF). DF_BASIS_MP2 (DFMP2). (LMP2). DF_BASIS_SAPT (DFTSAPT). (SAPT). DF_BASIS_SCF (CPHF). (SCF). DF_FITTING_CONDITION (SCF). DF_INTS_IO (DFMP2). (SCF). DF_INTS_NUM_THREADS (DFMP2). (SCF). DF_LMP2 (LMP2). DF_SCF_GUESS (SCF). DFCC (FNOCC). DFMP2_MEM_FACTOR (DFMP2). DFMP2_P2_TOLERANCE (DFMP2). DFMP2_P_TOLERANCE (DFMP2). DFT. ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:15577,wrap,wrappers,15577,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:14580,wrap,wrapper,14580,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,4,['wrap'],['wrapper']
Integrability,"correlation energy: %16.8f\n"""""" % (ce_mp3); # psi4.print_out(tables); #; # return e_mp25. # A direct translation of a plugin input file into a function call. Function calls are the only; # way to call plugins in sow/reap mode for db(), opt(), etc. This isn't best practices; # but is an example of what to do for a more complicated procedure where different options; # are set for different qc steps.; #def run_plugin_omega(name, **kwargs):; # r""""""Function encoding sequence of PSI module and plugin calls, as well; # as typical options, to access Rob Parrish's omega plugin.; #; # >>> energy('plugin_omega'); #; # """"""; # lowername = name.lower(); # kwargs = p4util.kwargs_lower(kwargs); #; # plugfile = psi4.Process.environment[""PSIDATADIR""] + ""/../tests/plugin_omega/plugin_omega.so""; # psi4.plugin_load(""%s"" % (plugfile)); #; # psi4.set_global_option('BASIS', 'AUG-CC-PVDZ'); # psi4.set_global_option('DF_BASIS_SCF', 'AUG-CC-PVDZ-RI'); # psi4.set_global_option('REFERENCE', 'UHF'); # psi4.set_global_option('SCF_TYPE', 'DF'); # energy('scf', **kwargs); #; # psi4.set_global_option('dft_functional', 'wB97'); # psi4.set_global_option('dft_order_spherical', 25); # psi4.set_global_option('dft_num_radial', 35); # psi4.set_global_option('omega_procedure', 'ip'); # psi4.set_global_option('maxiter', 50); # psi4.set_global_option('d_convergence', 5); # psi4.set_global_option('e_convergence', 7); # psi4.plugin(""plugin_omega.so""); #; # return psi4.get_variable('SCF TOTAL ENERGY'). # Integration with driver routines; #procedures['energy']['mp2.5'] = run_mp2_5; procedures['energy']['sherrill_gold_standard'] = sherrill_gold_standard; procedures['energy']['allen_focal_point'] = allen_focal_point; #procedures['energy']['plugin_omega'] = run_plugin_omega. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:9609,rout,routines,9609,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['rout'],['routines']
Integrability,"couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_DIPOLE (SCF); SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:184154,integrat,integration,184154,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,6,['integrat'],['integration']
Integrability,"coupled cluster linear response is provided in Appendix CCRESPONSE.; The most important keywords associated with CC-LR calculations are as follows. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cc-1.html:10667,depend,dependent,10667,psi4manual/1.1.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cc-1.html,2,['depend'],['dependent']
Integrability,"covery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ...; int n = 100;. // Allocate A matrix;; double** A = block_matrix(n,n);. // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major order; // The result fills like:; // * * * *; // * * *; // * *; // *; // instead of the expected:; // *; // * *; // * * *; // * * * *; //; int info = C_DPOTRF('L', n, A[0], n);. // A bit painful, see below; fprintf(outfile, ""A:\n"");; print_mat(A,n,n,outfile);. // Block matrix should be free_blocked; free_block(A);. Important Lapack Routines¶. DSYEV: Eigenvalues and, optionally eigenvectors of a symmetric matrix. Eigenvectors take up to 10x longer than eigenvalues.; DGEEV: Eigenvalues and, optionally eigenvectors ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:5581,rout,routines,5581,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,18,['rout'],"['routine', 'routines']"
Integrability,"covery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ...; int n = 100;. // Allocate A matrix;; double** A = block_matrix(n,n);. // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major order; // The result fills like:; // * * * *; // * * *; // * *; // *; // instead of the expected:; // *; // * *; // * * *; // * * * *; //; int info = C_DPOTRF('L', n, A[0], n);. // A bit painful, see below; fprintf(outfile, ""A:\n"");; print_mat(A,n,n,outfile);. // Block matrix should be free_blocked; free_block(A);. Important Lapack Routines¶. DSYEV: Eigenvalues and, optionally eigenvectors of a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:5705,rout,routines,5705,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,8,['rout'],"['routine', 'routines']"
Integrability,"cription, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class TDSCFConvergenceError(ConvergenceError):; """"""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""; message: str; iteration: int; wfn: core.Wavefunction; what: str; stats: Dict[str, Any]. def __init__(self, iteration: int, wfn: core.Wavefunction, what: str, stats: Dict[str, Any]):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:8430,rout,routine,8430,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"cs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.array_equal`.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.array(computed); except Exception:; return return_handler(False, label, f""""""\t{label}: inputs not cast-able to ndarray."""""", return_message, quiet). if xptd.shape != cptd.shape:; return return_handler(; False,; label,; f""""""\t{label}: computed shape ({cptd.shape}) does not match ({xptd.shape})."""""",; return_message,; quiet,; ). isclose = np.asarray(xp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:6585,message,message,6585,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"cs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.array_equal.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.array(computed); except Exception:; return return_handler(False, label, f""""""\t{label}: inputs not cast-able to ndarray."""""", return_message, quiet). if xptd.shape != cptd.shape:; return return_handler(; False,; label,; f""""""\t{label}: computed shape ({cptd.shape}) does not match ({xptd.shape})."""""",; return_message,; quiet,; ). isclose = np.asarray(xptd == cptd)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:6509,message,message,6509,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"cs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - compute",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:8430,message,message,8430,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ct; Contains information about the orbitals. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. class psi4.core.OverlapInt¶; Bases: psi4.core.OneBodyAOInt; Comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:153778,depend,dependent,153778,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,4,['depend'],['dependent']
Integrability,"cted* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry),; expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label, rtol=1.e-16):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)); """""". try:; expected = np.asarray(expected); computed = np.asarray(computed); shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:11613,message,message,11613,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"cted* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" %; (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; expected = np.asarray(expected); computed = np.asarray(computed); shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonErro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:11514,message,message,11514,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ctest options can be found on the; Wiki. Sample input files; can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. DFTD3; MRCC; CFOUR; LIBEFP; PCMSOLVER; DMRG. Sample inputs for Psi4 as distributed are below. Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 metho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:1421,interface,interface,1421,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,2,['interface'],['interface']
Integrability,"ction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction; algorithm when specifying SCF_TYPE to use a composite algorithm combination (DFDIRJ+K_alg in general,; or DFDIRJ for DFT with non-hybrid functionals).; DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI; screening (set SCREENING to DENSITY) and incremental Fock matrix construction (set INCFOCK to TRUE). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the COSX_MAXITER_FINAL keyword); on a larger grid. By default, COSX_MAXITER_FINAL is set to 1, a single; SCF iteration, which results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. Setting COSX_MAXITER_FINAL to 0 disables the; larger grid entirely. Setting COSX_MAXITER_FINAL to -1 allows; for the SCF to fully converge on the larger grid, useful for the study of wavefunction; properties such as gradients. The size of the initial grid is controlled by the ke",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/scf.html:36195,integrat,integration,36195,psi4manual/1.9.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/scf.html,2,['integrat'],['integration']
Integrability,"ction kernel. Additionally, GauXC’s sn-LinK code supports execution on GPUs, allowing for; GPU-enabled construction of the Exchange matrix, while PSI4’s COSX does not. In general,; sn-LinK will provide better runtime performance for hitting a desired accuracy; threshold compared to PSI4’s COSX. Third, some low-level implementation details differ between the two.; For example, PSI4’s COSX uses a dual-grid scheme similar to that originally proposed by Neese,; converging the SCF on a small grid, then running a number of SCF iterations,; equal to the value set by the COSX_MAXITER_FINAL, on a larger grid.; In contrast, sn-LinK only uses a single-grid scheme, simply converging the SCF on one grid.; As another example, while the COSX grid defaults are selected to emphasize speed over accuracy,; the defaults for sn-LinK are selected to achieve higher accuracy (~0.1 kcal/mol error for interaction/conformer energies).; To control compilation and linking of the optional GauXC dependency required for the sn-LinK algorithm,; here are the list of compile-time options provided. ENABLE_gauxc: Compile Psi4 with support for GauXC.; gauxc_DIR: Location of the external GauXC install to compile Psi4 with, if using an external GauXC instance.; gauxc_ENABLE_GPU: Enable GPU support for the Psi4-GauXC interface class. When building GauXC internally within Psi4, this keyword controls whether to enable GPU support on the internally-built GauXC instance. When using an external GauXC build, this keyword must align with the GPU capabilities of the external GauXC install. To control the sn-LinK algorithm, here are the list of options provided. SNLINK_RADIAL_POINTS: Number of radial points to use for the sn-LinK grid. Defaults to 70.; SNLINK_SPHERICAL_POINTS: Number of spherical points to use for the sn-LinK grid. Defaults to 302.; SNLINK_RADIAL_SCHEME: Radial quadrature scheme to use for the sn-LinK grid. Defaults to MURA. Note that, although different from the more common Psi4 radial quadrature ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:42751,depend,dependency,42751,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['depend'],['dependency']
Integrability,"ction returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126702,message,message,126702,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['message'],['message']
Integrability,"ction should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function.; # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). If specific interoperabilities are known, code them in. For ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html:4766,interoperab,interoperability,4766,psi4manual/4.0b2/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html,6,['interoperab'],['interoperability']
Integrability,"ctions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications). To choose the type of sieving, set; the SCREENING keyword to your desired option. For Schwarz screening, set it; to SCHWARZ, for CSAM, CSAM, and for density matrix-based screening, DENSITY. SCHWARZUses the Cauchy-Schwarz inequality to calculate an upper bounded value of a shell quartet,. \[(PQ|RS) <= \sqrt{(PQ|PQ)(RS|RS)}\]. CSAMAn extension of the Schwarz estimate that also screens over the long range 1/r operator, described in [Thompson:2017:144101]. DENSITYA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/scf-1.html:27342,rout,routines,27342,psi4manual/1.5.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/scf-1.html,2,['rout'],['routines']
Integrability,"ctions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:27342,rout,routines,27342,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,2,['rout'],['routines']
Integrability,"ctions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/notes_py.html:1391,wrap,wrapped,1391,psi4manual/master/notes_py.html,https://psicode.org,https://psicode.org/psi4manual/master/notes_py.html,2,['wrap'],['wrapped']
Integrability,"ctives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_global_option_changed(chgdopt):; chgdoptval = PsiMod.get_global_option(chgdopt); #chgdoptval = PsiMod.get_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed by database wrapper.' % (chgdopt)). # build string of molecule and commands that are dependent on the database; commands += '\n'; commands += """"""PsiMod.set_global_option('BASIS', '%s')\n"""""" % (user_basis); if not((user_df_basis_scf == """") or (user_df_basis_scf == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SCF', '%s')\n"""""" % (user_df_basis_scf); if not((user_df_basis_mp2 == """") or (user_df_basis_mp2 == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_MP2', '%s')\n"""""" % (user_df_basis_mp2); if not((user_df_basis_sapt == """") or (user_df_basis_sapt == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_SAPT', '%s')\n"""""" % (user_df_basis_sapt); if not((user_df_basis_elst == """") or (user_df_basis_elst == 'NONE')):; commands += """"""PsiMod.set_global_option('DF_BASIS_ELST', '%s')\n"""""" % (user_df_basis_elst); commands += """"""molecule = PsiMod.get_active_molecule()\n""""""; commands += """"""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:41142,wrap,wrapper,41142,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,2,['wrap'],['wrapper']
Integrability,"ctor, arg0: int, arg1: int) -> float. docstring. nirrep(self: psi4.core.Vector) → int¶; docstring. classmethod np_read(filename, prefix='')¶. np_write(filename=None, prefix='')¶. print_out(self: psi4.core.Vector) → None¶; docstring. scale(self: psi4.core.Vector, arg0: float) → None¶; docstring. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, arg0: int, arg1: float) -> None. docstring. set(self: psi4.core.Vector, arg0: int, arg1: int, arg2: float) -> None. docstring. to_array(matrix, copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:np.array or list of of np.array. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data._to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial(data)¶; Converts an object with a .nph accessor to a serialized dictionary. array_interface(self: psi4.core.Vector) → list. dim(self: psi4.core.Vector, arg0: int) → int; docstring. classmethod from_array(arr, name='New Matrix', dim1=None, dim2=None); Converts a numpy array or list of numpy arrays into a Psi4 Matrix (irreped if list). Parameters:; arr (array or list of arrays) – Numpy array or list of arrays to use as the data for a new core.Matrix; name (str) – Name to give the new core.Matrix; dim1 (list, tuple, or core.Dimension (optional)) – If a single dense numpy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix beside",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.vector.html:3707,depend,depending,3707,psi4manual/1.1.0/api/psi4.core.vector.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.vector.html,1,['depend'],['depending']
Integrability,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3449,depend,dependent,3449,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,1,['depend'],['dependent']
Integrability,"ctory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standard",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:5301,depend,dependencies,5301,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['depend'],['dependencies']
Integrability,"ctory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory stru",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:5299,depend,dependencies,5299,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,2,['depend'],['dependencies']
Integrability,"ctrons. For a given molecule and FREEZE_CORE, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_on_center(self: psi4.core.BasisSet, c: int, i: int) → int¶; Return the i’th shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int¶; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int¶; Return the atomic center for the i’th shell. static zero_ao_basis_set() → psi4.core.BasisSet¶; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; BasisSet. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.basisset.html:7021,contract,contraction,7021,psi4manual/1.4.0/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.basisset.html,1,['contract'],['contraction']
Integrability,"ctrons. For a given molecule and FREEZE_CORE, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_on_center(self: psi4.core.BasisSet, c: int, i: int) → int¶; Return the i’th shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int¶; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int¶; Return the atomic center for the i’th shell. static zero_ao_basis_set() → psi4.core.BasisSet¶; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; BasisSet. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.basisset.html:7047,contract,contraction,7047,psi4manual/1.5.0/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.basisset.html,1,['contract'],['contraction']
Integrability,"cts results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if db_mode == 'continuous':; exec(banners). molecule = core.Molecule.create_molecule_from_string(GEOS[rgt].create_psi4_string_from_molecule()); molecule.set_name(rgt); molecule.update_geometry(). exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, core.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); ERGT[rgt] = func(molecule=molecule, **kwargs); core.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = core.get_variable(envv); core.set_global_option(""REFERENCE"", user_reference); core.clean(); #core.opt_clean(); core.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""core.print_variables()\n""""""); freagent.write(""""""core.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""core.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""core.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (core.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.up",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html:21856,wrap,wrapper,21856,psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,1,['wrap'],['wrapper']
Integrability,"cts results into dictionary; # sow: opens individual reagent input file, writes the necessary commands, and writes energy(method) call; # reap: opens individual reagent output file, collects results into a dictionary; if db_mode == 'continuous':; exec(banners). molecule = psi4.Molecule.create_molecule_from_string(GEOS[rgt].create_psi4_string_from_molecule()); molecule.set_name(rgt); molecule.update_geometry(). exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, psi4.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); ERGT[rgt] = func(molecule=molecule, **kwargs); psi4.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = psi4.get_variable(envv); psi4.set_global_option(""REFERENCE"", user_reference); psi4.clean(); #psi4.opt_clean(); psi4.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""psi4.print_variables()\n""""""); freagent.write(""""""psi4.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""psi4.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""psi4.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (psi4.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.up",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:21730,wrap,wrapper,21730,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['wrap'],['wrapper']
Integrability,"cts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """""". __all__ = [; ""ManyBodyComputer"",; ]. import copy; import itertools; import math; from typing import Any, Callable, Dict, List, Literal, Optional, Sequence, Set, Tuple, Union; from ast import literal_eval; from enum import Enum. from pydantic import Field, validator. import pprint; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from qcelemental.models import DriverEnum, AtomicResult. from psi4 import core; from psi4.driver import constants, driver_nbody_multilevel, p4util; from psi4.driver.p4util.exceptions import *; from psi4.driver.task_base import BaseComputer, EnergyGradientHessianWfnReturn. logger = logging.getLogger(__name__). SubTaskComputers = Union[""AtomicComputer"", ""CompositeComputer"", ""FiniteDifferenceComputer""]; FragBasIndex = Tuple[Tuple[int], Tuple[int]]. [docs]def nbody():; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpoise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:8019,depend,depending,8019,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,1,['depend'],['depending']
Integrability,"culations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'); energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z""}]). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'); optimize(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}]). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper, cbs-xtpl-dict. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata])[source]; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases; complete_basis_set(). Returns; (float) – Total electronic energy in Hartrees. PSI variables. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cbs-1.html:1450,wrap,wrapper,1450,psi4manual/1.4.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cbs-1.html,4,['wrap'],['wrapper']
Integrability,"culations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'); energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z""}]). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'); optimize(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}]). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper, cbs-xtpl-dict. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/cbs-1.html:1432,wrap,wrapper,1432,psi4manual/1.3.2/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"cule.fix_orientation(1); #molecule.update_geometry(). # throw an exception for open-shells; if (PsiMod.get_option('SCF', 'REFERENCE') != 'RHF'):; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). # what type of cepa?; if (lowername == 'cepa(0)'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CEPA0'); if (lowername == 'cepa(1)'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CEPA1'); if (lowername == 'cepa(2)'):; #PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CEPA2'); # throw an exception for cepa(2); PsiMod.print_out(""\n""); PsiMod.print_out(""Error: %s not implemented\n"" % lowername); PsiMod.print_out(""\n""); if (lowername == 'cepa(3)'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CEPA3'); if (lowername == 'sdci'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CISD'); if (lowername == 'dci'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'CISD'); PsiMod.set_local_option('CEPA', 'CEPA_NO_SINGLES', True); if (lowername == 'acpf'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'ACPF'); if (lowername == 'aqcc'):; PsiMod.set_local_option('CEPA', 'CEPA_LEVEL', 'AQCC'). PsiMod.set_local_option('TRANSQT2', 'WFN', 'CCSD'); run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_option('SCF', 'SCF_TYPE') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). # only call transqt2() if (ac|bd) is not integral direct; if PsiMod.get_option('CEPA', 'CEPA_VABCD_DIRECT') == False:; PsiMod.transqt2(). PsiMod.cepa(). # restore options ( transqt2/wfn, cepa/cepa_no_singles ); optstash.restore(). return PsiMod.get_variable(""CURRENT ENERGY""). [docs]def run_property(name, **kwargs):; """"""General wrapper for property computations. """"""; junk = 1; return junk. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/proc.html:47506,wrap,wrapper,47506,psi4manual/4.0b3/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/proc.html,1,['wrap'],['wrapper']
Integrability,"cupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. A-CCSD(T) 1; RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. Footnotes. 1; Also known as CCSD(AT), Lambda-CCSD(T), CCSD(T)_L. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'a-ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for exci",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cc-1.html:3153,interface,interface,3153,psi4manual/1.5.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cc-1.html,3,['interface'],['interface']
Integrability,"cupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cc-1.html:3205,interface,interface,3205,psi4manual/1.2.1/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html,8,['interface'],['interface']
Integrability,"cupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM; The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'a-ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function properties() (instead of, for example, energy(),; e.g., properties('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples.; The various methods supported by the CCENERGY modules in PSI4 are; summarized in Table CC Methods and detailed; (except excited state methods) in Table CCENERGY Capabilities. Even without set qc_module ccenergy,; methods will default to this module, but al",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cc.html:3153,interface,interface,3153,psi4manual/1.7.x/cc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cc.html,4,['interface'],['interface']
Integrability,"currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers. All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b vectors; int n = 100;; double* a = init_array(n);; double* b = init_array(n);. // Allocate A matrix;; double** A = block_matrix(n,n);; double** B = block_matrix(n,n);; double** C = block_matrix(n,n);. // Call the BLAS1 dot product between a and b; // n can be a ULI with the BLAS1 wrappers,; // All strides must be ints though; double dot = C_DDOT(n, a, 1, b, 1);. // Call the BLAS2 GEMV without transposition; // Note this works in row-major order; C_DGEMV('N', n, n, 1.0, A[0], n, a, 1, 0.0, b, 1);. // Call the BLAS3 GEMM without transposition; // Note this works in row-major ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:2114,rout,routines,2114,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,4,['rout'],['routines']
Integrability,"cution mode \'reap\' requires a linkage option.'); else:; raise ValidationError('Optimize execution mode \'%s\' not valid.' % (opt_mode)). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.reference_wavefunction().energy(); return PsiMod.get_variable('CURRENT ENERGY'); else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print 'Performing finite difference calculations'. # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print ' %d displacements needed ...' % (ndisp),; energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:23843,depend,dependent,23843,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['depend'],['dependent']
Integrability,"c”; [Grimme:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; optimize('pbeh3c'). HF-3c with non-standard basis; set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gcp-1.html:2562,interface,interface,2562,psi4manual/1.4.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gcp-1.html,5,['interface'],['interface']
Integrability,"d (file) – Reference Molden file against which computed is compared.; computed (file) – Input Molden file to compare against expected.; atol_exponent (int or float) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or arra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:28014,message,messages,28014,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['message'],['messages']
Integrability,"d 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; PSI4 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, and 3.11. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; General GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties.; For more tables with capabilities details:. Full Capabilities (first below) lists all methods; Capabilities Breakdown (second below) lists selected methods by reference, etc.; Module Capabilities lists selected methods by implementation; Energy, Energy (DFT), Energy (MRCC), Energy (CFOUR) fully list energy target methods; Gradient, Gradient (CFOUR) fully list gradient target methods; Frequency fully lists",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/introduction.html:23407,contract,contracted,23407,psi4manual/1.8.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/introduction.html,1,['contract'],['contracted']
Integrability,"d Clang; compilers. Compiler requirements are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. PythonPSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; The future plan is to support the approximately three latest Python versions.; The current master supports 3.8, 3.9, 3.10, and 3.11. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties.; For more tables with capabilities details:. Full Capabilities (first below) lists all methods; Capabilities Breakdown (second below) lists selected methods by reference, etc.; Module Capabilities lists selected methods by implementation; Energy, Energy (DFT), Energy (MRCC), Energy (CFOUR) fully ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/introduction.html:23154,depend,dependencies,23154,psi4manual/1.7.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/introduction.html,1,['depend'],['dependencies']
Integrability,"d Windows, through the Ubuntu shell).; If using the PSI4 binary, Libint has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libint can be obtained through conda install libint -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libint and activate dependent code. To remove a conda installation, conda remove libint. Source. Note that PSI4 uses v1. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint — CMake variable to force detecting pre-built Libint and not falling back on internal build; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. Build bundled shared library with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libint-1.html:1946,depend,dependencies,1946,psi4manual/1.4.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libint-1.html,4,['depend'],['dependencies']
Integrability,"d above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html:9219,integrat,integration,9219,psi4manual/1.4.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html,9,['integrat'],['integration']
Integrability,"d arguments for extrapolation functions by; extracting zetas and values (which one determined by *datakey*) out; of *needdict* and returning a dictionary whose keys are contructed; from _lmh_labels. """"""; largs = {}; largs['functionname'] = needdict['HI']['f_wfn']; Nxtpl = len(needdict); zlabels = _lmh_labels[Nxtpl] # e.g., ['LO', 'HI']. for zeta in range(Nxtpl):; zlab = zlabels[zeta] # e.g., LO; largs['z' + zlab] = needdict[zlab]['f_zeta']; largs['value' + zlab] = needdict[zlab][datakey]. return largs. ## Aliases ##; complete_basis_set = cbs. def _cbs_wrapper_methods(**kwargs):; cbs_method_kwargs = ['scf_wfn', 'corl_wfn', 'delta_wfn']; cbs_method_kwargs += ['delta%d_wfn' % x for x in range(2, 6)]. cbs_methods = []; for method in cbs_method_kwargs:; if method in kwargs:; cbs_methods.append(kwargs[method]); return cbs_methods. def _parse_cbs_gufunc_string(method_name):; method_name_list = re.split( """"""\+(?=\s*[Dd]:)"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(""""""CBS gufunc: Too many brackets given! %s """""" % method_str). if method_str.count('/') != 1:; raise ValidationError(""""""CBS gufunc: All methods must specify a basis with '/'. %s"""""" % method_str). if num > 0:; method_str = method_str.strip(); if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; Text based wrapper of the CBS function.; """""". # Catch kwarg issues for all methods; kwargs = p4util.kwargs_lower(kwargs); return_wfn = kwargs.pop('return_w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:65270,wrap,wrapper,65270,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"d back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/quickadddatabase-1.html:3548,rout,route,3548,psi4manual/1.1.0/quickadddatabase-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/quickadddatabase-1.html,2,['rout'],['route']
Integrability,"d builtin. Module (auto-generated from make_dunning.pl script); with commands building BasisFamily objects that; encode the Dunning basis set orbital definitions in; psi4/lib/basis/NOTES and fitting bases designed for those; orbital bases. load_basfam_dunning()[source]¶. p4const¶. procedures¶; Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. reap_job_validate(dir, prefix, item, linkage, keys)[source]¶; For a given output file whose path is constructed with; dir + ‘/’ + prefix + ‘-‘ + item + ‘.out’, tests that the file; exists and has prefix RESULTS lines for each piece of information; requested in list keys and that those lines correspond to the; appropriate linkage and item. Returns keys along with their; scanned values in dict reapings, along with error and success; messages in instructions and a boolean isOk indicating whether; all keys reaped sucessfully. run_cfour_module(xmod)[source]¶. sown_jobs_status(dir, prefix, zmats, validate_func=None, linkage=None, keys=None)[source]¶; Evaluate the output file status of jobs in zmats which should; exist at dir + ‘/’ + prefix + ‘-‘ + job + ‘.out’. Returns string with; formatted summary of job status and boolean of whether all complete.; Return boolean isOk signals whether all zmats have completed and,; if validate_func present, are validated. vpt2(name, **kwargs)[source]¶; Perform vibrational second-order perturbation computation through; Cfour to get anharmonic frequencies. This version uses c4 for the disp; and pt2 but gets gradients from p4. Parameters:c4full (boolean) – 'on' || 'off' ; Indicates whether when name indicates a Cfour method and mode; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:146689,message,messages,146689,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['message'],['messages']
Integrability,"d by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule.; func - functional alias or None; dashlvl - functional type d2gr/d3zero/d3bj/d3mzero/d3mbj; dashparam - dictionary; dertype = derivative level. run_gcp(func=None, dertype=None, verbose=False); Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None; Saves an XYZ file to arg2. schoenflies_symbol(self: psi4.core.Molecule) → str; Returns the Schoenflies symbol. set_active_fragment(self: psi4.core.Molecule, arg0: int) → None; Sets the specified fragment arg2 to be Real. set_active_fragments(self: psi4.core.Molecule, arg0: list) → None; Sets the specified list arg2 of fragments to be Real. set_basis_all_atoms(self: psi4.core.Molecule, arg0: str, arg1: str) → None; Sets basis set arg2 to all atoms. set_basis_by_label(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → None; Sets basis set arg3 to all atoms with label (e.g., H4) arg2. set_basis_by_symbol(self: psi4.core.Molecule, arg0: str, arg1: str, arg2: str) → ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html:29557,interface,interface,29557,psi4manual/1.1.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.molecule.html,1,['interface'],['interface']
Integrability,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:21615,interface,interface,21615,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['interface'],['interface']
Integrability,"d for problems with SCF iterations. Parameters; ----------; wfn : psi4.core.Wavefunction; Wavefunction at time of exception; e_conv : float; Change in energy for last iteration; d_conv : float; RMS change in density for last iteration. """""". def __init__(self, eqn_description, iteration, wfn, e_conv, d_conv):; ConvergenceError.__init__(self, eqn_description, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(; *circs); PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -H. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:4288,message,message,4288,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"d from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/documentation-1.html:2922,depend,dependency,2922,psi4manual/4.0b2/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html,4,['depend'],['dependency']
Integrability,"d indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCFT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Ene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:1781,rout,route,1781,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,6,['rout'],['route']
Integrability,"d indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dct-1.html:1771,rout,route,1771,psi4manual/1.4.0/dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html,9,['rout'],['route']
Integrability,"d is None:; return return_handler(True, label, pass_message, return_message, quiet). if np.iscomplexobj(expected):; dtype = np.complex; else:; dtype = float. try:; xptd, cptd = np.array(expected, dtype=dtype), np.array(computed, dtype=dtype); except Exception:; return return_handler(; False, label, f""""""\t{label}: inputs not cast-able to ndarray of {dtype}."""""", return_message, quiet; ). if xptd.shape != cptd.shape:; return return_handler(; False,; label,; f""""""\t{label}: computed shape ({cptd.shape}) does not match ({xptd.shape})."""""",; return_message,; quiet,; ). digits1 = abs(int(np.log10(atol))) + 2; digits_str = f""to atol={atol}""; if rtol > 1.0e-12:; digits_str += f"", rtol={rtol}"". isclose = np.isclose(cptd, xptd, rtol=rtol, atol=atol, equal_nan=equal_nan); allclose = bool(np.all(isclose)). if not allclose and equal_phase and hasattr(cptd, ""__neg__""):; n_isclose = np.isclose(-cptd, xptd, rtol=rtol, atol=atol, equal_nan=equal_nan); allclose = bool(np.all(n_isclose)). if allclose:; message = pass_message. else:; if xptd.shape == ():; xptd_str = f""{float(xptd):.{digits1}f}""; else:; xptd_str = np.array_str(xptd, max_line_width=120, precision=12, suppress_small=True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{float(cptd):.{digits1}f}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). diff = cptd - xptd; if xptd.shape == ():; diff_str = f""{float(diff):.{digits1}f}""; message = """"""\t{}: computed value ({}) does not match ({}) {} by difference ({})."""""".format(; label, cptd_str, xptd_str, digits_str, diff_str; ); else:; diff[isclose] = 0.0; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()); with np.errstate(divide=""ignore"", invalid=""ignore""):; diffrel = np.divide(diff, xptd); np.nan_to_num(diffrel, copy=False); di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:4190,message,message,4190,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,3,['message'],['message']
Integrability,"d is compared.; Dict may be of any depth but should contain Plain Old Data.; computed (Union[Dict, BaseModel, ProtoModel]) – Input value to compare against expected.; Dict may be of any depth but should contain Plain Old Data.; atol (float) – Absolute tolerance (see formula below).; label (str) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; forgive (List[str]) – Keys in top level which may change between expected and computed without triggering failure.; equal_phase (Union[bool, List]) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – . Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 mea",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:21072,message,message,21072,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,2,['message'],['message']
Integrability,"d predefined basis set as the; auxiliary set. Alternatively, the user can request a set defined by the; partial Cholesky decomposition of the 4-index ERI tensor.; The following is a minimal input file that describes a DF-CCSD(T); computation using 3-index integrals obtained by partial Cholesky; decomposition of the 4-index ERI tensor.; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; df_basis_cc cholesky; basis aug-cc-pvdz; freeze_core true; }; energy('df-ccsd(t)'). The accuracy of the Cholesky decomposition may be controlled through the; keyword CHOLESKY_TOLERANCE. Note that the keyword; SCF_TYPE has not been specified here. By default, a DF-CCSD(T); computation exploits DF technology in the SCF procedure, but one can; override this behavior through this keyword. Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to the DETCI implementations of these methods. name; calls method. qcisd; quadratic configuration interaction singles doubles. qcisd(t); qcisd with perturbative triples. mp2.5; average of second- and third-order perturbation theories. mp3; third-order perturbation theory. mp4(sdq); fourth-order perturbation theory, minus triples contribution. mp4; full fourth-order perturbation theory. cepa(0); coupled electron pair approximation, variant 0. cepa(1); coupled electron pair approximation, variant 1. cepa(3); coupled electron pair approximation, variant 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled-cluster. sdci; configuration in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/fnocc-1.html:9460,wrap,wrapper,9460,psi4manual/4.0b4/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html,2,['wrap'],['wrapper']
Integrability,"d psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Update to latest Psi4 version; >>> conda update psi4. Install into a conda environment “p4env” instead of “root”. Second command only works on bash; for csh/tsch, setenv PATH /path/to/miniconda/envs/p4env/bin:$PATH instead. This creates a sandbox with just Psi4 and python (loaded as dependency).; >>> conda create -y -n p4env psi4; >>> source activate p4env. Install a particular Psi4 version; >>> conda install psi4=0.1.12. Uninstall Psi4 from current environment; >>> conda remove psi4. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the Psi4 conda package won’t work.; # unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the Psi4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda Psi4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:13768,depend,dependency,13768,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['depend'],['dependency']
Integrability,"d pt2 but gets gradients from p4. :type c4full: :ref:`boolean <op_py_boolean>`; :param c4full: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether when *name* indicates a Cfour method and *mode*; indicates a sow/reap approach, sown files are direct ZMAT files; and FJOBARC files are expected to reap, so that Cfour only, not; Cfour-through-Psi4, is needed for distributed jobs. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Presently uses all gradients. Could mix in analytic 2nd-derivs. - Collect resutls. - Manage scratch / subdir better. - Untangle CCSD(T) vs CCSD[T] and FJOBARC issue. - Allow CFOUR_BASIS. - Consider forcing some tighter convcrit, c4 and p4. - sow/reap. - mixed ang/bohr signals. - error by converting to ang in psi?. - Expand CURRENT DIPOLE XYZ beyond SCF. - Remember additional FJOBARC record TOTENER2 if EXCITE .ne. NONE. - S/R P4grad. - S/R C4grad. - C P4grad. - C C4grad. - switch C --> S/R with recovery using shelf. - pure C mode where only need P4 for wrapper. """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['BASIS']). # Option mode of operation- whether vpt2 run in one job or files farmed out; if not('vpt2_mode' in kwargs):; if ('mode' in kwargs):; kwargs['vpt2_mode'] = kwargs['mode']; del kwargs['mode']; else:; kwargs['vpt2_mode'] = 'continuous'. # Switches for route through code- S/R or continuous & Psi4 or Cfour gradients; isSowReap = True if kwargs['vpt2_mode'].lower() == 'sowreap' else False; isC4notP4 = bool(re.match('cfour', lowername)) or bool(re.match('c4-', lowername)); isC4fully = True if ('c4full' in kwargs and yes.match(str(kwargs['c4full'])) and isC4notP4 and isSowReap) else False. # Save submission directory and basis set; current_directory = os.getcwd(); user_basis = psi4.get_global_option('BASIS'). # Open data persistence shelf- vital for sowreap, checkpoint for continuouw; shelf = shelve.open(current_directory + '/' + os.path.splitext(psi4.outfil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html:4485,wrap,wrapper,4485,psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/wrappers_cfour.html,1,['wrap'],['wrapper']
Integrability,"d set symmetry. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. casscf-sp; CASSCF/6-31G** energy point. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. fci-h2o-2; 6-31G H2O Test FCI Energy Point. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt10; usapt example with empty beta due to frozen core. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:6540,wrap,wrapper,6540,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['wrap'],['wrapper']
Integrability,"d(ShellInfo(am, contractions, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')). elif len(shell_type) == 2:; # This is to handle instances of SP, PD, DF, FG, ...; am1 = shell_to_am[shell_type[0]]; am2 = shell_to_am[shell_type[1]]. exponents = [0.0] * nprimitive; contractions1 = [0.0] * nprimitive; contractions2 = [0.0] * nprimitive. for p in range(nprimitive):; line = lines[lineno]; lineno += 1; line = line.replace('D', 'e', 2); line = line.replace('d', 'e', 2). what = primitives2.match(line); # Must match primitivies2; if not what:; raise ValidationError(""Gaussian94BasisSetParser::parse: Unable to match an exponent with two contractions: line %d: %s"" % (lineno, line)); exponent = float(what.group(1)); contraction = float(what.group(2)). # Scale the contraction and save the information; contraction *= scale; exponents[p] = exponent; contractions1[p] = contraction. # Do the other contraction; contraction = float(what.group(3)). # Scale the contraction and save the information; contraction *= scale; contractions2[p] = contraction. shell_list.append(ShellInfo(am1, contractions1, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')); shell_list.append(ShellInfo(am2, contractions2, exponents,; gaussian_type, 0, center, 0, 'Unnormalized')); else:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unable to parse basis sets with spd, or higher grouping""""""); else:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Expected shell information, but got: line %d: %s"""""" % (lineno, line)); line = lines[lineno]; lineno += 1. break. if not found:; #raise BasisSetNotFound(""Gaussian94BasisSetParser::parser: Unable to find the basis set for %s in %s"" % \; # (symbol, self.filename), silent=True); return None, None. return shell_list, msg. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html:7645,contract,contraction,7645,psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasissetparser.html,3,['contract'],['contraction']
Integrability,"d(t)""], [""cc-pv[tq]z"", ""cc-pvtz""])``.; """""". method_name_list = re.split(""""""\+(?=\s*[Dd]:)"""""", method_name); if len(method_name_list) > 2:; raise ValidationError(; ""CBS gufunc: Text parsing is only valid for a single delta, please use the CBS wrapper directly""). method_list = []; basis_list = []; for num, method_str in enumerate(method_name_list):; if (method_str.count(""["") > 1) or (method_str.count(""]"") > 1):; raise ValidationError(""""""CBS gufunc: Too many brackets given! %s """""" % method_str). if method_str.count('/') != 1:; raise ValidationError(""""""CBS gufunc: All methods must specify a basis with '/'. %s"""""" % method_str). if num > 0:; method_str = method_str.strip(); if method_str[:2].lower() != 'd:':; raise ValidationError(""""""CBS gufunc: Delta method must start with 'D:'.""""""); else:; method_str = method_str[2:]; method, basis = method_str.split('/'); method_list.append(method); basis_list.append(basis); return method_list, basis_list. def _cbs_gufunc(func, total_method_name, **kwargs):; """"""; A text based wrapper of the CBS function. Provided to handle ""method/basis""; specification of the requested calculations. Also handles ""simple"" (i.e.; one-method and one-basis) calls. Parameters; ----------; func : function; Function to be called (energy, gradient, frequency or cbs).; total_method_name : str; String in a ``""method/basis""`` syntax. Simple calls (e.g. ``""blyp/sto-3g""``) are; bounced out of CBS. More complex calls (e.g. ``""mp2/cc-pv[tq]z""`` or; ``""mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz""``) are expanded by `_parse_cbs_gufunc_string()`; and pushed through :py:func:`~psi4.cbs`. Returns; -------; tuple or float; Float, or if ``return_wfn`` is specified, a tuple of ``(value, wavefunction)``.; """""". # Catch kwarg issues for all methods; kwargs = p4util.kwargs_lower(kwargs); return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); ptype = kwargs.pop('ptype', None). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:62976,wrap,wrapper,62976,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"d) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:18052,message,message,18052,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['message'],['message']
Integrability,"d) > thresh:; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" %; (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:8075,message,message,8075,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.CUHF, basis: psi4.core.BasisSet) → psi4.core.CUHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:4216,wrap,wrapper,4216,psi4manual/1.3.2/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html,1,['wrap'],['wrapper']
Integrability,"d) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html:4466,wrap,wrapper,4466,psi4manual/1.3.2/api/psi4.core.rohf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.rohf.html,1,['wrap'],['wrapper']
Integrability,"d, and in 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2). print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Compute the Levenshtein distance between two strings."""""". oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1, options, max_distance):; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`."""""". return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str = None, max_width: int = 80, min_width: int = 30):; """""" put a message string into a box for extra attention. Parameters; -----------; message; message string to be boxed. max_width; maximal character width of the box. Returns; --------; str; box containing the message as a multiline string; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html:6775,message,message,6775,psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/text.html,2,['message'],['message']
Integrability,"d, and in 1.4 it will stop working\n"",; category=FutureWarning,; stacklevel=2). print(stuff, file=sys.stderr). [docs]def levenshtein(seq1, seq2):; """"""Compute the Levenshtein distance between two strings."""""". oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1, options, max_distance):; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`."""""". return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str = None, max_width: int = 80, min_width: int = 30):; """""" put a message string into a box for extra attention. Parameters; -----------; message; message string to be boxed. max_width; maximal character width of the box. Returns; --------; str; box containing the message as a multiline string; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html:6775,message,message,6775,psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/text.html,2,['message'],['message']
Integrability,"d.get(irrep, entry),; expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label, rtol=1.e-16):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)); """""". try:; expected = np.asarray(expected); computed = np.asarray(computed); shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol, rtol=rtol):; message = ""\tArray difference norm is %12.6e."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. [docs]def compare_wavefunctions(expec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:12695,message,message,12695,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"d1, d2 = _find_dim(arr[i], 2); sdim1[i] = d1; sdim2[i] = d2. ret = self(name, sdim1, sdim2). elif arr_type == psi4.Vector:; sdim1 = psi4.Dimension(irreps). for i in range(irreps):; d1 = _find_dim(arr[i], 1); sdim1[i] = d1[0]. ret = self(name, sdim1); else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). for interface, vals in zip(ret.array_interfaces(), arr):; if 0 in interface.__array_interface__[""shape""]:; continue; else:; view = np.asarray(interface); view[:] = vals. return ret . # No irreps implied by list; else:; if arr_type == psi4.Matrix:. # Build an irreped array back out; if dim1 is not None:; if dim2 is None:; raise ValidationError (""Array_to_Matrix: If dim1 is supplied must supply dim2 also""); ; dim1 = psi4.Dimension.from_list(dim1) ; dim2 = psi4.Dimension.from_list(dim2) . if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""); ; ret = self(name, dim1, dim2); ; start1 = 0; start2 = 0; for num, interface in enumerate(ret.array_interfaces()):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1 ; start2 += d2. return ret; ; # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); ret_view = np.asarray(ret); ret_view[:] = arr; return ret. elif arr_type == psi4.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError (""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""); ; dim1 = psi4.Dimension.from_list(dim1) ; ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.array_interfaces()):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1 . return ret; ; # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret_view = np.asarray(ret); ret_view[:] = arr; r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/numpy_helper.html:4968,interface,interface,4968,psi4manual/1.0.0/_modules/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/numpy_helper.html,1,['interface'],['interface']
Integrability,"d; set of tabulated radii per atomic species, determined by the DDX_RADII_SET parameter.; Currently bondi [Bondi:1964:441] and uff [Rappe:1992:114]; are supported for DDX_RADII_SET with uff selected by default.; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for uff and 1.2 for bondi. Customisation of the scaling; is possible using the DDX_RADII_SCALING parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the DDX_RADII parameter. DDX¶. DDX boolean for ddx module. Type: boolean; Default: false. DDX_MODEL¶. Switch available solvation models. Type: string; Possible Values: PCM, COSMO; Default: PCM. DDX_RADII¶. Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING¶. Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET¶. Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:5030,depend,depends,5030,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['depend'],['depends']
Integrability,"d; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers. All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b vectors; int n = 100;; double* a = init_a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:1606,rout,routines,1606,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,4,['rout'],['routines']
Integrability,"dOn header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/. If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in CMake files or #ifdef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/external/upstream/. Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:3696,depend,dependencies,3696,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['depend'],['dependencies']
Integrability,"d_str = f""{xptd}""; else:; xptd_str = np.array_str(xptd, max_line_width=120, precision=12, suppress_small=True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{cptd}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). try:; diff = cptd - xptd; except TypeError:; diff_str = ""(n/a)""; else:; if xptd.shape == ():; diff_str = f""{diff}""; else:; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()). if xptd.shape == ():; message = """"""\t{}: computed value ({}) does not match ({}) by difference ({})."""""".format(; label, cptd_str, xptd_str, diff_str; ); else:; message = """"""\t{}: computed value does not match.\n Expected:\n{}\n Observed:\n{}\n Difference:\n{}\n"""""".format(; label, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _compare_recursive(expected, computed, atol, rtol, _prefix=False, equal_phase=False):. errors = []; name = _prefix or ""root""; prefix = name + ""."". # Initial conversions if required; if isinstance(expected, BaseModel):; expected = expected.dict(). if isinstance(computed, BaseModel):; computed = computed.dict(). if isinstance(expected, (str, int, bool, complex)):; if expected != computed:; errors.append((name, ""Value {} did not match {}."".format(expected, computed))). elif isinstance(expected, (list, tuple)):; try:; if len(expected) != len(computed):; errors.append((name, ""Iterable lengths did not match"")); else:; for i, item1, item2 in zip(range(len(expected)), expected, computed):; errors.extend(; _compare_recursive(; item1, item2, _prefix=prefix + str(i), atol=atol, rtol=rtol, equal_phase=equal_phase; ); ); except TypeError:; errors.append((name, ""Expected computed to have a __len__()"")). elif isinstance(expected, dict):; expected_extra = compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:8800,message,message,8800,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"d_str = f""{xptd}""; else:; xptd_str = np.array_str(xptd, max_line_width=120, precision=12, suppress_small=True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{cptd}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). try:; diff = cptd - xptd; except TypeError:; diff_str = ""(n/a)""; else:; if xptd.shape == ():; diff_str = f""{diff}""; else:; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()). if xptd.shape == ():; message = """"""\t{}: computed value ({}) does not match ({}) by difference ({})."""""".format(; label, cptd_str, xptd_str, diff_str; ); else:; message = """"""\t{}: computed value does not match.\n Expected:\n{}\n Observed:\n{}\n Difference:\n{}\n"""""".format(; label, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _compare_recursive(expected, computed, atol, rtol, _prefix=False, equal_phase=False):; errors = []; name = _prefix or ""root""; prefix = name + ""."". # Initial conversions if required; if isinstance(expected, BaseModel):; expected = expected.dict(). if isinstance(computed, BaseModel):; computed = computed.dict(). if isinstance(expected, (str, int, bool, complex)):; if expected != computed:; errors.append((name, ""Value {} did not match {}."".format(expected, computed))). elif isinstance(expected, (list, tuple)):; try:; if len(expected) != len(computed):; errors.append((name, ""Iterable lengths did not match"")); else:; for i, item1, item2 in zip(range(len(expected)), expected, computed):; errors.extend(; _compare_recursive(; item1, item2, _prefix=prefix + str(i), atol=atol, rtol=rtol, equal_phase=equal_phase; ); ); except TypeError:; errors.append((name, ""Expected computed to have a __len__()"")). elif isinstance(expected, dict):; expected_extra = compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html:8966,message,message,8966,psi4manual/1.8.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/qcelemental/testing.html,3,['message'],['message']
Integrability,"da package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, Libint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libint can be obtained through conda install libint.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libint and activate dependent code. To remove a conda installation, conda remove libint. Source. If using PSI4 built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libint for building Psi4¶; Role and Dependencies. Role — In PSI4, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint/libint.h; Libint_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing share/cmake/Libint/LibintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint — CMake variable to force internal build of Libint instead of detecting pre-built. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2017, The Psi4 Proje",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/libint-1.html:1576,depend,dependencies,1576,psi4manual/1.1.0/libint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/libint-1.html,2,['depend'],['dependencies']
Integrability,"da package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, gau2grid has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure ga",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gau2grid-1.html:1565,depend,dependencies,1565,psi4manual/1.4.0/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gau2grid-1.html,9,['depend'],['dependencies']
Integrability,"darray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to np.isclose. Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type; Union[bool, Tuple[bool, str]]. Returns. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to np.allclose.; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings() is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:16774,message,message,16774,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,2,['message'],['message']
Integrability,"ddons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:9735,depend,dependencies,9735,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['depend'],['dependencies']
Integrability,"de for qcdb.interface_dftd3; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2017 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that interface with Grimme's DFTD3 code.""""""; from __future__ import absolute_import, print_function; import os; import re; import sys; import math; import uuid; import shutil; import socket; import subprocess. try:; from psi4.driver.p4util.exceptions import *; from psi4 import core; isP4regime = True; except ImportError:; from .exceptions import *; isP4regime = False; from .dashparam import *; from .molecule import Molecule. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html:1103,interface,interface,1103,psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/qcdb/interface_dftd3.html,1,['interface'],['interface']
Integrability,"de for qcdb.interface_dftd3; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2018 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that interface with Grimme's DFTD3 code.""""""; from __future__ import absolute_import; from __future__ import print_function; import os; import re; import uuid; import shutil; import socket; import subprocess. try:; from psi4.driver.p4util.exceptions import *; from psi4 import core; isP4regime = True; except ImportError:; from .exceptions import *; isP4regime = False; from .dashparam import *; from .molecule import Molecule. [docs]def run_dftd3(mol, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False):; """"""Compute dispersion correction using Grimme's DFTD3 executable. Function to call Grimme's dftd3 program to compute the -D correction; of level `dashlvl` using parameters for the functional `func`.; `dashparam` can supply a full set of dispersion parameters in the; absence of `func` or individual overrides in the presence of `func`. The DFTD3 executable must be independently compiled and found in; :envvar:`PATH` or :envvar:`PSIPATH`. Parameters; ----------; mol : qcdb.Molecule ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html:1105,interface,interface,1105,psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/qcdb/interface_dftd3.html,1,['interface'],['interface']
Integrability,"ded at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders un",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:22646,message,message,22646,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['message'],['message']
Integrability,"default_scf = 'hf'; cbs_scf_wfn = kwargs.pop('scf_wfn', default_scf).lower(). if do_scf:; if cbs_scf_wfn not in VARH.keys():; raise ValidationError(""""""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_scf_wfn)). # ... resume correlation logic; if do_corl:; if cbs_corl_wfn not in VARH.keys():; raise ValidationError(""""""Requested CORL method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_corl_wfn)). cbs_corl_wfn_lesser = kwargs.get('corl_wfn_lesser', cbs_scf_wfn).lower(); if cbs_corl_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:40290,wrap,wrapper,40290,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"dent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/simint-1.html:3347,depend,dependencies,3347,psi4manual/1.2.1/simint-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/simint-1.html,2,['depend'],['dependencies']
Integrability,"dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:6349,depend,dependencies,6349,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"der to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handler.baseFilename in filenames:; logger.addHandler(f_handler); return out. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.extras. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/extras.html:9565,message,message,9565,psi4manual/master/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/extras.html,1,['message'],['message']
Integrability,"derstanding about the; interaction between the two monomers. V. Potential Surface Scans and Counterpoise Correction Made Easy¶; Finally, let’s consider an example which highlights the advantages of being able to interact with Psi4 directly with Python.; Suppose you want to do a limited potential energy surface scan, such as computing the interaction energy between two neon atoms at various interatomic distances. One simple but unappealing way to do this is to generate separate geometries for each distance to be studied. Instead, we can leverage Python loops and string formatting to make our lives simpler. Additionally, let’s suppose you want to do counterpoise (CP) correction to compute interaction energies. Counterpoise correction involves; computing the dimer energy and then subtracting out the energies of the two monomers, each evaluated in the dimer basis. Again, each of these computations could be run in a separate input file, but because counterpoise correction is a fairly standard procedure for intermolecular interactions, Psi4 knows about it and has a built-in routine to perform counterpoise correction. It only needs to know what method you want to do the couterpoise correction on (here, let’s consider CCSD(T)), and it needs; to know what’s monomer A and what’s monomer B. This last issue of specifying the monomers separately was already dealt with in the previous SAPT example, where we saw that two dashes in the psi4.geometry() string can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne\(_2\) at a series of different interatomic distances. And let’s print out a table of the interatomic distances we’ve considered, and the CP-corrected CCSD(T) interaction energies (in kcal/mol) at each geometry:. [9]:. #! Example potential energy surface scan and CP-correction for Ne2. ne2_geometry = """"""; Ne; --; Ne 1 {0}; """""". Rvals = [2.5, 3.0, 4.0]. psi4.set_options({'freeze_core': 'true'}). # Initialize a blank dictionary ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psiapi-1.html:17972,rout,routine,17972,psi4manual/1.3.2/psiapi-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psiapi-1.html,9,['rout'],['routine']
Integrability,"derstanding about the; interaction between the two monomers. V. Potential Surface Scans and Counterpoise Correction Made Easy¶; Finally, let’s consider an example which highlights the advantages of being able to interact with Psi4 directly with Python.; Suppose you want to do a limited potential energy surface scan, such as computing the interaction energy between two neon atoms at various interatomic distances. One simple but unappealing way to do this is to generate separate geometries for each distance to be studied. Instead, we can leverage Python loops and string formatting to make our lives simpler. Additionally, let’s suppose you want to do counterpoise (CP) correction to compute interaction energies. Counterpoise correction involves; computing the dimer energy and then subtracting out the energies of the two monomers, each evaluated in the dimer basis. Again, each of these computations could be run in a separate input file, but because counterpoise correction is a fairly standard procedure for intermolecular interactions, Psi4 knows about it and has a built-in routine to perform counterpoise correction. It only needs to know what method you want to do the couterpoise correction on (here, let’s consider CCSD(T)), and it needs; to know what’s monomer A and what’s monomer B. This last issue of specifying the monomers separately was already dealt with in the previous SAPT example, where we saw that two dashes in the psi4.geometry() string can be used to separate monomers.; So, we’re going to do counterpoise-corrected CCSD(T) energies for Ne\(_2\) at a series of different interatomic distances. And let’s print out a table of the interatomic distances we’ve considered, and the CP-corrected CCSD(T) interaction energies (in kcal/mol) at each geometry:. [9]:. #! Example potential energy surface scan and CP-correction for Ne2. ne2_geometry = """"""; Ne; --; Ne 1 {0}; """""". Rvals = [2.5, 3.0, 4.0]. psi4.set_options({'freeze_core': True}). # Initialize a blank dictionary of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psiapi.html:17667,rout,routine,17667,psi4manual/1.9.x/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psiapi.html,2,['rout'],['routine']
Integrability,"detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/libxc.html:2460,depend,dependencies,2460,psi4manual/1.7.x/libxc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/libxc.html,1,['depend'],['dependencies']
Integrability,"dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dftd3-1.html:5927,rout,route,5927,psi4manual/4.0b4/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dftd3-1.html,4,['rout'],['route']
Integrability,"dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dftd3.html:5860,rout,route,5860,psi4manual/4.0b3/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html,1,['rout'],['route']
Integrability,"digits; message = """"""\t{}: computed value ({:.{digits1}f}) does not match ({:.{digits1}f}) to {digits} digits."""""".format(; label, computed, expected, digits1=int(digits)+1, digits=digits); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(expected - computed) > thresh:; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:7747,message,message,7747,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"dim1). start1 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret.np[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def _to_array(matrix: Union[core.Matrix, core.Vector], copy: bool = True, dense: bool = False) -> Union[np.ndarray, List[np.ndarray]]:; """"""; Converts a Psi4 Matrix or Vector to a NumPy array. Either copies the data or simply; constructs a view. Parameters; ----------; matrix; Pointers to which Psi4 core class should be used in the construction.; copy; Copy the data if `True`, return a view otherwise; dense; Converts irreped Psi4 objects to diagonally blocked dense arrays if `True`. Returns a list of arrays otherwise. Returns; -------; numpy.ndarray; Returns either a list of np.array's or the base array depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Examples; --------. >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]; """"""; if matrix.nirrep() > 1:. # We will copy when we make a large matrix; if dense:; copy = False. matrix_views = _get_raw_views(matrix, copy=copy). # Return the list of arrays; if dense is False:; return matrix_views. # Build the dense matrix; if isinstance(matrix, core.Vector):; ret_type = '1D'; elif isinstance(matrix, core.Matrix):; ret_type = '2D'; else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % type(matrix)). dim1 = []; dim2 = []; for h in matrix_views:; # Ignore zero dim irreps; if 0 in h.shape:; dim1.append(0); dim2.append(0); else:; dim1.append(h.shape[0]); if ret_type == '2D':; dim2.append(h.shape[1]). ndim1 = np.sum(dim1); ndim2 = np.sum(dim2); if ret_type == '1D':; dense_ret = np.zeros(shape=(ndim1)); start = 0; for d1,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html:6112,depend,depending,6112,psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/numpy_helper.html,3,['depend'],['depending']
Integrability,"dimensions. evals(self); Corresponding eigenvalues of the C matrix. id(self); Unique identifier. integral(self); The integral factory used to create C. name(self); Name of the orbital space. nirrep(self); Returns number of irreps. print_out(self); Print information about the orbital space to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi4.core.BasisSet¶; The AO basis set used to create C. static build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. static build_ri_space(molecule: psi4.core.Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.orbitalspace.html:1811,depend,dependencies,1811,psi4manual/1.4.0/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.orbitalspace.html,5,['depend'],['dependencies']
Integrability,"ding sequence of PSI module calls for; OMP2 gradient calculation. """"""; optstash = p4util.OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). psi4.set_global_option('DERTYPE', 'FIRST'); run_omp2(name, **kwargs); psi4.deriv(). optstash.restore(). [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = p4util.OptionsState(; ['OCC', 'ORB_OPT']). # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') == 'DF' or psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; mints = psi4.MintsHelper(); mints.integrals(). psi4.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs). optstash.restore(). [docs]def run_oldmp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; optstash = p4util.OptionsState(; ['TRANSQT2', 'WFN'],; ['CCSORT', 'WFN'],; ['MP2', 'WFN']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') == 'DF' or psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; mints = psi4.MintsHelper(); mints.integrals(). psi4.set_local_option('TRANSQT2', 'WFN', 'MP2'); psi4.set_local_option('CCSORT', 'WFN', 'MP2'); psi4.set_local_option('MP2', 'WFN', 'MP2'). psi4.transqt2(); psi4.ccsort(); psi4.mp2(). optstash.restore(). [docs]def run_mp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = p4util.OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). psi4.set_global_option('DERTYPE', 'FIRST'); psi4.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs); psi4.deriv(). optstash.restore(). [docs]def run_scs_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/proc.html:3703,rout,routine,3703,psi4manual/4.0b5/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/proc.html,1,['rout'],['routine']
Integrability,"ding_charges dict should have entries for each 1-indexed fragment.""). return v. [docs]; @validator(""return_total_data"", always=True); def set_return_total_data(cls, v, values):; if v is not None:; rtd = v; elif values[""driver""] in [""gradient"", ""hessian""]:; rtd = True; else:; rtd = False. if values.get(""embedding_charges"", False) and rtd is False:; raise ValueError(""Cannot return interaction data when using embedding scheme.""). return rtd. [docs]; def build_tasks(; self,; mb_computer: SubTaskComputers,; mc_level_idx: int,; **kwargs: Dict[str, Any],; ) -> int:; """"""Adds to the task_list as many new unique tasks as necessary to treat a single model chemistry level at one or several n-body levels.; New tasks are of type *mb_computer* with model chemistry level specified in *kwargs* and n-body levels accessed through *mc_level_idx*. Parameters; ----------; mb_computer; Class of task computers to instantiate and add to self.task_list. Usually :class:`~psi4.driver.AtomicComputer` but may be other when wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count : int; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""; # Get the n-body orders for this level; nbodies = self.nbodies_per_mc_level[mc_level_idx]. info = ""\n"" + p4util.banner(f"" ManyBody Setup: N-Body Levels {nbodies}"", strNotOutfile=True) + ""\n""; core.print_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html:36555,wrap,wrappers,36555,psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,3,['wrap'],['wrappers']
Integrability,"ditional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""; message: str; iteration: int; wfn: core.Wavefunction; e_conv: float; d_conv: float. def __init__(; self,; eqn_description: str,; iteration: int,; wfn: core.Wavefunction,; e_conv: float,; d_conv: float,; ):; ConvergenceError.__init__(self, eqn_description, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class TDSCFConvergenceError(ConvergenceError):; """"""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wav",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:6651,rout,routine,6651,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:28129,depend,depend,28129,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"dm_casscf::v2rdm_casscf.; Following the CMake project name (though not restricted to it –; PSI4 managment could change the pattern), the user flag to enable; an add-on is ENABLE_AddOn_name. Note that runtime-only; add-ons don’t go through this enabling process.; Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; addon_name.; The conda package and internal to; PSI4 (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; addon_name.; Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that’s what PSI4 does. How to integrate an Add-On into build, testing, and docs¶. In all cases, put Add-Ons in alphabetic order, ignoring any “lib” in the name.; psi4/CMakeLists.txt. Add the ENABLE_AddOn_name line; Add the external_addon_name dependency to the psi4-core external project; Add the AddOn_name_DIR variable passing to the psi4-core external project. psi4/psi4/CMakeLists.txt. Add a block imitating Libint if Add-On required or CheMPS2 if not; required; If there are shared resources to the external that need; to be found by PSI4 in PSIDATADIR, follow the efpfrag; pattern of libefp to symlink them in. psi4/psi4/src/CMakeLists.txt. No changes should be required unless both (1) code in export_*; or core.cc needs the USING_AddOn_name definition or; AddOn header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/. If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:2204,depend,dependency,2204,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['depend'],['dependency']
Integrability,"doc/sphinxman/document_psivariables.pl; * For now, we’re scraping both global and Wfn variables; * All of these show up in referenceable appendices like apdx:detci_psivar; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/psi4/include/psi4/psifiles.h. Some documentation is even extracted from PSI4 objects at runtime. psi4: docstrings for the C++ submodule psi4.core and the Python submodule psi4.driver that comprise PSI4. C++ docstrings from “core” and “export” files in psi4/psi4/src/, and Py docstrings from psi4/psi4/driver/.; DFT: functional availability and characteristics as encoded in psi4/psi4/driver/procrouting/dft; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/psi4/driver/qcdb/basislistdunning.py and psi4/psi4/driver/qcdb/basislistother.py. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; A third reStructuredText and Sphi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/documentation-1.html:4505,depend,dependency,4505,psi4manual/1.4.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/documentation-1.html,5,['depend'],['dependency']
Integrability,"doc/sphinxman/document_psivariables.pl; * For now, we’re scraping both global and Wfn variables; * All of these show up in referenceable appendices like apdx:detci_psivar; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/psi4/include/psi4/psifiles.h. Some documentation is even extracted from PSI4 objects at runtime. psi4: docstrings for the C++ submodule psi4.core and the Python submodule psi4.driver that comprise PSI4. C++ docstrings from “core” and “export” files in psi4/psi4/src/, and Py docstrings from psi4/psi4/driver/.; DFT: functional availability and characteristics as encoded in psi4/psi4/driver/procrouting/dft; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/psi4/driver/qcdb/basislistdunning.py and psi4/psi4/driver/qcdb/basislistother.py. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; Sphinx Docs. Math in the Codebase",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/documentation.html:4505,depend,dependency,4505,psi4manual/1.7.x/documentation.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/documentation.html,4,['depend'],['dependency']
Integrability,"documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/libefp-1.html:8819,depend,dependencies,8819,psi4manual/1.3.2/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/libefp-1.html,2,['depend'],['dependencies']
Integrability,"does not match ({:.{digits1}f}) to {digits} digits."""""".format(; label, computed, expected, digits1=int(digits) + 1, digits=digits); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(float(expected) - float(computed)) > thresh:; # float cast handles decimal.Decimal vars; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:7846,message,message,7846,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""). The data produced by running the above PsiAPI code can, for example, be used; with the Altair plotting library to produce the desired spectra. table of contents. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; TDSCF_STATES; TDSCF_TRIPLETS; TDSCF_TDA; TDSCF_R_CONVERGENCE; TDSCF_MAXITER; TDSCF_GUESS; TDSCF_PRINT; TDSCF_COEFF_CUTOFF; TDSCF_TDM_PRINT. PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; TDSCF: Time-dependent Hartree–Fock and density-functional theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/tdscf.html:12839,depend,dependent,12839,psi4manual/master/tdscf.html,https://psicode.org,https://psicode.org/psi4manual/master/tdscf.html,2,['depend'],['dependent']
Integrability,"ds in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables. Deprecated since version 1.1: Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS; do not affect threading in PSI4. (2) The -n Command Line Flag; To change the number of threads at runtime, the psi4 -n flag may be used. An; example is:; psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation.; (3) Setting Thread Numbers in an Input;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/external-1.html:10079,rout,routines,10079,psi4manual/1.1.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/external-1.html,15,['rout'],['routines']
Integrability,"dule wrappers). SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STEP_TYPE (OPTKING). success() (in module util). superfunctional_list() (in module functional). symmetry. molecule. T. T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table (class in text). TAU_SQUARED (DCFT). tblhead() (in module wrappers). TDHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() (in module functional). TEST_DERIVATIVE_B (OPTKING). text (module). theory; . ADC. CC. CI. DF-MP2. DFT. SAPT. SCF. cbs(), [1]. threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SIZE (PLUGIN_TEST_MATRIX), [1]. TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. units; . molecule. UNITS (GLOBALS). UPDATE (DETCI). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). util (module). V. VAL_EX_LEVEL (DETCI). validate_bracketed_basis() (in module wrappers). validate_scheme_args() (in module wrappers). ValidationError. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). W. WABEI_LOWDISK (CCHBAR). WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (CLAG). (DETCI). (GLOBALS). (LMP2). (MP2). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). wrappers (module). X. XI (CCDENSITY). XI_CONNECT (CCDENSITY). Z. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:28567,wrap,wrappers,28567,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,3,['wrap'],['wrappers']
Integrability,dule wrappers. CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). corresponding_dualfit() in module basislist. corresponding_jkfit() in module basislist. corresponding_rifit() in module basislist. Cotton-ordering. counterpoise_correct(); . see cp(); . Coupled-Pair Methods. theory. COUPLING (PSIMRCC). COUPLING_TERMS (PSIMRCC). COVALENT_CONNECT (OPTKING). cp(); . setting keywords. cp() in module wrappers. CP-CORRECTED2-BODYINTERACTIONENERGY. CPHF_MEM_SAFETY_FACTOR (CPHF). CPHF_TASKS (CPHF). create_molecule_from_string() LibmintsMolecule method. cross() in module qcdb.vecutil. CURRENTCORRELATIONENERGY. CURRENTENERGY. CURRENTREFERENCEENERGY. CUTOFF (OMP2). (OMP3). D. d() CoordEntry static method. D_CONVERGENCE (MCSCF). (SAPT). (SCF). DAMPING_CONVERGENCE (SCF). DAMPING_PERCENTAGE (DCFT). (PSIMRCC). (SCF). dash_server() in module dashparam. dashparam module. database(). adding new. available. output. setting keywords. database() in module wrappers. db(); . see database(); . db_nameDATABASEMEANABSOLUTEDEVIATION. db_nameDATABASEMEANSIGNEDDEVIATION. db_nameDATABASEROOT-MEAN-SQUARESIGNEDDEVIATION. DCFT_GUESS (DCFT). deactivate_all_fragments() LibmintsMolecule method. DEBUG (CPHF). (GLOBALS). DELETE_AO (TRANSQT). DELETE_RESTR_DOCC (TRANSQT). DELETE_TEI (TRANSQT2). DELETE_TPDM (TRANSQT). DENOMINATOR_ALGORITHM (SAPT). DENOMINATOR_DELTA (SAPT). density-fitting; . MP2. DERTYPE (GLOBALS). DETCI_FREEZE_CORE (DETCI). determinant() in module qcdb.vecutil. DF-MP2. theory. DF-MP2CORRELATIONENERGY. DF-MP2TOTALENERGY. DF_BASIS_ELST (SAPT). DF_BASIS_GUESS (SCF). DF_BASIS_MP2 (DFMP2). (LMP2). DF_BASIS_SAPT (SAPT). DF_BASIS_SCF (CPHF). (SCF). DF_FITTING_CONDITION (SCF). DF_INTS_IO (DFMP2). (SCF). DF_INTS_NUM_THREADS (DFMP2). (SCF). DF_LMP2 (LMP2). DFMP2_MEM_FACTOR (DFMP2). DFMP2_P2_TOLERANCE (DFMP2). DFMP2_P_TOLERANCE (DFMP2). DFT. available functionals. theory. DFT_ALPHA (SCF). DFT_BASIS_TOLERANCE (SCF). DFT_BLOCK_MAX_POINTS (SCF). ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:15302,wrap,wrappers,15302,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"dule. PubChemObj class in pubchem. PUREAM (GLOBALS). push_sect() Getkw method. GetkwParser method. PYTHONPATH, [1], [2], [3]. Q. QC_COUPLING (DCFT). qcdb module. qcdb.__init__ module. qcdb.dbproc module. qcdb.exceptions module. qcdb.libmintscoordentry module. qcdb.libmintsmolecule module. qcdb.molecule module. qcdb.periodictable module. qcdb.physconst module. qcdb.psiutil module. qcdb.vecutil module. QcdbException. QCISD(T). QCISD(T)CORRELATIONENERGY. QCISD(T)TOTALENERGY. QCISDCORRELATIONENERGY. QCISDTOTALENERGY. QMMM class in qmmm. qmmm module. QRHF (TRANSQT). query_yes_no() in module qcdb.psiutil. quotify() in module inputparser. R. r() CoordEntry static method. R4S (DETCI). R_CONVERGENCE (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (DCFT). (DETCI). (FNOCC). (OCC). (PSIMRCC). R_POINTS (SCF). RADIUS (SCF). RAS1 (DETCI). (TRANSQT). RAS2 (DETCI). (TRANSQT). RAS3 (DETCI). (TRANSQT). RAS34_MAX (DETCI). RAS3_MAX (DETCI). RAS4 (DETCI). (TRANSQT). RAS4_MAX (DETCI). reconstitute_bracketed_basis() in module wrappers. REFERENCE (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CPHF). (DCFT). (DETCI). (MCSCF). (SCF). (STABILITY). (TRANSQT). (TRANSQT2). REFERENCE_SYM (DETCI). reinterpret_coordentries() LibmintsMolecule method. reinterpret_coordentry() LibmintsMolecule method. RELAX_GUESS_ORBITALS (DCFT). RELAX_TAU (DCFT). release_symmetry_information() LibmintsMolecule method. REORDER (TRANSQT). REPL_OTF (DETCI). reset_point_group() LibmintsMolecule method. RESPONSE_ALGORITHM (DCFT). RESTART (CCENERGY). (CCLAMBDA). (CCRESPONSE). (DETCI). RESTART_EOM_CC3 (CCEOM). restore() OptionsState method. OptionState method. RESTRICTED_DOCC (DETCI). (PSIMRCC). (TRANSQT). RESTRICTED_UOCC (DETCI). (TRANSQT). RFO_FOLLOW_ROOT (OPTKING). RFO_ROOT (OPTKING). RGC10 module, [1]. RHF_TRIPLETS (CCEOM). RMS_DISP_G_CONVERGENCE (OPTKING). RMS_FORCE_G_CONVERGENCE (OPTKING). RMS_MOGRAD_CONVERGENCE (OCC). ROOTS_PER_IRREP (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCLAMBDA). ro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:39151,wrap,wrappers,39151,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['wrap'],['wrappers']
Integrability,"dy_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat); e/g/h := energy or gradient or Hessian; rtd := return_total_data. .. |em| unicode:: U+02003 .. em space. .. _`table:nbody_return`:. +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | item | size | present / zeroed | contents / interpretation |; +===============================================================+======================+====================================================================+====================================================================================================================+; | ret_ptype | ptype_size | always | interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver) |; | | | | with cp/nocp/vmfc treatment (depending on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_energy | 1 | always | interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type) |; +---------------------------------------------------------------+----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------+; | ret_gradient | (nat, 3) | when driver is g/h | interaction gradient: IE or total (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:41198,depend,depending,41198,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,20,['depend'],['depending']
Integrability,"e (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:11454,integrat,integrate,11454,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,2,['integrat'],['integrate']
Integrability,"e (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html:11454,integrat,integrate,11454,psi4manual/1.5.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html,2,['integrat'],['integrate']
Integrability,"e :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string descri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:5175,rout,routine,5175,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"e = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. """"""; message: str; iteration: int; wfn: core.Wavefunction; e_conv: float; d_conv: float. def __init__(; self,; eqn_description: str,; iteration: int,; wfn: core.Wavefunction,; e_conv: float,; d_conv: float,; ):; ConvergenceError.__init__(self, eqn_description, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class TDSCFConvergenceError(ConvergenceError):; """"""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:6740,rout,routine,6740,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"e == 'scsn-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSN'); elif (lowername == 'scs-mi-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp2-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP3 gradient calculation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); run_omp3(name, **kwargs); PsiMod.deriv(). ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:4171,rout,routine,4171,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"e CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ LICENSE psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gdma, Libint, PCMSolver, pybind11, simint; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:8834,depend,dependencies,8834,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"e Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithonmol-1.html:13129,depend,dependent,13129,psi4manual/1.1.0/psithonmol-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithonmol-1.html,6,['depend'],['dependent']
Integrability,"e Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; SOCC = [1, 0, 0, 0]. specification, which would become; SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; SOCC = [0, 0, 0, 1]. would be mapped to; SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; vari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithonmol-1.html:12545,depend,dependent,12545,psi4manual/1.4.0/psithonmol-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithonmol-1.html,9,['depend'],['dependent']
Integrability,"e PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309],; while ddx is based on a domain decomposition approach; [Cances:2013:054111] making it linear scaling.; For more details about PCMSolver see the section on PCMsolver.; For a concise introduction to the; theory behind ddx; or further literature references; see the ddx documentation.; The usage of ddx-based solvation models is enabled; by specifying DDX true in your input file.; The solvation model itself is selected using the DDX_MODEL parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. Note; At present dd-based solvation models; can only be used for energy calculations with SCF; wavefunctions. All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF,; CD) are supported. Warning; Currently the ddx interface cannot exploit molecular point group symmetry. Warning; Analytic gradients and Hessians are currently not available; with dd-based solvation models. A minimal input for a Hartree–Fock calculation with dd-based PCM would look like; the following:; import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.energy('SCF'). Solvent model and solvent cavity definition¶; Beyond setting DDX to true and selecting; a solvent model using DDX_MODEL,; the definition of the solvent is mandatory.; Regularly one might want to influence the setup of the solvent; cavity as well.; The solvent can be defined either by directly providing a dielectric; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:2482,interface,interface,2482,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,2,['interface'],['interface']
Integrability,"e Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". __all__ = [; ""ConvergenceError"",; ""MissingMethodError"",; ""ManagedMethodError"",; ""OptimizationConvergenceError"",; ""ParsingError"",; ""PastureRequiredError"",; ""PsiException"",; ""SCFConvergenceError"",; ""TDSCFConvergenceError"",; ""TestComparisonError"",; ""UpgradeHelper"",; ""ValidationError"",; ""docs_table_link"",; ""sanitize_method"",; ]. from typing import Any, Dict, List, Optional; from psi4 import core, extras. [docs]; class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False; pass. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:1994,message,message,1994,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"e ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' in kwargs:; # do_delta3 = True; # cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); # if cbs_delta3_wfn not in VARH.keys():; # raise ValidationError(""""""Requested DELTA3 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn)); #; # cbs_delta3_wfn_lesser = kwargs.get('delta3_wfn_lesser', cbs_delta2_wfn).lower(); # if not (cbs_delta3_wfn_lesser in VARH.keys()):; # raise ValidationError(""""""Requested DELTA3 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn_lesser)); #; # # Establish method for fourth delta cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:32385,wrap,wrapper,32385,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,3,['wrap'],['wrapper']
Integrability,"e Values: basis string; Default: No Default. DLPNO_LOCAL_ORBITALS¶. Orbital localizer. Type: string; Possible Values: BOYS, PIPEK_MEZEY; Default: BOYS. DLPNO_MAXITER¶. Maximum number of iterations to determine the MP2 amplitudes. Type: integer; Default: 50. E_CONVERGENCE¶. Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. LOCAL_CONVERGENCE¶. Convergence criteria for the Foster-Boys orbital localization. Type: conv double; Default: 1.0e-12. LOCAL_MAXITER¶. Maximum iterations in Foster-Boys localization. Type: integer; Default: 1000. PNO_CONVERGENCE¶. General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. R_CONVERGENCE¶. Residual convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. Expert Expert Options¶. F_CUT¶. Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations. Type: double; Default: 1e-5. S_CUT¶. Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. T_CUT_CLMO¶. Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO¶. Basis set coefficient threshold for including basis function (n) in domain of PAO (u). Type: double; Default: 1e-3. T_CUT_DO¶. DOI threshold for including PAO (u) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_DO_PRE¶. DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening. Type: double; Default: 3e-2. T_CUT_DO_IJ¶. DOI threshold for treating LMOs (i,j) as interacting. Type: double; Default: 1e-5. T_CUT_MKN¶. Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i). Type: double; Default: 1e-3. T_CUT_PNO¶. Occupation number threshold for removing PNOs. Type: double; Default: 1e-8. T_CUT_PRE¶. Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting. Type: double; Default: 1e-6. table of contents. DLPNO; G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html:1343,depend,dependencies,1343,psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__dlpno-1.html,6,['depend'],['dependencies']
Integrability,"e a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROPS¶. Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_PROP_INTEGRAL¶. Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_QRHFGUES¶. If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:46784,depend,dependent,46784,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,34,['depend'],['dependent']
Integrability,"e and reopen with filehandle; print('output in', current_directory + '/' + core.outfile_name()); pathfill = '' if os.path.isabs(core.outfile_name()) else current_directory + os.path.sep. # Handle threading; # OMP_NUM_THREADS from env is in lenv from above; # threads from psi4 -n (core.get_num_threads()) is ignored; # CFOUR_OMP_NUM_THREADS psi4 option takes precedence, handled below; if core.has_option_changed('CFOUR', 'CFOUR_OMP_NUM_THREADS'):; lenv['OMP_NUM_THREADS'] = str(core.get_option('CFOUR', 'CFOUR_OMP_NUM_THREADS')). #print(""""""\n\n<<<<< RUNNING CFOUR ... >>>>>\n\n""""""); # Call executable xcfour, directing cfour output to the psi4 output file; cfour_executable = kwargs['c4exec'] if 'c4exec' in kwargs else 'xcfour'; try:; retcode = subprocess.Popen([cfour_executable], bufsize=0, stdout=subprocess.PIPE, env=lenv); except OSError as e:; sys.stderr.write('Program %s not found in path or execution failed: %s\n' % (cfour_executable, e.strerror)); message = ('Program %s not found in path or execution failed: %s\n' % (cfour_executable, e.strerror)); raise ValidationError(message). c4out = ''; while True:; data = retcode.stdout.readline(); data = data.decode('utf-8'); if not data:; break; core.print_out(data); c4out += data; internal_p4c4_info['output'] = c4out. c4files = {}; core.print_out('\n'); for item in ['GRD', 'FCMFINAL', 'DIPOL']:; try:; with open(psioh.get_default_path() + cfour_tmpdir + '/' + item, 'r') as handle:; c4files[item] = handle.read(); core.print_out(' CFOUR scratch file %s has been read\n' % (item)); core.print_out('%s\n' % c4files[item]); internal_p4c4_info[item.lower()] = c4files[item]; except IOError:; pass; core.print_out('\n'). if molecule.name() == 'blank_molecule_psi4_yo':; qcdbmolecule = None; else:; molecule.update_geometry(); qcdbmolecule = qcdb.Molecule(molecule.create_psi4_string_from_molecule()); qcdbmolecule.update_geometry(). # c4mol, if it exists, is dinky, just a clue to geometry of cfour results; psivar, c4grad, c4mol = qcdb.cfour.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html:8327,message,message,8327,psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html,1,['message'],['message']
Integrability,"e and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; 1; 2grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; 1; 2dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/gdma-1.html:2068,rout,routine,2068,psi4manual/1.1.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/gdma-1.html,6,['rout'],['routine']
Integrability,"e and you want gdma built from; from source also,; enable it as a feature with ENABLE_gdma,; and let the build system fetch and build it and activate dependent code. Input¶; The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the GDMA package, is available in PSI4.; The current implementation simply embeds Stone’s GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section FCHK) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the; GDMA manual.; If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory PSI4; is called from, and provide the file name as the datafile argument to the; gdma() routine. For example, if GDMA data file is called; control.dma, the GDMA code is called as follows:; grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by WRITER_FILE_LABEL (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be ‘.fchk’. This FCHK file name should be passed to the ‘File’ keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information.; After running, two matrices of results can be accessed:; dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; GDMA_MULTIPOLE_UNITS, with the row index corresponding to the site and; the column index referencing the multipole com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gdma-1.html:2152,rout,routine,2152,psi4manual/1.4.0/gdma-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gdma-1.html,9,['rout'],['routine']
Integrability,"e arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function to run scf and fit a system of diffuse charges to; resulting density. populateExtern(extern)[source]¶. class QMMM[source]¶. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. qcdb¶; Module to facilitate quantum chemical computations on chemical; databases. Contains Molecule class and physical constants from psi4 suite.; Module with commands building BasisFamily objects; for Pople and other n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8815,integrat,integrate,8815,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['integrat'],['integrate']
Integrability,"e cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/cc-1.html:6312,rout,routines,6312,psi4manual/4.0b2/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cc-1.html,8,['rout'],['routines']
Integrability,"e cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with Psi4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:6411,rout,routines,6411,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['rout'],['routines']
Integrability,"e cases like EFP where no wavefunction available.; For now, CURRENT ENERGY will be set by; energy(), etc. In future, this will be extracted from the wavefunction.; # return highest or most prominent wavefunction (like dimer for SAPT); return fnocc_wfn. Managed Methods¶; There are several conditions when a method and derivative combination should be managed:. when functionality overlaps between modules, a pattern is needed to; access each route through the code;; when functionality doesn’t overlap completely, a pattern is needed to apportion defaulting among; the modules, taking into account reference (RHF/UHF/ROHF), calc type (CONV/DF/CD), and possibly; FREEZE_CORE state (AE/FC).; for higher-level derivatives, when, say, gradient functionality for mtd+ref+type+fcae doesn’t; exactly match energy functionality, a pattern is needed to decide analytic vs. finite difference.; when default type is not available for a method (e.g., CCD governed by CC_TYPE that; defaults to CONV but only DF and CD CCD is available), an informative error message is needed. Managed methods handle these cases through the addition of a new; keyword QC_MODULE and a set of type keywords analogous to; MP2_TYPE: MP_TYPE,; CI_TYPE, CC_TYPE, which can have values CONV,; DF, and CD. These are all global keywords, as their values are; shared among modules rather than (or in addition to) being used internally; by the module). We’re sticking with SCF_TYPE and; MP2_TYPE defaulting to DF, while most everything higher defaults; to CONV. (Exceptions are MP2.5 and MP3 that default to DF.); In psi4/psi4/driver/procrouting/proc_table.py, a managed method calls a; “select” function rather than a “run” function.; procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in psi4/psi4/driver/procrouting/proc.py, the select function runs through; reference, type, and possibly freeze_core to specify the proc; function to call for any able, non-default module (e.g., mtd_type ==; 'DETCI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/proc_py.html:4941,message,message,4941,psi4manual/1.7.x/proc_py.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/proc_py.html,4,['message'],['message']
Integrability,"e conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integratin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/code_style-1.html:1127,integrat,integrated,1127,psi4manual/1.4.0/code_style-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html,9,['integrat'],['integrated']
Integrability,"e dependent code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ERD by N. Flocke and V. Lotrich. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/erd.html:3116,depend,dependencies,3116,psi4manual/1.6.x/erd.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/erd.html,1,['depend'],['dependencies']
Integrability,"e error of the final answer, highlighting the; efficiency of the SAD guess. The energy and density then converge smoothly,; assisted by Pulay’s Direct Inversion of the Iterative Subspace (DIIS), which is; activated by default. DIIS from a high-quality guess is usually sufficient to; converge the nonlinear SCF equations, however enhanced control of DIIS; parameters and additional convergence algorithms are available and detailed; below.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree-Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) ,. Here, are the basis functions, which, in PSI4 are; contracted cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix contains the MO coefficients, which are the; constrained variational parameters in Hartree-Fock. The molecular orbitals, are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. This form for the Hartree-Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; instead of a more complicated effect in; .; Considering the electronic Hamiltonian,. the Hartree-Fock energy is, by Slater’s rules,. Here is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. is the AO-basis density matrix, build from the occupied orbital; coefficients,. and is the Fock matrix, which is the effective one-body potential at; the current value of the density,. Here the tensor is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. The MO coefficients are found as the ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/scf-1.html:3438,contract,contracted,3438,psi4manual/4.0b2/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html,4,['contract'],['contracted']
Integrability,"e implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with property-related helper functions."""""". import psi4; from . import optproc. __all__ = ['free_atom_volumes']. [docs]def free_atom_volumes(wfn: psi4.core.Wavefunction, **kwargs):; """""" ; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, :psivar:`MBIS FREE ATOM n VOLUME`.; Free-atom densities are computed at the same level of theory as the molecule, ; and we use unrestricted references as needed in computing the ground-state. . The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters; ----------; wfn; The wave function associated with the molecule, method, and basis for ; atomic computations; """""". # If we're already a free atom, break to avoid recursion; # We don't ever need volume ratios for free atoms since they; # are by definition 1.0; natom = wfn.molecule().natom(); if natom == 1:; return 0 ; . # the level of theory; current_en = wfn.scalar_variable('CURRENT ENERGY'); total_energies = [k for k, v in wfn.scalar_variables().items() if abs(v - current_en) <= 1e-12]; theory = """"; for var in total_energies:; if 'TOTAL ENERGY' in var:; var = var.split(); if var[0] == 'SCF':; continue; elif var[0] == 'DFT':; theory = wfn.functional().name(); else:; theory = var[0]. # list of reference number of unpaired electrons.; # Note that this is not the same as the; # total spin of the ground state atom; reference_S = [; 0, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 2,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/prop_util.html:1757,rout,routine,1757,psi4manual/1.7.x/_modules/psi4/driver/p4util/prop_util.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/prop_util.html,1,['rout'],['routine']
Integrability,"e in later correlated computations. Type: integer; Default: 0. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SOCC¶. An array containing the number of singly-occupied orbitals per irrep (in Cotton order). The value of DOCC should also be set. Type: array",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__globals-1.html:5993,rout,routing,5993,psi4manual/1.3.2/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__globals-1.html,2,['rout'],['routing']
Integrability,"e is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:13735,wrap,wrapper,13735,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,4,['wrap'],['wrapper']
Integrability,"e is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. Table Of Contents. Interface to DFTD3 by S. Grimme; Installation; Theory; Running DFTD3. Previous topic; Interface to CheMPS2 by S. Wouters; Next topic; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:8200,interface,interface,8200,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,2,['interface'],['interface']
Integrability,"e norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""; message: str; iteration: int; wfn: core.Wavefunction; what: str; stats: Dict[str, Any]. def __init__(self, iteration: int, wfn: core.Wavefunction, what: str, stats: Dict[str, Any]):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. # CSXError ceased to be used by v1.4. Class removed by v1.7; # class CSXError(PsiException):. [docs]; class MissingMethodError(ValidationError):; """"""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; ValidationErr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:8880,message,message,8880,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"e norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""; message: str; iteration: int; wfn: core.Wavefunction; what: str; stats: Dict[str, Any]. def __init__(self, iteration: int, wfn: core.Wavefunction, what: str, stats: Dict[str, Any]):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. # CSXError ceased to be used by v1.4. Class removed by v1.7; # class CSXError(PsiException):. [docs]class MissingMethodError(ValidationError):; """"""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; ValidationError",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:8860,message,message,8860,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"e normalization, .; The CISD correlation energy is given by. (2); and the amplitudes can be determined by the solution to the coupled set of eqations:. (3); The CISD method is not size-extensive, but this problem can be overcome by making very simple modifications to the amplitude; equations. With malice and forethought, we replace the correlation energy, , with generalized shifts for; the doubles and singles equations, and :. (4); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several coupled-pair methods are given in Table; CEPA Shifts. Note that these shifts are defined in a spin-free formalism; for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial sum of the correlation energy. In a spin-free formalism,; the pair energy is given by. (5); Methods whose shifts ( and ) do not explicitly depend on orbitals or ; (CISD, CEPA(0), ACPF, and AQCC); have solutions that render the energy stationary with respect variations in the amplitudes. This convenient property allows; density matrices and 1-electron properties to be evaluated without any additional effort.; The coupled-pair methods currently supported in PSI4 are outlined in Table CEPA Methods. name; calls method; energy; derivatives; 1-electron properties. cepa(0); coupled electron pair approximation, variant 0; Y; N; Y. cepa(1); coupled electron pair approximation, variant 1; Y; N; N. cepa(3); coupled electron pair approximation, variant 3; Y; N; N. acpf; averaged coupled-pair functional; Y; N; Y. aqcc; averaged quadratic coupled-cluster; Y; N; Y. sdci; configuration interaction with single and double excitations; Y; N; Y. dci; configuration interaction with double excitations; Y; N; Y. Basic Coupled Pair Keywords¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/cepa-1.html:2130,depend,depend,2130,psi4manual/4.0b3/cepa-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html,2,['depend'],['depend']
Integrability,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:2938,interface,interface,2938,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,18,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"e of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_addon.html:11454,integrat,integrate,11454,psi4manual/1.7.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_addon.html,1,['integrat'],['integrate']
Integrability,"e other when wrappers are layered.; mc_level_idx (int) – Position in field self.nbodies_per_mc_level used to obtain nbodies, the list of n-body; levels (e.g., [1] or [1, 2] or [“supersystem”]) to which the modelchem specified in kwargs applies.; That is, nbodies = self.nbodies_per_mc_level[mc_level_idx].; Note the natural 1-indexing of nbodies _contents_, so [1] covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, mc_level_lbl = mc_level_idx + 1; Formerly nlevel as in nbody = self.nbody_list[nbody_level=nlevel].; kwargs (Dict[str, Any]) – Other arguments for initializing mb_computer. In particular, specifies model chemistry. Returns:; count – Number of new tasks planned by this call.; Formerly, didn’t include supersystem in count. Return type:; int. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[FractalClient]) – . get_psi_results(return_wfn=False)[source]¶; Called by driver to assemble results into ManyBody-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: (e/g/h, wfn). Parameters:; return_wfn (bool) – Whether to additionally return the dummy Wavefunction; calculation result as the second element of a tuple. Contents are:. supersystem molecule; dummy basis, def2-svp; e/g/h member data; QCVariables. Return type:; Union[float, Matrix, Tuple[Union[float, Matrix], Wavefunction]]. Returns:. ret – Energy, gradient, or Hessian according to self.driver.; wfn – Wavefunction described above when return_wfn specified. get_results(client=None)[source]¶; Return results as ManyBody-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶. prepare_results(results=None, client=None)[source]¶; Process the results from all n-body component molecular systems and model chemistry levels into final quantities. Parameters:. results (Optional[Dict[str, Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]]]) ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/nbody.html:16718,interface,interface,16718,psi4manual/1.7.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/nbody.html,1,['interface'],['interface']
Integrability,"e output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; 1; 2; 3; 4RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. --------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/db-1.html:7383,wrap,wrapper,7383,psi4manual/1.2.1/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/db-1.html,6,['wrap'],['wrapper']
Integrability,"e please make reference to the appropriate following paper:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dkh-1.html:3430,depend,dependencies,3430,psi4manual/1.3.2/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dkh-1.html,2,['depend'],['dependencies']
Integrability,"e proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/pep0001.html:2314,interface,interface,2314,psi4manual/1.8.x/pep0001.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/pep0001.html,1,['interface'],['interface']
Integrability,"e proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PsiPEP: Plans and Practices to Organize PSI4; PEP1: Proposing PsiPEP for PSI4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/pep0001.html:2314,interface,interface,2314,psi4manual/1.9.x/pep0001.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/pep0001.html,1,['interface'],['interface']
Integrability,"e root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. Expert Guess Vectors¶. CI_FILE_START¶. What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. FILTER_GUESS¶. Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1 FILTER_GUESS_DET2 and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1¶. Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS . Type: array; Default: No Default. FILTER_GUESS_DET2¶. Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS . Type: array; Default: No Default. FILTER_GUESS_SIGN¶. The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET¶. If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__detci-1.html:17126,rout,routine,17126,psi4manual/1.3.2/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__detci-1.html,4,['rout'],['routine']
Integrability,"e set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings). (First line; for C shell; second line for bash.); setenv PSI_SCRATCH /scratch/user; export PSI_SCRATCH=/scratch/user. The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables; The easiest/least visible way to thread PSI4 is to set the standard OpenMP/MKL; environment variables OMP_NUM_THREADS and MKL_NUM_THREADS.; For instance, in tcsh:; setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4. PSI4 then detects these value via the API routines in <omp.h> and; <mkl.h>, and runs all applicable code with 4 threads. These environment; variables are typically defined in a .tcshrc or .bashrc.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/external-1.html:5601,rout,routines,5601,psi4manual/4.0b3/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html,6,['rout'],['routines']
Integrability,"e string, not the right.; label = ', '.join(reversed(label)); return disp_geom, label. def _initialize_findif(mol: Union[""qcdb.Molecule"", core.Molecule],; freq_irrep_only: int,; mode: str,; stencil_size: int,; step_size: float,; initialize_string: Callable,; t_project: bool,; r_project: bool,; initialize: bool,; verbose: int = 0) -> Dict:; """"""Perform initialization tasks needed by all primary functions. Parameters; ----------; mol; The molecule to displace; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps.; mode; {""1_0"", ""2_0"", ""2_1""}; The first number specifies the derivative level determined from; displacements, and the second number is the level determined at.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; [a0]; initialize_string; A function that returns the string to print to show the caller was entered.; The string is both caller-specific and dependent on values determined; in this function.; initialize; For printing, whether call is from generator or assembly stages.; verbose; Set to 0 to silence extra print information, regardless of the print level.; Used so the information is printed only during geometry generation, and not; during the derivative computation as well. Returns; -------; data; Miscellaneous information required by callers.; """""". info = """"""; ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ----------------------------------------------------------. """"""; if initialize:; core.print_out(info); logger.info(info). print_lvl = core.get_option(""FINDIF"", ""PRINT""). data = {""print_lvl"": print_lvl, ""stencil_size"": stencil_size, ""step_size"": step_size}. if print_lvl:; info = initialize_string(data); core.print_out(info); logger.info(info). # Get settings for CdSalcList, then get the CdSalcList.; method_allowed_irreps = 0x1 if mode == ""1_0"" else 0xFF; # core.get_option r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:7564,depend,dependent,7564,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,4,['depend'],['dependent']
Integrability,"e structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number or an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to \(10^{-6} E_h\), the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Notes on PSI Variables¶. Note; Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. method ROOT 0 -> ROOT m property to get root m.; method ROOT 0 -> ROOT m property - h TRANSITION to get root m and; independently specify that the total transition symmetry is h, e.g., A2.; method ROOT 0 (h) -> ROOT m (i) property to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than; with the molecular system. Changing the number of roots sought, the symmetry; subspace or the symmetry apportionment of roots under which the computation is run,; or the excited state method are all likely to scramble root numberings. table of contents. Notes on Options; Notes on PSI Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; Notes on Options. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/notes_c.html:1930,interface,interface,1930,psi4manual/master/notes_c.html,https://psicode.org,https://psicode.org/psi4manual/master/notes_c.html,1,['interface'],['interface']
Integrability,"e table of contents for the given unit. tocwrite(self: psi4.core.IO, arg0: int) → None¶; Write the table of contents for passed file number. class psi4.core.IOManager¶; Bases: pybind11_builtins.pybind11_object; PSIOManager is a class designed to be used as a static object to track all PSIO operations in a given PSI4 computation. crashclean(self: psi4.core.IOManager) → None¶; Clean from disk-mirrored image after crash. NOT to be called during regular computation. get_default_path(self: psi4.core.IOManager) → str¶; Return the default path. get_file_path(self: psi4.core.IOManager, fileno: int) → str¶; Get the path for a specific file number. mark_file_for_retention(self: psi4.core.IOManager, full_path: str, retain: bool) → None¶; Mark a file to be retained after a psiclean operation, ie for use in a later computation. print_out(self: psi4.core.IOManager) → None¶; Print the current status of PSI4 files. psiclean(self: psi4.core.IOManager) → None¶; Execute the psiclean protocol, deleting all recorded files, except those currently marked for retention. set_default_path(self: psi4.core.IOManager, path: str) → None¶; Set the default path for files to be stored. set_specific_path(self: psi4.core.IOManager, fileno: int, path: str) → None¶; Set the path for specific file numbers. set_specific_retention(self: psi4.core.IOManager, fileno: int, retain: bool) → None¶; Set the specific file number to be retained. shared_object() → psi4.core.IOManager¶; The one and (should be) only instance of PSIOManager for a PSI4 instance. write_scratch_file(self: psi4.core.IOManager, full_path: str, text: str) → None¶; Write a string to a temporary file. The scratch file is opened and closed by this function. class psi4.core.IntVector¶; Bases: pybind11_builtins.pybind11_object; Class handling vectors with integer values. dim(self: psi4.core.IntVector, h: int) → int¶; Returns the number of dimensions per irrep h. get(self: psi4.core.IntVector, h: int, m: int) → int¶; Returns a single element valu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:82983,protocol,protocol,82983,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['protocol'],['protocol']
Integrability,"e the elements of and ,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements and; cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCFT, one takes a different route and; replaces in favor of its two-particle density cumulant:. The one-particle density matrix is separated into its idempotent part; and a correction :. The idempotent part of corresponds to a mean-field Hartree-Fock-like density,; while the non-idempotent correction ; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. Energy functional has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of () and the density cumulant; (). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCFT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; .; In orde",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:1835,depend,depends,1835,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,2,['depend'],['depends']
Integrability,"e them if; only the df integrals were run previously.; # Bypass the scf call if a reference wavefunction is given. ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') in ['DF', 'CD']:; psi4.MintsHelper(ref_wfn.basisset()).integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; psi4.transqt2(); psi4.ccsort(); psi4.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Managed Methods¶; When functionality overlaps between modules, a pattern is needed to (1); access each route through the code without contrivances like ccsd2,; _ccsd, sdci and (2) apportion defaulting among the modules, taking; into account reference (RHF/UHF/ROHF) and calc type (CONV, DF, CD).; Managed methods handle both these cases through the addition of a new; keyword QC_MODULE and a set of type keywords analogous to; MP2_TYPE: MP_TYPE,; CI_TYPE, CC_TYPE, which can have values CONV,; DF, and CD. These are all global keywords, as their values are; shared among modules rather than (or in addition to) being used internally; by the module). We’re sticking with SCF_TYPE and; MP2_TYPE defaulting to DF, while everything higher defaults; to CONV. In psi4/psi4/driver/driver.py, a managed method calls a; “select” function rather than a “run” function.; procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in psi4/psi4/driver/procrouting/proc.py, the select function runs through; reference (always outer loop) and type (inner loop) to specify the proc; function to call for any able, non-default modul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/proc_py-1.html:3737,rout,route,3737,psi4manual/1.4.0/proc_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/proc_py-1.html,5,['rout'],['route']
Integrability,"e them if; only the df integrals were run previously.; # Bypass the scf call if a reference wavefunction is given. ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') in ['DF', 'CD']:; psi4.MintsHelper(ref_wfn.basisset()).integrals(). Direct any post-scf modules to be run.; # include if further post-scf modules are needed; psi4.transqt2(); psi4.ccsort(); psi4.mp2(). If an OptionsState object was set up, those options; need to be returned to the original user state with the following.; # include if optstash = OptionsState( was set up previously; optstash.restore(). No function should return anything. CURRENT ENERGY will be set by; energy(), etc.; # never include; return returnvalue. Managed Methods¶; When functionality overlaps between modules, a pattern is needed to (1); access each route through the code without contrivances like ccsd2,; _ccsd, sdci and (2) apportion defaulting among the modules, taking; into account reference (RHF/UHF/ROHF) and calc type (CONV, DF, CD).; Managed methods handle both these cases through the addition of a new; keyword QC_MODULE and a set of type keywords analogous to; MP2_TYPE: MP_TYPE,; CI_TYPE, CC_TYPE, which can have values CONV,; DF, and CD. These are all global keywords, as their values are; shared among modules rather than (or in addition to) being used internally; by the module). We’re sticking with SCF_TYPE and; MP2_TYPE defaulting to DF, while everything higher defaults; to CONV. In psi4/share/python/driver.py, a managed method calls a; “select” function rather than a “run” function.; procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dcft' : run_dcft,. Then in psi4/share/python/proc.py, the select function runs through; reference (always outer loop) and type (inner loop) to specify the proc; function to call for any able, non-default module (e.g.,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/proc_py-1.html:3750,rout,route,3750,psi4manual/1.0.0/proc_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/proc_py-1.html,2,['rout'],['route']
Integrability,"e those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:32789,contract,contract,32789,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['contract'],['contract']
Integrability,"e to the output file. Methods Documentation. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix¶; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet¶; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace¶; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace¶; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension¶; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector¶; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str¶; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:2035,depend,dependent,2035,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html,2,['depend'],['dependent']
Integrability,"e transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code in Psi; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sapt-1.html:12287,depend,depend,12287,psi4manual/1.0.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sapt-1.html,2,['depend'],['depend']
Integrability,"e two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does no",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:5725,message,message,5725,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['message'],['message']
Integrability,"e useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import re; import os; import math; import warnings; import psi4; import p4util; from driver import *; from wrappers import *; #from extend_Molecule import *; from molutil import *. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end of this file. [docs]def sherrill_gold_standard(name='mp2', **kwargs):; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses :py:func:`~wrappers.complete_basis_set` to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~wrappers.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). """"""; lowername = nam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:1503,rout,routines,1503,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['rout'],['routines']
Integrability,"e users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]; class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:5376,rout,routine,5376,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['rout'],['routine']
Integrability,"e with frozen cartesian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mints15; check SP basis Fortran exponent parsing. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. fci-coverage; 6-31G H2O Test for coverage. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. sapt10; usapt example with empty beta due to frozen core. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:10402,depend,depend,10402,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"e"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Direc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:21532,message,message,21532,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['message'],['message']
Integrability,"e"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:20632,message,message,20632,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['message'],['message']
Integrability,"e"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:20155,message,message,20155,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['message'],['message']
Integrability,"e', None). for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; _process_displacement(; gradient, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). # Reset variables; for key, val in var_dict.items():; core.set_variable(key, val). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = driver_findif.assemble_hessian_from_gradients(findif_meta_dict, irrep); wfn.set_hessian(core.Matrix.from_array(H)); wfn.set_gradient(G0). # Explicitly set the current energy..; core.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]); wfn.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]). core.set_global_option(""PARENT_SYMMETRY"", """"); optstash.restore(); optstash_conv.restore(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Obtain list of displacements; findif_meta_dict = driver_findif.hessian_from_energies_geometries(molecule, irrep). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). ndisp = len(findif_meta_dict[""displacements""]) + 1. print(' %d displacements needed.' % ndisp). wfn = _process_displacement(energy, lowername, molecule, findif_meta_dict[""reference""], 1, ndisp,; **kwargs); var_dict = core.variables(). for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; _process_displacement(; energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). # Reset variables; for key, val in var_dict.items():; core.set_variable(key, val). # Assemble Hessian from energies;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:80307,depend,dependent,80307,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"e'].lower(). if 'wfnname' in largs:; wfnname = largs['wfnname']; else:; raise ValidationError('Call to \'%s\' has keyword \'wfnname\' missing.' % (functionname)). if re.match(r'scf_.*$', functionname) and (wfnname != 'scf'):; raise ValidationError('Call to \'%s\' is intended for scf portion of calculation.' % (functionname)); if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:86271,wrap,wrappers,86271,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"e(), 'compare molecule name'); compare_strings(expected.molecule().get_full_point_group(),; computed.molecule().get_full_point_group(), 'compare molecule point group'); compare_matrices(expected.molecule().geometry(),; computed.molecule().geometry(), digits, 'compare molecule geometry'). success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move=False):; """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp ./te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:17874,message,message,17874,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"e(self.nprimitive()):; text += """"""%3d %15.8f %15.8f\n"""""" % (K + 1, self.PYexp[K], self.PYoriginal_coef[K]). if outfile is None:; return text; else:; with open(outfile, mode='w') as handle:; handle.write(text). def __str__(self):; """"""String representation of shell""""""; return self.pyprint(outfile=None). [docs] def normalize(self, l, m, n):; """"""Normalize the angular momentum component""""""; return 1.0. [docs] def function_index(self):; """"""Basis function index where this shell starts.""""""; return self.start. [docs] def set_function_index(self, i):; """"""Set basis function index where this shell starts.""""""; self.start = i. [docs]class GaussianShell(ShellInfo):; """"""Class with same information as :py:class:`ShellInfo`. In C++,; class uses more efficient data structures, but in Python differences; minimal. """""". def __init__(self, am, nprimitive, oc, c, ec, e, pure, nc, center, start):; """"""; * @param am Angular momentum.; * @param pure Pure spherical harmonics, or Cartesian.; * @param oc An array of contraction coefficients.; * @param c An array of normalized contraction coefficients.; * @param ec An array of ERD normalized contraction coefficients.; * @param e An array of exponent values.; * @param pure an enum describing whether this shell uses pure or Cartesian functions.; * @param nc The atomic center that this shell is located on. Must map back to the correct atom in the owning BasisSet molecule_. Used in integral derivatives for indexing.; * @param center The x, y, z position of the shell. This is passed to reduce the number of calls to the molecule.; * @param start The starting index of the first function this shell provides. Used to provide starting positions in matrices.; * @param pt Is the shell already normalized?. """"""; self.l = am; self.PYnprimitive = nprimitive; self.puream = pure; self.PYexp = e; self.PYoriginal_coef = oc; self.PYcoef = c; self.PYerd_coef = ec; self.nc = nc; self.center = center; self.start = start; self.PYncartesian = INT_NCART(self.l); self.PYnfunc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:10453,contract,contraction,10453,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"e) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/manage_addon.html:11463,integrat,integrate,11463,psi4manual/master/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/master/manage_addon.html,1,['integrat'],['integrate']
Integrability,"e)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools). Note that external projects will have their own sets of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:21106,message,message,21106,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['message'],['message']
Integrability,"e)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:19729,message,message,19729,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,5,['message'],['message']
Integrability,"e). am()[source]¶; The angular momentum of the given contraction. amchar()[source]¶; The character symbol for the angular momentum of the given contraction. center()[source]¶; Returns the center of the Molecule this shell is on. coef(pi)[source]¶; Return coefficient of pi’th primitive. coefs()[source]¶; Return coefficient of pi’th primitive and ci’th contraction. contraction_normalization()[source]¶; Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. copy(nc=None, c=None)[source]¶; Make a copy of the ShellInfo. erd_coef(pi)[source]¶; Return ERD normalized coefficient of pi’th primitive. erd_normalize_shell()[source]¶. exp(prim)[source]¶; Returns the exponent of the given primitive. exps()[source]¶; Returns the exponent of the given primitive. function_index()[source]¶; Basis function index where this shell starts. is_cartesian()[source]¶; Returns true if contraction is Cartesian. is_pure()[source]¶; Returns true if contraction is pure. ncartesian()[source]¶; Total number of functions if this shell was Cartesian. ncenter()[source]¶; Returns the atom number this shell is on. Used by integral derivatives for indexing. nfunction()[source]¶; Total number of basis functions. normalize(l, m, n)[source]¶; Normalize the angular momentum component. normalize_shell()[source]¶; Handles calling primitive_normalization and; contraction_normalization for you. nprimitive()[source]¶; The number of primitive Gaussians. original_coef(pi)[source]¶; Return unnormalized coefficient of pi’th primitive. original_coefs()[source]¶; Return unnormalized coefficient of pi’th primitive and ci’th contraction. primitive_normalization(p)[source]¶; Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. pyprint(outfile=None)[source]¶; Print out the shell. pyprint_gamess(outfile=None)[source]¶; Print out the shell in Gamess format. set_funct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:101429,contract,contraction,101429,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['contract'],['contraction']
Integrability,"e)[source]¶; Function to find array inputs that are spread across multiple; lines and squash them into a single line. process_option(spaces, module, key, value, line)[source]¶; Function to process a line with set or in a set block; into global/local domain and keyword/value. process_pcm_command(matchobj)[source]¶; Function to process match of pcm name? { ... }. process_print_command(matchobj)[source]¶; Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:7614,wrap,wrap,7614,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['wrap'],['wrap']
Integrability,"e, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_reference_local(name)[source]¶; Figures out the correct SCF reference to set locally. run_roa(name, **kwargs)[source]¶; Main driver for managing Raman Optical activity computations with; CC response theory. Uses distributed finite differences approach –>. Sets up a database to keep track of running/finished/waiting; computations. Generates separate input files for displaced geometries. When all displacements are run, collects the necessary information; from each displaced computation, and computes final result. Table Of Contents. Python Driver; wrapper_database; diatomic; pcm_placeholder; dependency_check; gaussian_n; frac; molutil; driver_util; aliases; interactive; pubchem; inputparser; driver_nbody; driver_cbs; driver;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:171000,rout,routine,171000,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['rout'],['routine']
Integrability,"e, [1]. S_ORTHOGONALIZATION (SCF). S_SQUARED (DETCI). S_TOLERANCE (SCF). SAD_CHOL_TOLERANCE (SCF). SAD_D_CONVERGENCE (SCF). SAD_E_CONVERGENCE (SCF). SAD_F_MIX_START (SCF). SAD_MAXITER (SCF). SAD_PRINT (SCF). sanitize_basisname() in module basislist. SAPT. SAPT0. charge-transfer. higher-order. output. theory. SAPT (SCF). SAPT_LEVEL (SAPT). SAPT_MEM_CHECK (SAPT). SAPT_MEM_SAFETY (SAPT). SAPT_OS_SCALE (SAPT). SAPT_SS_SCALE (SAPT). SAPTDISPENERGY. SAPTELSTENERGY. SAPTENERGY. SAPTEXCHENERGY. SAPTINDENERGY. SAPTSAPT0ENERGY. SAPTSAPT2+(3)ENERGY. SAPTSAPT2+3ENERGY. SAPTSAPT2+ENERGY. SAPTSAPT2ENERGY. save() Table method. SAVE_JK (SCF). save_string_for_psi4() Molecule method. save_string_xyz() LibmintsMolecule method. save_to_checkpoint() LibmintsMolecule method. save_xyz() LibmintsMolecule method. SCALE (STABILITY). scale() in module qcdb.vecutil. Table method. SCF. theory. scf_helper() in module proc. SCF_MAXITER (DCFT). SCF_MEM_SAFETY_FACTOR (SCF). SCF_TYPE (CPHF). (SCF). scf_xtpl_helgaker_2() in module wrappers. scf_xtpl_helgaker_3() in module wrappers. SCFDIPOLEX. SCFDIPOLEY. SCFDIPOLEZ. SCFQUADRUPOLEXX. SCFQUADRUPOLEXY. SCFQUADRUPOLEXZ. SCFQUADRUPOLEYY. SCFQUADRUPOLEYZ. SCFQUADRUPOLEZZ. SCFTOTALENERGY. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM). schoenflies_symbol() LibmintsMolecule method. SCHWARZ_CUTOFF (CPHF). scratch files. SCREEN_INTS (LMP2). SCS (LMP2). (MP2). SCS_CCSD (CCENERGY). SCS_CEPA (CEPA). SCS_MP2 (CCENERGY). SCS_N (LMP2). (MP2). SCS_TYPE (OMP2). (OMP3). SCSN_MP2 (CCENERGY). SEKINO (CCLAMBDA). (CCRESPONSE). SEM_MAXITER (ADC). SEMICANONICAL (CCENERGY). (CCEOM). (CCSORT). (CCTRIPLES). (TRANSQT2). set_active_fragment() LibmintsMolecule method. set_active_fragments() LibmintsMolecule method. set_basis_all_atoms() LibmintsMolecule method. set_basis_by_label() LibmintsMolecule method. set_basis_by_number() LibmintsMolecule method. set_basis_by_symbol() LibmintsMolecule method. set_com_fixed() LibmintsMolecule method. set_coordinates() CartesianEntry method. ZMatrixE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:38345,wrap,wrappers,38345,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"e, fix_com=None, fix_orientation=None, fix_symmetry=None, fragment_separators=None, fragment_charges=None, fragment_multiplicities=None, molecular_charge=None, molecular_multiplicity=None, comment=None, provenance=None, connectivity=None, missing_enabled_return='error', tooclose=0.1, zero_ghost_fragments=False, nonphysical=False, mtol=0.001, verbose=1, return_dict=False)¶; Construct Molecule from unvalidated arrays and variables.; Light wrapper around from_arrays(); that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance.; :param See from_arrays().:. Returns. Return type; psi4.core.Molecule. static from_dict(arg0: dict) → psi4.core.Molecule¶; Returns a new Molecule constructed from python dictionary. In progress: name and capabilities should not be relied upon. classmethod from_schema(molschema, return_dict=False, nonphysical=False, verbose=1)¶; Construct Molecule from non-Psi4 schema.; Light wrapper around from_arrays(). Parameters. molschema (Dict) – Dictionary form of Molecule following known schema.; return_dict (bool) – Additionally return Molecule dictionary intermediate.; nonphysical (bool) – Do allow masses outside an element’s natural range to pass validation?; verbose (int) – Amount of printing. Return type; Union[Molecule, Tuple[Molecule, Dict]]. Returns. mol (psi4.core.Molecule); molrec (dict) – Dictionary representation of instance.; Only provided if return_dict is True. classmethod from_string(molstr, dtype=None, name=None, fix_com=None, fix_orientation=None, fix_symmetry=None, return_dict=False, enable_qm=True, enable_efp=True, missing_enabled_return_qm='none', missing_enabled_return_efp='none', verbose=1)¶. fsymbol(self: psi4.core.Molecule, atom: int) → str¶; Gets the cleaned up label of atom (C2 => C, H4 = H) (0-indexed including dummies). ftrue_atomic_number(self: psi4.core.Molecule, atom: int) → int¶; Gets atomic number of atom from element (0-indexed including dumm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html:20655,wrap,wrapper,20655,psi4manual/1.4.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html,2,['wrap'],['wrapper']
Integrability,"e, sir, I want some more.""""""; .format(memory_amount / 1024**2, memory_amount / 1000**2)). if execute:; core.set_memory_bytes(memory_amount); return memory_amount. [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return core.get_memory(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; msg = '\t{0:.<66}PASSED'.format(label); print(msg); sys.stdout.flush(); core.print_out(msg + '\n'). # Test functions; [docs]def compare_values(expected, computed, digits, label, exitonfail=True):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* < 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; if digits > 1:; thresh = 10**-digits; message = """"""\t{}: computed value ({:.{digits1}f}) does not match ({:.{digits1}f}) to {digits} digits."""""".format(; label, computed, expected, digits1=int(digits) + 1, digits=digits); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(float(expected) - float(computed)) > thresh:; # float cast handles decimal.Decimal vars; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:6784,message,message,6784,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"e, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/psi4/share/psi4/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/psi4/share/psi4/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Customization: Adding Simple Extensions; Creating a Database. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/quickadddatabase.html:3476,rout,route,3476,psi4manual/master/quickadddatabase.html,https://psicode.org,https://psicode.org/psi4manual/master/quickadddatabase.html,1,['rout'],['route']
Integrability,"e,; always_return_iutau=False,; ):; molinit = {}. if name is not None:; molinit[""name""] = name. if comment is not None:; molinit[""comment""] = comment. def validate_provenance(dicary):; expected_prov_keys = [""creator"", ""routine"", ""version""]; try:; prov_keys = sorted(dicary.keys()); except AttributeError:; raise ValidationError(""Provenance entry is not dictionary: {}"".format(dicary)). if prov_keys == expected_prov_keys:; if not isinstance(dicary[""creator""], str):; raise ValidationError(; """"""Provenance key 'creator' should be string of creating program's name: {}"""""".format(; dicary[""creator""]; ); ); if not re.fullmatch(VERSION_PATTERN, dicary[""version""], re.VERBOSE):; raise ValidationError(; """"""Provenance key 'version' should be a valid PEP 440 string: {}"""""".format(dicary[""version""]); ); if not isinstance(dicary[""routine""], str):; raise ValidationError(; """"""Provenance key 'routine' should be string of creating function's name: {}"""""".format(; dicary[""routine""]; ); ); return True; else:; raise ValidationError(""Provenance keys ({}) incorrect: {}"".format(expected_prov_keys, prov_keys)). if provenance is None:; molinit[""provenance""] = {}; else:; if validate_provenance(provenance):; molinit[""provenance""] = deepcopy(provenance). if connectivity is not None:; conn = []; try:; for (at1, at2, bondorder) in connectivity:; if not (float(at1)).is_integer() or at1 < 0: # or at1 >= nat:; raise ValidationError(""""""Connectivity first atom should be int [0, nat): {}"""""".format(at1)); if not (float(at2)).is_integer() or at2 < 0: # or at2 >= nat:; raise ValidationError(""""""Connectivity second atom should be int [0, nat): {}"""""".format(at2)); if bondorder < 0 or bondorder > 5:; raise ValidationError(""""""Connectivity bond order should be float [0, 5]: {}"""""".format(bondorder)); conn.append((int(min(at1, at2)), int(max(at1, at2)), float(bondorder))); conn.sort(key=lambda tup: tup[0]); molinit[""connectivity""] = conn; except ValueError:; raise ValidationError(; ""Connectivity entry is not of form [(at",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html:13221,rout,routine,13221,psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molparse/from_arrays.html,3,['rout'],['routine']
Integrability,"e, **kwargs); Function to compute harmonic vibrational frequencies. frequencies(name, **kwargs); Function to compute harmonic vibrational frequencies. frequency(name, **kwargs); Function to compute harmonic vibrational frequencies. gdma(wfn[, datafile]); Function to use wavefunction information in wfn and, if specified, additional commands in filename to run GDMA analysis. geometry(geom[, name]); Function to create a molecule object of name name from the geometry in string geom. get_memory(); Return the total memory allocation in bytes. gradient(name, **kwargs); Function complementary to optimize(). hessian(name, **kwargs); Function complementary to frequency(). ipi_broker(LOT[, molecule, serverdata, options]); Runs IPIBroker to connect to i-PI (https://ipi-code.org/). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. mdi_run(scf_method, **kwargs); Begin functioning as an MDI (MolSSI driver interface) engine. message_box(message[, max_width, min_width]); Put a message string into a box for extra attention. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Helper to specify the multiline PCMSolver syntax for PCM. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_method",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:18625,message,message,18625,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,2,['message'],['message']
Integrability,"e.Dimension(irreps); sdim2 = core.Dimension(irreps). for i in range(irreps):; d1, d2 = _find_dim(arr[i], 2); sdim1[i] = d1; sdim2[i] = d2. ret = self(name, sdim1, sdim2). elif arr_type == core.Vector:; sdim1 = core.Dimension(irreps). for i in range(irreps):; d1 = _find_dim(arr[i], 1); sdim1[i] = d1[0]. ret = self(name, sdim1); else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). for view, vals in zip(ret.nph, arr):; if 0 in view.shape: continue; view[:] = vals. return ret. # No irreps implied by list; else:; if arr_type == core.Matrix:. # Build an irreped array back out; if dim1 is not None:; if dim2 is None:; raise ValidationError(""Array_to_Matrix: If dim1 is supplied must supply dim2 also""). dim1 = core.Dimension.from_list(dim1); dim2 = core.Dimension.from_list(dim2). if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""). ret = self(name, dim1, dim2). start1 = 0; start2 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1; start2 += d2. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); ret.np[:] = arr; return ret. elif arr_type == core.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError(""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""). dim1 = core.Dimension.from_list(dim1); ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret.np[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def _to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html:4413,interface,interface,4413,psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,5,['interface'],['interface']
Integrability,"e.end * 3)). for abs_sl1, rel_sl1 in zip(abs_slices, rel_slices):; for abs_sl2, rel_sl2 in zip(abs_slices, rel_slices):; ret[abs_sl1, abs_sl2] += hess[rel_sl1, rel_sl2]. else:; raise KeyError(""ptype can only be gradient or hessian How did you end up here?""). def _print_nbody_energy(energy_body_dict, header):; psi4.print_out(""""""\n ==> N-Body: %s energies <==\n\n"""""" % header); psi4.print_out("""""" n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]\n""""""); previous_e = energy_body_dict[1]; nbody_range = energy_body_dict.keys(); nbody_range.sort(); for n in nbody_range:; delta_e = (energy_body_dict[n] - previous_e); delta_e_kcal = delta_e * p4const.psi_hartree2kcalmol; int_e_kcal = (energy_body_dict[n] - energy_body_dict[1]) * p4const.psi_hartree2kcalmol; psi4.print_out("""""" %4s %20.12f %20.12f %20.12f\n"""""" %; (n, energy_body_dict[n], int_e_kcal, delta_e_kcal)); previous_e = energy_body_dict[n]; psi4.print_out(""\n""). [docs]def _nbody_gufunc(func, method_string, **kwargs):; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized univeral function for computing interaction quantities. :returns: *return type of func* |w--w| The interaction data. :returns: (*float*, :ref:`Wavefunction<sec:psimod_Wavefunction>`) |w--w| interaction data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type func: function; :param func: ``energy`` || etc. Python function that accepts method_string and a molecule. Returns a; energy, gradient, or Hessian as requested. :type method_string: string; :param method_string: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, lowercase and usually unlabeled. Indicates the computational; method to be passed to func. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_nbody.html:3498,depend,depending,3498,psi4manual/1.0.0/_modules/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_nbody.html,1,['depend'],['depending']
Integrability,"e.set_multiplicity(multiplicity). # Respond to the EXIT command; def exit(self):; """""" Stop listening for MDI commands; """"""; self.stop_listening = True. # If a lattice of point charges was set, unset it now; if self.set_lattice:; self.kwargs.pop(""external_potentials"", None); . # Enter server mode, listening for commands from the driver; def listen_for_commands(self):; """""" Receive commands through MDI and respond to them as defined by the MDI Standard; """""". while not self.stop_listening:; if self.world_rank == 0:; command = MDI_Recv_Command(self.comm); else:; command = None; if use_mpi4py:; command = self.mpi_world.bcast(command, root=0); if self.world_rank == 0:; psi4.core.print_out('\nMDI command received: ' + str(command) + ' \n'). # Search for this command in self.commands; found_command = False; for supported_command in self.commands:; if not found_command and command == supported_command:; # Run the function corresponding to this command; self.commands[supported_command](); found_command = True; if not found_command:; raise Exception('Unrecognized command: ' + str(command)). def mdi_init(mdi_arguments):; """""" Initialize the MDI Library. Parameters; ----------; mdi_arguments; MDI configuration options. """"""; MDI_Init(mdi_arguments). [docs]; def mdi_run(scf_method: str, **kwargs):; """""" Begin functioning as an MDI (MolSSI driver interface) engine. Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """"""; engine = MDIEngine(scf_method, **kwargs); engine.listen_for_commands(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.mdi_engine. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/mdi_engine.html:13684,interface,interface,13684,psi4manual/master/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/mdi_engine.html,1,['interface'],['interface']
Integrability,"e: array; Default: No Default. FRAC_RENORMALIZE¶. Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START¶. The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL¶. The occupations of the orbital indices specified above (). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS¶. Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html:6734,integrat,integration,6734,psi4manual/4.0b5/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"e: array; Default: No Default. FRAC_RENORMALIZE¶. Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START¶. The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL¶. The occupations of the orbital indices specified above (). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. Type: string; Possible Values: DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE_X. PHI_POINTS¶. Number of azimuthal grid points for sphereical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for sphereical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. SAD Guess Algorithm¶. SAD_D_CONVERGENCE¶. Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE¶. Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. DFT¶. DFT_ALPHA¶. The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE¶. DFT basis cutoff. Type: conv double; De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html:6355,integrat,integration,6355,psi4manual/4.0b3/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"e:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/gcp-1.html:2539,interface,interface,2539,psi4manual/1.3.2/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html,2,['interface'],['interface']
Integrability,"e:2015:054107] methods (both energy and gradient). The DFTD3 executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extende",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/gcp-1.html:2380,interface,interface,2380,psi4manual/1.1.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/gcp-1.html,4,['interface'],['interface']
Integrability,"e:; qcvars['CURRENT HESSIAN'] = H0; qcvars[f""{self.method.upper()} TOTAL HESSIAN""] = H0; properties[""return_hessian""] = H0. # if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD. findif_model = AtomicResult(; **{; 'driver': self.driver,; 'model': {; ""basis"": self.basis,; 'method': self.method,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__, module=self.findifrec[""reference""][""module""]),; 'extras': {; 'qcvars': qcvars,; 'findif_record': copy.deepcopy(self.findifrec),; },; 'return_result': self.findifrec['reference'][self.driver.name],; 'success': True,; }). logger.debug('\nFINDIF QCSchema:\n' + pp.pformat(findif_model)). return findif_model. [docs] def get_psi_results(self, return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into FiniteDifference-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - undisplaced molecule; - compute basis if simple, else dummy basis def2-svp; - e/g/h member data; - QCVariables; - module. Returns; -------; ret; Gradient or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; findif_model = self.get_results(). ret_ptype = core.Matrix.from_array(findif_model.return_result); wfn = _findif_schema_to_wfn(findif_model). gradient_write(wfn); hessian_write(wfn). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. def _findif_schema_to_wfn(findif_model: AtomicResult) -> core.Wavefunction:; """"""Helper function to produce Wavefunction and Psi4 files from a FiniteDifference-flavored Atomic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:52211,interface,interface,52211,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,1,['interface'],['interface']
Integrability,"e; # points sorted to avoid overlapping map areas that can overwhelm html for SSI; # y=0 on top for html and on bottom for mpl, so flip the numbers; posnM.sort(key=lambda tup: tup[2]); posnM.sort(key=lambda tup: tup[3]); last = (0, 0); for dbse, rxn, val, show, x, y in posnM:; if val is None or val is np.nan:; continue. now = (int(x), int(y)); if now == last:; htmlcode += """"""<!-- map overlap! %s-%s %+.2f skipped -->\n"""""" % (dbse, rxn, val); else:; htmlcode += """"""<AREA shape=""rect"" coords=""%d,%d,%d,%d"" onmouseover=""javascript:mouseshow('%s', '%s', '%+.2f', '%s');"">\n"""""" % \; (x - 2, img_height - y - 20,; x + 2, img_height - y + 20,; dbse, rxn, val, show); last = now. htmlcode += """"""</MAP>\n"""""". plt.close(); return files_saved, htmlcode. [docs]def ternary(sapt, title='', labeled=True, view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Takes array of arrays *sapt* in form [elst, indc, disp] and builds formatted; two-triangle ternary diagrams. Either fully-readable or dotsonly depending; on *labeled*. Saves in formats *graphicsformat*. """"""; import hashlib; import numpy as np; import matplotlib.pyplot as plt; import matplotlib as mpl; from matplotlib.path import Path; import matplotlib.patches as patches. # initialize plot; fig, ax = plt.subplots(figsize=(6, 3.6)); plt.xlim([-0.75, 1.25]); plt.ylim([-0.18, 1.02]); plt.xticks([]); plt.yticks([]); ax.set_aspect('equal'). if labeled:; # form and color ternary triangles; codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]; pathPos = Path([(0., 0.), (1., 0.), (0.5, 0.866), (0., 0.)], codes); pathNeg = Path([(0., 0.), (-0.5, 0.866), (0.5, 0.866), (0., 0.)], codes); ax.add_patch(patches.PathPatch(pathPos, facecolor='white', lw=2)); ax.add_patch(patches.PathPatch(pathNeg, facecolor='#fff5ee', lw=2)). # form and color HB/MX/DD dividing lines; ax.plot([0.667, 0.5], [0., 0.866], color='#eeb4b4', lw=0.5); ax.plot([-0.333, 0.5], [0.577, 0.866], color='#eeb4b4', lw=0.5); ax.plot([0.333, 0.5], [0., 0.866], ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html:23351,depend,depending,23351,psi4manual/1.0.0/_modules/qcdb/mpl.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/mpl.html,1,['depend'],['depending']
Integrability,"e; Control print level. If unspecified (None), value taken from; :term:`PRINT <PRINT (GLOBALS)>`. Status printing when verbose > 2. Examples; --------; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""; if verbose is None:; verbose = core.get_global_option('PRINT'). for pvar, action in pvdefs.items():; if verbose >= 2:; print(""""""building %s %s"""""" % (pvar, '.' * (50 - len(pvar))), end=''). psivars = core.scalar_variables(); data_rich_args = []. for pv in action['args']:; if isinstance(pv, str):; if pv in psivars:; data_rich_args.append(psivars[pv]); else:; if verbose >= 2:; print(""""""EMPTY, missing {}"""""".format(pv)); break; else:; data_rich_args.append(pv); else:; result = action['func'](data_rich_args); core.set_variable(pvar, result); if verbose >= 2:; print(""""""SUCCESS""""""). [docs]; def provenance_stamp(routine: str, module: str = None) -> Dict[str, str]:; """"""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""; prov = {'creator': 'Psi4', 'version': __version__, 'routine': routine}; if module:; prov[""module""] = module. return prov. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.p4util.procutil. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/procutil.html:19616,rout,routine,19616,psi4manual/1.8.x/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/procutil.html,4,['rout'],['routine']
Integrability,"e; Control print level. If unspecified (None), value taken from; :term:`PRINT <PRINT (GLOBALS)>`. Status printing when verbose > 2. Examples; --------; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). """"""; if verbose is None:; verbose = core.get_global_option('PRINT'). for pvar, action in pvdefs.items():; if verbose >= 2:; print(""""""building %s %s"""""" % (pvar, '.' * (50 - len(pvar))), end=''). psivars = core.scalar_variables(); data_rich_args = []. for pv in action['args']:; if isinstance(pv, str):; if pv in psivars:; data_rich_args.append(psivars[pv]); else:; if verbose >= 2:; print(""""""EMPTY, missing {}"""""".format(pv)); break; else:; data_rich_args.append(pv); else:; result = action['func'](data_rich_args); core.set_variable(pvar, result); if verbose >= 2:; print(""""""SUCCESS""""""). [docs]; def provenance_stamp(routine: str, module: str = None) -> Dict[str, str]:; """"""Prepare QCSchema Provenance with |PSIfour| credentials. Parameters; ----------; routine; Name of driver function generating the QCSchema.; module; Primary contributing |PSIfour| library, like ``ccenergy`` or ``dfmp2``. Returns; -------; provenance : Dict[str, str]; Dictionary satisfying QCSchema, with |PSIfour| credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. """"""; prov = {'creator': 'Psi4', 'version': __version__, 'routine': routine}; if module:; prov[""module""] = module. return prov. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.p4util.procutil. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/procutil.html:19593,rout,routine,19593,psi4manual/1.9.x/_modules/psi4/driver/p4util/procutil.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/procutil.html,4,['rout'],['routine']
Integrability,"e; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/documentation-1.html:3576,depend,dependencies,3576,psi4manual/4.0b4/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html,4,['depend'],"['depend', 'dependencies']"
Integrability,"e; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers. All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b vectors; int n = 100;; double* a = init_array(n);; double* b = init_array(n);. // Allocate A matrix;; double** A = ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:1642,rout,routine,1642,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,8,['rout'],['routine']
Integrability,"e; self.PYmax_am = max(self.PYmax_am, am); self.shell_center[shell_count] = center; self.puream = shell.is_pure(); tst = prim_count; tsp = prim_count + shell_nprim; self.shells[shell_count] = GaussianShell(am, shell_nprim,; self.uoriginal_coefficients[tst:tsp],; self.ucoefficients[tst:tsp],; self.uerd_coefficients[tst:tsp],; self.uexponents[tst:tsp],; 'Pure' if self.puream else 'Cartesian',; center, self.xyz, bf_count); self.shells[shell_count].pyprint(); for thisbf in range(shell.nfunction()):; self.function_to_shell[bf_count] = shell_count; self.function_center[bf_count] = center; bf_count += 1; for thisao in range(shell.ncartesian()):; self.ao_to_shell[ao_count] = shell_count; ao_count += 1; shell_count += 1; prim_count += shell_nprim. # <<< Methods for Construction by Another Name >>>. @staticmethod; [docs] def zero_ao_basis_set():; """"""Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. """"""; # In the new implementation, we simply call the default constructor; return BasisSet(). [docs] def atomic_basis_set(self, center):; """"""Return a BasisSet object containing all shells at center i (0-index); * Used for Atomic HF computations for SAD Guesses; * @param center Atomic center to provide a basis object for.; * @returns A new basis set object for the atomic center. """"""; return BasisSet(self, center). @staticmethod; [docs] def build(molecule, shells):; """"""Builder factory method; * @param molecule the molecule to build the BasisSet around; * @param shells array of *atom-numbered* GaussianShells to build the BasisSet from; * @return BasisSet corresponding to this molecule and set of shells. """"""; raise FeatureNotImplemented('BasisSet::build'). @staticmethod; [docs] def pyconstruct_combined(mol, keys, targets, fitroles, others):. # make sure the lengths are all the same; if len(keys) != len(targets) or len(keys) != len(fitrol",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html:14140,contract,contraction,14140,psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,1,['contract'],['contraction']
Integrability,"e; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Installation and Runtime Configuration. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/external.html:24258,depend,dependencies,24258,psi4manual/1.6.x/external.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/external.html,1,['depend'],['dependencies']
Integrability,"e; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psithoninput.html:13728,wrap,wrapper,13728,psi4manual/1.6.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psithoninput.html,1,['wrap'],['wrapper']
Integrability,"e]¶. exception BasisSetNotFound(msg, silent=False)[source]¶. exception Dftd3Error(msg)[source]¶. exception FeatureNotImplemented(msg)[source]¶; Error called for functions defined but not yet implemented.; Also for functions defined that will never be implemented. exception FragmentCountError(msg)[source]¶; Error called molecule has wrong number of fragments for method.; Prints error message msg to standard output stream. exception IncompleteAtomError(msg)[source]¶; Error raised when not all variables in an atom specification; have been defined at compute time. May be a temporary situation; so message not printed but appears as traceback when error persists. exception ParsingValidationError(msg)[source]¶; Error called for problems with syntax from a QC output file. Prints; error message msg to standard output stream. exception QcdbException[source]¶; Error class for QCDB. exception ValidationError(msg)[source]¶; Error called for problems with syntax input file. Prints; error message msg to standard output stream. class Infile(mem, mol, mtd, der, opt)[source]¶. format_infile_string()[source]¶. harvest_output(outtext)[source]¶; Function to separate portions of a Psi4 output file outtext. muster_basis(bas)[source]¶; Transform input mem in MB into psi4-type options. muster_cdsgroup_options()[source]¶. muster_memory(mem)[source]¶; Transform input mem in MB into psi4-type options. muster_modelchem(name, dertype)[source]¶; Transform calculation method name and derivative level dertype; into options for cfour. While deliberately requested pieces,; generally CFOUR_DERIV_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). psi4_list()[source]¶; Return an array of Psi4 methods with energies. class BasisSet(*arg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:57015,message,message,57015,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['message'],['message']
Integrability,"e_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]; def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). """"""; return name.lower(; ).replace(""("", ""_pr"" # ccsd(t); ).replace("")"", ""_pr""; ).replace(""."", ""p"" # mp2.5; ).replace(""+"", ""p"" # ccsd+t(ccsd); ).replace(""-"", """" # ccsdt-1a; ). [docs]; def docs_table_link(name: str, mode: str) -> str:; """"""Compose a link to *mode* documentation table.; For modes {""summary"", ""details""}, link will be anchored at the table row for method *name*. (Method row not guaranteed to exist.); For other modes, link will be to table in general. """"""; DOCS_BASE = ""https://psicode.org/psi4manual/master/"". if mode == ""summary"":; anchor = ""introduction.html#ss""; elif mode == ""details"":; anchor = ""capabilities.html#dd""; elif mode == ""ccenergy"":; anchor = ""cc.html#table-ccenergy-stdsuite""; elif mode == ""dfmp2"":; anchor = ""dfmp2.html#table-dfmp2-stdsu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:14593,message,message,14593,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"e_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for more details. Or to install using psi4's own build system add; {module_args}; to cmake command line when building psi4.; """"""; pasture_required_modules = {""RUN_CCTRANSORT"": [""ccsort"", ""transqt2""]}. def __init__(self, option):; mods_str = "", "".join([m for m in PastureRequiredError.pasture_required_modules[option]]); msg = PastureRequiredError.msg_tmpl.format(opt=option, modlist=mods_str); PsiException.__init__(self, msg); module_cmake_args = "" "".join(; [""-DENABLE_{}=ON"".format(module) for module in PastureRequiredError.pasture_required_modules[option]]); msg += PastureRequiredError.install_instructions.format(module_args=module_cmake_args); self.message = '\nPsiException: {}\n\n'.format(msg); core.print_out(self.message). [docs]def sanitize_method(name: str) -> str:; """"""Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). """"""; return name.lower(; ).replace(""("", ""_pr"" # ccsd(t); ).replace("")"", ""_pr""; ).replace(""."", ""p"" # mp2.5; ).replace(""+"", ""p"" # ccsd+t(ccsd); ).replace(""-"", """" # ccsdt-1a; ). [docs]def docs_table_link(name: str, mode: str) -> str:; """"""Compose a link to *mode* documentation table.; For modes {""summary"", ""details""}, link will be anchored at the table row for method *name*. (Method row not guaranteed to exist.); For other modes, link will be to table in general. """"""; DOCS_BASE = ""https://psicode.org/psi4manual/master/"". if mode == ""summary"":; anchor = ""introduction.html#ss""; elif mode == ""details"":; anchor = ""capabilities.html#dd""; elif mode == ""ccenergy"":; anchor = ""cc.html#table-ccenergy-stdsuite""; elif mode == ""dfmp2"":; anchor = ""dfmp2.html#table-dfmp2-stdsuite""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:14567,message,message,14567,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"e_atom(self: psi4.core.BasisSet, arg0: int, arg1: psi4.core.Vector3) → None¶; Translate a given atom by a given amount. Does not affect the underlying molecule object. n_ecp_core(*args, **kwargs)¶; Overloaded function. n_ecp_core(self: psi4.core.BasisSet) -> int. Returns the total number of core electrons associated with all ECPs in this basis. n_ecp_core(self: psi4.core.BasisSet, arg0: str) -> int. Returns the number of core electrons associated with any ECP on the specified atom type for this basis set. n_frozen_core(self: psi4.core.BasisSet, arg0: str, arg1: psi4.core.Molecule) → int¶; Returns the number of orbital (non-ECP) frozen core electrons. For a given molecule and |globals__freeze_core|, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int¶; Given a shell return its firs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html:4793,depend,depending,4793,psi4manual/1.2.1/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html,2,['depend'],['depending']
Integrability,"eal number or an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to \(10^{-6} E_h\), the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Notes on Psivars¶. Note; Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change.; * method ROOT 0 -> ROOT m property to get root m. method ROOT 0 -> ROOT m property - h TRANSITION to get root m andindependently specify that the total transition symmetry is h, e.g., A2. method ROOT 0 (h) -> ROOT m (i) property to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than; with the molecular system. Changing the number of roots sought, the symmetry; subspace or the symmetry apportionment of roots under which the computation is run,; or the excited state method are all likely to scramble root numberings. Alternate Implementations¶; Depending on the reference (RHF, UHF, ROHF) and the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; computational methods are sometimes implemented by multiple coders or even; multiple times. PSI4 transparently selects the most efficient; implementation, so one generally needn’t consult this table. However, to; understand the details of what combinations are accessible or what; alternate implementations are available, read on.; Below, “Y” means method available in module, “D” means module is default; for that method, and “” means method not available. HF, DFT, and MP2; default to de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/notes_c.html:1914,interface,interface,1914,psi4manual/1.6.x/notes_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/notes_c.html,1,['interface'],['interface']
Integrability,"ean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html:11448,integrat,integrate,11448,psi4manual/1.3.2/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html,2,['integrat'],['integrate']
Integrability,"ec(format_molecule_for_input(GEOS[rgt])); exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, PsiMod.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); PsiMod.set_variable('NATOM', molecule.natom()); PsiMod.set_variable('NUCLEAR REPULSION ENERGY', molecule.nuclear_repulsion_energy()); if re.match(r'^verify', lowername):; compare_values(DATA['NUCLEAR REPULSION ENERGY'][rgt], PsiMod.get_variable('NUCLEAR REPULSION ENERGY'), ; 4, '%s %.4f' % (rgt, PsiMod.get_variable('NUCLEAR REPULSION ENERGY'))); ERGT[rgt] = 7.0; else:; ERGT[rgt] = call_function_in_1st_argument(func, **kwargs); #print ERGT[rgt]; PsiMod.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = PsiMod.get_variable(envv); PsiMod.set_global_option(""REFERENCE"", user_reference); PsiMod.clean(). elif (db_mode.lower() == 'sow'):; freagent = open('%s.in' % (rgt), 'w'); freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(format_molecule_for_input(GEOS[rgt])). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""PsiMod.print_variables()\n""""""); freagent.write(""""""PsiMod.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""PsiMod.set_variable('NATOM', molecule.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""PsiMod.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (PsiMod.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:43980,wrap,wrapper,43980,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,2,['wrap'],['wrapper']
Integrability,"ec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move=False):; """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp ./te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:14002,message,message,14002,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ecified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. Environmental Effects¶. EXTERN¶. An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. ONEPOT_GRID_READ¶. Read an external potential from the .dx file?. Type: boolean; Default: false. PERTURB_DIPOLE¶. An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H¶. Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE¶. Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH¶. The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS¶. Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. RADIUS¶. Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. R_POINTS¶. Number of radial grid points for spherical potential integration. Type: integer; Default: 100. THETA_POINTS¶. Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS¶. Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. DFSCF Algorithm¶. DF_BUMP_R0¶. Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1¶. Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS¶. FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_INTS_NUM_THREADS¶. Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC¶. FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:8680,integrat,integration,8680,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,4,['integrat'],['integration']
Integrability,"ect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/libxc.html:2462,depend,dependencies,2462,psi4manual/1.8.x/libxc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/libxc.html,1,['depend'],['dependencies']
Integrability,"ect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. table of contents. Interface to Libxc by M. A. L. Marques; Installation; How to configure Libxc for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libxc by M. A. L. Marques. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/libxc.html:2462,depend,dependencies,2462,psi4manual/1.9.x/libxc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/libxc.html,1,['depend'],['dependencies']
Integrability,"ect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:200347,depend,dependencies,200347,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"ect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: str",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:202943,depend,dependencies,202943,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"ect().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (PsiMod.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy. PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_out_in_angstrom(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'); optstash.restore(); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. """"""; namelower = name.lower(). # matches 'mrccsdt(q)'; if namelower.startswith('mrcc'):; # grabs 'sdt(q)'; ccfullname = namelower[4:]. # A negative order indicates perturbative method; methods = {; 'sd' : { 'method' : 1, 'order' : 2,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/driver.html:41393,wrap,wrapper,41393,psi4manual/4.0b3/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/driver.html,1,['wrap'],['wrapper']
Integrability,"ect. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”). Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Exami",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:1493,depend,dependencies,1493,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,4,['depend'],['dependencies']
Integrability,"ector; docstring. CIWavefunction; docstring. CUHF; docstring. CdSalc; Cartesian displacement SALC. CdSalcList; Class for generating symmetry adapted linear combinations of Cartesian displacements. CharacterTable; Contains the character table of the point group. CompositeJK; docstring. CorrelationFactor; docstring. CorrelationTable; Provides a correlation table between two point groups. CubeProperties; docstring. DFEP2Wavefunction; A density-fitted second-order Electron Propagator Wavefunction. DFHelper; docstring. DFSOMCSCF; docstring. DFTGrid; docstring. DFTensor; docstring. Deriv; Computes gradients of wavefunctions. DerivCalcType; Members:. DiagonalizeOrder; Defines ordering of eigenvalues after diagonalization. Dimension; Initializes and defines Dimension Objects. DipoleInt; Computes dipole integrals. DirectJK; docstring. DiskSOMCSCF; docstring. Dispersion; docstring. ERI; Computes normal two electron repulsion integrals. ERISieve; docstring. ESPPropCalc; ESPPropCalc gives access to routines calculating the ESP on a grid. ElectricFieldInt; Computes electric field integrals. ElectrostaticInt; Computes electrostatic integrals. ExternalPotential; Stores external potential field, computes external potential matrix. FCHKWriter; Extracts information from a wavefunction object, and writes it to an FCHK file. FDDS_Dispersion; docstring. FISAPT; A Fragment-SAPT Wavefunction. FittedSlaterCorrelationFactor; docstring. FittingMetric; docstring. FragmentType; Fragment activation status. Functional; docstring. GaussianShell; Class containing information about basis functions. GaussianType; 0 if Cartesian, 1 if Pure. GeometryUnits; The units used to define the geometry. HF; docstring. IO; docstring. IOManager; PSIOManager is a class designed to be used as a static object to track all PSIO operations in a given PSI4 computation. IntVector; Class handling vectors with integer values. IntegralFactory; Computes integrals. IntegralTransform; IntegralTransform transforms one- and two",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psi4api.html:11761,rout,routines,11761,psi4manual/1.8.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psi4api.html,2,['rout'],['routines']
Integrability,"ectory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:6957,message,message,6957,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['message'],['message']
Integrability,ecule method. setting; . keywords C-side. keywords cbs(). keywords cp(). keywords database(). keywords diatomic_anharmonicity(). keywords energy(). keywords molecule. keywords optimize(). keywords property(). SF_RESTRICT (DETCI). sherrillgroup_gold_standard() in module aliases. show() in module qcdb.vecutil. SIGMA_OVERLAP (DETCI). single-point. SINGLES_PRINT (CCEOM). SMALL_CUTOFF (PSIMRCC). SO_S_FILE (TRANSQT). SO_T_FILE (TRANSQT). SO_TEI_FILE (TRANSQT). SO_V_FILE (TRANSQT). SOCC (GLOBALS). (MCSCF). SOLVER_CONVERGENCE (CPHF). SOLVER_EXACT_DIAGONAL (CPHF). SOLVER_MAX_SUBSPACE (CPHF). SOLVER_MAXITER (CPHF). SOLVER_MIN_SUBSPACE (CPHF). SOLVER_N_GUESS (CPHF). SOLVER_N_ROOT (CPHF). SOLVER_NORM (CPHF). SOLVER_PRECONDITION (CPHF). SOLVER_PRECONDITION_MAXITER (CPHF). SOLVER_PRECONDITION_STEPS (CPHF). SOLVER_QUANTITY (CPHF). SOLVER_TYPE (CPHF). SORTED_TEI_FILE (TRANSQT). SOS_SCALE (OMP2). (OMP3). SOS_SCALE2 (OMP2). (OMP3). SOS_TYPE (OMP2). (OMP3). SPINADAPT_ENERGIES (CCENERGY). split_menial() in module wrappers. SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STABILITY_ADD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. TAU_SQUARED (DCFT). tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functiona,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:40942,wrap,wrappers,40942,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['wrap'],['wrappers']
Integrability,"ed by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; simple-dftd3 — [what is DFTD3?] (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) preferred alternative to gcp https://github",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:7895,message,message,7895,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,6,"['depend', 'message']","['dependencies', 'message']"
Integrability,"ed conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A¶. mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SS_SCALE¶. A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. Expert¶. SPIN_SCALE_TYPE¶. Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_MAXITER; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html:7391,depend,dependent,7391,psi4manual/1.7.x/autodir_options_c/module__occ.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html,4,['depend'],['dependent']
Integrability,"ed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions for Psi4/Cfour interface. Portions that require; calls to Boost Python psi4 module are here, otherwise in qcdb module.; Also calls to qcdb module are here and not elsewhere in driver.; Organizationally, this module isolates qcdb code from psi4 code. """"""; import os; import re; import sys; import uuid; import shutil; import inspect; import subprocess. from psi4.driver import qcdb; from psi4.driver import p4util; from psi4.driver.molutil import *; from psi4.driver.p4util.exceptions import *; # never import driver, wrappers, or aliases into this file. P4C4_INFO = {}. [docs]def run_cfour(name, **kwargs):; """"""Function that prepares environment and input files; for a calculation calling Stanton and Gauss's CFOUR code.; Also processes results back into Psi4 format. This function is not called directly but is instead called by; :py:func:`~psi4.energy` or :py:func:`~psi4.optimize` when a Cfour; method is requested (through *name* argument). In order to function; correctly, the Cfour executable ``xcfour`` must be present in; :envvar:`PATH` or :envvar:`PSIPATH`. .. hlist::; :columns: 1. * Many :ref:`PSI Variables <apdx:cfour_psivar>` extracted from the Cfour output; * Python dictionary of associated file constants accessible as ``P4C4_INFO['zmat']``, ``P4C4_INFO['output']``, ``P4C4_INFO['grd']``, *etc.*. :type name: str; :param name: ``'c4-scf'`` || ``'c4-ccsd(t)'`` || ``'cfour'`` || etc. First argument, usually unlabeled. Indicates the computational; method to be applied to the system. :type keep: :",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html:1694,wrap,wrappers,1694,psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,3,['wrap'],['wrappers']
Integrability,"ed in the output file; with the input file command print_variables(). Note that; PSI variables accumulate over a PSI4 instance and are not cleared by; clean(). So if you run in a single input file a STO-3G FCI; followed by a aug-cc-pVQZ SCF followed by a print_variables(); command, the last will include both SCF TOTAL ENERGY and; FCI TOTAL ENERGY. Don’t get excited that you got a high-quality calculation; cheaply. Refer to Appendix PSI Variables by Module for a listing of the; variables set by each module. Loops¶; Python provides many control structures, which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; basis_sets=[""cc-pVDZ"",""cc-pVTZ"",""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_set is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign. The geometry; specification supports delayed initialization of variable, which permits; potential energy scans. As an example, we can scan both the angle and bond; length in water:; molecule h2o{; O; H1 R; H1 R2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(102,106,2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; molecule h2o {;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html:21552,wrap,wraps,21552,psi4manual/4.0b2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html,4,['wrap'],['wraps']
Integrability,"ed through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case $MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). A guide to the contents of individual scratch files may be found at PSIOH Intermediate Files.; To circumvent difficulties with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/external-1.html:2900,rout,routines,2900,psi4manual/4.0b3/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html,2,['rout'],['routines']
Integrability,"ed to PSI4’s COSX. Third, some low-level implementation details differ between the two.; For example, PSI4’s COSX uses a dual-grid scheme similar to that originally proposed by Neese,; converging the SCF on a small grid, then running a number of SCF iterations,; equal to the value set by the COSX_MAXITER_FINAL, on a larger grid.; In contrast, sn-LinK only uses a single-grid scheme, simply converging the SCF on one grid.; As another example, while the COSX grid defaults are selected to emphasize speed over accuracy,; the defaults for sn-LinK are selected to achieve higher accuracy (~0.1 kcal/mol error for interaction/conformer energies).; To control compilation and linking of the optional GauXC dependency required for the sn-LinK algorithm,; here are the list of compile-time options provided. ENABLE_gauxc: Compile Psi4 with support for GauXC.; gauxc_DIR: Location of the external GauXC install to compile Psi4 with, if using an external GauXC instance.; gauxc_ENABLE_GPU: Enable GPU support for the Psi4-GauXC interface class. When building GauXC internally within Psi4, this keyword controls whether to enable GPU support on the internally-built GauXC instance. When using an external GauXC build, this keyword must align with the GPU capabilities of the external GauXC install. To control the sn-LinK algorithm, here are the list of options provided. SNLINK_RADIAL_POINTS: Number of radial points to use for the sn-LinK grid. Defaults to 70.; SNLINK_SPHERICAL_POINTS: Number of spherical points to use for the sn-LinK grid. Defaults to 302.; SNLINK_RADIAL_SCHEME: Radial quadrature scheme to use for the sn-LinK grid. Defaults to MURA. Note that, although different from the more common Psi4 radial quadrature scheme of TREUTLER, the default of MURA matches the default radial quadrature scheme used by GauXC.; SNLINK_INTS_TOLERANCE: The integral screening tolerance used in the sn-LinK algorithm. Defaults to the INTS_TOLERANCE option.; SNLINK_USE_GPU: Select whether to execute the sn-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:43069,interface,interface,43069,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['interface'],['interface']
Integrability,"ed) > thresh:; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:7707,message,message,7707,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:197877,wrap,wrapper,197877,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['wrap'],['wrapper']
Integrability,"ed) for stability analysis. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None)¶. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. check_phases(self: psi4.core.HF) → None¶; docstring. clear_external_potentials(self: psi4.core.HF) → None¶; Clear private external_potentials list. compute_E(self: psi4.core.HF) → float¶; docstring. compute_energy()¶; Base class Wavefunction requires this function. Here it is; simply a wrapper around initialize(), iterations(), finalize_energy(). It; returns the SCF energy computed by finalize_energy(). compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. compute_initial_E(self: psi4.core.HF) → float¶; docstring. compute_orbital_gradient(self: psi4.core.HF, arg0: bool, arg1: int) → float¶; docstring. compute_spin_contamination(self: psi4.core.HF) → None¶; docstring. cphf_Hx(self: psi4.core.HF, arg0: List[psi4.core.Matrix]) → List[psi4.core.Matrix]¶; CPHF Hessian-vector prodcuts (4 * J - K - K.T). cphf_converged(self: psi4.core.HF) → bool¶; Adds occupied guess alpha orbitals. cphf_solve(self: psi4.core.HF, x_vec: List[psi4.core.Matrix], conv_tol: float, max_iter: int, print_lvl: int=2) → List[psi4.core.Matrix]¶; Solves the CPHF equations for a given set of x vectors. damping_update(self: psi4.core.HF, arg0: float) → None¶; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:244634,wrap,wrapper,244634,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['wrap'],['wrapper']
Integrability,"ed). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optim",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:29141,contract,contraction,29141,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,18,['contract'],['contraction']
Integrability,"ed. As time; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:6. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. 1; Frozen natural orbital variant available. In particular, RHF available as CONV. 2(1,2); Frozen natural orbital variant available. In particular, RHF available as CONV/DF. 3(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21); threading through BLAS routines only. 4; DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. 5; Both EFP/EFP and QM/EFP energies are available. 6; Adapted from here. 7; DH-DFT only available with DF-MP2. 8(1,2,3,4); Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. 9; Orbital-optimized variant available. In particular, all references available as CONV/DF. 10(1,2,3,4,5,6,7,8,9,10); Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Theory (DCT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Algebraic-Diagrammatic Construc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/introduction-1.html:27603,rout,routines,27603,psi4manual/1.4.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/introduction-1.html,5,['rout'],['routines']
Integrability,"ed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/db-1.html:7120,wrap,wrapper,7120,psi4manual/1.0.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/db-1.html,2,['wrap'],['wrapper']
Integrability,"ed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Scf Total Energy <==. -----------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; -----------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00011520 -5.71020576 1 -2.85516048 -2; RGC1-HeHe-1.0 0.00000153 -5.71031943 1 -2.85516048 -2; RGC1-HeHe-1.5 -0.00000000 -5.71032096 1 -2.85516048 -2; -----------------------------------------------------------------------------------. ==> Natom <==. -----------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/db-1.html:6783,wrap,wrapper,6783,psi4manual/4.0b2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html,8,['wrap'],['wrapper']
Integrability,"ed.; label (str) – string labeling the test. psi4.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expect",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:27623,message,messages,27623,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['message'],['messages']
Integrability,"ed.; label (str) – string labeling the test. psi4.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:27711,message,messages,27711,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['message'],['messages']
Integrability,"ed; free_block(A);; free_block(B);; free_block(C);. Important BLAS Routines¶. BLAS1. DDOT: dot product; DCOPY: efficient memory copy (with variable stride); DAXPY: y = y + alpha*x; DROT: Givens Rotation; DNRM2: Vector norm square. BLAS2. DGEMV: General Matrix-Vector product; DTRMV: Triangular Matrix-Vector product (2x faster, not wrapped yet); DTRSM: Triangular Matrix-Vector solution via back substitution (just as fast as DTRMV); DGER: Rank-1 update (not wrapped yet). BLAS3. DGEMM: General Matrix-Matrix product; DTRMM: General Triangular Matrix-General Matrix product; DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input para",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:4226,rout,routines,4226,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,9,['rout'],['routines']
Integrability,"ed; free_block(A);; free_block(B);; free_block(C);. Important BLAS Routines¶. BLAS1; DDOT: dot product; DCOPY: efficient memory copy (with variable stride); DAXPY: y = y + alpha*x; DROT: Givens Rotation; DNRM2: Vector norm square. BLAS2; DGEMV: General Matrix-Vector product; DTRMV: Triangular Matrix-Vector product (2x faster, not wrapped yet); DTRSM: Triangular Matrix-Vector solution via back substitution (just as fast as DTRMV); DGER: Rank-1 update (not wrapped yet). BLAS3; DGEMM: General Matrix-Matrix product; DTRMM: General Triangular Matrix-General Matrix product; DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input para",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:4350,rout,routines,4350,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,4,['rout'],['routines']
Integrability,"edding_charges dict should have entries for each 1-indexed fragment.""). return v. [docs] @validator(""return_total_data"", always=True); def set_return_total_data(cls, v, values):; if v is not None:; rtd = v; elif values[""driver""] in [""gradient"", ""hessian""]:; rtd = True; else:; rtd = False. if values.get(""embedding_charges"", False) and rtd is False:; raise ValueError(""Cannot return interaction data when using embedding scheme.""). return rtd. [docs] def build_tasks(; self,; mb_computer: SubTaskComputers,; mc_level_idx: int,; **kwargs: Dict[str, Any],; ) -> int:; """"""Adds to the task_list as many new unique tasks as necessary to treat a single model chemistry level at one or several n-body levels.; New tasks are of type *mb_computer* with model chemistry level specified in *kwargs* and n-body levels accessed through *mc_level_idx*. Parameters; ----------; mb_computer; Class of task computers to instantiate and add to self.task_list. Usually :class:`~psi4.driver.AtomicComputer` but may be other when wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count : int; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""; # Get the n-body orders for this level; nbodies = self.nbodies_per_mc_level[mc_level_idx]. info = ""\n"" + p4util.banner(f"" ManyBody Setup: N-Body Levels {nbodies}"", strNotOutfile=True) + ""\n""; core.print_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html:36471,wrap,wrappers,36471,psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,1,['wrap'],['wrappers']
Integrability,"edistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with non-generic exceptions classes.""""""; from __future__ import absolute_import; import psi4. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = msg; psi4.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html:1423,message,message,1423,psi4manual/1.0.0/_modules/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/exceptions.html,1,['message'],['message']
Integrability,"ee Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""; Nexus of psi4.driver module with primary user-facing functions, including; single-point energies, geometry optimizations, properties, and vibrational; frequency calculations. """"""; import json; import os; import re; import copy; import shutil; import sys; import logging; from typing import Dict, Optional, Union; import logging. import numpy as np. from psi4 import core # for typing; from psi4.driver import driver_util; from psi4.driver import driver_cbs; from psi4.driver import driver_nbody; from psi4.driver import driver_findif; from psi4.driver import task_planner; from psi4.driver import p4util; from psi4.driver import qcdb; from psi4.driver import pp, nppp, nppp10; from psi4.driver.p4util.exceptions import *; from psi4.driver.procrouting import *; from psi4.driver.mdi_engine import mdi_run; from psi4.driver.task_base import AtomicComputer. # never import wrappers or aliases into this file. logger = logging.getLogger(__name__). def _energy_is_invariant(gradient_rms, stationary_criterion=1.e-2):; """"""Polls options and probes `gradient` to return whether current method; and system expected to be invariant to translations and rotations of; the coordinate system. """"""; stationary_point = gradient_rms < stationary_criterion # 1.e-2 pulled out of a hat. mol = core.get_active_molecule(); efp_present = hasattr(mol, 'EFP'). translations_projection_sound = (not core.get_option('SCF', 'EXTERN') and not core.get_option('SCF', 'PERTURB_H'); and not efp_present); rotations_projection_sound = (translations_projection_sound and stationary_point). return translations_projection_sound, rotations_projection_sound. def _filter_renamed_methods(compute, method):; r""""""Raises UpgradeHelper when a method has been renamed.""""""; if method == ""dcft"":; raise UpgradeHelper(compute + ""('dcft')"", compute + ""('dct')"", 1.4,; "" All instances of 'dcft' should be replaced with 'dct'."")",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:1964,wrap,wrappers,1964,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,2,['wrap'],['wrappers']
Integrability,"een; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:27176,interface,interface,27176,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,5,['interface'],['interface']
Integrability,"ef compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. """""". pid = str(os.getpid()); scratch =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:13970,message,message,13970,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"ef compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move=False):; """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch('temp', 'psi', 'h2o', 32):; -cp ./temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; -cp /tmp/temp /scratch/parrish/psi.12345.32; copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; -mv /tmp/temp /scratch/parrish/psi.12345.32. """""". pid = str(os.getpid()); scratch = c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:18295,message,message,18295,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,2,['message'],['message']
Integrability,"ef"": ""#/definitions/CompositeComputer""; },; {; ""$ref"": ""#/definitions/FiniteDifferenceComputer""; }; ]; }; }; },; ""required"": [; ""molecule"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""BsseEnum"": {; ""title"": ""BsseEnum"",; ""description"": ""Available basis-set superposition error (BSSE) treatments."",; ""enum"": [; ""nocp"",; ""cp"",; ""vmfc""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/nbody.html:8612,protocol,protocols,8612,psi4manual/1.8.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/nbody.html,1,['protocol'],['protocols']
Integrability,"ef, self.PYexp,; self.puream, self.nc, self.center,; self.start, 'Unnormalized'); # better to just deepcopy?. [docs] def nprimitive(self):; """"""The number of primitive Gaussians""""""; return len(self.PYexp). [docs] def nfunction(self):; """"""Total number of basis functions""""""; return INT_NFUNC(self.puream, self.l). [docs] def ncartesian(self):; """"""Total number of functions if this shell was Cartesian""""""; return self.PYncartesian. [docs] def am(self):; """"""The angular momentum of the given contraction""""""; return self.l. [docs] def amchar(self):; """"""The character symbol for the angular momentum of the given contraction""""""; return 'spdfghiklmnopqrtuvwxyz'[self.l]. [docs] def AMCHAR(self):; """"""The character symbol for the angular momentum of the given contraction (upper case)""""""; return 'SPDFGHIKLMNOPQRTUVWXYZ'[self.l]. [docs] def is_cartesian(self):; """"""Returns true if contraction is Cartesian""""""; return True if self.puream == 'Cartesian' else False. [docs] def is_pure(self):; """"""Returns true if contraction is pure""""""; return True if self.puream == 'Pure' else False. [docs] def center(self):; """"""Returns the center of the Molecule this shell is on""""""; return self.center. [docs] def ncenter(self):; """"""Returns the atom number this shell is on. Used by integral derivatives for indexing.""""""; return self.nc. [docs] def exp(self, prim):; """"""Returns the exponent of the given primitive""""""; return self.PYexp[prim]. [docs] def coef(self, pi):; """"""Return coefficient of pi'th primitive""""""; return self.PYcoef[pi]. [docs] def erd_coef(self, pi):; """"""Return ERD normalized coefficient of pi'th primitive""""""; return self.PYerd_coef[pi]. [docs] def original_coef(self, pi):; """"""Return unnormalized coefficient of pi'th primitive""""""; return self.PYoriginal_coef[pi]. [docs] def exps(self):; """"""Returns the exponent of the given primitive""""""; return self.PYexp. [docs] def coefs(self):; """"""Return coefficient of pi'th primitive and ci'th contraction""""""; return self.PYcoef. [docs] def original_coefs(self",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:7828,contract,contraction,7828,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"efault"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; },; ""WavefunctionProtocolEnum"": {; ""title"": ""WavefunctionProtocolEnum"",; ""description"": ""Wavefunction to keep from a computation."",; ""enum"": [; ""all"",; ""orbitals_and_eigenvalues"",; ""return_results"",; ""none""; ],; ""type"": ""string""; },; ""ErrorCorrectionProtocol"": {; ""title"": ""ErrorCorrectionProtocol"",; ""description"": ""Configuration for how QCEngine handles error correction\n\nWARNING: These protocols are currently experimental and only supported by NWChem tasks"",; ""type"": ""object"",; ""properties"": {; ""default_policy"": {; ""title"": ""Default Policy"",; ""description"": ""Whether to allow error corrections to be used if not directly specified in `policies`"",; ""default"": true,; ""type"": ""boolean""; },; ""policies"": {; ""title"": ""Policies"",; ""description"": ""Settings that define whether specific error corrections are allowed. Keys are the name of a known error and values are whether it is allowed to be used."",; ""type"": ""object"",; ""additionalProperties"": {; ""type"": ""boolean""; }; }; },; ""additionalProperties"": false; },; ""NativeFilesProtocolEnum"": {; ""title"": ""NativeFilesProtocolEnum"",; ""description"": ""CMS program files to keep from a computation."",; ""enum"": [; ""all"",; ""input"",; ""none""; ],; ""type"": ""string""; },; ""AtomicResultProtocols"": {; ""title"": ""AtomicResultProtocols"",; ""description"": ""Protocols regarding the manipulation of computational result data."",; ""type"": ""object"",; ""properties"": {; ""wavefunction"": {; ""description"": ""Wavefunction to keep from a computation."",;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:2830,protocol,protocols,2830,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,1,['protocol'],['protocols']
Integrability,"efault. TDSCF_TRIPLETS¶. Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. WCOMBINE¶. combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Disabled until fixed. Type: boolean; Default: false. Expert General Wavefunction Info¶. PK_ALL_NONSYM¶. All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS¶. Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. SCF_SUBTYPE¶. For certain SCF_TYPE algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, and REORDER_OUT_OF_CORE selected. Type: string; Possible Values: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE; Default: AUTO. WFN¶. Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. Expert Convergence Control/Stabilization¶. FOLLOW_STEP_INCREMENT¶. When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE¶. When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. MAX_ATTEMPTS¶. When using STABIL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html:18543,depend,depending,18543,psi4manual/1.8.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html,3,['depend'],['depending']
Integrability,"efault: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF); FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and bet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:124915,rout,routine,124915,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['rout'],['routine']
Integrability,"eferred for; executables to accommodate QCEngine. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user extensions to the built-in; libraries. Specifically, directories containing; user basis sets,; EFP fragments,; databases,; plugins, and; interfaced executables (; dmrcc for MRCC and; dftd3 for DFTD3; ) should be placed in this colon-separated list.; PSI4 is designed so that user extensions that are findable through; PSIPATH can be used in input files entirely like their; built-in counterparts, without additional tagging as non-standard.; The typical search path is first the built-in libraries, next each; PSIPATH directory in order, and finally the execution; directory (I won’t swear everything tacks on the execution directory).; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases.; Modify PSIPATH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIPATH /home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to im",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:22083,interface,interfaced,22083,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,9,['interface'],['interfaced']
Integrability,"effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:202090,depend,dependencies,202090,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Returns:; energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. run_gcp(func=None, dertype=None, verbose=False)¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to perturb.; do_shift (bool or array-like, optional) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specifi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:29321,interface,interface,29321,psi4manual/1.3.2/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html,3,['interface'],['interface']
Integrability,"efined here:; | ; | build(...); | build( (str)arg1, (float)arg2, (float)arg3, (float)arg4, (float)arg5) -> Dispersion :; | docstring; | ; | C++ signature :; | N5boost10shared_ptrIN3psi10DispersionEEE build(Ss,d,d,d,d); | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __init__ = <built-in function __init__>; | Raises an exception; | This class cannot be instantiated from Python; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> a new object with type S, a subtype of T; ; class DoublePyBuffer(Boost.Python.instance); | Buffer interface to NumPy arrays; | ; | Method resolution order:; | DoublePyBuffer; | Boost.Python.instance; | __builtin__.object; | ; | Methods defined here:; | ; | __init__(...); | __init__( (object)arg1) -> None :; | ; | C++ signature :; | void __init__(P7_object); | ; | __reduce__ = <unnamed Boost.Python function>(...); | ; | ----------------------------------------------------------------------; | Data descriptors defined here:; | ; | __array_interface__; | docstring; | ; | ----------------------------------------------------------------------; | Data and other attributes defined here:; | ; | __instance_size__ = 32; | ; | ----------------------------------------------------------------------; | Data descriptors inherited from Boost.Python.instance:; | ; | __dict__; | ; | __weakref__; | ; | ----------------------------------------------------------------------; | Data and other attributes inherited from Boost.Python.instance:; | ; | __new__ = <built-in method __new__ of Boost.Python.class object>; | T.__new__(S, ...) -> ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:438963,interface,interface,438963,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['interface'],['interface']
Integrability,"efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. name; molecule composition; calls method. efp; efp; efp. pure EFP; EFP interaction energy (IE) on all frags. mixed QM/EFP; EFP IE on EFP frags only. pure QM; error. scf; scf; scf. pure EFP; error. mixed QM/EFP; SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags. pure QM; SCF energy on all frags (normal PSI4 operation). Fragment Library¶; Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/libefp-1.html:7924,depend,dependencies,7924,psi4manual/1.2.1/libefp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/libefp-1.html,13,['depend'],['dependencies']
Integrability,"electrons. For a given molecule and FREEZE_CORE, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str¶; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int¶; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int¶; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int¶; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int¶; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int¶; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None¶; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None¶; Prints basis set info to outfile. shell(*args, **kwargs)¶; Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_on_center(self: psi4.core.BasisSet, c: int, i: int) → int¶; Return the i’th shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int¶; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int¶; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int¶; Return the atomic center for the i’th shell. static zero_ao_basis_set() → psi4.core.BasisSet¶; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; BasisSet. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.BasisSet.html:7050,contract,contraction,7050,psi4manual/1.6.x/api/psi4.core.BasisSet.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.BasisSet.html,1,['contract'],['contraction']
Integrability,"elf.dto == None:; # The first atom; text += ""\n""; elif self.ato == None and self.dto == None:; # The second atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); text += "" %d %s\n"" % (now_rto, now_rval); elif self.dto == None:; # The third atom; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(10); text += "" %d %s %d %s\n"" % (now_rto, now_rval, now_ato, now_aval); else:; # Remaining atoms; now_rto = self.rto.entry_number() + 1; now_rval = self.rval.variable_to_string(10); now_ato = self.ato.entry_number() + 1; now_aval = self.aval.variable_to_string(10); now_dto = self.dto.entry_number() + 1; now_dval = self.dval.variable_to_string(10); text += "" %d %s %d %s %d %s\n"" % \; (now_rto, now_rval, now_ato, now_aval, now_dto, now_dval); return text; # outfile. [docs] def set_coordinates(self, x, y, z):; """"""Given the current set of coordinates, updates the values of this; atom's coordinates, and any variables that may depend on it. """"""; self.coordinates[0] = 0.0 if math.fabs(x) < 1.0E-14 else x; self.coordinates[1] = 0.0 if math.fabs(y) < 1.0E-14 else y; self.coordinates[2] = 0.0 if math.fabs(z) < 1.0E-14 else z. if self.rto != None:; if not self.rto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); self.rval.rset(self.r(self.coordinates, self.rto.compute())). if self.ato != None:; if not self.ato.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); aval = self.a(self.coordinates, self.rto.compute(), self.ato.compute()); # Noise creeps in for linear molecules. Force linearity, if it is close enough.; val = aval * 180.0 / math.pi; self.aval.rset(val). if self.dto != None:; if not self.dto.is_computed():; raise ValidationError(""Coordinates have been set in the wrong order""); val = self.d(self.coordinates, self.rto.compute(), self.ato.compute(), self.dto.compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html:16953,depend,depend,16953,psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintscoordentry.html,1,['depend'],['depend']
Integrability,"elst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. plot()¶; Filesystem wrapper for FISAPT::plot. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. sinf_disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. unify_part2(self: psi4.core.FISAPT) → None¶; Finish producing unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). table of contents. FISAPT; FISAPT; FISAPT.compute_energy(); FISAPT.cou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FISAPT.html:3696,wrap,wrapper,3696,psi4manual/1.8.x/api/psi4.core.FISAPT.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.FISAPT.html,1,['wrap'],['wrapper']
Integrability,"elst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. plot()¶; Filesystem wrapper for FISAPT::plot. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. sinf_disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; FISAPT. © Copyright 2021, The Psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.fisapt.html:3509,wrap,wrapper,3509,psi4manual/1.4.0/api/psi4.core.fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.fisapt.html,1,['wrap'],['wrapper']
Integrability,"elst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. plot()¶; Filesystem wrapper for FISAPT::plot. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. sinf_disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; FISAPT. © Copyright 2021, The Psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fisapt.html:3483,wrap,wrapper,3483,psi4manual/1.5.0/api/psi4.core.fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fisapt.html,1,['wrap'],['wrapper']
Integrability,"elst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. plot()¶; Filesystem wrapper for FISAPT::plot. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. sinf_disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; FISAPT. © Copyright 2022, The Psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.FISAPT.html:3483,wrap,wrapper,3483,psi4manual/1.6.x/api/psi4.core.FISAPT.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.FISAPT.html,1,['wrap'],['wrapper']
Integrability,"elst(self: psi4.core.FISAPT) → None¶; F-SAPT0 electrostatics. fexch(self: psi4.core.FISAPT) → None¶; F-SAPT0 exchange. find(self: psi4.core.FISAPT) → None¶; F-SAPT0 induction. flocalize(self: psi4.core.FISAPT) → None¶; F-SAPT0 localize. freeze_core(self: psi4.core.FISAPT) → None¶; Freeze the core orbitals. ind(self: psi4.core.FISAPT) → None¶; SAPT0 induction. kinetic(self: psi4.core.FISAPT) → None¶; Build the kinetic integrals T. localize(self: psi4.core.FISAPT) → None¶; Localize the active occupied orbitals via IBO2. matrices(self: psi4.core.FISAPT) → Dict[str, psi4.core.Matrix]¶; Return the interally computed matrices (not copied). molecule(self: psi4.core.FISAPT) → psi4.core.Molecule¶; Returns the FISAPT’s molecule. nuclear(self: psi4.core.FISAPT) → None¶; Build the nuclear potentials V and interaction energies. overlap(self: psi4.core.FISAPT) → None¶; Build the overlap integrals S. partition(self: psi4.core.FISAPT) → None¶; Partition the nuclei and electrons. plot()¶; Filesystem wrapper for FISAPT::plot. print_header(self: psi4.core.FISAPT) → None¶; Print header, bases, sizes, etc. print_trailer(self: psi4.core.FISAPT) → None¶; Print SAPT results. raw_plot(self: psi4.core.FISAPT, arg0: str) → None¶; Plot some analysis files. scalars(self: psi4.core.FISAPT) → Dict[str, float]¶; Return the interally computed scalars (not copied). scf(self: psi4.core.FISAPT) → None¶; Solve the relaxed SCF equations for A0 and B0. sinf_disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self: psi4.core.FISAPT) → None¶; Produce unified matrices for A’, B’, and C’. vectors(self: psi4.core.FISAPT) → Dict[str, psi4.core.Vector]¶; Return the interally computed vectors (not copied). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; FISAPT. © Copyright 2007-2022, Th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.FISAPT.html:3465,wrap,wrapper,3465,psi4manual/1.7.x/api/psi4.core.FISAPT.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.FISAPT.html,1,['wrap'],['wrapper']
Integrability,"em gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:5807,integrat,integration,5807,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,4,['integrat'],"['integrate', 'integration']"
Integrability,"em, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. The PBS -j oe option instructs PBS to write any output or error message; from the queuing system in dedicated files. PBS -l pmem=2120mb requests; 2120 MB of memory for each thread on the node. The total memory requested for; the job by PBS should generally be slightly greater than what indicated; in the input file (see memory setting).; Then, we move to the working directory using PBS variable $PBS_O_WORKDIR and; we create scratch directories on every node, using the $PBS_NODEFILE which; points to a file containing a list of the nodes attributed to the job.; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. The next section is very important as it sets the environment variables needed; by PSI4:; unsetenv PSIDATADIR; setenv PSI_SCRA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:15320,depend,depend,15320,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,9,['depend'],['depend']
Integrability,"eme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['oldmp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'oldmp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORREL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:63589,wrap,wrappers,63589,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"emove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[frag].append(int(u + 1)) # add to group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = PsiMod.Molecule.create_molecule_from_string(new_geom); new_mol.update_geometry(); new_mol.print_out(); activate(new_mol); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:4048,wrap,wrappers,4048,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"emove=[i for i, d in enumerate(allvibs['gamma'].data) if d != 'A1']). """"""; work = {}; if remove is None:; remove = [idx for idx, dat in enumerate(vibinfo['TRV'].data) if dat != 'V']; for asp, oasp in vibinfo.items():; if asp in ['q', 'w', 'x']:; axis = 1; else:; axis = 0; work[asp] = Datum(oasp.label, oasp.units, np.delete(oasp.data, remove, axis=axis), comment=oasp.comment, numeric=False). return work. [docs]; def filter_omega_to_real(omega: np.ndarray) -> np.ndarray:; """"""Returns ndarray (float) of `omega` (complex) where imaginary entries are converted to negative reals.""""""; freqs = []; for fr in omega:; if fr.imag > fr.real:; freqs.append(-1 * fr.imag); else:; freqs.append(fr.real); return np.asarray(freqs). def _get_TR_space(m: np.ndarray, geom: np.ndarray, space: str = 'TR', tol: float = None, verbose: int = 1) -> np.ndarray:; """"""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); as",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html:40143,depend,dependencies,40143,psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html,3,['depend'],['dependencies']
Integrability,"en done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:28232,depend,depend,28232,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"en(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]; def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]; def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2024, The Psi4 Project.; Last ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/text.html:3636,message,message,3636,psi4manual/master/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/text.html,1,['message'],['message']
Integrability,"en(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]; def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]; def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2023, The Psi4 Project.; Last updated",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/text.html:3667,message,message,3667,psi4manual/1.8.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/text.html,1,['message'],['message']
Integrability,"en(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]; def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]; def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2024, The Psi4 Project.; Last updated",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/text.html:3629,message,message,3629,psi4manual/1.9.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/text.html,1,['message'],['message']
Integrability,"enating module import lines, a copy; of the user's .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed *raw_input*. Parameters; ----------; raw_input; Input in a mixture of Python and PSIthon syntax.; print_level; *raw_input* is printed to the output file unless *print_level* =0. """"""; # Check if the infile is actually an outfile (yeah we did); psi4_id = re.compile(r'Psi4: An Open-Source Ab Initio Electronic Structure Package'); if re.search(psi4_id, raw_input):; input_lines = raw_input.split(""\n""); input_re = re.compile(r'^\s*?\=\=> Input File <\=\='); input_start = -1; for line_count in range(len(input_lines)):; line = input_lines[line_count]; if re.match(input_re, line):; input_start = line_count + 3; break. stop_re = re.compile(r'^-{74}'); input_stop = -1; for line_count in range(input_start, len(input_lines)):; line = input_lines[line_count]; if re.match(stop_re, line):; input_stop = line_count; break. if input_start == -1 or input_stop == -1:; message = ('Cannot extract infile from outfile.'); raise TestComparisonError(message). raw_input = '\n'.join(input_lines[input_start:input_stop]); raw_input += '\n'. # Echo the infile on the outfile; if print_level > 0:; core.print_out(""\n ==> Input File <==\n\n""); core.print_out(""--------------------------------------------------------------------------\n""); core.print_out(raw_input); core.print_out(""--------------------------------------------------------------------------\n""); core.flush_outfile(). #NOTE: If adding mulitline data to the preprocessor, use ONLY the following syntax:; # function [objname] { ... }; # which has the regex capture group:; #; # r'^(\s*?)FUNCTION\s*(\w*?)\s*\{(.*?)\}', re.MULTILINE | re.DOTALL | re.IGNORECASE; #; # your function is in capture group #1; # your objname is in capture group #2; # your data is in capture group #3. # Sections that are truly to be taken literally (spaces included); # Must be stored then subbed in the end to escape the normal processi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html:19454,message,message,19454,psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,4,['message'],['message']
Integrability,"ence geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (freq_mode.lower() == 'sow'):; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """"""# to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """"""# has produced a number of input files (FREQ-*.in) for individual components\n""""""; instructionsO += """"""# and a single input file (FREQ-master.in) with a frequency(mode='reap') command.\n""""""; instructionsO += """"""# These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """"""# rather than normal input. Follow the instructions below (repeated in FREQ-master.in)\n""""""; instructionsO += """"""# to continue.\n#\n""""""; instructionsO += """"""# Alternatively, a single-job execution of the hessian may be accessed through\n""""""; instructionsO += """"""# the frequency wrapper option mode='continuous'.\n#\n""""""; psi4.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this frequency computation.\n#\n""""""; instructionsM += """"""# (1) Run all of the FREQ-*.in input files on any variety of computer architecture.\n""""""; instructionsM += """"""# The output file names must be as given below (these are the defaults when executed\n""""""; instructionsM += """"""# as `psi4 FREQ-1.in`, etc.).\n#\n""""""; for rgt in range(ndisp):; pre = 'FREQ-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# FREQ-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the frequency computation in its output file.\n#\n""""""; instructionsM += """"""# psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:66896,wrap,wrapper,66896,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['wrap'],['wrapper']
Integrability,"ence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:1113,depend,dependent,1113,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,4,['depend'],['dependent']
Integrability,"end on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as \({\cal O}(N^5)\) for ADC(2) and \({\cal O}(N^6)\); for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]; and the adcc theory documentation. Available ADC methods¶; Section author: Michael F. Herbst; Several ADC methods are available in PSI4 for the computation of excited states,; see ADC capabilities of Psi4.; The methods are available via an interface to the adcc python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section Interface to adcc. ADC capabilities of Psi4¶. Method; References; Exc. Energies; Props; Supported values for kind keyword. ADC(1); RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2); RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(2)-x; RHF, UHF; yes; yes; any, singlet, triplet, spin_flip. ADC(3); RHF, UHF; yes; yes | any, singlet, triplet, spin_flip. CVS-ADC(1); RHF, UHF; yes; yes | any, singlet, triplet. CVS-ADC(2); RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(2)-x; RHF, UHF; yes; yes; any, singlet, triplet. CVS-ADC(3); RHF, UHF; yes; yes; any, singlet, triplet. The leftmost column of table ADC capabilities of Psi4 provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function energy().; For example, energy('adc(2)-x') will compute; e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/adc.html:3293,interface,interface,3293,psi4manual/1.7.x/adc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/adc.html,4,['interface'],['interface']
Integrability,"ension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 (Optional[Dimension]) – Same as dim1 only if using a Dimension object. Returns:; Returns the given (self) Psi4 object. Return type:; Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/numpy.html:4612,depend,depending,4612,psi4manual/1.7.x/numpy.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/numpy.html,1,['depend'],['depending']
Integrability,"ent(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 gradient calculation. """"""; optstash = OptionsState(; ['REFERENCE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp2(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_scs_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-component scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SCS_TYPE'],; ['OCC', 'DO_SCS']). # what type of scs?; if (lowername == 'scs-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCS'); elif (lowername == 'scsn-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSN'); elif (lowername == 'scs-mi-omp2'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp2-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:3480,rout,routine,3480,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"entials]); Computes the FSAPT energy. coulomb(self); Build the J/K potentials for C, D, and E. dHF(self); SAPT0 delta HF. disp(self, arg0, arg1, arg2); Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self); SAPT0 electrostatics. exch(self); SAPT0 exchange. fdisp(self); F-SAPT0 dispersion. fdrop([external_potentials]); Drop output files from FSAPT calculation. felst(self); F-SAPT0 electrostatics. fexch(self); F-SAPT0 exchange. find(self); F-SAPT0 induction. flocalize(self); F-SAPT0 localize. freeze_core(self); Freeze the core orbitals. ind(self); SAPT0 induction. kinetic(self); Build the kinetic integrals T. localize(self); Localize the active occupied orbitals via IBO2. matrices(self); Return the interally computed matrices (not copied). molecule(self); Returns the FISAPT's molecule. nuclear(self); Build the nuclear potentials V and interaction energies. overlap(self); Build the overlap integrals S. partition(self); Partition the nuclei and electrons. plot(); Filesystem wrapper for FISAPT::plot. print_header(self); Print header, bases, sizes, etc. print_trailer(self); Print SAPT results. raw_plot(self, arg0); Plot some analysis files. scalars(self); Return the interally computed scalars (not copied). scf(self); Solve the relaxed SCF equations for A0 and B0. sinf_disp(self, arg0, arg1, arg2); Computes the MP2-based DispE20 and Exch-DispE20 energy without S^2. unify(self); Produce unified matrices for A', B', and C'. vectors(self); Return the interally computed vectors (not copied). Methods Documentation. compute_energy(external_potentials=None)¶; Computes the FSAPT energy. FISAPT::compute_energy. coulomb(self: psi4.core.FISAPT) → None¶; Build the J/K potentials for C, D, and E. dHF(self: psi4.core.FISAPT) → None¶; SAPT0 delta HF. disp(self: psi4.core.FISAPT, arg0: Dict[str, psi4.core.Matrix], arg1: Dict[str, psi4.core.Vector], arg2: bool) → None¶; Computes the MP2-based DispE20 and Exch-DispE20 energy. elst(self: psi4.core.FISAPT) → None¶; SAPT0 electrost",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fisapt.html:1270,wrap,wrapper,1270,psi4manual/1.5.0/api/psi4.core.fisapt.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.fisapt.html,3,['wrap'],['wrapper']
Integrability,"ents of gbs file; mol.set_basis_all_atoms(name, role=role); basstrings[basname(name)] = basblock[0]; else:; message = (; ""Conflicting basis set specification: assign lines present but shells have no [basname] label.""; """"); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; basstrings[basname(basblock[idx])] = basblock[idx + 1]. return basstrings. anon.__name__ = 'basisspec_psi4_yo__' + cleanbas; qcdb.libmintsbasisset.basishorde[name.upper()] = anon; if set_option:; core.set_global_option(key, name). core.OEProp.valid_methods = [; 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES',; 'MAYER_INDICES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS'; ]. ## Option helpers. def _core_set_global_option_python(key, EXTERN):; """"""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""; if (key != ""EXTERN""):; raise ValidationError(""Options: set_global_option_python does not recognize keyword %s"" % key). if EXTERN is None:; core.EXTERN = None; core.set_global_option(""EXTERN"", False); elif isinstance(EXTERN, core.ExternalPotential):; # Well this is probably the worst hack I have done, thats saying something; core.EXTERN = EXTERN; core.set_global_option(""EXTERN"", True); else:; raise ValidationError(""Options: set_global_option_python can either be a NULL or External Potential object""). core.set_global_option_python = _core_set_global_option_python. ## QCvar helps. def _core_has_variable(key):; return core.has_scalar_variable(key) or core.has_array_variable(key). def _core_wavefunction_has_variable(cls, key):; return cls.has_scalar_variable(key) or cls.has_array_variable(key). def _core_variable(key):; if core.has_scalar_variable(key):; return core.scalar_variable(key); elif core.has_array_variable(key):; return c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html:17305,rout,routing,17305,psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html,1,['rout'],['routing']
Integrability,"entum, basis; set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected : file; Reference FCHK file against which `computed` is compared.; computed : file; Input FCHK file to compare against `expected`.; atol_exponent : int or float; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label : str; Label for passed and error messages. """"""; fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:3616,message,messages,3616,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,1,['message'],['messages']
Integrability,"entum.; @param pure Pure spherical harmonics, or Cartesian.; @param c An array of contraction coefficients.; @param nc The atomic center that this shell is located on. Must map; back to the correct atom in the owning BasisSet molecule. Used; in integral derivatives for indexing.; @param center The x, y, z position of the shell. This is passed to; reduce the number of calls to the molecule.; @param start The starting index of the first function this shell; provides. Used to provide starting positions in matrices.; @param pt Is the shell already normalized?. """""". def __init__(self, am, c, e, pure, nc, center, start, pt='Normalized'):; # Angular momentum; self.l = am; # Flag for pure angular momentum (Cartesian = 0, Pure = 1); self.puream = pure; # Exponents (of length nprimitives_); self.PYexp = e; # Contraction coefficients (of length nprimitives_); self.PYcoef = c; # ERD normalized contraction coefficients (of length nprimitives_); self.PYerd_coef = []; # Original (un-normalized) contraction coefficients (of length nprimitives); self.PYoriginal_coef = [c[n] for n in range(len(c))]; # Atom number this shell goes to. Needed when indexing integral derivatives.; self.nc = nc; # Atomic center number in the Molecule; self.center = center; #; self.start = start; # How many cartesian functions? (1=s, 3=p, 6=d, ...); self.PYncartesian = INT_NCART(self.l); # How many functions? (1=s, 3=p, 5/6=d, ...) * Dependent on the value of puream_; self.PYnfunction = INT_NFUNC(self.puream, self.l). # Compute the normalization constants; if pt == 'Unnormalized':; self.normalize_shell(); self.erd_normalize_shell(). [docs] def primitive_normalization(self, p):; """"""Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. """"""; tmp1 = self.l + 1.5; g = 2.0 * self.PYexp[p]; z = pow(g, tmp1); return math.sqrt((pow(2.0, self.l) * z) / (math.pi * math.sqrt(math.pi) * df(2 * self.l))). [docs] def contraction_normalizat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:4028,contract,contraction,4028,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"environ.get('PSIPATH', '').split(':') if x != '']) +; ':' + os.environ.get('PATH') +; ':' + core.get_datadir() + '/basis',; 'GENBAS_PATH': core.get_datadir() + '/basis',; 'CFOUR_NUM_CORES': os.environ.get('CFOUR_NUM_CORES'),; 'MKL_NUM_THREADS': os.environ.get('MKL_NUM_THREADS'),; 'OMP_NUM_THREADS': os.environ.get('OMP_NUM_THREADS'),; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }. if 'path' in kwargs:; lenv['PATH'] = kwargs['path'] + ':' + lenv['PATH']; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Load the GENBAS file; genbas_path = qcdb.search_file('GENBAS', lenv['GENBAS_PATH']); if genbas_path:; try:; shutil.copy2(genbas_path, psioh.get_default_path() + cfour_tmpdir); except shutil.Error: # should only fail if src and dest equivalent; pass; core.print_out(""\n GENBAS loaded from %s\n"" % (genbas_path)); core.print_out("" CFOUR to be run from %s\n"" % (psioh.get_default_path() + cfour_tmpdir)); else:; message = """"""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""; core.print_out(message); core.print_out(' Search path that was tried:\n'); core.print_out(lenv['PATH'].replace(':', ', ')). # Generate the ZMAT input file in scratch; if 'path' in kwargs and os.path.isfile('ZMAT'):; core.print_out("" ZMAT loaded from %s\n"" % (psioh.get_default_path() + kwargs['path'] + '/ZMAT')); else:; with open('ZMAT', 'w') as cfour_infile:; cfour_infile.write(write_zmat(lowername, dertype, molecule)). internal_p4c4_info['zmat'] = open('ZMAT', 'r').read(); #core.print_out('\n====== Begin ZMAT input for CFOUR ======\n'); #core.print_out(open('ZMAT', 'r').read()); #core.print_out('======= End ZMAT input for CFOUR =======\n\n'); #print('\n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html:6009,message,message,6009,psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/interface_cfour.html,10,"['interface', 'message']","['interface', 'message']"
Integrability,"environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Conda Proficients¶; The Psi4conda Installer uses a conda constructor to package up Miniconda,; the psi4 conda packages, the psi4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for Psi4. Installing just the psi4 package; itself will get you Psi4, whatever add-ons require linking in to; Psi4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., DFTD3 and v2rdm_casscf) or dependencies; from the “right” channels, which can be important for issues of fPIC; and libc++ vs. libstdc++. So conda create -c psi4 -n p4env psi4 dftd3; v2rdm_casscf should be equivalent to running the psi4conda installer,; but I wouldn’t count on it. Instead, an explicit environment spec; will be available for download.; # Linux; >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; >>> source activate p4env. # Mac; >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; >>> source activate p4env. Quick Installation¶; Sequence of commands to get you to a working Psi4 on Linux. Installs; Miniconda into $HOME/miniconda and the Psi4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac: select between next two lines; >>> curl -o Miniconda-l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:4069,depend,dependencies,4069,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['depend'],['dependencies']
Integrability,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.5.0; . PSI4: Open-Source Quantum Chemistry. _downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. _modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_u,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:650305,depend,dependent,650305,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['depend'],['dependent']
Integrability,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /1.6.x; . /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; . /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4.driver.qcdb.vib. /util; ; psi4.driver.util.filesystem. psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_cbs_helper; psi4.driver.driver_nbody; psi4.driver.inputpars,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:757893,depend,dependent,757893,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['depend'],['dependent']
Integrability,eory; PSIMRCC Implementation of Mk-MRCC Theory; PsiPEP: Plans and Practices to Organize PSI4; PsiPEP: Plans and Practices to Organize PSI4; Psithon Functions: Invoking a Calculation; Psithon Functions: Invoking a Calculation; Psithon: Structuring an Input File; Psithon: Structuring an Input File; Molecule and Geometry Specification; Molecule and Geometry Specification; Python Module Index; Defining a Method Alias; Defining a Method Alias; Creating a Database; Creating a Database; Scalar relativistic Hamiltonians; Scalar relativistic Hamiltonians; SAPT: Symmetry-Adapted Perturbation Theory; SAPT: Symmetry-Adapted Perturbation Theory; HF: Hartree–Fock Theory; HF: Hartree–Fock Theory; Search; Search; searchindex.js; Interface to SIMINT by B. Pritchard; Interface to SIMINT by B. Pritchard; Embarrassing Parallelism; Embarrassing Parallelism; TDSCF: Time-dependent Hartree–Fock and density-functional theory; TDSCF: Time-dependent Hartree–Fock and density-functional theory; Test Suite and Sample Inputs; Test Suite and Sample Inputs; Vibrational and Thermochemical Analysis; Vibrational and Thermochemical Analysis; Psithon Tutorial: Using PSI4 as an Executable; Psithon Tutorial: Using PSI4 as an Executable. /_downloads; . /bb210d30fde032b2d23ae4dcb2ad36e2; ; gdma-2.2.06.pdf. /_modules; . /psi4; . /driver; ; psi4.driver.aliases; psi4.driver.diatomic; psi4.driver.driver; psi4.driver.driver_cbs; psi4.driver.driver_nbody; psi4.driver.inputparser; psi4.driver.ipi_broker; psi4.driver.mdi_engine; psi4.driver.molutil. /p4util; ; psi4.driver.p4util.exceptions; psi4.driver.p4util.fchk; psi4.driver.p4util.fcidump; psi4.driver.p4util.numpy_helper; psi4.driver.p4util.prop_util; psi4.driver.p4util.python_helpers; psi4.driver.p4util.text; psi4.driver.p4util.util. psi4.driver.pluginutil. /procrouting; ; psi4.driver.procrouting.empirical_dispersion; psi4.driver.procrouting.interface_cfour; psi4.driver.procrouting.proc; psi4.driver.procrouting.proc_util. /qcdb; ; psi4.driver.qcdb.molecule; psi4,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:597179,depend,dependent,597179,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['depend'],['dependent']
Integrability,"epare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. # CSXError ceased to be used by v1.4. Class removed by v1.7; # class CSXError(PsiException):. [docs]class MissingMethodError(ValidationError):; """"""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; ValidationError.__init__(self, msg); self.message = '\nMissingMethodError: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; """"""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_type : (str, str), raw value and str repr of gover",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:9851,message,message,9851,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"ependent code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ERD by N. Flocke and V. Lotrich. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/erd-1.html:3116,depend,dependencies,3116,psi4manual/1.4.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/erd-1.html,2,['depend'],['dependencies']
Integrability,"ependent code. To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to ERD by N. Flocke and V. Lotrich. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/erd-1.html:3116,depend,dependencies,3116,psi4manual/1.5.0/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/erd-1.html,2,['depend'],['dependencies']
Integrability,"ept for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ao-casscf-sp; CASSCF/6-31G** energy point. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfcasscf-sp; CASSCF/6-31G** energy point. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. omp2-3; OMP2 cc-pVDZ energy for the NO radical. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:13242,wrap,wrappers,13242,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['wrap'],['wrappers']
Integrability,"equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html:6717,depend,depending,6717,psi4manual/1.3.2/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html,2,['depend'],['depending']
Integrability,"equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. Table Of Contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__occ-1.html:6747,depend,depending,6747,psi4manual/1.0.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__occ-1.html,2,['depend'],['depending']
Integrability,"equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. RELAXED¶. Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__occ-1.html:6721,depend,depending,6721,psi4manual/1.1.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__occ-1.html,4,['depend'],['depending']
Integrability,"er PsiPEP and a discussion of; the proposed change or practice.; Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down.; Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history).; Once there’s agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include¶. Best practices or re-vamped best practices; Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. Request/present viewpoint on organization; Draw attention to organization needed in code outside one’s area of; expertise. Request interface for some structure (e.g., gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. Fair Warning: Proposal to change things up; Announce plans to re-organize code structure or how something is; handled. List goals (may be conflicting) and how proposed scheme best; satisfies them. PsiPEP allows discussion before roll-out in case; proposal has deleterious side-effects. The contrast between a PsiPEP and a ticket is that for the latter, there’s; no question of whether the task is to be done as described. Comments¶; 04-Jul-2012, LAB. table of contents. PEP1: Proposing PsiPEP for PSI4; Path of a PsiPEP; Roles of a PsiPEP Include; Comments. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Contributions: Intro to Programming in PSI4; PsiPEP: Plans and Practices to Organize PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/pep0001-1.html:2314,interface,interface,2314,psi4manual/1.1.0/pep0001-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/pep0001-1.html,2,['interface'],['interface']
Integrability,"er Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT; Higher-Order Exchange Terms without Single-Exchange Approximation. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; Interface to adcc. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/methods.html:4187,depend,dependent,4187,psi4manual/1.7.x/methods.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/methods.html,1,['depend'],['dependent']
Integrability,"er and Møller–Plesset Perturbation Theories; OCC: Conventional Møller–Plesset Perturbation Theories; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Geometry Optimization; Evaluation of One-Electron Properties. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay; Interface to DFTD3 by S. Grimme; Interface to Molden. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation; PsiPEP: Plans and Practices to Organize PSI4. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver. Python Driver; inputparser; interactive; pubchem; psiexceptions; frac; molutil; p4regex; proc; dashparam; driver; gaussian_n; pcmgetkw; wrappers; qmmm; diatomic; functional; pcmpreprocess; aliases; grendel; p4util; p4const; qcdb. psi4: Linking C++ and Python; Appendices; Bibliography; Test Suite and Sample Inputs; Basis Sets by Element; Auxiliary Basis Sets; DFT Functionals; PSIOH Intermediate Files; Keywords by Alpha; Keywords by Module; PSI Variables by Alpha; PSI Variables by Module. Indices. Index; Module Index; Search Page. Next topic; Introduction; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/index.html:2542,wrap,wrappers,2542,psi4manual/4.0b5/index.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/index.html,1,['wrap'],['wrappers']
Integrability,"er of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:9060,message,message,9060,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"er of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); raise TestComparisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); psi4.print_out(""The Failed Test Matrices\n""); psi4.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); psi4.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.suc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:6295,message,message,6295,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['message'],['message']
Integrability,"er symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primiti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html:1487,contract,contraction,1487,psi4manual/1.5.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.gaussianshell.html,5,['contract'],['contraction']
Integrability,"er symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi’th primitive. erd_coef(self, pi); Return ERD normalized coefficient of pi’th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi’th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primiti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html:1487,contract,contraction,1487,psi4manual/1.4.0/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.gaussianshell.html,1,['contract'],['contraction']
Integrability,"er. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:200659,depend,dependencies,200659,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['depend'],['dependencies']
Integrability,"er:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dkh-1.html:3341,depend,dependencies,3341,psi4manual/1.4.0/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dkh-1.html,2,['depend'],['dependencies']
Integrability,"er:. “The Generalized Douglas-Kroll Transformation,” A. Wolf,; M. Reiher, and B. A. Hess, J. Chem. Phys. 117, 9215 (2002).; (doi: 10.1063/1.1515314). How to configure dkh for building Psi4¶; Role and Dependencies. Role — In PSI4, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) dkh; Upstream Dependencies — dkh \(\Leftarrow\) Fortran. CMake Variables. ENABLE_dkh — CMake variable toggling whether Psi4 builds with dkh; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing include/DKH/DKH_MANGLE.h; dkh_DIR — CMake variable to specify where pre-built dkh can be found. Set to installation directory containing share/cmake/dkh/dkhConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_dkh — CMake variable to force internal build of dkh instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_dkh — CMake variable to force detecting pre-built dkh and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_dkh=ON. Build without dkh. >>> cmake. Link against pre-built. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. table of contents. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Installation; Input; Keywords; RELATIVISTIC; DKH_ORDER. Reference; How to configure dkh for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/dkh-1.html:3341,depend,dependencies,3341,psi4manual/1.5.0/dkh-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/dkh-1.html,2,['depend'],['dependencies']
Integrability,"er; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; INCFOCK; INCFOCK_FULL_FOCK_EVERY; LEVEL_SHIFT; LEVEL_SHIFT_CUTOFF; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html:19734,integrat,integration,19734,psi4manual/1.5.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html,2,['integrat'],['integration']
Integrability,"er; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; LEVEL_SHIFT; LEVEL_SHIFT_CUTOFF; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environme",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html:19477,integrat,integration,19477,psi4manual/1.4.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html,2,['integrat'],['integration']
Integrability,"er[source]¶; Computer for analytic single-geometry computations. Show JSON schema{; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""protocols"": {; ""title"": ""Protocols"",; ""description"": ""Output modifications."",; ""default"": {; ""stdout"": true; },; ""anyOf"": [; {; ""$ref"": ""#/definitions/AtomicResultProtocols""; },; {; ""type"": ""object""; }; ]; },; ""tag"": {; ""title"": ""Tag"",; ""description"": ""The tags to pass along to compute managers."",; ""default"": ""*"",; ""type"": ""string""; },; ""priority"": {; ""title"": ""Priority"",; ""description"": ""The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}"",; ""default"": 1,; ""type"": ""string""; },; ""owner_group"": {; ""title"": ""Owner Group"",; ""description"": ""group in the chown sense."",; ""type"": ""string""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:1171,protocol,protocols,1171,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,3,['protocol'],['protocols']
Integrability,"er_2}]). The difference is that the main function; psi4.cbs() and extrapolation schemes like; psi4.driver.driver_cbs_helper.xtpl_highest_1() and; psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2() and composite; aliases like psi4.driver.aliases.sherrill_gold_standard(); and psi4.driver.aliases.allen_focal_point() in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'); optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}]). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper, cbs-xtpl-dict. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata])[source]; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases; complete_basis_set(). Returns; (float) – Total electronic energy in Hartrees. PSI variables. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:2217,wrap,wrapper,2217,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,1,['wrap'],['wrapper']
Integrability,"er_df_basis_cc = psi4.get_option('DF_BASIS_CC'); #user_df_basis_sapt = psi4.get_option('DF_BASIS_SAPT'); #user_df_basis_elst = psi4.get_option('DF_BASIS_ELST'); b_user_wfn = psi4.has_global_option_changed('WFN'); user_wfn = psi4.get_global_option('WFN'). user_writer_file_label = psi4.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(); psi4.set_global_option(""BASIS"", psi4.get_global_option(""BASIS"")). # Establish method for correlation energy; if 'name' in kwargs:; if (lowername == 'scf') or (lowername == 'df-scf'):; pass; else:; do_corl = 1; cbs_corl_wfn = kwargs['name'].lower(); if 'corl_wfn' in kwargs:; do_corl = 1; cbs_corl_wfn = kwargs['corl_wfn'].lower(); if do_corl:; if not (cbs_corl_wfn in VARH.keys()):; raise ValidationError('Requested CORL method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_corl_wfn)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = 1; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if not (cbs_delta_wfn in VARH.keys()):; raise ValidationError('Requested DELTA method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn)). if 'delta_wfn_lesser' in kwargs:; cbs_delta_wfn_lesser = kwargs['delta_wfn_lesser'].lower(); else:; cbs_delta_wfn_lesser = 'mp2'; if not (cbs_delta_wfn_lesser in VARH.keys()):; raise ValidationError('Requested DELTA method lesser \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = 1; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if not (cbs_delta2_wfn in VARH.keys()):; raise ValidationError('Requested DELTA2 method \'%s\' is not recognized. Add it to VARH in wrapper.py to proceed.' % (cbs_delta2_wfn)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:70839,wrap,wrapper,70839,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"eral Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". __all__ = [; ""ConvergenceError"",; ""MissingMethodError"",; ""ManagedMethodError"",; ""OptimizationConvergenceError"",; ""ParsingError"",; ""PastureRequiredError"",; ""PsiException"",; ""SCFConvergenceError"",; ""TDSCFConvergenceError"",; ""TestComparisonError"",; ""UpgradeHelper"",; ""ValidationError"",; ""docs_table_link"",; ""sanitize_method"",; ]. from typing import Any, Dict, List, Optional. from psi4 import core, extras. [docs]; class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html:1817,message,message,1817,psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,2,['message'],['message']
Integrability,"eral, Optional, Sequence, Set, Tuple, Union, TYPE_CHECKING; from ast import literal_eval; from enum import Enum; try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import pprint; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from qcelemental.models import DriverEnum, AtomicResult. from psi4 import core; from psi4.driver import constants, driver_nbody_multilevel, p4util; from psi4.driver.p4util.exceptions import *; from psi4.driver.task_base import BaseComputer, AtomicComputer, EnergyGradientHessianWfnReturn; from psi4.driver.driver_cbs import CompositeComputer; from psi4.driver.driver_findif import FiniteDifferenceComputer. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). FragBasIndex = Tuple[Tuple[int], Tuple[int]]. SubTaskComputers = Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. [docs]; def nbody():; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. :type bsse_type: str or list; :param bsse_type: ``'cp'`` || ``['nocp', 'vmfc']`` || |dl| ``None`` |dr| || etc. Type of BSSE correction to compute: CP for counterpoise correction, NoCP; for plain supramolecular interaction energy, or VMFC for Valiron-Mayer; Function Counterpois",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html:8294,depend,depending,8294,psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,1,['depend'],['depending']
Integrability,"erd from conda without thinking, consult sec:condapsi4dev.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by N. Flocke and V. Lotrich; Installation; How to configure erd for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/erd-1.html:3197,depend,dependencies,3197,psi4manual/1.2.1/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/erd-1.html,2,['depend'],['dependencies']
Integrability,"ere case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number or an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to \(10^{-6} E_h\), the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Notes on PSI Variables¶. Note; Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. method ROOT 0 -> ROOT m property to get root m.; method ROOT 0 -> ROOT m property - h TRANSITION to get root m and; independently specify that the total transition symmetry is h, e.g., A2.; method ROOT 0 (h) -> ROOT m (i) property to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than; with the molecular system. Changing the number of roots sought, the symmetry; subspace or the symmetry apportionment of roots under which the computation is run,; or the excited state method are all likely to scramble root numberings. table of contents. Notes on Options; Notes on PSI Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; Notes on Options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/notes_c.html:1923,interface,interface,1923,psi4manual/1.8.x/notes_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/notes_c.html,1,['interface'],['interface']
Integrability,"ere case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; Certain convergence and tolerance keywords, of type double (real numbers),; may be specified using either a real number or an integer; and integer X is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to \(10^{-6} E_h\), the user may set the e_convergence; keyword to 0.000001, 1.0e-6, or 6. Notes on PSI Variables¶. Note; Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. method ROOT 0 -> ROOT m property to get root m.; method ROOT 0 -> ROOT m property - h TRANSITION to get root m and; independently specify that the total transition symmetry is h, e.g., A2.; method ROOT 0 (h) -> ROOT m (i) property to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than; with the molecular system. Changing the number of roots sought, the symmetry; subspace or the symmetry apportionment of roots under which the computation is run,; or the excited state method are all likely to scramble root numberings. table of contents. Notes on Options; Notes on PSI Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; Notes on Options. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/notes_c.html:1923,interface,interface,1923,psi4manual/1.9.x/notes_c.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/notes_c.html,1,['interface'],['interface']
Integrability,"erforms a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cp_func'] = energy; func = kwargs['cp_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and input.yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_option('DF_INTS_IO'); PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMod.print_out(""\n""); banner(""CP Computation: Complex.\nFull",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:18720,wrap,wrapper,18720,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"ergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human readab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:5952,rout,routine,5952,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"ergy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); PsiMod.wavefunction().energy(). optstash.restore(); return PsiMod.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = PsiMod.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:34756,depend,dependent,34756,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['depend'],['dependent']
Integrability,"erint == 0:; return float(jobrec['extras']['qcvars']['DISPERSION CORRECTION ENERGY']); elif derint == 1:; return jobrec['extras']['qcvars']['DISPERSION CORRECTION GRADIENT']. [docs] def run_gcp(self, func: Optional[str] = None, dertype: Union[int, str, None] = None, verbose: int = 1):; """"""Compute geometrical BSSE correction via Grimme's GCP program. Function to call Grimme's GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to *self* for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, *func*. Returns energy if *dertype* is 0, gradient; if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The gcp executable must be independently compiled and; found in :envvar:`PATH` or :envvar:`PSIPATH`. *self* may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. Parameters; ----------; func; Name of method/basis combination or composite method for which to compute the correction; (e.g., HF/cc-pVDZ, DFT/def2-SVP, HF3c, PBEh3c).; dertype; Maximum derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose; Amount of printing. Unused at present. Returns; -------; energy : float; When `dertype=0`, energy [Eh].; gradient : ndarray; When `dertype=1`, (nat, 3) gradient [Eh/a0].; (energy, gradient) : tuple of float and ndarray; When `dertype=None`, both energy [Eh] and (nat, 3) gradient [Eh/a0]. """"""; import qcengine as qcng. if dertype is None:; derint, derdriver = -1, 'gradient'; else:; derint, derdriver = parse_dertype(dertype, max_derivative=1). resinp = {; 'molecule': self.to_schema(dtype=2),; 'driver': derdriver,; 'model': {; 'method': func,; 'basis': '(auto)',; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html:45942,interface,interface,45942,psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,1,['interface'],['interface']
Integrability,"ers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer need",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:5333,depend,dependencies,5333,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['depend'],['dependencies']
Integrability,"ers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; PSI4. While most are computed within PSI4’s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/PSI4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dftd3.html:3592,interface,interface,3592,psi4manual/4.0b3/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html,10,['interface'],"['interface', 'interfaced']"
Integrability,"ers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson was introduced in [Grimme:2011:1456]. The parameters; fit for individual functionals are now , ,; , and . All parameters characterizing the dispersion correction are taken from; http://toc.uni-muenster.de/DFTD3/; or else from the literature. Running DFTD3¶; A number of a posteriori dispersion corrections are available in; Psi4. While most are computed within Psi4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 correction and its variants are; available only through the DFTD3 program. Once installed, the; dftd3/Psi4 interface is transparent, and all corrections are; interfaced exactly alike.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, and a B3LYP-D3 (zero-damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'). Consult the table -D Functionals to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction¶. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:4306,interface,interface,4306,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,4,['interface'],"['interface', 'interfaced']"
Integrability,"ers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e.g., `conda install mpfr`)); # - Eigen (for Libint2; e.g., `conda install eigen`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:15045,depend,dependencies,15045,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['depend'],['dependencies']
Integrability,"ersion of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4).; Compilers; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++11 compliance (i.e., GCC version 4.9 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details.; Python; PSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects). Once Python 3.7 is released,; the plan is to support >=3.6 or at least two Python versions. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UH",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/introduction-1.html:20245,depend,dependencies,20245,psi4manual/1.2.1/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/introduction-1.html,2,['depend'],['dependencies']
Integrability,"erts its return to driver_nbody_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. Return type:; nbody_results. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat)e/g/h := energy or gradient or Hessian; rtd := return_total_data. item; size; present / zeroed; contents / interpretation. ret_ptype; ptype_size; always. interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver)with cp/nocp/vmfc treatment (depending on 1st of bsse_type). ret_energy; 1; always; interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type). ret_gradient; (nat, 3); when driver is g/h; interaction gradient: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type. ret_hessian; (nat * 3, nat * 3); when driver is h; interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type). nbody; >=1; always; energy n-body QCVariables to be set.   CP-CORRECTED TOTAL ENERGY THROUGH 1-BODY;   1; when cp in bsse_type; MBE sum of subsystems of 1-body. summed are total energies with cp treatment.   CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY;   1; when cp in bsse_type & max_nbody>=2; MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with cp treatment.   CP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY;   1; when cp in bsse_type; MBE sum of subsystems of {max_nbody}-body or fewer (cumulative); summed are total energies w/ cp treatment.   CP-CORRECTED TOTAL ENERGY;   1; when cp in bsse_type & rtd=T; best available total energy with cp treatment: CP-CORRECTED TOTAL ENERGY THROUGH {max_nbody}-BODY.   CP-CORRECTED INTERACTION ENERGY THROUGH 2-BODY;   1; when cp in bsse_type & max_nbody>=2; 2-body total data less 1-body total data for cumulative IE; inputs are t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/nbody.html:19260,depend,depending,19260,psi4manual/1.7.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/nbody.html,4,['depend'],['depending']
Integrability,"erty; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39198,depend,dependencies,39198,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['depend'],['dependencies']
Integrability,"es (cheapest terms). mrccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). mrccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). mrccsdt-1b; CC through doubles with iterative triples (cheaper terms). mrccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). mrccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). mrccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). mrcc2; approximate CC through doubles. mrcc3; approximate CC through triples. mrcc4; approximate CC through quadruples. mrcc5; approximate CC through quintuples. mrcc6; approximate CC through sextuples. mrccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). mrccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). mrccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). mrccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('mrccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC;  . 2; CC(n-1)[n];  . 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a;  . 6; CC(n)-1b;  . 7; CCn;  . 8; CC(n)-3;  . table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/mrcc-1.html:3911,interface,interface,3911,psi4manual/1.2.1/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/mrcc-1.html,2,['interface'],['interface']
Integrability,"es (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:5338,depend,dependency,5338,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['depend'],['dependency']
Integrability,"es HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:21338,interface,interface,21338,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['interface'],['interface']
Integrability,"es molecule to center of charge. print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). rotor_type(tol=1e-08)[source]¶; Returns the rotor type.; >>> H2OH2O.rotor_type(); RT_ASYMMETRIC_TOP. run_dftd3(func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary dashparam can be used to supply; a full set of dispersion parameters in the absense of func or to supply; individual overrides in the presence of func. Returns energy if dertype is 0,; gradient if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The dftd3 executable must be independently compiled and found in; PATH or PSIPATH.; self may be either a qcdb.Molecule (sensibly) or a psi4.Molecule; (works b/c psi4.Molecule has been extended by this method py-side and; only public interface fns used) or a string that can be instantiated; into a qcdb.Molecule. save_string_xyz(save_ghosts=True, save_natom=False)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. backtransform(chgeMol, permMol, chgeGrad=None, chgeDip=None)[source]¶; Here, chgeMol and chgeGrd need to be turned into the native Cfour; orientation embodied by permMol. Currently for vpt2. cfour_gradient_list()[source]¶; Return an array of Cfour methods with analytical gradients.; Appended to procedures[‘gradient’]. cfour_list()[source]¶; Return an array of Cfour methods with energies. Appended; to procedures[‘energy’]. cfour_psivar_list()[source]¶; Return a dict with ke",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:23933,interface,interface,23933,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['interface'],['interface']
Integrability,"es — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint2.h; Libint2_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing lib/cmake/libint2/libint2-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint2 — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint2 — CMake variable to force detecting pre-built Libint and not falling back on internal build; BUILD_Libint2_GENERATOR — CMake variable to allow internal build to start from generator source, not generated source; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. Build bundled shared library with up to AM=5. >>> cmake -DBUILD_SHARED_LIBS=ON. Build custom library from generator source. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libint by E. Valeev. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/libint.html:3187,depend,dependencies,3187,psi4manual/1.8.x/libint.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/libint.html,1,['depend'],['dependencies']
Integrability,"es — PSI4 \(\Leftarrow\) Libint; Upstream Dependencies — Libint \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing include/libint2.h; Libint2_DIR — CMake variable to specify where pre-built Libint can be found. Set to installation directory containing lib/cmake/libint2/libint2-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libint2 — CMake variable to force internal build of Libint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libint2 — CMake variable to force detecting pre-built Libint and not falling back on internal build; BUILD_Libint2_GENERATOR — CMake variable to allow internal build to start from generator source, not generated source; MAX_AM_ERI — CMake variable to specify minimum highest angular momentum built or detected. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. Build bundled shared library with up to AM=5. >>> cmake -DBUILD_SHARED_LIBS=ON. Build custom library from generator source. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. table of contents. Interface to Libint by E. Valeev; Installation; How to configure Libint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to Libint by E. Valeev. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/libint.html:3187,depend,dependencies,3187,psi4manual/1.9.x/libint.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/libint.html,1,['depend'],['dependencies']
Integrability,"es, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of Psi4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in Psi4 are; _nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. _nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yield",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:12485,wrap,wrapped,12485,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrapped']
Integrability,"es; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2017 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; from psi4.driver import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html:1176,wrap,wrappers,1176,psi4manual/1.1.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"es; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2018 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import os; import re; import math; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/aliases.html:1178,wrap,wrappers,1178,psi4manual/1.2.1/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"es; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2019 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import math; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/aliases.html:1178,wrap,wrappers,1178,psi4manual/1.3.2/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"es; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2021 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: str; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html:1197,wrap,wrappers,1197,psi4manual/1.4.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/aliases.html,2,['wrap'],['wrappers']
Integrability,"es; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; import os; import re; import warnings; from typing import Any, Dict, List. CBSMetadata = List[Dict[str, Any]]. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: str; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html:1197,wrap,wrappers,1197,psi4manual/1.6.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"ese four components yields; EFP TOTAL ENERGY. EFP TOTAL ENERGY¶; The total electronic interaction energy [E_h] for EFP/EFP computations. EFP TORQUE¶; The torque, not gradient for EFP/EFP computations. ENTHALPY¶; Total enthalpy H [E_h] at given temperature. ENTHALPY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. ESP AT CENTER n¶; Property of electrostatic potential [E_h / e] at location, usually atom center, n. FCI TOTAL ENERGY¶. FCI CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. GIBBS FREE ENERGY¶; Total Gibbs free energy [E_h], free enthalpy at given temperature. GIBBS FREE ENERGY CORRECTION¶; Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. GRID ELECTRONS TOTAL¶. GRID ELECTRONS ALPHA¶. GRID ELECTRONS BETA¶; The number of electrons integrated by the xc quadrature grid. HF TOTAL ENERGY¶; The total electronic energy [E_h] for the Hartree–Fock method, without; any dispersion correction; the first three (or four, since; \(E_{xc} = 0\)) terms in Eq. (4). Quantity \(E_{\text{HF}}\); in Eq. (4). HF KINETIC ENERGY¶; The total kinetic energy [E_h] of the Hartree–Fock method. HF POTENTIAL ENERGY¶; The total potential energy [E_h] of the Hartree–Fock method. HF VIRIAL RATIO¶; The virial ratio of the Hartree–Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. HF TOTAL GRADIENT¶; The total electronic gradient [E_h/a0] of the Hartree–Fock method, ({nat}, 3). HF DIPOLE GRADIENT¶; The derivative of the Hartree–Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). HF TOTAL HESSIAN¶; The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). LCCD TOT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html:32089,integrat,integrated,32089,psi4manual/1.7.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/glossary_psivariables.html,4,['integrat'],['integrated']
Integrability,"esidual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI)¶DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS)¶GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI)¶DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC)¶DFOCC — Do r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:197605,integrat,integration,197605,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['integrat'],['integration']
Integrability,"esired image in this case is called “AlphaMOs.tga”, and looks like this:. Script Options¶; >>> ./vmd_cube.py --help; usage: vmd_cube.py [-h] [--color1 [<integer>]] [--color2 [<integer>]]; [--iso [<isovalue>]] [--rx [<angle>]] [--ry [<angle>]]; [--rz [<angle>]] [--tx [<angle>]] [--ty [<angle>]]; [--tz [<angle>]] [--opacity [<opacity>]]; [--scale [<factor>]] [--montage [MONTAGE]]; [--imagesize [<integer>]] [--fontsize [<integer>]]; [<cubefile dir>]; .; vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4, add the command cubeprop(wfn) at the end of your input file, where; *wfn* is a Wavefunction object that may be retrieved from any calculation and; used following the pattern ""ene, wave = energy('pbe', return_wfn=True)\n; cubeprop(wave)"".; .; positional arguments:; <cubefile dir> The directory containing the cube files.; .; optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<angle>] the x-axis translation (float, default = 0.0); --ty [<angle>] the y-axis translation (float, default = 0.0); --tz [<angle>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --montage [MONTAGE] call montage to combine images. (string, default =; false); --imagesize [<integer>]; the size of each image (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20). Table Of Contents. cubeprop() Generation of cube files; Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FIL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html:7659,message,message,7659,psi4manual/1.0.0/cubeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cubeprop-1.html,2,['message'],['message']
Integrability,"essian How did you end up here?""). def _print_nbody_energy(energy_body_dict, header, embedding=False):; core.print_out(""""""\n ==> N-Body: %s energies <==\n\n"""""" % header); core.print_out("""""" n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]\n""""""); previous_e = energy_body_dict[1]; if previous_e == 0.0:; tot_e = False; else:; tot_e = True; nbody_range = list(energy_body_dict); nbody_range.sort(); for n in nbody_range:; delta_e = (energy_body_dict[n] - previous_e); delta_e_kcal = delta_e * constants.hartree2kcalmol; int_e_kcal = (; energy_body_dict[n] - energy_body_dict[1]) * constants.hartree2kcalmol if not embedding else np.nan; if tot_e:; core.print_out("""""" %4s %20.12f %20.12f %20.12f\n"""""" % (n, energy_body_dict[n], int_e_kcal,; delta_e_kcal)); else:; core.print_out("""""" %4s %20s %20.12f %20.12f\n"""""" % (n, ""N/A"", int_e_kcal,; delta_e_kcal)); previous_e = energy_body_dict[n]; core.print_out(""\n""). [docs]def nbody_gufunc(func: Union[str, Callable], method_string: str, **kwargs):; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when **return_wfn** specified. :type func: Callable; :param func: ``energy`` || etc. Python function that accepts method_string and a molecule. Returns a; energy, gradient, or Hessian as requested. :type method_string: str; :param method_string: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, lowercase and usually unlabeled. Indicates the computational; method to be passed to func. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indica",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_nbody.html:3896,depend,depending,3896,psi4manual/1.4.0/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver_nbody.html,2,['depend'],['depending']
Integrability,"essian""] = H0. D0 = assembled_results[""dipole""]; if D0 is not None:; qcvars[""CURRENT DIPOLE""] = D0; qcvars[""CBS DIPOLE""] = D0. DD0 = assembled_results[""dipole gradient""]; if DD0 is not None:; qcvars[""CURRENT DIPOLE GRADIENT""] = DD0; qcvars[""CBS DIPOLE GRADIENT""] = DD0. cbs_model = AtomicResult(; **{; 'driver': self.driver,; #'keywords': self.keywords,; 'model': {; 'method': self.method,; 'basis': self.basis,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__, module=assembled_results[""module""]),; 'extras': {; 'qcvars': qcvars,; 'cbs_record': copy.deepcopy(self.cbsrec),; },; 'return_result': assembled_results['ret_ptype'],; 'success': True,; }). logger.debug('CBS QCSchema:\n' + pp.pformat(cbs_model.dict())). return cbs_model. [docs]; def get_psi_results(; self,; client: Optional[""qcportal.FractalClient""] = None,; *,; return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; cbs_model = self.get_results(client=client). if cbs_model.driver == 'energy':; ret_ptype = cbs_model.return_result; else:; ret_ptype = core.Matrix.from_array(cbs_model.return_result); wfn = _cbs_schema_to_wfn(cbs_model). if return_wfn:; return (ret_ptype, wfn); else:; return ret_ptype. def _cbs_schema_to_wfn(cbs_model):; """"""Helper function to produce Wavefunction from a Composite-flavored AtomicResult."""""". mol = core.Molecule.from_schema(cbs_model",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:61004,interface,interface,61004,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,3,['interface'],['interface']
Integrability,"essian_with', lowername). _filter_renamed_methods(""optimize"", lowername). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); #",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:69395,depend,dependent,69395,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['depend'],['dependent']
Integrability,"essian_with', lowername). _filter_renamed_methods(""optimize"", lowername). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n; core.set_variable('GEOMETRY ITERATIONS', n). # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting ene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:64652,depend,dependent,64652,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"essy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in PSI4 uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled PSI4 with OpenMP and MKL (Note that it is; possible to use g++ or another compiler and yet still link against MKL).; Control of threading in PSI4 can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels.; (1) OpenMP/MKL Environment Variables; The easiest/least visible way to thread PSI4 is to set the standard OpenMP/MKL; environment variables OMP_NUM_THREADS and MKL_NUM_THREADS.; For instance, in tcsh:; setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4. PSI4 then detects these value via the API routines in <omp.h> and; <mkl.h>, and runs all applicable code with 4 threads. These environment; variables are typically defined in a .tcshrc or .bashrc.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/external-1.html:4595,rout,routines,4595,psi4manual/4.0b2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html,2,['rout'],['routines']
Integrability,"esume correlation logic; if do_corl:; if cbs_corl_wfn not in VARH.keys():; raise ValidationError(""""""Requested CORL method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_corl_wfn)). cbs_corl_wfn_lesser = kwargs.get('corl_wfn_lesser', cbs_scf_wfn).lower(); if cbs_corl_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for second delta correction energy; if 'delta2_wfn' in kwargs:; do_delta2 = True; cbs_delta2_wfn = kwargs['delta2_wfn'].lower(); if cbs_delta2_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn)). cbs_delta2_wfn_lesser = kwargs.get('delta2_wfn_lesser', cbs_delta_wfn).lower(); if cbs_delta2_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA2 method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta2_wfn_lesser)). # # Establish method for third delta correction energy; # if 'delta3_wfn' in kwargs:; # do_delta3 = True; # cbs_delta3_wfn = kwargs['delta3_wfn'].lower(); # if cbs_delta3_wfn not in VARH.keys():; # raise ValidationError(""""""Requested DELTA3 method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta3_wfn)); #; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:40555,wrap,wrapper,40555,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['wrap'],['wrapper']
Integrability,"et basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:6569,depend,depending,6569,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['depend'],['depending']
Integrability,"et the total memory allocation. set_module_options(module, options_dict); Sets Psi4 module options from a module specification and input dictionary. set_options(options_dict); Sets Psi4 global options from an input dictionary. success(label); Function to print a ‘label…PASSED’ line to screen. vibanal_wfn(wfn[, hess, irrep, molecule, …]). write_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. xml2dict([filename]); Read XML filename into nested OrderedDict-s. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, maxit); Error called for problems with converging and iterative method. Dftd3Error(msg). EmpericalDispersion(alias, dtype, **kwargs). ManagedMethodError(circs). OptimizationConvergenceError(…); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). Table([rows, row_label_width, …]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. ValidationError(msg); Error called for problems with the input file. datetime(year, month, day[, hour[, minute[, …); The year, month and day arguments are required. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:263669,depend,dependencies,263669,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['depend'],['dependencies']
Integrability,"et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:12550,depend,depend,12550,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"et. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cbs-delta-energy; Extrapolated energies with delta correction. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mints15; check SP basis Fortran exponent parsing. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. fci-coverage; 6-31G H2O Test for coverage. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:9319,depend,dependent,9319,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['depend'],['dependent']
Integrability,"et. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. mints-helper; A general test of the MintsHelper function. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cepa-module; routing check on lccd, lccsd, cepa(0). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. scf6; Tests RHF/ROHF/UHF SCF gradients. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:17896,depend,depend,17896,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"et_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicCo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html:5872,protocol,protocols,5872,psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.AtomicComputer.html,1,['protocol'],['protocols']
Integrability,"et_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None) – . Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data.; :rtype: AtomicInput. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicCom",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.AtomicComputer.html:5904,protocol,protocols,5904,psi4manual/1.9.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.AtomicComputer.html,1,['protocol'],['protocols']
Integrability,"et_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field owner_group: Optional[str] = None¶; group in the chown sense. field priority: str = 1¶; The priority of a Task; higher priority will be pulled first. {high:2, normal:1, low:0}. field protocols: Union[AtomicResultProtocols, Dict[str, Any], None] = {'stdout': True}¶; Output modifications. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. field tag: str = '*'¶; The tags to pass along to compute managers. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (qcportal.client.FractalClient | None). get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Parameters:; client (qcportal.FractalClient | None). Return type:; AtomicResult. plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. table of contents. AtomicComputer; AtomicComputer; AtomicComputer.basis; AtomicComputer.computed; AtomicComputer.driver; AtomicComputer.keywords; AtomicComputer.method; AtomicComputer",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.AtomicComputer.html:5911,protocol,protocols,5911,psi4manual/master/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.AtomicComputer.html,1,['protocol'],['protocols']
Integrability,"et_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISD computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp3_gradient'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:8818,rout,route,8818,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,3,['rout'],['route']
Integrability,"et_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISD computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_mp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp3_gra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:8963,rout,route,8963,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['rout'],['route']
Integrability,et_units() LibmintsMolecule method. set_variable() LibmintsMolecule method. setting; . keywords C-side. keywords cbs(). keywords cp(). keywords database(). keywords diatomic_anharmonicity(). keywords energy(). keywords molecule. keywords optimize(). keywords property(). SF_RESTRICT (DETCI). sherrillgroup_gold_standard() in module aliases. show() in module qcdb.vecutil. SIGMA_OVERLAP (DETCI). single-point. SINGLES_PRINT (CCEOM). SMALL_CUTOFF (PSIMRCC). SO_S_FILE (TRANSQT). SO_T_FILE (TRANSQT). SO_TEI_FILE (TRANSQT). SO_V_FILE (TRANSQT). SOCC (GLOBALS). (MCSCF). SOLVER_CONVERGENCE (CPHF). SOLVER_EXACT_DIAGONAL (CPHF). SOLVER_MAX_SUBSPACE (CPHF). SOLVER_MAXITER (CPHF). SOLVER_MIN_SUBSPACE (CPHF). SOLVER_N_GUESS (CPHF). SOLVER_N_ROOT (CPHF). SOLVER_NORM (CPHF). SOLVER_PRECONDITION (CPHF). SOLVER_PRECONDITION_MAXITER (CPHF). SOLVER_PRECONDITION_STEPS (CPHF). SOLVER_QUANTITY (CPHF). SOLVER_TYPE (CPHF). SORTED_TEI_FILE (TRANSQT). SOS_TYPE (OCC). SPINADAPT_ENERGIES (CCENERGY). split_menial() in module wrappers. SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STABILITY_ADD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functi,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:43175,wrap,wrappers,43175,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['wrap'],['wrappers']
Integrability,"etails.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". __all__ = [""process_input""]. import os; import re; import uuid. from psi4 import core; from psi4.driver.p4util.exceptions import *; from psi4.driver.p4util.util import set_memory. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html:1886,wrap,wrapping,1886,psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,2,['wrap'],['wrapping']
Integrability,"etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(); #psi4.set_global_option('BASIS', psi4.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those; # run normally through OEProp so subject to change; if not psi4.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 10); if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:43983,depend,dependent,43983,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['depend'],['dependent']
Integrability,"eted basis set string from a sequential series; of basis sets (e.g, form 'cc-pv[q5]z' from array [cc-pvqz, cc-pv5z]). The; basis set array is extracted from the *f_basis* field of a *NEED* dictionary in; :py:func:`~wrappers.complete_basis_set`. Result is used to print a nicely; formatted basis set string in the results table. """"""; ZETA = {'d': 2, 't': 3, 'q': 4, '5': 5, '6': 6}; ZSET = [''] * len(ZETA); BSET = []. for lvl in needarray.items():; BSET.append(lvl[1]['f_basis']). if (len(BSET) == 1):; basisstring = BSET[0]; else:; indx = 0; while indx < len(BSET[0]):; if (BSET[0][indx] != BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:78597,wrap,wrappers,78597,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,3,['wrap'],['wrappers']
Integrability,"eters; ----------; seq1; First string.; seq2; Second string. """"""; oneago = None; thisrow = list(range(1, len(seq2) + 1)) + [0]; for x in range(len(seq1)):; twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html:3512,message,message,3512,psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/text.html,2,['message'],['message']
Integrability,"etry(''); optstash.restore(); optstash_conv.restore(). _hessian_write(wfn). if return_wfn:; return (wfn.hessian(), wfn); else:; return wfn.hessian(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; displacements = core.fd_geoms_freq_0(moleculeclone, irrep); moleculeclone.fix_orientation(True); moleculeclone.reinterpret_coordentry(False). # Record undisplaced symmetry for projection of diplaced point groups; core.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if freq_mode == 'sow':; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """"""# to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """"""# has produced a number of input files (FREQ-*.in) for individual components\n""""""; instructionsO += """"""# and a single input file (FREQ-master.in) with a frequency(mode='reap') command.\n""""""; instructionsO += """"""# These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """"""# rather than normal input. Follow the instructions below (repeated in FREQ-master.in)\n""""""; instructionsO += """"""# to continue.\n#\n""""""; instructionsO += """"""# Alternatively, a single-job execution of the hessian may be accessed through\n""""""; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:78672,depend,dependent,78672,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"etry=fix_symmetry,; return_processed=False,; enable_qm=enable_qm,; enable_efp=enable_efp,; missing_enabled_return_qm=missing_enabled_return_qm,; missing_enabled_return_efp=missing_enabled_return_efp,; verbose=verbose); if return_dict:; return core.Molecule.from_dict(molrec['qm']), molrec; else:; return core.Molecule.from_dict(molrec['qm']). @classmethod; def molecule_from_arrays(cls,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,; name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,; fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,; molecular_charge=None,; molecular_multiplicity=None,; comment=None,; provenance=None,; connectivity=None,; missing_enabled_return='error',; tooclose=0.1,; zero_ghost_fragments=False,; nonphysical=False,; mtol=1.e-3,; verbose=1,; return_dict=False):; """"""Construct Molecule from unvalidated arrays and variables. Light wrapper around :py:func:`~qcelemental.molparse.from_arrays`; that is a full-featured constructor to dictionary representa-; tion of Molecule. This follows one step further to return; Molecule instance. Parameters; ----------; See :py:func:`~qcelemental.molparse.from_arrays`. Returns; -------; :py:class:`psi4.core.Molecule`. """"""; molrec = qcel.molparse.from_arrays(; geom=geom,; elea=elea,; elez=elez,; elem=elem,; mass=mass,; real=real,; elbl=elbl,; name=name,; units=units,; input_units_to_au=input_units_to_au,; fix_com=fix_com,; fix_orientation=fix_orientation,; fix_symmetry=fix_symmetry,; fragment_separators=fragment_separators,; fragment_charges=fragment_charges,; fragment_multiplicities=fragment_multiplicities,; molecular_charge=molecular_charge,; molecular_multiplicity=molecular_multiplicity,; comment=comment,; provenance=provenance,; connectivity=connectivity,; domain='qm',; missing_enabled_return=missing_enabled_return,; tooclose=tooclose,; zero_ghost_fragments=zero_ghost_fragments,; nonphysical=",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/molutil.html:3367,wrap,wrapper,3367,psi4manual/1.3.2/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/molutil.html,1,['wrap'],['wrapper']
Integrability,"evel which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; Union[bool, Tuple[bool, str]]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:29441,message,message,29441,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,1,['message'],['message']
Integrability,"exchange-dispersion for SAPT-DFT. Previous to Nov 2022, default was FIXED with Hesselmann value. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:217312,integrat,integration,217312,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,4,['integrat'],['integration']
Integrability,"executable must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; optimize('pbeh3c'). HF-3c with non-standard basis; set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/gcp-1.html:2613,rout,route,2613,psi4manual/1.4.0/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/gcp-1.html,5,['rout'],['route']
Integrability,"exictations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_holes_I holes in RAS I, there are more than max_parts_IV particles in RAS IV, OR there are more than max_I+IV quasiparticles in RAS I + RAS IV]. Type: array; Default: No Default. CC_MIXED¶. Do ignore block if num holes in RAS I and II is cc_ex_lvl and if any indices correspond to RAS I or IV (i.e., include only all-active higher excitations)?. Type: boolean; Default: true. CC_UPDATE_EPS¶. Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VARIATIONAL¶. Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. Expert Alternative Algorithms¶. BENDAZZOLI¶. Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. FCI_STRINGS¶. Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. REPL_OTF¶. Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. Expert MCSCF¶. MCSCF_ALGORITHM¶. Convergence algorithm to utilize. This is a flag for the future. Type: string; Possible Values: ONE_STEP, TWO_STEP; Default: TWO_STEP. MCSCF_SO¶. Do second-order orbital-orbital MCSCF. Without one-step this typically slows the overall computation cons",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__detci-1.html:20747,rout,routines,20747,psi4manual/1.0.0/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__detci-1.html,2,['rout'],['routines']
Integrability,"exictations in coupled-cluster computations, based on macroconfiguration selection. For each sub-array, [ex_lvl, max_holes_I, max_parts_IV, max_I+IV], eliminate cluster amplitudes in which: [the excitation level (holes in I + II) is equal to ex_lvl] AND [there are more than max_holes_I holes in RAS I, there are more than max_parts_IV particles in RAS IV, OR there are more than max_I+IV quasiparticles in RAS I + RAS IV]. Type: array; Default: No Default. CC_MIXED¶. Do ignore block if num holes in RAS I and II is cc_ex_lvl and if any indices correspond to RAS I or IV (i.e., include only all-active higher excitations)?. Type: boolean; Default: true. CC_UPDATE_EPS¶. Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VARIATIONAL¶. Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. Expert Alternative Algorithms¶. BENDAZZOLI¶. Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. FCI_STRINGS¶. Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. REPL_OTF¶. Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. Table Of Contents. DETCI; General Options; AVG_STATES; AVG_WEIGHTS; CIBLKS_PRINT; CI_NUM_THREADS; DETCI_FREEZE_CORE; EX_LEVEL; E_CONVERGENCE; FCI; ICORE; ISTOP; MAXITER; NUM_DETS_PRINT; NUM_ROOTS; REFERENCE; R_CONVERGENCE; S_SQUARED; VAL_EX_LEVEL. Specifying the CI Space; ACTIVE; A_R",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html:21215,rout,routines,21215,psi4manual/4.0b2/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html,8,['rout'],['routines']
Integrability,"experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS¶. Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME¶. Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME¶. Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF¶. Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance. Type: double; Default: -1.0. DFT_VV10_B¶. Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C¶. Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF¶. post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS¶. Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_SPHERICAL_POINTS¶. Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. LOCAL_CONVERGENCE¶. The convergence on the orbital localization procedure. Type: conv double; Default: 1e-12. LOCAL_MAXITER¶. The maxiter on the orbital localization procedure. Type: integer; Default: 200. NL_DISPERSION_PARAMETERS¶. Parameters defining the -NL/-V dispersion correction. First b, then C. Type: array; Default: No Default. SAVE_UHF_NOS¶. Save the UHF NOs. Type: boolean; Default: false. UHF_NOONS¶. The number of NOONs to print in a UHF calc. Type: string; Default: 3. TDSCF¶. TDSCF_COEFF_CUTOFF¶. Cutoff for printing excitations and de-excitations contributing to each excited state. Type: double; Default: 0.1. TDSCF_GUESS¶. Guess type, only ‘denominators’ currently supported. Type: string; Default: DENOMINATORS. TDSCF_MAXITER¶. Maximum number of TDSCF solver iterations. Type: integer; Default: 60. TDSCF_PRINT¶. Verbosity level in TDSCF. Type: integer; Default: 1. TDSCF_R_CONVERGENCE¶. Convergence threshold f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html:15752,integrat,integration,15752,psi4manual/1.8.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html,3,['integrat'],['integration']
Integrability,"extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.cbs-1.html:10507,interface,interface,10507,psi4manual/1.4.0/api/psi4.driver.cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.cbs-1.html,10,['interface'],['interface']
Integrability,"ey needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices . DISK (=0) directs the program to calculate and store all elements of , while DIRECT (=1) tells the program to use alternative algorithms in which is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) u",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:46553,contract,contracted,46553,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['contract'],['contracted']
Integrability,"eyword can be used when inputting the molecule; (see Sec. Molecule and Geometry Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html:14027,depend,dependent,14027,psi4manual/4.0b4/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html,4,['depend'],['dependent']
Integrability,"e})""; message = """"""\t{}: computed value does not match {}.\n Expected:\n{}\n Observed:\n{}\n Difference (passed elements are zeroed):\n{}\n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.array_equal`.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expecte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:6279,message,messages,6279,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,1,['message'],['messages']
Integrability,"e})""; message = """"""\t{}: computed value does not match {}.\n Expected:\n{}\n Observed:\n{}\n Difference (passed elements are zeroed):\n{}\n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.array_equal.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.arra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:6203,message,messages,6203,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,1,['message'],['messages']
Integrability,"f ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:15644,message,message,15644,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['message'],['message']
Integrability,"f ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14444,message,message,14444,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['message'],['message']
Integrability,"f double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_addon.html:11456,integrat,integrate,11456,psi4manual/1.8.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_addon.html,1,['integrat'],['integrate']
Integrability,"f double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_addon.html:11456,integrat,integrate,11456,psi4manual/1.9.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_addon.html,1,['integrat'],['integrate']
Integrability,"f matchobj:; result += process_option(spaces, module, matchobj.group(1), matchobj.group(2), command); # Reset the string; command = """"; else:; bad_option_syntax(command); return result. [docs]def process_from_file_command(matchobj):; """"""Function that process a match of ``from_file`` in molecule block.""""""; string = matchobj.group(2); mol=psi4.mol_from_file(string,1); tempmol=[line for line in mol.split('\n') if line.strip() != '']; mol2=set(tempmol); mol=""""; for i in mol2:; mol+=i; mol+=""\n""; return mol. [docs]def process_pubchem_command(matchobj):; """"""Function to process match of ``pubchem`` in molecule block.""""""; string = matchobj.group(2); if re.match(r'^\s*[0-9]+\s*$', string):; # This is just a number - must be a CID; pcobj = pubchem.PubChemObj(int(string), '', ''); try:; return pcobj.getMoleculeString(); except Exception as e:; return e.message; else:; # Search pubchem for the provided string; try:; results = pubchem.getPubChemResults(string); except Exception as e:; return e.message. # N.B. Anything starting with PubchemError will be handled correctly by the molecule parser; # in libmints, which will just print the rest of the string and exit gracefully.; if not results:; # Nothing!; return ""PubchemError\n\tNo results were found when searching PubChem for %s.\n"" % (string); elif len(results) == 1:; # There's only 1 result - use it; return results[0].getMoleculeString(); else:; # There are multiple results. Print and exit; msg = ""\tPubchemError\n""; msg += ""\tMultiple pubchem results were found. Replace\n\n\t\tpubchem:%s\n\n"" % (string); msg += ""\twith the Chemical ID number or exact name from one of the following and re-run.\n\n""; msg += ""\t Chemical ID IUPAC Name\n\n""; for result in results:; msg += ""%s"" % (result); if result.name().lower() == string.lower():; #We've found an exact match!; return result.getMoleculeString(); return msg. [docs]def process_molecule_command(matchobj):; """"""Function to process match of ``molecule name? { ... }``.""""""; spaces = matcho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html:6109,message,message,6109,psi4manual/1.0.0/_modules/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/inputparser.html,1,['message'],['message']
Integrability,"f options provided. LINK_INTS_TOLERANCE: The integral screening tolerance used for sparsity-prep in the LinK algorithm. Defaults to the INTS_TOLERANCE option. Seminumerical Linear Exchange¶; Similar to the COSX algorithm provided by PSI4, the seminumerical Linear Exchange (sn-LinK) algorithm, devised; by Ochsenfeld in [Laqua:2020:1456], improves efficiency of the K construction process by; decomposing computation of the ERI tensor into a series of contractions involving grid-computed basis; function components and analytic 3-center integrals. As a “semi-numerical” Exchange construction method,; sn-LinK is also comparable to the pseudospectral method of Friesner.; sn-LinK and COSX have a number of significant differences in implementation details in PSI4, however.; First and foremost, the COSX implementation is contained within PSI4 itself, and is thus always available; for execution. On the other hand, the sn-LinK implementation in PSI4 is tied to the GauXC standalone; library discussed in [Williams-Young:2023:234104]; thus, the PSI4-GauXC interface must be built; for sn-LinK to be used. Second, the GauXC sn-LinK interface is more; efficient than the PSI4 COSX code on multiple levels. For CPU execution, GauXC’s sn-LinK uses highly-optimized; kernels for the contraction of the analytic integrals, whereas PSI4’s COSX uses a less-optimized, more; general contraction kernel. Additionally, GauXC’s sn-LinK code supports execution on GPUs, allowing for; GPU-enabled construction of the Exchange matrix, while PSI4’s COSX does not. In general,; sn-LinK will provide better runtime performance for hitting a desired accuracy; threshold compared to PSI4’s COSX. Third, some low-level implementation details differ between the two.; For example, PSI4’s COSX uses a dual-grid scheme similar to that originally proposed by Neese,; converging the SCF on a small grid, then running a number of SCF iterations,; equal to the value set by the COSX_MAXITER_FINAL, on a larger grid.; In contrast",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:41447,interface,interface,41447,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['interface'],['interface']
Integrability,"f run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_cepa0(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(name, **kwargs). optstash.restore(). [docs]def run_cepa0_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA(0) gradient calculation. """"""; optstash =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:7841,rout,routine,7841,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"f this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). return_history = kwargs.pop('return_history', False); if return_history:; # Add wfn once the deep copy issues are worked out; step_energies = []; step_gradients = []; step_coordinates = []. # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and core.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:59173,wrap,wrapper,59173,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['wrap'],['wrapper']
Integrability,"f.name, '=',i; 					raise TypeError; 		elif self.type == 'STR' or self.type == 'STR_ARRAY':; 			return True; 		elif self.type == 'DATA':; 			return True; 		else:; 			print 'getkw: Unknown type: ', self.name, '=', self.type; 			raise TypeError; 		return True; 	; [docs]	def is_type(self, typ):; 		if typ == self.type:; 			return True; 		return False. [docs]	def is_set(self):; 		return self.isset. [docs]	def is_required(self):; 		return self.req; 	; [docs]	def set_status(self, set):; 		if set:; 			self.isset=True; 		else:; 			self.isset=False. 	def __str__(self):; # if self.type == 'STR': ; # print 'foo', self.name, self.arg; 		if (self.type == 'STR' or 'STR_ARRAY' or 'DATA') and \; 				(self.arg == '' or self.arg == None): # empty string; 			nargs=-1 # flags as empty for Fortran code; 		else: ; 			nargs=len(self.arg); 			tmp=''; 			for i in self.arg:; 				tmp=tmp+str(i)+'\n'; 		s=""%s %s %d %s\n"" % (self.type, self.name, nargs, self.isset); 		return s+tmp. [docs]class Getkw:; 	""""""Unified interface to sections and keywords.; 	Implements a path stack.; 	""""""; 	def __init__(self, top):; 		self.top=top; 		self.stack=[self.top]; 		self.cur=self.stack[0]. [docs]	def get_active_section(self):; 		return self.cur. [docs]	def getkw(self, path):; 		return self.cur.getkw(path). [docs]	def get_keyword(self, path):; 		retur=self.cur.get_keyword(path); 		return retur. [docs]	def setkw(self, path):; 		return self.cur.setkw(path). [docs]	def find_sect(self, path):; 		return self.cur.find_sect(path). [docs]	def sanitize(self, templ):; 		return self.cur.sanitize(templ). [docs]	def run_callbacks(self, templ):; 		return self.cur.run_callbacks(templ). [docs]	def push_sect(self, path):; 		k=self.cur.find_sect(path); 		if k is None:; 			return None; 		self.stack.append(k); 		self.cur=self.stack[-1]; 		return self.cur. [docs]	def pop_sect(self):; 		try:; 			del self.stack[-1]; 		except:; 			return None; 		self.cur=self.stack[-1]; 		return self.cur. [docs]	def get_topsect(self):; 		return self.to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html:11742,interface,interface,11742,psi4manual/4.0b5/_modules/pcmgetkw.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/pcmgetkw.html,1,['interface'],['interface']
Integrability,"f: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory¶; The integral factory used to create C. name(self: psi4.core.OrbitalSpace) → str¶; Name of the orbital space. nirrep(self: psi4.core.OrbitalSpace) → int¶; Returns number of irreps. print_out(self: psi4.core.OrbitalSpace) → None¶; Print information about the orbital space to the output file. C(self: psi4.core.OrbitalSpace) → psi4.core.Matrix; MO coefficient matrix, AO->MO or SO->MO transformation matrix. basisset(self: psi4.core.OrbitalSpace) → psi::BasisSet; The AO basis set used to create C. build_cabs_space(orb_space: psi4.core.OrbitalSpace, ri_space: psi4.core.OrbitalSpace, linear_tol: float) → psi4.core.OrbitalSpace; Given two spaces, it projects out one space from the other and returns the new spaces The first argument (orb_space) is the space to project out. The returned space will be orthogonal to this The second argument (ri_space) is the space that is being projected on. The returned space = this space - orb_space The third argument is the tolerance for linear dependencies. build_ri_space(molecule: psi::Molecule, obs_key: str, aux_key: str, lindep_tol: float) → psi4.core.OrbitalSpace; Given two basis sets, it merges the basis sets and then constructs an orthogonalized space with the same span. Linearly dependent orbitals are thrown out. The first argument, molecule, is the molecule to construct the basis for The second argument, obs_key, is the option keyword for orbital basis set ‘BASIS’ The third argument, aux_key, is the option keyword for auxiliery basis set ‘DF_BASIS_MP2’ The fourth argument, lindep_tol, is the tolerance for linear dependencies. dim(self: psi4.core.OrbitalSpace) → psi4.core.Dimension; MO dimensions. evals(self: psi4.core.OrbitalSpace) → psi4.core.Vector; Corresponding eigenvalues of the C matrix. id(self: psi4.core.OrbitalSpace) → str; Unique identifier. integral(self: psi4.core.OrbitalSpace) → psi4.core.IntegralFactory; The integral factory used to create C. name(self: psi4.core.O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html:3675,depend,dependencies,3675,psi4manual/1.3.2/api/psi4.core.orbitalspace.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.orbitalspace.html,2,['depend'],['dependencies']
Integrability,"factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: DISP. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:211755,integrat,integration,211755,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['integrat'],['integration']
Integrability,"ferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer need",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:5869,depend,dependencies,5869,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['depend'],['dependencies']
Integrability,"ference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (List) – Keys in top level which may change between expected and computed without triggering failure.; required (List) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling fun",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:28127,message,messages,28127,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['message'],['messages']
Integrability,"ference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:28215,message,messages,28215,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,1,['message'],['messages']
Integrability,"ference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error mes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/add_tests.html:28223,message,messages,28223,psi4manual/1.9.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/add_tests.html,2,['message'],['messages']
Integrability,"ference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/cbs-1.html:10426,wrap,wrapper,10426,psi4manual/4.0b5/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"fficients (of length nprimitives); self.PYoriginal_coef = [c[n] for n in range(len(c))]; # Atom number this shell goes to. Needed when indexing integral derivatives.; self.nc = nc; # Atomic center number in the Molecule; self.center = center; #; self.start = start; # How many cartesian functions? (1=s, 3=p, 6=d, ...); self.PYncartesian = INT_NCART(self.l); # How many functions? (1=s, 3=p, 5/6=d, ...) * Dependent on the value of puream_; self.PYnfunction = INT_NFUNC(self.puream, self.l). # Compute the normalization constants; if pt == 'Unnormalized':; self.normalize_shell(); self.erd_normalize_shell(). [docs] def primitive_normalization(self, p):; """"""Normalizes a single primitive.; @param p The primitive index to normalize.; @return Normalization constant to be applied to the primitive. """"""; tmp1 = self.l + 1.5; g = 2.0 * self.PYexp[p]; z = pow(g, tmp1); return math.sqrt((pow(2.0, self.l) * z) / (math.pi * math.sqrt(math.pi) * df(2 * self.l))). [docs] def contraction_normalization(self):; """"""Normalizes an entire contraction set. Applies the normalization to the coefficients; * @param gs The contraction set to normalize. """"""; e_sum = 0.0; for i in range(self.nprimitive()):; for j in range(self.nprimitive()):; g = self.PYexp[i] + self.PYexp[j]; z = pow(g, self.l + 1.5); e_sum += self.PYcoef[i] * self.PYcoef[j] / z. tmp = ((2.0 * math.pi / (2.0 / math.sqrt(math.pi))) * df(2 * self.l)) / pow(2.0, self.l); try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm. [docs] def normalize_shell(self):; """"""Handles calling primitive_normalization and; contraction_normalization for you. """"""; for i in range(self.nprimitive()):; normalization = self.primitive_normalization(i); self.PYcoef[i] *= normalization; self.contraction_normalization(). [docs] def erd_normalize_shell(self):; """""". """"""; self.PYerd_coef = []; tsum = 0.0; for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html:5070,contract,contraction,5070,psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsgshell.html,1,['contract'],['contraction']
Integrability,"file to compare against expected.; label – string labeling the test. psi4.compare_moldenfiles(expected, computed, atol_exponent=7, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters. expected (file) – Reference Molden file against which computed is compared.; computed (file) – Input Molden file to compare against expected.; atol_exponent (int or float) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. qcdb.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type; bool. Extra QCA Func",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:27511,message,messages,27511,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['message'],['messages']
Integrability,"file_to_string(fname):; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]def compare_fchkfiles(expected, computed, digits, label):; # """"""Function to compare two FCHK files. # an older format description can be found here; # http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; # It lists more fields (logical, character) that are not included in this; # test function. They should be covered by the string comparison.; # This function is only meant to work with PSI4's FCHK files.; #; # :param expected: reference FCHK file name; # :param computed: computed FCHK file name; # :param digits: tolerance for high accuracy fields -- 1.e-8 or 1.e-9 suitable; # :param label: string labelling the test; # """""". fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = digits; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and not ""N="" in line:; cal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html:3236,depend,dependence,3236,psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,2,['depend'],['dependence']
Integrability,"files as psif; from psi4.driver.p4util.exceptions import ManagedMethodError, PastureRequiredError, ValidationError; #from psi4.driver.molutil import *; from psi4.driver.qcdb.basislist import corresponding_basis; # never import driver, wrappers, or aliases into this file. from .roa import run_roa; from . import proc_util; from . import empirical_dispersion; from . import dft; from . import mcscf; from . import response; from . import solvent. # ATTN NEW ADDITIONS!; # consult http://psicode.org/psi4manual/master/proc_py.html. def select_scf_gradient(name, **kwargs):; """"""Function selecting the algorithm for an SCF gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('SCF_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only scf. if mtd_type == 'CD':; # manifestation of `""""""No analytic derivatives for SCF_TYPE CD.""""""`.; # here, only hits upon `gradient(""scf"")` so above message also present in driver.py to catch e.g., mp2 gradient atop a cd reference.; func = None; else:; func = run_scf_gradient. if func is None:; raise ManagedMethodError(['select_scf_gradient', name, 'SCF_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc. # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:2649,message,message,2649,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['message'],['message']
Integrability,"files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:12636,message,message,12636,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:51915,depend,depending,51915,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['depend'],['depending']
Integrability,"files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:51729,depend,depending,51729,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['depend'],['depending']
Integrability,"finitely separated nuclei and; electrons, not “formation” values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these “absolute” enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the “thermal energies” reported in kcal/mol are the; finite-temperature corrections to the electronic total energy, and; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords¶. T¶. Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. P¶. Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. ROTATIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. Examples¶. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/thermo-1.html:1959,depend,dependent,1959,psi4manual/1.1.0/thermo-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/thermo-1.html,2,['depend'],['dependent']
Integrability,"for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/basissets-1.html:6799,rout,routes,6799,psi4manual/1.1.0/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html,2,['rout'],['routes']
Integrability,"for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4’s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/basissets-1.html:6801,rout,routes,6801,psi4manual/1.2.1/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/basissets-1.html,4,['rout'],['routes']
Integrability,"for indx_job, job in enumerate(JOBS):; for menial in VARH[job['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); JOBS_EXT.append(dict(zip(f_fields, [temp_wfn, temp_portion, job['f_basis'], job['f_zeta'], 0.0]))). #instructions += """"""\n Full listing of computations to be obtained (required and bonus).\n""""""; #for mc in JOBS_EXT:; # instructions += """""" %12s / %-24s for %s\n"""""" % (mc['f_wfn'], mc['f_basis'], VARH[mc['f_wfn']][mc['f_wfn']+mc['f_portion']]); psi4.print_out(instructions). psioh = psi4.IOManager.shared_object(); psioh.set_specific_retention(p4const.PSIF_SCF_MOS, True). # Run necessary computations; for mc in JOBS:; kwargs['name'] = mc['f_wfn']. # Build string of title banner; cbsbanners = ''; cbsbanners += """"""psi4.print_out('\\n')\n""""""; cbsbanners += """"""p4util.banner(' CBS Computation: %s / %s ')\n"""""" % (mc['f_wfn'].upper(), mc['f_basis'].upper()); cbsbanners += """"""psi4.print_out('\\n')\n\n""""""; exec(cbsbanners). # Build string of molecule and commands that are dependent on the database; commands = '\n'; commands += """"""\npsi4.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); commands += """"""psi4.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()). exec(commands). # Make energy() call; mc['f_energy'] = call_function_in_1st_argument(func, **kwargs). # Fill in energies for subsumed methods; for menial in VARH[mc['f_wfn']]:; temp_wfn, temp_portion = split_menial(menial); for job in JOBS_EXT:; if (temp_wfn == job['f_wfn']) and (temp_portion == job['f_portion']) and (mc['f_basis'] == job['f_basis']):; job['f_energy'] = psi4.get_variable(VARH[temp_wfn][menial]). psi4.clean(). psioh.set_specific_retention(p4const.PSIF_SCF_MOS, False). # Build string of title banner; cbsbanners = ''; cbsbanners += """"""psi4.print_out('\\n')\n""""""; cbsbanners += """"""p4util.banner(' CBS Results ')\n""""""; cbsbanners += """"""psi4.print_out('\\n')\n\n""""""; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:84644,depend,dependent,84644,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['depend'],['dependent']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3, BUILTIN; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, COSX; Default: PK. SCREENING¶. The type of screening used when computing two-electron integrals. Type: string; Possible Values: SCHWARZ,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__globals.html:6749,rout,routing,6749,psi4manual/1.6.x/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__globals.html,1,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCREENING¶. The type of screening used when computing two-electron integrals. Type: string; Possible Values: SCHWARZ, CSAM, DENSITY;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__globals-1.html:6749,rout,routing,6749,psi4manual/1.5.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__globals-1.html,2,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SOCC¶. An array containing the number of singly-occupied orbitals per irrep (in Cotton order). The value of DOCC should also be set.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__globals-1.html:6749,rout,routing,6749,psi4manual/1.4.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__globals-1.html,2,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, COSX, LINK; Default: PK. SCREENING¶. The type of screening used when computing two-electron integrals. Type: string; Possible Values: SC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__globals.html:7644,rout,routing,7644,psi4manual/1.7.x/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__globals.html,1,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ+COSX, DFDIRJ+LINK; Default: PK. SCREENING¶. The type of screening used when computing two-electron integrals. Type: string; Possi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__globals.html:7646,rout,routing,7646,psi4manual/1.8.x/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__globals.html,1,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX, DFDIRJ+LINK, DFDIRJ+SNLINK; Default: PK. SCREENING¶. The type of screening used when computing two-electron integra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__globals.html:7922,rout,routing,7922,psi4manual/master/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__globals.html,1,['rout'],['routing']
Integrability,"for pcmsolver module. Type: boolean; Default: false. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PRINT_NOONS¶. How many NOONS to print – used in libscf_solver/uhf.cc and libmints/oeprop.cc. Type: string; Default: 3. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_MODULE¶. When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX, DFDIRJ+LINK; Default: PK. SCREENING¶. The type of screening used when computing two-electron integrals. Type: strin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__globals.html:7646,rout,routing,7646,psi4manual/1.9.x/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__globals.html,1,['rout'],['routing']
Integrability,"for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44263,depend,depend,44263,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['depend'],['depend']
Integrability,"formed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/db-1.html:7365,wrap,wrapper,7365,psi4manual/1.4.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html,9,['wrap'],['wrapper']
Integrability,"from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""). The data produced by running the above PsiAPI code can, for example, be used; with the Altair plotting library to produce the desired spectra. table of contents. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; TDSCF_STATES; TDSCF_TRIPLETS; TDSCF_TDA; TDSCF_R_CONVERGENCE; TDSCF_MAXITER; TDSCF_GUESS; TDSCF_PRINT; TDSCF_COEFF_CUTOFF; TDSCF_TDM_PRINT. PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; TDSCF: Time-dependent Hartree–Fock and density-functional theory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/tdscf.html:12927,depend,dependent,12927,psi4manual/1.7.x/tdscf.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/tdscf.html,2,['depend'],['dependent']
Integrability,"from; from source also,; enable it as a feature with ENABLE_ecpint,; and let the build system fetch and build it and activate dependent code. How to configure LibECPInt for building Psi4¶; Role and Dependencies. Role — In PSI4, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) LibECPInt; Upstream Dependencies — LibECPInt \(\Leftarrow\) None. CMake Variables. ENABLE_ecpint — CMake variable toggling whether Psi4 builds with LibECPInt; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing include/libecpint.hpp; ecpint_DIR — CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing lib/cmake/ecpint/ecpint-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_ecpint — CMake variable to force internal build of ecpint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_ecpint — CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_ecpint=ON. Build without LibECPInt. >>> cmake. Link against pre-built. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. table of contents. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LibECPInt by R. Shaw. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/ecpint.html:2439,depend,dependencies,2439,psi4manual/1.8.x/ecpint.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/ecpint.html,1,['depend'],['dependencies']
Integrability,"from; from source also,; enable it as a feature with ENABLE_ecpint,; and let the build system fetch and build it and activate dependent code. How to configure LibECPInt for building Psi4¶; Role and Dependencies. Role — In PSI4, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) LibECPInt; Upstream Dependencies — LibECPInt \(\Leftarrow\) None. CMake Variables. ENABLE_ecpint — CMake variable toggling whether Psi4 builds with LibECPInt; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing include/libecpint.hpp; ecpint_DIR — CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing lib/cmake/ecpint/ecpint-config.cmake; CMAKE_DISABLE_FIND_PACKAGE_ecpint — CMake variable to force internal build of ecpint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_ecpint — CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_ecpint=ON. Build without LibECPInt. >>> cmake. Link against pre-built. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. table of contents. Interface to LibECPInt by R. Shaw; Installation; How to configure LibECPInt for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LibECPInt by R. Shaw. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/ecpint.html:2439,depend,dependencies,2439,psi4manual/1.9.x/ecpint.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/ecpint.html,1,['depend'],['dependencies']
Integrability,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Moller-Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Moller-Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between Psi4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a Psi4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in Psi4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the Psi4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:28927,integrat,integration,28927,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['integrat'],['integration']
Integrability,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:27856,integrat,integration,27856,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['integrat'],['integration']
Integrability,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:28902,integrat,integration,28902,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['integrat'],['integration']
Integrability,"function, what: str, stats: Dict[str, Any]):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], stats[""delta_val""], stats[""res_norm""]):; conv_info += f"" {e:.6f} {diff:-11.5e} {r_norm:12.5e}\n""; ConvergenceError.__init__(self,; eqn_description=f""""""TDSCF solver ({what})"""""",; iteration=iteration,; additional_info=conv_info); self.wfn = wfn; self.what = what; self.stats = stats. # CSXError ceased to be used by v1.4. Class removed by v1.7; # class CSXError(PsiException):. [docs]class MissingMethodError(ValidationError):; """"""Error called when requested level or theory or derivative level are not; available. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; ValidationError.__init__(self, msg); self.message = '\nMissingMethodError: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; """"""Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters; ----------; circs; List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. Attributes; ----------; message; Human readable string describing the exception.; stats; Dictionary of conditions for which method request was made.; Keys are:. - driver : {""energy"", ""gradient"", ""hessian"", ""properties""}; - derivative_int : {0, 1, 2, ""prop""}, integer representation of driver; - method : str, model/method/level-of-theory; - link : str, link address to table in docs; - method_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:9789,message,message,9789,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"fying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENB",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:46713,contract,contracted,46713,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['contract'],['contracted']
Integrability,"g (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; gcp — [what is gCP?]; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — ht",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:7091,message,message,7091,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['message'],['message']
Integrability,"g (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; simple-dftd3 — [what is DFTD3?] (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) prefer",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:7359,message,message,7359,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['message'],['message']
Integrability,"g Code; Miscellaneous. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/external-1.html:959,depend,dependencies,959,psi4manual/1.2.1/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/external-1.html,4,['depend'],['dependencies']
Integrability,"g PSI4 Capabilities. Interface to NumPy¶; Code author: Daniel G. A. Smith; Section author: Daniel G. A. Smith; Module: Keywords, psi4/psi4/driver/p4util/numpy_helper.py. Basics¶; Converting between the PSI4 Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found here. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/dgasmith/psi4numpy`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.Matrix(3, 3); >>> vec = psi4.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to PSI4 objects using the from_array interface:; 1; 2>>> new_mat = psi4.Matrix.from_array(mat); >>> new_vec = psi4.Vector.from_array(vec). NumPy Views¶; Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of “Views” where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways:; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1. >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a .np attribute for easy access to the underlying data:; 1>>> mat.np[:] = 1. this operation is identical to the above. Warning; The following will lead to reference errors: view =; psi4.Matrix(3, 3).np. Here, the Python garbage collection deletes the Mat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/numpy-1.html:1131,interface,interface,1131,psi4manual/1.1.0/numpy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/numpy-1.html,2,['interface'],['interface']
Integrability,"g and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft1; DFT Functional Test all values update for new BraggSlater radii. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-smoke; DFT Functional Smoke Test.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:38119,wrap,wrappers,38119,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['wrap'],['wrappers']
Integrability,"g psi4.energy(); API; with psi4.optimize(); API; or psi4.frequency(); API,; respectively.; Let’s take a look at an example of optimizing the H\(_2\)O; molecule using Hartree-Fock with a cc-pVDZ basis set.; Now, here comes the real beauty of running Psi4 interactively: above,; when we computed the energy of H\(_2\)O with HF/cc-pVDZ, we; defined the Psi4 molecule object h2o. Since we’re still in the; Python shell, as long as you executed that block of code, we can reuse; the h2o molecule object in our optimization without redefining it,; by adding the molecule=h2o argument to the psi4.optimize(); API; function:. In [5]:. psi4.set_options({'reference': 'rhf'}); psi4.optimize('scf/cc-pvdz', molecule=h2o). Optimizer: Optimization complete!. Out[5]:. -76.02703272937504. This should perform a series of gradient computations. The gradient; points which way is downhill in energy, and the optimizer then modifies; the geometry to follow the gradient. After a few cycles, the geometry; should converge with a message like Optimization complete!. As; indicated in the following table (printed by the optimizer at the end of; the computation and grep-able with ~), the energy decreases with; each step, and the maximum force on each atom also decreases with each; step (in principle, these numbers could increase in some iterations, but; here they do not).; --------------------------------------------------------------------------------------------------------------- ~  Step         Total Energy             Delta E       MAX Force       RMS Force        MAX Disp        RMS Disp  ~ --------------------------------------------------------------------------------------------------------------- ~     1     -76.026632734908    -76.026632734908      0.01523518      0.01245755      0.02742222      0.02277530  ~     2     -76.027022666011     -0.000389931104      0.00178779      0.00142946      0.01008137      0.00594928  ~     3     -76.027032729374     -0.000010063363      0.00014019      0.00",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psiapi-1.html:7703,message,message,7703,psi4manual/1.1.0/psiapi-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psiapi-1.html,4,['message'],['message']
Integrability,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51878,depend,dependencies,51878,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['depend'],['dependencies']
Integrability,"g the .cshrc file to set the scratch; environment variable PSI_SCRATCH. If the selected location is; /scratch/user, add something like the following:; setenv PSI_SCRATCH /scratch/user. In a bash shell, the corresponding commands to be added to .bashrc is; the following:; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user. More advanced control of scratch files and is handled through a; .psi4rc file, which is discussed at section Scratch Files and the ~/.psi4rc File. Note; For developers: during compilation and testing, PSI4 finds its basis sets,; grids, etc., in psi4/lib. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. IV. Recommendations for BLAS and LAPACK libraries¶; Much of the speed and efficiency of the PSI4 programs depends on the; corresponding speed and efficiency of the available BLAS and LAPACK libraries; (especially the former). In addition, the most common compilation problems; involve these libraries. Users may therefore wish to consider the following; BLAS and LAPACK recommendations when building PSI4:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat. This library is usually just the; netlib distribution and is completely unoptimized. PSI4’s; performance will suffer if you choose this route.; The choice of LAPACK is less critical, and so the unoptimized; netlib distribution is acceptable. If you do choose to use the; RedHat/Fedora stock BLAS and LAPACK, make sure that the blas-devel; and lapack-devel packages are installed. Perhaps the best choice, if you have it available, is; Intel’s MKL library, which includes BLAS and LAPACK (note: use; version 11 or later, we had difficulty with version 10 for very; large coupled-cluster computations). MKL is e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:20419,depend,depends,20419,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['depend'],['depends']
Integrability,"g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cbs-1.html:12098,wrap,wrapper,12098,psi4manual/1.0.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. A-CCSD(T) 1; RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/cc-1.html:2794,depend,dependent,2794,psi4manual/1.5.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/cc-1.html,3,['depend'],['dependent']
Integrability,"g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cc-1.html:2846,depend,dependent,2846,psi4manual/1.2.1/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html,8,['depend'],['dependent']
Integrability,"g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM; The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'a-ccsd(t)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function properties() (instead of, for example, energy(),; e.g., pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/cc.html:2794,depend,dependent,2794,psi4manual/1.7.x/cc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/cc.html,4,['depend'],['dependent']
Integrability,"g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV¶. Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM¶. Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE¶. Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Ty",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:11778,contract,contraction,11778,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['contract'],['contraction']
Integrability,"g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected : file; Reference FCHK file against which `computed` is compared.; computed : file; Input FCHK file to compare against `expected`.; atol_exponent : int or float; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label : str; Label for passed and error messages. """"""; fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; cal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:3883,depend,dependence,3883,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,1,['depend'],['dependence']
Integrability,"g: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:4616,message,message,4616,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html:2478,depend,dependencies,2478,psi4manual/1.3.2/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gau2grid-1.html,2,['depend'],['dependencies']
Integrability,"ge; hole. Therefore LRC switches from DFA at short range to hybrid exchange at long; range, typically using the function as a; partition function.; Tying all these pieces together, a full LRC-hybrid GKS functional has the; generic form,. For LRC functionals, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems.; For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose “-D2” approach is a de facto industry standard. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dft-1.html:7602,depend,dependence,7602,psi4manual/1.0.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dft-1.html,10,['depend'],['dependence']
Integrability,"geably and will prefer the latter.; A DFTD3 executable, classic or simple-dftd3,; must also be available for these methods to; run. Unlike every other method in PSI4, if a basis set has not been; set, these will default to their intended basis sets: MINIX for HF-3c; and def2-mSVP for PBEh-3c. If a basis has previously been set, but you; want to use the default basis, use the slash syntax to “empty” the basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; optimize('pbeh3c'). HF-3c with non-standard basis; set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.Molecule.run_gcp(self, func=None, dertype=None, verbose=1)¶; Compute geometrical BSSE correction via Grimme’s GCP program.; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/gcp.html:3102,interface,interface,3102,psi4manual/1.7.x/gcp.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/gcp.html,2,['interface'],['interface']
Integrability,"ged and all that¶; To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take.; The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user.; The c-side module or plugin can then query the Options object for the; values associated with each keyword.; The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options¶; Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native PSI4 modules, the entries need to; be appended to the read_options code in psi4/psi4/src/read_options.cc.; An example of such a routine is; if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.add_str(""AO_BASIS"", ""NONE"", ""NONE DISK DIRECT"");; }. In the above example, the following options are declared (in order):. An integer called PRINT with a default value of 1.; A boolean cal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optionshandling-1.html:1244,rout,routine,1244,psi4manual/1.4.0/optionshandling-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optionshandling-1.html,9,['rout'],['routine']
Integrability,"gence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/scf-1.html:4234,contract,contracted,4234,psi4manual/1.1.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/scf-1.html,15,['contract'],['contracted']
Integrability,"genceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]; class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iteration.; d_conv; RMS change in density for last iteration. Attributes; ----------; message; Human read",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:5968,rout,routine,5968,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['rout'],['routine']
Integrability,"get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:10375,message,message,10375,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col),; computed.get(irrep, row, col))); failed = 1; break. if (failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry),; expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:10849,message,message,10849,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"get(irrep, row, col) - computed.get(irrep, row, col)) > 10**(-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" %; (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if (failed):; print(""Check your output file for reporting of the matrices.""); core.print_out(""The Failed Test Matrices\n""); core.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); core.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label); return True. [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if (expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" %; (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:10750,message,message,10750,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['message'],['message']
Integrability,"gh dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. [6](1, 2) [Smith:2016:2197]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); 1energy('bp86-d'). DFT-D3BJ optimization with default parameters; 1optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; 1; 2set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); 1; 2set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.interface_dftd3.run_dftd3(mol, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Compute dispersion correction using Grimme’s DFTD3 executable.; Function to call Grimme’s dftd3 program to compute the -D correction; of level dashlvl using parameters for the functiona",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dftd3-1.html:7309,interface,interface,7309,psi4manual/1.2.1/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dftd3-1.html,2,['interface'],['interface']
Integrability,"gh dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. [6](1, 2) [Smith:2016:2197]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); 1energy('bp86-d'). DFT-D3BJ optimization with default parameters; 1optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; 1; 2set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); 1; 2set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> print E; -8.84e-05. >>> E, G = nene.run_dftd3(dashlvl='d3', dashparam={'s8': 2.0, 'alpha6': 14.0, 'sr6': 1.261, 's6': 1.0}); >>> print E; -0.00024762. qcdb.interface_dftd3.run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level dashlvl using parameters for; the functional func. The dictionary das",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dftd3-1.html:7146,interface,interface,7146,psi4manual/1.1.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dftd3-1.html,2,['interface'],['interface']
Integrability,"gher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT; Second-Order Exchange Terms without Single-Exchange Approximation. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; Interface to adcc; Built-in ADC(2) code. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Dealing with problematic optimizations; Direct manipulation of the optmization coordinates; Convergence Criteria; Interface to GeomeTRIC; Output. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/methods-1.html:4023,depend,dependent,4023,psi4manual/1.4.0/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/methods-1.html,2,['depend'],['dependent']
Integrability,"gher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT; Second-Order Exchange Terms without Single-Exchange Approximation. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; Interface to adcc; Built-in ADC(2) code. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Dealing with problematic optimizations; Direct manipulation of the optmization coordinates; Convergence Criteria; Interface to GeomeTRIC; Output. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/methods-1.html:4118,depend,dependent,4118,psi4manual/1.5.0/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/methods-1.html,2,['depend'],['dependent']
Integrability,"ght for; type = 1 or one-line height for type = 2. If strNotOutfile; is True, function returns string rather than printing it; to output file. find_approximate_string_matches(seq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[so",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126675,depend,dependencies,126675,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['depend'],['dependencies']
Integrability,"gies with linearly dependent basis functions. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mints15; check SP basis Fortran exponent parsing. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. fci-coverage; 6-31G H2O Test for coverage. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. sapt10; usapt example with empty beta due to frozen core. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:10299,depend,depend,10299,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 – Same as dim1 only if using a psi4.core.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; 1; 2>>> data = np.random.rand(20); >>> vector = array_to_matrix(data). 1; 2; 3; 4>>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). Matrix to Array¶; A general function that converts NumPy arrays to PSI4 data objects. psi4.driver.p4util.numpy_helper._to_array(matrix, copy=True, dense=False)[source]¶; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; constructs a view. Parameters:; matrix (Matrix or Vector) – Pointers to which Psi4 core class should be used in the construction.; copy (bool, optional) – Copy the data if True, return a view otherwise; dense (bool, optional) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns:array – Returns either a list of np.array’s or the base array depending on options. Return type:ndarray or list of ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; 1; 2; 3; 4; 5>>> data = psi4.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. table of contents. Interface to NumPy; Basics; NumPy Views; PSI4 Data Objects with Irreps; Array to Matrix; Matrix to Array. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/numpy-1.html:4588,depend,depending,4588,psi4manual/1.2.1/numpy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/numpy-1.html,2,['depend'],['depending']
Integrability,"go, thisrow, [0] * len(seq2) + [x + 1]; for y in range(len(seq2)):; delcost = oneago[y] + 1; addcost = thisrow[y - 1] + 1; subcost = oneago[y - 1] + (seq1[x] != seq2[y]); thisrow[y] = min(delcost, addcost, subcost); return thisrow[len(seq2) - 1]. [docs]; def find_approximate_string_matches(seq1: str, options: List[str], max_distance: int) -> List[str]:; """"""Find list of approximate (within `max_distance`) matches to string `seq1` among `options`. Parameters; ----------; seq1; Target string to look for near matches to.; options; Alternatives among which to look for near matches to `seq1`.; max_distance; Maximum Levenshtein distance from `seq1` to return. """"""; return [seq2 for seq2 in options if (levenshtein(seq1, seq2) <= max_distance)]. [docs]; def message_box(message: str, max_width: int = 80, min_width: int = 30) -> str:; """"""Put a message string into a box for extra attention. Parameters; ----------; message; Message string to be boxed.; max_width; Maximal character width of the box.; min_width; Minimal character width of the box. Returns; -------; str; Box containing the message as a multiline string.; """"""; from textwrap import wrap. # ensure box is within min/max boundaries; msg = message.splitlines(); max_line = len(max(msg, key=len)); box_width = max(min(max_width, max_line), min_width). error_str = []; error_str.append('\n!' + '-' * box_width + '--!\n'); error_str.append('!' + ' ' * box_width + ' !\n'). fmt = ""! {:"" + str(box_width) + ""} !\n""; for line in msg[:]:; error_str.extend([fmt.format(x) for x in wrap(line, box_width, subsequent_indent="" "")]). error_str.append('!' + ' ' * box_width + ' !\n'); error_str.append('!' + '-' * box_width + '--!\n'); error_str = ''.join(error_str). return error_str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.text. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/text.html:3811,message,message,3811,psi4manual/master/_modules/psi4/driver/p4util/text.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/text.html,4,"['message', 'wrap']","['message', 'wrap']"
Integrability,"gradient in Hartrees/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| gradient and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). """"""; kwargs = p4util.kwargs_lower(kwargs). # Figure out what kind of gradient this is; if hasattr(name, '__call__'):; if name.__name__ in ['cbs', 'complete_basis_set']:; gradient_type = 'cbs_wrapper'; else:; # Bounce to name if name is non-CBS function; gradient_type = 'custom_function'; elif kwargs.get('bsse_type', None) is not None:; gradient_type = 'nbody_gufunc'; elif '/' in name:; gradient_type = 'cbs_gufunc'; else:; gradient_type = 'conventional'. # Figure out lowername, dertype, and func; # If we have analytical gradients we want to pass to our wrappers, otherwise we want to run; # finite-diference energy or cbs energies; # TODO MP5/cc-pv[DT]Z behavior unkown due to ""levels""; user_dertype = kwargs.pop('dertype', None); if gradient_type == 'custom_function':; if user_dertype is None:; dertype = 0; core.print_out(; ""\nGradient: Custom function passed in without a defined dertype, assuming fd-energy based gradient.\n""; ); else:; core.print_out(""\nGradient: Custom function passed in with a dertype of %d\n"" % user_dertype); dertype = user_dertype. if dertype == 1:; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', 'scf', 8, 10, 8, 10, 8); lowername = name. elif gradient_type == 'nbody_gufunc':; return driver_nbody.nbody_gufunc(gradient, name, ptype='gradient', **kwargs). elif gradient_type == 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:37454,wrap,wrappers,37454,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['wrap'],['wrappers']
Integrability,"grammatic construction calculation. .. caution:: Get rid of active molecule lines- should be handled in energy. """"""; if core.get_option('ADC', 'REFERENCE') != 'RHF':; raise ValidationError('ADC requires reference RHF'). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Ensure IWL files have been written; proc_util.check_iwl_file_from_scf_type(core.get_global_option('SCF_TYPE'), ref_wfn). warnings.warn(""Using built-in `adc` module instead of add-on `adcc` interface is deprecated due ""; ""to certain wrong results, and as soon as 1.7, it will stop working."", category=FutureWarning). error_msg = (""\n\t\t\t\t!!!!! WARNING !!!!!\n"" +; ""\t\tThe built-in ADC(2) method may give incorrect results if\n""; ""\t\tmultiple roots are requested, due to an error in the Davidson solver,\n""; ""\t\tand is no longer maintained. It is slated for removal in Psi4 1.7.\n""; ""\t\tUse of the Psi interface to `adcc` instead is strongly recommended.\n""). core.print_out(error_msg). wfn = core.adc(ref_wfn). core.print_out(error_msg). return wfn. def run_adcc(name, **kwargs):; """"""Prepare and run an ADC calculation in adcc, interpret the result and return; as a wavefunction. """"""; # TODO Maybe it would improve readability if this function was spilt; # up and the whole thing went to a separate file (like for sapt,; # interface_cfour.py, ... try:; import adcc; from adcc.exceptions import InvalidReference; except ModuleNotFoundError:; raise ValidationError(""adcc extras qc_module not available. Try installing ""; ""via 'pip install adcc' or 'conda install -c adcc adcc'.""). if core.get_option('ADC', 'REFERENCE') not in [""RHF"", ""UHF""]:; raise ValidationError('adcc requires reference RHF or UHF'). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.pop('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, use_c1=True, **kwargs). # Start timer; do_timer = kwargs.pop(""do_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:112528,interface,interface,112528,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['interface'],['interface']
Integrability,"group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); PsiMod.print_out(""Exiting auto_fragments\n""). #######################; ## Start of n_body ##; #######################. [docs]def n_body(name, **kwargs):; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('n_body_func' in kwargs):; if ('func' in kwargs):; kwargs['n_body_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['n_body_func'] = energy; func = kwargs['n_body_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper n_body.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper n_body is unhappy to be calling function \'%s\'.' % (func.__name__)). # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). # N-body run configuration; bsse = 'on'; if 'bsse' in kwargs:; bsse = kwargs['bsse']. max_n_body = molecule.nfragments(); if 'max_n_body' in kwargs:; max_n_body = kwargs['max_n_body']. do_total = False; if 'do_total' in kwargs:; do_total = kwargs['do_total']. external = None; external_indices = []; if 'external' in kwargs:; external = kwargs['external']; external_indices = [molecule.nfragments()]; if 'external_monome",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:4371,wrap,wrapper,4371,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,2,['wrap'],['wrapper']
Integrability,"gular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:14865,interface,interfacelib,14865,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['interface'],['interfacelib']
Integrability,"gular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. psi4.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. psi4.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:25891,message,messages,25891,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['message'],['messages']
Integrability,"gy atop a Q-zeta reference; >>> cbs('mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call (only energy makes sense for cbs); if not('cbs_func' in kwargs):; if ('func' in kwargs):; kwargs['cbs_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['cbs_func'] = energy; func = kwargs['cbs_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper complete_basis_set.' % (func.__name__)); if not(func is energy):; raise ValidationError('Wrapper complete_basis_set is unhappy to be calling function \'%s\' instead of \'energy\'.' % (func.__name__)). # Define some quantum chemical knowledge, namely what methods are subsumed in others; VARH = {}; VARH['scf'] = { 'scftot': 'SCF TOTAL ENERGY'}; VARH['oldmp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'oldmp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY'}; VARH['mp2.5'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY',; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY',; 'mp3corl': 'MP3 CORRELATION ENERGY'}; VARH['mp3'] = { 'scftot': 'SCF TOTAL ENERGY',; 'mp2corl': 'MP2 CORRELATION ENERGY',; 'mp2.5corl': 'MP2.5 CORRELATION ENERGY',; 'mp3corl': 'MP3 CORRELATION E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:63990,wrap,wrapper,63990,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrapper']
Integrability,"gy for last iteration; d_conv : float; RMS change in density for last iteration. """""". def __init__(self, eqn_description, iteration, wfn, e_conv, d_conv):; ConvergenceError.__init__(self, eqn_description, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not available{5}"""""".format(*circs); else:; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFERENCE '{4}' not directable to QC_MODULE '{5}'"""""".format(; *circs); PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class Dftd3Error(PsiException):; """""". """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nDftd3Error: %s\n\n' % msg. [docs]class PastureRequiredError(PsiException):; """"""Error called when the specified value of *option* requires some; module(s) from Psi4Pasture, but could not be imported.; """"""; msg_tmpl = """"""Psi4Pasture module(s) [{modlist}] are required to change the default value of {opt}. """"""; install_instructions = """"""; Note: Psi4Pasture is currently in an experimental state with no reliable install; procedure yet, but this is what it would look like. To Build Psi4Pasture and install the required modules within your current; Psi4 installation. >>> # clone the pasture repo; >>> git clone https://github.com/psi4/psi4pasture.git. >>> cmake -H. -Bobjdir -Dpsi4_DIR=$PSI4_INSTALL_PREFIX/share/cmake/psi4 {module_args}; >>> # $PSI4_INSTALL_PREFIX is the $CMAKE_INSTALL_PREFIX for the psi4; >>> # install you want to install pasture to. >>> # build + install install location is detected automatically; >>> cd objdir; >>> make && make install. See https://github.com/psi4/psi4pasture for mor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:4444,message,message,4444,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['message'],['message']
Integrability,"h MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sapt-1.html:24929,depend,depend,24929,psi4manual/1.4.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sapt-1.html,9,['depend'],['depend']
Integrability,"h converging and iterative method. Prints""];; ""PsiException"" -> ""ConvergenceError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""Dftd3Error"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""PsiException"" -> ""Dftd3Error"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""EmpericalDispersion"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""ManagedMethodError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)""];; ""PsiException"" -> ""ManagedMethodError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""ParsingError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems parsing a text file. Prints error message""];; ""PsiException"" -> ""ParsingError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PastureRequiredError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called when the specified value of *option* requires some""];; ""PsiException"" -> ""PastureRequiredError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""PsiException"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error class for Psi.""];; ""PsiImportError"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,shape=box,style=""setlinewidth(0.5)"",tooltip=""Error called for problems import python dependencies. Prints error message""];; ""PsiException"" -> ""PsiImportError"" [arrowsize=0.5,style=""setlinewidth(0.5)""];; ""QMMM"" [fontname=""Vera Sans, DejaVu Sans, Liberation Sans, Arial, Helvetica, sans"",fontsize=10,height=0.25,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:203324,message,message,203324,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['message'],['message']
Integrability,"h must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type; Union[bool, Tuple[bool, str]]. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:29249,message,message,29249,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['message'],['message']
Integrability,"h those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, CheMPS2 has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whethe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:1450,depend,dependent,1450,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['depend'],['dependent']
Integrability,"h; Section author: Lori A. Burns. PSI4, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without gau2grid. Installation¶; Binary. gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). If using the PSI4 binary, gau2grid has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; gau2grid can be obtained through conda install gau2grid -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. Previous bullet had details. To build PSI4 from source and use; gau2grid from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html:1285,depend,dependent,1285,psi4manual/1.2.1/gau2grid-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/gau2grid-1.html,4,['depend'],['dependent']
Integrability,"handler(True, label, pass_message, return_message, quiet). if np.iscomplexobj(expected):; dtype = np.complex; else:; dtype = float. try:; xptd, cptd = np.array(expected, dtype=dtype), np.array(computed, dtype=dtype); except Exception:; return return_handler(; False, label, f""""""\t{label}: inputs not cast-able to ndarray of {dtype}."""""", return_message, quiet; ). if xptd.shape != cptd.shape:; return return_handler(; False,; label,; f""""""\t{label}: computed shape ({cptd.shape}) does not match ({xptd.shape})."""""",; return_message,; quiet,; ) # lgtm: [py/syntax-error]. digits1 = abs(int(np.log10(atol))) + 2; digits_str = f""to atol={atol}""; if rtol > 1.0e-12:; digits_str += f"", rtol={rtol}"". isclose = np.isclose(cptd, xptd, rtol=rtol, atol=atol, equal_nan=equal_nan); allclose = bool(np.all(isclose)). if not allclose and equal_phase and hasattr(cptd, ""__neg__""):; n_isclose = np.isclose(-cptd, xptd, rtol=rtol, atol=atol, equal_nan=equal_nan); allclose = bool(np.all(n_isclose)). if allclose:; message = pass_message. else:; if xptd.shape == ():; xptd_str = f""{float(xptd):.{digits1}f}""; else:; xptd_str = np.array_str(xptd, max_line_width=120, precision=12, suppress_small=True); xptd_str = ""\n"".join("" "" + ln for ln in xptd_str.splitlines()). if cptd.shape == ():; cptd_str = f""{float(cptd):.{digits1}f}""; else:; cptd_str = np.array_str(cptd, max_line_width=120, precision=12, suppress_small=True); cptd_str = ""\n"".join("" "" + ln for ln in cptd_str.splitlines()). diff = cptd - xptd; if xptd.shape == ():; diff_str = f""{float(diff):.{digits1}f}""; message = """"""\t{}: computed value ({}) does not match ({}) {} by difference ({})."""""".format(; label, cptd_str, xptd_str, digits_str, diff_str; ); else:; diff[isclose] = 0.0; diff_str = np.array_str(diff, max_line_width=120, precision=12, suppress_small=False); diff_str = ""\n"".join("" "" + ln for ln in diff_str.splitlines()); with np.errstate(divide=""ignore"", invalid=""ignore""):; diffrel = np.divide(diff, xptd); np.nan_to_num(diffrel, copy=False); di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:4037,message,message,4037,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['message'],['message']
Integrability,"hannel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:21755,depend,dependency,21755,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['depend'],['dependency']
Integrability,"haracter symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. coord(self, arg0); Returns ith coordinate this shell is on. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. coord(self: psi4.core.GaussianShell, arg0: int) → float¶; Returns ith coordinate this shell is on. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html:1457,contract,contraction,1457,psi4manual/master/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html,1,['contract'],['contraction']
Integrability,"has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]; class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:2772,message,message,2772,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"hat the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying; DF_BASIS_CC as “CHOLESKY”. CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as “CD”. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; df_basis_cc cholesky; basis aug-cc-pvdz; freeze_core true; }; energy('df-ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. ). Gn theory¶; The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]. The G2 procedure may be called through the; energy() wrapper:; energy('gaussian-2'). Supported methods¶; The various methods supported by the FNOCC module in PSI4 are detailed; in Table FNOCC Methods. Note that these methods; are implemented for closed-shell references only. For open-shell references,; the calls energy('mp2.5'), energy('mp3'), and energy('mp4') will; default to the DETCI implementations of these methods. name; calls method. qcisd; quadratic configuration interaction singles doubles. qcisd(t); qcisd with perturbative triples. mp2.5; average of second- and third-order perturbation theories. mp3; third-order perturbation theory. mp4(sdq); fourth-order perturbation theory, minus triples contribution. mp4; full fourth-order perturbation theory. cepa(0); coupled electron pair approximation, variant 0. cepa(1); coupled electron pair approximation, variant 1. cepa(3); coupled electron pair approximation, variant 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled-cluster. sdci; configuration in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/fnocc-1.html:9971,wrap,wrapper,9971,psi4manual/4.0b5/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/fnocc-1.html,2,['wrap'],['wrapper']
Integrability,"have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the coupled set of; eqations:. (5); The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, , with generalized shifts for the; doubles and singles equations, and :. (6); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in Ref. [DePrince:2013:inpress].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/fnocc-1.html:7241,depend,depend,7241,psi4manual/4.0b5/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/fnocc-1.html,2,['depend'],['depend']
Integrability,"have chosen the intermediate normalization, . The CISD correlation energy is given by. (4); and the amplitudes can be determined by the solution to the coupled set of; eqations:. (5); The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, , with generalized shifts for the; doubles and singles equations, and :. (6); These shifts approximate the effects of triple and quadruple excitations.; The values for and used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method. sdci. dci. NA. cepa(0); 0; 0. cepa(1). cepa(3). acpf. aqcc. The pair correlation energy, , is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7); Methods whose shifts ( and ) do not; explicitly depend on orbitals or (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) or resolution of the identity (RI) techniques are; popular in quantum chemistry to avoid the computation and storage of the; 4-index electron repulsion integral (ERI) tensor and even to reduce the; computational scaling of some terms. DF-CCSD(T) computations are; available in PSI4, with or without the use of FNOs, through the FNOCC; module. The implementation and accuracy of the DF-CCSD(T) method are; described in Ref. [DePrince:2013:inprep].; The default auxiliary basis set for a DF-CCSD computation is chosen to be; the RI set (optimized for DFMP2) most similar to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/fnocc-1.html:7203,depend,depend,7203,psi4manual/4.0b4/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/fnocc-1.html,2,['depend'],['depend']
Integrability,"he CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:19415,interface,interface,19415,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['interface'],['interface']
Integrability,"he Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". __all__ = [; ""ConvergenceError"",; ""MissingMethodError"",; ""ManagedMethodError"",; ""OptimizationConvergenceError"",; ""ParsingError"",; ""PastureRequiredError"",; ""PsiException"",; ""SCFConvergenceError"",; ""TDSCFConvergenceError"",; ""TestComparisonError"",; ""UpgradeHelper"",; ""ValidationError"",; ""docs_table_link"",; ""sanitize_method"",; ]. from typing import Any, Dict, List, Optional. from psi4 import core, extras. [docs]; class PsiException(Exception):; """"""Error class for |PSIfour|. Flags success as False (triggering coffee).""""""; extras._success_flag_ = False. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html:1988,message,message,1988,psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,2,['message'],['message']
Integrability,"he basis; option for the scope of the current calculation, energy(""hf3c/"").; A few practical examples:. HF-3c single point with default minix basis; 1energy('hf3c'). PBEh-3c optimization with default def2-mSVP basis; 1optimize('pbeh3c'). HF-3c with non-standard basis; 1; 2set basis cc-pvdz; energy('hf3c'). PBEh-3c with default basis after basis set; 1; 2set basis cc-pvdz; energy('pbeh3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the gcp program can be run independently of the scf; through the python function run_gcp(). (This function; is the same PSI4/gcp interface that is called during an scf job.); This route is much faster than running a HF or DFT energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). qcdb.interface_gcp.run_gcp(self, func=None, dertype=None, verbose=False)[source]¶; Function to call Grimme’s GCP program; https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/gcp; to compute an a posteriori geometrical BSSE correction to self for; several HF, generic DFT, and specific HF-3c and PBEh-3c method/basis; combinations, func. Returns energy if dertype is 0, gradient; if dertype is 1, else tuple of energy and gradient if dertype; unspecified. The gcp executable must be independently compiled and; found in PATH or PSIPATH. self may be either a; qcdb.Molecule (sensibly) or a psi4.Molecule (works b/c psi4.Molecule; has been extended by this method py-side and only public interface; fns used) or a string that can be instantiated into a qcdb.Molecule. table of contents. Interface to gCP by S. Grimme; Installation; Running gCP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/gcp-1.html:3515,interface,interface,3515,psi4manual/1.3.2/gcp-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/gcp-1.html,2,['interface'],['interface']
Integrability,"he cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html:17379,wrap,wrapper,17379,psi4manual/1.2.1/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html,2,['wrap'],['wrapper']
Integrability,"he center it is on. function_to_shell(self: psi4.core.BasisSet, arg0: int) → int; docstring. genbas(self: psi4.core.BasisSet) → str; Returns basis set per atom in CFOUR format. has_puream(self: psi4.core.BasisSet) → bool; Spherical harmonics?. make_filename(arg0: str) → str; Returns filename for basis name: pluses, stars, parentheses replaced and gbs extension added. max_am(self: psi4.core.BasisSet) → int; Returns maximum angular momentum used. max_function_per_shell(self: psi4.core.BasisSet) → int; docstring. max_nprimitive(self: psi4.core.BasisSet) → int; docstring. molecule(self: psi4.core.BasisSet) → psi4.core.Molecule; docstring. name(self: psi4.core.BasisSet) → str; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, arg0: int) → int; docstring. print_detail_out(self: psi4.core.BasisSet) → None; docstring. print_out(self: psi4.core.BasisSet) → None; docstring. shell(*args, **kwargs); Overloaded function. shell(self: psi4.core.BasisSet, arg0: int) -> psi4.core.GaussianShell. docstring. shell(self: psi4.core.BasisSet, arg0: int, arg1: int) -> psi4.core.GaussianShell. docstring. shell_to_ao_function(self: psi4.core.BasisSet, arg0: int) → int; docstring. shell_to_basis_function(self: psi4.core.BasisSet, arg0: int) → int; docstring. shell_to_center(self: psi4.core.BasisSet, arg0: int) → int; docstring. zero_ao_basis_set() → psi4.core.BasisSet; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. Navigation. Index. modules    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.basisset.html:5983,contract,contractions,5983,psi4manual/1.1.0/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.basisset.html,1,['contract'],['contractions']
Integrability,"he implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with non-generic exceptions classes."""""". from psi4 import core, extras. [docs]class PsiException(Exception):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:1721,message,message,1721,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,3,['message'],['message']
Integrability,"he irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. save(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.Vector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a NumPy array. Either copies the data or simply; constructs a view. Parameters. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns; Returns either a list of np.array’s or the base array depending on options. Return type; numpy.ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Vector.html:5564,depend,depending,5564,psi4manual/1.6.x/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.Vector.html,1,['depend'],['depending']
Integrability,"he left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly. References; ----------; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, ""An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules."" J. Chem. Phys.,; 109, 8218 (1998); """""". nk = nroot. iter_info = {; ""count"": 0,; ""res_norm"": np.zeros((nk)),; ""val"": np.zeros((nk)),; ""delta_val"": np.zeros((nk)),. # conv defaults to true, and will be flipped when a non-conv root is hit; ""conv"": True,; ""nvec"": 0,; ""product_count"": 0,; }; print_name = ""HamiltonianSolver""; title_lines = [""Generalized Hamiltonian Solver"", ""By Andrew M. James""]. _diag_print_heading(title_lines, print_name, max_ss_size, nroot, r_convergence, maxiter, verbose). vecs = guess; best_L = []; best_R = []; best_vals = []; stats = []; while iter_info['count'] < maxiter:. # increment iteration/ save old vals; iter_info['count'] += 1; old_w = iter_info['val'].copy(). # reset flags; iter_info['collapse'] = False; iter_info['done'] = True. # get subspace dimension; l = len(vecs); iter_info['nvec'] = l. # check if subspace dimension has exceeded limits; if l >= max_ss_size:; iter_info['collapse'] ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:27291,depend,dependent,27291,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,4,['depend'],['dependent']
Integrability,"he listed SCF extrapolation procedures.; Has no effect on others, including :py:func:`~xtpl_highest_1` and :py:func:`~scf_xtpl_helgaker_3`. .. hlist::; :columns: 1. * :py:func:`scf_xtpl_helgaker_2`; * :py:func:`scf_xtpl_truhlar_2`; * :py:func:`scf_xtpl_karton_2`. :type corl_alpha: float. Overrides the default \alpha parameter used in the listed :py:func:`corl_xtpl_helgaker_2` correlation; extrapolation to the corl stage. The supplied \alpha does not impact delta or any further stages. .. hlist::; :columns: 1. * :py:func:`corl_xtpl_helgaker_2`. :type delta_alpha: float. Overrides the default \alpha parameter used in the listed; :py:func:`corl_xtpl_helgaker_2` correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different \alpha might; be more appropriate. .. hlist::; :columns: 1. * :py:func:`corl_xtpl_helgaker_2`. * Combined interface. :type cbs_metadata: list of dicts. This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. * ```wfn```: typically ```HF```, which is subsumed in correlated methods anyway.; * ```basis```: basis set, can be in a bracketed form (eg. ```cc-pv[tq]z```). Other supported arguments for the first dictionary are:. * ```scheme```: scf extrapolation scheme function, by default it is worked out from the number of; basis sets (1 - 3) supplied as ```basis```.; * ```alpha```: alpha for the above scheme, if the default is to be overriden; * ```options```: if special options are required for a step, they should be entered as a dict here.; This is helpful for calculating all electron corrections in otherwise frozen core calculations, or; relativistic (DKH) Hamiltionian corrections for otherwise 2-component Hamiltonians.; * ```treatment```: treat extrapolation stage as ```scf``` or ```corl```, by default only the first; s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:41920,interface,interface,41920,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['interface'],['interface']
Integrability,"he molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:7364,interface,interface,7364,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['interface'],['interface']
Integrability,"he molecule is supplied in Psi4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; Psi4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:7377,interface,interface,7377,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['interface'],['interface']
Integrability,"he output file plus the name of the current molecule. Type: boolean; Default: false. PRINT_BASIS¶. Do print the basis set?. Type: boolean; Default: false. PRINT_MOS¶. Do print the molecular orbitals?. Type: boolean; Default: false. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. REFERENCE¶. Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. SAVE_JK¶. Keep JK object for later use?. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES¶. SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: doub",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:3053,depend,dependencies,3053,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,2,['depend'],['dependencies']
Integrability,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:36425,wrap,wrappers,36425,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['wrap'],['wrappers']
Integrability,"he symmetry keyword can be used when inputting the molecule; (see Sec. Molecule Specification). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with symmetry in , the; axis can be chosen as either the , the , or the ; these can; be specified by requesing the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For symmetry the labels csx, csy, and; csz request the , , and planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the ; state of water cation, we can specify. SOCC = [0, 0, 1, 0]; in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:. SOCC = [0, 1]; Some caution is required, however. The state can be obtained with; the. SOCC = [1, 0, 0, 0]; specification, which would become. SOCC = [1, 0]; under the above-mentioned reduction in symmetry. The state,; whose singly-occupied orbitals are. SOCC = [0, 0, 0, 1]; would be mapped to. SOCC = [1, 0]; which is the same occupation as the state. In this case, the; state is lower in energy, and is not problematic. The distorted; geometries for the state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these sta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html:11737,depend,dependent,11737,psi4manual/4.0b2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html,4,['depend'],['dependent']
Integrability,"header includes and (2) no binary PSI4 module (as; opposed to library PSI4 module with the AddOn target linked; is itself a direct dependency of target core. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. psi4/psi4/src/psi4/; If a module is needed to interface the AddOn to PSI4, try to; put “interface” in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in CMake files or #ifdef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/psi4/external/upstream/; Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/psi4/common/ are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; psi4/external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/; In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:3685,depend,dependencies,3685,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,6,['depend'],['dependencies']
Integrability,"hed by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; from psi4.driver import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html:1495,wrap,wrappers,1495,psi4manual/1.1.0/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/aliases.html,1,['wrap'],['wrappers']
Integrability,"helgaker_2'). energy('mp2/cc-pv[dt]z'). # all equivalent. psi4.energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). psi4.energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,. PSIthonPsiAPIdatabase('mp2', 'S22', cp=1, benchmark='S22B'). psi4.wrapper_database.database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:18033,wrap,wrapper,18033,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['wrap'],['wrapper']
Integrability,"helium tetramer. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. scf-occ; force occupations in scf. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. mbis-1; MBIS calculation on H2O. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pubchem2; Superficial test of PubChem interface. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints9; A test of the basis specification. Various basis sets are specified outright and in b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:34351,interface,interface,34351,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['interface'],['interface']
Integrability,"hell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/tutorial-1.html:6305,message,message,6305,psi4manual/1.4.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/tutorial-1.html,9,['message'],['message']
Integrability,"hell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; -------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/tutorial-1.html:6268,message,message,6268,psi4manual/1.1.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/tutorial-1.html,6,['message'],['message']
Integrability,"hem level.; client (Optional[FractalClient]) – QCFractal client if using QCArchive for distributed compute. Returns; When the ManyBodyComputer specifies a single model chemistry level (see self.nbodies_per_mc_level), the; return is a dictionary, nbody_results, described in the table below. Many of the items are actually filled; by successive calls to assemble_nbody_components(). When multiple model chemistry levels are specified, this; function diverts its return to driver_nbody_multilevel.prepare_results() wherein each mc level calls this; function again and collects separate nbody_results dictionaries and processes them into a final return that; is a small subset of the table below. Return type; nbody_results. ptype_size = (1,)/(nat, 3)/(3 * nat, 3 * nat)e/g/h := energy or gradient or Hessian; rtd := return_total_data. item; size; present / zeroed; contents / interpretation. ret_ptype; ptype_size; always. interaction data requested: IE or total (depending on return_total_data) e/g/h (depending on driver)with cp/nocp/vmfc treatment (depending on 1st of bsse_type). ret_energy; 1; always; interaction energy: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type). ret_gradient; (nat, 3); when driver is g/h; interaction gradient: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type. ret_hessian; (nat * 3, nat * 3); when driver is h; interaction Hessian: IE or total (depending on return_total_data) w/ cp/nocp/vmfc treat. (dep. on 1st of bsse_type). nbody; >=1; always; energy n-body QCVariables to be set.   CP-CORRECTED TOTAL ENERGY THROUGH 1-BODY;   1; when cp in bsse_type; MBE sum of subsystems of 1-body. summed are total energies with cp treatment.   CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY;   1; when cp in bsse_type & max_nbody>=2; MBE sum of subsystems of 2-body or fewer (cumulative); summed are total energies with cp treatment.   CP-CORRECTED TOTAL ENERGY THROUGH {nb}-BODY;   1; when cp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/nbody.html:9905,depend,depending,9905,psi4manual/1.6.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/nbody.html,3,['depend'],['depending']
Integrability,"hese shifts approximate the effects of triple and quadruple excitations.; The values for \(\Delta_{ij}\) and \(\Delta_i\) used in several; coupled-pair methods are given in Table CEPA Shifts. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. method; \(\Delta_{ij}\); \(\Delta_i\). cisd; \(E_c\); \(E_c\). cepa(0); 0; 0. cepa(1); \(\frac{1}{2}\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(\sum_k \epsilon_{ik}\). cepa(3); \(-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})\); \(-\epsilon_{ii}+2\sum_k \epsilon_{ik}\). acpf; \(\frac{2}{N} E_c\); \(\frac{2}{N} E_c\). aqcc; \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\); \([1-\frac{(N-3)(N-2)}{N(N-1)}]E_c\). The pair correlation energy, \(\epsilon_{ij}\), is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. (7)¶\[\epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba})\]; Methods whose shifts (\(\Delta_{ij}\) and \(\Delta_i\)) do not; explicitly depend on orbitals \(i\) or \(j\) (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster¶; Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fnocc-1.html:9879,depend,depend,9879,psi4manual/1.1.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fnocc-1.html,15,['depend'],['depend']
Integrability,"hest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""; fchk_ref = _fchkfile_to_string(expected).splitlines(); fchk_calc = _fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:3649,message,messages,3649,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,4,['message'],['messages']
Integrability,"hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). >>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and core.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:56951,wrap,wrapper,56951,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['wrap'],['wrapper']
Integrability,"hich may occur; for large systems or for systems where diffuse basis sets are used.; This problem may be avoided by using canonical orthogonalization, in; which an asymmetric inverse square root of the overlap matrix is; formed, with numerical stability enhanced by the elimination of; eigenvectors corresponding to very small eigenvalues. As a few; combinations of AO basis functions may be discarded, the number of; canonical-orthogonalized OSOs and MOs may be slightly smaller than the; number of AOs.; When the basis set is too overcomplete, the eigendecomposition of the; overlap matrix is no longer numerically stable. In this case the; partial Cholesky decomposition can be used to pick a subset of basis; functions that span a sufficiently complete set, see; [Lehtola:2019:241102] and [Lehtola:2020:032504]. This subset can then; be orthonormalized as usual; the rest of the basis functions are; hidden from the calculation. The Cholesky approach allows reaching; accurate energies even in the presence of significant linear; dependencies [Lehtola:2020:04224].; In PSI4, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; option S_TOLERANCE, which defaults to 1E-7. If the smallest; eigenvalue is below this cutoff, canonical orthogonalization is; forced, and all eigenvectors corresponding to eigenvalues below the; cutoff are eliminated.; If the eigendecomposition is detected to be numerically unstable - the; reciprocal condition number of the overlap matrix to be smaller than; the machine epsilon - the partial Cholesky decomposition is undertaken; until S_CHOLESKY_TOLERANCE, which defaults to 1E-8.; Use of symmetric, canonical, and partial Cholesky orthogonalization; can be forced by setting the S_ORTHOGONALIZATION option to; SYMMETRIC, CANONICAL, or PARTIALCHOLESKY,; respectively.; Note that in practice, the MOs and OSOs are built separately within; each irrep from the symmetry-adapted combinations of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:13139,depend,dependencies,13139,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,6,['depend'],['dependencies']
Integrability,"hich may occur; for large systems or for systems where diffuse basis sets are used.; This problem may be avoided by using canonical orthogonalization, in; which an asymmetric inverse square root of the overlap matrix is; formed, with numerical stability enhanced by the elimination of; eigenvectors corresponding to very small eigenvalues. As a few; combinations of AO basis functions may be discarded, the number of; canonical-orthogonalized OSOs and MOs may be slightly smaller than the; number of AOs.; When the basis set is too overcomplete, the eigendecomposition of the; overlap matrix is no longer numerically stable. In this case the; partial Cholesky decomposition can be used to pick a subset of basis; functions that span a sufficiently complete set, see; [Lehtola:2019:241102] and [Lehtola:2020:032504]. This subset can then; be orthonormalized as usual; the rest of the basis functions are; hidden from the calculation. The Cholesky approach allows reaching; accurate energies even in the presence of significant linear; dependencies [Lehtola:2020:134108].; In PSI4, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; option S_TOLERANCE, which defaults to 1E-7. If the smallest; eigenvalue is below this cutoff, canonical orthogonalization is; forced, and all eigenvectors corresponding to eigenvalues below the; cutoff are eliminated.; If the eigendecomposition is detected to be numerically unstable - the; reciprocal condition number of the overlap matrix to be smaller than; the machine epsilon - the partial Cholesky decomposition is undertaken; until S_CHOLESKY_TOLERANCE, which defaults to 1E-8.; Use of symmetric, canonical, and partial Cholesky orthogonalization; can be forced by setting the S_ORTHOGONALIZATION option to; SYMMETRIC, CANONICAL, or PARTIALCHOLESKY,; respectively.; Note that in practice, the MOs and OSOs are built separately within; each irrep from the symmetry-adapted combinations of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:13141,depend,dependencies,13141,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,3,['depend'],['dependencies']
Integrability,"hing (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6 or 3.7) https://www.python.org/; CMake (3.8+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]; QCElemental — [what is this?]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff; pint https://pint.readthedocs.io/en/latest/; pydantic (depending on your QCElemental version) https://pydantic-docs.helpmanual.io/#. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:5060,depend,dependencies,5060,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['depend'],['dependencies']
Integrability,"hod known as ‘Gold Standard’; in the Sherrill group. Uses the composite wrapper to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). Return type; List[Dict[str, Any]]. Additional composite aliases are easy to define",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:31383,wrap,wrapper,31383,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,1,['wrap'],['wrapper']
Integrability,"home/user/psiadditions:/home/user/gbs. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIPATH=/home/user/psiadditions:/home/user/gbs. PYTHONPATH¶; Path in which the Python interpreter looks for modules to import. For; PSI4, these are generally plugins or databases. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PYTHONPATH is preferred for; Python moduels to accommodate QCEngine. Modification of PYTHONPATH can be done in three ways, equivalently. Normal Linux shell commands.; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH /home/user/psiadditions:$PYTHONPATH. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH=/home/user/psiadditions:$PYTHONPATH. Place the path in the ~/.psi4rc file so that it is available for; every PSI4 instance.; sys.path.insert(0, '/home/user/psiadditions'). Place the path in the input file, either absolute or relative.; sys.path.insert(0, '../../psiadditions'); sys.path.insert(0, '/home/user/psiadditions'). PSIDATADIR¶; Path in which the PSI4 executable looks for its non-compiled; dependencies (i.e., basis sets, databases, quadratures, etc.).; This path is always known by the PSI4 program or shared library,; so this variable is relevant primarily to developers wanting a; non-standard location. Value should be set; to directory containing driver, basis, etc. directories, generally; ending in share/psi4. table of contents. Installation and Runtime Configuration; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external.html:24267,depend,dependencies,24267,psi4manual/master/external.html,https://psicode.org,https://psicode.org/psi4manual/master/external.html,1,['depend'],['dependencies']
Integrability,"hon Functions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/notes_py.html:1384,wrap,wrapped,1384,psi4manual/1.8.x/notes_py.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/notes_py.html,2,['wrap'],['wrapped']
Integrability,"hon Functions: Invoking a Calculation; Notes on Options. Notes on Options¶. Note; The Python options referred to in the Psithon Functions: Invoking a Calculation section below; are placed as arguments to a Python; function (like energy()), not in set blocks or commands. Note; All PSI4 keyword names and values are insensitive to case, both; those that are placed in set blocks and as Python function arguments.; The one exception is documented for the subset option in the database(); function, where case structure must match the database file. Note; Boolean options can be specified by yes, on, true, or 1; for affirmative and no, off, false, or 0 for negative,; all insensitive to case. Note; The derivative level type for optimize() and frequency() functions can be specified by energy, none, or 0 for 0th derivative, gradient, first, or 1 for 1st derivative, and hessian, second, or 2 for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the POINTS option can be increased to 5 for greater accuracy at increased cost. Note; Function option for the Psithon function called by the current function;; the default is usually energy(). See Sec. Function Intercalls; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. Note; The molecule to be acted upon by the current function; the default is the; “active” molecule, which is the nearest preceeding molecule declared in a; molecule mymol {...} block or in an activate(mymol) statement. Note; that the value of this keyword (mymol in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; Molecule object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Notes on Options. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/notes_py.html:1384,wrap,wrapped,1384,psi4manual/1.9.x/notes_py.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/notes_py.html,2,['wrap'],['wrapped']
Integrability,"hon into standard Python. Particularly, forms PsiMod; module calls that access the C++ side of Psi4. """"""; import PsiMod; from pubchem import getPubChemResults, PubChemObj; import re; import os; import sys; from psiexceptions import *. [docs]def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; raise ValidationError('Unsupported syntax:\n\n%s\n\n' % (line)). [docs]def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if(dollar):; # This is a python variable, make sure that it starts with a letter; if(re.match(r'^[A-Za-z][\w]*', val)):; return val; else:; print(""Invalid Python variable: %s"" % val); sys.exit(1); elif(re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val)):; # This must be a number, don't wrap it in quotes; return val; elif(re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val)):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % val. [docs]def quotify(string):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar signs from python variables; wordre = re.compile(r'(([$]?)([-+()*.\w\""\']+))'); string = wordre.sub(process_word_quotes, string); return string. [docs]def process_option(spaces, module, key, value, line):; """"""Function to process a line with set or in a set block; into global/local domain and keyword/value. """"""; value = quotify(value.strip()); temp = """". global_options = False; module = module.upper(); if(module == ""GLOBALS"" or module == ""GLOBAL"" or module == """" or module.isspace()):; global_options = True. if(global_options):; # If it's really a global, we need slightly different syntax; return spaces + ""PsiMod.set_global_option(\""%s\"", %s)\n"" % (key, value); else:; # It's a local ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/input.html:1297,wrap,wrapped,1297,psi4manual/4.0b3/_modules/input.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/input.html,2,['wrap'],['wrapped']
Integrability,"hor: M. A. L. Marques and Micael Oliveira; Section author: Lori A. Burns. PSI4, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, PSI4; cannot build without Libxc. Installation¶; Binary. Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, Libxc has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; Libxc can be obtained through conda install libxc -c psi4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect Libxc and activate dependent code. To remove a conda installation, conda remove libxc. Source. Note that PSI4 has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. If using PSI4 built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. How to configure Libxc for building Psi4¶; Role and Dependencies. Role — In PSI4, Libxc is a library that provides essential; density functional definitions and compositions.; Downstream Dependencies — PSI4 \(\Leftarrow\) Libxc; Upstream Dependencies — Libxc \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing include/libxc/xc.h; Libxc_DIR — CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing share/cmake/Libxc/LibxcConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_Libxc — CMake variable to force internal build of Libxc instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_Libxc — CMake variable to force detecting pre-built Libxc and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/libxc-1.html:1302,depend,dependent,1302,psi4manual/1.4.0/libxc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/libxc-1.html,9,['depend'],['dependent']
Integrability,"hrough triples with iterative quadruples (cheapest terms). ccsdtqp-1a; CC through quadruples with iterative quintuples (cheapest terms). ccsdtqph-1a; CC through quintuples with iterative sextuples (cheapest terms). ccsdt-1b; CC through doubles with iterative triples (cheaper terms). ccsdtq-1b; CC through triples with iterative quadruples (cheaper terms). ccsdtqp-1b; CC through quadruples with iterative quintuples (cheaper terms). ccsdtqph-1b; CC through quintuples with iterative sextuples (cheaper terms). cc2; approximate CC through doubles [details]. cc3; approximate CC through triples [details]. cc4; approximate CC through quadruples. cc5; approximate CC through quintuples. cc6; approximate CC through sextuples. ccsdt-3; CC through doubles with iterative triples (all but the most expensive terms). ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule H2O {; O; H 1 r; H 1 r 2 104.5. r = 1.0; }. set {; basis cc-pVDZ; freeze_core true; }. optimize('ccsdt'). Interface Details¶. MRCC methods¶. MRCC_METHOD; Method; Description. 1; CC. 2; CC(n-1)[n]. 3; CC(n-1)(n); (CC(n-1)[n] energy is also calculated). 4; CC(n-1)(n)_L; (CC(n-1)[n] and CC(n-1)(n) energies are also calculated). 5; CC(n)-1a. 6; CC(n)-1b. 7; CCn. 8; CC(n)-3. table of contents. Interface to MRCC by M. Kállay; Installation; Running MRCC; Interface Details. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to MRCC by M. Kállay. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/mrcc.html:4636,interface,interface,4636,psi4manual/1.7.x/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/mrcc.html,1,['interface'],['interface']
Integrability,"http://www.psicode.org/psi4manual/master/scf.html#convergence-and-; algorithm-defaults. SCF will be converged more tightly if a post-SCF; method is select (pscf_Ec, and pscf_Dc) else the looser (scf_Ec, and; scf_Dc convergence criterion will be used). ptype - Procedure type (energy, gradient, etc). Nearly always test on; procedures['energy'] since that's guaranteed to exist for a method.; method_name - Name of the method; scf_Ec - E convergence criterion for scf target method; pscf_Ec - E convergence criterion for scf of post-scf target method; scf_Dc - D convergence criterion for scf target method; pscf_Dc - D convergence criterion for scf of post-scf target method; gen_Ec - E convergence criterion for post-scf target method. """"""; optstash = p4util.OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Kind of want to move this out of here; _method_exists(ptype, method_name). if verbose >= 2:; print(' Setting convergence', end=' '); # Set method-dependent scf convergence criteria, check against energy routines; if not psi4.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][method_name] in [proc.run_scf, proc.run_dft]:; psi4.set_local_option('SCF', 'E_CONVERGENCE', scf_Ec); if verbose >= 2:; print(scf_Ec, end=' '); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', pscf_Ec); if verbose >= 2:; print(pscf_Ec, end=' '); else:; if verbose >= 2:; print('CUSTOM', psi4.get_option('SCF', 'E_CONVERGENCE'), end=' '). if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][method_name] in [proc.run_scf, proc.run_dft]:; psi4.set_local_option('SCF', 'D_CONVERGENCE', scf_Dc); if verbose >= 2:; print(scf_Dc, end=' '); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', pscf_Dc); if verbose >= 2:; print(pscf_Dc, end=' '); else:; if verbose >= 2:; print('CUSTOM', psi4.get_option('SCF', 'D_CONVERGENCE'), end=' '). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_util.html:2900,depend,dependent,2900,psi4manual/1.0.0/_modules/driver_util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_util.html,2,"['depend', 'rout']","['dependent', 'routines']"
Integrability,"https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/lat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:6445,message,message,6445,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['message'],['message']
Integrability,"https://github.com/psi4/psi4. CompilersPSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. PythonPSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; The future plan is to support the two or three latest Python versions.; The current master supports 3.8, 3.9, and 3.10. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO 9; FNO 1; DLPNO. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded. DFT, PBEh-3c; RKS/UKS; CONV/DF/CD 7; RKS/UKS; DF 4; threaded. EFP 5; RHF. —; —. DCT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded. MP2 10; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded 3; E/G. E. MP3 10; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded 3; E/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/introduction.html:23365,depend,dependencies,23365,psi4manual/1.6.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/introduction.html,1,['depend'],['dependencies']
Integrability,"i4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. Environment Variables¶; These environment variables will influence PSI4‘s behavior. CONDA_PREFIX¶; Set when a conda environment is activated. Note that if PSI4 has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. HOST¶; Set when a conda environment with conda compilers is activated. Used; when compatibly building PSI4 from source against conda; dependencies. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PATH is preferred for; executables to accommodate QCEngine. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 executable must be in PATH. PSI_SCRATCH¶; Directory where scratch files are written. Overrides settings in ~/.psi4rc.; It is very important to ensure that PSI4 is writing its scratch files; to a disk drive physically attached to the computer running the computation.; If it is not, it will significantly slow down the program and the network.; Modify PSI_SCRATCH through normal Linux shell commands before invoking psi4; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /scratch/user. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/scratch/user. PSIPATH¶; Path in which PSI4 looks for user ext",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:20946,interface,interfaced,20946,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,9,['interface'],['interfaced']
Integrability,"i4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerful feature of Psi4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2','S22',cp=1,benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Previous topic; A Psi4 Tutorial; Next topic; Molecule and Geometry Specification. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:15371,wrap,wrapper,15371,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['wrap'],['wrapper']
Integrability,"i4.; Then, hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect gau2grid and activate dependent code. To remove a conda installation, conda remove gau2grid. Source. If using PSI4 built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. How to configure gau2gridfor building Psi4¶; Role and Dependencies. Role — In PSI4, gau2grid is a library that provides essential; grid operations for DFT.; Downstream Dependencies — PSI4 \(\Leftarrow\) gau2grid; Upstream Dependencies — gau2grid \(\Leftarrow\) None. CMake Variables. CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing include/gau2grid/gau2grid.h; gau2grid_DIR — CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing share/cmake/gau2grid/gau2gridConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_gau2grid — CMake variable to force internal build of gau2grid instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_gau2grid — CMake variable to force detecting pre-built gau2grid and not falling back on internal build. Examples. Build bundled. >>> cmake. Link against pre-built. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. Build bundled despite pre-built being detectable. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. table of contents. Interface to gau2grid by D. G. A. Smith; Installation; How to configure gau2gridfor building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to gau2grid by D. G. A. Smith. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/gau2grid.html:2391,depend,dependencies,2391,psi4manual/1.7.x/gau2grid.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/gau2grid.html,1,['depend'],['dependencies']
Integrability,"i4.core.BasisSet, arg0: str, arg1: psi4.core.Molecule) → int; Returns the number of orbital (non-ECP) frozen core electrons. For a given molecule and |globals__freeze_core|, (n_ecp_core()/2 + n_frozen_core()) = constant. name(self: psi4.core.BasisSet) → str; Callback handle, may represent string or function. nao(self: psi4.core.BasisSet) → int; Returns number of atomic orbitals (Cartesian). nbf(self: psi4.core.BasisSet) → int; Returns number of basis functions (Cartesian or spherical depending on has_puream). nprimitive(self: psi4.core.BasisSet) → int; Returns total number of primitives in all contractions. nshell(self: psi4.core.BasisSet) → int; Returns number of shells. nshell_on_center(self: psi4.core.BasisSet, i: int) → int; Return the number of shells on a given center. print_detail_out(self: psi4.core.BasisSet) → None; Prints detailed basis set info to outfile. print_out(self: psi4.core.BasisSet) → None; Prints basis set info to outfile. shell(*args, **kwargs); Overloaded function. shell(self: psi4.core.BasisSet, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell. shell(self: psi4.core.BasisSet, center: int, si: int) -> psi4.core.GaussianShell. Return the si’th Gaussian shell on center. shell_to_ao_function(self: psi4.core.BasisSet, i: int) → int; Return the function number for the first function for the i’th shell. shell_to_basis_function(self: psi4.core.BasisSet, i: int) → int; Given a shell return its first basis function. shell_to_center(self: psi4.core.BasisSet, i: int) → int; Return the atomic center for the i’th shell. zero_ao_basis_set() → psi4.core.BasisSet; Returns a BasisSet object that actually has a single s-function at the origin with an exponent of 0.0 and contraction of 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html:9692,contract,contraction,9692,psi4manual/1.2.1/api/psi4.core.basisset.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.basisset.html,1,['contract'],['contraction']
Integrability,"i4.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; psi4.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return psi4.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; msg = '\t{0:.<66}PASSED'.format(label); print(msg); sys.stdout.flush(); psi4.print_out(msg + '\n'). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; message = (""\t%s: computed value (%.*f) does not match (%.*f) to %d decimal places."" % (label, digits+1, computed, digits+1, expected, digits)); if (abs(expected - computed) > 10 ** (-digits)):; print(message); raise TestComparisonError(message); if ( math.isnan(computed) ):; print(message); print(""\tprobably because the computed value is nan.""); raise TestComparisonError(message); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:4042,message,message,4042,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,2,['message'],['message']
Integrability,"i4/lib/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(name='mp2', **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(name='mp2', **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; BAKERJCC96; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/cbs-1.html:15752,wrap,wrapper,15752,psi4manual/4.0b5/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/cbs-1.html,2,['wrap'],['wrapper']
Integrability,"i4rc File. Note; For developers: during compilation and testing, PSI4 finds its basis sets,; grids, etc., in psi4/lib. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. IV. Recommendations for BLAS and LAPACK libraries¶; Much of the speed and efficiency of the PSI4 programs depends on the; corresponding speed and efficiency of the available BLAS and LAPACK libraries; (especially the former). In addition, the most common compilation problems; involve these libraries. Users may therefore wish to consider the following; BLAS and LAPACK recommendations when building PSI4:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat. This library is usually just the; netlib distribution and is completely unoptimized. PSI4’s; performance will suffer if you choose this route.; The choice of LAPACK is less critical, and so the unoptimized; netlib distribution is acceptable. If you do choose to use the; RedHat/Fedora stock BLAS and LAPACK, make sure that the blas-devel; and lapack-devel packages are installed. Perhaps the best choice, if you have it available, is; Intel’s MKL library, which includes BLAS and LAPACK (note: use; version 11 or later, we had difficulty with version 10 for very; large coupled-cluster computations). MKL is efficient and works; well in threaded mode.; Otherwise, the simplest choice is to use ATLAS; (http://math-atlas.sourceforge.net/), which is readily available; on all Linux distributions. Another alternative is OpenBLAS; (https://github.com/xianyi/OpenBLAS, formerly GotoBLAS). These; work well on nearly every achitecture to which the PSI4 developers; have access, though we have identified at least one case in which; the Goto libraries yielded faulty DGEMM calls. On Mac OS X; systems, the vecLib packag",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:20954,rout,route,20954,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['rout'],['route']
Integrability,"iMod.set_global_option('WFN', 'MP2'). PsiMod.deriv(). PsiMod.set_global_option('WFN', 'SCF'); PsiMod.revoke_global_option_changed('WFN'); PsiMod.set_global_option('DERTYPE', 'NONE'); PsiMod.revoke_global_option_changed('DERTYPE'). [docs]def run_ccenergy(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD, CC2, and CC3 calculation. """"""; if (name.lower() == 'ccsd'):; PsiMod.set_global_option('WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_global_option('WFN', 'CCSD_T'); elif (name.lower() == 'cc2'):; PsiMod.set_global_option('WFN', 'CC2'); elif (name.lower() == 'cc3'):; PsiMod.set_global_option('WFN', 'CC3'); elif (name.lower() == 'eom-cc2'):; PsiMod.set_global_option('WFN', 'EOM_CC2'); elif (name.lower() == 'eom-ccsd'):; PsiMod.set_global_option('WFN', 'EOM_CCSD'); # Call a plain energy('ccenergy') and have full control over options,; # incl. wfn; elif(name.lower() == 'ccenergy'):; pass. # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and input.yes.match(str(kwargs['bypass_scf']))):; run_scf('scf', **kwargs). # If the scf type is DF, then the AO integrals were never generated; if PsiMod.get_local_option('scf', 'scf_type') == 'DF':; mints = PsiMod.MintsHelper(); mints.integrals(). PsiMod.transqt2(); PsiMod.ccsort(); returnvalue = PsiMod.ccenergy(). if (name.lower() != 'ccenergy'):; PsiMod.set_global_option('WFN', 'SCF'); PsiMod.revoke_global_option_changed('WFN'). return returnvalue. [docs]def run_cc_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CCSD and CCSD(T) gradient calculation. """"""; PsiMod.set_global_option('DERTYPE', 'FIRST'). run_ccenergy(name, **kwargs); if (name.lower() == 'ccsd'):; PsiMod.set_global_option('WFN', 'CCSD'); elif (name.lower() == 'ccsd(t)'):; PsiMod.set_global_option('WFN', 'CCSD_T'). PsiMod.cchbar(); PsiMod.cclambda(); PsiMod.ccdensity(); PsiMod.deriv(). if (name.lower() != 'ccenergy'):; PsiMod.set_global_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/proc.html:8810,rout,routine,8810,psi4manual/4.0b2/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/proc.html,1,['rout'],['routine']
Integrability,"i_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2\]; For LRC functionals, the choice of range-separation parameter \(\omega\) has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the \(\omega\) is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between \(N-1\)-electron and \(N\)-electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}\]; Note that LRC functionals with default \(\omega\) only capture the; \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},\]; hybrid functionals only capture part of the \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},\]; and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0\]; IP-tuned LRC functionals effectively pin the chemical potential at \(N\); electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of exc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:11065,depend,dependence,11065,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,15,['depend'],['dependence']
Integrability,"ianShell¶. class psi4.core.GaussianShell¶; Bases: pybind11_object; Class containing information about basis functions; Attributes Summary. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. function_index; Basis function index where this shell starts. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. Methods Summary. coef(self, pi); Return coefficient of the pi'th primitive. coord(self, arg0); Returns ith coordinate this shell is on. erd_coef(self, pi); Return ERD normalized coefficient of pi'th primitive. exp(self, prim); Returns the exponent of the given primitive. is_cartesian(self); Returns true if the contraction is Cartesian. is_pure(self); Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. coord(self: psi4.core.GaussianShell, arg0: int) → float¶; Returns ith coordinate this shell is on. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html:1156,contract,contraction,1156,psi4manual/master/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.GaussianShell.html,1,['contract'],['contraction']
Integrability,"ible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ...; int n = 100;. // Allocate A matrix;; double** A = block_matrix(n,n);. // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:5112,rout,routine,5112,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,18,['rout'],['routine']
Integrability,"ible. LAPACK Wrappers¶; All standard LAPACK 3.2 double precision routines are provided.; LAPACK commands remain in Fortran’s “column-major” indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using lda = n in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that L L^T = A, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves L^T L = A. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a C_, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is double**). All routines return an int INFO with error and; calculation information specific to the routine, In Fortran, this is the; last argument in all LAPACK calls, but should not be provided as an; argument here. For char arguments, case is insensitive. A Cholesky; transform example is shown:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33// BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ...; int n = 100;. // Allocate A matrix;; d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:5236,rout,routine,5236,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,8,['rout'],['routine']
Integrability,"ic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda, so skip directions below.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; Nightly conda-builds work from master psi4. (Postrelease “practice” works from 1.N.x psi4.). Instead, switch source/git_tag from master to tag (e.g., v1.3rc1) in:. psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L. In cbcy, edit psi4ver to “v”-less tag. For releases and postreleases (not prereleases), in conda_build_config.yaml, edit ltrtver to a new non-dev label (probably a ditto) matching the release (e.g., “1.3”); Set kitandkapoodle.py to the normal *** stack. Should be (psi4, psi4-rt, psi4-dev) * python_versions for Linux & Mac. Also single psi4-docs from Linux; Run kitandkapoodle.py and allow stack to upload to anaconda.org to ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:9284,depend,dependencies,9284,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,6,['depend'],['dependencies']
Integrability,"ical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. table of contents. GaussianShell; GaussianShell; GaussianShell.AMCHAR; GaussianShell.am; GaussianShell.amchar; GaussianShell.function_index; GaussianShell.ncartesian; GaussianShell.ncenter; GaussianShell.nfunction; GaussianShell.nprimitive; GaussianShell.coef(); GaussianShell.erd_coef(); GaussianShell.exp(); GaussianShell.is_cartesian(); GaussianShell.is_pure(); GaussianShell.original_coef(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; GaussianShell. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.GaussianShell.html:2170,contract,contraction,2170,psi4manual/1.8.x/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.GaussianShell.html,2,['contract'],['contraction']
Integrability,"ical harmonic basis function. original_coef(self, pi); Return unnormalized coefficient of the pi'th primitive. Attributes Documentation. AMCHAR¶; The upper-case character symbol for the angular momentum of the given contraction. am¶; The angular momentum of the given contraction. amchar¶; The character symbol for the angular momentum of the given contraction. function_index¶; Basis function index where this shell starts. ncartesian¶; Total number of basis functions if this shell was Cartesian. ncenter¶; Returns atom number this shell is on. nfunction¶; Total number of basis functions. nprimitive¶; The number of primitive gaussians. Methods Documentation. coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. table of contents. GaussianShell; GaussianShell; GaussianShell.AMCHAR; GaussianShell.am; GaussianShell.amchar; GaussianShell.function_index; GaussianShell.ncartesian; GaussianShell.ncenter; GaussianShell.nfunction; GaussianShell.nprimitive; GaussianShell.coef(); GaussianShell.erd_coef(); GaussianShell.exp(); GaussianShell.is_cartesian(); GaussianShell.is_pure(); GaussianShell.original_coef(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; GaussianShell. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.GaussianShell.html:2170,contract,contraction,2170,psi4manual/1.9.x/api/psi4.core.GaussianShell.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.GaussianShell.html,2,['contract'],['contraction']
Integrability,"ically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through reformulating the; shell quartet screening process to scale linearly with system size.; LinK is most competitive when used with non-diffuse orbital basis sets, since orbital and density overlaps decay slower with diffuse functions.; LinK is especially powerful when combined with density-matrix based ERI screening (set SCREENING to DENSITY) and incremental Fock builds (set INCFOCK to TRUE), which decrease the number of significant two-electron integrals to calculate.; To control the LinK algorithm, here are the list of options provided. LINK_INTS_TOLERANCE: The integral screening tolerance used for sparsity-prep in the LinK algorithm. Defaults to the INTS_TOLERANCE option. Seminumerical Linear Exchange¶; Similar to the COSX algorithm provided by PSI4, the seminumerical Linear Exchange (sn-LinK) algorithm, devised; by Ochsenfeld in [Laqua:2020:1456], improves efficiency of the K construction process by; decomposing computation of the ERI tensor into a series of contractions involving grid-computed basis; function components and analytic 3-center integrals. As a “semi-numerical” Exchange construction method,; sn-LinK is also comparable to the pseudospectral method of Friesner.; sn-LinK and COSX have a number of significant differences in implementation details in PSI4, however.; First and foremost, the COSX implementation is contained within PSI4 itself, and is thus always available; for execution. On the other hand, the sn-LinK implementation in PSI4 is tied to the GauXC standalone; library discussed in [Williams-Young:2023:234104]; thus, the PSI4-GauXC interface must be built; for sn-LinK to be used. Second, the GauXC sn-LinK interface is more; efficient than the PSI4 COSX code on multiple levels. For CPU execution, GauXC’s sn-LinK uses highly-optimized; kernels for the contraction of the analytic integrals, whereas PSI4’s COSX uses a less-opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:40843,contract,contractions,40843,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['contract'],['contractions']
Integrability,"ice, block: psi4.core.Matrix) → None¶; Set a matrix block. subtract(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; Substract a matrix from this matrix. sum_of_squares(self: psi4.core.Matrix) → float¶; Returns the sum of the squares of this matrix. symmetrize_gradient(self: psi4.core.Matrix, mol: psi::Molecule) → None¶; Symmetrizes a gradient-like matrix (N,3) using information from a given molecule. symmetry(self: psi4.core.Matrix) → int¶; Returns the overall symmetry of the matrix. to_array(copy=True, dense=False)¶; Converts a Psi4 Matrix or Vector to a NumPy array. Either copies the data or simply; constructs a view. Parameters. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irreped Psi4 objects to diagonally blocked dense arrays if True. Returns a list of arrays otherwise. Returns; Returns either a list of np.array’s or the base array depending on options. Return type; numpy.ndarray. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. trace(self: psi4.core.Matrix) → float¶; Returns the trace of the matrix. transform(*args, **kwargs)¶; Overloaded function. transform(self: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform this matrix with transformer. transform(self: psi4.core.Matrix, a: psi4.core.Matrix, transformer: psi4.core.Matrix) -> None. Transform A with transformer. transpose(self: psi4.core.Matrix) → psi4.core.Matrix¶; Creates a new matrix that is the transpose of this matrix. transpose_this(self: psi4.core.Matrix) → None¶; Transpose the matrix in-place. static triplet(A, B, C, transA, transB, transC)¶; Multiply three matrices together. Deprecated since version 1.4: Use psi4.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.matrix.html:15179,depend,depending,15179,psi4manual/1.4.0/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.matrix.html,3,['depend'],['depending']
Integrability,"icense as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import re; import os; import math; import warnings; import driver_cbs; #from wrappers import *; #from gaussian_n import * # CU; #from wrappers_cfour import * # CU; #from qmmm import * # CU. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. [docs]def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :ref:`Wavefunction<sec:psimod_Wavefunction>`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html:1526,wrap,wrappers,1526,psi4manual/1.0.0/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/aliases.html,1,['wrap'],['wrappers']
Integrability,"icense for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". import os; import re; import sys; import uuid. from psi4 import core; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/inputparser.html:1867,wrap,wrapping,1867,psi4manual/1.4.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/inputparser.html,3,['wrap'],['wrapping']
Integrability,"icense for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". import re; import os; import sys; import uuid. from psi4 import core; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. """"""; # This wraps anything that looks like a string in quotes, and removes leading; # dollar si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html:1844,wrap,wrapping,1844,psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/inputparser.html,1,['wrap'],['wrapping']
Integrability,"ich automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:14981,wrap,wrapper,14981,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,2,['wrap'],['wrapper']
Integrability,"ich automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psithoninput-1.html:14981,wrap,wrapper,14981,psi4manual/1.5.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psithoninput-1.html,2,['wrap'],['wrapper']
Integrability,"icitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:13609,wrap,wrapper,13609,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['wrap'],['wrapper']
Integrability,"icitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:13611,wrap,wrapper,13611,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['wrap'],['wrapper']
Integrability,"icode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:1854,depend,dependencies,1854,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,6,['depend'],['dependencies']
Integrability,"iconda has; already been installed (instructions at Quick Installation),; erd can be obtained through conda install erd -c psi4.; Then enable it as a feature with ENABLE_erd,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect erd and activate dependent code.; Previous bullet had details. To build PSI4 from source and use; erd from conda without thinking, consult sec:condapsi4dev.; To remove a conda installation, conda remove erd. Source. If using PSI4 built from source and you want erd built from; from source also,; enable it as a feature with ENABLE_erd,; and let the build system fetch and build it and activate dependent code. How to configure erd for building Psi4¶; Role and Dependencies. Role — In PSI4, ERD is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) erd; Upstream Dependencies — erd \(\Leftarrow\) Fortran. CMake Variables. ENABLE_erd — CMake variable toggling whether PSI4 builds with erd; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing include/ERD/ERD_MANGLE.h; erd_DIR — CMake variable to specify where pre-built erd can be found. Set to installation directory containing share/cmake/erd/erdConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_erd — CMake variable to force internal build of erd instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_erd — CMake variable to force detecting pre-built erd and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_erd=ON. Build without erd. >>> cmake. Link against pre-built. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. table of contents. Interface to ERD by ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/erd-1.html:2345,depend,dependencies,2345,psi4manual/1.2.1/erd-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/erd-1.html,4,['depend'],['dependencies']
Integrability,"idationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" %; (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (opt_mode == 'continuous') and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.get_variable('CURRENT ENERGY'). # Compute the gradient; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.get_variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # Record optimiza",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:61006,depend,dependent,61006,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['depend'],['dependent']
Integrability,"ide users with lagging syntax. Parameters; ----------; old; Previously valid syntax.; new; Suggested replacement syntax.; version; First Major.minor version at which `old` syntax won't run. Generally; the next release at time of commit.; elaboration; Any additional message to convey. Should start with a space. """"""; def __init__(self, old: str, new: str, version: str, elaboration: str):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:5362,rout,routine,5362,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,1,['rout'],['routine']
Integrability,"ied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; MPFR https://www.mpfr.org/. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) http",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:5365,depend,dependency,5365,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['depend'],['dependency']
Integrability,"ient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float¶; Returns the exponent of the given primitive. is_cartesian(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool¶; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. original_coef(self: psi4.core.GaussianShell, pi: int) → float¶; Return unnormalized coefficient of the pi’th primitive. AMCHAR; The upper-case character symbol for the angular momentum of the given contraction. am; The angular momentum of the given contraction. amchar; The character symbol for the angular momentum of the given contraction. coef(self: psi4.core.GaussianShell, pi: int) → float; Return coefficient of the pi’th primitive. erd_coef(self: psi4.core.GaussianShell, pi: int) → float; Return ERD normalized coefficient of pi’th primitive. exp(self: psi4.core.GaussianShell, prim: int) → float; Returns the exponent of the given primitive. function_index; Basis function index where this shell starts. is_cartesian(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is Cartesian. is_pure(self: psi4.core.GaussianShell) → bool; Returns true if the contraction is pure, i.e. a spherical harmonic basis function. ncartesian; Total number of basis functions if this shell was Cartesian. ncenter; Returns atom number this shell is on. nfunction; Total number of basis functions. nprimitive; The number of primitive gaussians. original_coef(self: psi4.core.GaussianShell, pi: int) → float; Return unnormalized coefficient of the pi’th primitive. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.gaussianshell.html:3078,contract,contraction,3078,psi4manual/1.2.1/api/psi4.core.gaussianshell.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.gaussianshell.html,2,['contract'],['contraction']
Integrability,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_faq-1.html:1600,depend,dependencies,1600,psi4manual/1.4.0/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_faq-1.html,8,['depend'],['dependencies']
Integrability,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_faq.html:1893,depend,dependencies,1893,psi4manual/master/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html,1,['depend'],['dependencies']
Integrability,"ies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/chemps2-1.html:6762,depend,dependencies,6762,psi4manual/1.1.0/chemps2-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/chemps2-1.html,2,['depend'],['dependencies']
Integrability,"ies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). 1; 2>>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). 1; 2>>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). 1; 2>>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; 1; 2; 3; 4RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/db-1.html:6573,wrap,wrapper,6573,psi4manual/1.2.1/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/db-1.html,4,['wrap'],['wrapper']
Integrability,"ies!; # uncheck ""Include administrators"" and Save changes. >>> git push upstream 1.3.x; >>> git push upstream v1.3.1. # re-engage ""Include administrators"" protections. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda, so skip directions below.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; Nightly conda-builds work from master psi4. (Postrelease “practice” works from 1.N.x psi4.). Instead, switch source/git_tag from master to tag (e.g., v1.3rc1) in:. psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L. In cbcy, edit psi4ver to “v”-less tag. For releases and postreleases (not prereleases), in conda_build_config.yaml, edit ltrtver to a new non-dev label (probably a ditto) matching the release (e.g., “1.3”); Set kitandkapoodle.py to the normal *** stack. Should be (psi4, psi4-rt, psi4-d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:9006,depend,dependencies,9006,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,3,['depend'],['dependencies']
Integrability,"ies(name, **kwargs); steps_since_last_hessian = 0; psi4.set_gradient(G); psi4.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (psi4.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; psi4.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', psi4.get_global_option('CART_HESS_READ'); # Take step; if psi4.optking() == psi4.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); psi4.print_out('\n Final optimized geometry and variables:\n'); psi4.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (psi4.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; psi4.opt_clean(); psi4.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy; psi4.print_out('\n Structure for next step:\n'); psi4.get_active_molecule().print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = p4util.get_psifile(1); kwargs['mode'] = 'sow'. n += 1. psi4.print_out('\tOptimizer: Did not converge!'). optstash.restore(); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. """"""; namelower = name.lower(). # matches 'mrccsdt(q)'; if namelower.startswith('mrcc'):; # grabs 'sdt(q)'; ccfullname = namelower[4:]. # A negative order indicates perturbative method; methods = {; 'sd' : { 'method' : 1, 'order' : 2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:54022,wrap,wrapper,54022,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['wrap'],['wrapper']
Integrability,"if (lowername == 'scs-mi-omp3'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSMI'); elif (lowername == 'scs-omp3-vdw'):; PsiMod.set_local_option('OCC', 'SCS_TYPE', 'SCSVDW'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs) . PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); PsiMod.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = OptionsState(; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); PsiMod.deriv(). optstash.resto",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:7340,rout,routine,7340,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['rout'],['routine']
Integrability,"if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_helper(name, **kwargs):; """"""Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). """""". optstash = p4util.OptionsState(; ['PUREAM'],; ['BASIS'],; ['QMEFP'],; ['DF_BASIS_SCF'],; ['SCF', 'GUESS'],; ['SCF', 'DF_INTS_IO'],; ['SCF', 'SCF_TYPE'] # Hack: scope gets changed internally with the Andy trick; ). optstash2 = p4util.OptionsState(; ['BASIS'],; ['DF_BASIS_SCF'],; ['SCF', 'SCF_TYPE'],; ['SCF', 'DF_INTS_IO']). # Grab a few kwargs; use_c1 = kwargs.get('use_c1', False); scf_molecule = kwargs.get('molecule', psi4.get_active_molecule()); if 'ref_wfn' in kwargs:; raise ValidationError(""It is not possible to pass",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:25918,rout,route,25918,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['rout'],['route']
Integrability,"if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exists, must be Python 2; str = str; unicode = unicode; bytes = str; basestring = basestring. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta3] » ; Module code ». © Copyright 2012, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:87512,wrap,wrappers,87512,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exists, must be Python 2; str = str; unicode = unicode; bytes = str; basestring = basestring. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta4] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Mar 20, 2014.; Created using Sphinx 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:91269,wrap,wrappers,91269,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"if re.match(r'corl_.*$', functionname) and (wfnname == 'scf'):; raise ValidationError('Call to \'%s\' is not intended for scf portion of calculation.' % (functionname)). if 'basisname' in largs:; BSET = largs['basisname']; else:; raise ValidationError('Call to \'%s\' has keyword \'basisname\' missing.' % (functionname)). if 'basiszeta' in largs:; ZSET = largs['basiszeta']; else:; raise ValidationError('Call to \'%s\' has keyword \'basiszeta\' missing.' % (functionname)). # Mode where function reads the now-filled-in energies from that same form and performs the sp, xtpl, delta, etc.; elif (largs['mode'].lower() == 'evaluate'):; mode = largs['mode'].lower(). if 'needname' in largs:; NEED = largs['needname']; else:; raise ValidationError('Call to \'%s\' has keyword \'needname\' missing.' % (functionname)). else:; raise ValidationError('Call to \'%s\' has keyword \'mode\' missing or invalid.' % (functionname)). return [mode, NEED, wfnname, BSET, ZSET]. [docs]def split_menial(menial):; r""""""Function used by :py:func:`~wrappers.complete_basis_set` to separate; *menial* 'scftot' into [scf, tot] and 'mp2corl' into [mp2, corl]. """"""; PTYP = ['tot', 'corl']; for temp in PTYP:; if menial.endswith(temp):; temp_wfn = menial[:-len(temp)]; temp_portion = temp. return [temp_wfn, temp_portion]. # Quickly normalize the types for both python 2 and 3; try:; unicode = unicode; except NameError:; # 'unicode' is undefined, must be Python 3; str = str; unicode = str; bytes = bytes; basestring = (str,bytes); else:; # 'unicode' exists, must be Python 2; str = str; unicode = unicode; bytes = str; basestring = basestring. ## Aliases ##; cbs = complete_basis_set. #################################; ## End of Complete Basis Set ##; #################################. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; PSI4 [beta5] » ; Module code ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:102046,wrap,wrappers,102046,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['wrap'],['wrappers']
Integrability,"ification. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-occ; force occupations in scf. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. fnocc5; Test FNO-DF-CCSD(T) energy. mints-benchmark; run some BLAS benchmarks. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mbis-1; MBIS calculation on H2O. cisd-sp-2; 6-31G** H",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:29348,depend,depend,29348,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"ified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD¶. Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:28467,contract,contracted,28467,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,15,['contract'],['contracted']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Man",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/manage_addon.html:10655,interface,interface,10655,psi4manual/master/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/master/manage_addon.html,1,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Managing: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:10640,interface,interface,10640,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,2,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Managing: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html:10640,interface,interface,10640,psi4manual/1.3.2/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html,2,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Managing: Gi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:10646,interface,interface,10646,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,2,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Managing: Gi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html:10646,interface,interface,10646,psi4manual/1.5.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html,2,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Managing: Gi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_addon.html:10646,interface,interface,10646,psi4manual/1.6.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_addon.html,1,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Managing: Gi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_addon.html:10646,interface,interface,10646,psi4manual/1.7.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_addon.html,1,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_addon.html:10648,interface,interface,10648,psi4manual/1.8.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_addon.html,1,['interface'],['interface']
Integrability,"ifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Managing: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_addon.html:10648,interface,interface,10648,psi4manual/1.9.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_addon.html,1,['interface'],['interface']
Integrability,"ify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-response2; Compute the dipole polarizability for water with custom basis set. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:1844,depend,depend,1844,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['depend'],['depend']
Integrability,"ignature :; | b has_puream(N3psi8BasisSetE {lvalue}); | ; | max_am(...); | max_am( (BasisSet)arg1) -> int :; | Returns maximum angular momentum used; | ; | C++ signature :; | i max_am(N3psi8BasisSetE {lvalue}); | ; | max_function_per_shell(...); | max_function_per_shell( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_function_per_shell(N3psi8BasisSetE {lvalue}); | ; | max_nprimitive(...); | max_nprimitive( (BasisSet)arg1) -> int :; | docstring; | ; | C++ signature :; | i max_nprimitive(N3psi8BasisSetE {lvalue}); | ; | nao(...); | nao( (BasisSet)arg1) -> int :; | Returns number of atomic orbitals (Cartesian); | ; | C++ signature :; | i nao(N3psi8BasisSetE {lvalue}); | ; | nbf(...); | nbf( (BasisSet)arg1) -> int :; | Returns number of basis functions (Cartesian or spherical depending on has_puream); | ; | C++ signature :; | i nbf(N3psi8BasisSetE {lvalue}); | ; | nprimitive(...); | nprimitive( (BasisSet)arg1) -> int :; | Returns total number of primitives in all contractions; | ; | C++ signature :; | i nprimitive(N3psi8BasisSetE {lvalue}); | ; | nshell(...); | nshell( (BasisSet)arg1) -> int :; | Returns number of shells; | ; | C++ signature :; | i nshell(N3psi8BasisSetE {lvalue}); | ; | nshell_on_center(...); | nshell_on_center( (BasisSet)arg1, (int)arg2) -> int :; | docstring; | ; | C++ signature :; | i nshell_on_center(N3psi8BasisSetE {lvalue},i); | ; | print_detail_out(...); | print_detail_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_detail_out(N3psi8BasisSetE {lvalue}); | ; | print_out(...); | print_out( (BasisSet)arg1) -> None :; | docstring; | ; | C++ signature :; | void print_out(N3psi8BasisSetE {lvalue}); | ; | shell(...); | shell( (BasisSet)arg1, (int)arg2) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE shell(N3psi8BasisSetE {lvalue},i); | ; | shell( (BasisSet)arg1, (int)arg2, (int)arg3) -> GaussianShell :; | docstring; | ; | C++ signature :; | N3psi13GaussianShellE she",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:377444,contract,contractions,377444,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['contract'],['contractions']
Integrability,"ike dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers. All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39// BLAS/LA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html:1381,rout,routines,1381,psi4manual/1.2.1/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/prog_blas-1.html,8,"['rout', 'wrap']","['routines', 'wrapped']"
Integrability,"ike dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so PSI4 provides a common set of wrappers in psi4/psi4/src/psi4/libqt/qt.h . Warning; Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; psi4.core.Matrix itself. The advice in these docs will catch up; shortly. BLAS Wrappers¶; BLAS wrappers are currently fully supported at double precision.; BLAS commands involving matrices are wrapped so as to be conventional; C-style “row-major” indexing, meaning that the column is the fast index; like normal. The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers.; All routines are declared in qt.h. Each routine is prefixed with a; C_, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (int, double,; unsigned long int, char, …) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous; memory (as provided by block_matrix, for example), and are passed by; providing a pointer to the first double or int element of the data (this; is array[0] if array is double**). BLAS1 routines occasionally; return values (DDOT for instance), BLAS2 and BLAS3 always return void.; For char arguments, case is insensitive. A few examples are provided:; // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // block_matrix, init_array; #include ""psi4/libciomr/libciomr.h"". using namespace psi;; ... // Allocate a,b ve",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html:1401,rout,routines,1401,psi4manual/1.4.0/prog_blas-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_blas-1.html,18,"['rout', 'wrap']","['routines', 'wrapped']"
Integrability,"ilable from the LIBEFP library.; These systems are accessible in molecule {...} blocks without; additional configuration. How to configure libefp for building Psi4¶; Role and Dependencies. Role — In PSI4, libefp is a library that provides additional; molecular modeling capabilities (EFP).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) libefp; Upstream Dependencies — libefp \(\Leftarrow\) BLAS/LAPACK. CMake Variables. ENABLE_libefp — CMake variable toggling whether Psi4 builds with libefp; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing include/efp.h; libefp_DIR — CMake variable to specify where pre-built libefp can be found. Set to installation directory containing share/cmake/libefp/libefpConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_libefp — CMake variable to force internal build of libefp instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_libefp — CMake variable to force detecting pre-built libefp and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_libefp=ON. Build without libefp. >>> cmake. Link against pre-built. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. table of contents. Interface to LIBEFP by I. Kaliman; Installation; EFP Fragments; Molecule Specification; Running EFP; Fragment Library; How to configure libefp for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to LIBEFP by I. Kaliman. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/libefp.html:8623,depend,dependencies,8623,psi4manual/1.6.x/libefp.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/libefp.html,1,['depend'],['dependencies']
Integrability,"ile name. max_am()[source]¶; Maximum angular momentum used in the basis set.; * @return Maximum angular momentum. max_function_per_shell()[source]¶; Compute the maximum number of basis functions contained in a shell.; * @return The max number of basis functions in a shell. max_nprimitive()[source]¶; Maximum number of primitives in a shell.; * Examines each shell and find the shell with the maximum number of primitives returns that; * number of primitives.; * @return Maximum number of primitives. molecule()[source]¶; Molecule this basis is for.; * @return Shared pointer to the molecule for this basis set. name()[source]¶; Returns the name of this basis set. nao()[source]¶; Number of atomic orbitals (Cartesian).; * @return The number of atomic orbitals (Cartesian orbitals, always). nbf()[source]¶; Number of basis functions (Spherical).; * @return The number of basis functions (Spherical, if has_puream() == true). nprimitive()[source]¶; Number of primitives.; * @return The total number of primitives in all contractions. nshell()[source]¶; Number of shells.; * @return Number of shells. nshell_on_center(i)[source]¶; Return the number of shells on a given center. print_by_level(out=None, level=2)[source]¶; Print basis set information according to the level of detail in print_level; @param out The file stream to use for printing. Defaults to outfile.; @param print_level: defaults to 2; * < 1: Nothing ; * 1: Brief summary ; * 2: Summary and contraction details ; * > 2: Full details. print_detail(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-atom); * @param out The file stream to use for printing. Defaults to outfile. print_detail_cfour(out=None)[source]¶; Returns a string in CFOUR-style of the basis (per-atom); * Format from http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.OldFormatOfAnEntryInTheGENBASFile. print_detail_gamess(out=None, numbersonly=False)[source]¶; Prints a detailed PSI3-style summary of the basis (per-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:62595,contract,contractions,62595,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['contract'],['contractions']
Integrability,"ileno[, pidspace]); Form full path and filename for psi scratch file. getattr_ignorecase(module, attr); Extract attribute attr from module if attr is available in any possible lettercase permutation. hamiltonian_solver(engine, guess, *, nroot); Finds the smallest eigenvalues and associated right and left hand eigenvectors of a large real Hamiltonian eigenvalue problem emulated through an engine. hold_options_state(); Return a context manager that will collect the current state of :rtype: Iterator[None]. import_ignorecase(module); Import loader for module in any possible lettercase permutation. kwargs_lower(kwargs); Function to rebuild and return kwargs dictionary sanitized. levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. libint2_configuration(); Returns information on integral classes, derivatives, and AM from currently linked Libint2. libint2_print_out(). rtype:; None. mat2arr(mat); Convert Matrix to List. message_box(message[, max_width, min_width]); Put a message string into a box for extra attention. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. pcm_helper(block); Helper to specify the multiline PCMSolver syntax for PCM. plump_qcvar(key, val); Prepare serialized QCVariables for QCSchema AtomicResult.extras[""qcvars""] by converting flat arrays into numpy, shaped ones and floating strings. prefactor_ecd(); Prefactor for converting microscopic observable to decadic molar extinction coefficient in electronic circular dichroism. prefactor_opa(); Prefactor for converting microscopic observable to decadic molar extinction coefficient in one-photon absorption. prepare_options_for_modules([changedOnly, ...]); Capture current state of psi4.core.Options information. prepare_options_for_set_options(); Collect current state of psi4.core.Options information for reloading by set_options(). provenance_stamp(routine[, module]); Prepare QCSchema Provenance with PSI4 credentials. sanitize_method(name); Replace characters in method nam",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psi4api.html:26073,message,message,26073,psi4manual/1.9.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psi4api.html,2,['message'],['message']
Integrability,"ilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:5795,depend,dependency,5795,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,2,['depend'],['dependency']
Integrability,"ilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:5972,depend,dependency,5972,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['depend'],['dependency']
Integrability,"ill be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that call upon those in modules; :py:mod:`proc`, :py:mod:`driver`, and :py:mod:`wrappers`. Place in this file quickly defined procedures such as; - aliases for complex methods; - simple modifications to existing methods. """"""; from __future__ import print_function; from __future__ import absolute_import; import os; import re; import math; import warnings. from psi4.driver import driver_cbs. # Python procedures like these can be run directly from the input file or integrated; # with the energy(), etc. routines by means of lines like those at the end; # of this file. def fake_file11(wfn, filename='fake_file11.dat', **kwargs):; r""""""Function to print a file *filename* of the old file11 format; from molecule and gradient information in *wfn*. .. versionadded:: 0.6; *wfn* parameter passed explicitly. :returns: None. :type filename: string; :param filename: destination file name for file11 file. :type wfn: :py:class:`~psi4.core.Wavefunction`; :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/aliases.html:1603,rout,routines,1603,psi4manual/1.2.1/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/aliases.html,1,['rout'],['routines']
Integrability,"ill be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with property-related helper functions."""""". import psi4; from . import optproc. __all__ = ['free_atom_volumes']. [docs]def free_atom_volumes(wfn, **kwargs):; """""" ; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables.; Free-atom densities are computed at the same level of theory as the molecule, ; and we use unrestricted references as needed in computing the ground-state. . The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters; ----------; wfn : psi4.core.Wavefunction; The wave function associated with the molecule, method, and basis for ; atomic computations; """""". # If we're already a free atom, break to avoid recursion; # We don't ever need volume ratios for free atoms since they; # are by definition 1.0; natom = wfn.molecule().natom(); if natom == 1:; return 0 ; . # the level of theory; current_en = wfn.scalar_variable('CURRENT ENERGY'); total_energies = [k for k, v in wfn.scalar_variables().items() if abs(v - current_en) <= 1e-12]; theory = """"; for var in total_energies:; if 'TOTAL ENERGY' in var:; var = var.split(); if var[0] == 'SCF':; continue; elif var[0] == 'DFT':; theory = wfn.functional().name(); else:; theory = var[0]. # list of reference number of unpaired electrons.; # Note that this is not the same as the; # total spin of the ground state atom; reference_S = [; 0, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 6, 5, 4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/prop_util.html:1698,rout,routine,1698,psi4manual/1.6.x/_modules/psi4/driver/p4util/prop_util.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/prop_util.html,1,['rout'],['routine']
Integrability,"ill be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with property-related helper functions."""""". import psi4; from . import optproc. __all__ = ['free_atom_volumes']. [docs]def free_atom_volumes(wfn, **kwargs):; """""" ; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables.; Free-atom densities are computed at the same level of theory as the molecule, ; and we use unrestricted references as needed in computing the ground-state. . The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters; ----------; wfn : psi4.core.Wavefunction; The wave function associated with the molecule, method, and basis for ; atomic computations; """""". # the level of theory; current_en = wfn.scalar_variable('CURRENT ENERGY'); total_energies = [k for k, v in wfn.scalar_variables().items() if abs(v - current_en) <= 1e-12]; theory = """"; for var in total_energies:; if 'TOTAL ENERGY' in var:; var = var.split(); if var[0] == 'SCF':; continue; elif var[0] == 'DFT':; theory = wfn.functional().name(); else:; theory = var[0]. # list of reference number of unpaired electrons.; # Note that this is not the same as the; # total spin of the ground state atom; reference_S = [; 0, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0,; 1, 0, 1, 2, 5, 6, 5, 4, 3, 0, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 1, 0, 3, 4, 5, 6, 7, 8, 5, 4, 3, 2, 1, 0, 1, 2, 3,; 4, 5, 4, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0; ]. # the parent molecu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/prop_util.html:1698,rout,routine,1698,psi4manual/1.4.0/_modules/psi4/driver/p4util/prop_util.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/prop_util.html,2,['rout'],['routine']
Integrability,"ill run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of Psi4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in Psi4 are; _nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. _nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; --------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:13273,wrap,wrapper,13273,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['wrap'],['wrapper']
Integrability,"ilure. Used in input files in the test suite. :returns: a dictionary of energies computed from the MO integrals.; The key-value pairs are:; - 'NUCLEAR REPULSION ENERGY' : nuclear repulsion plus frozen core energy; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: reference FCIDUMP file; :param computed: computed FCIDUMP file; :param label: string labelling the test; """""". try:; from deepdiff import DeepDiff; except ImportError:; raise ImportError(; """"""Python module deepdiff not found. Solve by installing it: `conda install deepdiff -c conda-forge` or `pip install deepdiff`""""""; ). # Grab expected header and integrals; ref_intdump = fcidump_from_file(expected); intdump = fcidump_from_file(computed). # Compare headers; header_diff = DeepDiff(; ref_intdump,; intdump,; ignore_order=True,; exclude_paths={""root['enuc']"", ""root['hcore']"", ""root['eri']"", ""root['epsilon']""}); if header_diff:; message = (""\tComputed FCIDUMP file header does not match expected header.\n""); raise TestComparisonError(header_diff). ref_energies = energies_from_fcidump(ref_intdump); energies = energies_from_fcidump(intdump). pass_1el = compare_values(ref_energies['ONE-ELECTRON ENERGY'], energies['ONE-ELECTRON ENERGY'], 7,; label + '. 1-electron energy'); pass_2el = compare_values(ref_energies['TWO-ELECTRON ENERGY'], energies['TWO-ELECTRON ENERGY'], 7,; label + '. 2-electron energy'); pass_scf = compare_values(ref_energies['SCF TOTAL ENERGY'], energies['SCF TOTAL ENERGY'], 10,; label + '. SCF total energy'); pass_mp2 = compare_values(ref_energies['MP2 CORRELATION ENERGY'], energies['MP2 CORRELATION ENERGY'], 10,; label + '. MP2 correlation energy'). if (pass_1el and pass_2el and pass_scf and pass_mp2):; success(label). return True. [docs]def energies_from_fcidump(intdump):; energies = {}; energies['NUCLEAR REPULSION ENERGY'] = intdump['enuc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html:13165,message,message,13165,psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,1,['message'],['message']
Integrability,"im1); dim2 = core.Dimension.from_list(dim2). if dim1.n() != dim2.n():; raise ValidationError(""Array_to_Matrix: Length of passed dim1 must equal length of dim2.""). ret = self(name, dim1, dim2). start1 = 0; start2 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; d2 = dim2[num]; if (d1 == 0) or (d2 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1, start2:start2 + d2]; start1 += d1; start2 += d2. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0], arr.shape[1]); view = _get_raw_views(ret)[0]; view[:] = arr; return ret. elif arr_type == core.Vector:; # Build an irreped array back out; if dim1 is not None:; if dim2 is not None:; raise ValidationError (""Array_to_Matrix: If dim2 should not be supplied for 1D vectors.""). dim1 = core.Dimension.from_list(dim1); ret = self(name, dim1). start1 = 0; for num, interface in enumerate(ret.nph):; d1 = dim1[num]; if (d1 == 0):; continue. view = np.asarray(interface); view[:] = arr[start1:start1 + d1]; start1 += d1. return ret. # Simple case without irreps; else:; ret = self(name, arr.shape[0]); ret.np[:] = arr; return ret. else:; raise ValidationError(""Array_to_Matrix: type '%s' is not recognized."" % str(arr_type)). [docs]def _to_array(matrix, copy=True, dense=False):; """"""; Converts a Psi4 Matrix or Vector to a numpy array. Either copies the data or simply; consturcts a view. Parameters; ----------; matrix : :py:class:`~psi4.core.Matrix` or :py:class:`~psi4.core.Vector`; Pointers to which Psi4 core class should be used in the construction.; copy : bool; Copy the data if True, return a view otherwise; dense : bool; Converts irreped Psi4 objects to diagonally blocked dense arrays. Returns a list of arrays otherwise. Returns; -------; array : np.array or list of of np.array; Returns either a list of np.array's or the base array depending on options. Notes; -----; This is a generalized function to convert a Psi4 object to a NumPy array. Examples; --------. >>> data ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html:5918,interface,interface,5918,psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,1,['interface'],['interface']
Integrability,"ime; allows, the developers will attempt to answer inquiries on the forum or GitHub. For bug reports,; specific and detailed information, with example inputs, would be; appreciated.; Where-to-post summary:[6]. How do I? – ask the forum; I got this error, why? – ask the forum; I got this error and I’m sure it’s a bug – file a GitHub issue; Can I open a discussion on this bit of code? – file a GitHub issue; I have an idea/request and a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or post on the wiki itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. Table Of Contents. Introduction; Overview; Citing Psi4; Overall Psi4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Ar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/introduction-1.html:20995,rout,routines,20995,psi4manual/1.0.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/introduction-1.html,2,['rout'],['routines']
Integrability,"imod_Wavefunction>`) |w--w| gradient and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, psi4.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). """"""; kwargs = p4util.kwargs_lower(kwargs). # Bounce to CP if bsse kwarg (someday); if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Gradient: Cannot specify bsse_type for gradient yet.""). # Figure out what kind of gradient this is; if hasattr(name, '__call__'):; if name.__name__ in ['cbs', 'complete_basis_set']:; gradient_type = 'cbs_wrapper'; else:; # Bounce to name if name is non-CBS function; gradient_type = 'custom_function'; elif '/' in name:; gradient_type = 'cbs_gufunc'; else:; gradient_type = 'conventional'. # Figure out lowername, dertype, and func; # If we have analytical gradients we want to pass to our wrappers, otherwise we want to run; # finite-diference energy or cbs energies; # TODO MP5/cc-pv[DT]Z behavior unkown due to ""levels""; user_dertype = kwargs.pop('dertype', None); if gradient_type == 'custom_function':; if user_dertype is None:; dertype = 0; psi4.print_out(""\nGradient: Custom function passed in without a defined dertype, assuming fd-energy based gradient.\n""); else:; psi4.print_out(""\nGradient: Custom function passed in with a dertype of %d\n"" % user_dertype); dertype = user_dertype. if dertype == 1:; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', 'scf', 8, 10, 8, 10, 8); lowername = name. elif gradient_type == 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:32909,wrap,wrappers,32909,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['wrap'],['wrappers']
