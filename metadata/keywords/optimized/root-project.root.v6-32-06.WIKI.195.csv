quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3750,clear,clearEvalErrorLog,3750,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['clear'],['clearEvalErrorLog']
Usability,"Double_t, Double_t)TH3inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH3Dstatic; Class_Name()TH3Dstatic; Class_Version()TH3Dinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH3Dvirtual; TH3::TAttLine::Copy(TAttLine &attline) constTAttLine; TH3::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH3::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayD::Copy(TArrayD &array) constTArrayDinline; DeclFileName()TH3Dinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D-members.html:2677,Clear,Clear,2677,doc/master/classTH3D-members.html,https://root.cern,https://root.cern/doc/master/classTH3D-members.html,1,['Clear'],['Clear']
Usability,"Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:3991,clear,clearEvalErrorLog,3991,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,6,['clear'],['clearEvalErrorLog']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TEnum * Find(TListOfEnums::DeclId_t id) const; Return the TEnum corresponding to the Decl 'id' or NULL if it does not; exist. TEnum * Get(TListOfEnums::DeclId_t id, const char* name); Return (after creating it if necessary) the TEnum; describing the enum corresponding to the Decl 'id'. TEnum * GetObject(const char* ) const; Return an object from the list of enums *if and only if* is has already; been loaded in the list. This is an internal routine. void UnmapObject(TObject* obj); Remove a pair<id, object> from the map of functions and their ids. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cann",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TListOfEnums.html:13136,Clear,Clear,13136,root/html604/TListOfEnums.html,https://root.cern,https://root.cern/root/html604/TListOfEnums.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TEnum * Get(TListOfEnums::DeclId_t id, const char* name); Return (after creating it if necessary) the TEnum; describing the enum corresponding to the Decl 'id'. TEnum * GetObject(const char* ) const; Return an object from the list of enums *if and only if* is has already; been loaded in the list. This is an internal routine. void UnmapObject(TObject* obj); Remove a pair<id, object> from the map of functions and their ids. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfEnums.html:13091,Clear,Clear,13091,root/html602/TListOfEnums.html,https://root.cern,https://root.cern/root/html602/TListOfEnums.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a data member just by name or create it if its not already in the list. TDictionary * Find(TListOfDataMembers::DeclId_t id) const; Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'. TDictionary * Get(TListOfDataMembers::DeclId_t id); Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'. TDictionary * Get(DataMemberInfo_t* info, bool skipChecks = kFALSE); Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'.; The skipChecks flag controls the consistency checks performed inspecting; the AST. In some cases, we explicitely alter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TListOfDataMembers.html:13192,Clear,Clear,13192,root/html604/TListOfDataMembers.html,https://root.cern,https://root.cern/root/html604/TListOfDataMembers.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a data member just by name or create it if its not already in the list. TDictionary * Get(TListOfDataMembers::DeclId_t id); Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'. TDictionary * Get(DataMemberInfo_t* info, bool skipChecks = false); Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'.; The skipChecks flag controls the consistency checks performed inspecting; the AST. In some cases, we explicitely alter the datamembers in the; typesystem with respect to the AST and therefore we must not enforce; consistency. void UnmapObject(TObject* obj); Remove a pair<id, object> from the m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfDataMembers.html:13109,Clear,Clear,13109,root/html602/TListOfDataMembers.html,https://root.cern,https://root.cern/root/html602/TListOfDataMembers.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TDataMember object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a enum just by name or create it if its not already in the list. TObject* FindObject(const TObject* obj) const. TEnum * GetObject(const char* ) const; Return an object from the list of enums *if and only if* is has already; been loaded in the list. This is an internal routine. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove is called from; the TObject destructor. TObject * Remove(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfEnumsWithLock.html:12600,Clear,Clear,12600,root/html602/TListOfEnumsWithLock.html,https://root.cern,https://root.cern/root/html602/TListOfEnumsWithLock.html,2,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TFunction object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a function just by name or create it if its not already in the list. TList* GetListForObjectNonConst(const char* name); Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const char* name) const; Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const TObject* obj) const; Return the set of overloads for function obj, collecting all available ones.; Can construct and insert new TFunction-s. TFunction * Find(TListOfFunctions::DeclId_t id) const; Return the TMethod or TFunction describing the function corresponding; to the Decl 'id'. Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TListOfFunctions.html:12929,Clear,Clear,12929,root/html604/TListOfFunctions.html,https://root.cern,https://root.cern/root/html604/TListOfFunctions.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TFunction object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a function just by name or create it if its not already in the list. TList* GetListForObjectNonConst(const char* name); Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const char* name) const; Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const TObject* obj) const; Return the set of overloads for function obj, collecting all available ones.; Can construct and insert new TFunction-s. TFunction * Get(TListOfFunctions::DeclId_t id); Return (after creating it if necessary) the TMethod or TFunction; describing the function correspon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfFunctions.html:12876,Clear,Clear,12876,root/html602/TListOfFunctions.html,https://root.cern,https://root.cern/root/html602/TListOfFunctions.html,1,['Clear'],['Clear']
Usability,"Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddAt(TObject* obj, Int_t idx); Insert object at location idx in the list. void AddAfter(const TObject* after, TObject* obj); Insert object after object after in the list. void AddAfter(TObjLink* after, TObject* obj); Insert object after object after in the list. void AddBefore(const TObject* before, TObject* obj); Insert object before object before in the list. void AddBefore(TObjLink* before, TObject* obj); Insert object before object before in the list. void Clear(Option_t* option); Remove all objects from the list. Does not delete the objects unless; the THashList is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Delete all TFunction object files. TObject * FindObject(const char* name) const; Specialize FindObject to do search for the; a function just by name or create it if its not already in the list. TList* GetListForObjectNonConst(const char* name); Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const char* name) const; Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const TObject* obj) const; Return the set of overloads for function obj, collecting all available ones.; Can construct and insert new TFunction-s. TFunctionTemplate * Get(TListOfFunctionTemplates::DeclId_t id); Return (after creating it if necessary) the TMethod or TFunction; describing the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfFunctionTemplates.html:13050,Clear,Clear,13050,root/html602/TListOfFunctionTemplates.html,https://root.cern,https://root.cern/root/html602/TListOfFunctionTemplates.html,2,['Clear'],['Clear']
Usability,"DtorOnly(void* obj); static voidTSQLServer::SetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char* sql, Int_t = 100); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTSQLServer::ClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTSQLServer::SetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TSQLServer::ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSQLServer::fDBcurrently selected DB; Int_tTSQLServer::fErrorCodeerror code of last operation; TStringTSQLServer::fErrorMsgerror message of last operation; Bool_tTSQLServer::fErrorOutenable error output; TStringTSQLServer::fHosthost to which we are connected; TStringfInfoserver info string; MYSQL*fMySQLconnection to MySQL server; Int_tTSQLServer::fPortport to which we are connected; TStringTSQLServer::fTypetype of DBMS (MySQL, O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:7313,Clear,ClearError,7313,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,3,['Clear'],['ClearError']
Usability,"E ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstrates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstrates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► eve7;  collection.CThis example display collection of ??? in web browser ;  compound.C;  csgdemo.CCombinatorial Solid Geometry example ;  event_demo.CThis example display geometry, tracks and hits in web browser ;  geom_cms.C;  points.CThis example display only points in web browser ;  projection_prescale.C;  show_extract.CHelper script for showing of extracted / simplified geometries ;  table.CThis example display table in web browser ;  tracks.CThis example display only points in web browser ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:105487,simpl,simplified,105487,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simplified']
Usability,E and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_RSofieReader.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE with the RSofieReader class This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model ;  ;  TMVAClassification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ;  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:5426,simpl,simple,5426,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability,"E) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:7483,clear,clearShapeDirty,7483,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,3,['clear'],['clearShapeDirty']
Usability,"E); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode with at most ""nodes"" slaves. Since the fSlaves; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:59043,Clear,ClearData,59043,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['Clear'],['ClearData']
Usability,"E); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:2261,Clear,Clear,2261,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,1,['Clear'],['Clear']
Usability,"E); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategory.html:2192,Clear,Clear,2192,root/html534/RooAbsCategory.html,https://root.cern,https://root.cern/root/html534/RooAbsCategory.html,1,['Clear'],['Clear']
Usability,"E); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsString.html:2020,Clear,Clear,2020,root/html534/RooAbsString.html,https://root.cern,https://root.cern/root/html534/RooAbsString.html,1,['Clear'],['Clear']
Usability,"E); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinningCategory.html:2060,Clear,Clear,2060,root/html534/RooBinningCategory.html,https://root.cern,https://root.cern/root/html534/RooBinningCategory.html,5,['Clear'],['Clear']
Usability,"E); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:1915,Clear,Clear,1915,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,1,['Clear'],['Clear']
Usability,"E, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0); RooCurve(const RooAbsReal& func, RooAbsRealLValue& x, Double_t xlo, Double_t xhi, Int_t xbins, Double_t scaleFactor = 1, const RooArgSet* normVars = 0, Double_t prec = 1e-3, Double_t resolution = 1e-3, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0, Bool_t showProgress = kFALSE); virtual~RooCurve(); voidTObject::AbstractMethod(const char* method) const; voidaddPoint(Double_t x, Double_t y); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGraph::Apply(TF1* f); Double_taverage(Double_t lo, Double_t hi) const; virtual voidTGraph::Browse(TBrowser* b); Double_tchiSquare(const RooHist& hist, int nFitParam) const; virtual Double_tTGraph::Chisquare(const TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Bool_tTGraph::CompareArg(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareX(const TGraph* gr, Int_t left, Int_t right); static Bool_tTGraph::CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidTGraph::ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; TObject*RooPlotable::crossCast(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCurve.html:2242,Clear,Clear,2242,root/html534/RooCurve.html,https://root.cern,https://root.cern/root/html534/RooCurve.html,1,['Clear'],['Clear']
Usability,"E, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:2192,Clear,ClearInput,2192,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['Clear'],['ClearInput']
Usability,"E/CREDITS. *; 10 *************************************************************************/; 11 ; 12 ; 13#include ""TROOT.h""; 14#include ""TBuffer.h""; 15#include ""TGraphErrors.h""; 16#include ""TStyle.h""; 17#include ""TMath.h""; 18#include ""TVirtualPad.h""; 19#include ""TH1.h""; 20#include ""TF1.h""; 21#include ""TVectorD.h""; 22#include ""TSystem.h""; 23#include ""strtok.h""; 24 ; 25#include <iostream>; 26#include <fstream>; 27#include <cstring>; 28#include <string>; 29 ; 30ClassImp(TGraphErrors);; 31 ; 32 ; 33////////////////////////////////////////////////////////////////////////////////; 34 ; 35/** \class TGraphErrors; 36 \ingroup Graphs; 37A TGraphErrors is a TGraph with error bars.; 38 ; 39The TGraphErrors painting is performed thanks to the TGraphPainter; 40class. All details about the various painting options are given in this class.; 41 ; 42The picture below gives an example:; 43 ; 44Begin_Macro(source); 45{; 46 auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; 47 c1->SetFillColor(42);; 48 c1->SetGrid();; 49 c1->GetFrame()->SetFillColor(21);; 50 c1->GetFrame()->SetBorderSize(12);; 51 const Int_t n = 10;; 52 Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; 53 Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; 54 Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; 55 Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; 56 auto gr = new TGraphErrors(n,x,y,ex,ey);; 57 gr->SetTitle(""TGraphErrors Example"");; 58 gr->SetMarkerColor(4);; 59 gr->SetMarkerStyle(21);; 60 gr->Draw(""ALP"");; 61}; 62End_Macro; 63*/; 64 ; 65 ; 66////////////////////////////////////////////////////////////////////////////////; 67/// TGraphErrors default constructor.; 68 ; 69TGraphErrors::TGraphErrors(); 70{; 71 if (!CtorAllocate()) return;; 72}; 73 ; 74 ; 75////////////////////////////////////////////////////////////////////////////////; 76/// TGraphErrors normal constructor.; 77///; 78/// the arrays are preset to zero; 79 ; 80TGraphErrors::TGraphE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:1476,Simpl,Simple,1476,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['Simpl'],['Simple']
Usability,E2D ; kGRAPH ; kPOLYMARKER3D ; kHISTOGRAM1D ; kHISTOGRAM2D ; kLISTOFGRAPHS ; kLISTOFPOLYMARKERS3D ; kHISTOGRAM3D . Definition at line 32 of file TTreeDrawArgsParser.h. Constructor & Destructor Documentation. ◆ TTreeDrawArgsParser(). TTreeDrawArgsParser::TTreeDrawArgsParser ; (; ). Constructor - cleans all the class variables. ; Definition at line 30 of file TTreeDrawArgsParser.cxx. ◆ ~TTreeDrawArgsParser(). TTreeDrawArgsParser::~TTreeDrawArgsParser ; (; ). override . Destructor. ; Definition at line 38 of file TTreeDrawArgsParser.cxx. Member Function Documentation. ◆ Class(). static TClass * TTreeDrawArgsParser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeDrawArgsParser::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeDrawArgsParser::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file TTreeDrawArgsParser.h. ◆ ClearPrevious(). void TTreeDrawArgsParser::ClearPrevious ; (; ). protected . Resets all the variables of the class. ; Definition at line 53 of file TTreeDrawArgsParser.cxx. ◆ DeclFileName(). static const char * TTreeDrawArgsParser::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file TTreeDrawArgsParser.h. ◆ DefineType(). TTreeDrawArgsParser::EOutputType TTreeDrawArgsParser::DefineType ; (; ). protected . Put the type of the draw result into fOutputType and return it. ; Definition at line 266 of file TTreeDrawArgsParser.cxx. ◆ GetAdd(). bool TTreeDrawArgsParser::GetAdd ; (; ); const. inline . Definition at line 86 of file TTreeDrawArgsParser.h. ◆ GetDimension(). Int_t TTreeDrawArgsParser::GetDimension ; (; ); const. inline . Definition at line 87 of file TTreeDrawArgsParser.h. ◆ GetExp(). TString const & TTreeDrawArgsParser::GetExp ; (; ); const. inline . Definition at line 89 of file TTreeDrawArgsParser.h. ◆ GetIfSpecif,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:14875,Clear,ClearPrevious,14875,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['Clear'],['ClearPrevious']
Usability,"ED; » TH1Editor. class TH1Editor: public TGedFrame. TH1Editor; Editor for changing TH1 histogram attributes, rebinning & fitting.; For all possible draw options (there are a few which are not imple-; mentable in graphical user interface) see THistPainter::Paint in; root/histpainter/THistPainter.cxx. /*. */. /*. */. These changes can be made via the TH1Editor:; Style Tab:; 'Line' : change Line attributes (color, thickness); see TAttLineEditor; 'Fill' : change Fill attributes (color, pattern); see TAttFillEditor; 'Title' : TextEntry: set the title of the histogram; 'Histogram': change the draw options of the histogram; 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram; according to the Plot dimension there will be; different drawing possibilities (ComboBoxes/; CheckBoxes); 2d Plot:; 'Error' : ComboBox: add different error bars to the histogram; (no errors, simple, ..., see THistPainter::Paint; 'Add' : ComboBox: further things which can be added to the; histogram (None, simple/smooth line, fill area; 'Simple Drawing': CheckBox: draw a simple histogram without; errors (= ""HIST"" drawoption). In combination with; some other draw options an outer line is drawn on; top of the histogram; 'Show markers': CheckBox: draw a marker on to of each bin (=""P""; drawoption); 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption); change the Fill Color with Fill in the Style Tab; => will show Bar menue in the Style Tab; 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption); => will show Bar menue in the Style Tab; 3d Plot:; 'Type' : ComboBox: set histogram type Lego-Plot or Surface; draw(Lego, Lego1.2, Surf, Surf1..5); see THistPainter::Paint; 'Coords' : ComboBox: set the coordinate system (Cartesian, ..; Spheric) see THistPainter::Paint; 'Error' : see 2D plot; 'Bar' : change the bar attributes; 'W' : change Bar Width; 'O' : change Bar Offset; 'Percentage': specifies the percentage of the bar which is drawn; brighter and darker (10% == BAR1 drawoption); 'Horizont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1Editor.html:1228,simpl,simple,1228,root/html528/TH1Editor.html,https://root.cern,https://root.cern/root/html528/TH1Editor.html,18,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"ELODAxesTGLLogicalShape::kLODAxesX; static TGLLogicalShape::ELODAxesTGLLogicalShape::kLODAxesY; static TGLLogicalShape::ELODAxesTGLLogicalShape::kLODAxesZ. protected:. TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; TEveJetCone*fCModel object.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; vector<TEveVector>fP; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveJetConeGL(); Constructor. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object. void SetBBox(); Set bounding box. void DLCacheClear(); Clear DL cache and reset internal point array. void CalculatePoints() const; Calculate points for drawing. void Draw(TGLRnrCtx& rnrCtx) const; Draw the cone. void DirectDraw(TGLRnrCtx& rnrCtx) const; Render with OpenGL. TEveJetConeGL(const TEveJetConeGL& ). TEveJetConeGL& operator=(const TEveJetConeGL& ). virtual ~TEveJetConeGL(); {}. » Author: Matevz Tadel, Jochen Thaeder 2009 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveJetConeGL.html:4584,Clear,Clear,4584,root/html604/TEveJetConeGL.html,https://root.cern,https://root.cern/root/html604/TEveJetConeGL.html,1,['Clear'],['Clear']
Usability,"ELODAxesTGLLogicalShape::kLODAxesX; static TGLLogicalShape::ELODAxesTGLLogicalShape::kLODAxesY; static TGLLogicalShape::ELODAxesTGLLogicalShape::kLODAxesZ. protected:. TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; TEveJetCone*fCModel object.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; vector<TEveVector>fP; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveJetConeGL(); Constructor. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object. void SetBBox(); Set bounding box. void DLCacheClear(); Clear DL cache and reset internal point array. void CalculatePoints() const; Calculate points for drawing. void Draw(TGLRnrCtx& rnrCtx) const; Draw the cone. void DirectDraw(TGLRnrCtx& rnrCtx) const; Render with OpenGL. TEveJetConeGL(const TEveJetConeGL& ). TEveJetConeGL& operator=(const TEveJetConeGL& ). virtual ~TEveJetConeGL(); {}. » Author: Matevz Tadel, Jochen Thaeder 2009 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveJetConeGL.html:4584,Clear,Clear,4584,root/html602/TEveJetConeGL.html,https://root.cern,https://root.cern/root/html602/TEveJetConeGL.html,1,['Clear'],['Clear']
Usability,"ELP of a button, click on the right mouse button.; You have access to the last clicked button via the method GetClicked(). For example, bar->GetClicked()->GetName() will return the name of the last clicked button.; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; TControlBarA Control Bar is a fully user configurable tool which",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:1727,Simpl,Simple,1727,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['Simpl'],['Simple']
Usability,"ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:10299,simpl,simple,10299,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"EMode mode); TBufferFile(TBuffer::EMode mode, Int_t bufsiz); TBufferFile(TBuffer::EMode mode, Int_t bufsiz, void* buf, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); virtual~TBufferFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tCheckObject(const TObject* obj); virtual Bool_tCheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferFile.html:1449,Clear,Clear,1449,root/html530/TBufferFile.html,https://root.cern,https://root.cern/root/html530/TBufferFile.html,1,['Clear'],['Clear']
Usability,"ENU ; voidRaytrace(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(Option_t* option = """"); voidRelease(); voidRemoveNode(TGeoNode* node); TGeoNode*ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); voidReplayCreation(const TGeoVolume* other); voidTGeoAtt::ResetAttBit(UInt_t f); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename, Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidSelectVolume(Bool_t clear = kFALSE); voidSetActiveDaughters(Bool_t flag = kTRUE); voidSetActivity(Bool_t flag = kTRUE); voidSetAdded(); voidSetAsTopVolume()TOGGLE GETTER ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidSetAttVisibility(Bool_t vis); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCylVoxels(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(TObject* field); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetFinder(TGeoPatternFinder* finder); voidSetFWExtension(TGeoExtension* ext); voidSetInvisible(); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t lcolor); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:26166,clear,clear,26166,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['clear'],['clear']
Usability,EParUnzipMode { kEnable; kDisable; kForce; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. queue<Int_t>fActiveBlksThe blocks which are active now; Bool_tfActiveThreadUsed to terminate gracefully the unzippers; Bool_tfAsyncReading; Bool_tTFileCacheRead::fAsyncReading; Int_tfBlocksToGo; TList*TTreeCache::fBrNames! list of branch names in the cache; TObjArray*TTreeCache::fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Int_tfCycle; Long64_tTTreeCache::fEntryCurrent! current lowest entry number in the cache; Long64_tTTreeCache::fEntryMax! last entry in the cache; Long64_tTTreeCache::fEntryMin! first entry in the cache; Long64_tTTreeCache::fEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; TMutex*fIOMutex; Bool_tTTreeCache::fIsLearning! true if cache is in learning mode; Bool_tTTreeCache::fIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:9001,learn,learning,9001,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,"EPruneMethod fPruneMethod;  method used for pruning ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTree;  choose at each node splitting a random set of variables ;  ; RegressionVariance * fRegType;  the separation criteria used in Regression ;  ; SeparationBase * fSepType;  the separation criteria ;  ; UInt_t fSigClass;  class which is treated as signal when building the tree ;  ; Int_t fTreeID;  just an ID number given to the tree.. makes debugging easier as tree knows who he is. ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; Int_t fUseNvars;  the number of variables used in randomised trees; ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseSearchTree;  cut scan done with binary trees or simple event loop. ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  ; static const Int_t fgRandomSeed = 0;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/DecisionTree.h>. Inheritance diagram for TMVA::DecisionTree:. This browser is not able to show SVG: try Fire",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:12043,simpl,simple,12043,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['simpl'],['simple']
Usability,Editor.h. ◆ fSelectedMaterial2. TGeoMaterial* TGeoManagerEditor::fSelectedMaterial2. protected . Definition at line 52 of file TGeoManagerEditor.h. ◆ fSelectedMatrix. TGeoMatrix* TGeoManagerEditor::fSelectedMatrix. protected . Definition at line 66 of file TGeoManagerEditor.h. ◆ fSelectedMedium. TGeoMedium* TGeoManagerEditor::fSelectedMedium. protected . Definition at line 69 of file TGeoManagerEditor.h. ◆ fSelectedMedium2. TGeoMedium* TGeoManagerEditor::fSelectedMedium2. protected . Definition at line 70 of file TGeoManagerEditor.h. ◆ fSelectedShape. TGeoShape* TGeoManagerEditor::fSelectedShape. protected . Definition at line 60 of file TGeoManagerEditor.h. ◆ fSelectedShape2. TGeoShape* TGeoManagerEditor::fSelectedShape2. protected . Definition at line 61 of file TGeoManagerEditor.h. ◆ fSelectedVolume. TGeoVolume* TGeoManagerEditor::fSelectedVolume. protected . Definition at line 57 of file TGeoManagerEditor.h. ◆ fSetTopVolume. TGTextButton* TGeoManagerEditor::fSetTopVolume. protected . Definition at line 90 of file TGeoManagerEditor.h. ◆ fShapeButton. TGPictureButton* TGeoManagerEditor::fShapeButton[21]. protected . Definition at line 75 of file TGeoManagerEditor.h. ◆ fTab. TGTab* TGeoManagerEditor::fTab. protected . Definition at line 41 of file TGeoManagerEditor.h. ◆ fTabMgr. TGeoTabManager* TGeoManagerEditor::fTabMgr. protected . Definition at line 40 of file TGeoManagerEditor.h. ◆ fVolumeButton. TGPictureButton* TGeoManagerEditor::fVolumeButton[2]. protected . Definition at line 77 of file TGeoManagerEditor.h. ◆ fVolumeName. TGTextEntry* TGeoManagerEditor::fVolumeName. protected . Definition at line 50 of file TGeoManagerEditor.h. ◆ fVolumeTab. TGCompositeFrame* TGeoManagerEditor::fVolumeTab. protected . Definition at line 42 of file TGeoManagerEditor.h. geom/geombuilder/inc/TGeoManagerEditor.h; geom/geombuilder/src/TGeoManagerEditor.cxx. TGeoManagerEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManagerEditor.html:57444,Guid,Guide,57444,doc/master/classTGeoManagerEditor.html,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html,1,['Guid'],['Guide']
Usability,"Eff (Double_t sigEff=0.5);  calculate the background efficiency for a given signal efficiency ;  ; Double_t GetBkgRejAtSigEff (Double_t sigEff=0.5);  calculate the background rejection for a given signal efficiency ;  ; Double_t GetFOM ();  Return the Figure of Merit (FOM) used in the parameter optimization process. ;  ; MethodBase * GetMethod ();  ; void GetMVADists ();  fill the private histograms with the mva distributions for sig/bkg ;  ; Double_t GetROCIntegral ();  calculate the area (integral) under the ROC curve as a overall quality measure of the classification ;  ; std::vector< int > GetScanIndices (int val, std::vector< int > base);  helper function to scan through the all the combinations in the parameter space ;  ; Double_t GetSeparation ();  return the separation between the signal and background MVA ouput distribution ;  ; Double_t GetSigEffAtBkgEff (Double_t bkgEff=0.1);  calculate the signal efficiency for a given background efficiency ;  ; MsgLogger & Log () const;  ; void optimizeFit ();  ; void optimizeScan ();  do the actual optimization using a simple scan method, i.e. ;  . Private Attributes; std::map< std::vector< Double_t >, Double_t > fAlreadyTrainedParCombination;  save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ;  ; TString fFOMType;  the FOM type (Separation, ROC integra.. whatever you implemented.. ;  ; std::vector< Float_t > fFOMvsIter;  graph showing the development of the Figure Of Merit values during the fit ;  ; MsgLogger * fLogger;  ! message logger ;  ; MethodBase *const fMethod;  The MVA method to be evaluated. ;  ; TH1D * fMvaBkg;  MVA distribution for bakgr. events, used for spline fit. ;  ; TH1D * fMvaBkgFineBin;  MVA distribution for bakgr. events. ;  ; TH1D * fMvaSig;  MVA distribution for signal events, used for spline fit. ;  ; TH1D * fMvaSigFineBin;  MVA distribution for signal events. ;  ; Bool_t fNotDoneYet;  flat to indicate of Method Transformations have been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:2977,simpl,simple,2977,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['simpl'],['simple']
Usability,"Efficiency object does not; belong to any directory and will not be written to file during the; next TFile::Write() command. void SetName(const char* name); sets the name. Note: The names of the internal histograms are set to ""name + _total"" or; ""name + _passed"" respectively. Bool_t SetPassedEvents(Int_t bin, Int_t events); sets the number of passed events in the given global bin. returns ""true"" if the number of passed events has been updated; otherwise ""false"" ist returned. Note: - requires: 0 <= events <= fTotalHistogram->GetBinContent(bin). Bool_t SetPassedHistogram(const TH1& rPassed, Option_t* opt); sets the histogram containing the passed events. The given histogram is cloned and stored internally as histogram containing; the passed events. The given histogram has to be consistent with the current; fTotalHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fPassedHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fTotalHistogram is replaced by a; consistent one (with respect to rPassed) as well. void SetStatisticOption(TEfficiency::EStatOption option); sets the statistic option which affects the calculation of the confidence interval. Options:; - kFCP (=0)(default): using the Clopper-Pearson interval (recommended by PDG); sets kIsBayesian = false; see also ClopperPearson; - kFNormal (=1) : using the normal approximation; sets kIsBayesian = false; see also Normal; - kFWilson (=2) : using the Wilson interval; sets kIsBayesian = false; see also Wilson; - kFAC (=3) : using the Agresti-Coull interval; sets kIsBayesian = false; see also AgrestiCoull; - kFFC (=4) : using the Feldman-Cousins frequent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:60689,clear,cleared,60689,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,2,['clear'],['cleared']
Usability,Element >::GetRowLwb ; (; ); const. inline . Definition at line 110 of file TMatrixTLazy.h. ◆ GetRowUpb(). template<class Element > . Int_t TMatrixTSymLazy< Element >::GetRowUpb ; (; ); const. inline . Definition at line 111 of file TMatrixTLazy.h. ◆ IsA(). template<class Element > . TClass * TMatrixTSymLazy< Element >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 113 of file TMatrixTLazy.h. ◆ operator=(). template<class Element > . void TMatrixTSymLazy< Element >::operator= ; (; const TMatrixTSymLazy< Element > & ; ). inlineprotected . Definition at line 97 of file TMatrixTLazy.h. ◆ Streamer(). template<class Element > . void TMatrixTSymLazy< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTSymLazy< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 113 of file TMatrixTLazy.h. Friends And Related Symbol Documentation. ◆ TMatrixTBase< Element >. template<class Element > . friend class TMatrixTBase< Element >. friend . Definition at line 74 of file TMatrixTLazy.h. ◆ TMatrixTSym< Element >. template<class Element > . friend class TMatrixTSym< Element >. friend . Definition at line 74 of file TMatrixTLazy.h. ◆ TVectorT< Element >. template<class Element > . friend class TVectorT< Element >. friend . Definition at line 74 of file TMatrixTLazy.h. Member Data Documentation. ◆ fRowLwb. template<class Element > . Int_t TMatrixTSymLazy< Element >::fRowLwb. protected . Definition at line 94 of file TMatrixTLazy.h. ◆ fRowUpb. template<class Element > . Int_t TMatrixTSymLazy< Element >::fRowUpb. protected . Definition at line 93 of file TMatrixTLazy.h. math/matrix/inc/TMatrixTLazy.h. TMatrixTSymLazy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSymLazy.html:14620,Guid,Guide,14620,doc/master/classTMatrixTSymLazy.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html,1,['Guid'],['Guide']
Usability,"Element* el); Remove overlay element. void DeleteOverlayAnnotations(); Delete overlay elements that are annotations. void DeleteOverlayElements(TGLOverlayElement::ERole r); Delete overlay elements. void ResetSceneInfos(); Force rebuild of view-dependent scene-info structures. This should be called before calling render (draw/select) if; something that affects camera interest has been changed. void MergeSceneBBoxes(TGLBoundingBox& bbox); Merge bounding-boxes of all active registered scenes. void SetupClipObject(); Setup clip-object. Protected virtual method. void PreRender(); Initialize render-context, setup camera, GL, render-area.; Check and lock scenes, determine their visibility. void SubRenderScenes(TGLViewerBase::SubRender_foo render_foo); Call sub-rendering function render_foo on all currently visible; scenes. void Render(); Render all scenes. This is done in four passes:; - render opaque objects from all scenes; - render transparent objects from all scenes; - clear depth buffer; - render opaque selected objects from all scenes (with highlight); - render transparent selected objects from all scenes (with highlight). void RenderNonSelected(); Render non-selected objects from all scenes. void RenderSelected(); Render selected objects from all scenes. void RenderOverlay(Int_t state, Bool_t selection); Render overlay objects. void PostRender(); Function called after rendering is finished.; Here we just unlock the scenes. void PreRenderOverlaySelection(); Perform minimal initialization for overlay selection.; Here we assume that scene has already been drawn and that; camera and overall bounding box are ok.; Scenes are not locked. void PostRenderOverlaySelection(); Perform cleanup after overlay selection. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t recIdx); Process selection record on buffer-position 'recIdx' and; fill the data into 'rec'. Returns TRUE if scene was demangled and an object identified.; When FALSE is returned it is still possible that scene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerBase.html:5926,clear,clear,5926,root/html528/TGLViewerBase.html,https://root.cern,https://root.cern/root/html528/TGLViewerBase.html,3,['clear'],['clear']
Usability,"Element::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; TGLEmbeddedViewer*SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); TGLSAViewer*SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; voidSwitchStereo(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveViewer.html:17937,Undo,UndockWindow,17937,root/html534/TEveViewer.html,https://root.cern,https://root.cern/root/html534/TEveViewer.html,2,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t index) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVectorT_float_.html:18873,Clear,Clear,18873,root/html604/TVectorT_float_.html,https://root.cern,https://root.cern/root/html604/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t index) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_float_.html:18873,Clear,Clear,18873,root/html602/TVectorT_float_.html,https://root.cern,https://root.cern/root/html602/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"ElementRN::MakeNamevoid MakeName(Int_t a, Int_t z, Int_t iso)Generate a default name for the element.Definition TGeoElement.cxx:571; TGeoElementRN::fENDFcodeInt_t fENDFcodeDefinition TGeoElement.h:134; TGeoElementRN::fIsoInt_t fIsoDefinition TGeoElement.h:135; TGeoElementRN::TGeoElementRNTGeoElementRN()Default constructor.Definition TGeoElement.cxx:374; TGeoElementRN::CheckDecaysBool_t CheckDecays() constCheck if all decay chain of the element is OK.Definition TGeoElement.cxx:487; TGeoElementRN::ReadElementRNstatic TGeoElementRN * ReadElementRN(const char *record, Int_t &ndecays)Create element from line record.Definition TGeoElement.cxx:625; TGeoElementRN::~TGeoElementRN~TGeoElementRN() overrideDestructor.Definition TGeoElement.cxx:425; TGeoElementRN::fTG_FDouble_t fTG_FDefinition TGeoElement.h:142; TGeoElementRN::fTH_FDouble_t fTH_FDefinition TGeoElement.h:141; TGeoElementRN::ENDFstatic Int_t ENDF(Int_t a, Int_t z, Int_t iso)Definition TGeoElement.h:166; TGeoElementRN::ResetRatiovoid ResetRatio()Clears the existing ratio.Definition TGeoElement.cxx:695; TGeoElementRN::fTG_SDouble_t fTG_SDefinition TGeoElement.h:144; TGeoElementRN::ENDFCodeInt_t ENDFCode() const overrideDefinition TGeoElement.h:169; TGeoElementTableTable of elements.Definition TGeoElement.h:398; TGeoElementTable::operator=TGeoElementTable & operator=(const TGeoElementTable &)assignment operatorDefinition TGeoElement.cxx:1022; TGeoElementTable::HasRNElementsBool_t HasRNElements() constDefinition TGeoElement.h:440; TGeoElementTable::ExportElementsRNvoid ExportElementsRN(const char *filename="""")Export radionuclides in a file.Definition TGeoElement.cxx:1303; TGeoElementTable::fListRNTObjArray * fListRNDefinition TGeoElement.h:405; TGeoElementTable::fNisotopesInt_t fNisotopesDefinition TGeoElement.h:403; TGeoElementTable::AddIsotopevoid AddIsotope(TGeoIsotope *isotope)Add isotope to the table.Definition TGeoElement.cxx:1109; TGeoElementTable::fElementsRNElementRNMap_t fElementsRNDefinition TGeoElement.h:41",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:69017,Clear,Clears,69017,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Clear'],['Clears']
Usability,EmpDist.h. ◆ LowerBin(). double TUnuranEmpDist::LowerBin ; (; ); const. inline . Min value of binned data (return 0 for unbinned data) ; Definition at line 125 of file TUnuranEmpDist.h. ◆ NDim(). unsigned int TUnuranEmpDist::NDim ; (; ); const. inline . Number of data dimensions. ; Definition at line 136 of file TUnuranEmpDist.h. ◆ operator=(). TUnuranEmpDist & TUnuranEmpDist::operator= ; (; const TUnuranEmpDist & ; rhs). Assignment operator. ; Definition at line 108 of file TUnuranEmpDist.cxx. ◆ Streamer(). void TUnuranEmpDist::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TUnuranBaseDist. ◆ StreamerNVirtual(). void TUnuranEmpDist::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 147 of file TUnuranEmpDist.h. ◆ UpperBin(). double TUnuranEmpDist::UpperBin ; (; ); const. inline . upper value of binned data (return 0 for unbinned data) ; Definition at line 131 of file TUnuranEmpDist.h. Member Data Documentation. ◆ fBinned. bool TUnuranEmpDist::fBinned. private . flag for binned/unbinned data ; Definition at line 145 of file TUnuranEmpDist.h. ◆ fData. std::vector<double> TUnuranEmpDist::fData. private . pointer to the data vector (used for generation from un-binned data) ; Definition at line 141 of file TUnuranEmpDist.h. ◆ fDim. unsigned int TUnuranEmpDist::fDim. private . data dimensionality ; Definition at line 142 of file TUnuranEmpDist.h. ◆ fMax. double TUnuranEmpDist::fMax. private . max values (used in the binned case) ; Definition at line 144 of file TUnuranEmpDist.h. ◆ fMin. double TUnuranEmpDist::fMin. private . min values (used in the binned case) ; Definition at line 143 of file TUnuranEmpDist.h. Libraries for TUnuranEmpDist:. [legend]; The documentation for this class was generated from the following files:; math/unuran/inc/TUnuranEmpDist.h; math/unuran/src/TUnuranEmpDist.cxx. TUnuranEmpDist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranEmpDist.html:9160,Guid,Guide,9160,doc/master/classTUnuranEmpDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranEmpDist.html,1,['Guid'],['Guide']
Usability,"Entries, Long64_t firstentry=0)Make a projection of a tree using selections.Definition TTree.cxx:7498; TTree::SetCacheEntryRangevirtual Int_t SetCacheEntryRange(Long64_t first, Long64_t last)interface to TTreeCache to set the cache entry rangeDefinition TTree.cxx:8831; TTree::GetMaxTreeSizestatic Long64_t GetMaxTreeSize()Static function which returns the tree file size limit in bytes.Definition TTree.cxx:6265; TTree::fCacheDoClusterPrefetchbool fCacheDoClusterPrefetch! true if cache is prefetching whole clustersDefinition TTree.h:140; TTree::SetBranchAddressImpInt_t SetBranchAddressImp(TBranch *branch, void *addr, TBranch **ptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8445; TTree::SetAliasvirtual bool SetAlias(const char *aliasName, const char *aliasFormula)Set a tree variable alias.Definition TTree.cxx:8141; TTree::GetTimerIntervalvirtual Int_t GetTimerInterval() constDefinition TTree.h:554; TTree::CopyAddressesvirtual void CopyAddresses(TTree *, bool undo=false)Set branch addresses of passed tree equal to ours.Definition TTree.cxx:3299; TTree::SetScanFieldvirtual void SetScanField(Int_t n=50)Sets the default maximum number of lines to be shown before <CR> when calling Scan().Definition TTree.h:691; TTree::TTreeTTree(const TTree &tt)=delete; TTree::fMaxEntriesLong64_t fMaxEntriesMaximum number of entries in case of circular buffers.Definition TTree.h:97; TTree::SetBranchAddressInt_t SetBranchAddress(const char *bname, T **add, TBranch **ptr=nullptr)Definition TTree.h:628; TTree::BranchTBranch * Branch(const char *name, char *address, const char *leaflist, Int_t bufsize=32000)Definition TTree.h:379; TTree::DropBuffersvirtual void DropBuffers(Int_t nbytes)Drop branch buffers to accommodate nbytes below MaxVirtualsize.Definition TTree.cxx:4531; TTree::GetListOfFriendsvirtual TList * GetListOfFriends() constDefinition TTree.h:530; TTree::Refreshvirtual void Refresh()Refresh contents of this tree and its branches from the current stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:84510,undo,undo,84510,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['undo'],['undo']
Usability,"Entry,; TGFileDialog, etc. It is a little wrapper around the powerful; TString class and used for single line texts. For multi line texts; use TGText. Function Members (Methods); public:. TGTextBuffer(); TGTextBuffer(Int_t length); virtual~TGTextBuffer(); voidAddText(Int_t pos, const char* text); voidAddText(Int_t pos, const char* text, Int_t length); static TClass*Class(); voidClear(); UInt_tGetBufferLength() const; const char*GetString() const; UInt_tGetTextLength() const; virtual TClass*IsA() const; voidRemoveText(Int_t pos, Int_t length); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGTextBuffer(const TGTextBuffer& tb); TGTextBuffer&operator=(const TGTextBuffer& tb). Data Members; private:. TString*fBuffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextBuffer(const TGTextBuffer& tb); { }. TGTextBuffer& operator=(const TGTextBuffer& tb); {if(this!=&tb) fBuffer=tb.fBuffer; return *this;}. TGTextBuffer(); { }. TGTextBuffer(Int_t length); { }. virtual ~TGTextBuffer(); { delete fBuffer; }. UInt_t GetTextLength() const; { return fBuffer->Length(); }. UInt_t GetBufferLength() const; { return fBuffer->Capacity(); }. const char * GetString() const; { return fBuffer->Data(); }. void AddText(Int_t pos, const char* text); { fBuffer->Insert(pos, text); }. void AddText(Int_t pos, const char* text, Int_t length); { fBuffer->Insert(pos, text, length); }. void RemoveText(Int_t pos, Int_t length); { fBuffer->Remove(pos, length); }. void Clear(); { fBuffer->Remove(0, fBuffer->Length()); }. » Author: Fons Rademakers 05/05/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextBuffer.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextBuffer.html:1928,Clear,Clear,1928,root/html528/TGTextBuffer.html,https://root.cern,https://root.cern/root/html528/TGTextBuffer.html,1,['Clear'],['Clear']
Usability,"Entry,; TGFileDialog, etc. It is a little wrapper around the powerful; TString class and used for single line texts. For multi line texts; use TGText. Function Members (Methods); public:. TGTextBuffer(); TGTextBuffer(Int_t length); virtual~TGTextBuffer(); voidAddText(Int_t pos, const char* text); voidAddText(Int_t pos, const char* text, Int_t length); static TClass*Class(); voidClear(); UInt_tGetBufferLength() const; const char*GetString() const; UInt_tGetTextLength() const; virtual TClass*IsA() const; voidRemoveText(Int_t pos, Int_t length); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGTextBuffer(const TGTextBuffer& tb); TGTextBuffer&operator=(const TGTextBuffer& tb). Data Members; private:. TString*fBuffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextBuffer(const TGTextBuffer& tb); { }. TGTextBuffer& operator=(const TGTextBuffer& tb); {if(this!=&tb) fBuffer=tb.fBuffer; return *this;}. TGTextBuffer(); { }. TGTextBuffer(Int_t length); { }. virtual ~TGTextBuffer(); { delete fBuffer; }. UInt_t GetTextLength() const; { return fBuffer->Length(); }. UInt_t GetBufferLength() const; { return fBuffer->Capacity(); }. const char * GetString() const; { return fBuffer->Data(); }. void AddText(Int_t pos, const char* text); { fBuffer->Insert(pos, text); }. void AddText(Int_t pos, const char* text, Int_t length); { fBuffer->Insert(pos, text, length); }. void RemoveText(Int_t pos, Int_t length); { fBuffer->Remove(pos, length); }. void Clear(); { fBuffer->Remove(0, fBuffer->Length()); }. » Author: Fons Rademakers 05/05/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextBuffer.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGTextBuffer.html:1928,Clear,Clear,1928,root/html530/TGTextBuffer.html,https://root.cern,https://root.cern/root/html530/TGTextBuffer.html,1,['Clear'],['Clear']
Usability,"Entry,; TGFileDialog, etc. It is a little wrapper around the powerful; TString class and used for single line texts. For multi line texts; use TGText. Function Members (Methods); public:. TGTextBuffer(); TGTextBuffer(Int_t length); virtual~TGTextBuffer(); voidAddText(Int_t pos, const char* text); voidAddText(Int_t pos, const char* text, Int_t length); static TClass*Class(); voidClear(); UInt_tGetBufferLength() const; const char*GetString() const; UInt_tGetTextLength() const; virtual TClass*IsA() const; voidRemoveText(Int_t pos, Int_t length); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGTextBuffer(const TGTextBuffer& tb); TGTextBuffer&operator=(const TGTextBuffer& tb). Data Members; private:. TString*fBuffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextBuffer(const TGTextBuffer& tb); { }. TGTextBuffer& operator=(const TGTextBuffer& tb); {if(this!=&tb) fBuffer=tb.fBuffer; return *this;}. TGTextBuffer(); { }. TGTextBuffer(Int_t length); { }. virtual ~TGTextBuffer(); { delete fBuffer; }. UInt_t GetTextLength() const; { return fBuffer->Length(); }. UInt_t GetBufferLength() const; { return fBuffer->Capacity(); }. const char * GetString() const; { return fBuffer->Data(); }. void AddText(Int_t pos, const char* text); { fBuffer->Insert(pos, text); }. void AddText(Int_t pos, const char* text, Int_t length); { fBuffer->Insert(pos, text, length); }. void RemoveText(Int_t pos, Int_t length); { fBuffer->Remove(pos, length); }. void Clear(); { fBuffer->Remove(0, fBuffer->Length()); }. » Author: Fons Rademakers 05/05/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextBuffer.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTextBuffer.html:1928,Clear,Clear,1928,root/html532/TGTextBuffer.html,https://root.cern,https://root.cern/root/html532/TGTextBuffer.html,1,['Clear'],['Clear']
Usability,"EntryThe first entry of the range that the task will process. This method might be called multiple times per thread per event-loop. . Reimplemented in ROOT::RDF::RArrowDS, ROOT::Experimental::RNTupleDS, and ROOT::Internal::RDF::RRootDS.; Definition at line 210 of file RDataSource.hxx. ◆ SetEntry(). virtual bool ROOT::RDF::RDataSource::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). pure virtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, ROOT::RDF::RTrivialDS, and ROOT::Experimental::RNTupleDS. ◆ SetNSlots(). virtual void ROOT::RDF::RDataSource::SetNSlots ; (; unsigned int ; nSlots). pure virtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implemented in ROOT::Internal::RDF::RVecDS< ColumnTypes >, ROOT::RDF::RArrowDS, ROOT::RDF::RCsvDS, ROOT::RDF::RLazyDS< ColumnTypes >, ROOT::Experimental::RNTupleDS, ROOT::Internal::RDF::RRootDS, ROOT::RDF::RSqliteDS, and ROOT::RDF::RTrivialDS. The documentation for this class was generated from the following file:; tree/dataframe/inc/ROOT/RDataSource.hxx. ROOTRDFRDataSource. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html:13783,simpl,simplify,13783,doc/master/classROOT_1_1RDF_1_1RDataSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RDataSource.html,2,"['Guid', 'simpl']","['Guide', 'simplify']"
Usability,"EnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:2091,Clear,Clear,2091,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,6,['Clear'],['Clear']
Usability,"Env_tEnviron< Iter_t > Env_tDefinition TCollectionProxyInfo.h:760; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::sizestatic void * size(void *env)Definition TCollectionProxyInfo.h:770; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::objectstatic PCont_t object(void *ptr)Definition TCollectionProxyInfo.h:767; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::PEnv_tEnv_t * PEnv_tDefinition TCollectionProxyInfo.h:761; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::Cont_tBitset_t Cont_tDefinition TCollectionProxyInfo.h:757; ROOT::Detail::TCollectionProxyInfo::TypeSmall helper to encapsulate basic data accesses for all STL continers.Definition TCollectionProxyInfo.h:295; ROOT::Detail::TCollectionProxyInfo::Type::fgLargeIteratorstatic const bool fgLargeIteratorDefinition TCollectionProxyInfo.h:359; ROOT::Detail::TCollectionProxyInfo::Type::clearstatic void * clear(void *env)Definition TCollectionProxyInfo.h:314; ROOT::Detail::TCollectionProxyInfo::Type::destructstatic void destruct(void *what, size_t size)Definition TCollectionProxyInfo.h:353; ROOT::Detail::TCollectionProxyInfo::Type::firststatic void * first(void *env)Definition TCollectionProxyInfo.h:318; ROOT::Detail::TCollectionProxyInfo::Type::sizestatic void * size(void *env)Definition TCollectionProxyInfo.h:309; ROOT::Detail::TCollectionProxyInfo::Type::Iter_tT::iterator Iter_tDefinition TCollectionProxyInfo.h:297; ROOT::Detail::TCollectionProxyInfo::Type::Cont_tT Cont_tDefinition TCollectionProxyInfo.h:296; ROOT::Detail::TCollectionProxyInfo::Type::PValue_tValue_t * PValue_tDefinition TCollectionProxyInfo.h:302; ROOT::Detail::TCollectionProxyInfo::Type::PCont_tCont_t * PCont_tDefinition TCollectionProxyInfo.h:301; ROOT::Detail::TCollectionProxyInfo::Type::nextstatic void * next(void *env)Definition TCollectionProxyInfo.h:331; ROOT::Detail::TCollectionProxyInfo::Type::Valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:52850,clear,clearstatic,52850,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,2,['clear'],"['clear', 'clearstatic']"
Usability,"Equal(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&RooStats::SimpleInterval::operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:5402,Simpl,SimpleInterval,5402,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"Error (-4) : Internal error (could not find the type corresponding to a data type number); kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. In addition this can be multiplexed with the two bits:; kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode. This bits can be masked out by using kDecomposedObjMask . Definition at line 2867 of file TTree.cxx. ◆ Class(). static TClass * TTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 659 of file TTree.h. ◆ CloneTree(). TTree * TTree::CloneTree ; (; Long64_t ; nentries = -1, . Option_t * ; option = """" . ). virtual . Create a clone of this tree and copy nentries. ; By default copy all entries. The compression level of the cloned tree is set to the destination file's compression level.; NOTE: Only active branches are copied. See TTree::SetBranchStatus for more information and usage regarding the (de)activation of branches. More examples are provided in the tut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:102998,usab,usable,102998,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['usab'],['usable']
Usability,"Error (-4) : Internal error (could not find the type corresponding to a data type number); kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. In addition this can be multiplexed with the two bits:; kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode. This bits can be masked out by using kDecomposedObjMask . Definition at line 2867 of file TTree.cxx. ◆ Class(). static TClass * TTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 705 of file TTree.h. ◆ CloneTree(). TTree * TTree::CloneTree ; (; Long64_t ; nentries = -1, . Option_t * ; option = """" . ). virtual . Create a clone of this tree and copy nentries. ; By default copy all entries. The compression level of the cloned tree is set to the destination file's compression level.; NOTE: Only active branches are copied. See TTree::SetBranchStatus for more information and usage regarding the (de)activation of branches. More examples are provided in the tut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:103171,usab,usable,103171,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['usab'],['usable']
Usability,"Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeatures:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/ROOT/TIOFeatures.hxx; tree/tree/src/TIOFeatures.cxx. ROOTTIOFeatures. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:7768,Guid,Guide,7768,doc/master/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html,1,['Guid'],['Guide']
Usability,"Error(""ReadFile"",""Cannot open file: %s"",filename);; 7576 return 0;; 7577 }; 7578 const char* ext = strrchr(filename, '.');; 7579 if(ext && ((strcmp(ext, "".csv"") == 0) || (strcmp(ext, "".CSV"") == 0)) && delimiter == ' ') {; 7580 delimiter = ',';; 7581 }; 7582 return ReadStream(in, branchDescriptor, delimiter);; 7583}; 7584 ; 7585////////////////////////////////////////////////////////////////////////////////; 7586/// Determine which newline this file is using.; 7587/// Return '\\r' for Windows '\\r\\n' as that already terminates.; 7588 ; 7589char TTree::GetNewlineValue(std::istream &inputStream); 7590{; 7591 Long_t inPos = inputStream.tellg();; 7592 char newline = '\n';; 7593 while(true) {; 7594 char c = 0;; 7595 inputStream.get(c);; 7596 if(!inputStream.good()) {; 7597 Error(""ReadStream"",""Error reading stream: no newline found."");; 7598 return 0;; 7599 }; 7600 if(c == newline) break;; 7601 if(c == '\r') {; 7602 newline = '\r';; 7603 break;; 7604 }; 7605 }; 7606 inputStream.clear();; 7607 inputStream.seekg(inPos);; 7608 return newline;; 7609}; 7610 ; 7611////////////////////////////////////////////////////////////////////////////////; 7612/// Create or simply read branches from an input stream.; 7613///; 7614/// \see reference information for TTree::ReadFile; 7615 ; 7616Long64_t TTree::ReadStream(std::istream& inputStream, const char *branchDescriptor, char delimiter); 7617{; 7618 char newline = 0;; 7619 std::stringstream ss;; 7620 std::istream *inTemp;; 7621 Long_t inPos = inputStream.tellg();; 7622 if (!inputStream.good()) {; 7623 Error(""ReadStream"",""Error reading stream"");; 7624 return 0;; 7625 }; 7626 if (inPos == -1) {; 7627 ss << std::cin.rdbuf();; 7628 newline = GetNewlineValue(ss);; 7629 inTemp = &ss;; 7630 } else {; 7631 newline = GetNewlineValue(inputStream);; 7632 inTemp = &inputStream;; 7633 }; 7634 std::istream& in = *inTemp;; 7635 Long64_t nlines = 0;; 7636 ; 7637 TBranch *branch = nullptr;; 7638 Int_t nbranches = fBranches.GetEntries();; 7639 if (nbranch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:299369,clear,clear,299369,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['clear']
Usability,"Error.h>; 16 ; 17namespace ROOT {; 18 ; 19namespace Fit {; 20 ; 21/// set a double side limit,; 22/// if low == up the parameter is fixed if low > up the limits are removed; 23/// The current parameter value should be within the given limits [low,up].; 24/// If the value is outside the limits, then a new parameter value is set to = (up+low)/2; 25void ParameterSettings::SetLimits(double low, double up); 26{; 27 ; 28 if (low > up) {; 29 RemoveLimits();; 30 return;; 31 }; 32 if (low == up && low == fValue) {; 33 Fix();; 34 return;; 35 }; 36 if (low > fValue || up < fValue) {; 37 MATH_INFO_MSG(""ParameterSettings"",; 38 ""lower/upper bounds outside current parameter value. The value will be set to (low+up)/2 "");; 39 fValue = 0.5 * (up + low);; 40 }; 41 fLowerLimit = low;; 42 fUpperLimit = up;; 43 fHasLowerLimit = true;; 44 fHasUpperLimit = true;; 45}; 46 ; 47} // end namespace Fit; 48 ; 49} // end namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; ParameterSettings.h; ROOT::Fit::ParameterSettings::RemoveLimitsvoid RemoveLimits()remove all limitDefinition ParameterSettings.h:140; ROOT::Fit::ParameterSettings::fLowerLimitdouble fLowerLimitlower parameter limitDefinition ParameterSettings.h:152; ROOT::Fit::ParameterSettings::fUpperLimitdouble fUpperLimitupper parameter limitDefinition ParameterSettings.h:153; ROOT::Fit::ParameterSettings::fHasUpperLimitbool fHasUpperLimitflag to control upper parameter limitDefinition ParameterSettings.h:155; ROOT::Fit::ParameterSettings::fHasLowerLimitbool fHasLowerLimitflag to control lower parameter limitDefinition ParameterSettings.h:154; ROOT::Fit::ParameterSettings::SetLimitsvoid SetLimits(double low, double up)set a double side limit, if low == up the parameter is fixed if low > up the limits are removed The c...Definition ParameterSettings.cxx:25; ROOT::Fit::ParameterSettings::fValuedouble fVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ParameterSettings_8cxx_source.html:1692,simpl,simply,1692,doc/master/ParameterSettings_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ParameterSettings_8cxx_source.html,1,['simpl'],['simply']
Usability,"ErrorHandlerFunc_t SetErrorHandler(ErrorHandlerFunc_t newhandler)Set an errorhandler function. Returns the old handler.Definition TError.cxx:90; gPrintViaErrorHandlerBool_t gPrintViaErrorHandlerDefinition TError.cxx:33; TError.h; kErrorconstexpr Int_t kErrorDefinition TError.h:47; kFatalconstexpr Int_t kFatalDefinition TError.h:50; kWarningconstexpr Int_t kWarningDefinition TError.h:46; ErrorHandlerFunc_tvoid(* ErrorHandlerFunc_t)(int level, Bool_t abort, const char *location, const char *msg)Definition TError.h:71; kBreakconstexpr Int_t kBreakDefinition TError.h:48; kInfoconstexpr Int_t kInfoDefinition TError.h:45; gErrorIgnoreLevelInt_t gErrorIgnoreLevelError handling routines.Definition TError.cxx:31; kSysErrorconstexpr Int_t kSysErrorDefinition TError.h:49; kUnsetconstexpr Int_t kUnsetDefinition TError.h:43; va_copy#define va_copy(x, y)Definition civetweb.c:1000; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::GetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler()Definition TError.cxx:51; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. corefoundationsrcTError.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:12084,simpl,simple,12084,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"EtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:46320,learn,learning,46320,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,Etype. private . Kernel type to use for KDE. ; Definition at line 188 of file PDF.h. ◆ fKDEtypeString. TString TMVA::PDF::fKDEtypeString. private . strings used to read definitions ; Definition at line 183 of file PDF.h. ◆ fLogger. MsgLogger* TMVA::PDF::fLogger. mutableprivate . ! message logger ; Definition at line 199 of file PDF.h. ◆ fMaxNsmooth. Int_t TMVA::PDF::fMaxNsmooth. private . Max number of smoothing iterations. ; Definition at line 169 of file PDF.h. ◆ fMinNsmooth. Int_t TMVA::PDF::fMinNsmooth. private . Min number of smoothing iterations. ; Definition at line 168 of file PDF.h. ◆ fNormalize. Bool_t TMVA::PDF::fNormalize. private . normalize histogram (false for cumulative distribution used in GaussTranform) ; Definition at line 196 of file PDF.h. ◆ fNsmooth. Int_t TMVA::PDF::fNsmooth. private . Min number of smoothing iterations. ; Definition at line 167 of file PDF.h. ◆ fNSmoothHist. TH1* TMVA::PDF::fNSmoothHist. private . number of smooth for each bin ; Definition at line 170 of file PDF.h. ◆ fPDFHist. TH1* TMVA::PDF::fPDFHist. private . the high-binned histogram corresponding to the PDF ; Definition at line 174 of file PDF.h. ◆ fPDFName. TString TMVA::PDF::fPDFName. private . for output ; Definition at line 166 of file PDF.h. ◆ fReadingVersion. UInt_t TMVA::PDF::fReadingVersion. private . the TMVA version of the weight file ; Definition at line 193 of file PDF.h. ◆ fSpline. TSpline* TMVA::PDF::fSpline. private . ! the used spline type ; Definition at line 173 of file PDF.h. ◆ fSuffix. TString TMVA::PDF::fSuffix. private . ! the suffix for options ; Definition at line 198 of file PDF.h. ◆ fUseHistogram. Bool_t TMVA::PDF::fUseHistogram. private . Definition at line 155 of file PDF.h. Libraries for TMVA::PDF:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDF.h; tmva/tmva/src/PDF.cxx. TMVAPDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:32093,Guid,Guide,32093,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,1,['Guid'],['Guide']
Usability,"EvalLikeMod7 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; em, . Double_t ; sde, . Double_t ; b, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 7: background known/Efficiency Gauss. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1366 of file TRolke.cxx. ◆ EvalMonomial(). Double_t TRolke::EvalMonomial ; (; Double_t ; x, . const Int_t ; coef[], . Int_t ; N . ). staticprivate . Evaluate mononomial. ; Definition at line 1430 of file TRolke.cxx. ◆ EvalPolynomial(). Double_t TRolke::EvalPolynomial ; (; Double_t ; x, . const Int_t ; coef[], . Int_t ; N . ). staticprivate . Evaluate polynomial. ; Definition at line 1413 of file TRolke.cxx. ◆ GetBackground(). Double_t TRolke::GetBackground ; (; ). private . Return a simple background value (estimate/truth) given the pre-specified model. ; Definition at line 418 of file TRolke.cxx. ◆ GetBounding(). bool TRolke::GetBounding ; (; ); const. inline . Definition at line 178 of file TRolke.h. ◆ GetCL(). Double_t TRolke::GetCL ; (; ); const. inline . Definition at line 121 of file TRolke.h. ◆ GetCriticalNumber(). bool TRolke::GetCriticalNumber ; (; Int_t & ; ncrit, . Int_t ; maxtry = -1 . ). get the value of x corresponding to rejection of the null hypothesis. ; This means a lower limit >0 with the pre-specified Confidence Level. Optionally give maxtry; the maximum value of x to try. Of not, or if maxtry<0 an automatic mode is used. ; Definition at line 547 of file TRolke.cxx. ◆ GetLimits(). bool TRolke::GetLimits ; (; Double_t & ; low, . Double_t & ; high . ). Calculate and get the upper and lower limits for the pre-specified model. ; Definition at line 374 of file TRolke.cxx. ◆ GetLimitsML(). bool TRolke::GetLimitsML ; (; Double_t & ; low, . Double_t & ; high, . Int_t & ; out_x . ). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:29845,simpl,simple,29845,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['simpl'],['simple']
Usability,"EveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidTEveCaloViz::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo3D.html:2471,Clear,ClearProjectedList,2471,root/html528/TEveCalo3D.html,https://root.cern,https://root.cern/root/html528/TEveCalo3D.html,12,['Clear'],['ClearProjectedList']
Usability,"EveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyParentAsMaste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackList.html:2216,Clear,ClearStamps,2216,root/html528/TEveTrackList.html,https://root.cern,https://root.cern/root/html528/TEveTrackList.html,1,['Clear'],['ClearStamps']
Usability,"EveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAny",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePlot3D.html:2049,Clear,ClearStamps,2049,root/html528/TEvePlot3D.html,https://root.cern,https://root.cern/root/html528/TEvePlot3D.html,1,['Clear'],['ClearStamps']
Usability,"EveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveTrackList::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackListProjected.html:2126,Clear,ClearStamps,2126,root/html528/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html528/TEveTrackListProjected.html,1,['Clear'],['ClearStamps']
Usability,"EveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidCloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompound.html:2106,Clear,ClearStamps,2106,root/html528/TEveCompound.html,https://root.cern,https://root.cern/root/html528/TEveCompound.html,1,['Clear'],['ClearStamps']
Usability,"EveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTEveCompound::CloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompoundProjected.html:2087,Clear,ClearStamps,2087,root/html528/TEveCompoundProjected.html,https://root.cern,https://root.cern/root/html528/TEveCompoundProjected.html,1,['Clear'],['ClearStamps']
Usability,"EveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTriangleSet(Int_t nv, Int_t nt, Bool_t norms = kFALSE, Bool_t cols = kFALSE); Constructor. ~TEveTriangleSet(); Destructor. void GenerateTriangleNormals(); Generate triangle normals via cross product of triangle edges. void GenerateRandomColors(); Assign random colors to all triangles. void GenerateZNormalColors(Float_t fac = 20, Int_t min = -20, Int_t max = 20, Bool_t interp = kFALSE, Bool_t wrap = kFALSE); Generate triangle colors by the z-component of the normal.; Current palette is taken from gStyle. void ComputeBBox(); Compute bounding box.; Virtual from TAttBBox. void Paint(Option_t* option = """"); Paint this object. Only direct rendering is supported. TEveTriangleSet* ReadTrivialFile(const char* file); Read a simple ascii input file describing vertices and triangles. TEveTriangleSet(const TEveTriangleSet& ). TEveTriangleSet& operator=(const TEveTriangleSet& ). Bool_t CanEditMainTransparency() const; { return kTRUE; }. Int_t GetNVerts() const; { return fNVerts; }. Int_t GetNTrings() const; { return fNTrings; }. Float_t* Vertex(Int_t i); { return &(fVerts[3*i]); }. Int_t* Triangle(Int_t i); { return &(fTrings[3*i]); }. Float_t* TriangleNormal(Int_t i); { return &(fTringNorms[3*i]); }. UChar_t* TriangleColor(Int_t i); { return &(fTringCols[3*i]); }. void SetVertex(Int_t i, Float_t x, Float_t y, Float_t z); { Float_t* v = Vertex(i); v[0] = x; v[1] = y; v[2] = z; }. void SetTriangle(Int_t i, Int_t v0, Int_t v1, Int_t v2); { Int_t* t = Triangle(i); t[0] = v0; t[1] = v1; t[2] = v2; }. void SetTriangleColor(Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a = 255); { UChar_t* c = TriangleColor(i); c[0] = r; c[1] = g; c[2] = b; c[3] = a; }. void SetTransparency(Char_t tr); { SetMainTransparency(tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTriangleSet.html:22924,simpl,simple,22924,root/html602/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html602/TEveTriangleSet.html,2,['simpl'],['simple']
Usability,"EveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tCalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:2746,Clear,ClearStamps,2746,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,3,['Clear'],['ClearStamps']
Usability,"EveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); TGCompositeFrame*StartEmbedding(); TEveWindowFrame*StopEmbedding(const char* name = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowSlot(const char* n = ""TEveWindowSlot"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowSlot.html:17241,Undo,UndockWindow,17241,root/html602/TEveWindowSlot.html,https://root.cern,https://root.cern/root/html602/TEveWindowSlot.html,4,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"EveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Pixel_tfgCurrentBackgroundColor; static UInt_tfgMainFrameDefHeight; static UInt_tfgMainFrameDefWidth; static Pixel_tfgMiniBarBackgroundColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TEveWindow(); Destructor. void PreDeleteElement(); Called before the element is deleted, thus offering the last chance; to detach from acquired resources and from the framework itself.; Here the request is just passed to TEveManager.; If you override it, make sure to call base-class version. void PreUndock(); Virtual function called before a window is undocked. void PostDock(); Virtual function called after a window is docked. void NameTitleChanged(); Name or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindow.html:21147,undo,undocked,21147,root/html528/TEveWindow.html,https://root.cern,https://root.cern/root/html528/TEveWindow.html,4,['undo'],['undocked']
Usability,"EveGeoTopNode. ◆ StreamerNVirtual(). void TEveGeoNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TEveGeoNode.h. ◆ UpdateNode(). void TEveGeoNode::UpdateNode ; (; TGeoNode * ; node). Updates all reve-browsers having the node in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 224 of file TEveGeoNode.cxx. ◆ UpdateVolume(). void TEveGeoNode::UpdateVolume ; (; TGeoVolume * ; volume). Updates all reve-browsers having the volume in their contents. ; All 3D-pads updated if any change found.; Should (could?) be optimized with some assumptions about volume/node structure (search for parent, know the same node can not reoccur on lower level once found). ; Definition at line 246 of file TEveGeoNode.cxx. ◆ WriteExtract(). void TEveGeoNode::WriteExtract ; (; const char * ; name, . Bool_t ; leafs_only . ). Write the shape tree as TEveGeoShapeExtract to current directory. ; Definition at line 302 of file TEveGeoNode.cxx. Friends And Related Symbol Documentation. ◆ TEveGeoNodeEditor. friend class TEveGeoNodeEditor. friend . Definition at line 31 of file TEveGeoNode.h. Member Data Documentation. ◆ fgCSGExportNSeg. Int_t TEveGeoNode::fgCSGExportNSeg = 64. staticprotected . Definition at line 40 of file TEveGeoNode.h. ◆ fgTemporaryStore. std::list< TGeoShape * > TEveGeoNode::fgTemporaryStore. staticprotected . Definition at line 41 of file TEveGeoNode.h. ◆ fNode. TGeoNode* TEveGeoNode::fNode. protected . Definition at line 37 of file TEveGeoNode.h. Libraries for TEveGeoNode:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveGeoNode.h; graf3d/eve/src/TEveGeoNode.cxx. TEveGeoNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:39410,Guid,Guide,39410,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['Guid'],['Guide']
Usability,"EveManager::TExceptionHandler*fExcHandler; Bool_tfFullRedraw; TMap*fGeometries; TMap*fGeometryAliases; TEveScene*fGlobalScene; Bool_tfKeepEmptyCont; TEveGListTreeEditorFrame*fLTEFrame; TFolder*fMacroFolder; Int_tfRedrawDisabled; TTimerfRedrawTimer; Bool_tfResetCameras; TEveSceneList*fScenes; Bool_tfTimerActive; TEveViewerList*fViewers; TMap*fVizDB; Bool_tfVizDBReplace; Bool_tfVizDBUpdate; TEveWindowManager*fWindowManager. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveManager(UInt_t w, UInt_t h, Bool_t map_window = kTRUE, Option_t* opt = ""FI""); Constructor.; If map_window is true, the TEveBrowser window is mapped. Option string is first parsed for the following characters:; V - spawn a default GL viewer. The consumed characters are removed from the options and they; are passed to TEveBrowser for creation of additional plugins. Default options: ""FIV"" - file-browser, command-line, GL-viewer. ~TEveManager(); Destructor. void ClearOrphanage(); Clear the orphanage. TGWindow* GetMainWindow() const; Get the main window, i.e. EVE-browser. TEveViewer* GetDefaultViewer() const; Returns the default viewer - the first one in the fViewers list. TGLViewer* GetDefaultGLViewer() const; Get TGLViewer of the default TEveViewer. TEveGedEditor* GetEditor() const; Returns main object editor. TGStatusBar* GetStatusBar() const; Returns main window status bar. TCanvas* AddCanvasTab(const char* name); Add a new canvas tab. TEveViewer* SpawnNewViewer(const char* name, const char* title = """", Bool_t embed = kTRUE); Create a new GL viewer. TEveScene* SpawnNewScene(const char* name, const char* title = """"); Create a new scene. TMacro* GetMacro(const char* name) const; Find macro in fMacroFolder by name. void EditElement(TEveElement* element); Show element in default editor. void RegisterRedraw3D(); Register a request for 3D redraw. void DoRedraw3D(); Perform 3D redraw of scenes and viewers whose contents has; changed. void FullRedraw3D(Bool_t rese",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveManager.html:5024,Clear,ClearOrphanage,5024,root/html528/TEveManager.html,https://root.cern,https://root.cern/root/html528/TEveManager.html,8,['Clear'],"['Clear', 'ClearOrphanage']"
Usability,"EveTrans.cxx. ◆ Unscale() [1/2]. Double_t TEveTrans::Unscale ; (; ). Remove scaling, make all base vectors of unit length. ; Definition at line 656 of file TEveTrans.cxx. ◆ Unscale() [2/2]. void TEveTrans::Unscale ; (; Double_t & ; sx, . Double_t & ; sy, . Double_t & ; sz . ). Remove scaling, make all base vectors of unit length. ; Definition at line 666 of file TEveTrans.cxx. ◆ ZeroTrans(). void TEveTrans::ZeroTrans ; (; Double_t ; w = 1.0). Reset matrix to zero, only the perspective scaling is set to w (1 by default). ; Definition at line 141 of file TEveTrans.cxx. Friends And Related Symbol Documentation. ◆ TEveTransEditor. friend class TEveTransEditor. friend . Definition at line 29 of file TEveTrans.h. ◆ TEveTransSubEditor. friend class TEveTransSubEditor. friend . Definition at line 28 of file TEveTrans.h. Member Data Documentation. ◆ fA1. Float_t TEveTrans::fA1. mutableprotected . Definition at line 34 of file TEveTrans.h. ◆ fA2. Float_t TEveTrans::fA2. mutableprotected . Definition at line 35 of file TEveTrans.h. ◆ fA3. Float_t TEveTrans::fA3. mutableprotected . Definition at line 36 of file TEveTrans.h. ◆ fAsOK. Bool_t TEveTrans::fAsOK. mutableprotected . Definition at line 37 of file TEveTrans.h. ◆ fEditRotation. Bool_t TEveTrans::fEditRotation. protected . Definition at line 42 of file TEveTrans.h. ◆ fEditScale. Bool_t TEveTrans::fEditScale. protected . Definition at line 43 of file TEveTrans.h. ◆ fEditTrans. Bool_t TEveTrans::fEditTrans. protected . Definition at line 41 of file TEveTrans.h. ◆ fM. Double32_t TEveTrans::fM[16]. protected . Definition at line 32 of file TEveTrans.h. ◆ fUseTrans. Bool_t TEveTrans::fUseTrans. protected . Definition at line 40 of file TEveTrans.h. Libraries for TEveTrans:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTrans.h; graf3d/eve/src/TEveTrans.cxx. TEveTrans. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrans.html:35309,Guid,Guide,35309,doc/master/classTEveTrans.html,https://root.cern,https://root.cern/doc/master/classTEveTrans.html,1,['Guid'],['Guide']
Usability,"EveWindow.h. ◆ SwapWindow(). void TEveWindow::SwapWindow ; (; TEveWindow * ; w). Swap frames with the given window. ; Definition at line 737 of file TEveWindow.cxx. ◆ SwapWindows(). void TEveWindow::SwapWindows ; (; TEveWindow * ; w1, . TEveWindow * ; w2 . ). static . Swap windows w1 and w2. ; They are properly reparented in the eve hierarch as well. Layout is called on both frames. ; Definition at line 1027 of file TEveWindow.cxx. ◆ SwapWindowWithCurrent(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefWidth = 640. staticprotected . Definition at line 223 of file TEveWindow.h. ◆ fgMiniBarBackgroundColor. Pixel_t TEveWindow::fgMiniBarBackgroundColor = 0x80C0A0. staticp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:45967,Undo,UndockWindowDestroySlot,45967,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Undo'],['UndockWindowDestroySlot']
Usability,EveWindowFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveWindowFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveWindowFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 352 of file TEveWindow.h. ◆ DeclFileName(). static const char * TEveWindowFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 352 of file TEveWindow.h. ◆ GetGUICompositeFrame(). TGCompositeFrame * TEveWindowFrame::GetGUICompositeFrame ; (; ). Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ; Throws an exception if the cast fails. ; Definition at line 1329 of file TEveWindow.cxx. ◆ GetGUIFrame(). TGFrame * TEveWindowFrame::GetGUIFrame ; (; ). inlineoverridevirtual . Implements TEveWindow.; Definition at line 348 of file TEveWindow.h. ◆ IsA(). TClass * TEveWindowFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveWindow.; Definition at line 352 of file TEveWindow.h. ◆ operator=(). TEveWindowFrame & TEveWindowFrame::operator= ; (; const TEveWindowFrame & ; ). private . ◆ Streamer(). void TEveWindowFrame::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveWindow. ◆ StreamerNVirtual(). void TEveWindowFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 352 of file TEveWindow.h. Member Data Documentation. ◆ fGUIFrame. TGFrame* TEveWindowFrame::fGUIFrame. protected . Definition at line 342 of file TEveWindow.h. Libraries for TEveWindowFrame:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveWindowFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:47 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:39935,Guid,Guide,39935,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,1,['Guid'],['Guide']
Usability,"Event(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLSurfacePainter(const TGLSurfacePainter&); TGLSurfacePainter(TGLSurfacePainter&&); TGLSurfacePainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. voidClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawContoursProjection() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; voidDrawProjections() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidGenTexMap() const; Bool_tHasProjections() const; Bool_tHasSections() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; Bool_tPreparePalette() const; voidSetNormals(); voidSetSurfaceColor() const; Bool_tTextured() const; char*WindowPointTo3DPoint(Int_t px, Int_t py) const. Data Members; public:. static TGLPlotPainter::ECutAxisIDT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSurfacePainter.html:1810,Clear,ClearBuffers,1810,root/html602/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html602/TGLSurfacePainter.html,2,['Clear'],['ClearBuffers']
Usability,"Event.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // read the tree generated with tree4w. // note that we use ""new"" to create the TFile and TTree objects, because we; // want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree4.root"");; TTree *t4 = (TTree*)f->Get(""t4"");. // create a pointer to an event object for reading the branch values.; Event *event = new Event();; // get two branches and set the branch address; TBranch *bntrack = t4->GetBranch(""fNtrack"");; TBranch *branch = t4->GetBranch(""event_split"");; branch->SetAddress(&event);. Int_t nevent = t4->GetEntries();; Int_t nselected = 0;; Int_t nb = 0;; for (Int_t i=0; i<nevent; i++) {; //read branch ""fNtrack""only; bntrack->GetEntry(i);. // reject events with more than 587 tracks; if (event->GetNtrack() > 587)continue;. // read complete accepted event in memory; nb += t4->GetEntry(i);; nselected++;. // print the first accepted event; if (nselected == 1) t4->Show();; // clear tracks array; event->Clear();; }. if (gROOT->IsBatch()) return;; new TBrowser();; t4->StartViewer();; }; Now, let’s see how the tree looks like in the tree viewer. The tree viewer with tree4 example. You can see the two branches in the tree in the left panel: the event branch is split and hence expands when clicked on. The other branch event not split is not expandable and we can not browse the data members.; The TClonesArray of tracks fTracks is also split because we set the split level to 2. The output on the command line is the result of tree4->Show(). It shows the first entry with more than 587 tracks:; ======> EVENT:26; event_split =; fUniqueID = 0; fBits = 50331648; fType[20] = 116 121 112 101 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; fNtrack = 585; fNseg = 5834; fNvertex = 17; fFlag = 0; fTemperature = 20.044315; fEvtHdr.fEvtNum = 26; fEvtHdr.fRun = 200; fEvtHdr.fDate = 960312; fTracks = 585; fTracks.fUniqueID = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; ...; 12.18 Example 5: I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:581794,clear,clear,581794,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"EventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TGWin32::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 1596 of file TGWin32.cxx. ◆ CloseWindow1(). void TGWin32::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 1604 of file TGWin32.cxx. ◆ ConvertPrimarySelection(). void TGWin32::ConvertPrimary",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57723,Clear,Clear,57723,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['Clear']
Usability,"Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX. ◆ ClearWindow() [2/2]. void TGWin32VirtualXProxy::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX. ◆ CloseDisplay(). void TGWin32VirtualXProxy::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 265 of file TGWin32VirtualXProxy.cxx. ◆ ClosePixmap(). void TGWin32VirtualXProxy::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX. ◆ CloseWindow(). void TGWin32VirtualXProxy::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX. ◆ ConvertPrimarySelection(). void TGWin32VirtualXProxy::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). overridevirtual . Causes a SelectionRequest event to be sent to the current primary selection owner. ; This event specifies the selection property (primary selection), the format into which to convert that data before storing it (target = XA_STRING), the property in which the own",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:56815,Clear,Clears,56815,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,2,['Clear'],"['ClearArea', 'Clears']"
Usability,"Evolution(). void TMVA::GeneticAlgorithm::Evolution ; (; ). virtual . this function is called from ""init"" and controls the evolution of the individuals. ; The function can be overridden to change the parameters for mutation rate sexual reproduction and so on. ; Definition at line 190 of file GeneticAlgorithm.cxx. ◆ GetGeneticPopulation(). GeneticPopulation & TMVA::GeneticAlgorithm::GetGeneticPopulation ; (; ). inline . Definition at line 67 of file GeneticAlgorithm.h. ◆ GetMakeCopies(). Bool_t TMVA::GeneticAlgorithm::GetMakeCopies ; (; ). inline . Definition at line 73 of file GeneticAlgorithm.h. ◆ GetSpread(). Double_t TMVA::GeneticAlgorithm::GetSpread ; (; ); const. inline . Definition at line 69 of file GeneticAlgorithm.h. ◆ HasConverged(). Bool_t TMVA::GeneticAlgorithm::HasConverged ; (; Int_t ; steps = 10, . Double_t ; improvement = 0.1 . ). virtual . gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ; this gives a simple measure of if the fitness of the individuals is converging and no major improvement is to be expected soon. ; Definition at line 260 of file GeneticAlgorithm.cxx. ◆ Init(). void TMVA::GeneticAlgorithm::Init ; (; ). calls evolution, but if it is not the first time. ; If it's the first time, the random population created by the constructor is still not evaluated, .. therefore we wait for the second time init is called. ; Definition at line 101 of file GeneticAlgorithm.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticAlgorithm::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticAlgorithm.h. ◆ Log(). MsgLogger & TMVA::GeneticAlgorithm::Log ; (; ); const. inlineprotected . message logger ; Definition at line 102 of file GeneticAlgorithm.h. ◆ NewFitness(). Double_t TMVA::GeneticAlgorithm::NewFitness ; (; Double_t ; oldValue, . Double_t ; newValue . ). virtual . if the ""fitnessFunction"" is called multiple time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:5512,simpl,simple,5512,doc/master/classTMVA_1_1GeneticAlgorithm.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html,1,['simpl'],['simple']
Usability,"Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor; (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; is divided by the factor). using this function one can increase the stepSize of the mutation when we have; good success (to pass fast through the easy phase-space) and reduce the stepSize; if we are in a difficult ""territory"" of the phase-space. Bool_t HasConverged(Int_t steps = 10, Double_t ratio = 0.1); gives back true if the last ""steps"" steps have lead to an improvement of the; ""fitness"" of the ""individuals"" of at least ""improvement"". this gives a simple measure of if the fitness of the individuals is; converging and no major improvement is to be expected soon. GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0). GeneticPopulation& GetGeneticPopulation(); { return fPopulation; }. Double_t GetSpread() const; { return fSpread; }. void SetSpread(Double_t s); { fSpread = s; }. void SetMakeCopies(Bool_t s); { fMakeCopies = s; }. Bool_t GetMakeCopies(); { return fMakeCopies; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: GeneticAlgorithm.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-26 20:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html:5154,simpl,simple,5154,root/html528/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html,1,['simpl'],['simple']
Usability,"Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:3597,simpl,simple,3597,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['simpl'],['simple']
Usability,"Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the comman",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:23121,Undo,UndoName,23121,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,6,['Undo'],['UndoName']
Usability,"ExitOnExceptionEExitOnException ExitOnException(EExitOnException opt=kExit)Set the exit on exception option.Definition TApplication.cxx:614; TApplication::KeyPressedvirtual void KeyPressed(Int_t key)Emit signal when console keyboard key was pressed.Definition TApplication.cxx:1949; TApplication::ProcessLinevirtual Longptr_t ProcessLine(const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr)Process a single command line, either a C++ statement or an interpreter command starting with a ""....Definition TApplication.cxx:1565; TApplication::fgApplicationsstatic TList * fgApplicationsDefinition TApplication.h:82; TApplication::Closestatic void Close(TApplication *app)Static function used to close a remote application.Definition TApplication.cxx:2070; TApplication::SetEchoModevirtual void SetEchoMode(Bool_t mode)Set console echo mode:Definition TApplication.cxx:1968; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const char *line)Emit signal when a line has been processed.Definition TApplication.cxx:1941; TApplication::ClearInputFilesvoid ClearInputFiles()Clear list containing macro files passed as program arguments.Definition TApplication.cxx:318; TApplication::fAppImpTApplicationImp * fAppImpDefinition TApplication.h:60; TApplication::EExitOnExceptionEExitOnExceptionDefinition TApplication.h:51; TApplication::kAbort@ kAbortDefinition TApplication.h:54; TApplication::kExit@ kExitDefinition TApplication.h:53; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::InitializeGraphicsvoid InitializeGraphics(Bool_t only_web=kFALSE)Initialize the graphics environment.Definition TApplication.cxx:244; TApplication::Openvirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:87127,guid,guide,87127,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['guid'],['guide']
Usability,"Extend() && fXaxis->IsAlphanumeric()) fH->LabelsDeflate(""X"");; 4498 if (fYaxis->CanExtend() && fYaxis->IsAlphanumeric()) fH->LabelsDeflate(""Y"");; 4499 if (fZaxis->CanExtend() && fZaxis->IsAlphanumeric()) fH->LabelsDeflate(""Z"");; 4500 ; 4501 if (Hoption.Pie) {; 4502 if (fH->GetDimension() == 1) {; 4503 if (!fPie); 4504 fPie = std::make_unique<TPie>(fH);; 4505 fPie->Paint(option);; 4506 } else {; 4507 Error(""Paint"", ""Option PIE is for 1D histograms only"");; 4508 }; 4509 return;; 4510 } else {; 4511 fPie.reset();; 4512 }; 4513 ; 4514 fXbuf.resize(kNMAX);; 4515 fYbuf.resize(kNMAX);; 4516 if (fH->GetDimension() > 2) {; 4517 PaintH3(option);; 4518 fH->SetMinimum(minsav);; 4519 if (Hoption.Func) {; 4520 Hoption_t hoptsave = Hoption;; 4521 Hparam_t hparsave = Hparam;; 4522 PaintFunction(option);; 4523 SetHistogram(hsave);; 4524 Hoption = hoptsave;; 4525 Hparam = hparsave;; 4526 }; 4527 gCurrentHist = oldhist;; 4528 fXbuf.clear();; 4529 fYbuf.clear();; 4530 return;; 4531 }; 4532 TView *view = gPad->GetView();; 4533 if (view) {; 4534 if (!Hoption.Lego && !Hoption.Surf && !Hoption.Tri) {; 4535 delete view;; 4536 gPad->SetView(nullptr);; 4537 }; 4538 }; 4539 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) {; 4540 // In case of 1D histogram, Z axis becomes Y axis.; 4541 Int_t logysav=0, logzsav=0;; 4542 if (fH->GetDimension() == 1) {; 4543 logysav = Hoption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:172269,clear,clear,172269,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"F, 1, V >Struct to solve a linear system using its Cholesky decomposition (N=1) ;  C_solver< F, 2, V >Struct to solve a linear system using its Cholesky decomposition (N=2) ;  C_solver< F, 3, V >Struct to solve a linear system using its Cholesky decomposition (N=3) ;  C_solver< F, 4, V >Struct to solve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:24651,simpl,simplest,24651,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,8,['simpl'],"['simplest', 'simplified']"
Usability,"F, TMatrixFSym and TVectorF. Copy constructors exist to transform these into their double precision equivalent, thereby allowing easy access to decomposition and eigenvalue classes, only available in double precision.; The choice was made not to provide the less frequently used complex matrix classes. If necessary, users can always reformulate the calculation in 2 parts, a real one and an imaginary part. Although, a linear equation involving complex numbers will take about a factor of 8 more computations, the alternative of introducing a set of complex classes in this non-template library would create a major maintenance challenge.; Another choice was to fill in both the upper-right corner and the bottom-left corner of a symmetric matrix. Although most algorithms use only the upper-right corner, implementation of the different matrix views was more straightforward this way. When stored only the upper-right part is written to file.; For a detailed description of the interface, the user should look at the root reference guide at: http://root.cern.ch/root/Reference.html; 14.1 Overview of Matrix Classes; The figure below shows an overview of the classes available in the linear algebra library,libMatrix.so. At the center is the base class TMatrixDBase from which three different matrix classes, TMatrixD, TMatrixDSym and TMatrixDFSparse derive. The user can define customized matrix operations through the classes TElementActionD and TElementsPosActionD. Overview of matrix classes. Reference to different views of the matrix can be created through the classes on the right-hand side, see “Matrix Views”. These references provide a natural connection to vectors.; Matrix decompositions (used in equation solving and matrix inversion) are available through the classes on the left-hand side (see “Matrix Decompositions”). They inherit from the TDecompBase class. The Eigen Analysis is performed through the classes at the top, see “Matrix Eigen Analysis”. In both cases, only some matri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:769413,guid,guide,769413,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"F1.h"" // we'll need this later...; #include ""TFile.h""; #include ""TMath.h""; #include ""TRandom.h""; #include ""TTreeReader.h""; #include ""TTreeReaderArray.h"". void effX() {; TEfficiency* eff; = new TEfficiency(""eff"", ""Moun trigger efficiency"", 100, 0., 10.);. TFile* file; = TFile::Open(""http://root.cern.ch/root/files/tutorials/mockupx.root"");; TTreeReader reader(""MyTree"", file);. TTreeReaderArray<double> raPt(reader, ""muons.fPt"");; TTreeReaderArray<bool> raTriggered(reader, ""muons.fTriggered"");. while (reader.Next()) {; // Select a tag muon between [0..numberOfMuons[.; int tagMuon = gRandom->Integer(raPt.GetSize());; if (raTriggered[tagMuon]) {; for (int iMuon = 0, nMuons = raPt.GetSize(); iMuon < nMuons; ++iMuon) {; // All but the tag muon can be probe muons; if (iMuon != tagMuon) {; // Fill the efficiency object with; // - whether this muon has triggered; // - the pT of this muon.; eff->Fill(???);; }; }; }; }. eff->Draw();; }. . ‹ 7. Using the TTreeReader; up; 9. Fitting By Coding ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:5705,Guid,Guides,5705,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,F::CloneResultAndAction [2/2]. template<typename T > . RResultPtr< T > ROOT::Internal::RDF::CloneResultAndAction ; (; const RResultPtr< T > & ; inptr). friend . ◆ ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper. template<typename T > . friend class ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper. friend . Definition at line 148 of file RResultPtr.hxx. ◆ ROOT::RDF::Experimental::VariationsFor. template<typename T > . template<typename T1 > . ROOT::RDF::Experimental::RResultMap< T1 > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T1 > ; resPtr). friend . ◆ RResultHandle. template<typename T > . friend class RResultHandle. friend . Definition at line 150 of file RResultPtr.hxx. Member Data Documentation. ◆ fActionPtr. template<typename T > . std::shared_ptr<RDFInternal::RActionBase> ROOT::RDF::RResultPtr< T >::fActionPtr. private . Owning pointer to the action that will produce this result. ; Ownership is shared with other copies of this ResultPtr. ; Definition at line 178 of file RResultPtr.hxx. ◆ fLoopManager. template<typename T > . RDFDetail::RLoopManager* ROOT::RDF::RResultPtr< T >::fLoopManager = nullptr. private . Non-owning pointer to the RLoopManager at the root of this computation graph. ; The RLoopManager is guaranteed to be always in scope if fLoopManager is not a nullptr. ; Definition at line 174 of file RResultPtr.hxx. ◆ fObjPtr. template<typename T > . SPT_t ROOT::RDF::RResultPtr< T >::fObjPtr. private . Shared pointer encapsulating the wrapped result. ; Definition at line 175 of file RResultPtr.hxx. ◆ kOnce. template<typename T > . constexpr ULong64_t ROOT::RDF::RResultPtr< T >::kOnce = 0ull. staticconstexpr . Convenience definition to express a callback must be executed once. ; Definition at line 207 of file RResultPtr.hxx. tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx; tree/dataframe/inc/ROOT/RResultPtr.hxx. ROOTRDFRResultPtr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:19344,Guid,Guide,19344,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['Guid'],['Guide']
Usability,"FALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooThresholdCategory.html:2062,clear,clearValueDirty,2062,root/html526/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html526/RooThresholdCategory.html,1,['clear'],['clearValueDirty']
Usability,"FALSE);; 1027 ; 1028 // The content of a map and multimap is always a 'pair' and hence; 1029 // fPointers means ""Flag to indicate if containee has pointers (key or value)""; 1030 // so we need to ignore its value for map and multimap;; 1031 return fPointers && !(fSTL_type == ROOT::kSTLmap || fSTL_type == ROOT::kSTLmultimap ||; 1032 fSTL_type == ROOT::kSTLunorderedmap || fSTL_type == ROOT::kSTLunorderedmultimap);; 1033}; 1034 ; 1035////////////////////////////////////////////////////////////////////////////////; 1036/// Return a pointer to the TClass representing the content.; 1037 ; 1038TClass *TGenCollectionProxy::GetValueClass() const; 1039{; 1040 auto value = fValue.load(std::memory_order_relaxed);; 1041 if (!value) {; 1042 Initialize(kFALSE);; 1043 value = fValue.load(std::memory_order_relaxed);; 1044 }; 1045 return value ? (*value).fType.GetClass() : 0;; 1046}; 1047 ; 1048////////////////////////////////////////////////////////////////////////////////; 1049/// If the content is a simple numerical value, return its type (see TDataType); 1050 ; 1051EDataType TGenCollectionProxy::GetType() const; 1052{; 1053 auto value = fValue.load(std::memory_order_relaxed);; 1054 if (!value) {; 1055 Initialize(kFALSE);; 1056 value = fValue.load(std::memory_order_relaxed);; 1057 }; 1058 return value ? (*value).fKind : kNoType_t;; 1059}; 1060 ; 1061////////////////////////////////////////////////////////////////////////////////; 1062/// Return the address of the value at index 'idx'; 1063 ; 1064void* TGenCollectionProxy::At(UInt_t idx); 1065{; 1066 if ( fEnv && fEnv->fObject ) {; 1067 switch (fSTL_type) {; 1068 case ROOT::kSTLvector:; 1069 if ((*fValue).fKind == kBool_t) {; 1070 auto vec = (std::vector<bool> *)(fEnv->fObject);; 1071 fEnv->fLastValueVecBool = (*vec)[idx];; 1072 fEnv->fIdx = idx;; 1073 return &(fEnv->fLastValueVecBool);; 1074 }; 1075 // intentional fall through; 1076 case ROOT::kROOTRVec:; 1077 fEnv->fIdx = idx;; 1078 switch( idx ) {; 1079 case 0:; 1080 return fEnv->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:34199,simpl,simple,34199,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['simpl'],['simple']
Usability,"FATAL << ""Cannot parse number \"""" << fValidationSize << ""\"". Expected string like \""0.2\"" or \""100\"".""; 642 << Endl;; 643 }; 644 ; 645 // Value validation; 646 // ----------------; 647 if (nValidationSamples < 0) {; 648 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is negative."" << Endl;; 649 }; 650 ; 651 if (nValidationSamples == 0) {; 652 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is zero."" << Endl;; 653 }; 654 ; 655 if (nValidationSamples >= (Int_t)trainingSetSize) {; 656 Log() << kFATAL << ""Validation size \"""" << fValidationSize; 657 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 658 }; 659 ; 660 return nValidationSamples;; 661}; 662 ; 663////////////////////////////////////////////////////////////////////////////////; 664 ; 665void TMVA::MethodDNN::Train(); 666{; 667 if (fInteractive && fInteractive->NotInitialized()){; 668 std::vector<TString> titles = {""Error on training set"", ""Error on test set""};; 669 fInteractive->Init(titles);; 670 // JsMVA progress bar maximum (100%); 671 fIPyMaxIter = 100;; 672 }; 673 ; 674 for (TTrainingSettings & settings : fTrainingSettings) {; 675 size_t nValidationSamples = GetNumValidationSamples();; 676 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 677 size_t nTestSamples = nValidationSamples;; 678 ; 679 if (nTrainingSamples < settings.batchSize ||; 680 nValidationSamples < settings.batchSize ||; 681 nTestSamples < settings.batchSize) {; 682 Log() << kFATAL << ""Number of samples in the datasets are train: ""; 683 << nTrainingSamples << "" valid: "" << nValidationSamples; 684 << "" test: "" << nTestSamples << "". ""; 685 << ""One of these is smaller than the batch size of ""; 686 << settings.batchSize << "". Please increase the batch""; 687 << "" size to be at least the same size as the smallest""; 688 << "" of these values."" << Endl;; 689 }; 690 }; 691 ; 692 if (fArchitectureString == ""GPU"") {; 693 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:23312,progress bar,progress bar,23312,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"FUMILI will fail if one tries minimize \(\chi^2 = g^2(\vec\theta)\) where g is arbitrary function.; Approximate value is: ; \[{\partial^2\chi^2\over\partial\theta_i\partial\theta_k}\approx; Z_{ik}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k}\tag{5}; \]. Then the equations for parameter increments are ; \[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; \qquad i=1\ldots m\tag{6}; \]. Remarkable feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form: ; \[; \theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; \]. They form parallelepiped \(P\) ( \(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument. ; Definition at line 11 of file TFumili.h. Public Member Functions;  TFumili (Int_t maxpar=25);  ;  ~TFumili () override;  TFumili destructor. ;  ; void BuildArrays ();  Allocates memory for internal arrays. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  return a chisquare equivalent ;  ; void Clear (Option_t *opt="""") override;  Resets all parameter names, values and errors to zero. ;  ; void DeleteArrays ();  Deallocates memory. Called from destructor TFumili::~TFumili. ;  ; void Derivatives (Double_t *, Double_t *);  Calculates partial derivatives of theoretical function. ;  ; Int_t Eval (Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:3225,simpl,simple,3225,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['simpl'],['simple']
Usability,"Face TTF::fgFace. staticprotected . font face ; Definition at line 82 of file TTF.h. ◆ fgFontCount. Int_t TTF::fgFontCount = 0. staticprotected . number of fonts loaded ; Definition at line 80 of file TTF.h. ◆ fgFontName. char * TTF::fgFontName. staticprotected . font name ; Definition at line 81 of file TTF.h. ◆ fgGlyphs. TTF::TTGlyph TTF::fgGlyphs. staticprotected . glyphs ; Definition at line 83 of file TTF.h. ◆ fgHinting. Bool_t TTF::fgHinting = kFALSE. staticprotected . use hinting (true by default) ; Definition at line 84 of file TTF.h. ◆ fgInit. Bool_t TTF::fgInit = kFALSE. staticprotected . true if the Init has been called ; Definition at line 85 of file TTF.h. ◆ fgKerning. Bool_t TTF::fgKerning = kTRUE. staticprotected . use kerning (true by default) ; Definition at line 86 of file TTF.h. ◆ fgLibrary. FT_Library TTF::fgLibrary. staticprotected . FreeType font library. ; Definition at line 87 of file TTF.h. ◆ fgNumGlyphs. Int_t TTF::fgNumGlyphs = 0. staticprotected . number of glyphs in the string ; Definition at line 88 of file TTF.h. ◆ fgRotMatrix. FT_Matrix * TTF::fgRotMatrix = nullptr. staticprotected . rotation matrix ; Definition at line 89 of file TTF.h. ◆ fgSmoothing. Bool_t TTF::fgSmoothing = kTRUE. staticprotected . use anti-aliasing (true when >8 planes, false otherwise) ; Definition at line 90 of file TTF.h. ◆ fgSymbItaFontIdx. Int_t TTF::fgSymbItaFontIdx = -1. staticprotected . Symbol italic font index. ; Definition at line 79 of file TTF.h. ◆ fgTBlankW. Int_t TTF::fgTBlankW = 0. staticprotected . trailing blanks width ; Definition at line 91 of file TTF.h. ◆ fgWidth. Int_t TTF::fgWidth = 0. staticprotected . string width, used to compute X alignment ; Definition at line 92 of file TTF.h. Libraries for TTF:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TTF.h; graf2d/graf/src/TTF.cxx. TTF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTF.html:13447,Guid,Guide,13447,doc/master/classTTF.html,https://root.cern,https://root.cern/doc/master/classTTF.html,1,['Guid'],['Guide']
Usability,"Factory::fCorrelations. private . ! enable to calculate correlations ; Definition at line 215 of file Factory.h. ◆ fDefaultTrfs. std::vector<TMVA::VariableTransformBase*> TMVA::Factory::fDefaultTrfs. private . ! list of transformations on default DataSet ; Definition at line 208 of file Factory.h. ◆ fgTargetFile. TFile* TMVA::Factory::fgTargetFile. private . ! ROOT output file ; Definition at line 205 of file Factory.h. ◆ fJobName. TString TMVA::Factory::fJobName. private . ! jobname, used as extension in weight file names ; Definition at line 219 of file Factory.h. ◆ fMethodsMap. std::map<TString,MVector*> TMVA::Factory::fMethodsMap. Definition at line 85 of file Factory.h. ◆ fModelPersistence. Bool_t TMVA::Factory::fModelPersistence. private . ! option to save the trained model in xml file or using serialization ; Definition at line 222 of file Factory.h. ◆ fOptions. TString TMVA::Factory::fOptions. private . ! option string given by construction (presently only ""V"") ; Definition at line 211 of file Factory.h. ◆ fROC. Bool_t TMVA::Factory::fROC. private . ! enable to calculate ROC values ; Definition at line 216 of file Factory.h. ◆ fSilentFile. Bool_t TMVA::Factory::fSilentFile. private . ! used in constructor without file ; Definition at line 217 of file Factory.h. ◆ fTransformations. TString TMVA::Factory::fTransformations. private . ! list of transformations to test ; Definition at line 212 of file Factory.h. ◆ fVerbose. Bool_t TMVA::Factory::fVerbose. private . ! verbose mode ; Definition at line 213 of file Factory.h. ◆ fVerboseLevel. TString TMVA::Factory::fVerboseLevel. private . ! verbosity level, controls granularity of logging ; Definition at line 214 of file Factory.h. Libraries for TMVA::Factory:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Factory.h; tmva/tmva/src/Factory.cxx. TMVAFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:37994,Guid,Guide,37994,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['Guid'],['Guide']
Usability,"Fast(). bool TLeafG::ReadBasketFast ; (; TBuffer & ; input_buf, . Long64_t ; N . ). overridevirtual . Deserialize input by performing byteswap as needed. ; Reimplemented from TLeaf.; Definition at line 198 of file TLeafG.cxx. ◆ ReadValue(). void TLeafG::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a long integer from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 229 of file TLeafG.cxx. ◆ SetAddress(). void TLeafG::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 247 of file TLeafG.cxx. ◆ SetMaximum(). virtual void TLeafG::SetMaximum ; (; Long_t ; max). inlinevirtual . Definition at line 58 of file TLeafG.h. ◆ SetMinimum(). virtual void TLeafG::SetMinimum ; (; Long_t ; min). inlinevirtual . Definition at line 59 of file TLeafG.h. ◆ Streamer(). void TLeafG::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TLeafG.h. Member Data Documentation. ◆ fMaximum. Long_t TLeafG::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 31 of file TLeafG.h. ◆ fMinimum. Long_t TLeafG::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 30 of file TLeafG.h. ◆ fPointer. Long_t** TLeafG::fPointer. protected . ! Address of pointer to data buffer ; Definition at line 33 of file TLeafG.h. ◆ fValue. Long_t* TLeafG::fValue. protected . ! Pointer to data buffer ; Definition at line 32 of file TLeafG.h. Libraries for TLeafG:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafG.h; tree/tree/src/TLeafG.cxx. TLeafG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafG.html:23303,Guid,Guide,23303,doc/master/classTLeafG.html,https://root.cern,https://root.cern/doc/master/classTLeafG.html,1,['Guid'],['Guide']
Usability,"Feedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void StoreOutput (TList *out) override;  Store received output list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:5463,FeedBack,FeedBackCanvas,5463,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,4,"['FeedBack', 'feedback']","['FeedBackCanvas', 'feedback']"
Usability,"Fields(int n)Definition RFieldVisitor.cxx:59; ROOT::Experimental::RPrintSchemaVisitor::SetFrameSymbolvoid SetFrameSymbol(char s)Definition RFieldVisitor.hxx:142; ROOT::Experimental::RPrintValueVisitorRenders a JSON value corresponding to the field.Definition RFieldVisitor.hxx:176; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; nconst Int_t nDefinition legend1.C:16; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::CallConnectPageSourceOnFieldvoid CallConnectPageSourceOnField(RFieldBase &, RPageSource &)Definition RField.cxx:411; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Experimental::ENTupleInfoENTupleInfoListing of the different options that can be printed by RNTupleReader::GetInfo()Definition RNTupleReader.hxx:43; ROOT::Experimental::ENTupleInfo::kSummary@ kSummary; ROOT::Experimental::ENTupleInfo::kMetrics@ kMetrics; ROOT::Experimental::ENTupleInfo::kStorageDetails@ kStorageDetails; ROOT::Experimental::NTupleSize_tstd::uint64_t NTupleSize_tInteger type long enough to hold the maximum number of entries in a column.Definition RNTupleUtil.hxx:115; ROOT::Experimental::DescriptorId_tstd::uint64_t DescriptorId_tDistriniguishes elements of the same type within a descriptor, e.g. different fields.Definition RNTupleUtil.hxx:166; ROOT::Experimental::kInvalidDescriptorIdconstexpr DescriptorId_t kInvalidDescriptorIdDefinition RNTupleUtil.hxx:167; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; whatstatic const char * whatDefinition stlLoader.cc:5; outputstatic void output(). treentuplev7srcRNTupleReader.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8cxx_source.html:17736,Guid,Guide,17736,doc/master/RNTupleReader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html,1,['Guid'],['Guide']
Usability,"File *f, TSQLClassInfo *info);  ;  ~TSqlCmdsBuffer () override;  ; void AddValues (Bool_t isnorm, const char *values);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:1285,Clear,Clear,1285,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['Clear'],['Clear']
Usability,FileCacheRead::fBIsTransferred; Int_t*TFileCacheRead::fBLen; Int_tTFileCacheRead::fBNb; Int_tTFileCacheRead::fBNseek; Int_tTFileCacheRead::fBNtot; Long64_t*TFileCacheRead::fBPos; Long64_t*TFileCacheRead::fBSeek; Int_t*TFileCacheRead::fBSeekIndex; Int_t*TFileCacheRead::fBSeekLen; Int_t*TFileCacheRead::fBSeekPos; Int_tTFileCacheRead::fBSeekSize; Long64_t*TFileCacheRead::fBSeekSort; Int_t*TFileCacheRead::fBSeekSortLen; Int_tfBlocksToGo; TList*TTreeCache::fBrNames! list of branch names in the cache; TObjArray*TTreeCache::fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Int_tfCycle; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously ; Long64_tTTreeCache::fEntryCurrent! current lowest entry number in the cache; Long64_tTTreeCache::fEntryMax! last entry in the cache; Long64_tTTreeCache::fEntryMin! first entry in the cache; Long64_tTTreeCache::fEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tTTreeCache::fFillTimes! how many times we can fill the current buffer; Bool_tTTreeCache::fFirstBuffer! true if first buffer is used for prefetching; Long64_tTTreeCache::fFirstEntry! save the value of the first entry; Bool_tTTreeCache::fFirstTime! save the fact that we processes the first entry; TMutex*fIOMutex; Bool_tTTreeCache::fIsLearning! true if cache is in learning mode; Bool_tTTreeCache::fIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCacheUnzip.html:10623,learn,learning,10623,root/html530/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html530/TTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"Fill(Double_t x, Double_t w)TH1protectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH1static; Class_Name()TH1static; Class_Version()TH1inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH1virtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TH1inlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1-members.html:2135,Clear,Clear,2135,doc/master/classTH1-members.html,https://root.cern,https://root.cern/doc/master/classTH1-members.html,1,['Clear'],['Clear']
Usability,"FitData! data of the fit (managed by TBackCompFitter); auto_ptr<ROOT::Fit::Fitter>fFitter! pointer to fitter object (managed by TBackCompFitter); ROOT::Math::Minimizer*fMinimizer; ROOT::Math::IParametricFunctionMultiDim*fModelFunc; ROOT::Math::IBaseFunctionMultiDim*fObjFunc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBackCompFitter(); Constructur needed by TVirtualFitter interface. Same behavior as default constructor.; initialize setting name and the global pointer. TBackCompFitter(auto_ptr<ROOT::Fit::Fitter> fitter, auto_ptr<ROOT::Fit::FitData> data); constructor used after having fit using directly ROOT::Fit::Fitter; will create a dummy fitter copying configuration and parameter settings. ~TBackCompFitter(); data are own here; if (fFitData) delete fFitData;. Double_t Chisquare(Int_t npar, Double_t* params) const; do chisquare calculations in case of likelihood fits; do evaluation a the minimum only. void Clear(Option_t* option = """"); clear resources for consecutive fits. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); execute the command (Fortran Minuit compatible interface). bool ValidParameterIndex(int ipar) const; check if ipar is a valid parameter index. void FixParameter(Int_t ipar); fix the paramter; std::cout<<""FixParameter""<<std::endl;. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:12605,Clear,Clear,12605,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,10,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"FitResultPtr fitres = h1->Fit(""gaus"", ""S0"");; h1->Sumw2();; h1->GetXaxis()->SetTitle(""x"");; h1->GetYaxis()->SetTitle(""y"");; auto rp1 = new TRatioPlot(h1, ""errfunc"");; rp1->SetGraphDrawOpt(""L"");; rp1->SetSeparationMargin(0.0);; rp1->Draw();; rp1->GetLowerRefGraph()->SetMinimum(-2);; rp1->GetLowerRefGraph()->SetMaximum(2);; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRatioPlotClass for displaying ratios, differences and fit residuals.Definition TRatioPlot.h:43; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ratioplot6Definition ratioplot6.py:1; AuthorPaul Gessinger ; Definition in file ratioplot6.C. tutorialshistratioplot6.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ratioplot6_8C.html:2494,Guid,Guide,2494,doc/master/ratioplot6_8C.html,https://root.cern,https://root.cern/doc/master/ratioplot6_8C.html,1,['Guid'],['Guide']
Usability,"FitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf503_wspacereadDefinition rf503_wspaceread.py:1; ; 0x559b3dca42c0 RooAddPdf::model = 0.9/1 [Auto,Clean] ; 0x559b3deb0210/V- RooChebychev::bkg = 0.8 [Auto,Dirty] ; 0x559b3c0035d0/V- RooRealVar::x = 5; 0x559b3c2d1250/V- RooRealVar::a0 = 0.5; 0x559b3c353b60/V- RooRealVar::a1 = 0.2; 0x559b3df69400/V- RooRealVar::bkgfrac = 0.5; 0x559b3defe0a0/V- RooAddPdf::sig = 1/1 [Auto,Clean] ; 0x559b3ded9e50/V- RooGaussian::sig1 = 1 [Auto,Dirty] ; 0x559b3c0035d0/V- RooRealVar::x = 5; 0x559b3d77d310/V- RooRealVar::mean = 5; 0x559b3d6274d0/V- RooRealVar::sigma1 = 0.5; 0x559b3bf56940/V- RooRealVar::sig1frac = 0.8; 0x559b3def8000/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x559b3c0035d0/V- RooRealVar::x = 5; 0x559b3d77d310/V- RooRealVar::mean = 5; 0x559b3d7146b0/V- RooRealVar::sigma2 = 1; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (sig); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf503_wspaceread.C. tutorialsroofitrf503_wspaceread.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf503__wspaceread_8C.html:6502,Guid,Guide,6502,doc/master/rf503__wspaceread_8C.html,https://root.cern,https://root.cern/doc/master/rf503__wspaceread_8C.html,1,['Guid'],['Guide']
Usability,"Fitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::Prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:14101,Guid,Guide,14101,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['Guid'],['Guide']
Usability,"Float_t &r, Float_t &g, Float_t &b) const;  ; Float_t GetSaturation () const;  ; void ls (Option_t *option="""") const override;  List this color with its attributes. ;  ; TColor & operator= (const TColor &color);  ; void Print (Option_t *option="""") const override;  Dump this color with its attributes. ;  ; virtual void SetAlpha (Float_t a);  ; void SetName (const char *name) override;  Set the color name and change also the name of the ""dark"" and ""bright"" associated colors if they exist. ;  ; virtual void SetRGB (Float_t r, Float_t g, Float_t b);  Initialize this color and its ""dark"" and ""bright"" associated colors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRadialGradient.html:5778,Clear,Clear,5778,doc/master/classTRadialGradient.html,https://root.cern,https://root.cern/doc/master/classTRadialGradient.html,1,['Clear'],['Clear']
Usability,"Float_t &r, Float_t &g, Float_t &b) const;  ; Float_t GetSaturation () const;  ; void ls (Option_t *option="""") const override;  List this color with its attributes. ;  ; TColor & operator= (const TColor &color);  ; void Print (Option_t *option="""") const override;  Dump this color with its attributes. ;  ; virtual void SetAlpha (Float_t a);  ; void SetName (const char *name) override;  Set the color name and change also the name of the ""dark"" and ""bright"" associated colors if they exist. ;  ; virtual void SetRGB (Float_t r, Float_t g, Float_t b);  Initialize this color and its ""dark"" and ""bright"" associated colors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:4533,Clear,Clear,4533,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,2,['Clear'],['Clear']
Usability,"Float_t GetTextAngle() const; Delegate to gVirtualX. Color_t GetTextColor() const; Delegate to gVirtualX. Font_t GetTextFont() const; Delegate to gVirtualX. Float_t GetTextSize() const; Delegate to gVirtualX. Float_t GetTextMagnitude() const; Delegate to gVirtualX. void SetTextAlign(Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPadPainter.html:5109,simpl,simple,5109,root/html528/TPadPainter.html,https://root.cern,https://root.cern/root/html528/TPadPainter.html,3,['simpl'],['simple']
Usability,"Float_t*fPhysicalShapeColor; Int_tfSelectedPart; TGLSelectionBufferfSelection; Int_tfSelectionBase; Bool_tfSelectionPass; Bool_tfUpdateSelection; TAxis*fXAxis; Double_tfXOYSectionPos; Double_tfXOZSectionPos; TAxis*fYAxis; Double_tfYOZSectionPos; TAxis*fZAxis; vector<Double_t>fZLevels. private:. const TColor*fPadColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void SetPhysicalShapeColor(const Float_t* rgba). void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t InitGeometry(); Init geometry does plot's specific initialization. void StartPan(Int_t px, Int_t py); Pan function is already declared in TVirtualGLPainter. void AddOption(const TString& stringOption); Add string option, it can be a digit in ""lego"" or ""surf"". void ProcessEvent(Int_t event, Int_t px, Int_t py); Function to process additional events (key presses, mouse clicks.). Bool_t CutAxisSelec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPlotPainter.html:3492,Clear,Clear,3492,root/html532/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html532/TGLPlotPainter.html,2,['Clear'],['Clear']
Usability,"Fold 1: ROC int: 0.96584, BkgEff@SigEff=0.3: 0.975; ==> Wrote root file: TMVACV.root; ==> TMVACrossValidation is done!; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/CrossValidation.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Factory.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; ; // Helper function to load data into TTrees.; TTree *genTree(Int_t nPoints, Double_t offset, Double_t scale, UInt_t seed = 100); {; TRandom3 rng(seed);; Float_t x = 0;; Float_t y = 0;; UInt_t eventID = 0;; ; TTree *data = new TTree();; data->Branch(""x"", &x, ""x/F"");; data->Branch(""y"", &y, ""y/F"");; data->Branch(""eventID"", &eventID, ""eventID/I"");; ; for (Int_t n = 0; n < nPoints; ++n) {; x = rng.Gaus(offset, scale);; y = rng.Gaus(offset, scale);; ; // For our simple example it is enough that the id's are uniformly; // distributed and independent of the data.; ++eventID;; ; data->Fill();; }; ; // Important: Disconnects the tree from the memory locations of x and y.; data->ResetBranchAddresses();; return data;; }; ; int TMVACrossValidation(bool useRandomSplitting = false); {; // This loads the library; TMVA::Tools::Instance();; ; // --------------------------------------------------------------------------; ; // Load the data into TTrees. If you load data from file you can use a; // variant of; // ```; // TString filename = ""/path/to/file"";; // TFile * input = TFile::Open( filename );; // TTree * signalTree = (TTree*)input->Get(""TreeName"");; // ```; TTree *sigTree = genTree(1000, 1.0, 1.0, 100);; TTree *bkgTree = genTree(1000, -1.0, 1.0, 101);; ; // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; TString outfileName(""TMVACV.root"");; TFile *outputFile = TFile::Open(outfileName, ""RECREATE"");; ; // DataLoader definitions; We declare variables in the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:19490,simpl,simple,19490,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['simpl'],['simple']
Usability,Font of the label. ; Definition at line 37 of file TGTableCell.h. ◆ fgDefaultFont. const TGFont * TGTableCell::fgDefaultFont = 0. staticprotected . Default font. ; Definition at line 45 of file TGTableCell.h. ◆ fgDefaultGC. const TGGC * TGTableCell::fgDefaultGC = 0. staticprotected . Default graphics context. ; Definition at line 44 of file TGTableCell.h. ◆ fHasOwnFont. Bool_t TGTableCell::fHasOwnFont. protected . Does the cell have it's own font. ; Definition at line 38 of file TGTableCell.h. ◆ fImage. TGPicture* TGTableCell::fImage. protected . Image or icon. ; Definition at line 34 of file TGTableCell.h. ◆ fLabel. TGString* TGTableCell::fLabel. protected . Text as shown in the cell. ; Definition at line 29 of file TGTableCell.h. ◆ fNormGC. GContext_t TGTableCell::fNormGC. protected . graphics context used to draw the cell ; Definition at line 39 of file TGTableCell.h. ◆ fReadOnly. Bool_t TGTableCell::fReadOnly. protected . Cell readonly state. ; Definition at line 31 of file TGTableCell.h. ◆ fRow. UInt_t TGTableCell::fRow. protected . Row this cell belongs to. ; Definition at line 41 of file TGTableCell.h. ◆ fTable. TGTable* TGTableCell::fTable. protected . TGTable that a cell belongs to. ; Definition at line 42 of file TGTableCell.h. ◆ fTHeight. UInt_t TGTableCell::fTHeight. protected . Label height. ; Definition at line 36 of file TGTableCell.h. ◆ fTip. TGToolTip* TGTableCell::fTip. protected . Possible Tooltip. ; Definition at line 30 of file TGTableCell.h. ◆ fTMode. Int_t TGTableCell::fTMode. protected . Text justify mode. ; Definition at line 33 of file TGTableCell.h. ◆ fTWidth. UInt_t TGTableCell::fTWidth. protected . Label width. ; Definition at line 35 of file TGTableCell.h. Libraries for TGTableCell:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTableCell.h; gui/gui/src/TGTableCell.cxx. TGTableCell. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableCell.html:39372,Guid,Guide,39372,doc/master/classTGTableCell.html,https://root.cern,https://root.cern/doc/master/classTGTableCell.html,1,['Guid'],['Guide']
Usability,"Frame d5(""myTree"", files);; RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; RDataFrame d7(chain);; f#define f(i)Definition RSha256.hxx:104; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that will be generated by this RDataFrame. RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate Pythia events and write them to disk in parallel (with the Snapshot action).; For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; auto df = ROOT::RDF::FromCSV(""input.csv"");; // use df as usual; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558. Filling a histogram; Let's now tackle a very common task, filling a histogram: // Fill a TH1D with the ""MET"" branch; RDataFrame d(""myTree"", ""file.root"");; auto h = d.Histo1D(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:15824,simpl,simple,15824,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,Frame.cxx. ◆ SetFixedSize(). void TGDockableFrame::SetFixedSize ; (; Bool_t ; fixed). inline . Definition at line 132 of file TGDockableFrame.h. ◆ SetWindowName(). void TGDockableFrame::SetWindowName ; (; const char * ; name). overridevirtual . Set window name so it appear as title of the undock window. ; Reimplemented from TGWindow.; Definition at line 445 of file TGDockableFrame.cxx. ◆ ShowContainer(). void TGDockableFrame::ShowContainer ; (; ). Show dock container. ; Definition at line 357 of file TGDockableFrame.cxx. ◆ Streamer(). void TGDockableFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGDockableFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TGDockableFrame.h. ◆ UndockContainer(). void TGDockableFrame::UndockContainer ; (; ). Undock container. ; Definition at line 286 of file TGDockableFrame.cxx. ◆ Undocked(). virtual void TGDockableFrame::Undocked ; (; ). inlinevirtual . Definition at line 113 of file TGDockableFrame.h. Friends And Related Symbol Documentation. ◆ TGUndockedFrame. friend class TGUndockedFrame. friend . Definition at line 83 of file TGDockableFrame.h. Member Data Documentation. ◆ fButtons. TGCompositeFrame* TGDockableFrame::fButtons. protected . container containing dock and hide buttons ; Definition at line 97 of file TGDockableFrame.h. ◆ fContainer. TGCompositeFrame* TGDockableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 of file TGDockableFrame.h. ◆ fDockName. TString TGDockableFrame::fDockName. protected . name of frame ; Definition at line 95 of file T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:38880,Undo,Undocked,38880,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['Undo'],['Undocked']
Usability,"Frame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidFixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringGetSString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGDoubleSlider&operator=(const TGDoubleSlider&); TGDoubleSlider(const TGDoubleSlider&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDoubleSlider.html:15553,Clear,ClearFlags,15553,root/html602/TGDoubleSlider.html,https://root.cern,https://root.cern/root/html602/TGDoubleSlider.html,2,['Clear'],['ClearFlags']
Usability,"Frame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoPgonEditor.html:23015,undo,undoing,23015,root/html604/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html604/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"Frame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPgonEditor.html:23015,undo,undoing,23015,root/html602/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html602/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"Frame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHypeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for Hype editor. ~TGeoHypeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoRin(); Slot for Rin. void DoRout(); Slot for Rout. void DoDz(); Slot for Z. void DoStIn(); Slot for StIn. void DoStOut(); Slot for StOut. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHypeEditor.html:21468,undo,undoing,21468,root/html534/TGeoHypeEditor.html,https://root.cern,https://root.cern/root/html534/TGeoHypeEditor.html,1,['undo'],['undoing']
Usability,"Frame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd2 editor. ~TGeoTrd2Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy1(); Slot for dy1. void DoDy2(); Slot for dy2. void DoDz(); Slot for dz. TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTrd2Editor.html:22228,undo,undoing,22228,root/html604/TGeoTrd2Editor.html,https://root.cern,https://root.cern/root/html604/TGeoTrd2Editor.html,1,['undo'],['undoing']
Usability,"Frame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd2 editor. ~TGeoTrd2Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy1(); Slot for dy1. void DoDy2(); Slot for dy2. void DoDz(); Slot for dz. TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrd2Editor.html:22228,undo,undoing,22228,root/html602/TGeoTrd2Editor.html,https://root.cern,https://root.cern/root/html602/TGeoTrd2Editor.html,1,['undo'],['undoing']
Usability,"Frame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressMemoryPlot.html:24338,Clear,Clear,24338,root/html602/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html602/TProofProgressMemoryPlot.html,4,['Clear'],['Clear']
Usability,"FreeHook(). void TStorage::SetFreeHook ; (; FreeHookFun_t ; func, . void * ; data . ). static . Set a free handler. ; Definition at line 350 of file TStorage.cxx. ◆ SetMaxBlockSize(). void TStorage::SetMaxBlockSize ; (; size_t ; size). inlinestatic . Definition at line 133 of file TStorage.h. ◆ SetReAllocHooks(). void TStorage::SetReAllocHooks ; (; ReAllocFun_t ; func1, . ReAllocCFun_t ; rh2 . ). static . Set a custom ReAlloc handlers. ; This function is typically called via a static object in the ROOT libNew.so shared library. ; Definition at line 360 of file TStorage.cxx. ◆ Streamer(). virtual void TStorage::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TStorage::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TStorage.h. ◆ UpdateIsOnHeap(). R__NEVER_INLINE void TStorage::UpdateIsOnHeap ; (; volatile const UInt_t & ; uniqueID, . volatile UInt_t & ; bits . ). static . Definition at line 123 of file TStorage.h. Member Data Documentation. ◆ fgFreeHook. FreeHookFun_t TStorage::fgFreeHook. staticprivate . Definition at line 37 of file TStorage.h. ◆ fgFreeHookData. void * TStorage::fgFreeHookData. staticprivate . Definition at line 38 of file TStorage.h. ◆ fgHasCustomNewDelete. Bool_t TStorage::fgHasCustomNewDelete. staticprivate . Definition at line 40 of file TStorage.h. ◆ fgMaxBlockSize. size_t TStorage::fgMaxBlockSize. staticprivate . Definition at line 36 of file TStorage.h. ◆ fgReAllocCHook. ReAllocCFun_t TStorage::fgReAllocCHook. staticprivate . Definition at line 39 of file TStorage.h. ◆ kObjectAllocMemValue. const UInt_t TStorage::kObjectAllocMemValue = 0x99999999. static . Definition at line 48 of file TStorage.h. Libraries for TStorage:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TStorage.h; core/base/src/TStorage.cxx. TStorage. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:11853,Guid,Guide,11853,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['Guid'],['Guide']
Usability,"Fs into a series of variations that are joined together into a RooSimultaneous PDF. . Splitting a single PDF; The simplest use case is to take a workspace PDF as prototype and ""split"" a parameter of that PDF into two specialized parameters depending on a category in the dataset.; For example, given a Gaussian PDF \( G(x \,|\, m,s) \) we want to construct a \( G_a(x \,|\, m_a,s) \) and a \( G_b(x \,|\, m_b,s) \) with different mean parameters to be fit to a dataset with observables \( (x,c) \) where \( c \) is a category with states 'a' and 'b'.; Using RooSimWSTool, one can create a simultaneous PDF from \( G_a \) and \( G_b \) from \( G \) with the following commands: RooSimWSTool wst(wspace);; wst.build(""G_sim"", ""G"", SplitParam(""m"",""c""));; RooSimWSToolThe RooSimWSTool is a tool operating on RooWorkspace objects that can clone PDFs into a series of var...Definition RooSimWSTool.h:38; Splitting using a product category; From this simple example one can go to builds of arbitrary complexity by specifying multiple SplitParam arguments on multiple parameters involving multiple splitting categories. Splits can also be performed in the product of multiple categories, i.e., wst.build(""G_sim"", ""G"", SplitParam(""m"",""c,d""));; splits the parameter \( m \) in the product of the states of \( c \) and \( d \).; Constrained split; Another possibility is the ""constrained"" split, which clones the parameter for all but one state and inserts a formula specialization in a chosen state that evaluates to \( 1 - \sum_i(a_i) \) where \( a_i \) are all other specializations. For example, given a category \( c \) with the states ""A"",""B"",""C"",""D"", the specification SplitParamConstrained(""m"",""c"",""D""); will create the parameters \( m_A,m_B,m_C \) and a formula expression \( m_D \) that evaluates to \( (1-(m_A+m_B+m_C)) \). Constrained splits can also be specified in the product of categories. In that case, the name of the remainder state follows the syntax ""{State1;State2}"", where State1 and State2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool.html:1309,simpl,simple,1309,doc/master/classRooSimWSTool.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool.html,1,['simpl'],['simple']
Usability,"FuncMathCore.cxx:57; ROOT::Math::cauchy_cdfdouble cauchy_cdf(double x, double b, double x0=0)Cumulative distribution function (lower tail) of the Cauchy distribution which is also Lorentzian dis...Definition ProbFuncMathCore.cxx:51; ROOT::Math::tdistribution_cdf_cdouble tdistribution_cdf_c(double x, double r, double x0=0)Complement of the cumulative distribution function of Student's t-distribution (upper tail).Definition ProbFuncMathCore.cxx:242; ROOT::Math::gamma_cdfdouble gamma_cdf(double x, double alpha, double theta, double x0=0)Cumulative distribution function of the gamma distribution (lower tail).Definition ProbFuncMathCore.cxx:204; ROOT::Math::exponential_cdfdouble exponential_cdf(double x, double lambda, double x0=0)Cumulative distribution function of the exponential distribution (lower tail).Definition ProbFuncMathCore.cxx:161; ROOT::Math::landau_xm1double landau_xm1(double x, double xi=1, double x0=0)First moment (mean) of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:409; ROOT::Math::landau_xm2double landau_xm2(double x, double xi=1, double x0=0)Second moment of the truncated Landau distribution.Definition ProbFuncMathCore.cxx:489; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::gaussian_cdfdouble gaussian_cdf(double x, double sigma=1, double x0=0)Alternative name for same function.Definition ProbFuncMathCore.h:485; ROOT::Math::gaussian_cdf_cdouble gaussian_cdf_c(double x, double sigma=1, double x0=0)Alternative name for same function.Definition ProbFuncMathCore.h:463; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathmathcoreincMathProbFuncMathCore.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html:32677,Guid,Guide,32677,doc/master/ProbFuncMathCore_8h_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html,1,['Guid'],['Guide']
Usability,Function Documentation. ◆ Class(). static TClass * TGMdiHorizontalWinResizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGMdiHorizontalWinResizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGMdiHorizontalWinResizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 108 of file TGMdiDecorFrame.h. ◆ DeclFileName(). static const char * TGMdiHorizontalWinResizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 108 of file TGMdiDecorFrame.h. ◆ DrawBorder(). void TGMdiHorizontalWinResizer::DrawBorder ; (; ). overridevirtual . Draw horizontal resizer frame border. ; Reimplemented from TGFrame.; Definition at line 1131 of file TGMdiDecorFrame.cxx. ◆ HandleMotion(). Bool_t TGMdiHorizontalWinResizer::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle motion events in resizer (resize associated MDI window). ; Reimplemented from TGFrame.; Definition at line 1096 of file TGMdiDecorFrame.cxx. ◆ IsA(). TClass * TGMdiHorizontalWinResizer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 108 of file TGMdiDecorFrame.h. ◆ Streamer(). void TGMdiHorizontalWinResizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGMdiHorizontalWinResizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TGMdiDecorFrame.h. Libraries for TGMdiHorizontalWinResizer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiHorizontalWinResizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiHorizontalWinResizer.html:32572,Guid,Guide,32572,doc/master/classTGMdiHorizontalWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiHorizontalWinResizer.html,1,['Guid'],['Guide']
Usability,"Function Members (Methods); public:. THnT<unsigned short>(); THnT<unsigned short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_unsigned_short_.html:2275,Clear,Clear,2275,root/html534/THnT_unsigned_short_.html,https://root.cern,https://root.cern/root/html534/THnT_unsigned_short_.html,1,['Clear'],['Clear']
Usability,"Function documentation; Bool_t inhibitDirty() const; { return _inhibitDirty && !_localNoInhibitDirty; }. RooAbsArg(); Default constructor. RooAbsArg(const char* name, const char* title); Create an object with the specified name and descriptive title.; The newly created object has no clients or servers and has its; dirty flags set. RooAbsArg(const RooAbsArg& other, const char* name = 0); Copy constructor transfers all boolean and string properties of the original; object. Transient properties and client-server links are not copied. ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:21347,clear,clear,21347,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,2,['clear'],['clear']
Usability,"Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weigh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodTMlpANN.html:19179,simpl,simply,19179,root/html602/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodTMlpANN.html,2,['simpl'],['simply']
Usability,"Function documentation; TGLFont(); Constructor. TGLFont(Int_t size, Int_t font, TGLFont::EMode mode, FTFont* f = 0, TGLFontManager* mng = 0); Constructor. TGLFont(const TGLFont& o); Assignment operator. ~TGLFont(); Destructor. void CopyAttributes(const TGLFont& o); Assignment operator. Float_t GetAscent() const; Get font's ascent. Float_t GetDescent() const; Get font's descent. The returned value is positive. Float_t GetLineHeight() const; Get font's line-height. void MeasureBaseLineParams(Float_t& ascent, Float_t& descent, Float_t& line_height, const char* txt = ""Xj"") const; Measure font's base-line parameters from the passed text.; Note that the measured parameters are not the same as the ones; returned by get-functions - those were set by the font designer. void BBox(const char* txt, Float_t& llx, Float_t& lly, Float_t& llz, Float_t& urx, Float_t& ury, Float_t& urz) const; Get bounding box. void Render(const char* txt, Double_t x, Double_t y, Double_t angle, Double_t mgn) const; mgn is simply ignored, because ROOT's TVirtualX TGX11 are complete mess with; painting attributes. void Render(const TString& txt) const; Render text. void PreRender(Bool_t autoLight = kTRUE, Bool_t lightOn = kFALSE) const; Set-up GL state before FTFont rendering. void PostRender() const; Reset GL state after FTFont rendering. TGLFont& operator=(const TGLFont& o). Int_t GetSize() const; { return fSize;}. Int_t GetFile() const; { return fFile;}. EMode GetMode() const; { return fMode;}. Int_t GetTrashCount() const; { return fTrashCount; }. void SetTrashCount(Int_t c) const; { fTrashCount = c; }. Int_t IncTrashCount() const; { return ++fTrashCount; }. void SetFont(FTFont* f); { fFont =f;}. const FTFont* GetFont() const; { return fFont; }. void SetManager(TGLFontManager* mng); { fManager = mng; }. const TGLFontManager* GetManager() const; { return fManager; }. Float_t GetDepth() const; { return fDepth; }. void SetDepth(Float_t d); { fDepth = d; }. void Render(const char* txt, Double_t x, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLFont.html:3491,simpl,simply,3491,root/html528/TGLFont.html,https://root.cern,https://root.cern/root/html528/TGLFont.html,3,['simpl'],['simply']
Usability,"Function to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsSequence of indexes to execute func on. . ReturnsA vector with the results of the function calls. ; Definition at line 159 of file TSequentialExecutor.hxx. ◆ MapImpl() [3/4]. template<class F , class T , class Cond > . auto ROOT::TSequentialExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 174 of file TSequentialExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::TSequentialExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 143 of file TSequentialExecutor.hxx. ◆ operator=(). TSequentialExecutor & ROOT::TSequentialExecutor::operator= ; (; const TSequentialExecutor & ; ). delete . Member Data Documentation. ◆ TExecutorCRTP. friend ROOT::TSequentialExecutor::TExecutorCRTP. private . Definition at line 26 of file TSequentialExecutor.hxx. Libraries for ROOT::TSequentialExecutor:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/ROOT/TSequentialExecutor.hxx. ROOTTSequentialExecutor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html:11453,Guid,Guide,11453,doc/master/classROOT_1_1TSequentialExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html,1,['Guid'],['Guide']
Usability,"Function3Binding< VO, VI1, VI2, VI3 >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 274 of file RooCFunction3Binding.h. ◆ printArgs(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3Binding< VO, VI1, VI2, VI3 >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 247 of file RooCFunction3Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3Binding< VO, VI1, VI2, VI3 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3Binding< VO, VI1, VI2, VI3 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 274 of file RooCFunction3Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3Ref<VO,VI1,VI2,VI3> RooCFunction3Binding< VO, VI1, VI2, VI3 >::func. protected . Definition at line 262 of file RooCFunction3Binding.h. ◆ x. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3Binding< VO, VI1, VI2, VI3 >::x. protected . Definition at line 263 of file RooCFunction3Binding.h. ◆ y. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3Binding< VO, VI1, VI2, VI3 >::y. protected . Definition at line 264 of file RooCFunction3Binding.h. ◆ z. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3Binding< VO, VI1, VI2, VI3 >::z. protected . Definition at line 265 of file RooCFunction3Binding.h. roofit/roofit/inc/RooCFunction3Binding.h. RooCFunction3Binding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Binding.html:65077,Guid,Guide,65077,doc/master/classRooCFunction3Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Binding.html,1,['Guid'],['Guide']
Usability,"Function: TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width); Using this function one can change pen color, pen style and pen width. Possible pen styles are:. kPenStyleSolid,; kPenStyleDash,; kPenStyleDot,; kPenStyleDashDot. Default values:. color = kBlack; style = kPenStyleSolid; width = 1. Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; Function: TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand overall shape of the data. Therefore in the package we have implemented the possibility to change the density of displayed channels. Only channels coinciding with given nodes are displayed. In the next figure we introduce the example of the above presented spectrum with number of nodes set to 64x64.; Default values:. nodesx = Xmax-Xmin+1; nodesy = Ymax-Ymin+1. Simple modes group, display mode = grid, 256 x 256 channels. Number of nodes is 64x64.; Function: void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the space. Alpha parameter defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees respectively.; Default values:. alpha = 20; beta = 60; view = 0. Light modes group, display mode = surface, 256 x 256 channels. Angles are set as follows: alpha=40, beta=30, view=0. . Light modes group, display mode = surface, 256 x 256 channels. Angles are set as follows: alpha=30, beta=30, view=90.; Function: TSpectrum2Painter::SetZScale(Int_t scale); One can change the scale of z-axis. Possible values are:. kZScaleLinear; kZScaleLog; kZScaleSqrt.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:35298,Simpl,Simple,35298,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"FunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVaria",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:63858,simpl,simplex,63858,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['simpl'],['simplex']
Usability,"FunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetFunctionvirtual void SetFunction(const ROOT::Math::IMultiGenFunction &func)=0set the function to minimize; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61; double; int; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; ROOT::Math::GeneticMinimizerParametersDefinition GeneticMinimizer.h:35; ROOT::Math::GeneticMinimizerParameters::fCyclesInt_t fCyclesDefinition GeneticMinimizer.h:39; ROOT::Math::GeneticMinimizerParameters::fSC_rateInt_t fSC_rateDefinition GeneticMinimizer.h:41; ROOT::Math::GeneticMinimizerParameters::fSC_stepsInt_t fSC_stepsDefinition GeneticMinimizer.h:40; ROOT::Math::GeneticMinimizerParameters::GeneticMinimizerParametersGeneticMinimizerParameters()Definition GeneticMinimizer.cxx:82; ROOT::Math::GeneticMinimizerParameters::fNstepsInt_t fNstepsDefinition GeneticMinimizer.h:38; ROOT::Math::GeneticMinimizerParameters::fConvCritDouble_t fConvCritDefinition GeneticMinimizer.h:43; ROOT::Math::GeneticMinimizerParameters::fSeedInt_t fSeedDefinition GeneticMinimizer.h:44; ROOT::Math::GeneticMinimizerParameters::fPopSizeInt_t fPopSizeDefinition GeneticMinimizer.h:37; ROOT::Math::GeneticMinimizerParameters::fSC_factorDouble_t fSC_factorDefinition GeneticMinimizer.h:42. mathgeneticincMathGeneticMinimizer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneticMinimizer_8h_source.html:9954,Guid,Guide,9954,doc/master/GeneticMinimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html,1,['Guid'],['Guide']
Usability,"FunctionObject(). void RooStats::HistFactory::Measurement::AddFunctionObject ; (; const RooStats::HistFactory::PreprocessFunction ; function). inline . add a preprocess function object ; Definition at line 74 of file Measurement.h. ◆ AddPOI(). void RooStats::HistFactory::Measurement::AddPOI ; (; const std::string & ; POI). inline . append parameter to vector of PoIs ; Definition at line 49 of file Measurement.h. ◆ AddPreprocessFunction(). void RooStats::HistFactory::Measurement::AddPreprocessFunction ; (; std::string ; name, . std::string ; expression, . std::string ; dependencies . ). Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ; Definition at line 112 of file Measurement.cxx. ◆ ClearConstantParams(). void RooStats::HistFactory::Measurement::ClearConstantParams ; (; ). inline . empty vector of constant parameters ; Definition at line 60 of file Measurement.h. ◆ ClearParamValues(). void RooStats::HistFactory::Measurement::ClearParamValues ; (; ). inline . clear map of parameter values ; Definition at line 70 of file Measurement.h. ◆ GetAsimovDatasets(). std::vector< RooStats::HistFactory::Asimov > & RooStats::HistFactory::Measurement::GetAsimovDatasets ; (; ). inline . get vector of defined Asimov Datasets ; Definition at line 82 of file Measurement.h. ◆ GetBinHigh(). int RooStats::HistFactory::Measurement::GetBinHigh ; (; ). inline . Definition at line 98 of file Measurement.h. ◆ GetBinLow(). int RooStats::HistFactory::Measurement::GetBinLow ; (; ). inline . Definition at line 97 of file Measurement.h. ◆ GetConstantParams(). std::vector< std::string > & RooStats::HistFactory::Measurement::GetConstantParams ; (; ). inline . get vector of all constant parameters ; Definition at line 62 of file Measurement.h. ◆ GetFunctionObjects() [1/2]. std::vector< RooStats::HistFactory::PreprocessFunction > & RooStats::HistFactory::Measurement::GetFunctionObjects ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:16262,Clear,ClearParamValues,16262,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Clear'],['ClearParamValues']
Usability,"Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/JetEvent.h>. Inheritance diagram for Track:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Track(). Track::Track ; (; ). inline . Definition at line 40 of file JetEvent.h. ◆ ~Track(). Track::~Track ; (; ). inlineoverride . Definition at line 41 of file JetEvent.h. Member Function Documentation. ◆ GetHits(). TRefArray & Track::GetHits ; (; ). inline . Definition at line 43 of file JetEvent.h. ◆ GetNhit(). Int_t Track::GetNhit ; (; ); const. inline . Definition at line 42 of file JetEvent.h. Member Data Documentation. ◆ fHits. TRefArray Track::fHits. Definition at line 37 of file JetEvent.h. ◆ fNhit. Int_t Track::fNhit. Definition at line 36 of file JetEvent.h. ◆ fPx. Float_t Track::fPx. Definition at line 33 of file JetEvent.h. ◆ fPy. Float_t Track::fPy. Definition at line 34 of file JetEvent.h. ◆ fPz. Float_t Track::fPz. Definition at line 35 of file JetEvent.h. tutorials/tree/JetEvent.h. Track. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:10764,Guid,Guide,10764,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['Guid'],['Guide']
Usability,"G). TTask(const TTask& task); Copy constructor. ~TTask(); Delete a task and its subtasks. void Abort(); Abort current tree of tasks.; After this call, the tree of tasks is ready to be executed again.; The application must take care of cleaning data structures created; by previous executions. void Browse(TBrowser* b); Browse the list of tasks.; It is recommended to add the top level task to the list of; ROOT browsables by:; gROOT->GetListOfBrowsables()->Add(myTopLevelTask). void CleanTasks(); Reset tasks state: breakpoints and execute flags; also invokes the Clear function of each task to clear all data; structures created by a previous execution of a task. void Clear(Option_t* option = """"); Recursively call the Clear function of this task and its subtasks.; The Clear function must be implemented for each derived class; to clear all data structures created by a previous execution of a task.; This function is automatically called by the CleanTasks function. void Continue(); Resume execution at the current break point. void Exec(Option_t* option); Dummy Execute.; This function must be redefined in the derived classes. void ExecuteTask(Option_t* option = ""0""); Execute main task and its subtasks.; When calling this function, the Exec function of the corresponding class; is invoked, then the list of its subtasks is executed calling recursively; all the subtasks, etc. The option parameter may be used to select different execution steps; within a task. This parameter is passed also to all the subtasks. void ExecuteTasks(Option_t* option); Execute all the subtasks of a task. void ls(Option_t* option = ""*"") const; List the tree of tasks.; Indentation is used to identify the task tree. void Add(TTask* task); {fTasks->Add(task);}. Int_t GetBreakin() const; { return fBreakin; }. Int_t GetBreakout() const; { return fBreakout; }. Bool_t IsActive() const; { return fActive; }. Bool_t IsFolder() const; { return kTRUE; }. void SetActive(Bool_t active = kTRUE); { fActive = active; }. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTask.html:10281,Resume,Resume,10281,root/html528/TTask.html,https://root.cern,https://root.cern/root/html528/TTask.html,6,['Resume'],['Resume']
Usability,"GBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidTEveCaloViz::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo3D.html:2518,Clear,ClearStamps,2518,root/html528/TEveCalo3D.html,https://root.cern,https://root.cern/root/html528/TEveCalo3D.html,12,['Clear'],['ClearStamps']
Usability,"GC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrapEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoTrapEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoH1(); Slot for H1. void DoBl1(); Slot for Bl1. void DoTl1(); Slot for Tl1. void DoDz(); Slot for Z. void DoSc1(); Slot for H2. void DoSc2(); Slot for H2. void DoAlpha1(); Slot for alpha1. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrapEditor.html:21872,undo,undoing,21872,root/html528/TGeoTrapEditor.html,https://root.cern,https://root.cern/root/html528/TGeoTrapEditor.html,1,['undo'],['undoing']
Usability,"GC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrapEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoTrapEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoH1(); Slot for H1. void DoBl1(); Slot for Bl1. void DoTl1(); Slot for Tl1. void DoDz(); Slot for Z. void DoSc1(); Slot for H2. void DoSc2(); Slot for H2. void DoAlpha1(); Slot for alpha1. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoTrapEditor.html:21972,undo,undoing,21972,root/html530/TGeoTrapEditor.html,https://root.cern,https://root.cern/root/html530/TGeoTrapEditor.html,1,['undo'],['undoing']
Usability,"GC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrapEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoTrapEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoH1(); Slot for H1. void DoBl1(); Slot for Bl1. void DoTl1(); Slot for Tl1. void DoDz(); Slot for Z. void DoSc1(); Slot for H2. void DoSc2(); Slot for H2. void DoAlpha1(); Slot for alpha1. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTrapEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTrapEditor.html:21972,undo,undoing,21972,root/html532/TGeoTrapEditor.html,https://root.cern,https://root.cern/root/html532/TGeoTrapEditor.html,1,['undo'],['undoing']
Usability,"GC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:21007,progress bar,progress bar,21007,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,2,['progress bar'],['progress bar']
Usability,"GC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); This signal is emitted when cursor is going out of right side. void CursorOutUp(); This signal is emitted whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEntry.html:27652,Simpl,Simple,27652,root/html602/TGTextEntry.html,https://root.cern,https://root.cern/root/html602/TGTextEntry.html,2,['Simpl'],['Simple']
Usability,"GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; void ClearWindow () override;  Clears the entire area of the current window. ;  ; void ClearWindow (Window_t id) override;  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:2138,Clear,ClearArea,2138,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Clear'],['ClearArea']
Usability,"GCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TGSplitFrame*fSecondPointer to the second child (if any); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGSplitTool*fSplitToolSplitFrame Tool; TGSplitter*fSplitterPointer to the (H/V) Splitter (if any); TGTransientFrame*fUndockedMain frame used when ""undocking"" frame; Float_tfWRatioWidth ratio between the first child and this; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSplitFrame.html:18671,undo,undocking,18671,root/html528/TGSplitFrame.html,https://root.cern,https://root.cern/root/html528/TGSplitFrame.html,6,['undo'],['undocking']
Usability,"GFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidValueChanged(Long_t val)SIGNAL ; virtual voidValueSet(Long_t val)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGNumberEntry(const TGNumberEntry&); TGNumberEntry&operator=(const TGNumberEntry&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:19285,Clear,ClearFlags,19285,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,4,['Clear'],['ClearFlags']
Usability,"GFrame::UnmapWindow(); virtual voidUpdate(const char* path); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGComboBox::Init(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWindow::EEditModeTGWindow::kEditDisableHeig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFSComboBox.html:16958,Clear,ClearFlags,16958,root/html602/TGFSComboBox.html,https://root.cern,https://root.cern/root/html602/TGFSComboBox.html,2,['Clear'],['ClearFlags']
Usability,"GFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd1 editor. ~TGeoTrd1Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy(); Slot for dy. void DoDz(); Slot for dz. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1Editor.html:21285,undo,undoing,21285,root/html534/TGeoTrd1Editor.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1Editor.html,1,['undo'],['undoing']
Usability,"GFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoRotationEditor.html:22902,undo,undoing,22902,root/html604/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html604/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"GFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoRotationEditor.html:22902,undo,undoing,22902,root/html602/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html602/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"GFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:49; This page has been automatically generated. For comments or suggestions regarding t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGDockableFrame.html:22260,undo,undock,22260,root/html604/TGDockableFrame.html,https://root.cern,https://root.cern/root/html604/TGDockableFrame.html,1,['undo'],['undock']
Usability,"GFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:50; This page has been automatically generated. For comments or suggestions regarding t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockableFrame.html:22291,undo,undock,22291,root/html602/TGDockableFrame.html,https://root.cern,https://root.cern/root/html602/TGDockableFrame.html,1,['undo'],['undock']
Usability,"GGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHProgressBar.html:21760,Simpl,Simple,21760,root/html602/TGHProgressBar.html,https://root.cern,https://root.cern/root/html602/TGHProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"GHtmlElement *pEnd, int width, int minX, int *actualWidth);  This routine gathers as many tokens as will fit on one line. ;  ; int InWrapAround ();  Return TRUE (non-zero) if we are currently wrapping text around one or more images. ;  ; void Paragraph (TGHtmlElement *p);  Increase the headroom to create a paragraph break at the current token. ;  ; void PopExpiredMargins (SHtmlMargin_t **ppMarginStack, int y);  Pop all expired margins from the stack. ;  ; void PopMargin (SHtmlMargin_t **ppMargin, int tag);  Pop as many margins as necessary until the margin that was created with ""tag"" is popped off. ;  ; void PopOneMargin (SHtmlMargin_t **ppMargin);  Pop one margin off of the given margin stack. ;  ; void PushMargin (SHtmlMargin_t **ppMargin, int indent, int bottom, int tag);  Push a new margin onto the given margin stack. ;  ; TGHtmlElement * TableLayout (TGHtmlTable *p);  Do all layout for a single table. ;  ; void WidenLine (int reqWidth, int *pX, int *pY, int *pW);  Move past obstacles until a linewidth of reqWidth is obtained, or until all obstacles are cleared. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:10519,clear,cleared,10519,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['clear'],['cleared']
Usability,"GLSavePNG; kGLSaveGIF; kGLSaveAnimGIF; kGLSaveJPG; kGLSaveAS; kGLCloseViewer; kGLQuitROOT; kGLEditObject; kGLHideMenus; };; enum TGLViewer::ECameraType { kCameraPerspXOZ; kCameraPerspYOZ; kCameraPerspXOY; kCameraOrthoXOY; kCameraOrthoXOZ; kCameraOrthoZOY; kCameraOrthoXnOY; kCameraOrthoXnOZ; kCameraOrthoZnOY; };; enum TGLViewer::ESecSelType { kOnRequest; kOnKeyMod1; };; enum TGLViewer::EPushAction { kPushStd; kPushCamCenter; kPushAnnotate; };; enum TGLViewer::EDragAction { kDragNone; kDragCameraRotate; kDragCameraTruck; kDragCameraDolly; kDragOverlay; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLAutoRotator*TGLViewer::fAutoRotator!; Bool_tTGLViewer::fAxesDepthTest! remove guides hidden-lines; Int_tTGLViewer::fAxesType! axes type; TGLCamera*TGLViewerBase::fCameraCamera for rendering.; TGLCameraOverlay*TGLViewer::fCameraOverlay! markup size of viewport in scene units; Bool_tTGLViewerBase::fChangedChange requiring redraw is pending.; TGLClip*TGLViewerBase::fClipViewer clipping-plane.; TGLClipSet*TGLViewer::fClipSet!; TContextMenu*TGLViewer::fContextMenu!; TGLCamera*TGLViewer::fCurrentCamera!; TGLOverlayElement*TGLViewer::fCurrentOvlElm! current overlay element; TGLSelectRecordTGLViewer::fCurrentSelRec! select record in use as selected; TGLColorSetTGLViewer::fDarkColorSet! color-set with dark background; Bool_tTGLViewer::fDebugMode! debug mode (forced rebuild + draw scene/frustum/interest boxes); TGLViewer::EDragActionTGLViewer::fDragAction; Bool_tTGLViewer::fDrawCameraCenter! reference marker on?; TGEventHandler*TGLViewer::fEventHandler! event handler; Float_tTGLViewer::fFader! fade the view (0 - no fade/default, 1 - full fade/no rendering done); TGLContextIdentity*TGLVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:20193,guid,guides,20193,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,4,['guid'],['guides']
Usability,"GLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6803,Clear,ClearAfterUpdate,6803,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,2,['Clear'],"['Clear', 'ClearAfterUpdate']"
Usability,"GLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:44; This page has been automatically generated. For comments or suggestions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLScene__TSceneInfo.html:6803,Clear,ClearAfterUpdate,6803,root/html604/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html604/TGLScene__TSceneInfo.html,2,['Clear'],"['Clear', 'ClearAfterUpdate']"
Usability,"GUI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 490 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 708 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 655 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 779 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ◆ newRQt5CreatorReg. struct ROOT::RQt5CreatorReg ROOT::newRQt5CreatorReg. ◆ newRQt6CreatorReg. struct ROOT::RQt6CreatorReg ROOT::newRQt6CreatorReg. ROOT. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT.html:46889,Guid,Guide,46889,doc/v632/namespaceROOT.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"GWindow* parent, Int_t w, Int_t h); virtual~TSessionFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAutoEnPack(Bool_t checked = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionFrame.html:1492,Clear,Clear,1492,root/html528/TSessionFrame.html,https://root.cern,https://root.cern/root/html528/TSessionFrame.html,4,['Clear'],['Clear']
Usability,"G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:19636,Clear,ClearFileBusy,19636,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,2,['Clear'],['ClearFileBusy']
Usability,"Generator(Int_t code); Forward one-time initialization call to component generation initialization; methods. void generateEvent(Int_t code); Generate a single event with configuration specified by 'code'; Defer internal generation to components as encoded in the _genCode; registry for given generator code. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Forward determination of safety of internal generator code to; component p.d.f that would generate the given observable. RooArgSet* findPdfNSet(RooAbsPdf& pdf) const; Look up user specified normalization set for given input PDF component. RooArgSet* getConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected) const; Return all parameter constraint p.d.f.s on parameters listed in constrainedParams; The observables set is required to distinguish unambiguously p.d.f in terms; of observables and parameters, which are not constraints, and p.d.fs in terms; of parameters only, which can serve as constraints p.d.f.s. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t stripDisconnected) const. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProdPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProdPdf(*this,newname) ; }. Bool_t selfNormalized() const; { return kTRUE ; }. Double_t expectedEvents(const RooArgSet* nset). const RooArgList& pdfList() const; { return _pdfList ; }. void useDefaultGen(Bool_t flag = kTRUE); { _useDefaultGen = flag ; }. » Last changed: Mon Dec 7 13:48:43 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:53032,intuit,intuitively,53032,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['intuit'],['intuitively']
Usability,"Geo objects. Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together.; ; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the “Apply” button only if the check button “Delayed draw” is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The “Undo” button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the “Undo” does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable.; 18.11.4 Creation of New Objects; As described above, all geometry object creators are accessible within the geometry manager editor frame. Generally, if the new object that needs to be created does not depend on other objects, it will be built with a set of default parameters. This is the case fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1036699,Undo,Undo,1036699,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Undo'],['Undo']
Usability,"GeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoXtru, and TGeoVGShape. ◆ Streamer(). void TGeoShape::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoTrap, TGeoShapeAssembly, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, and TGeoXtru. ◆ StreamerNVirtual(). void TGeoShape::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 171 of file TGeoShape.h. ◆ TestShapeBit(). Bool_t TGeoShape::TestShapeBit ; (; UInt_t ; f); const. inline . Definition at line 167 of file TGeoShape.h. ◆ TestShapeBits(). Int_t TGeoShape::TestShapeBits ; (; UInt_t ; f); const. inline . Definition at line 168 of file TGeoShape.h. ◆ Tolerance(). static Double_t TGeoShape::Tolerance ; (; ). inlinestatic . Definition at line 90 of file TGeoShape.h. ◆ TransformPoints(). void TGeoShape::TransformPoints ; (; Double_t * ; points, . UInt_t ; NbPoints . ); const. protected . Tranform a set of points (LocalToMaster) ; Definition at line 590 of file TGeoShape.cxx. Member Data Documentation. ◆ fgEpsMch. Double_t TGeoShape::fgEpsMch = 2.220446049250313e-16. staticprivate . Definition at line 28 of file TGeoShape.h. ◆ fgTransform. TGeoMatrix * TGeoShape::fgTransform = nullptr. staticprivate . Definition at line 27 of file TGeoShape.h. ◆ fShapeBits. UInt_t TGeoShape::fShapeBits. protected . Definition at line 72 of file TGeoShape.h. ◆ fShapeId. Int_t TGeoShape::fShapeId. protected . Definition at line 71 of file TGeoShape.h. Libraries for TGeoShape:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoShape.h; geom/geom/src/TGeoShape.cxx. TGeoShape. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:51762,Guid,Guide,51762,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Guid'],['Guide']
Usability,"GeoElement.h. ◆ operator=(). TGeoElementTable & TGeoElementTable::operator= ; (; const TGeoElementTable & ; get). protected . assignment operator ; Definition at line 1022 of file TGeoElement.cxx. ◆ Print(). void TGeoElementTable::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print table of elements. ; The accepted options are: """" - prints everything by default ""D"" - prints default elements only ""I"" - prints isotopes ""R"" - prints radio-nuclides only if imported ""U"" - prints user-defined elements only ; Reimplemented from TObject.; Definition at line 1398 of file TGeoElement.cxx. ◆ Streamer(). void TGeoElementTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoElementTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 447 of file TGeoElement.h. Member Data Documentation. ◆ fElementsRN. ElementRNMap_t TGeoElementTable::fElementsRN. private . Definition at line 410 of file TGeoElement.h. ◆ fIsotopes. TObjArray* TGeoElementTable::fIsotopes. private . Definition at line 406 of file TGeoElement.h. ◆ fList. TObjArray* TGeoElementTable::fList. private . Definition at line 404 of file TGeoElement.h. ◆ fListRN. TObjArray* TGeoElementTable::fListRN. private . Definition at line 405 of file TGeoElement.h. ◆ fNelements. Int_t TGeoElementTable::fNelements. private . Definition at line 401 of file TGeoElement.h. ◆ fNelementsRN. Int_t TGeoElementTable::fNelementsRN. private . Definition at line 402 of file TGeoElement.h. ◆ fNisotopes. Int_t TGeoElementTable::fNisotopes. private . Definition at line 403 of file TGeoElement.h. Libraries for TGeoElementTable:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoElement.h; geom/geom/src/TGeoElement.cxx. TGeoElementTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElementTable.html:19427,Guid,Guide,19427,doc/master/classTGeoElementTable.html,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html,1,['Guid'],['Guide']
Usability,"GeoElement::~TGeoElement~TGeoElement() overridedestructorDefinition TGeoElement.cxx:156; TGeoIsotopeDefinition TGeoElement.h:103; TGeoIsotope::fADouble_t fADefinition TGeoElement.h:107; TGeoIsotope::~TGeoIsotope~TGeoIsotope() overrideDefinition TGeoElement.h:112; TGeoIsotope::TGeoIsotopeTGeoIsotope()Dummy I/O constructor.Definition TGeoElement.cxx:336; TGeoIsotope::GetZInt_t GetZ() constDefinition TGeoElement.h:114; TGeoIsotope::GetNInt_t GetN() constDefinition TGeoElement.h:115; TGeoIsotope::GetADouble_t GetA() constDefinition TGeoElement.h:116; TGeoIsotope::fZInt_t fZDefinition TGeoElement.h:105; TGeoIsotope::FindIsotopestatic TGeoIsotope * FindIsotope(const char *name)Find existing isotope by name.Definition TGeoElement.cxx:353; TGeoIsotope::fNInt_t fNDefinition TGeoElement.h:106; TGeoIsotope::Printvoid Print(Option_t *option="""") const overridePrint this isotope.Definition TGeoElement.cxx:364; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TGeoBatemanSol::BtCoef_tDefinition TGeoElement.h:288; TGeoBatemanSol::BtCoef_t::cnDouble_t cnDefinition TGeoElement.h:289; TGeoBatemanSol::BtCoef_t::lambdaDouble_t lambdaDefinition TGeoElement.h:290; Drawth1 Draw(). geomgeomincTGeoElement.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8h_source.html:40460,Guid,Guide,40460,doc/master/TGeoElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8h_source.html,1,['Guid'],['Guide']
Usability,GeoFrame. private . Definition at line 43 of file TGLPShapeObjEditor.h. ◆ fGeomData. TGNumberEntry* TGLPShapeObjEditor::fGeomData[6]. private . Definition at line 46 of file TGLPShapeObjEditor.h. ◆ fGLWin. Window_t TGLPShapeObjEditor::fGLWin. private . Definition at line 65 of file TGLPShapeObjEditor.h. ◆ fGreenSlider. TGHSlider* TGLPShapeObjEditor::fGreenSlider. private . Definition at line 56 of file TGLPShapeObjEditor.h. ◆ fLb. TGLayoutHints TGLPShapeObjEditor::fLb. private . Definition at line 38 of file TGLPShapeObjEditor.h. ◆ fLe. TGLayoutHints TGLPShapeObjEditor::fLe. private . Definition at line 39 of file TGLPShapeObjEditor.h. ◆ fLightTypes. TGButton* TGLPShapeObjEditor::fLightTypes[4]. private . Definition at line 53 of file TGLPShapeObjEditor.h. ◆ fLl. TGLayoutHints TGLPShapeObjEditor::fLl. private . Definition at line 40 of file TGLPShapeObjEditor.h. ◆ fLMode. ELightMode TGLPShapeObjEditor::fLMode. private . Definition at line 36 of file TGLPShapeObjEditor.h. ◆ fLs. TGLayoutHints TGLPShapeObjEditor::fLs. private . Definition at line 41 of file TGLPShapeObjEditor.h. ◆ fMatView. TGLWidget* TGLPShapeObjEditor::fMatView. private . Definition at line 51 of file TGLPShapeObjEditor.h. ◆ fPShapeObj. TGLPShapeObj* TGLPShapeObjEditor::fPShapeObj. private . Definition at line 68 of file TGLPShapeObjEditor.h. ◆ fRedSlider. TGHSlider* TGLPShapeObjEditor::fRedSlider. private . Definition at line 55 of file TGLPShapeObjEditor.h. ◆ fRGBA. Float_t TGLPShapeObjEditor::fRGBA[17]. private . Definition at line 63 of file TGLPShapeObjEditor.h. ◆ fShineSlider. TGHSlider* TGLPShapeObjEditor::fShineSlider. private . Definition at line 59 of file TGLPShapeObjEditor.h. Libraries for TGLPShapeObjEditor:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLPShapeObjEditor.h; graf3d/gl/src/TGLPShapeObjEditor.cxx. TGLPShapeObjEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPShapeObjEditor.html:44049,Guid,Guide,44049,doc/master/classTGLPShapeObjEditor.html,https://root.cern,https://root.cern/doc/master/classTGLPShapeObjEditor.html,1,['Guid'],['Guide']
Usability,"GeoGenTrans(const char *name) : TGeoCombiTrans(name); 2244{; 2245 SetBit(kGeoGenTrans);; 2246 for (Int_t i = 0; i < 3; i++); 2247 fTranslation[i] = 0.0;; 2248 for (Int_t j = 0; j < 3; j++); 2249 fScale[j] = 1.0;; 2250 fRotation = nullptr;; 2251}; 2252 ; 2253////////////////////////////////////////////////////////////////////////////////; 2254/// constructor; 2255 ; 2256TGeoGenTrans::TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz,; 2257 TGeoRotation *rot); 2258 : TGeoCombiTrans(""""); 2259{; 2260 SetBit(kGeoGenTrans);; 2261 SetTranslation(dx, dy, dz);; 2262 SetScale(sx, sy, sz);; 2263 SetRotation(rot);; 2264}; 2265 ; 2266////////////////////////////////////////////////////////////////////////////////; 2267/// constructor; 2268 ; 2269TGeoGenTrans::TGeoGenTrans(const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy,; 2270 Double_t sz, TGeoRotation *rot); 2271 : TGeoCombiTrans(name); 2272{; 2273 SetBit(kGeoGenTrans);; 2274 SetTranslation(dx, dy, dz);; 2275 SetScale(sx, sy, sz);; 2276 SetRotation(rot);; 2277}; 2278 ; 2279////////////////////////////////////////////////////////////////////////////////; 2280/// destructor; 2281 ; 2282TGeoGenTrans::~TGeoGenTrans() {}; 2283 ; 2284////////////////////////////////////////////////////////////////////////////////; 2285/// clear the fields of this transformation; 2286 ; 2287void TGeoGenTrans::Clear(Option_t *); 2288{; 2289 memset(&fTranslation[0], 0, kN3);; 2290 memset(&fScale[0], 0, kN3);; 2291 if (fRotation); 2292 fRotation->Clear();; 2293}; 2294 ; 2295////////////////////////////////////////////////////////////////////////////////; 2296/// set the scale; 2297 ; 2298void TGeoGenTrans::SetScale(Double_t sx, Double_t sy, Double_t sz); 2299{; 2300 if (sx < 1.E-5 || sy < 1.E-5 || sz < 1.E-5) {; 2301 Error(""ctor"", ""Invalid scale"");; 2302 return;; 2303 }; 2304 fScale[0] = sx;; 2305 fScale[1] = sy;; 2306 fScale[2] = sz;; 2307}; 2308 ; 2309/////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:79168,clear,clear,79168,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,3,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"GeoGtra&); TGeoGtra(Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoGtra(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoGtra(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoShape::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidTGeoArb8::ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(const Double_t* point) const; virtual voidTGeoArb8::Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:2260,Clear,Clear,2260,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,1,['Clear'],['Clear']
Usability,GeoIterator(TGeoVolume* top); TGeoIterator(const TGeoIterator& iter); virtual~TGeoIterator(); static TClass*Class(); const TGeoMatrix*GetCurrentMatrix() const; Int_tGetIndex(Int_t i) const; Int_tGetLevel() const; TGeoNode*GetNode(Int_t level) const; voidGetPath(TString& path) const; TGeoVolume*GetTopVolume() const; Int_tGetType() const; TGeoIteratorPlugin*GetUserPlugin() const; virtual TClass*IsA() const; TGeoNode*Next(); TGeoNode*operator()(); TGeoIterator&operator=(const TGeoIterator& iter); voidReset(TGeoVolume* top = 0); voidSetPluginAutoexec(Bool_t mode); voidSetTopName(const char* name); voidSetType(Int_t type); voidSetUserPlugin(TGeoIteratorPlugin* plugin); virtual voidShowMembers(TMemberInspector&); voidSkip(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TGeoIterator(). private:. voidIncreaseArray(). Data Members; private:. Int_t*fArrayArray of node indices for the current path; Int_tfLevelCurrent level in the tree; TGeoHMatrix*fMatrixCurrent global matrix; Bool_tfMustResumePrivate flag to resume from current node.; Bool_tfMustStopPrivate flag to signal that the iterator has finished.; TGeoIteratorPlugin*fPluginUser iterator plugin; Bool_tfPluginAutoexecPlugin automatically executed during next() ; TGeoVolume*fTopTop volume of the iterated branch; TStringfTopNameUser name for top; Int_tfTypeType of iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoIterator(TGeoVolume* top); Geometry iterator for a branch starting with a TOP node. TGeoIterator(const TGeoIterator& iter); Copy ctor. ~TGeoIterator(); Destructor. TGeoIterator & operator=(const TGeoIterator& iter); Assignment. TGeoNode * Next(); Returns next node. TGeoNode * operator()(); Returns next node. const TGeoMatrix * GetCurrentMatrix() const; Returns global matrix for current node. TGeoNode * GetNode(Int_t level) const; Returns current node at a given level. void GetPath(TString& path) const;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoIterator.html:4338,resume,resume,4338,root/html534/TGeoIterator.html,https://root.cern,https://root.cern/root/html534/TGeoIterator.html,1,['resume'],['resume']
Usability,"GeoMatrix.cxx:1972; TGeoCombiTrans::SetDyvoid SetDy(Double_t dy) overrideDefinition TGeoMatrix.h:351; TGeoCombiTrans::fTranslationDouble_t fTranslation[3]Definition TGeoMatrix.h:319; TGeoCombiTrans::SetDxvoid SetDx(Double_t dx) overrideDefinition TGeoMatrix.h:350; TGeoCombiTrans::fRotationTGeoRotation * fRotationDefinition TGeoMatrix.h:320; TGeoCombiTrans::RotateXvoid RotateX(Double_t angle) overrideRotate about X axis with angle expressed in degrees.Definition TGeoMatrix.cxx:1935; TGeoCombiTrans::GetRotationTGeoRotation * GetRotation() constDefinition TGeoMatrix.h:359; TGeoCombiTrans::SetTranslationvoid SetTranslation(const TGeoTranslation &tr)copy the translation componentDefinition TGeoMatrix.cxx:2168; TGeoCombiTrans::SetRotationvoid SetRotation(const TGeoRotation &other)Copy the rotation from another one.Definition TGeoMatrix.cxx:2147; TGeoCombiTrans::TGeoCombiTransTGeoCombiTrans(const TGeoCombiTrans &other)Definition TGeoMatrix.h:323; TGeoCombiTrans::Clearvoid Clear(Option_t *option="""") overrideReset translation/rotation to identity.Definition TGeoMatrix.cxx:1852; TGeoCombiTrans::operator=TGeoCombiTrans & operator=(const TGeoCombiTrans &other)Definition TGeoMatrix.h:330; TGeoCombiTrans::ReflectYvoid ReflectY(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to ZX.Definition TGeoMatrix.cxx:2065; TGeoCombiTrans::~TGeoCombiTrans~TGeoCombiTrans() overridedestructorDefinition TGeoMatrix.cxx:1841; TGeoCombiTrans::operator*TGeoCombiTrans operator*(const TGeoMatrix &other) constDefinition TGeoMatrix.cxx:1831; TGeoCombiTrans::RotateZvoid RotateZ(Double_t angle) overrideRotate about Z axis with angle expressed in degrees.Definition TGeoMatrix.cxx:2009; TGeoCombiTrans::GetRotationMatrixconst Double_t * GetRotationMatrix() const overrideget the rotation arrayDefinition TGeoMatrix.cxx:2213; TGeoCombiTrans::GetScaleconst Double_t * GetScale() const overrideDefinition TGeoMatrix.h:363; TGeoCombiTrans::ReflectZvoid ReflectZ(Bool_t leftside, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:27462,Clear,Clearvoid,27462,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"GeoScale; kGeoReflection; kGeoRegistered; kGeoSavePrimitive; kGeoMatrixOwned; kGeoCombiTrans; kGeoGenTrans; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*TGeoCombiTrans::fRotationrotation matrix; Double_tfScale[3]scale (x, y, z); TStringTNamed::fTitleobject title; Double_tTGeoCombiTrans::fTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGenTrans(); dummy ctor. TGeoGenTrans(const char* name); constructor. TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. ~TGeoGenTrans(); destructor. void Clear(Option_t* option = """"); clear the fields of this transformation. void SetScale(Double_t sx, Double_t sy, Double_t sz); set the scale. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t Normalize(); A scale transformation should be normalized by sx*sy*sz factor. TGeoMatrix& operator=(const TGeoGenTrans& ); Preventing warnings with -Weffc++ in GCC since the behaviour of operator * was chosen so by design. const Double_t * GetScale() const. TGeoMatrix * MakeClone() const. void SetScale(Double_t sx, Double_t sy, Double_t sz). TGeoGenTrans(). » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoMatrix.h 40116 2011-07-04 12:00:32Z agheata $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoGenTrans.html:15691,Clear,Clear,15691,root/html532/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html532/TGeoGenTrans.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"GeoVolume.h:57; TGeoVolume::ResetTransparencyvoid ResetTransparency(Char_t transparency=-1)Definition TGeoVolume.h:383; TGeoVolume::CheckShapevoid CheckShape(Int_t testNo, Int_t nsamples=10000, Option_t *option="""")Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape()Definition TGeoVolume.cxx:651; TGeoVoxelFinderFinder class handling voxels.Definition TGeoVoxelFinder.h:20; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TGeoVolumeAssembly::ThreadData_tDefinition TGeoVolume.h:318; TGeoVolumeAssembly::ThreadData_t::ThreadData_tThreadData_t()index of next node to be enteredDefinition TGeoVolume.cxx:2867; TGeoVolumeAssembly::ThreadData_t::fCurrentInt_t fCurrentDefinition TGeoVolume.h:319; TGeoVolumeAssembly::ThreadData_t::~ThreadData_t~ThreadData_t()Destructor.Definition TGeoVolume.cxx:2872; TGeoVolumeAssembly::ThreadData_t::fNextInt_t fNextindex of current selected nodeDefinition TGeoVolume.h:320; Drawth1 Draw(). geomgeomincTGeoVolume.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:50475,Guid,Guide,50475,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,1,['Guid'],['Guide']
Usability,"GeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:433; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:27974,Clear,ClearAllPhysVisibilitybool,27974,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,2,['Clear'],"['ClearAllPhysVisibility', 'ClearAllPhysVisibilitybool']"
Usability,"GeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:435; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:371; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:28225,Clear,ClearAllPhysVisibilitybool,28225,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['Clear'],"['ClearAllPhysVisibility', 'ClearAllPhysVisibilitybool']"
Usability,"Get square of the error of bin addressed by linidx as \(\sum weight^{2}\) If errors are not enabled (via Sumw2() or CalculateErrors()) return contents. ;  ; Int_t GetChunkSize () const;  ; Long64_t GetNbins () const override;  ; Int_t GetNChunks () const;  ; Double_t GetSparseFractionBins () const;  Return the amount of filled bins over all bins. ;  ; Double_t GetSparseFractionMem () const;  Return the amount of used memory over memory that would be used by a non-sparse n-dimensional histogram. ;  ; THnSparse * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Clear the histogram. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  Set content of bin with index ""bin"" to ""v"". ;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  Set error of bin with index ""bin"" to ""e"", enable errors if needed. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:4786,Clear,Clear,4786,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['Clear'],['Clear']
Usability,"GetAltTestStatDist(int index) const; RooStats::SamplingDistribution*GetBackgroundTestStatDist(int index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetExpectedLowerLimit(double nsig = 0) const; RooStats::SamplingDistribution*GetExpectedPValueDist(int index) const; doubleGetExpectedUpperLimit(double nsig = 0) const; virtual const char*TObject::GetIconName() const; RooStats::HypoTestInverterResult::InterpolOption_tGetInterpolationOption() const; RooStats::HypoTestResult*GetLastResult() const; doubleGetLastXValue() const; doubleGetLastYError() const; doubleGetLastYValue() const; RooStats::SamplingDistribution*GetLowerLimitDistribution() const; virtual const char*TNamed::GetName() const; RooStats::SamplingDistribution*GetNullTestStatDist(int index) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*RooStats::SimpleInterval::GetParameters() const; RooStats::HypoTestResult*GetResult(int index) const; RooStats::SamplingDistribution*GetSignalAndBackgroundTestStatDist(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooStats::SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:3360,Simpl,SimpleInterval,3360,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"GetColor(volume->GetLineColor());; 1170 ; 1171 if (volume->GetMedium() && (volume->GetMedium() != TGeoVolume::DummyMedium()) &&; 1172 volume->GetMedium()->GetMaterial()) {; 1173 auto material = volume->GetMedium()->GetMaterial();; 1174 ; 1175 node.material = material->GetName();; 1176 ; 1177 auto fillstyle = material->GetFillStyle();; 1178 if ((fillstyle >= 3000) && (fillstyle <= 3100)); 1179 node.opacity = (3100 - fillstyle) / 100.;; 1180 if (!col); 1181 col = gROOT->GetColor(material->GetFillColor());; 1182 } else {; 1183 node.material.clear();; 1184 }; 1185 ; 1186 if (col) {; 1187 TString colbuf;; 1188 colbuf.Form(""#%02x%02x%02x"", (int)(col->GetRed() * 255), (int)(col->GetGreen() * 255),; 1189 (int)(col->GetBlue() * 255));; 1190 node.color = colbuf.Data();; 1191 if (node.opacity == 1.); 1192 node.opacity = col->GetAlpha();; 1193 } else {; 1194 node.color.clear();; 1195 }; 1196}; 1197 ; 1198/////////////////////////////////////////////////////////////////////; 1199/// Reset shape info, which used to pack binary data; 1200 ; 1201void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing nodes will be provided,; 1214/// which allows to create complete nodes hierarchy on client side; 1215///; 1216/// Example of usage:; 1217///; 1218/// void geom() {; 1219/// auto f = TFile::Open(""file_name.root"");; 1220/// auto vol = f->Get<TGeoVolume>(""object_name"");; 1221/// ROOT::RGeomDescription desc;; 1222/// desc.Build(vol);; 1223/// std::ofstream fout(""geom.json"");; 1224/// fout << desc.ProduceJson();; 1225/// }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:35979,clear,clear,35979,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Detail::VecOps::RVecImpl::emplace_backreference emplace_back(ArgTypes &&...Args)Definition RVec.hxx:920; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< double >; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets.Definition TTreeReaderArray.h:75; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; df017_vecOpsHEPDefinition df017_vecOpsHEP.py:1; v@ vDefinition rootcling_impl.cxx:3699; . DateMarch 2018 ; AuthorsDanilo Piparo (CERN), Andre Vieira Silva ; Definition in file df017_vecOpsHEP.C. tutorialsdataframedf017_vecOpsHEP.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df017__vecOpsHEP_8C.html:3929,simpl,simple,3929,doc/master/df017__vecOpsHEP_8C.html,https://root.cern,https://root.cern/doc/master/df017__vecOpsHEP_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"GetFirst();; 11092 Int_t lastY = yaxis->GetLast();; 11093 Int_t biny = firstY + Int_t((lastY-firstY)*(px-pxmin)/(pxmax-pxmin));; 11094 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11095 yaxis->SetRange(biny,biny2);; 11096 Int_t firstZ = zaxis->GetFirst();; 11097 Int_t lastZ = zaxis->GetLast();; 11098 Int_t binz = firstZ + Int_t((lastZ-firstZ)*(py-pymin)/(pymax-pymin));; 11099 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11100 zaxis->SetRange(binz,binz2);; 11101 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11102 if (nbins>1 && line1[0].GetX()) {; 11103 gVirtualX->DrawPolyLine(2,line2);; 11104 gVirtualX->DrawPolyLine(2,line3);; 11105 gVirtualX->DrawPolyLine(2,line4);; 11106 gVirtualX->DrawPolyLine(5,endface1);; 11107 gVirtualX->DrawPolyLine(5,endface2);; 11108 }; 11109 xx[0] = xaxis->GetXmin();; 11110 xx[2] = zaxis->GetBinCenter(binz);; 11111 xx[1] = yaxis->GetBinCenter(biny);; 11112 view->WCtoNDC(xx,u);; 11113 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11114 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11115 xx[0] = xaxis->GetXmax();; 11116 view->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:402028,ux,uxmin,402028,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"GetFirst();; 11321 Int_t lastX = xaxis->GetLast();; 11322 Int_t binx = firstX + Int_t((lastX-firstX)*(px-pxmin)/(pxmax-pxmin));; 11323 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11324 xaxis->SetRange(binx,binx2);; 11325 Int_t firstY = yaxis->GetFirst();; 11326 Int_t lastY = yaxis->GetLast();; 11327 Int_t biny = firstY + Int_t((lastY-firstY)*(py-pymin)/(pymax-pymin));; 11328 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11329 yaxis->SetRange(biny,biny2);; 11330 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11331 if (nbins>1 && line1[0].GetX()) {; 11332 gVirtualX->DrawPolyLine(2,line2);; 11333 gVirtualX->DrawPolyLine(2,line3);; 11334 gVirtualX->DrawPolyLine(2,line4);; 11335 gVirtualX->DrawPolyLine(5,endface1);; 11336 gVirtualX->DrawPolyLine(5,endface2);; 11337 }; 11338 xx[0] = xaxis->GetBinCenter(binx);; 11339 xx[1] = yaxis->GetBinCenter(biny);; 11340 xx[2] = zaxis->GetXmin();; 11341 view->WCtoNDC(xx,u);; 11342 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11343 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11344 xx[2] = zaxis->GetXmax();; 11345 view->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:411337,ux,uxmin,411337,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,GetGUIFrame ; (; ). overridevirtual . Return top-frame of this eve-window - the pack. ; Implements TEveWindow.; Definition at line 1369 of file TEveWindow.cxx. ◆ GetPack(). TGPack * TEveWindowPack::GetPack ; (; ); const. inline . Definition at line 385 of file TEveWindow.h. ◆ IsA(). TClass * TEveWindowPack::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveWindow.; Definition at line 387 of file TEveWindow.h. ◆ NewSlot(). TEveWindowSlot * TEveWindowPack::NewSlot ; (; ). overridevirtual . Create a new frame-slot at the last position of the pack. ; Reimplemented from TEveWindow.; Definition at line 1377 of file TEveWindow.cxx. ◆ NewSlotWithWeight(). TEveWindowSlot * TEveWindowPack::NewSlotWithWeight ; (; Float_t ; w). virtual . Create a new weighted frame-slot at the last position of the pack. ; Definition at line 1385 of file TEveWindow.cxx. ◆ operator=(). TEveWindowPack & TEveWindowPack::operator= ; (; const TEveWindowPack & ; ). private . ◆ SetHorizontal(). void TEveWindowPack::SetHorizontal ; (; ). inline . Definition at line 381 of file TEveWindow.h. ◆ SetVertical(). void TEveWindowPack::SetVertical ; (; Bool_t ; x = kTRUE). Set orientation of the pack (vertical / horizontal). ; Definition at line 1411 of file TEveWindow.cxx. ◆ Streamer(). void TEveWindowPack::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveWindow. ◆ StreamerNVirtual(). void TEveWindowPack::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 387 of file TEveWindow.h. Member Data Documentation. ◆ fPack. TGPack* TEveWindowPack::fPack. protected . Definition at line 367 of file TEveWindow.h. Libraries for TEveWindowPack:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveWindowPack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:47 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:41394,Guid,Guide,41394,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,1,['Guid'],['Guide']
Usability,GetIOTree(). TTree * TMLPAnalyzer::GetIOTree ; (; ); const. inline . Definition at line 56 of file TMLPAnalyzer.h. ◆ GetLayers(). Int_t TMLPAnalyzer::GetLayers ; (; ). protected . Returns the number of layers. ; Definition at line 54 of file TMLPAnalyzer.cxx. ◆ GetNeuronFormula(). TString TMLPAnalyzer::GetNeuronFormula ; (; Int_t ; idx). protected . Returns the formula used as input for neuron (idx) in the first layer. ; Definition at line 102 of file TMLPAnalyzer.cxx. ◆ GetNeurons(). Int_t TMLPAnalyzer::GetNeurons ; (; Int_t ; layer). protected . Returns the number of neurons in given layer. ; Definition at line 63 of file TMLPAnalyzer.cxx. ◆ GetOutputNeuronTitle(). const char * TMLPAnalyzer::GetOutputNeuronTitle ; (; Int_t ; out). protected . Returns the name of any neuron from the output layer. ; Definition at line 137 of file TMLPAnalyzer.cxx. ◆ IsA(). TClass * TMLPAnalyzer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 58 of file TMLPAnalyzer.h. ◆ Streamer(). void TMLPAnalyzer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMLPAnalyzer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TMLPAnalyzer.h. Member Data Documentation. ◆ fAnalysisTree. TTree* TMLPAnalyzer::fAnalysisTree. private . Definition at line 29 of file TMLPAnalyzer.h. ◆ fIOTree. TTree* TMLPAnalyzer::fIOTree. private . Definition at line 30 of file TMLPAnalyzer.h. ◆ fNetwork. TMultiLayerPerceptron* TMLPAnalyzer::fNetwork. private . Definition at line 28 of file TMLPAnalyzer.h. Libraries for TMLPAnalyzer:. [legend]; The documentation for this class was generated from the following files:; math/mlp/inc/TMLPAnalyzer.h; math/mlp/src/TMLPAnalyzer.cxx. TMLPAnalyzer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:19759,Guid,Guide,19759,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['Guid'],['Guide']
Usability,"GetLast()) ) {; 5493 binOffset++;; 5494 xMin = pAxis->GetBinLowEdge(pAxis->GetFirst()+binOffset);; 5495 }; 5496 if (xMin <= 0) {; 5497 // this should cause an error if we have; 5498 return regions;; 5499 }; 5500 Double_t xMax = pAxis->GetBinUpEdge(pAxis->GetLast());; 5501 ; 5502 if (strategy == Bins) {; 5503 // logarithmic plot. we find the pixel for the bin; 5504 // pixel = eta * log10(V) - alpha; 5505 // where eta = nPixels/(log10(Vmax)-log10(Vmin)); 5506 // and alpha = nPixels*log10(Vmin)/(log10(Vmax)-log10(Vmin)); 5507 // and V is axis value; 5508 Double_t eta = (nPixels-1.0)/(TMath::Log10(xMax) - TMath::Log10(xMin));; 5509 Double_t offset = -1.0 * eta * TMath::Log10(xMin);; 5510 ; 5511 for (Int_t bin=pAxis->GetFirst()+binOffset; bin<=pAxis->GetLast(); bin++) {; 5512 ; 5513 // linear plot. we simply need to find the appropriate bin; 5514 // for the; 5515 Double_t xLowValue = pAxis->GetBinLowEdge(bin);; 5516 Double_t xUpValue = pAxis->GetBinUpEdge(bin);; 5517 Int_t xPx0 = eta*TMath::Log10(xLowValue)+ offset;; 5518 Int_t xPx1 = eta*TMath::Log10(xUpValue) + offset;; 5519 THistRenderingRegion region = {std::make_pair(xPx0, xPx1),; 5520 std::make_pair(bin, bin+1)};; 5521 regions.push_back(region);; 5522 }; 5523 ; 5524 } else {; 5525 ; 5526 // loop over pixels; 5527 ; 5528 Double_t beta = (TMath::Log10(xMax) - TMath::Log10(xMin))/(nPixels-1.0);; 5529 ; 5530 for (Int_t pixelIndex=0; pixelIndex<(nPixels-1); pixelIndex++) {; 5531 // linear plot; 5532 Int_t binLow = pAxis->FindBin(xMin*TMath::Power(10.0, beta*pixelIndex));; 5533 Int_t binHigh = pAxis->FindBin(xMin*TMath::Power(10.0, beta*(pixelIndex+1)));; 5534 THistRenderingRegion region = { std::make_pair(pixelIndex, pixelIndex+1),; 5535 std::make_pair(binLow, binHigh)};; 5536 regions.push_back(region);; 5537 }; 5538 }; 5539 } else {; 5540 // standard linear plot; 5541 ; 5542 if (strategy == Bins) {; 5543 // loop over bins; 5544 for (Int_t bin=pAxis->GetFirst(); bin<=pAxis->GetLast(); bin++) {; 5545 ; 5546 // linear plot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:206189,simpl,simply,206189,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simply']
Usability,"GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraphTime.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TRandom3.h; TText.h; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax.Definition TGraphTime.h:30; TMarkerManages Markers.Definition TMarker.h:22; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; mTMarker mDefinition textangle.C:8; AuthorOlivier Couet ; Definition in file gtime.C. tutorialsgraphicsgtime.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphics_2gtime_8C.html:5047,Guid,Guide,5047,doc/master/graphics_2gtime_8C.html,https://root.cern,https://root.cern/doc/master/graphics_2gtime_8C.html,1,['Guid'],['Guide']
Usability,"GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = __null, UInt_t w = 800, UInt_t h = 600). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStructViewerGUI.html:29194,Clear,Clear,29194,root/html604/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html604/TStructViewerGUI.html,4,"['Clear', 'Undo']","['Clear', 'Undo', 'UndoButton', 'UndoButtonSlot']"
Usability,"GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = __null, UInt_t w = 800, UInt_t h = 600). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStructViewerGUI.html:29194,Clear,Clear,29194,root/html602/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html602/TStructViewerGUI.html,4,"['Clear', 'Undo']","['Clear', 'Undo', 'UndoButton', 'UndoButtonSlot']"
Usability,"GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:4058,Undo,Undo,4058,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['Undo'],['Undo']
Usability,"GetSessionTag(). const char * TProofServ::GetSessionTag ; (; ); const. inline . Definition at line 245 of file TProofServ.h. ◆ GetSocket(). TSocket * TProofServ::GetSocket ; (; ); const. inline . Definition at line 257 of file TProofServ.h. ◆ GetTopSessionTag(). const char * TProofServ::GetTopSessionTag ; (; ); const. inline . Definition at line 246 of file TProofServ.h. ◆ GetTotSessions(). Int_t TProofServ::GetTotSessions ; (; ); const. inline . Definition at line 262 of file TProofServ.h. ◆ GetUser(). const char * TProofServ::GetUser ; (; ); const. inline . Definition at line 241 of file TProofServ.h. ◆ GetVirtMemMax(). Long_t TProofServ::GetVirtMemMax ; (; ). static . VirtMemMax getter. ; Definition at line 6920 of file TProofServ.cxx. ◆ GetWorkDir(). const char * TProofServ::GetWorkDir ; (; ); const. inline . Definition at line 243 of file TProofServ.h. ◆ GetWorkers(). TProofServ::EQueryAction TProofServ::GetWorkers ; (; TList * ; workers, . Int_t & ; prioritychange, . Bool_t ; resume = kFALSE . ). virtual . Get list of workers to be used from now on. ; The list must be provided by the caller. ; Definition at line 5692 of file TProofServ.cxx. ◆ HandleArchive(). void TProofServ::HandleArchive ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle archive request. ; Definition at line 3597 of file TProofServ.cxx. ◆ HandleCache(). Int_t TProofServ::HandleCache ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle here all cache and package requests. ; Definition at line 5280 of file TProofServ.cxx. ◆ HandleCheckFile(). void TProofServ::HandleCheckFile ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle file checking request. ; Definition at line 5129 of file TProofServ.cxx. ◆ HandleDataSets(). Int_t TProofServ::HandleDataSets ; (; TMessage * ; mess, . TString * ; slb = 0 . ). protectedvirtual . Handle here requests about datasets. ; Definition at line 6087 of file TProofServ.cxx. ◆ HandleException",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:43589,resume,resume,43589,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['resume'],['resume']
Usability,"GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TKey.h; TMemFile.h; TTree.h; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::GetTreeTTree * GetTree() constDefinition TBranch.h:252; TBranch::GetListOfBranchesTObjArray * GetListOfBranches()Definition TBranch.h:246; TDirectory::GetKeyvirtual TKey * GetKey(const char *, Short_t=9999) constDefinition TDirectory.h:221; TFile::GetCompressionSettingsInt_t GetCompressionSettings() constDefinition TFile.h:397; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::GetObjlenInt_t GetObjlen() constDefinition TKey.h:87; TKey::GetNbytesInt_t GetNbytes() constDefinition TKey.h:86; TMemFileA TMemFile is like a normal TFile except that it reads and writes only from memory.Definition TMemFile.h:19; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetDirectoryTDirectory * GetDirectory() constDefinition TTree.h:462; TTree::GetBranchRefvirtual TBranchRef * GetBranchRef() constDefinition TTree.h:450; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; nconst Int_t nDefinition legend1.C:16; Author; Definition in file printSizes.C. tutorialstreeprintSizes.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/printSizes_8C.html:8791,Guid,Guide,8791,doc/master/printSizes_8C.html,https://root.cern,https://root.cern/doc/master/printSizes_8C.html,1,['Guid'],['Guide']
Usability,"Getter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; class  TH2DModel;  A struct which stores the parameters of a TH2D. More...;  ; class  TH3DModel;  A struct which stores the parameters of a TH3D. More...;  ; class  THnDModel;  A struct which stores the parameters of a THnD. More...;  ; class  TProfile1DModel;  A struct which stores the parameters of a TProfile. More...;  ; class  TProfile2DModel;  A struct which stores the parameters of a TProfile2D. More...;  ; class  VerifyValidColumnType;  Helper to determine if a given Column is a supported type. More...;  . Typedefs; using ColumnNames_t = std::vector< std::string >;  ; using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void >;  ; using SampleCallback_t = std::function< void(unsigned int, const ROOT::RDF::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF.html:1715,simpl,simple,1715,doc/master/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html,2,['simpl'],['simple']
Usability,"Getting the right parameter errors with limits. 6.4 Fixing and releasing parameters; 6.5 Interpretation of parameter errors; 6.5.1 Statistical interpretation; 6.5.2 The reliability of M error estimates. 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.1.1 GaussFunction.h; 7.1.2 GaussFcn.h; 7.1.3 GaussFcn.cpp. 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases and installation can be obtained from the M homepage @bib-C++MINUIT.; The names of M applications are written in capital letters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:6082,guid,guidance,6082,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['guid'],['guidance']
Usability,"Graph(npoints,xaxis,yaxis);; TGraphErrors *gr2 = new TGraphErrors(npoints,xaxis,yaxis,errorx,errory);; TGraphAsymmErrors *gr3 = new TGraphAsymmErrors(npoints,xaxis,yaxis,exl,exh,eyl,eyh);; TF2 *ff = new TF2(""ff"",""-1./y"");; ; TCanvas *c1 = new TCanvas(""c1"",""c1"");; c1->Divide(2,3);; ; // TGraph; c1->cd(1);; gr1->DrawClone(""A*"");; c1->cd(2);; gr1->Apply(ff);; gr1->Draw(""A*"");; ; // TGraphErrors; c1->cd(3);; gr2->DrawClone(""A*"");; c1->cd(4);; gr2->Apply(ff);; gr2->Draw(""A*"");; ; // TGraphAsymmErrors; c1->cd(5);; gr3->DrawClone(""A*"");; c1->cd(6);; gr3->Apply(ff);; gr3->Draw(""A*"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvasThe Canvas class.Definition TCanvas.h:23; TF2A 2-Dim function with parameters.Definition TF2.h:29; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::Applyvoid Apply(TF1 *f) overrideApply function to all the data points .Definition TGraphErrors.cxx:396; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Applyvirtual void Apply(TF1 *f)Apply function f to all the data points f may be a 1-D function TF1 or 2-d function TF2 The Y values ...Definition TGraph.cxx:638; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; c1return c1Definition legend1.C:41; AuthorMiro Helbich ; Definition in file graphApply.C. tutorialsgraphsgraphApply.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphApply_8C.html:2794,Guid,Guide,2794,doc/master/graphApply_8C.html,https://root.cern,https://root.cern/doc/master/graphApply_8C.html,1,['Guid'],['Guide']
Usability,"GraphPolar example"");; ; grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");; ; // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();; }; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Colors automatically picked in palette; SinceROOT version 6.09/01; When several graphs are painted in the same canvas or when a multi-graph is drawn, it might be useful to have an easy and automatic way to choose their color. The simplest way is to pick colors in the current active color palette. Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and PMC (Palette Marker Color). When one of these options is given to TGraph::Draw the graph get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; ; void graphpalettecolor () {; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetPalette(kSolar);; ; double x[5] = {1,2,3,4,5};; double y1[5] = {1.0,2.0,1.0,2.5,3.0};; double y2[5] = {1.1,2.1,1.1,2.6,3.1};; double y3[5] = {1.2,2.2,1.2,2.7,3.2};; double y4[5] = {1.3,2.3,1.3,2.8,3.3};; double y5[5] = {1.4,2.4,1.4,2.9,3.4};; ; TGraph *g1 = new TGraph(5,x,y1); g1->SetTitle(""Graph with a red star"");; TGraph *g2 = new TGraph(5,x,y2); g2->SetTitle(""Graph with a circular marker"");; TGraph *g3 = new TGraph(5,x,y3); g3->SetTitle(""Graph with an open square marker"");; TGraph *g4 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:20386,simpl,simplest,20386,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['simpl'],['simplest']
Usability,"GraphPolar::GetYpolDouble_t * GetYpol()Return points in polar coordinates.Definition TGraphPolar.cxx:128; TGraphPolar::GetPolargramTGraphPolargram * GetPolargram()Definition TGraphPolar.h:39; TGraphPolar::GetOptionAxisBool_t GetOptionAxis()Definition TGraphPolar.h:42; TGraphPolar::SetPolargramvoid SetPolargram(TGraphPolargram *p)Definition TGraphPolar.h:50; TGraphPolar::SetOptionAxisvoid SetOptionAxis(Bool_t opt)Definition TGraphPolar.h:49; TGraphPolar::GetXpolDouble_t * GetXpol()Return points in polar coordinates.Definition TGraphPolar.cxx:119; TGraphPolargramTo draw polar axis.Definition TGraphPolargram.h:20; TGraphPolargram::GetRMinDouble_t GetRMin()Definition TGraphPolargram.h:77; TGraphPolargram::GetRMaxDouble_t GetRMax()Definition TGraphPolargram.h:78; TGraphPolargram::IsGradBool_t IsGrad()Definition TGraphPolargram.h:92; TGraphPolargram::IsDegreeBool_t IsDegree()Definition TGraphPolargram.h:90; TGraphPolargram::PaintCirclevoid PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta)This is simplified from TEllipse::PaintEllipse.Definition TGraphPolargram.cxx:373; TGraphPolargram::Drawvoid Draw(Option_t *options="""") overrideDraw Polargram.Definition TGraphPolargram.cxx:182; TGraphPolargram::kLabelOrtho@ kLabelOrthoDefinition TGraphPolargram.h:61; TGraphPolargram::GetTMinDouble_t GetTMin()Definition TGraphPolargram.h:80; TGraphPolargram::GetTMaxDouble_t GetTMax()Definition TGraphPolargram.h:81; TGraphQQThis class allows to draw quantile-quantile plots.Definition TGraphQQ.h:18; TGraphQQ::GetXq1Double_t GetXq1() constDefinition TGraphQQ.h:40; TGraphQQ::GetYq2Double_t GetYq2() constDefinition TGraphQQ.h:43; TGraphQQ::Classstatic TClass * Class(); TGraphQQ::GetXq2Double_t GetXq2() constDefinition TGraphQQ.h:41; TGraphQQ::GetFTF1 * GetF() constDefinition TGraphQQ.h:44; TGraphQQ::GetYq1Double_t GetYq1() constDefinition TGraphQQ.h:42; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:203440,simpl,simplified,203440,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simplified']
Usability,"GraphPolargram. ; Definition at line 327 of file TGraphPolargram.cxx. ◆ IsA(). TClass * TGraphPolargram::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 119 of file TGraphPolargram.h. ◆ IsDegree(). Bool_t TGraphPolargram::IsDegree ; (; ). inline . Definition at line 90 of file TGraphPolargram.h. ◆ IsGrad(). Bool_t TGraphPolargram::IsGrad ; (; ). inline . Definition at line 92 of file TGraphPolargram.h. ◆ IsRadian(). Bool_t TGraphPolargram::IsRadian ; (; ). inline . Definition at line 91 of file TGraphPolargram.h. ◆ Paint(). void TGraphPolargram::Paint ; (; Option_t * ; options = """"). overrideprivatevirtual . Paint TGraphPolargram. ; Reimplemented from TObject.; Definition at line 349 of file TGraphPolargram.cxx. ◆ PaintCircle(). void TGraphPolargram::PaintCircle ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; r, . Double_t ; phimin, . Double_t ; phimax, . Double_t ; theta . ). This is simplified from TEllipse::PaintEllipse. ; Draw this ellipse with new coordinates. ; Definition at line 373 of file TGraphPolargram.cxx. ◆ PaintPolarDivisions(). void TGraphPolargram::PaintPolarDivisions ; (; Bool_t ; optionLabels). private . Draw Polar divisions. ; Check for editable pad or create default. ; Definition at line 408 of file TGraphPolargram.cxx. ◆ PaintRadialDivisions(). void TGraphPolargram::PaintRadialDivisions ; (; Bool_t ; drawaxis). private . Paint radial divisions. ; Check for editable pad or create default. ; Definition at line 625 of file TGraphPolargram.cxx. ◆ ReduceFraction(). void TGraphPolargram::ReduceFraction ; (; Int_t ; Num, . Int_t ; Denom, . Int_t & ; rnum, . Int_t & ; rden . ). private . Reduce fractions. ; Definition at line 739 of file TGraphPolargram.cxx. ◆ SetAxisAngle(). void TGraphPolargram::SetAxisAngle ; (; Double_t ; angle = 0). Set axis angle. ; Definition at line 765 of file TGraphPolargram.cxx. ◆ SetNdivPolar(). void TGraphPolargram::SetNdivPolar ; (; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolargram.html:27142,simpl,simplified,27142,doc/master/classTGraphPolargram.html,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html,1,['simpl'],['simplified']
Usability,GraphicsDialog::fContourPar2. private . Parameter 2 for Contour. ; Definition at line 47 of file TAdvancedGraphicsDialog.h. ◆ fContourPoints. TGNumberEntry* TAdvancedGraphicsDialog::fContourPoints. private . Number of points for the graph. ; Definition at line 45 of file TAdvancedGraphicsDialog.h. ◆ fDraw. TGTextButton* TAdvancedGraphicsDialog::fDraw. private . ok button ; Definition at line 62 of file TAdvancedGraphicsDialog.h. ◆ fFitter. TBackCompFitter* TAdvancedGraphicsDialog::fFitter. private . Fitter. ; Definition at line 65 of file TAdvancedGraphicsDialog.h. ◆ fMainFrame. TGVerticalFrame* TAdvancedGraphicsDialog::fMainFrame. private . Main Vertical Frame. ; Definition at line 41 of file TAdvancedGraphicsDialog.h. ◆ fScanFrame. TGVerticalFrame* TAdvancedGraphicsDialog::fScanFrame. private . Scan Frame. ; Definition at line 52 of file TAdvancedGraphicsDialog.h. ◆ fScanMax. TGNumberEntry* TAdvancedGraphicsDialog::fScanMax. private . Max Value for Contour. ; Definition at line 56 of file TAdvancedGraphicsDialog.h. ◆ fScanMin. TGNumberEntry* TAdvancedGraphicsDialog::fScanMin. private . Min Value for Contour. ; Definition at line 55 of file TAdvancedGraphicsDialog.h. ◆ fScanPar. TGComboBox* TAdvancedGraphicsDialog::fScanPar. private . Parameter for Scan. ; Definition at line 54 of file TAdvancedGraphicsDialog.h. ◆ fScanPoints. TGNumberEntry* TAdvancedGraphicsDialog::fScanPoints. private . Number of points for the graph. ; Definition at line 53 of file TAdvancedGraphicsDialog.h. ◆ fTab. TGTab* TAdvancedGraphicsDialog::fTab. private . Tab containing the available methods. ; Definition at line 42 of file TAdvancedGraphicsDialog.h. Libraries for TAdvancedGraphicsDialog:. [legend]; The documentation for this class was generated from the following files:; gui/fitpanel/inc/TAdvancedGraphicsDialog.h; gui/fitpanel/src/TAdvancedGraphicsDialog.cxx. TAdvancedGraphicsDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:46112,Guid,Guide,46112,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,1,['Guid'],['Guide']
Usability,"Grid::ResubmitById ; (; TString ; ). inlinevirtual . Definition at line 114 of file TGrid.h. ◆ Rm(). virtual Bool_t TGrid::Rm ; (; const char * ; , . Option_t * ; = """", . Bool_t ; = kFALSE . ). inlinevirtual . Definition at line 98 of file TGrid.h. ◆ Rmdir(). virtual Bool_t TGrid::Rmdir ; (; const char * ; = """", . Option_t * ; = """", . Bool_t ; = kFALSE . ). inlinevirtual . Definition at line 94 of file TGrid.h. ◆ Shell(). virtual void TGrid::Shell ; (; ). inlinevirtual . Definition at line 68 of file TGrid.h. ◆ Stderr(). virtual void TGrid::Stderr ; (; ). inlinevirtual . Definition at line 70 of file TGrid.h. ◆ Stdout(). virtual void TGrid::Stdout ; (; ). inlinevirtual . Definition at line 69 of file TGrid.h. ◆ Streamer(). void TGrid::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGrid::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 125 of file TGrid.h. ◆ Submit(). virtual TGridJob * TGrid::Submit ; (; const char * ; ). inlinevirtual . Definition at line 102 of file TGrid.h. Member Data Documentation. ◆ fGrid. TString TGrid::fGrid. protected . Definition at line 48 of file TGrid.h. ◆ fGridUrl. TString TGrid::fGridUrl. protected . Definition at line 47 of file TGrid.h. ◆ fHost. TString TGrid::fHost. protected . Definition at line 49 of file TGrid.h. ◆ fOptions. TString TGrid::fOptions. protected . Definition at line 52 of file TGrid.h. ◆ fPort. Int_t TGrid::fPort. protected . Definition at line 53 of file TGrid.h. ◆ fPw. TString TGrid::fPw. protected . Definition at line 51 of file TGrid.h. ◆ fUser. TString TGrid::fUser. protected . Definition at line 50 of file TGrid.h. Libraries for TGrid:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TGrid.h; net/net/src/TGrid.cxx. TGrid. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGrid.html:18842,Guid,Guide,18842,doc/master/classTGrid.html,https://root.cern,https://root.cern/doc/master/classTGrid.html,1,['Guid'],['Guide']
Usability,"H1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayC::AddAt(Char_t c, Int_t i); virtual voidTH3C::AddBinContent(Int_t bin); virtual voidTH3C::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidAddTH3(const TH3* hist, TGLTH3Composition::ETH3BinShape shape = kBox); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidTH3C::Copy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH3C::DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLTH3Composition.html:1508,Clear,Clear,1508,root/html528/TGLTH3Composition.html,https://root.cern,https://root.cern/root/html528/TGLTH3Composition.html,3,['Clear'],['Clear']
Usability,"H1::CheckBinLimitsstatic bool CheckBinLimits(const TAxis *a1, const TAxis *a2)Check bin limits.Definition TH1.cxx:1541; TH1::AddBinContentvirtual void AddBinContent(Int_t bin)Increment bin content by 1.Definition TH1.cxx:1268; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::FitOptionsMakestatic Int_t FitOptionsMake(Option_t *option, Foption_t &Foption)Decode string choptin and fill fitOption structure.Definition TH1.cxx:4652; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetNormFactorvirtual Double_t GetNormFactor() constDefinition TH1.h:301; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::GetSkewnessvirtual Double_t GetSkewness(Int_t axis=1) constDefinition TH1.cxx:7671; TH1::ClearUnderflowAndOverflowvirtual void ClearUnderflowAndOverflow()Remove all the content from the underflow and overflow bins, without changing the number of entries A...Definition TH1.cxx:2517; TH1::GetContourLevelPadvirtual Double_t GetContourLevelPad(Int_t level) constReturn the value of contour number ""level"" in Pad coordinates.Definition TH1.cxx:8440; TH1::DrawNormalizedvirtual TH1 * DrawNormalized(Option_t *option="""", Double_t norm=1) constDraw a normalized copy of this histogram.Definition TH1.cxx:3144; TH1::kNeutral@ kNeutralAdapt to the global flag.Definition TH1.h:83; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TH1.cxx:6933; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::kIsAverage@ kIsAverageBin contents are average (used by Add)Definition TH1.h:171; TH1::kUserContour@ kUserContourUser specified contour levels.Definition TH1.h:166; TH1:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:438899,Clear,ClearUnderflowAndOverflowvirtual,438899,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['Clear'],"['ClearUnderflowAndOverflow', 'ClearUnderflowAndOverflowvirtual']"
Usability,"H1::Fit)Definition HFitImpl.cxx:972; ROOT::Fit::Chisquaredouble Chisquare(const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type)compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation)Definition HFitImpl.cxx:1027; ROOT::Fit::FitOptionsMakevoid FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption)Decode list of options into fitOption.Definition HFitImpl.cxx:685; ROOT::Fit::EFitObjectType::kGraph@ kGraph; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Foption_tDefinition Foption.h:24; Drawth1 Draw(); mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. histhistsrcTGraph.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:140355,Guid,Guide,140355,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['Guid'],['Guide']
Usability,"H1Editor.h. ◆ f8. TGCompositeFrame* TH1Editor::f8. protected . Contains the Bar Chart CheckBox. ; Definition at line 63 of file TH1Editor.h. ◆ f9. TGCompositeFrame* TH1Editor::f9. protected . Contains the Bar Option CheckBox. ; Definition at line 64 of file TH1Editor.h. ◆ fAdd. TGCheckButton* TH1Editor::fAdd. protected . Activate more Options. ; Definition at line 53 of file TH1Editor.h. ◆ fAddB. TGCheckButton* TH1Editor::fAddB. protected . Draw a Bar Chart. ; Definition at line 51 of file TH1Editor.h. ◆ fAddBar. TGCheckButton* TH1Editor::fAddBar. protected . Bar Option. ; Definition at line 52 of file TH1Editor.h. ◆ fAddCombo. TGComboBox* TH1Editor::fAddCombo. protected . Add Lines, Bars, Fill. ; Definition at line 58 of file TH1Editor.h. ◆ fAddMarker. TGCheckButton* TH1Editor::fAddMarker. protected . Draw a Marker on top of each bin. ; Definition at line 50 of file TH1Editor.h. ◆ fAddSimple. TGCheckButton* TH1Editor::fAddSimple. protected . Draw a simple histogram (==HIST draw option) ; Definition at line 55 of file TH1Editor.h. ◆ fApply. TGTextButton* TH1Editor::fApply. protected . Apply-Button to accept the rebinned histogram. ; Definition at line 81 of file TH1Editor.h. ◆ fBarOffset. TGNumberEntry* TH1Editor::fBarOffset. protected . Change the Bar Offset. ; Definition at line 57 of file TH1Editor.h. ◆ fBarWidth. TGNumberEntry* TH1Editor::fBarWidth. protected . Change the Bar Width. ; Definition at line 56 of file TH1Editor.h. ◆ fBin. TGCompositeFrame* TH1Editor::fBin. protected . Contains the Binning Widgets. ; Definition at line 38 of file TH1Editor.h. ◆ fBinCont. TGCompositeFrame* TH1Editor::fBinCont. protected . Contains the Rebin Widgets for case 1. ; Definition at line 69 of file TH1Editor.h. ◆ fBinCont1. TGCompositeFrame* TH1Editor::fBinCont1. protected . Contains the Rebin Widgets for case 2. ; Definition at line 70 of file TH1Editor.h. ◆ fBinHist. TH1* TH1Editor::fBinHist. private . Definition at line 113 of file TH1Editor.h. ◆ fBinNumberEntry. TGNumber",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:55985,simpl,simple,55985,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['simpl'],['simple']
Usability,"H2F(""h"",""test"",nx,0,nx,ny,0,ny);; for (i=0;i<5000;i++) {; h->Fill(gRandom->Gaus(0.5*nx,0.2*nx),; gRandom->Gaus(0.5*ny,0.2*ny));; }; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,month[i-1]);; for (i=1;i<=ny;i++) h->GetYaxis()->SetBinLabel(i,people[i-1]);; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; ptTPaveText * ptDefinition entrylist_figure1.C:7; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file labels2.C. tutorialsgraphslabels2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/labels2_8C.html:2732,Guid,Guide,2732,doc/master/labels2_8C.html,https://root.cern,https://root.cern/doc/master/labels2_8C.html,1,['Guid'],['Guide']
Usability,"H2Poly *h2p = new TH2Poly();; h2p->SetName(""Boxes"");; h2p->SetTitle(""Boxes"");; ; Int_t i,j;; Int_t nx = 40;; Int_t ny = 40;; Double_t xval1,yval1,xval2,yval2;; Double_t dx=0.2, dy=0.1;; xval1 = 0.;; xval2 = dx;; ; for (i = 0; i<nx; i++) {; yval1 = 0.;; yval2 = dy;; for (j = 0; j<ny; j++) {; h2p->AddBin(xval1, yval1, xval2, yval2);; yval1 = yval2;; yval2 = yval2+yval2*dy;; }; xval1 = xval2;; xval2 = xval2+xval2*dx;; }; ; TRandom ran;; for (i = 0; i<300000; i++) {; h2p->Fill(50*ran.Gaus(2.,1), ran.Gaus(2.,1));; }; ; h2p->Draw(""COLZ"");; return ch2p2;; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH2Poly2D Histogram with Polygonal BinsDefinition TH2Poly.h:66; TH2Poly::FillInt_t Fill(Double_t x, Double_t y) overrideIncrement the bin containing (x,y) by 1.Definition TH2Poly.cxx:664; TH2Poly::AddBinvirtual Int_t AddBin(TObject *poly)Adds a new bin to the histogram.Definition TH2Poly.cxx:297; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; AuthorOlivier Couet ; Definition in file th2polyBoxes.C. tutorialshistth2polyBoxes.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyBoxes_8C.html:2357,Guid,Guide,2357,doc/master/th2polyBoxes_8C.html,https://root.cern,https://root.cern/doc/master/th2polyBoxes_8C.html,1,['Guid'],['Guide']
Usability,"HEADER> IdTransformation : Ranking result (top variable is best ranked); : -----------------------------; : Rank : Variable : Separation; : -----------------------------; : 1 : var4 : 3.564e-01; : 2 : var3 : 2.899e-01; : 3 : var1 : 2.792e-01; : 4 : var2 : 2.260e-01; : -----------------------------; <HEADER> Factory : Train method: BDT for Classification; : ; <HEADER> BDT : #events: (reweighted) sig: 3000 bkg: 3000; : #events: (unweighted) sig: 3000 bkg: 3000; : Training 300 Decision Trees ... patience please; : Elapsed time for training with 6000 events: 0.538 sec ; <HEADER> BDT : [tmva003_BDT] : Evaluation of BDT on training sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0709 sec ; : Creating xml weight file: tmva003_BDT/weights/tmva003_BDT.weights.xml; : Creating standalone class: tmva003_BDT/weights/tmva003_BDT.class.C; : TMVARR.root:/tmva003_BDT/Method_BDT/BDT; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDT : Ranking result (top variable is best ranked); : --------------------------------------; : Rank : Variable : Variable Importance; : --------------------------------------; : 1 : var4 : 3.940e-01; : 2 : var1 : 2.619e-01; : 3 : var2 : 1.849e-01; : 4 : var3 : 1.592e-01; : --------------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: tmva003_BDT/weights/tmva003_BDT.weights.xml; Single-event inference: 0.233873; ; RTensor input for inference on data of multiple events:; { { -1.14361, -0.822373, -0.495426, -0.629427 } { 2.14344, -0.0189228, 0.26703, 1.26749 } { -0.443913, 0.486827, 0.139535, 0.611483 } }; ; Prediction performed on multiple events: { 0.173541, -0.0540229, 0.266502 }; ; DateJuly 2019 ; AuthorStefan Wunsch ; Definition in file tmva003_RReader.C. tutorialstmvatmva003_RReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva003__RReader_8C.html:11467,Guid,Guide,11467,doc/master/tmva003__RReader_8C.html,https://root.cern,https://root.cern/doc/master/tmva003__RReader_8C.html,1,['Guid'],['Guide']
Usability,"HIS_NOW)). Definition at line 475 of file RConfig.hxx. ◆ R__ALWAYS_INLINE. #define R__ALWAYS_INLINE   inline. Definition at line 552 of file RConfig.hxx. ◆ R__ALWAYS_SUGGEST_ALTERNATIVE. #define R__ALWAYS_SUGGEST_ALTERNATIVE; (;  ; ALTERNATIVE);     _R__DEPRECATED_LATER(""There is a superior alternative: "" ALTERNATIVE). Definition at line 515 of file RConfig.hxx. ◆ R__ANSISTREAM. #define R__ANSISTREAM   /* ANSI C++ Standard Library conformant */. Definition at line 37 of file RConfig.hxx. ◆ R__DEPRECATED. #define R__DEPRECATED; (;  ; MAJOR, .  ; MINOR, .  ; REASON . );     _R__JOIN3_(_R__DEPRECATED_,MAJOR,MINOR)(""will be removed in ROOT v"" #MAJOR ""."" #MINOR "": "" REASON). Definition at line 504 of file RConfig.hxx. ◆ R__HIDDEN. #define R__HIDDEN. Definition at line 349 of file RConfig.hxx. ◆ R__INTENTIONALLY_UNINIT_BEGIN. #define R__INTENTIONALLY_UNINIT_BEGIN. Definition at line 541 of file RConfig.hxx. ◆ R__INTENTIONALLY_UNINIT_END. #define R__INTENTIONALLY_UNINIT_END. Definition at line 542 of file RConfig.hxx. ◆ R__likely. #define R__likely; (;  ; expr);    expr. Definition at line 587 of file RConfig.hxx. ◆ R__NEVER_INLINE. #define R__NEVER_INLINE   inline. Definition at line 564 of file RConfig.hxx. ◆ R__SIZEDDELETE. #define R__SIZEDDELETE. Definition at line 341 of file RConfig.hxx. ◆ R__SSTREAM. #define R__SSTREAM   /* use sstream or strstream header */. Definition at line 38 of file RConfig.hxx. ◆ R__SUGGEST_ALTERNATIVE. #define R__SUGGEST_ALTERNATIVE; (;  ; ALTERNATIVE). Definition at line 512 of file RConfig.hxx. ◆ R__unlikely. #define R__unlikely; (;  ; expr);    expr. Definition at line 586 of file RConfig.hxx. ◆ R__USE_SHADOW_CLASS. #define R__USE_SHADOW_CLASS. Definition at line 34 of file RConfig.hxx. ◆ SafeDelete. #define SafeDelete; (;  ; p);    { delete p; p = nullptr; }. Definition at line 525 of file RConfig.hxx. corefoundationincROOTRConfig.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RConfig_8hxx.html:5652,Guid,Guide,5652,doc/v632/RConfig_8hxx.html,https://root.cern,https://root.cern/doc/v632/RConfig_8hxx.html,1,['Guid'],['Guide']
Usability,"HandleConfigureNotify ; (; Event_t * ; event). overridevirtual . Handles resize events for this widget. ; Implements TGSlider.; Definition at line 548 of file TGSlider.cxx. ◆ HandleMotion(). Bool_t TGHSlider::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in horizontal slide widget. ; Implements TGSlider.; Definition at line 524 of file TGSlider.cxx. ◆ IsA(). TClass * TGHSlider::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 142 of file TGSlider.h. ◆ Resize() [1/2]. void TGHSlider::Resize ; (; TGDimension ; size). inlineoverridevirtual . Resize the frame. ; Reimplemented from TGFrame.; Definition at line 139 of file TGSlider.h. ◆ Resize() [2/2]. void TGHSlider::Resize ; (; UInt_t ; w, . UInt_t ; h . ). inlineoverridevirtual . Resize the frame. ; If w=0 && h=0 - Resize to default size ; Reimplemented from TGFrame.; Definition at line 138 of file TGSlider.h. ◆ SavePrimitive(). void TGHSlider::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal slider as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 590 of file TGSlider.cxx. ◆ Streamer(). void TGHSlider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGHSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file TGSlider.h. Member Data Documentation. ◆ fXp. Int_t TGHSlider::fXp. protected . horizontal slider x position in pixel coordinates ; Definition at line 122 of file TGSlider.h. Libraries for TGHSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGSlider.h; gui/gui/src/TGSlider.cxx. TGHSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSlider.html:34603,Guid,Guide,34603,doc/master/classTGHSlider.html,https://root.cern,https://root.cern/doc/master/classTGHSlider.html,1,['Guid'],['Guide']
Usability,"Handler;  CVolumeVolume for BinarySearchTree ;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nvecgeom;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  CBasicRNNLayerGeneric implementation ;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  Cclient_cert;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_cert;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_header;  Cmg_option;  Cmg_request_info;  Cmg_response_info;  Cmg_server_ports;  Cmg_websocket_subprotocols;  CMultiDistFree functions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:91720,simpl,simple,91720,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['simpl'],['simple']
Usability,"Hdr () const;  ; TMacro * GetSelecImp () const;  ; Int_t GetSeqNum () const;  ; TDatime GetStartTime () const;  ; EQueryStatus GetStatus () const;  ; Float_t GetTermTime () const;  ; Float_t GetUsedCPU () const;  ; TClass * IsA () const override;  ; bool IsArchived () const;  ; virtual bool IsDone () const;  ; bool IsDraw () const;  ; bool IsFinalized () const;  ; bool Matches (const char *ref);  Return TRUE if reference ref matches. ;  ; void Print (Option_t *opt="""") const override;  Print query content. Use opt = ""F"" for a full listing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofQueryResult.html:2632,Clear,Clear,2632,doc/master/classTProofQueryResult.html,https://root.cern,https://root.cern/doc/master/classTProofQueryResult.html,2,['Clear'],['Clear']
Usability,"Height;  height of picture ;  ; Mask_t fMask;  mask specifying which attributes are defined ;  ; UInt_t fNpixels;  number of used color pixels ;  ; ULong_t * fPixels;  list of used color pixels (if set use delete[]) ;  ; UInt_t fWidth;  width of picture ;  ; UInt_t fXHotspot;  picture x hotspot coordinate ;  ; UInt_t fYHotspot;  picture y hotspot coordinate ;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fCloseness. UInt_t PictureAttributes_t::fCloseness. allowable RGB deviation ; Definition at line 332 of file GuiTypes.h. ◆ fColormap. Colormap_t PictureAttributes_t::fColormap. colormap to use ; Definition at line 324 of file GuiTypes.h. ◆ fDepth. Int_t PictureAttributes_t::fDepth. depth of window ; Definition at line 325 of file GuiTypes.h. ◆ fHeight. UInt_t PictureAttributes_t::fHeight. height of picture ; Definition at line 327 of file GuiTypes.h. ◆ fMask. Mask_t PictureAttributes_t::fMask. mask specifying which attributes are defined ; Definition at line 333 of file GuiTypes.h. ◆ fNpixels. UInt_t PictureAttributes_t::fNpixels. number of used color pixels ; Definition at line 331 of file GuiTypes.h. ◆ fPixels. ULong_t* PictureAttributes_t::fPixels. list of used color pixels (if set use delete[]) ; Definition at line 330 of file GuiTypes.h. ◆ fWidth. UInt_t PictureAttributes_t::fWidth. width of picture ; Definition at line 326 of file GuiTypes.h. ◆ fXHotspot. UInt_t PictureAttributes_t::fXHotspot. picture x hotspot coordinate ; Definition at line 328 of file GuiTypes.h. ◆ fYHotspot. UInt_t PictureAttributes_t::fYHotspot. picture y hotspot coordinate ; Definition at line 329 of file GuiTypes.h. Collaboration diagram for PictureAttributes_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/gui/inc/GuiTypes.h. PictureAttributes_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structPictureAttributes__t.html:2352,Guid,Guide,2352,doc/master/structPictureAttributes__t.html,https://root.cern,https://root.cern/doc/master/structPictureAttributes__t.html,1,['Guid'],['Guide']
Usability,"Helper;  CVectorHelper< _M128 >;  CVectorHelper< _M128D >;  CVectorHelper< _M128I >;  CVectorHelper< double >;  CVectorHelper< float >;  CVectorHelper< float8 >;  CVectorHelper< int >;  CVectorHelper< M256 >;  CVectorHelper< signed short >;  CVectorHelper< unsigned int >;  CVectorHelper< unsigned short >;  CVectorHelperSize;  CVectorTraits;  CVectorTypeHelper;  CVectorTypeHelper< double >;  CVectorTypeHelper< float >;  CVectorTypeHelper< sfloat >;  CWriteMaskedVector;  C_MemorySizeCalculation;  CBinaryOperation;  CCpuIdThis class is available for x86 / AMD64 systems to read and interpret information about the CPU's capabilities ;  CDetermineEntryType;  CDetermineEntryType< sfloat >;  CImplementationT;  CMath;  CMath< double >;  CMath< float >;  CMemoryA helper class for fixed-size two-dimensional arrays ;  CMemory< V, 0u, 0u >A helper class that is very similar to Memory<V, Size> but with dynamically allocated memory and thus dynamic size ;  CMemory< V, Size, 0u >A helper class to simplify usage of correctly aligned and padded memory, allowing both vector and scalar access ;  CMemoryBaseCommon interface to all Memory classes, independent of allocation on the stack or heap ;  CMemoryDimensionBase;  CMemoryDimensionBase< V, Parent, 1, RowMemory >;  CMemoryDimensionBase< V, Parent, 2, RowMemory >;  CNegateTypeHelper;  CNegateTypeHelper< unsigned char >;  CNegateTypeHelper< unsigned int >;  CNegateTypeHelper< unsigned short >;  COperand;  Csfloat;  CTrigonometric;  CVectorPointerHelperHelper class for the Memory::vector(size_t) class of functions ;  CVectorPointerHelperConstHelper class for the Memory::vector(size_t) class of functions ;  C_ConfigurationConfiguration ------------------------------------------------------------— ;  C_ExpandMacroFunctionPut std namespace directly onto ROOT ----------------------------------—— ;  CModuleFacadeAllow loading ROOT classes as attributes ---------------------------------— ;  CRootNameCompleter;  ►CTAxisBaseHistogram axis base cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:68162,simpl,simplify,68162,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simplify']
Usability,"Helper~ProgressHelper()=default; ROOT::RDF::Experimental::ProgressHelper::fIsTTYbool fIsTTYDefinition RDFHelpers.hxx:347; ROOT::RDF::Experimental::ProgressHelper::fPrintMutexstd::mutex fPrintMutexDefinition RDFHelpers.hxx:346; ROOT::RDF::Experimental::ProgressHelper::fTotalFilesunsigned int fTotalFilesDefinition RDFHelpers.hxx:344; ROOT::RDF::Experimental::ProgressHelper::RecordEvtCountAndTimestd::pair< std::size_t, std::chrono::seconds > RecordEvtCountAndTime()Record current event counts and time stamp, populate evts/s statistics array.Definition RDFHelpers.cxx:174; ROOT::RDF::Experimental::ProgressHelper::registerNewSamplevoid registerNewSample(unsigned int, const ROOT::RDF::RSampleInfo &id)Register a new sample for completion statistics.Definition RDFHelpers.hxx:378; ROOT::RDF::Experimental::ProgressHelper::fUseShellColoursbool fUseShellColoursDefinition RDFHelpers.hxx:348; ROOT::RDF::Experimental::ProgressHelper::PrintProgressBarvoid PrintProgressBar(std::ostream &stream, std::size_t currentEventCount) constPrint a progress bar of width ProgressHelper::fBarWidth if fGetNEventsOfCurrentFile is known.Definition RDFHelpers.cxx:303; ROOT::RDF::Experimental::ProgressHelper::operator()void operator()(unsigned int, T &value)Thread-safe callback for RDataFrame.Definition RDFHelpers.hxx:389; ROOT::RDF::Experimental::ProgressHelper::PrintStatsvoid PrintStats(std::ostream &stream, std::size_t currentEventCount, std::chrono::seconds totalElapsedSeconds) constPrint event and time statistics.Definition RDFHelpers.cxx:225; ROOT::RDF::Experimental::ProgressHelper::fSampleNameToEventEntriesstd::map< std::string, ULong64_t > fSampleNameToEventEntriesDefinition RDFHelpers.hxx:338; ROOT::RDF::Experimental::ProgressHelper::fTreestd::shared_ptr< TTree > fTreeDefinition RDFHelpers.hxx:350; ROOT::RDF::Experimental::ProgressHelper::fIncrementstd::size_t fIncrementDefinition RDFHelpers.hxx:335; ROOT::RDF::Experimental::ProgressHelper::fLastProcessedEventsstd::size_t fLastProcessedEventsDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:23279,progress bar,progress bar,23279,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['progress bar'],['progress bar']
Usability,"Hierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 49 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription& ROOT::RGeomHierarchy::fDesc. protected . ! geometry description, shared with external ; Definition at line 30 of file RGeomHierarchy.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RGeomHierarchy::fWebWindow. protected . ! web window to show geometry ; Definition at line 31 of file RGeomHierarchy.hxx. Libraries for ROOT::RGeomHierarchy:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeomHierarchy.hxx; geom/webviewer/src/RGeomHierarchy.cxx. ROOTRGeomHierarchy. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:3632,Guid,Guide,3632,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['Guid'],['Guide']
Usability,"Hintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddButtonAdd >> button; TGCheckButton*fAppendFilesappend files; TGTextButton*fBrowseButtonBrowse... button; TGTextButton*fClearButtonClear button; TGTextButton*fCloseDlgButtonClose Dialog button; TGTextEntry*fDSetNamedataset name text entry; TGTextEntry*fDestinationURLdestination URL text entry; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2). void CloseWindow(). TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). virtual ~TUploadDataSetDlg(). void AddFiles(const char* fileName). void AddFiles(TList* fileList). void BrowseFiles(). void ClearFiles(). void RemoveFile(). void UploadDataSet(). void OnOverwriteDataset(Bool_t on). void OnOverwriteFiles(Bool_t on). void OnAppendFiles(Bool_t on). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUploadDataSetDlg.html:23122,Clear,ClearFiles,23122,root/html534/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html534/TUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,Hist. TH1* RooStats::MCMCIntervalPlot::fNLLHist = nullptr. private . Definition at line 57 of file MCMCIntervalPlot.h. ◆ fParameters. RooArgSet* RooStats::MCMCIntervalPlot::fParameters = nullptr. private . Definition at line 53 of file MCMCIntervalPlot.h. ◆ fParamGraph. TGraph* RooStats::MCMCIntervalPlot::fParamGraph = nullptr. private . Definition at line 69 of file MCMCIntervalPlot.h. ◆ fPosteriorHist. TH1* RooStats::MCMCIntervalPlot::fPosteriorHist = nullptr. private . Definition at line 54 of file MCMCIntervalPlot.h. ◆ fPosteriorHistHistCopy. TH1* RooStats::MCMCIntervalPlot::fPosteriorHistHistCopy = nullptr. private . Definition at line 59 of file MCMCIntervalPlot.h. ◆ fPosteriorHistTFCopy. TH1* RooStats::MCMCIntervalPlot::fPosteriorHistTFCopy = nullptr. private . Definition at line 60 of file MCMCIntervalPlot.h. ◆ fPosteriorKeysPdf. RooNDKeysPdf* RooStats::MCMCIntervalPlot::fPosteriorKeysPdf = nullptr. private . Definition at line 55 of file MCMCIntervalPlot.h. ◆ fPosteriorKeysProduct. RooProduct* RooStats::MCMCIntervalPlot::fPosteriorKeysProduct = nullptr. private . Definition at line 56 of file MCMCIntervalPlot.h. ◆ fShadeColor. Color_t RooStats::MCMCIntervalPlot::fShadeColor = kGray. private . Definition at line 63 of file MCMCIntervalPlot.h. ◆ fShowBurnIn. bool RooStats::MCMCIntervalPlot::fShowBurnIn = true. private . Definition at line 65 of file MCMCIntervalPlot.h. ◆ fWalk. TGraph* RooStats::MCMCIntervalPlot::fWalk = nullptr. private . Definition at line 66 of file MCMCIntervalPlot.h. ◆ fWeightHist. TH1* RooStats::MCMCIntervalPlot::fWeightHist = nullptr. private . Definition at line 58 of file MCMCIntervalPlot.h. Libraries for RooStats::MCMCIntervalPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/MCMCIntervalPlot.h; roofit/roostats/src/MCMCIntervalPlot.cxx. RooStatsMCMCIntervalPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html:24303,Guid,Guide,24303,doc/master/classRooStats_1_1MCMCIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html,1,['Guid'],['Guide']
Usability,"Histogram->GetYaxis()->GetLabelSize();; 3632 Int_t XNdiv = fHistogram->GetXaxis()->GetNdivisions();; 3633 Int_t YNdiv = fHistogram->GetYaxis()->GetNdivisions();; 3634 ; 3635 delete fHistogram;; 3636 fHistogram = nullptr;; 3637 GetHistogram();; 3638 ; 3639 fHistogram->GetXaxis()->SetTitle(XAxisTitle.Data());; 3640 fHistogram->GetYaxis()->SetTitle(YAxisTitle.Data());; 3641 fHistogram->GetXaxis()->SetLabelColor(XLabCol);; 3642 fHistogram->GetYaxis()->SetLabelColor(YLabCol);; 3643 fHistogram->GetXaxis()->SetLabelFont(XLabFont);; 3644 fHistogram->GetYaxis()->SetLabelFont(YLabFont);; 3645 fHistogram->GetXaxis()->SetLabelOffset(XLabOffset);; 3646 fHistogram->GetYaxis()->SetLabelOffset(YLabOffset);; 3647 fHistogram->GetXaxis()->SetLabelSize(XLabSize);; 3648 fHistogram->GetYaxis()->SetLabelSize(YLabSize);; 3649 fHistogram->GetXaxis()->SetNdivisions(XNdiv);; 3650 fHistogram->GetYaxis()->SetNdivisions(YNdiv);; 3651 }; 3652 if (!fIntegral.empty()) {; 3653 fIntegral.clear();; 3654 fAlpha.clear();; 3655 fBeta.clear();; 3656 fGamma.clear();; 3657 }; 3658 if (fNormalized) {; 3659 // need to compute the integral of the not-normalized function; 3660 fNormalized = false;; 3661 fNormIntegral = Integral(fXmin, fXmax, 0.0);; 3662 fNormalized = true;; 3663 } else; 3664 fNormIntegral = 0;; 3665 ; 3666 // std::vector<double>x(fNdim);; 3667 // if ((fType == 1) && !fFunctor->Empty()) (*fFunctor)x.data(), (Double_t*)fParams);; 3668 if (fType == EFType::kCompositionFcn && fComposition) {; 3669 // double-check that the parameters are correct; 3670 fComposition->SetParameters(GetParameters());; 3671 ; 3672 fComposition->Update(); // should not be necessary, but just to be safe; 3673 }; 3674}; 3675 ; 3676////////////////////////////////////////////////////////////////////////////////; 3677/// Static function to set the global flag to reject points; 3678/// the fgRejectPoint global flag is tested by all fit functions; 3679/// if TRUE the point is not included in the fit.; 3680/// This flag can be se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:139335,clear,clear,139335,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['clear'],['clear']
Usability,"Histogram;; 1227 fHistogram = nullptr;; 1228 }; 1229 }; 1230 if (fHistogram) {; 1231 minimum = fHistogram->GetYaxis()->GetXmin();; 1232 maximum = fHistogram->GetYaxis()->GetXmax();; 1233 uxmin = gPad->PadtoX(rwxmin);; 1234 uxmax = gPad->PadtoX(rwxmax);; 1235 } else {; 1236 Bool_t initialrangeset = kFALSE;; 1237 while (auto g = (TGraph*) next()) {; 1238 if (g->GetN() <= 0) continue;; 1239 if (initialrangeset) {; 1240 Double_t rx1,ry1,rx2,ry2;; 1241 g->ComputeRange(rx1, ry1, rx2, ry2);; 1242 if (rx1 < rwxmin) rwxmin = rx1;; 1243 if (ry1 < rwymin) rwymin = ry1;; 1244 if (rx2 > rwxmax) rwxmax = rx2;; 1245 if (ry2 > rwymax) rwymax = ry2;; 1246 } else {; 1247 g->ComputeRange(rwxmin, rwymin, rwxmax, rwymax);; 1248 initialrangeset = kTRUE;; 1249 }; 1250 if (g->GetN() > npt) npt = g->GetN();; 1251 }; 1252 if (rwxmin == rwxmax) rwxmax += 1.;; 1253 if (rwymin == rwymax) rwymax += 1.;; 1254 dx = 0.05*(rwxmax-rwxmin);; 1255 dy = 0.05*(rwymax-rwymin);; 1256 uxmin = rwxmin - dx;; 1257 uxmax = rwxmax + dx;; 1258 if (gPad->GetLogy()) {; 1259 if (rwymin <= 0) rwymin = 0.001*rwymax;; 1260 minimum = rwymin/(1+0.5*TMath::Log10(rwymax/rwymin));; 1261 maximum = rwymax*(1+0.2*TMath::Log10(rwymax/rwymin));; 1262 } else {; 1263 minimum = rwymin - dy;; 1264 maximum = rwymax + dy;; 1265 }; 1266 if (minimum < 0 && rwymin >= 0) minimum = 0;; 1267 if (maximum > 0 && rwymax <= 0) maximum = 0;; 1268 }; 1269 ; 1270 if (fMinimum != -1111) rwymin = minimum = fMinimum;; 1271 if (fMaximum != -1111) rwymax = maximum = fMaximum;; 1272 if (uxmin < 0 && rwxmin >= 0) {; 1273 if (gPad->GetLogx()) uxmin = 0.9*rwxmin;; 1274 //else uxmin = 0;; 1275 }; 1276 if (uxmax > 0 && rwxmax <= 0) {; 1277 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1278 //else uxmax = 0;; 1279 }; 1280 if (minimum < 0 && rwymin >= 0) {; 1281 if (gPad->GetLogy()) minimum = 0.9*rwymin;; 1282 //else minimum = 0;; 1283 }; 1284 if (maximum > 0 && rwymax <= 0) {; 1285 if (gPad->GetLogy()) maximum = 1.1*rwymax;; 1286 //else maximum = 0;; 1287 }; 1288 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:40339,ux,uxmin,40339,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; J",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:1003,Guid,Guides,1003,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,1,['Guid'],['Guides']
Usability,"Histogramming | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care about",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:1006,Guid,Guides,1006,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['Guid'],['Guides']
Usability,"Hn::AllocCoordBufvoid AllocCoordBuf() constCreate the coordinate buffer.Definition THn.cxx:232; THn::InitStoragevoid InitStorage(Int_t *nbins, Int_t chunkSize) overrideInitialize the storage of a histogram created via Init()Definition THn.cxx:240; THn::~THn~THn() overrideDestruct a THn.Definition THn.cxx:199; THn::fCoordBufstd::vector< Int_t > fCoordBufDefinition THn.h:181; THn::fSumw2TNDArrayT< Double_t > fSumw2Definition THn.h:180; THn::CreateIterROOT::Internal::THnBaseBinIter * CreateIter(Bool_t respectAxisRange) const overrideCreate an iterator over all bins. Public interface is THnIter.Definition THn.cxx:207; THn::Resetvoid Reset(Option_t *option="""") overrideReset the contents of a THn.Definition THn.cxx:250; THn::Sumw2void Sumw2() overrideEnable calculation of errors.Definition THn.cxx:216; THn::THnTHn()=default; THn::GetNbinsLong64_t GetNbins() const overrideDefinition THn.h:54; THn::GetArrayvirtual const TNDArray & GetArray() const =0; TNDArrayN-Dim array class.Definition TNDArray.h:46; TNDArray::AtAsDoublevirtual Double_t AtAsDouble(ULong64_t linidx) const =0; TNDArray::GetCellSizeLong64_t GetCellSize(Int_t dim) constDefinition TNDArray.h:70; TNDArray::Initvirtual void Init(Int_t ndim, const Int_t *nbins, bool addOverflow=false)Definition TNDArray.h:55; TNDArray::Resetvirtual void Reset(Option_t *option="""")=0; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; bool; double; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMVA::DNN::Cuda::max__device__ AFloat max(AFloat x, AFloat y)Definition Kernels.cuh:207. histhistsrcTHn.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THn_8cxx_source.html:13759,Guid,Guide,13759,doc/master/THn_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THn_8cxx_source.html,1,['Guid'],['Guide']
Usability,"HnSparse.h. ◆ THnSparseT() [2/2]. template<class CONT > . THnSparseT< CONT >::THnSparseT ; (; const char * ; name, . const char * ; title, . Int_t ; dim, . const Int_t * ; nbins, . const Double_t * ; xmin = nullptr, . const Double_t * ; xmax = nullptr, . Int_t ; chunksize = 1024 * 16 . ). inline . Definition at line 210 of file THnSparse.h. Member Function Documentation. ◆ Class(). template<class CONT > . static TClass * THnSparseT< CONT >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). template<class CONT > . static const char * THnSparseT< CONT >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class CONT > . static constexpr Version_t THnSparseT< CONT >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 217 of file THnSparse.h. ◆ DeclFileName(). template<class CONT > . static const char * THnSparseT< CONT >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 217 of file THnSparse.h. ◆ GenerateArray(). template<class CONT > . TArray * THnSparseT< CONT >::GenerateArray ; (; ); const. inlineoverridevirtual . Implements THnSparse.; Definition at line 215 of file THnSparse.h. ◆ IsA(). template<class CONT > . TClass * THnSparseT< CONT >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from THnSparse.; Definition at line 217 of file THnSparse.h. ◆ Streamer(). template<class CONT > . void THnSparseT< CONT >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from THnSparse. ◆ StreamerNVirtual(). template<class CONT > . void THnSparseT< CONT >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 217 of file THnSparse.h. hist/hist/inc/THnSparse.h. THnSparseT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:28155,Guid,Guide,28155,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['Guid'],['Guide']
Usability,"Hook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector&); virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<RooAbsCacheElement*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html:3509,Clear,Clear,3509,root/html534/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_RooAbsCacheElement_.html,1,['Clear'],['Clear']
Usability,"HostAuth.cxx. ◆ SetServer(). void THostAuth::SetServer ; (; Int_t ; server). inline . Definition at line 97 of file THostAuth.h. ◆ SetUser(). void THostAuth::SetUser ; (; const char * ; user). inline . Definition at line 98 of file THostAuth.h. ◆ Streamer(). void THostAuth::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THostAuth::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 111 of file THostAuth.h. ◆ Update(). void THostAuth::Update ; (; THostAuth * ; ha). Update info with the one in ha Remaining methods, if any, get lower priority. ; Definition at line 533 of file THostAuth.cxx. Member Data Documentation. ◆ fActive. Bool_t THostAuth::fActive. private . Definition at line 45 of file THostAuth.h. ◆ fDetails. TString THostAuth::fDetails[kMAXSEC]. private . Definition at line 42 of file THostAuth.h. ◆ fFailure. Int_t THostAuth::fFailure[kMAXSEC]. private . Definition at line 44 of file THostAuth.h. ◆ fHost. TString THostAuth::fHost. private . Definition at line 37 of file THostAuth.h. ◆ fMethods. Int_t THostAuth::fMethods[kMAXSEC]. private . Definition at line 41 of file THostAuth.h. ◆ fNumMethods. Int_t THostAuth::fNumMethods. private . Definition at line 40 of file THostAuth.h. ◆ fSecContexts. TList* THostAuth::fSecContexts. private . Definition at line 47 of file THostAuth.h. ◆ fServer. Char_t THostAuth::fServer. private . Definition at line 38 of file THostAuth.h. ◆ fSuccess. Int_t THostAuth::fSuccess[kMAXSEC]. private . Definition at line 43 of file THostAuth.h. ◆ fUser. TString THostAuth::fUser. private . Definition at line 39 of file THostAuth.h. Libraries for THostAuth:. [legend]; The documentation for this class was generated from the following files:; net/auth/inc/THostAuth.h; net/auth/src/THostAuth.cxx. THostAuth. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHostAuth.html:23944,Guid,Guide,23944,doc/master/classTHostAuth.html,https://root.cern,https://root.cern/doc/master/classTHostAuth.html,1,['Guid'],['Guide']
Usability,"Html.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin requests active at vertical position specified in pLC->bottom.; *pW The width of the inkable area. This takes into account an margin requests that are active at the vertical position pLC->bottom. ; Definition at line 696 of file TGHtmlLayout.cxx. ◆ DoBreakMarkup(). TGHtmlElement * TGHtmlLayoutContext::DoBreakMarkup ; (; TGHtmlElement * ; p). protected . Break markup is any kind of markup that might force a line-break. ; This routine handles a single element of break markup and returns a pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:13020,Clear,Clear,13020,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,"HtmlUri *uri, int field_mask=((1<< 0)|(1<< 1)|(1<< 2)|(1<< 3)|(1<< 4)));  Compare another uri with given field mask. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:1752,Clear,Clear,1752,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['Clear'],['Clear']
Usability,"I guard ensures that ResetSchema is called. ; Definition at line 160 of file RNTupleImporter.hxx. Public Member Functions;  RImportGuard (const RImportGuard &)=delete;  ;  RImportGuard (RImportGuard &&)=delete;  ;  RImportGuard (RNTupleImporter &importer);  ;  ~RImportGuard ();  ; RImportGuard & operator= (const RImportGuard &)=delete;  ; RImportGuard & operator= (RImportGuard &&)=delete;  . Public Attributes; RNTupleImporter & fImporter;  . Constructor & Destructor Documentation. ◆ RImportGuard() [1/3]. ROOT::Experimental::RNTupleImporter::RImportGuard::RImportGuard ; (; RNTupleImporter & ; importer). inlineexplicit . Definition at line 163 of file RNTupleImporter.hxx. ◆ RImportGuard() [2/3]. ROOT::Experimental::RNTupleImporter::RImportGuard::RImportGuard ; (; const RImportGuard & ; ). delete . ◆ RImportGuard() [3/3]. ROOT::Experimental::RNTupleImporter::RImportGuard::RImportGuard ; (; RImportGuard && ; ). delete . ◆ ~RImportGuard(). ROOT::Experimental::RNTupleImporter::RImportGuard::~RImportGuard ; (; ). inline . Definition at line 168 of file RNTupleImporter.hxx. Member Function Documentation. ◆ operator=() [1/2]. RImportGuard & ROOT::Experimental::RNTupleImporter::RImportGuard::operator= ; (; const RImportGuard & ; ). delete . ◆ operator=() [2/2]. RImportGuard & ROOT::Experimental::RNTupleImporter::RImportGuard::operator= ; (; RImportGuard && ; ). delete . Member Data Documentation. ◆ fImporter. RNTupleImporter& ROOT::Experimental::RNTupleImporter::RImportGuard::fImporter. Definition at line 161 of file RNTupleImporter.hxx. Collaboration diagram for ROOT::Experimental::RNTupleImporter::RImportGuard:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx. ROOTExperimentalRNTupleImporterRImportGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportGuard.html:2362,Guid,Guide,2362,doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportGuard.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportGuard.html,1,['Guid'],['Guide']
Usability,"I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells,; if the static function TProfile3D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. Example of a profile3D histogram; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }. NOTE: A TProfile3D is drawn as it was a simple TH3. Function Members (Methods); public:. TProfile3D(); TProfile3D(const TProfile3D& profile); TProfile3D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins, Option_t* option = """"); TProfile3D(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup, Option_t* option = """"); virtual~TProfile3D(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(const TH1* h1, Double_t c1 = 1); virtual Bool_tAdd(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidTH3D::AddBinContent(Int_t bin); virtual voidTH3D::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:2028,simpl,simple,2028,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,1,['simpl'],['simple']
Usability,"I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells,; if the static function TProfile3D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. Example of a profile3D histogram; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }. NOTE: A TProfile3D is drawn as it was a simple TH3. Function Members (Methods); public:. virtual~TProfile3D(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(const TH1* h1, Double_t c1 = 1); virtual Bool_tAdd(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidTH3D::AddBinContent(Int_t bin); virtual voidTH3D::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile3D.html:2028,simpl,simple,2028,root/html602/TProfile3D.html,https://root.cern,https://root.cern/root/html602/TProfile3D.html,2,['simpl'],['simple']
Usability,"I2 >::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 256 of file RooCFunction2Binding.h. ◆ IsA(). template<class VO , class VI1 , class VI2 > . TClass * RooCFunction2Binding< VO, VI1, VI2 >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 263 of file RooCFunction2Binding.h. ◆ printArgs(). template<class VO , class VI1 , class VI2 > . void RooCFunction2Binding< VO, VI1, VI2 >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 237 of file RooCFunction2Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 > . void RooCFunction2Binding< VO, VI1, VI2 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 > . void RooCFunction2Binding< VO, VI1, VI2 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 263 of file RooCFunction2Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI1 , class VI2 > . RooCFunction2Ref<VO,VI1,VI2> RooCFunction2Binding< VO, VI1, VI2 >::func. protected . Definition at line 252 of file RooCFunction2Binding.h. ◆ x. template<class VO , class VI1 , class VI2 > . RooRealProxy RooCFunction2Binding< VO, VI1, VI2 >::x. protected . Definition at line 253 of file RooCFunction2Binding.h. ◆ y. template<class VO , class VI1 , class VI2 > . RooRealProxy RooCFunction2Binding< VO, VI1, VI2 >::y. protected . Definition at line 254 of file RooCFunction2Binding.h. roofit/roofit/inc/RooCFunction2Binding.h. RooCFunction2Binding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Binding.html:64502,Guid,Guide,64502,doc/master/classRooCFunction2Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Binding.html,1,['Guid'],['Guide']
Usability,"ID == -1) return;; 740 ; 741 R__LOCKGUARD(gROOTMutex);; 742 ; 743 TString opt = option;; 744 opt.ToLower();; 745 if (opt.Contains(""d"")) {; 746 // clear subpads, but do not delete pads in case the canvas; 747 // has been divided (note: option ""D"" is propagated so could cause; 748 // conflicts for primitives using option ""D"" for something else); 749 if (fPrimitives) {; 750 TIter next(fPrimitives);; 751 TObject *obj;; 752 while ((obj=next())) {; 753 obj->Clear(option);; 754 }; 755 }; 756 } else {; 757 //default, clear everything in the canvas. Subpads are deleted; 758 TPad::Clear(option); //Remove primitives from pad; 759 }; 760 ; 761 fSelected = nullptr;; 762 fClickSelected = nullptr;; 763 fSelectedPad = nullptr;; 764 fClickSelectedPad = nullptr;; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Emit pad Cleared signal.; 769 ; 770void TCanvas::Cleared(TVirtualPad *pad); 771{; 772 Emit(""Cleared(TVirtualPad*)"", (Longptr_t)pad);; 773}; 774 ; 775////////////////////////////////////////////////////////////////////////////////; 776/// Emit Closed signal.; 777 ; 778void TCanvas::Closed(); 779{; 780 Emit(""Closed()"");; 781}; 782 ; 783////////////////////////////////////////////////////////////////////////////////; 784/// Close canvas.; 785///; 786/// Delete window/pads data structure; 787 ; 788void TCanvas::Close(Option_t *option); 789{; 790 auto padsave = gPad;; 791 TCanvas *cansave = padsave ? padsave->GetCanvas() : nullptr;; 792 ; 793 if (fCanvasID != -1) {; 794 ; 795 if (!gROOT->IsLineProcessing() && !gVirtualX->IsCmdThread()) {; 796 gInterpreter->Execute(this, IsA(), ""Close"", option);; 797 return;; 798 }; 799 ; 800 R__LOCKGUARD(gROOTMutex);; 801 ; 802 FeedbackMode(kFALSE);; 803 ; 804 cd();; 805 TPad::Close(option);; 806 ; 807 if (!IsBatch() && !IsWeb()) {; 808 gVirtualX->SelectWindow(fCanvasID); //select current canvas; 809 ; 810 DeleteCanvasPainter();; 811 ; 812 if (fCanvasImp); 813 fCanvasImp->Close();; 814 }; 815 fC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:25065,Clear,Cleared,25065,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['Clear'],['Cleared']
Usability,"ID. This results in different seeds and then random sequence for every SetSeed(0) call. ; Reimplemented in TRandom1, TRandom2, TRandom3, and TRandomGen< Engine >.; Definition at line 615 of file TRandom.cxx. ◆ Sphere(). void TRandom::Sphere ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z, . Double_t ; r . ). virtual . Generates random vectors, uniformly distributed over the surface of a sphere of given radius. ; Input : r = sphere radius Output: x,y,z a random 3-d vector of length r Method: (based on algorithm suggested by Knuth and attributed to Robert E Knop) which uses less random numbers than the CERNLIB RN23DIM algorithm ; Definition at line 664 of file TRandom.cxx. ◆ Streamer(). void TRandom::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Reimplemented in TRandom1, TRandom2, TRandom3, and TRandomGen< Engine >. ◆ StreamerNVirtual(). void TRandom::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file TRandom.h. ◆ Uniform() [1/2]. Double_t TRandom::Uniform ; (; Double_t ; x1, . Double_t ; x2 . ). virtual . Returns a uniform deviate on the interval (x1, x2). ; Definition at line 691 of file TRandom.cxx. ◆ Uniform() [2/2]. Double_t TRandom::Uniform ; (; Double_t ; x1 = 1). virtual . Returns a uniform deviate on the interval (0, x1). ; Definition at line 682 of file TRandom.cxx. ◆ WriteRandom(). void TRandom::WriteRandom ; (; const char * ; filename); const. virtual . Writes random generator status to filename. ; Definition at line 700 of file TRandom.cxx. Member Data Documentation. ◆ fSeed. UInt_t TRandom::fSeed. protected . Definition at line 30 of file TRandom.h. Libraries for TRandom:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/TRandom.h; math/mathcore/src/TRandom.cxx. TRandom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:36151,Guid,Guide,36151,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['Guid'],['Guide']
Usability,"ID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Timer.h 31458 2009-11-30 13:58:20Z stelzer $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Timer.html:7538,progress bar,progress bar,7538,root/html528/TMVA__Timer.html,https://root.cern,https://root.cern/root/html528/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"ID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Timer.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Timer.html:7607,progress bar,progress bar,7607,root/html532/TMVA__Timer.html,https://root.cern,https://root.cern/root/html532/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"IENT "", // 35; 433 ""MATOUT "", // 36; 434 ""ERROR DEF "", // 37; 435 ""LIMITS "", // 38; 436 ""PUNCH ""}; // 39; 437 ; 438 ; 439 fCword = comand;; 440 fCword.ToUpper();; 441 if (nargs<=0) fCmPar[0] = 0;; 442 Int_t i;; 443 for(i=0;i<fMaxParam;i++) {; 444 if(i<nargs) fCmPar[i] = args[i];; 445 }; 446 /*; 447 fNmaxIter = int(fCmPar[0]);; 448 if (fNmaxIter <= 0) {; 449 fNmaxIter = fNpar*10 + 20 + fNpar*M*5;; 450 }; 451 fEPS = fCmPar[1];; 452 */; 453 //*-*- look for command in list CNAME . . . . . . . . . .; 454 TString ctemp = fCword(0,3);; 455 Int_t ind;; 456 for (ind = 0; ind < nntot; ++ind) {; 457 if (strncmp(ctemp.Data(),cname[ind],3) == 0) break;; 458 }; 459 if (ind==nntot) return -3; // Unknown command - input ignored; 460 if (fCword(0,4) == ""MINO"") ind=3;; 461 switch (ind) {; 462 case 0: case 3: case 2: case 28:; 463 // MINImize [maxcalls] [tolerance]; 464 // also SIMplex, MIGrad and FUMili; 465 if(nargs>=1); 466 fNmaxIter=TMath::Max(Int_t(fCmPar[0]),fNmaxIter); // fiXME!!; 467 if(nargs==2); 468 fEPS=fCmPar[1];; 469 return Minimize();; 470 case 1:; 471 // SEEk not implemented in this package; 472 return -10;; 473 ; 474 case 4: // MINos errors analysis not implemented; 475 return -10;; 476 ; 477 case 5: case 6: // SET xxx & SHOW xxx; 478 return ExecuteSetCommand(nargs);; 479 ; 480 case 7: // Obsolete command; 481 Printf(""1"");; 482 return 0;; 483 case 8: // fiX <parno> ....; 484 if (nargs<1) return -1; // No parameters specified; 485 for (i=0;i<nargs;i++) {; 486 Int_t parnum = Int_t(fCmPar[i])-1;; 487 FixParameter(parnum);; 488 }; 489 return 0;; 490 case 9: // REStore <code>; 491 if (nargs<1) return 0;; 492 if(fCmPar[0]==0.); 493 for (i=0;i<fNpar;i++); 494 ReleaseParameter(i);; 495 else; 496 if(fCmPar[0]==1.) {; 497 ReleaseParameter(fLastFixed);; 498 std::cout <<fLastFixed<<std::endl;; 499 }; 500 return 0;; 501 case 10: // RELease <parno> ...; 502 if (nargs<1) return -1; // No parameters specified; 503 for (i=0;i<nargs;i++) {; 504 Int_t parnum = Int_t(fCmPar[i])-1;; 505 Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:14515,SIMpl,SIMplex,14515,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['SIMpl'],['SIMplex']
Usability,"IE_GNN_Parser.py;  ;  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ;  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ;  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ;  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ;  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ;  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ;  TMVA_SOFIE_RSofieReader.C;   This macro pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:3671,simpl,simple,3671,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability,"IGRAD + SIMPLEX method if Migrad fails"");; 3456 Printf("" MINOs Exact (non-linear) parameter error analysis"");; 3457 Printf("" MNContour Calculate one MINOS function contour"");; 3458 Printf("" PARameter Define or redefine new parameters and values"");; 3459 Printf("" RELease Make previously FIXed parameters variable again"");; 3460 Printf("" REStore Release last parameter fixed"");; 3461 Printf("" SAVe Save current parameter values on a file"");; 3462 Printf("" SCAn Scan the user function by varying parameters"");; 3463 Printf("" SEEk Minimize by the method of Monte Carlo"");; 3464 Printf("" SET Set various MINUIT constants or conditions"");; 3465 Printf("" SHOw Show values of current constants or conditions"");; 3466 Printf("" SIMplex Minimize by the method of Simplex"");; 3467 goto L99;; 3468 }; 3469 ; 3470//______________________________________________________________________________; 3471//; 3472// Command CLEAR; 3473//; 3474 if( !strncmp(comd.Data(),""CLE"",3) ) {; 3475 Printf("" ***>CLEAR"");; 3476 Printf("" Resets all parameter names and values to undefined."");; 3477 Printf("" Must normally be followed by a PARameters command or "");; 3478 Printf("" equivalent, in order to define parameter values."");; 3479 goto L99;; 3480 }; 3481//______________________________________________________________________________; 3482//; 3483// Command CONTOUR; 3484//; 3485 if( !strncmp(comd.Data(),""CON"",3) ) {; 3486 Printf("" ***>CONTOUR <par1> <par2> [devs] [ngrid]"");; 3487 Printf("" Instructs Minuit to trace contour lines of the user function"");; 3488 Printf("" with respect to the two parameters whose external numbers"");; 3489 Printf("" are <par1> and <par2>."");; 3490 Printf("" Other variable parameters of the function, if any, will have"");; 3491 Printf("" their values fixed at the current values during the contour"");; 3492 Printf("" tracing. The optional parameter [devs] (default value 2.)"");; 3493 Printf("" gives the number of standard deviations in each parameter"");; 3494 Printf("" which should lie entirely w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:109759,CLEAR,CLEAR,109759,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['CLEAR'],['CLEAR']
Usability,"IK::GetBuffer3D ; (; Int_t ; reqSections); const. overridevirtual . Get buffer 3D. ; Reimplemented from TShape.; Definition at line 105 of file TBRIK.cxx. ◆ GetDx(). Float_t TBRIK::GetDx ; (; ); const. inline . Definition at line 41 of file TBRIK.h. ◆ GetDy(). Float_t TBRIK::GetDy ; (; ); const. inline . Definition at line 42 of file TBRIK.h. ◆ GetDz(). Float_t TBRIK::GetDz ; (; ); const. inline . Definition at line 43 of file TBRIK.h. ◆ IsA(). TClass * TBRIK::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGTRA, TPARA, TTRAP, TTRD1, and TTRD2.; Definition at line 46 of file TBRIK.h. ◆ SetPoints(). void TBRIK::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create BRIK points. ; Reimplemented from TShape.; Reimplemented in TGTRA, TPARA, TTRAP, TTRD1, and TTRD2.; Definition at line 78 of file TBRIK.cxx. ◆ Sizeof3D(). void TBRIK::Sizeof3D ; (; ); const. overridevirtual . Return total X3D needed by TNode::ls (when called with option ""x"") ; Reimplemented from TAtt3D.; Definition at line 95 of file TBRIK.cxx. ◆ Streamer(). void TBRIK::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGTRA, TPARA, TTRAP, TTRD1, and TTRD2. ◆ StreamerNVirtual(). void TBRIK::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file TBRIK.h. Member Data Documentation. ◆ fDx. Float_t TBRIK::fDx. protected . Definition at line 29 of file TBRIK.h. ◆ fDy. Float_t TBRIK::fDy. protected . Definition at line 30 of file TBRIK.h. ◆ fDz. Float_t TBRIK::fDz. protected . Definition at line 31 of file TBRIK.h. Libraries for TBRIK:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TBRIK.h; graf3d/g3d/src/TBRIK.cxx. TBRIK. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBRIK.html:20743,Guid,Guide,20743,doc/master/classTBRIK.html,https://root.cern,https://root.cern/doc/master/classTBRIK.html,1,['Guid'],['Guide']
Usability,"INE; 547#define R__ALWAYS_INLINE inline __attribute__((always_inline)); 548#else; 549#if defined(_MSC_VER); 550#define R__ALWAYS_INLINE __forceinline; 551#else; 552#define R__ALWAYS_INLINE inline; 553#endif; 554#endif; 555 ; 556// See also https://nemequ.github.io/hedley/api-reference.html#HEDLEY_NEVER_INLINE; 557// for other platforms.; 558#ifdef R__HAS_ATTRIBUTE_NOINLINE; 559#define R__NEVER_INLINE inline __attribute__((noinline)); 560#else; 561#if defined(_MSC_VER); 562#define R__NEVER_INLINE inline __declspec(noinline); 563#else; 564#define R__NEVER_INLINE inline; 565#endif; 566#endif; 567 ; 568/*---- unlikely / likely expressions -----------------------------------------*/; 569// These are meant to use in cases like:; 570// if (R__unlikely(expression)) { ... }; 571// in performance-critical sections. R__unlikely / R__likely provide hints to; 572// the compiler code generation to heavily optimize one side of a conditional,; 573// causing the other branch to have a heavy performance cost.; 574//; 575// It is best to use this for conditionals that test for rare error cases or; 576// backward compatibility code.; 577 ; 578#if (__GNUC__ >= 3) || defined(__INTEL_COMPILER); 579#if !defined(R__unlikely); 580 #define R__unlikely(expr) __builtin_expect(!!(expr), 0); 581#endif; 582#if !defined(R__likely); 583 #define R__likely(expr) __builtin_expect(!!(expr), 1); 584#endif; 585#else; 586 #define R__unlikely(expr) expr; 587 #define R__likely(expr) expr; 588#endif; 589 ; 590// Setting this define causes ROOT to keep statistics about memory buffer allocation; 591// time within the TTree. Given that this is a ""hot-path"", we provide a mechanism; 592// for enabling / disabling this at compile time by developers; default is disabled.; 593#ifndef R__TRACK_BASKET_ALLOC_TIME; 594//#define R__TRACK_BASKET_ALLOC_TIME 1; 595#endif; 596 ; 597#endif. corefoundationincROOTRConfig.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConfig_8hxx_source.html:17204,Guid,Guide,17204,doc/master/RConfig_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RConfig_8hxx_source.html,1,['Guid'],['Guide']
Usability,"INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; Minuit2Minimizer: Minimize with max-calls 1500 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = 2659.73712858695399; Edm = 0.000190395763129910388; Nfcn = 60; frac = 0.62118 +/- 0.165788 (limited); mean = 0.00442366 +/- 0.109372 (limited); sigma_g2 = 4.10789 +/- 0.405468 (limited); [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) Creating instance of MINUIT; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) determining minimum likelihood for current configurations w.r.t all observable; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) minimum found at (frac=0.62104); ..................................................................................; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) Creating instance of MINUIT; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) determining minimum likelihood for current configurations w.r.t all observable; [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[sigma_g2]) minimum found at (sigma_g2=4.11258); ....................................................................................; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf605_profilell.py. tutorialsroofitrf605_profilell.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf605__profilell_8py.html:5121,Guid,Guide,5121,doc/master/rf605__profilell_8py.html,https://root.cern,https://root.cern/doc/master/rf605__profilell_8py.html,1,['Guid'],['Guide']
Usability,"INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1428 {; 1429 // Simple conversion from a 'From' on disk to a 'To' in memory; 1430 UInt_t temp;; 1431 buf >> temp;; 1432 ; 1433 if ((temp & kIsReferenced) != 0) {; 1434 HandleReferencedTObject(buf,addr,config);; 1435 }; 1436 ; 1437 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1438 return 0;; 1439 }; 1440 };; 1441 ; 1442 template <typename From, typename To>; 1443 struct ConvertBasicType<WithFactorMarker<From>,To> {; 1444 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1445 {; 1446 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1447 TConfWithFactor *conf = (TConfWithFactor *)config;; 1448 From temp;; 1449 buf.ReadWithFactor(&temp, conf->fFactor, conf->fXmin);; 1450 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1451 return 0;; 1452 }; 1453 };; 1454 ; 1455 template <typename From, typename To>; 1456 struct ConvertBasicType<NoFactorMarker<From>,To> {; 1457 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1458 {; 1459 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1460 TConfNoFactor *conf = (TConfNoFactor *)config;; 1461 From temp;; 1462 buf.ReadWithNbits(&temp, conf->fNbits);; 1463 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1464 return 0;; 1465 }; 1466 };; 1467 ; 1468 class TConfigurationPushDataCache : public TConfiguration {; 1469 // Configuration object for the PushDataCache case.; 1470 public:; 1471 TVirtualArray *fOnfileObject;; 1472 ; 1473 TConfigurationPushDataCache(TVirtualStreamerInfo *info, TVirtualArray *onfileObject, Int_t offset) :; 1474 TConfiguration(info, -1, nullptr, offset), fOnfileObject(onfileObject); 1475 {}; 1476 ; 1477 void Print() const override; 1478 {; 1479 TStreamerInfo *info = (TStreamerInfo*)fInfo;; 1480 if (fOnfileObject); 1481 printf(""StreamerInfoAction, class:%s, PushDataCache offset=%d\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:60699,Simpl,Simple,60699,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"INT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return the list of pragmas. ;  ; const TSeqCollection * GetListOfSysIncFiles ();  Return the list of system include files. ;  ; const TSeqCollection * GetListOfUsers ();  reads from ""/etc/passwd"" ;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:1568,Clear,ClearPragmas,1568,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearPragmas']
Usability,"IOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:2844,simpl,simple,2844,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['simpl'],['simple']
Usability,"IProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11578,Simpl,SimplexMinimizer,11578,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,4,['Simpl'],"['Simplex', 'SimplexMinimizer']"
Usability,"IS_NOW)). Definition at line 475 of file RConfig.hxx. ◆ R__ALWAYS_INLINE. #define R__ALWAYS_INLINE   inline. Definition at line 552 of file RConfig.hxx. ◆ R__ALWAYS_SUGGEST_ALTERNATIVE. #define R__ALWAYS_SUGGEST_ALTERNATIVE; (;  ; ALTERNATIVE);     _R__DEPRECATED_LATER(""There is a superior alternative: "" ALTERNATIVE). Definition at line 515 of file RConfig.hxx. ◆ R__ANSISTREAM. #define R__ANSISTREAM   /* ANSI C++ Standard Library conformant */. Definition at line 37 of file RConfig.hxx. ◆ R__DEPRECATED. #define R__DEPRECATED; (;  ; MAJOR, .  ; MINOR, .  ; REASON . );     _R__JOIN3_(_R__DEPRECATED_,MAJOR,MINOR)(""will be removed in ROOT v"" #MAJOR ""."" #MINOR "": "" REASON). Definition at line 504 of file RConfig.hxx. ◆ R__HIDDEN. #define R__HIDDEN. Definition at line 349 of file RConfig.hxx. ◆ R__INTENTIONALLY_UNINIT_BEGIN. #define R__INTENTIONALLY_UNINIT_BEGIN. Definition at line 541 of file RConfig.hxx. ◆ R__INTENTIONALLY_UNINIT_END. #define R__INTENTIONALLY_UNINIT_END. Definition at line 542 of file RConfig.hxx. ◆ R__likely. #define R__likely; (;  ; expr);    expr. Definition at line 587 of file RConfig.hxx. ◆ R__NEVER_INLINE. #define R__NEVER_INLINE   inline. Definition at line 564 of file RConfig.hxx. ◆ R__SIZEDDELETE. #define R__SIZEDDELETE. Definition at line 341 of file RConfig.hxx. ◆ R__SSTREAM. #define R__SSTREAM   /* use sstream or strstream header */. Definition at line 38 of file RConfig.hxx. ◆ R__SUGGEST_ALTERNATIVE. #define R__SUGGEST_ALTERNATIVE; (;  ; ALTERNATIVE). Definition at line 512 of file RConfig.hxx. ◆ R__unlikely. #define R__unlikely; (;  ; expr);    expr. Definition at line 586 of file RConfig.hxx. ◆ R__USE_SHADOW_CLASS. #define R__USE_SHADOW_CLASS. Definition at line 34 of file RConfig.hxx. ◆ SafeDelete. #define SafeDelete; (;  ; p);    { delete p; p = nullptr; }. Definition at line 525 of file RConfig.hxx. corefoundationincROOTRConfig.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConfig_8hxx.html:5654,Guid,Guide,5654,doc/master/RConfig_8hxx.html,https://root.cern,https://root.cern/doc/master/RConfig_8hxx.html,1,['Guid'],['Guide']
Usability,"Imp ; (; TContextMenu * ; c, . const char * ; name, . const char * ; title . ). virtual . Create a batch version of TContextMenuImp. ; Reimplemented in TRootGuiFactory.; Definition at line 140 of file TGuiFactory.cxx. ◆ CreateControlBarImp() [1/2]. TControlBarImp * TGuiFactory::CreateControlBarImp ; (; TControlBar * ; c, . const char * ; title . ). virtual . Create a batch version of TControlBarImp. ; Reimplemented in TRootGuiFactory.; Definition at line 148 of file TGuiFactory.cxx. ◆ CreateControlBarImp() [2/2]. TControlBarImp * TGuiFactory::CreateControlBarImp ; (; TControlBar * ; c, . const char * ; title, . Int_t ; x, . Int_t ; y . ). virtual . Create a batch version of TControlBarImp. ; Reimplemented in TRootGuiFactory.; Definition at line 165 of file TGuiFactory.cxx. ◆ CreateInspectorImp(). TInspectorImp * TGuiFactory::CreateInspectorImp ; (; const TObject * ; obj, . UInt_t ; width, . UInt_t ; height . ). virtual . Create a batch version of TInspectorImp. ; Definition at line 182 of file TGuiFactory.cxx. ◆ DeclFileName(). static const char * TGuiFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 63 of file TGuiFactory.h. ◆ IsA(). TClass * TGuiFactory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 63 of file TGuiFactory.h. ◆ Streamer(). void TGuiFactory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGuiFactory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file TGuiFactory.h. Libraries for TGuiFactory:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TGuiFactory.h; core/gui/src/TGuiFactory.cxx. TGuiFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiFactory.html:17343,Guid,Guide,17343,doc/master/classTGuiFactory.html,https://root.cern,https://root.cern/doc/master/classTGuiFactory.html,1,['Guid'],['Guide']
Usability,"Imp;  TConditionImp ();  ; virtual ~TConditionImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixCondition.html:2082,Clear,Clear,2082,doc/master/classTPosixCondition.html,https://root.cern,https://root.cern/doc/master/classTPosixCondition.html,2,['Clear'],['Clear']
Usability,"Impl_t::IsCudnn()); 2292 Warning(""ReadWeightsFromXML"",; 2293 ""Cannot use a reset gate after to false with CudNN - use implementation with resetgate=true"");; 2294 ; 2295 fNet->AddBasicGRULayer(stateSize, inputSize, timeSteps, rememberState, returnSequence, resetGateAfter);; 2296 }; 2297 // BatchNorm Layer; 2298 else if (layerName == ""BatchNormLayer"") {; 2299 // use some dammy value which will be overwrittem in BatchNormLayer::ReadWeightsFromXML; 2300 fNet->AddBatchNormLayer(0., 0.0);; 2301 }; 2302 // read weights and biases; 2303 fNet->GetLayers().back()->ReadWeightsFromXML(layerXML);; 2304 ; 2305 // read next layer; 2306 layerXML = gTools().GetNextChild(layerXML);; 2307 }; 2308 ; 2309 fBuildNet = false;; 2310 // create now the input and output matrices; 2311 //int n1 = batchHeight;; 2312 //int n2 = batchWidth;; 2313 // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); 2314 //if (fXInput.size() > 0) fXInput.clear();; 2315 //fXInput.emplace_back(MatrixImpl_t(n1,n2));; 2316 fXInput = ArchitectureImpl_t::CreateTensor(fNet->GetBatchSize(), GetInputDepth(), GetInputHeight(), GetInputWidth() );; 2317 if (batchDepth == 1 && GetInputHeight() == 1 && GetInputDepth() == 1); 2318 // make here a ColumnMajor tensor; 2319 fXInput = TensorImpl_t( fNet->GetBatchSize(), GetInputWidth(),TMVA::Experimental::MemoryLayout::ColumnMajor );; 2320 fXInputBuffer = HostBufferImpl_t( fXInput.GetSize());; 2321 ; 2322 // create pointer to output matrix used for the predictions; 2323 fYHat = std::unique_ptr<MatrixImpl_t>(new MatrixImpl_t(fNet->GetBatchSize(), fNet->GetOutputWidth() ) );; 2324 ; 2325 ; 2326}; 2327 ; 2328 ; 2329////////////////////////////////////////////////////////////////////////////////; 2330void MethodDL::ReadWeightsFromStream(std::istream & /*istr*/); 2331{; 2332}; 2333 ; 2334////////////////////////////////////////////////////////////////////////////////; 2335const Ranking *TMVA::MethodDL::CreateRanking(); 233",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:92460,clear,clear,92460,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['clear'],['clear']
Usability,"In TGeo,; physical nodes are represented by the class TGeoPhysicalNode and can be created; on demand for alignment purposes:. TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""). Once created, a physical node can be misaligned, meaning that its position; or even shape can be changed:. pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE). The knowledge of the path to the objects that need to be misaligned is; essential since there is no other way of identifying them. One can however; create 'symbolic links' to any complex path to make it more representable; for the object it designates:. TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn). Such a symbolic link hides the complexity of the path to the align object and; replaces it with a more meaningful name. In addition, TGeoPNEntry objects are; faster to search by name and they may optionally store an additional user; matrix. For more details please read the misalignment section in the Users Guide. Function Members (Methods); public:. TGeoPNEntry(); TGeoPNEntry(const char* unique_name, const char* path); virtual~TGeoPNEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPNEntry.html:1854,Guid,Guide,1854,root/html528/TGeoPNEntry.html,https://root.cern,https://root.cern/root/html528/TGeoPNEntry.html,4,['Guid'],['Guide']
Usability,"In TGeo,; physical nodes are represented by the class TGeoPhysicalNode and can be created; on demand for alignment purposes:. TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""). Once created, a physical node can be misaligned, meaning that its position; or even shape can be changed:. pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE). The knowledge of the path to the objects that need to be misaligned is; essential since there is no other way of identifying them. One can however; create 'symbolic links' to any complex path to make it more representable; for the object it designates:. TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn). Such a symbolic link hides the complexity of the path to the align object and; replaces it with a more meaningful name. In addition, TGeoPNEntry objects are; faster to search by name and they may optionally store an additional user; matrix. For more details please read the misalignment section in the Users Guide. Function Members (Methods); public:. TGeoPhysicalNode(); TGeoPhysicalNode(const char* path); virtual~TGeoPhysicalNode(); voidTObject::AbstractMethod(const char* method) const; Bool_tAlign(TGeoMatrix* newmat = 0, TGeoShape* newshape = 0, Bool_t check = kFALSE, Double_t ovlp = 0.001); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidcd() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPhysicalNode.html:1886,Guid,Guide,1886,root/html534/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html534/TGeoPhysicalNode.html,1,['Guid'],['Guide']
Usability,"In TGeo,; physical nodes are represented by the class TGeoPhysicalNode and can be created; on demand for alignment purposes:. TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""). Once created, a physical node can be misaligned, meaning that its position; or even shape can be changed:. pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE). The knowledge of the path to the objects that need to be misaligned is; essential since there is no other way of identifying them. One can however; create 'symbolic links' to any complex path to make it more representable; for the object it designates:. TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn). Such a symbolic link hides the complexity of the path to the align object and; replaces it with a more meaningful name. In addition, TGeoPNEntry objects are; faster to search by name and they may optionally store an additional user; matrix. For more details please read the misalignment section in the Users Guide. Function Members (Methods); public:. TGeoPhysicalNode(); TGeoPhysicalNode(const char* path); virtual~TGeoPhysicalNode(); voidTObject::AbstractMethod(const char* method) const; voidAlign(TGeoMatrix* newmat = 0, TGeoShape* newshape = 0, Bool_t check = kFALSE, Double_t ovlp = 0.001); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidcd() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPhysicalNode.html:1886,Guid,Guide,1886,root/html528/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html528/TGeoPhysicalNode.html,3,['Guid'],['Guide']
Usability,"In TGeo,; physical nodes are represented by the class TGeoPhysicalNode and can be created; on demand for alignment purposes:. TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""). Once created, a physical node can be misaligned, meaning that its position; or even shape can be changed:. pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE). The knowledge of the path to the objects that need to be misaligned is; essential since there is no other way of identifying them. One can however; create 'symbolic links' to any complex path to make it more representable; for the object it designates:. TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn). Such a symbolic link hides the complexity of the path to the align object and; replaces it with a more meaningful name. In addition, TGeoPNEntry objects are; faster to search by name and they may optionally store an additional user; matrix. For more details please read the misalignment section in the Users Guide. Function Members (Methods); public:. virtual~TGeoPNEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPNEntry.html:1854,Guid,Guide,1854,root/html602/TGeoPNEntry.html,https://root.cern,https://root.cern/root/html602/TGeoPNEntry.html,2,['Guid'],['Guide']
Usability,"In TGeo,; physical nodes are represented by the class TGeoPhysicalNode and can be created; on demand for alignment purposes:. TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""). Once created, a physical node can be misaligned, meaning that its position; or even shape can be changed:. pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE). The knowledge of the path to the objects that need to be misaligned is; essential since there is no other way of identifying them. One can however; create 'symbolic links' to any complex path to make it more representable; for the object it designates:. TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn). Such a symbolic link hides the complexity of the path to the align object and; replaces it with a more meaningful name. In addition, TGeoPNEntry objects are; faster to search by name and they may optionally store an additional user; matrix. For more details please read the misalignment section in the Users Guide. Function Members (Methods); public:. virtual~TGeoPhysicalNode(); voidTObject::AbstractMethod(const char* method) const; Bool_tAlign(TGeoMatrix* newmat = 0, TGeoShape* newshape = 0, Bool_t check = kFALSE, Double_t ovlp = 0.001); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidcd() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPhysicalNode.html:1886,Guid,Guide,1886,root/html602/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html602/TGeoPhysicalNode.html,2,['Guid'],['Guide']
Usability,IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. co,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:7060,Clear,ClearEnvVars,7060,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,4,['Clear'],['ClearEnvVars']
Usability,Info(). TMVA::DataSetInfo * TMVA::DataSetManager::GetDataSetInfo ; (; const TString & ; dsiName). returns datasetinfo object for given name ; Definition at line 97 of file DataSetManager.cxx. ◆ IsA(). virtual TClass * TMVA::DataSetManager::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 84 of file DataSetManager.h. ◆ Log(). MsgLogger & TMVA::DataSetManager::Log ; (; ); const. inlineprivate . Definition at line 81 of file DataSetManager.h. ◆ Streamer(). virtual void TMVA::DataSetManager::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSetManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file DataSetManager.h. Friends And Related Symbol Documentation. ◆ Envelop. friend class Envelop. friend . Definition at line 53 of file DataSetManager.h. ◆ Factory. friend class Factory. friend . Definition at line 52 of file DataSetManager.h. Member Data Documentation. ◆ fDataInput. DataInputHandler* TMVA::DataSetManager::fDataInput. private . source of input data ; Definition at line 78 of file DataSetManager.h. ◆ fDatasetFactory. TMVA::DataSetFactory* TMVA::DataSetManager::fDatasetFactory. private . Definition at line 73 of file DataSetManager.h. ◆ fDataSetInfoCollection. TList TMVA::DataSetManager::fDataSetInfoCollection. private . all registered dataset definitions ; Definition at line 79 of file DataSetManager.h. ◆ fLogger. MsgLogger* TMVA::DataSetManager::fLogger. private . ! message logger ; Definition at line 80 of file DataSetManager.h. Libraries for TMVA::DataSetManager:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataSetManager.h; tmva/tmva/src/DataSetManager.cxx. TMVADataSetManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html:14648,Guid,Guide,14648,doc/master/classTMVA_1_1DataSetManager.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html,1,['Guid'],['Guide']
Usability,"Info(nullptr, ""Class %s is not included in the set of autoparse keys.\n"", autoParseKey.c_str());; 3251 }; 3252 ; 3253 // Propagate to the classes map only if this is not a template.; 3254 // The header is then used as autoload key and we want to avoid duplicates.; 3255 if (!llvm::isa<clang::ClassTemplateSpecializationDecl>(cxxRcd)){; 3256 headersClassesMap[autoParseKey] = headersDeclsMap[autoParseKey];; 3257 headersClassesMap[annotatedRcd.GetRequestedName()] = headersDeclsMap[annotatedRcd.GetRequestedName()];; 3258 }; 3259 }; 3260 }; 3261 ; 3262 // The same for the typedefs:; 3263 for (auto & tDef : tDefDecls) {; 3264 if (clang::CXXRecordDecl *cxxRcd = tDef->getUnderlyingType()->getAsCXXRecordDecl()) {; 3265 autoParseKey = """";; 3266 visitedDecls.clear();; 3267 std::list<std::string> headers(RecordDecl2Headers(*cxxRcd, interp, visitedDecls));; 3268 headers.push_back(ROOT::TMetaUtils::GetFileName(*tDef, interp));; 3269 // remove duplicates, also if not subsequent; 3270 buffer.clear();; 3271 headers.remove_if([&buffer](const std::string & s) {; 3272 return !buffer.insert(s).second;; 3273 });; 3274 GetMostExternalEnclosingClassNameFromDecl(*tDef, autoParseKey, interp);; 3275 if (autoParseKey.empty()) autoParseKey = tDef->getQualifiedNameAsString();; 3276 headersDeclsMap[autoParseKey] = headers;; 3277 }; 3278 }; 3279 ; 3280 // The same for the functions:; 3281 for (auto & func : funcDecls) {; 3282 std::list<std::string> headers = {ROOT::TMetaUtils::GetFileName(*func, interp)};; 3283 headersDeclsMap[ROOT::TMetaUtils::GetQualifiedName(*func)] = headers;; 3284 }; 3285 ; 3286 // The same for the variables:; 3287 for (auto & var : varDecls) {; 3288 std::list<std::string> headers = {ROOT::TMetaUtils::GetFileName(*var, interp)};; 3289 headersDeclsMap[ROOT::TMetaUtils::GetQualifiedName(*var)] = headers;; 3290 }; 3291 ; 3292 // The same for the enums:; 3293 for (auto & en : enumDecls) {; 3294 std::list<std::string> headers = {ROOT::TMetaUtils::GetFileName(*en, interp)};; 3295 head",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:130159,clear,clear,130159,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['clear'],['clear']
Usability,"Info;  CTMonaLisaText;  CTMonaLisaValue;  CTMonaLisaWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:171860,simpl,simple,171860,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['simpl'],['simple']
Usability,"InfoActions.cxx:2311; TStreamerInfoActions::AssociativeLooper::ConvertCollectionBasicType::Actionstatic Int_t Action(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2312; TStreamerInfoActions::AssociativeLooper::ConvertRead< NoFactorMarker< From >, To >::Actionstatic void Action(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoActions.cxx:2283; TStreamerInfoActions::AssociativeLooper::ConvertRead< WithFactorMarker< From >, To >::Actionstatic void Action(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoActions.cxx:2297; TStreamerInfoActions::AssociativeLooper::ConvertReadDefinition TStreamerInfoActions.cxx:2268; TStreamerInfoActions::AssociativeLooper::ConvertRead::Actionstatic void Action(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoActions.cxx:2269; TStreamerInfoActions::AssociativeLooperDefinition TStreamerInfoActions.cxx:2195; TStreamerInfoActions::AssociativeLooper::SimpleReadstatic void SimpleRead(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoActions.cxx:2198; TStreamerInfoActions::AssociativeLooper::ReadCollectionDouble32static Int_t ReadCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2256; TStreamerInfoActions::AssociativeLooper::SimpleReadDouble32static void SimpleReadDouble32(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoActions.cxx:2208; TStreamerInfoActions::AssociativeLooper::ReadCollectionBasicTypestatic Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2262; TStreamerInfoActions::AssociativeLooper::ReadCollectionFloat16static Int_t ReadCollectionFloat16(TBuffer &buf, void *addr, const TConfiguration *conf)Definition TStreamerInfoActions.cxx:2251; TStreamerInfoActions::AssociativeLooper::SimpleReadFloat16static void SimpleReadFloat16(TBuffer &buf, void *addr, Int_t nvalues)Definition TStreamerInfoAction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:263053,Simpl,SimpleReadstatic,263053,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['Simpl'],"['SimpleRead', 'SimpleReadstatic']"
Usability,"Info_RefType (TypeInfo_t *) const;  ; virtual int TypeInfo_Size (TypeInfo_t *) const;  ; virtual const char * TypeInfo_TrueName (TypeInfo_t *) const;  ; virtual const char * TypeName (const char *s)=0;  ; virtual Int_t UnloadAllSharedLibraryMaps ()=0;  ; virtual int UnloadFile (const char *) const;  ; virtual Int_t UnloadLibraryMap (const char *library)=0;  ; virtual void UnRegisterTClassUpdate (const TClass *oldcl)=0;  ; virtual void UpdateEnumConstants (TEnum *enumObj, TClass *cl) const =0;  ; virtual void UpdateListOfGlobalFunctions ()=0;  ; virtual void UpdateListOfGlobals ()=0;  ; virtual void UpdateListOfMethods (TClass *cl) const =0;  ; virtual void UpdateListOfTypes ()=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:25597,Clear,Clear,25597,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Clear'],['Clear']
Usability,"Inheritance diagram for TTVLVEntry:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTVLVEntry(). TTVLVEntry::TTVLVEntry ; (; const TGWindow * ; p, . const TGPicture * ; bigpic, . const TGPicture * ; smallpic, . TGString * ; name, . TGString ** ; subnames, . EListViewMode ; ViewMode . ). TTVLVEntry constructor. ; Definition at line 97 of file TTVLVContainer.cxx. ◆ ~TTVLVEntry(). TTVLVEntry::~TTVLVEntry ; (; ). override . TTVLVEntry destructor. ; Definition at line 118 of file TTVLVContainer.cxx. Member Function Documentation. ◆ ConvertAliases(). const char * TTVLVEntry::ConvertAliases ; (; ). Convert all aliases into true names. ; Definition at line 127 of file TTVLVContainer.cxx. ◆ CopyItem(). void TTVLVEntry::CopyItem ; (; TTVLVEntry * ; dest). Copy this item's name and alias to an other. ; Definition at line 169 of file TTVLVContainer.cxx. ◆ Empty(). void TTVLVEntry::Empty ; (; ). Clear all names and alias. ; Definition at line 263 of file TTVLVContainer.cxx. ◆ FullConverted(). bool TTVLVEntry::FullConverted ; (; ). protected . Return true if converted name is alias free. ; Definition at line 153 of file TTVLVContainer.cxx. ◆ GetAlias(). const char * TTVLVEntry::GetAlias ; (; ). inline . Definition at line 77 of file TTVLVContainer.h. ◆ GetContainer(). TTVLVContainer * TTVLVEntry::GetContainer ; (; ). inline . Definition at line 78 of file TTVLVContainer.h. ◆ GetContext(). TGItemContext * TTVLVEntry::GetContext ; (; ). inline . Definition at line 79 of file TTVLVContainer.h. ◆ GetConvName(). const char * TTVLVEntry::GetConvName ; (; ). inline . Definition at line 80 of file TTVLVContainer.h. ◆ GetTip(). TGToolTip * TTVLVEntry::GetTip ; (; ). inline . Definition at line 82 of file TTVLVContainer.h. ◆ GetTrueName(). const char * TTVLVEntry::GetTrueName ; (; ). inline . Definition at line 81 of file TTVLVContainer.h. ◆ HandleCrossing(). bool TTVLVEntry::HandleCrossing ; (; Even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVEntry.html:32685,Clear,Clear,32685,doc/master/classTTVLVEntry.html,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html,1,['Clear'],['Clear']
Usability,"InitSlot(). void RJittedFilter::InitSlot ; (; TTreeReader * ; r, . unsigned int ; slot . ). finalvirtual . Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 50 of file RJittedFilter.cxx. ◆ PartialReport(). void RJittedFilter::PartialReport ; (; ROOT::RDF::RCutFlowReport & ; cr); const. finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 68 of file RJittedFilter.cxx. ◆ Report(). void RJittedFilter::Report ; (; ROOT::RDF::RCutFlowReport & ; cr); const. finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 62 of file RJittedFilter.cxx. ◆ ResetChildrenCount(). void RJittedFilter::ResetChildrenCount ; (; ). finalvirtual . Reimplemented from ROOT::Detail::RDF::RNodeBase.; Definition at line 92 of file RJittedFilter.cxx. ◆ ResetReportCount(). void RJittedFilter::ResetReportCount ; (; ). finalvirtual . Reimplemented from ROOT::Detail::RDF::RFilterBase.; Definition at line 104 of file RJittedFilter.cxx. ◆ SetFilter(). void RJittedFilter::SetFilter ; (; std::unique_ptr< RFilterBase > ; f). Definition at line 43 of file RJittedFilter.cxx. ◆ StopProcessing(). void RJittedFilter::StopProcessing ; (; ). finalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 86 of file RJittedFilter.cxx. ◆ TriggerChildrenCount(). void RJittedFilter::TriggerChildrenCount ; (; ). finalvirtual . Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 98 of file RJittedFilter.cxx. Member Data Documentation. ◆ fConcreteFilter. std::unique_ptr<RFilterBase> ROOT::Detail::RDF::RJittedFilter::fConcreteFilter = nullptr. private . Definition at line 40 of file RJittedFilter.hxx. Libraries for ROOT::Detail::RDF::RJittedFilter:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RJittedFilter.hxx; tree/dataframe/src/RJittedFilter.cxx. ROOTDetailRDFRJittedFilter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html:8098,Guid,Guide,8098,doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RJittedFilter.html,1,['Guid'],['Guide']
Usability,"InitTime(). void TProofPlayerRemote::SetInitTime ; (; ). overridevirtual . Set init time. ; Reimplemented from TProofPlayer.; Definition at line 4306 of file TProofPlayer.cxx. ◆ SetLastMergingMsg(). void TProofPlayerRemote::SetLastMergingMsg ; (; TObject * ; obj). protected . Set the message to be notified in case of exception. ; Definition at line 3613 of file TProofPlayer.cxx. ◆ SetMerging(). void TProofPlayerRemote::SetMerging ; (; Bool_t ; on = kTRUE). overridevirtual . Switch on/off merge timer. ; Reimplemented from TProofPlayer.; Definition at line 1814 of file TProofPlayer.cxx. ◆ SetSelectorDataMembersFromOutputList(). void TProofPlayerRemote::SetSelectorDataMembersFromOutputList ; (; ). protected . Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ; Definition at line 2766 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayerRemote::SetupFeedback ; (; ). overrideprotectedvirtual . Setup reporting of feedback objects. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 4095 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayerRemote::StopFeedback ; (; ). overrideprotectedvirtual . Stop reporting of feedback objects. ; Reimplemented from TProofPlayer.; Definition at line 4118 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayerRemote::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop process after this event. ; Reimplemented from TProofPlayer.; Definition at line 3325 of file TProofPlayer.cxx. ◆ StoreFeedback(). void TProofPlayerRemote::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback results from the specified slave. ; Reimplemented from TProofPlayer.; Definition at line 4034 of file TProofPlayer.cxx. ◆ StoreOutput(). void TProofPlayerRemote::StoreOutput ; (; TList * ; out). overridevirtual . Store received output list. ; Reimplemented from TPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:36789,feedback,feedback,36789,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"Initialize X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(Colormap cmap, RXColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(Colormap cmap, RXColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(Drawable* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(Drawable* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by pol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:27562,Clear,ClearPixmap,27562,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,4,['Clear'],"['Clear', 'ClearPixmap']"
Usability,"Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x, . size_t ; n . ); const. Evaluate the series at a given point, to (at most) the given order n. ; Definition at line 108 of file ChebyshevApprox.cxx. ◆ operator=() [1/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; ChebyshevApprox && ; ). delete . ◆ operator=() [2/2]. ChebyshevApprox & ROOT::Math::ChebyshevApprox::operator= ; (; const ChebyshevApprox & ; ). delete . Member Data Documentation. ◆ fFunction. GSLFunctionWrapper* ROOT::Math::ChebyshevApprox::fFunction. private . Definition at line 161 of file ChebyshevApprox.h. ◆ fOrder. size_t ROOT::Math::ChebyshevApprox::fOrder. private . Definition at line 158 of file ChebyshevApprox.h. ◆ fSeries. GSLChebSeries* ROOT::Math::ChebyshevApprox::fSeries. private . Definition at line 160 of file ChebyshevApprox.h. Libraries for ROOT::Math::ChebyshevApprox:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/ChebyshevApprox.h; math/mathmore/src/ChebyshevApprox.cxx. ROOTMathChebyshevApprox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:7095,Guid,Guide,7095,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,1,['Guid'],['Guide']
Usability,"InputDialog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 43 of file TGInputDialog.h. ◆ operator=(). TGInputDialog & TGInputDialog::operator= ; (; const TGInputDialog & ; ). privatedelete . ◆ ProcessMessage(). Bool_t TGInputDialog::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ;  . ). overridevirtual . Handle button and text enter events. ; Reimplemented from TGCompositeFrame.; Definition at line 143 of file TGInputDialog.cxx. ◆ Streamer(). void TGInputDialog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGInputDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file TGInputDialog.h. Member Data Documentation. ◆ fCancel. TGTextButton* TGInputDialog::fCancel {nullptr}. private . cancel button ; Definition at line 28 of file TGInputDialog.h. ◆ fLabel. TGLabel* TGInputDialog::fLabel {nullptr}. private . text entry label ; Definition at line 25 of file TGInputDialog.h. ◆ fOk. TGTextButton* TGInputDialog::fOk {nullptr}. private . ok button ; Definition at line 27 of file TGInputDialog.h. ◆ fOwnBuf. char* TGInputDialog::fOwnBuf {nullptr}. private . internal buffer when return string not specified ; Definition at line 30 of file TGInputDialog.h. ◆ fRetStr. char* TGInputDialog::fRetStr {nullptr}. private . address to store return string ; Definition at line 29 of file TGInputDialog.h. ◆ fTE. TGTextEntry* TGInputDialog::fTE {nullptr}. private . text entry widget ; Definition at line 26 of file TGInputDialog.h. Libraries for TGInputDialog:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGInputDialog.h; gui/gui/src/TGInputDialog.cxx. TGInputDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputDialog.html:40627,Guid,Guide,40627,doc/master/classTGInputDialog.html,https://root.cern,https://root.cern/doc/master/classTGInputDialog.html,1,['Guid'],['Guide']
Usability,"Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:2127,Clear,Clear,2127,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['Clear'],['Clear']
Usability,"Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d79e4210 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(Mf_over_Mf_Int[cpsi]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_Mf_over_Mf_Int[cpsi]_MfData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d7a58030 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi] for nset () with code 1 from preexisting content.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Mf_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_Int[psi]) using numeric integrator RooIntegrator1D to calculate Int(psi); [#1] INFO:Caching -- RooAbsCachedPdf::getCache(Mf) creating new cache 0x5569d7a58030 with pdf Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi for nset (cpsi) with code 0; [#1] INFO:NumericIntegration -- RooRealIntegral::init(Tpsi_CONV_Rpsi_CACHE_Obs[cpsi]_NORM_cpsi_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); [#1] INFO:NumericIntegration -- RooRealIntegral::init(T_Int[cpsi]) using numeric integrator RooIntegrator1D to calculate Int(cpsi); DateApril 2009 ; AuthorWouter Verkerke ; Definition in file rf210_angularconv.C. tutorialsroofitrf210_angularconv.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf210__angularconv_8C.html:10955,Guid,Guide,10955,doc/master/rf210__angularconv_8C.html,https://root.cern,https://root.cern/doc/master/rf210__angularconv_8C.html,1,['Guid'],['Guide']
Usability,"Int_t Lock() overrideDefinition TVirtualRWMutex.h:79; ROOT::TWriteLockGuardDefinition TVirtualRWMutex.h:131; ROOT::TWriteLockGuard::TWriteLockGuardTWriteLockGuard(TVirtualRWMutex *mutex)Definition TVirtualRWMutex.h:141; ROOT::TWriteLockGuard::operator=TWriteLockGuard & operator=(const TWriteLockGuard &)=delete; ROOT::TWriteLockGuard::fMutexTVirtualRWMutex *const fMutexDefinition TVirtualRWMutex.h:134; ROOT::TWriteLockGuard::TWriteLockGuardTWriteLockGuard(const TWriteLockGuard &)=delete; ROOT::TWriteLockGuard::fHintTVirtualRWMutex::Hint_t * fHintDefinition TVirtualRWMutex.h:135; ROOT::TWriteLockGuard::~TWriteLockGuard~TWriteLockGuard()Definition TVirtualRWMutex.h:145; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; int; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; ROOT::TVirtualRWMutex::StateAndRecurseCountDefinition TVirtualRWMutex.h:55; ROOT::TVirtualRWMutex::StateAndRecurseCount::fStatestd::unique_ptr< ROOT::TVirtualRWMutex::State > fStateState of gCoreMutex when the first interpreter-related function was invoked.Definition TVirtualRWMutex.h:57; ROOT::TVirtualRWMutex::StateAndRecurseCount::fRecurseCountInt_t fRecurseCountInterpreter-related functions will push the ""entry"" lock state to *this.Definition TVirtualRWMutex.h:62; ROOT::TVirtualRWMutex::StateDeltaState as returned by GetStateDelta() that can be passed to Restore()Definition TVirtualRWMutex.h:70; ROOT::TVirtualRWMutex::StateDelta::~StateDeltavirtual ~StateDelta(); ROOT::TVirtualRWMutex::StateEarlier lock state as returned by GetState() that can be passed to Restore()Definition TVirtualRWMutex.h:51; ROOT::TVirtualRWMutex::State::~Statevirtual ~State(). corebaseincTVirtualRWMutex.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TVirtualRWMutex_8h_source.html:9698,Guid,Guide,9698,doc/v632/TVirtualRWMutex_8h_source.html,https://root.cern,https://root.cern/doc/v632/TVirtualRWMutex_8h_source.html,1,['Guid'],['Guide']
Usability,"Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1I.html:1795,Clear,ClearUnderflowAndOverflow,1795,root/html602/TH1I.html,https://root.cern,https://root.cern/root/html602/TH1I.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2I.html:1782,Clear,ClearUnderflowAndOverflow,1782,root/html602/TH2I.html,https://root.cern,https://root.cern/root/html602/TH2I.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayI::Adopt(Int_t n, Int_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTArrayI::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3I.html:1782,Clear,ClearUnderflowAndOverflow,1782,root/html602/TH3I.html,https://root.cern,https://root.cern/root/html602/TH3I.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"Int_t bsize); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char *name); { return FindObject(name) != 0; }. Bool_t Contains(const TObject *obj); { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col). void SetNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollection.html:13729,Clear,Clear,13729,root/html526/TCollection.html,https://root.cern,https://root.cern/root/html526/TCollection.html,1,['Clear'],['Clear']
Usability,"Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6673,Simpl,SimpleInterval,6673,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLBoxPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLBoxPainter(TH1* hist, TPolyMarker3D* pm, TGLPlotCamera* camera, TGLPlotCoordinates* coord). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. virtual voidDeInitGL() const; voidDrawCloud() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLBoxPainter&operator=(const TGLBoxPainter&); voidSetPlotColor() const; TGLBoxPainter(const TGLBoxPainter&). Data Members; public:. static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kXAxis; static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kYAxis; static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kZAxis. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLBoxPainter.html:1732,Clear,ClearBuffers,1732,root/html602/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html602/TGLBoxPainter.html,2,['Clear'],['ClearBuffers']
Usability,"Int_t icheck=-1);  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckGeometry (Option_t *option="""");  Perform last checks on the geometry. ;  ; void CheckGeometryFull (Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"");  Geometry checking. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check all geometry for illegal overlaps within a limit OVLP. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the current navigator. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.);  Classify a given point. See TGeoChecker::CheckPoint(). ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);  Test for shape navigation methods. ;  ; void CleanGarbage ();  Clean temporary volumes and shapes from garbage collection. ;  ; void ClearAttributes ();  Reset all attributes to default ones. ;  ; void ClearNavigators ();  Clear all navigators. ;  ; void ClearOverlaps ();  Clear the list of overlaps. ;  ; void ClearPhysicalNodes (Bool_t mustdelete=kFALSE);  Clear the current list of physical nodes, so that we can start over with a new list. ;  ; void ClearShape (const TGeoShape *shape);  Remove a shape from the list of shapes. ;  ; void ClearThreadData () const;  ; void ClearTracks ();  ; void CloseGeometry (Option_t *option=""d"");  Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ;  ; void ConvertReflections ();  Convert all reflections in geometry to normal rotations + reflected shapes. ;  ; void CountLevels ();  Count maximum number of nodes per volume, maximum depth and maximum number of xtru vertices. ;  ; Int_t CountNodes (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:23726,Clear,ClearAttributes,23726,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearAttributes']
Usability,"Int_t id, Int_t pdgcode, TObject* particle); Makes a primary track but do not attach it to the list of tracks. The track; can be attached as daughter to another one with TVirtualGeoTrack::AddTrack. Int_t AddVolume(TGeoVolume* volume); Add a volume to the list. Returns index of the volume in list. TGeoNavigator * AddNavigator(); Add a navigator in the list of navigators. If it is the first one make it; current navigator. TGeoNavigator * GetCurrentNavigator() const; Returns current navigator for the calling thread. TGeoNavigatorArray * GetListOfNavigators() const; Get list of navigators for the calling thread. Bool_t SetCurrentNavigator(Int_t index); Switch to another existing navigator for the calling thread. void SetNavigatorsLock(Bool_t flag); Set the lock for navigators. void ClearNavigators(); Clear all navigators. void RemoveNavigator(const TGeoNavigator* nav); Clear a single navigator. void SetMaxThreads(Int_t nthreads); Set maximum number of threads for navigation. void ClearThreadData() const. void CreateThreadData() const; Create thread private data for all geometry objects. void ClearThreadsMap(); Clear the current map of threads. This will be filled again by the calling; threads via ThreadId calls. Int_t ThreadId(); Translates the current thread id to an ordinal number. This can be used to; manage data which is pspecific for a given thread.; static __thread Int_t tid = -1;; if (tid > -1) return tid;. void Browse(TBrowser* b); Describe how to browse this object. void Edit(Option_t* option = """"); Append a pad for this geometry. void SetVisibility(TObject* obj, Bool_t vis); Set visibility for a volume. void BombTranslation(const Double_t* tr, Double_t* bombtr); Get the new 'bombed' translation vector according current exploded view mode. void UnbombTranslation(const Double_t* tr, Double_t* bombtr); Get the new 'unbombed' translation vector according current exploded view mode. void DoBackupState(); Backup the current state without affecting the cache stack. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:39105,Clear,ClearThreadData,39105,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['Clear'],['ClearThreadData']
Usability,"Int_t includeError=3, Bool_t clearHist=kTRUE) const;  get background into a histogram ;  ; TSortedList * GetBgrSources (void) const;  Get a new list of all background sources. ;  ; Double_t GetChi2Sys (void);  calculate total chi**2 including all systematic errors ;  ; Bool_t GetDeltaSysBackgroundScale (TH1 *delta, const char *source, const Int_t *binMap=nullptr);  correlated one-sigma shifts from background normalisation uncertainty ;  ; Bool_t GetDeltaSysSource (TH1 *hist_delta, const char *source, const Int_t *binMap=nullptr);  correlated one-sigma shifts correspinding to a given systematic uncertainty ;  ; Bool_t GetDeltaSysTau (TH1 *delta, const Int_t *binMap=nullptr);  correlated one-sigma shifts from shifting tau ;  ; void GetEmatrixInput (TH2 *ematrix, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance matrix contribution from input measurement uncertainties ;  ; void GetEmatrixSysBackgroundScale (TH2 *ematrix, const char *source, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance contribution from background normalisation uncertainty ;  ; void GetEmatrixSysBackgroundUncorr (TH2 *ematrix, const char *source, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance contribution from background uncorrelated uncertainty ;  ; void GetEmatrixSysSource (TH2 *ematrix, const char *source, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance contribution from a systematic variation of the response matrix ;  ; void GetEmatrixSysTau (TH2 *ematrix, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  covariance matrix contribution from error on regularisation parameter ;  ; void GetEmatrixSysUncorr (TH2 *ematrix, const Int_t *binMap=nullptr, Bool_t clearEmat=kTRUE);  Covariance contribution from uncorrelated uncertainties of the response matrix. ;  ; void GetEmatrixTotal (TH2 *ematrix, const Int_t *binMap=nullptr);  Get total error matrix, summing up all contributions. ;  ; void GetRhoItotal (TH1 *rhoi, const Int_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:15510,clear,clearEmat,15510,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,12,['clear'],['clearEmat']
Usability,"Int_t index) const;  Return pointer to parameter at given index. ;  ; TClass * IsA () const override;  ; size_t nParameters () const;  Return the number of parameters. ;  ; bool ok () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Add formula expression as meta argument in printing interface. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:4598,simpl,simple,4598,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,1,['simpl'],['simple']
Usability,"Int_t lastChar) const; Use the information in the TGTextLayout object to display a multi-line,; justified string of text. This procedure is useful for simple widgets that need to display; single-font, multi-line text and want TGFont to handle the details. dst -- Window or pixmap in which to draw.; gc -- Graphics context to use for drawing text.; x, y -- Upper-left hand corner of rectangle in which to draw; (pixels).; firstChar -- The index of the first character to draw from the given; text item. 0 specfies the beginning.; lastChar -- The index just after the last character to draw from the; given text item. A number < 0 means to draw all characters. void UnderlineChar(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t underline) const; Use the information in the TGTextLayout object to display an underline; below an individual character. This procedure does not draw the text,; just the underline. This procedure is useful for simple widgets that need to display; single-font, multi-line text with an individual character underlined; and want TGFont to handle the details. To display larger amounts of; underlined text, construct and use an underlined font. dst -- Window or pixmap in which to draw.; gc -- Graphics context to use for drawing text.; x, y -- Upper-left hand corner of rectangle in which to draw; (pixels).; underline -- Index of the single character to underline, or -1 for; no underline. Int_t PointToChar(Int_t x, Int_t y) const; Use the information in the TGTextLayout token to determine the character; closest to the given point. The point must be specified with respect to; the upper-left hand corner of the text layout, which is considered to be; located at (0, 0). Any point whose y-value is less that 0 will be considered closest to the; first character in the text layout; any point whose y-value is greater; than the height of the text layout will be considered closest to the last; character in the text layout. Any point whose x-value is less than 0 will be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLayout.html:7190,simpl,simple,7190,root/html528/TGTextLayout.html,https://root.cern,https://root.cern/root/html528/TGTextLayout.html,6,['simpl'],['simple']
Usability,"Int_t ncheck) constGet the index of a daughter within check_list by providing the node pointer.Definition TGeoVolume.cxx:1729; TGeoVolume::ValidBool_t Valid() constCheck if the shape of this volume is valid.Definition TGeoVolume.cxx:2409; TGeoVolume::IsAllInvisibleBool_t IsAllInvisible() constReturn TRUE if volume and all daughters are invisible.Definition TGeoVolume.cxx:781; TGeoVolume::fNtotalInt_t fNtotalDefinition TGeoVolume.h:56; TGeoVolume::MakeCopyNodesvoid MakeCopyNodes(const TGeoVolume *other)make a new list of nodes and copy all nodes of other volume insideDefinition TGeoVolume.cxx:1908; TGeoVolume::SetUserExtensionvoid SetUserExtension(TGeoExtension *ext)Connect user-defined extension to the volume.Definition TGeoVolume.cxx:1480; TGeoVolume::GrabFWExtensionTGeoExtension * GrabFWExtension() constGet a copy of the framework extension pointer.Definition TGeoVolume.cxx:1525; TGeoVolume::SetNumbervoid SetNumber(Int_t number)Definition TGeoVolume.h:245; TGeoVolume::ClearNodesvoid ClearNodes()Definition TGeoVolume.h:95; TGeoVolume::SetLineWidthvoid SetLineWidth(Width_t lwidth) overrideSet the line width.Definition TGeoVolume.cxx:2185; TGeoVolume::Raytracevoid Raytrace(Bool_t flag=kTRUE)Draw this volume with current settings and perform raytracing in the pad.Definition TGeoVolume.cxx:1427; TGeoVolume::RandomRaysvoid RandomRays(Int_t nrays=10000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE)Random raytracing method.Definition TGeoVolume.cxx:1409; TGeoVolume::TGeoVolumeTGeoVolume()dummy constructorDefinition TGeoVolume.cxx:453; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideGet volume info for the browser.Definition TGeoVolume.cxx:1760; TGeoVolume::Printvoid Print(Option_t *option="""") const overridePrint volume info.Definition TGeoVolume.cxx:1257; TGeoVolume::CloneNodesAndConnectvoid Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:140563,Clear,ClearNodesvoid,140563,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['Clear'],"['ClearNodes', 'ClearNodesvoid']"
Usability,"Int_t numberClasses, UInt_t numberTargets); BDT can handle classification with multiple classes and regression with one regression-target. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..); known: AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost; AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoission Nvars use UseNvars not as fixed number but as mean of a possion distribution; UseNTrainEvents number of training events used in randomised (and bagged) trees; SeparationType the separation criterion applied in the node splitting; known: GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB; nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; misclassification error rate); UseWeightedTrees use average classification from the trees, or have the individual trees; trees in the forest weighted (e.g. log(boostweight) from AdaBoost; PruneMethod The Pruning method:; known: NoPruning // switch off pruning completely; ExpectedError; CostComplexity; PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruneBeforeBoost flag to prune the tree before applying boosting algorithm; PruningValFraction number of even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBDT.html:26988,simpl,simply,26988,root/html530/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBDT.html,2,['simpl'],['simply']
Usability,"Int_t numberClasses, UInt_t numberTargets); BDT can handle classification with multiple classes and regression with one regression-target. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..); known: AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost; AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoission Nvars use UseNvars not as fixed number but as mean of a possion distribution; UseNTrainEvents number of training events used in randomised (and bagged) trees; SeparationType the separation criterion applied in the node splitting; known: GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB; nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterium; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; misclassification error rate); UseWeightedTrees use average classification from the trees, or have the individual trees; trees in the forest weighted (e.g. log(boostweight) from AdaBoost; PruneMethod The Pruning method:; known: NoPruning // switch off pruning completely; ExpectedError; CostComplexity; PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruneBeforeBoost flag to prune the tree before applying boosting algorithm; PruningValFraction number of even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:25583,simpl,simply,25583,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,1,['simpl'],['simply']
Usability,"Int_t secOffset); voidSetNanoSec(Int_t nsec); voidSetSec(Int_t sec); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TTimeStamp(); TTimeStamp(const timespec_t& ts); TTimeStamp(const TTimeStamp&); TTimeStamp(time_t t, Int_t nsec); TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0). private:. voidNormalizeNanoSec(). Data Members; private:. Int_tfNanoSecnanoseconds; Int_tfSecseconds. Class Charts. Inheritance Chart:. TTimeStamp. Function documentation; TTimeStamp(); Default ctor. Create a TTimeStamp and set it to the current time; (as best possible). The nanosecond part is faked so that subsequenct; calls simply add 1 to ensure that sequential calls are distinct; (and sortable). TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified year, month,; day, time, hour, minute, second and nanosec.; If !isUTC then it is assumed to be the standard local time zone. If local time is PST then one can use; TTimeStamp(year,month,day,hour,min,sec,nsec,kFALSE,0);; or; Int_t secOffset = 8*60*60;; TTimeStamp(year,month,day,hour,min,sec,nsec,kTRUE,8*60*60);. TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified date, time, nanosec.; If !isUTC then it is assumed to be the standard local time zone. TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); Create a TTimeStamp and set it to tloc which must be a time_t value; returned by time(). This value is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTimeStamp.html:3707,simpl,simply,3707,root/html602/TTimeStamp.html,https://root.cern,https://root.cern/root/html602/TTimeStamp.html,2,['simpl'],['simply']
Usability,"Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGValuatorBase&operator=(const TEveGValuatorBase&); TEveGValuatorBase(const TEveGValuatorBase&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGValuatorBase.html:15486,Clear,ClearFlags,15486,root/html602/TEveGValuatorBase.html,https://root.cern,https://root.cern/root/html602/TEveGValuatorBase.html,2,['Clear'],['ClearFlags']
Usability,"Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGShutterItem&operator=(const TGShutterItem&); TGShutterItem(const TGShutterItem&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGShutterItem.html:15329,Clear,ClearFlags,15329,root/html602/TGShutterItem.html,https://root.cern,https://root.cern/root/html602/TGShutterItem.html,2,['Clear'],['ClearFlags']
Usability,"Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); virtual voidConnectSignals2Slots(); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWindow::EEditModeTGWindow::kEditDisableHe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPconSection.html:15413,Clear,ClearFlags,15413,root/html602/TGeoPconSection.html,https://root.cern,https://root.cern/root/html602/TGeoPconSection.html,2,['Clear'],['ClearFlags']
Usability,"Int_tAddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); voidChangePartition(Int_t n, Int_t m); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearBinContents(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidTH2::Copy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2Poly.html:6877,Clear,Clear,6877,root/html534/TH2Poly.html,https://root.cern,https://root.cern/root/html534/TH2Poly.html,1,['Clear'],['Clear']
Usability,Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously; Bool_tfEnabled! cache enabled for cached reading; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tfFillTimes! how many times we can fill the current buffer; Bool_tfFirstBuffer! true if first buffer is used for prefetching; Long64_tfFirstEntry! save the value of the first entry; Bool_tfFirstTime! save the fact that we processes the first entry; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:19639,learn,learning,19639,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,['learn'],['learning']
Usability,"Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE); static voidTProof::DelEnvVar(const char* name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2490,Clear,ClearPackages,2490,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearPackages']
Usability,"Int_t ; nbytes . ). Return the best free segment where to store nbytes. ; Definition at line 127 of file TFree.cxx. ◆ GetFirst(). Long64_t TFree::GetFirst ; (; ); const. inline . Definition at line 40 of file TFree.h. ◆ GetLast(). Long64_t TFree::GetLast ; (; ); const. inline . Definition at line 41 of file TFree.h. ◆ IsA(). TClass * TFree::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 48 of file TFree.h. ◆ ls(). void TFree::ls ; (; Option_t * ; = """"); const. overridevirtual . List free segment contents. ; Reimplemented from TObject.; Definition at line 159 of file TFree.cxx. ◆ ReadBuffer(). void TFree::ReadBuffer ; (; char *& ; buffer). virtual . Decode one free structure from input buffer. ; Definition at line 167 of file TFree.cxx. ◆ SetFirst(). void TFree::SetFirst ; (; Long64_t ; first). inline . Definition at line 44 of file TFree.h. ◆ SetLast(). void TFree::SetLast ; (; Long64_t ; last). inline . Definition at line 45 of file TFree.h. ◆ Sizeof(). Int_t TFree::Sizeof ; (; ); const. return number of bytes occupied by this TFree on permanent storage ; Definition at line 184 of file TFree.cxx. ◆ Streamer(). void TFree::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TFree.h. Member Data Documentation. ◆ fFirst. Long64_t TFree::fFirst. protected . First free word of segment. ; Definition at line 30 of file TFree.h. ◆ fLast. Long64_t TFree::fLast. protected . Last free word of segment. ; Definition at line 31 of file TFree.h. Libraries for TFree:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TFree.h; io/io/src/TFree.cxx. TFree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFree.html:15105,Guid,Guide,15105,doc/master/classTFree.html,https://root.cern,https://root.cern/doc/master/classTFree.html,1,['Guid'],['Guide']
Usability,"Int_t ; upb, . const Element * ; data . ); const. inline . Definition at line 91 of file TVectorT.h. ◆ Use() [3/6]. template<class Element > . TVectorT< Element > & TVectorT< Element >::Use ; (; Int_t ; lwb, . Int_t ; upb, . Element * ; data . ). Use the array data to fill the vector lwb..upb]. ; Definition at line 349 of file TVectorT.cxx. ◆ Use() [4/6]. template<class Element > . const TVectorT< Element > & TVectorT< Element >::Use ; (; Int_t ; n, . const Element * ; data . ); const. inline . Definition at line 196 of file TVectorT.h. ◆ Use() [5/6]. template<class Element > . TVectorT< Element > & TVectorT< Element >::Use ; (; Int_t ; n, . Element * ; data . ). inline . Definition at line 195 of file TVectorT.h. ◆ Use() [6/6]. template<class Element > . TVectorT< Element > & TVectorT< Element >::Use ; (; TVectorT< Element > & ; v). inline . Definition at line 197 of file TVectorT.h. ◆ Zero(). template<class Element > . TVectorT< Element > & TVectorT< Element >::Zero. Set vector elements to zero. ; Definition at line 453 of file TVectorT.cxx. Member Data Documentation. ◆ fDataStack. template<class Element > . Element TVectorT< Element >::fDataStack[kSizeMax]. protected . Definition at line 37 of file TVectorT.h. ◆ fElements. template<class Element > . Element* TVectorT< Element >::fElements {nullptr}. protected . Definition at line 32 of file TVectorT.h. ◆ fIsOwner. template<class Element > . Bool_t TVectorT< Element >::fIsOwner {kTRUE}. protected . data container ; Definition at line 38 of file TVectorT.h. ◆ fNrows. template<class Element > . Int_t TVectorT< Element >::fNrows {0}. protected . Definition at line 30 of file TVectorT.h. ◆ fRowLwb. template<class Element > . Int_t TVectorT< Element >::fRowLwb {0}. protected . Definition at line 31 of file TVectorT.h. math/matrix/inc/TMatrixTBase.h; math/matrix/inc/TVectorT.h; math/matrix/src/TVectorT.cxx. TVectorT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVectorT.html:40813,Guid,Guide,40813,doc/master/classTVectorT.html,https://root.cern,https://root.cern/doc/master/classTVectorT.html,1,['Guid'],['Guide']
Usability,"Int_t ; wh . ). Embedded a canvas into a TRootEmbeddedCanvas. ; This method is only called via TRootEmbeddedCanvas::AdoptCanvas. ; Definition at line 1046 of file TCanvas.cxx. ◆ EnterLeave(). void TCanvas::EnterLeave ; (; TPad * ; prevSelPad, . TObject * ; prevSelObj . ). Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ; Does nothing if the selected object does not change. ; Definition at line 1072 of file TCanvas.cxx. ◆ ExecuteEvent(). void TCanvas::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to one event. ; This member function must be implemented to realize the action corresponding to the mouse click on the object in the canvas; Only handle mouse motion events in TCanvas, all other events are ignored for the time being ; Reimplemented from TObject.; Definition at line 1108 of file TCanvas.cxx. ◆ FeedbackMode(). void TCanvas::FeedbackMode ; (; Bool_t ; set). Turn rubberband feedback mode on or off. ; Definition at line 1126 of file TCanvas.cxx. ◆ Flush(). void TCanvas::Flush ; (; ). Flush canvas buffers. ; Definition at line 1143 of file TCanvas.cxx. ◆ ForceUpdate(). void TCanvas::ForceUpdate ; (; ). Force canvas update. ; Definition at line 1175 of file TCanvas.cxx. ◆ GetAutoExec(). Bool_t TCanvas::GetAutoExec ; (; ); const. inline . Definition at line 152 of file TCanvas.h. ◆ GetCanvasID(). Int_t TCanvas::GetCanvasID ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 157 of file TCanvas.h. ◆ GetCanvasImp(). TCanvasImp * TCanvas::GetCanvasImp ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 158 of file TCanvas.h. ◆ GetCanvasPainter(). TVirtualPadPainter * TCanvas::GetCanvasPainter ; (; ). Access and (probably) creation of pad painter. ; Definition at line 2603 of file TCanvas.cxx. ◆ GetCanvasPar(). virtual void TCanvas::GetCanvasPar ; (; Int_t & ; wt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:72827,Feedback,FeedbackMode,72827,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Feedback'],['FeedbackMode']
Usability,"Int_t ; wh . ). Embedded a canvas into a TRootEmbeddedCanvas. ; This method is only called via TRootEmbeddedCanvas::AdoptCanvas. ; Definition at line 1048 of file TCanvas.cxx. ◆ EnterLeave(). void TCanvas::EnterLeave ; (; TPad * ; prevSelPad, . TObject * ; prevSelObj . ). Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ; Does nothing if the selected object does not change. ; Definition at line 1074 of file TCanvas.cxx. ◆ ExecuteEvent(). void TCanvas::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to one event. ; This member function must be implemented to realize the action corresponding to the mouse click on the object in the canvas; Only handle mouse motion events in TCanvas, all other events are ignored for the time being ; Reimplemented from TObject.; Definition at line 1110 of file TCanvas.cxx. ◆ FeedbackMode(). void TCanvas::FeedbackMode ; (; Bool_t ; set). Turn rubberband feedback mode on or off. ; Definition at line 1128 of file TCanvas.cxx. ◆ Flush(). void TCanvas::Flush ; (; ). Flush canvas buffers. ; Definition at line 1145 of file TCanvas.cxx. ◆ ForceUpdate(). void TCanvas::ForceUpdate ; (; ). Force canvas update. ; Definition at line 1177 of file TCanvas.cxx. ◆ GetAutoExec(). Bool_t TCanvas::GetAutoExec ; (; ); const. inline . Definition at line 152 of file TCanvas.h. ◆ GetCanvasID(). Int_t TCanvas::GetCanvasID ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 157 of file TCanvas.h. ◆ GetCanvasImp(). TCanvasImp * TCanvas::GetCanvasImp ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 158 of file TCanvas.h. ◆ GetCanvasPainter(). TVirtualPadPainter * TCanvas::GetCanvasPainter ; (; ). Access and (probably) creation of pad painter. ; Definition at line 2616 of file TCanvas.cxx. ◆ GetCanvasPar(). virtual void TCanvas::GetCanvasPar ; (; Int_t & ; wt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:73203,Feedback,FeedbackMode,73203,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Feedback'],['FeedbackMode']
Usability,"IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-dimensional integrator base class ; Definition at line 197 of file IntegratorMultiDim.h. Libraries for ROOT::Math::IntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorMultiDim.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:10713,Guid,Guide,10713,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['Guid'],['Guide']
Usability,"Introduction; The fitting method; The fit is performed using the Normal Equations method with Cholesky decomposition.; Why should it be used?; The linear fitter is considerably faster than general non-linear fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?. There are 2 options in the constructor - to store or not store the input data. The advantages of storing the data are that you'll be able to reset the fitting model without adding all the points again, and that for very large sets of points the chisquare is calculated more precisely. The obvious disadvantage is the amount of memory used to keep all the points.; Before you start adding the points, you can change the store/not store option by StoreData() method. 1.2 The data can be added:. simply point by point - AddPoint() method; an array of points at once: If the data is already stored in some arrays, this data can be assigned to the linear fitter without physically coping bytes, thanks to the Use() method of TVector and TMatrix classes - AssignData() method. 2.Setting the formula; 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++"" –for example ""1 ++ x"" - for fitting a straight line -All standard functions, undrestood by TFormula, can be used as additive parts –TMath functions can be used too -Functions, used as additive parts, shouldn't have any parameters, even if those parameters are set. –for example, if normalizing a sum of a gaus(0, 1) and a gaus(0, 2), don't use the built-in ""gaus"" of TFormula, because it has parameters, take TMath::Gaus(x, 0, 1) instead. -Polynomials can be used like ""pol3"", ..""polN"" -If fitting a more than 3-dimensional formula, variables should be numbered as follows: – x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]""; 2.2 Setting the formula:; 2.2.1 If fitting a 1-2-3-dimensional formula, one can create a; TF123 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:2021,simpl,simply,2021,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['simpl'],['simply']
Usability,"InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:4005,Simpl,SimpleInterval,4005,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,Ipis. TTreeReaderValue<Int_t> h1analysisTreeReader::fIpis. Definition at line 21 of file h1analysisTreeReader.h. ◆ fMd0_d. TTreeReaderValue<Float_t> h1analysisTreeReader::fMd0_d. Definition at line 23 of file h1analysisTreeReader.h. ◆ fNhitrp. TTreeReaderArray<Int_t> h1analysisTreeReader::fNhitrp. Definition at line 25 of file h1analysisTreeReader.h. ◆ fNjets. TTreeReaderValue<Int_t> h1analysisTreeReader::fNjets. Definition at line 30 of file h1analysisTreeReader.h. ◆ fNlhk. TTreeReaderArray<Float_t> h1analysisTreeReader::fNlhk. Definition at line 28 of file h1analysisTreeReader.h. ◆ fNlhpi. TTreeReaderArray<Float_t> h1analysisTreeReader::fNlhpi. Definition at line 29 of file h1analysisTreeReader.h. ◆ fProcessed. Long64_t h1analysisTreeReader::fProcessed. Definition at line 38 of file h1analysisTreeReader.h. ◆ fPtd0_d. TTreeReaderValue<Float_t> h1analysisTreeReader::fPtd0_d. Definition at line 22 of file h1analysisTreeReader.h. ◆ fPtds_d. TTreeReaderValue<Float_t> h1analysisTreeReader::fPtds_d. Definition at line 16 of file h1analysisTreeReader.h. ◆ fRend. TTreeReaderArray<Float_t> h1analysisTreeReader::fRend. Definition at line 27 of file h1analysisTreeReader.h. ◆ fRpd0_t. TTreeReaderValue<Float_t> h1analysisTreeReader::fRpd0_t. Definition at line 24 of file h1analysisTreeReader.h. ◆ fRstart. TTreeReaderArray<Float_t> h1analysisTreeReader::fRstart. Definition at line 26 of file h1analysisTreeReader.h. ◆ h2. TH2F* h1analysisTreeReader::h2. Definition at line 33 of file h1analysisTreeReader.h. ◆ hdmd. TH1F* h1analysisTreeReader::hdmd. Definition at line 32 of file h1analysisTreeReader.h. ◆ myTreeReader. TTreeReader h1analysisTreeReader::myTreeReader. Definition at line 14 of file h1analysisTreeReader.h. ◆ useList. Bool_t h1analysisTreeReader::useList. Definition at line 35 of file h1analysisTreeReader.h. tutorials/tree/h1analysisTreeReader.h. h1analysisTreeReader. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classh1analysisTreeReader.html:21260,Guid,Guide,21260,doc/master/classh1analysisTreeReader.html,https://root.cern,https://root.cern/doc/master/classh1analysisTreeReader.html,1,['Guid'],['Guide']
Usability,"IsA () const override;  ; void Layout ();  Layout this node in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this node with its current attributes. ;  ; void SaveAttributes (std::ostream &);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVNode (GVizAgnode_t *gvn);  ; void SetTextAngle (Float_t) override;  Set the text angle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphNode.html:1989,Clear,Clear,1989,doc/master/classTGraphNode.html,https://root.cern,https://root.cern/doc/master/classTGraphNode.html,1,['Clear'],['Clear']
Usability,"IsA(). TClass * TRefTable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 93 of file TRefTable.h. ◆ Notify(). Bool_t TRefTable::Notify ; (; ). overridevirtual . This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer when reading a reference. ; This function, in turns, notifies the TRefTable owner for action. eg, when the owner is a TBranchRef, TBranchRef::Notify is called to read the branch containing the referenced object. ; Reimplemented from TObject.; Definition at line 299 of file TRefTable.cxx. ◆ operator=(). TRefTable & TRefTable::operator= ; (; const TRefTable & ; ). delete . ◆ ReadBuffer(). void TRefTable::ReadBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN elements in fParentdIDs. ; This function is called by TBranchRef::ReadLeaves ; Definition at line 308 of file TRefTable.cxx. ◆ Reset(). void TRefTable::Reset ; (; Option_t * ; = """"). virtual . Clear all entries in the table. ; Definition at line 345 of file TRefTable.cxx. ◆ SetParent(). Int_t TRefTable::SetParent ; (; const TObject * ; parent, . Int_t ; branchID . ). virtual . – Set current parent object, typically a branch of a tree. ; This function is called by TBranchElement::Fill() and by TBranchElement::GetEntry(). ; Definition at line 357 of file TRefTable.cxx. ◆ SetRefTable(). void TRefTable::SetRefTable ; (; TRefTable * ; table). static . Static function setting the current TRefTable. ; Definition at line 383 of file TRefTable.cxx. ◆ SetUID(). virtual void TRefTable::SetUID ; (; UInt_t ; uid, . TProcessID * ; context = nullptr . ). inlinevirtual . Definition at line 91 of file TRefTable.h. ◆ Streamer(). void TRefTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TRefTable. ; Reimplemented from TObject.; Definition at line 391 of file TRefTable.cxx. ◆ StreamerNVirtual(). void TRefTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:20068,Clear,Clear,20068,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Clear'],['Clear']
Usability,"IsImplicitMTEnabled; 13#include ""TError.h"" // Warning; 14#include ""TStopwatch.h""; 15#include ""RConfigure.h"" // R__USE_IMT; 16#include ""ROOT/RLogger.hxx""; 17#include ""ROOT/RDF/RLoopManager.hxx"" // for RLoopManager; 18#include ""ROOT/RDF/Utils.hxx""; 19#include ""ROOT/RResultHandle.hxx"" // for RResultHandle, RunGraphs; 20#ifdef R__USE_IMT; 21#include ""ROOT/TThreadExecutor.hxx""; 22#endif // R__USE_IMT; 23 ; 24#include <algorithm>; 25#include <iostream>; 26#include <set>; 27#include <cstdio>; 28 ; 29// TODO, this function should be part of core libraries; 30#include <numeric>; 31#if (!defined(_WIN32)) && (!defined(_WIN64)); 32#include <unistd.h>; 33#endif; 34 ; 35#if defined(_WIN32) || defined(_WIN64); 36#define WIN32_LEAN_AND_MEAN; 37#define VC_EXTRALEAN; 38#include <io.h>; 39#include <Windows.h>; 40#else; 41#include <sys/ioctl.h>; 42#endif; 43 ; 44// Get terminal size for progress bar; 45int get_tty_size(); 46{; 47#if defined(_WIN32) || defined(_WIN64); 48 if (!_isatty(_fileno(stdout))); 49 return 0;; 50 int width = 0;; 51 CONSOLE_SCREEN_BUFFER_INFO csbi;; 52 if (GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &csbi)); 53 width = (int)(csbi.srWindow.Right - csbi.srWindow.Left + 1);; 54 return width;; 55#else; 56 int width = 0;; 57 struct winsize w;; 58 ioctl(fileno(stdout), TIOCGWINSZ, &w);; 59 width = (int)(w.ws_col);; 60 return width;; 61#endif; 62}; 63 ; 64using ROOT::RDF::RResultHandle;; 65 ; 66unsigned int ROOT::RDF::RunGraphs(std::vector<RResultHandle> handles); 67{; 68 if (handles.empty()) {; 69 Warning(""RunGraphs"", ""Got an empty list of handles, now quitting."");; 70 return 0u;; 71 }; 72 ; 73 // Check that there are results which have not yet been run; 74 const unsigned int nToRun =; 75 std::count_if(handles.begin(), handles.end(), [](const auto &h) { return !h.IsReady(); });; 76 if (nToRun < handles.size()) {; 77 Warning(""RunGraphs"", ""Got %zu handles from which %zu link to results which are already ready."", handles.size(),; 78 handles.size() - nToRun)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:1564,progress bar,progress bar,1564,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Int_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:15224,simpl,simply,15224,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:15225,simpl,simply,15225,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Item(). void TGContainer::ActivateItem ; (; TGFrameElement * ; el). protectedvirtual . Activate item. ; Reimplemented in TGLBContainer, and TGLVContainer.; Definition at line 701 of file TGCanvas.cxx. ◆ AdjustPosition(). void TGContainer::AdjustPosition ; (; ). virtual . Move content to position of highlighted/activated frame. ; Reimplemented in TGListTree.; Definition at line 1793 of file TGCanvas.cxx. ◆ Associate(). virtual void TGContainer::Associate ; (; const TGWindow * ; w). inlinevirtual . Reimplemented in TGLBContainer.; Definition at line 89 of file TGCanvas.h. ◆ Class(). static TClass * TGContainer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGContainer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGContainer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 154 of file TGCanvas.h. ◆ ClearViewPort(). void TGContainer::ClearViewPort ; (; ). virtual . Clear view port and redraw full content. ; Definition at line 891 of file TGCanvas.cxx. ◆ Clicked() [1/2]. void TGContainer::Clicked ; (; TGFrame * ; f, . Int_t ; btn . ). virtual . Emit Clicked() signal. ; Reimplemented in TGListTree.; Definition at line 510 of file TGCanvas.cxx. ◆ Clicked() [2/2]. void TGContainer::Clicked ; (; TGFrame * ; f, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). virtual . Emit Clicked() signal. ; Reimplemented in TGListTree.; Definition at line 523 of file TGCanvas.cxx. ◆ CurrentChanged() [1/2]. void TGContainer::CurrentChanged ; (; Int_t ; x, . Int_t ; y . ). virtual . Emit signal when current position changed. ; Reimplemented in TGListTree.; Definition at line 434 of file TGCanvas.cxx. ◆ CurrentChanged() [2/2]. void TGContainer::CurrentChanged ; (; TGFrame * ; f). virtual . Emit signal when current selected frame changed. ; Reimplemented in TGListTree.; Definition at line 447 of file TGCanvas.cxx. ◆ DeActivateItem(). void TGCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:40395,Clear,ClearViewPort,40395,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['Clear'],['ClearViewPort']
Usability,"Iterationsstatic void SetMaxIterations(Int_t niter=5000)static: Set the maximum number of function calls for the minimization algorithm For example for MIGRA...Definition TVirtualFitter.cxx:298; TVirtualFitter::fFCNvoid(* fFCN)(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Definition TVirtualFitter.h:46; TVirtualFitter::GetErrorDefstatic Double_t GetErrorDef()static: Return the Error DefinitionDefinition TVirtualFitter.cxx:227; TVirtualFitter::fObjectFitTObject * fObjectFitPointer to object being fitted.Definition TVirtualFitter.h:43; TVirtualFitter::fCacheSizeInt_t fCacheSizeSize of the fCache array.Definition TVirtualFitter.h:41; TVirtualFitter::operator=TVirtualFitter & operator=(const TVirtualFitter &tvf)assignment operatorDefinition TVirtualFitter.cxx:116; TVirtualFitter::fYfirstInt_t fYfirstFirst bin on Y axis.Definition TVirtualFitter.h:35; TVirtualFitter::SetErrorDefstatic void SetErrorDef(Double_t errdef=1)static: Set the Error Definition (default=1) For Minuit this is the value passed with the ""SET ERR"" c...Definition TVirtualFitter.cxx:308; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; TVirtualFitter::~TVirtualFitter~TVirtualFitter() overrideCleanup virtual fitter.Definition TVirtualFitter.cxx:142; TVirtualFitter::fZlastInt_t fZlastLast bin on Z axis.Definition TVirtualFitter.h:38; TVirtualFitter::fNpointsInt_t fNpointsNumber of points to fit.Definition TVirtualFitter.h:39; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; TVirtualFitter::SetFitterstatic void SetFitter(TVirtualFitter *fitter, Int_t maxpar=25)Static function to set an alternative fitter.Definition TVirtualFitter.cxx:257; double; int. histhistsrcTVirtualFitter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFitter_8cxx_source.html:17490,Guid,Guide,17490,doc/master/TVirtualFitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFitter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Iterator RooAbsCollection::begin ; (; ). ◆ begin() [2/4]. RooLinkedListIter RooAbsCollection::begin ; (; ). ◆ begin() [3/4]. RooFIter RooAbsCollection::begin ; (; ). ◆ begin() [4/4]. const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 276 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 455 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 305 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 415 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:36748,clear,clear,36748,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['clear'],['clear']
Usability,Iterator(); static TClass*Class(); const TGeoMatrix*GetCurrentMatrix() const; Int_tGetIndex(Int_t i) const; Int_tGetLevel() const; TGeoNode*GetNode(Int_t level) const; voidGetPath(TString& path) const; TGeoVolume*GetTopVolume() const; Int_tGetType() const; TGeoIteratorPlugin*GetUserPlugin() const; virtual TClass*IsA() const; TGeoNode*Next(); TGeoNode*operator()(); TGeoIterator&operator=(const TGeoIterator& iter); voidReset(TGeoVolume* top = 0); voidSetPluginAutoexec(Bool_t mode); voidSetTopName(const char* name); voidSetType(Int_t type); voidSetUserPlugin(TGeoIteratorPlugin* plugin); virtual voidShowMembers(TMemberInspector& insp) const; voidSkip(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGeoIterator(TGeoVolume* top); TGeoIterator(const TGeoIterator& iter). protected:. TGeoIterator(). private:. voidIncreaseArray(). Data Members; private:. Int_t*fArrayArray of node indices for the current path; Int_tfLevelCurrent level in the tree; TGeoHMatrix*fMatrixCurrent global matrix; Bool_tfMustResumePrivate flag to resume from current node.; Bool_tfMustStopPrivate flag to signal that the iterator has finished.; TGeoIteratorPlugin*fPluginUser iterator plugin; Bool_tfPluginAutoexecPlugin automatically executed during next(); TGeoVolume*fTopTop volume of the iterated branch; TStringfTopNameUser name for top; Int_tfTypeType of iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoIterator(TGeoVolume* top); Geometry iterator for a branch starting with a TOP node. TGeoIterator(const TGeoIterator& iter); Copy ctor. ~TGeoIterator(); Destructor. TGeoIterator & operator=(const TGeoIterator& iter); Assignment. TGeoNode * Next(); Returns next node. TGeoNode * operator()(); Returns next node. const TGeoMatrix * GetCurrentMatrix() const; Returns global matrix for current node. TGeoNode * GetNode(Int_t level) const; Returns current node at a given level. void GetPath(TString& path) const; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoIterator.html:4349,resume,resume,4349,root/html602/TGeoIterator.html,https://root.cern,https://root.cern/root/html602/TGeoIterator.html,2,['resume'],['resume']
Usability,"Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Contribute Collaborate With Us. We warmly welcome external contributions to the ROOT! By providing code, you agree to transfer your copyright on the code to the ""ROOT project"". Of course you will be duly credited and your name will appear on the contributors page and in the CREDITS file shipped with every binary and source distribution. The copyright transfer is necessary for us to be able to effectively defend the project in case of litigation.; Presently, there are two ways in which you can contribute:; 1. Via the Users' contribution section in the Forum; The Users' Forum has a section which describes how to submit contributions. It is the easiest way to make your code known to the community, even if it will not be automatically integrated in ROOT. Of course the most successful contributions will become part of the repository!; 2. Sending Patches; You can send us a patch or a pull request with Github, provided that you follow these two simple rules:. Make sure you follow the ROOT coding conventions in your code; Make sure you provide a set of tests for your feature/bug fix. Often it is useful to contact us first to discuss the code you want to develop or the bug you want to fix.; Picking up an Idea; We maintain a set of ""ideas"" for talented scientists and developers to pick up. An ""idea"" is a sketch of a development project, a functionality a missing feature we would like to see in our tool, in your ROOT! You can inspect the ideas in the following list. Ideas. ; 30-01-2019 ; Transform GNU-makefile tests to CMake; ROOT's test suite has several crucial tests that still try on GNU-Makefile. We need to integrate them with CMake. ; 30-01-2019 ; Better argument parsing; Use a C++ command line argument library for defining and parsing ROOT's options. ; 30-01-2019 ; More tests, more benchmarks!; ROOT relies on testing, including performance testing - and we need to improve both.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:2808,simpl,simple,2808,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,1,['simpl'],['simple']
Usability,"JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerRemote.html:19529,Feedback,Feedback,19529,root/html534/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html534/TProofPlayerRemote.html,4,['Feedback'],['Feedback']
Usability,"July 2017;Time;Number of Sessions"");; ; // Draw the graph; auto c = new TCanvas(""c"", ""c"", 950, 500);; c->SetLeftMargin(0.07);; c->SetRightMargin(0.04);; c->SetGrid();; g->SetLineWidth(3);; g->SetLineColor(kBlue);; g->Draw(""al"");; g->GetYaxis()->CenterTitle();; ; // Make the X axis labelled with time.; auto xaxis = g->GetXaxis();; xaxis->SetTimeDisplay(1);; xaxis->CenterTitle();; xaxis->SetTimeFormat(""%a %d"");; xaxis->SetTimeOffset(0);; xaxis->SetNdivisions(-219);; xaxis->SetLimits(TDatime(2017, 7, 3, 0, 0, 0).Convert(), TDatime(2017, 7, 22, 0, 0, 0).Convert());; xaxis->SetLabelSize(0.025);; xaxis->CenterLabels();; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kBlue@ kBlueDefinition Rtypes.h:66; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; AuthorsDanilo Piparo, Olivier Couet ; Definition in file timeSeriesFromCSV_TDF.C. tutorialsgraphstimeSeriesFromCSV_TDF.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeSeriesFromCSV__TDF_8C.html:3293,Guid,Guide,3293,doc/master/timeSeriesFromCSV__TDF_8C.html,https://root.cern,https://root.cern/doc/master/timeSeriesFromCSV__TDF_8C.html,1,['Guid'],['Guide']
Usability,"L (void *node, const char *name, Matrix_t &matrix);  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; bool fFlattening;  Whether the layer is doing flattening. ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::VGeneralLayer< Architecture_t >; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:6222,learn,learningRate,6222,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"L << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSQLStatement.h>. Inheritance diagram for TSQLStatement:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSQLStatement(). TSQLStatement::TSQLStatement ; (; Bool_t ; errout = kTRUE). inlineprotected . Definition at line 24 of file TSQLStatement.h. ◆ ~TSQLStatement(). virtual TSQLStatement::~TSQLStatement ; (; ). virtualdefault . Member Function Documentation. ◆ Class(). static TClass * TSQLStatement::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSQLStatement::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSQLStatement::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TSQLStatement.h. ◆ ClearError(). void TSQLStatement::ClearError ; (; ). protected . reset error fields ; Definition at line 252 of file TSQLStatement.cxx. ◆ Close(). virtual void TSQLStatement::Close ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 41 of file TSQLStatement.h. ◆ DeclFileName(). static const char * TSQLStatement::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TSQLStatement.h. ◆ EnableErrorOutput(). virtual void TSQLStatement::EnableErrorOutput ; (; Bool_t ; on = kTRUE). inlinevirtual . Definition at line 115 of file TSQLStatement.h. ◆ GetBinary(). virtual Bool_t TSQLStatement::GetBinary ; (; Int_t ; , . void *& ; , . Long_t & ;  . ). inlinevirtual . Reimplemented in TMySQLStatement, TODBCStatement, TPgSQLStatement, and TSQLiteStatement.; Definition at line 88 of file TSQLStatement.h. ◆ GetBufferLength(). virtual Int_t TSQLStatement::GetBufferLen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStatement.html:16094,Clear,ClearError,16094,doc/master/classTSQLStatement.html,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html,1,['Clear'],['ClearError']
Usability,"L argument to push/pull */; 1739typedef struct SSL_CTX SSL_CTX;; 1740 ; 1741#elif defined(NO_SSL_DL); 1742/* OpenSSL without dynamic loading */; 1743#include <openssl/bn.h>; 1744#include <openssl/conf.h>; 1745#include <openssl/crypto.h>; 1746#include <openssl/dh.h>; 1747#include <openssl/engine.h>; 1748#include <openssl/err.h>; 1749#include <openssl/opensslv.h>; 1750#include <openssl/pem.h>; 1751#include <openssl/ssl.h>; 1752#include <openssl/tls1.h>; 1753#include <openssl/x509.h>; 1754 ; 1755#if defined(WOLFSSL_VERSION); 1756/* Additional defines for WolfSSL, see; 1757 * https://github.com/civetweb/civetweb/issues/583 */; 1758#include ""wolfssl_extras.inl""; 1759#endif; 1760 ; 1761#if defined(OPENSSL_IS_BORINGSSL); 1762/* From boringssl/src/include/openssl/mem.h:; 1763 *; 1764 * OpenSSL has, historically, had a complex set of malloc debugging options.; 1765 * However, that was written in a time before Valgrind and ASAN. Since we now; 1766 * have those tools, the OpenSSL allocation functions are simply macros around; 1767 * the standard memory functions.; 1768 *; 1769 * #define OPENSSL_free free */; 1770#define free free; 1771// disable for boringssl; 1772#define CONF_modules_unload(a) ((void)0); 1773#define ENGINE_cleanup() ((void)0); 1774#endif; 1775 ; 1776/* If OpenSSL headers are included, automatically select the API version */; 1777#if (OPENSSL_VERSION_NUMBER >= 0x30000000L); 1778#if !defined(OPENSSL_API_3_0); 1779#define OPENSSL_API_3_0; 1780#endif; 1781#define OPENSSL_REMOVE_THREAD_STATE(); 1782#else; 1783#if (OPENSSL_VERSION_NUMBER >= 0x10100000L); 1784#if !defined(OPENSSL_API_1_1); 1785#define OPENSSL_API_1_1; 1786#endif; 1787#define OPENSSL_REMOVE_THREAD_STATE(); 1788#else; 1789#if !defined(OPENSSL_API_1_0); 1790#define OPENSSL_API_1_0; 1791#endif; 1792#define OPENSSL_REMOVE_THREAD_STATE() ERR_remove_thread_state(NULL); 1793#endif; 1794#endif; 1795 ; 1796 ; 1797#else; 1798/* SSL loaded dynamically from DLL / shared object */; 1799/* Add all prototypes here,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:54226,simpl,simply,54226,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['simpl'],['simply']
Usability,"L table"", const char *engine=nullptr, const char *create_time=nullptr, const char *update_time=nullptr);  normal constructor ;  ; virtual ~TSQLTableInfo ();  destructor ;  ; TSQLColumnInfo * FindColumn (const char *columnname);  Return column info object of given name. ;  ; TList * GetColumns () const;  ; const char * GetCreateTime () const;  ; const char * GetEngine () const;  ; const char * GetUpdateTime () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Prints table and table columns info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableInfo.html:1442,Clear,Clear,1442,doc/master/classTSQLTableInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html,1,['Clear'],['Clear']
Usability,"LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; AuthorsStephan Hageboeck, Wouter Verkerke ; Definition in file rf204b_extendedLikelihood_rangedFit.py. tutorialsroofitrf204b_extendedLikelihood_rangedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html:25290,Guid,Guide,25290,doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8py.html,1,['Guid'],['Guide']
Usability,"LL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of right side. ;  ; virtual void CursorOutUp ();  This signal is emitted when cursor is going out of upper side. ;  ; void CursorRight (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor rightwards one or more characters. ;  ; void CursorWordBackward (Bool_t mark=kFALSE);  Moves the cursor one word to the left. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:6206,clear,clears,6206,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability,"LManager.; Definition at line 576 of file TX11GL.cxx. ◆ PrintViewer(). void TX11GLManager::PrintViewer ; (; TVirtualViewer3D * ; vv). overridevirtual . Print viewer. ; Implements TGLManager.; Definition at line 551 of file TX11GL.cxx. ◆ ReadGLBuffer(). void TX11GLManager::ReadGLBuffer ; (; Int_t ; devInd). overridevirtual . GL buffer is read info buffer, after that lines are reordered into XImage, XImage copied into pixmap. ; Implements TGLManager.; Definition at line 453 of file TX11GL.cxx. ◆ ResizeOffScreenDevice(). Bool_t TX11GLManager::ResizeOffScreenDevice ; (; Int_t ; devInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Resize off screen device. ; Implements TGLManager.; Definition at line 395 of file TX11GL.cxx. ◆ SelectManip(). Bool_t TX11GLManager::SelectManip ; (; TVirtualGLManip * ; manip, . const TGLCamera * ; camera, . const TGLRect * ; rect, . const TGLBoundingBox * ; sceneBox . ). overridevirtual . Select manipulator. ; Implements TGLManager.; Definition at line 559 of file TX11GL.cxx. ◆ SelectOffScreenDevice(). void TX11GLManager::SelectOffScreenDevice ; (; Int_t ; devInd). overridevirtual . Selects off-screen device to make it accessible by gVirtualX. ; Implements TGLManager.; Definition at line 433 of file TX11GL.cxx. ◆ Streamer(). void TX11GLManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLManager. ◆ StreamerNVirtual(). void TX11GLManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file TX11GL.h. Member Data Documentation. ◆ fPimpl. TX11GLImpl* TX11GLManager::fPimpl. private . Definition at line 37 of file TX11GL.h. Libraries for TX11GLManager:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TX11GL.h; graf3d/gl/src/TX11GL.cxx. TX11GLManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTX11GLManager.html:20356,Guid,Guide,20356,doc/master/classTX11GLManager.html,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html,1,['Guid'],['Guide']
Usability,"LMultiRootFinder::Solve ; (; const double * ; x, . int ; maxIter = 0, . double ; absTol = 0, . double ; relTol = 0 . ). Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ; Definition at line 224 of file GSLMultiRootFinder.cxx. ◆ Status(). int ROOT::Math::GSLMultiRootFinder::Status ; (; ); const. inline . Return the status of last root finding. ; Definition at line 233 of file GSLMultiRootFinder.h. ◆ X(). const double * ROOT::Math::GSLMultiRootFinder::X ; (; ); const. return the root X values solving the system ; Definition at line 135 of file GSLMultiRootFinder.cxx. Member Data Documentation. ◆ fFunctions. std::vector<ROOT::Math::IMultiGenFunction *> ROOT::Math::GSLMultiRootFinder::fFunctions. private . Definition at line 287 of file GSLMultiRootFinder.h. ◆ fIter. int ROOT::Math::GSLMultiRootFinder::fIter. private . Definition at line 276 of file GSLMultiRootFinder.h. ◆ fPrintLevel. int ROOT::Math::GSLMultiRootFinder::fPrintLevel. private . Definition at line 278 of file GSLMultiRootFinder.h. ◆ fSolver. GSLMultiRootBaseSolver* ROOT::Math::GSLMultiRootFinder::fSolver. private . Definition at line 286 of file GSLMultiRootFinder.h. ◆ fStatus. int ROOT::Math::GSLMultiRootFinder::fStatus. private . Definition at line 277 of file GSLMultiRootFinder.h. ◆ fType. int ROOT::Math::GSLMultiRootFinder::fType. private . Definition at line 283 of file GSLMultiRootFinder.h. ◆ fUseDerivAlgo. bool ROOT::Math::GSLMultiRootFinder::fUseDerivAlgo. private . Definition at line 284 of file GSLMultiRootFinder.h. Libraries for ROOT::Math::GSLMultiRootFinder:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMultiRootFinder.h; math/mathmore/src/GSLMultiRootFinder.cxx. ROOTMathGSLMultiRootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:13290,Guid,Guide,13290,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['Guid'],['Guide']
Usability,"LPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. virtual voidDeInitGL() const; voidDrawDefaultPlot() const; voidDrawMaplePlot() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidDrawToSelectionBuffer() const; Bool_tHasSections() const; virtual voidInitGL() const; voidSetSurfaceColor() const. Data Members; public:. enum ETF3Style { kDefault; kMaple0; kMaple1; kMaple2; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLTF3Painter.html:1632,Clear,ClearBuffers,1632,root/html532/TGLTF3Painter.html,https://root.cern,https://root.cern/root/html532/TGLTF3Painter.html,1,['Clear'],['ClearBuffers']
Usability,"LSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3874,clear,clearValueDirty,3874,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['clear'],['clearValueDirty']
Usability,"LSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1322 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1323 fState(kHasTClassInit),; 1324 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1325 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1326{; 1327 R__LOCKGUARD(gInterpreterMutex);; 1328 // use info; 1329 Init(name, cversion, &info, isa, dfil, ifil, dl, il, nullptr, silent);; 1330}; 1331 ; 1332////////////////////////////////////////////////////////////////////////////////; 1333/// we found at least one equivalent.; 1334/// let's force a reload; 1335 ; 1336void TClass::ForceReload (TClass* oldcl); 1337{; 1338 TClass::RemoveClass(oldcl);; 1339 ; 1340 if (oldcl->CanIgnoreTObjectStreamer()) {; 1341 IgnoreTObjectStreamer();; 1342 }; 1343 ; 1344 TVirtualStreamerInfo *info;; 1345 TIter next(oldcl->GetStreamerInfos());; 1346 while ((info = (TVirtualStreamerInfo*)next())) {; 1347 info->Clear(""build"");; 1348 info->SetClass(this);; 1349 if (IsSyntheticPair()) {; 1350 // Some pair's StreamerInfo were inappropriately marked as versioned; 1351 info->SetClassVersion(1);; 1352 // There is already a TStreamerInfo put there by the synthetic; 1353 // creation.; 1354 fStreamerInfo->Add(info);; 1355 } else {; 1356 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1357 }; 1358 }; 1359 oldcl->fStreamerInfo->Clear();; 1360 ; 1361 oldcl->ReplaceWith(this);; 1362 delete oldcl;; 1363}; 1364 ; 1365////////////////////////////////////////////////////////////////////////////////; 1366/// Initialize a TClass object. This object contains the full dictionary; 1367/// of a class. It has list to baseclasses, datamembers and methods.; 1368 ; 1369void TClass::Init(const char *name, Version_t cversion,; 1370 const std::type_info *typeinfo, TVirtualIsAProxy *isa,; 1371 const char *dfil, const char *ifil, Int_t dl, Int_t il,; 1372 Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:52292,Clear,Clear,52292,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,"LSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1389 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1390 fState(kHasTClassInit),; 1391 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1392 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1393{; 1394 R__LOCKGUARD(gInterpreterMutex);; 1395 // use info; 1396 Init(name, cversion, &info, isa, dfil, ifil, dl, il, nullptr, silent);; 1397}; 1398 ; 1399////////////////////////////////////////////////////////////////////////////////; 1400/// we found at least one equivalent.; 1401/// let's force a reload; 1402 ; 1403void TClass::ForceReload (TClass* oldcl); 1404{; 1405 TClass::RemoveClass(oldcl);; 1406 ; 1407 if (oldcl->CanIgnoreTObjectStreamer()) {; 1408 IgnoreTObjectStreamer();; 1409 }; 1410 ; 1411 TVirtualStreamerInfo *info;; 1412 TIter next(oldcl->GetStreamerInfos());; 1413 while ((info = (TVirtualStreamerInfo*)next())) {; 1414 info->Clear(""build"");; 1415 info->SetClass(this);; 1416 if (IsSyntheticPair()) {; 1417 // Some pair's StreamerInfo were inappropriately marked as versioned; 1418 info->SetClassVersion(1);; 1419 // There is already a TStreamerInfo put there by the synthetic; 1420 // creation.; 1421 fStreamerInfo->Add(info);; 1422 } else {; 1423 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1424 }; 1425 }; 1426 oldcl->fStreamerInfo->Clear();; 1427 ; 1428 oldcl->ReplaceWith(this);; 1429 delete oldcl;; 1430}; 1431 ; 1432////////////////////////////////////////////////////////////////////////////////; 1433/// Initialize a TClass object. This object contains the full dictionary; 1434/// of a class. It has list to baseclasses, datamembers and methods.; 1435 ; 1436void TClass::Init(const char *name, Version_t cversion,; 1437 const std::type_info *typeinfo, TVirtualIsAProxy *isa,; 1438 const char *dfil, const char *ifil, Int_t dl, Int_t il,; 1439 Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:55043,Clear,Clear,55043,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,"LSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooThresholdCategory.html:2177,clear,clearValueDirty,2177,root/html528/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html528/RooThresholdCategory.html,2,['clear'],['clearValueDirty']
Usability,"LSE); Constructor p.d.f implementing sum_i [ coef_i * func_i ], if N_coef==N_func; or sum_i [ coef_i * func_i ] + (1 - sum_i [ coef_i ] )* func_N if Ncoef==N_func-1. All coefficients and functions are allowed to be negative; but the sum is not, which is enforced at runtime. RooRealSumPdf(const RooRealSumPdf& other, const char* name = 0); Copy constructor. ~RooRealSumPdf(); Destructor. RooAbsPdf::ExtendMode extendMode() const. Double_t evaluate() const; Calculate the current value. Bool_t checkObservables(const RooArgSet* nset) const; Check if FUNC is valid for given normalization set.; Coeffient and FUNC must be non-overlapping, but func-coefficient; pairs may overlap each other. In the present implementation, coefficients may not be observables or derive; from observables. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by deferring integration of component; functions to integrators of components. Double_t expectedEvents(const RooArgSet* nset) const; try something simple. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooRealSumPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. const RooArgList& funcList() const; { return _funcList ; }. const RooArgList& coefList() const; { return _coefList ; }. Double_t expectedEvents(const RooArgSet* nset) const. » Last changed: Sat Oct 9 06:58:41 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:42530,simpl,simple,42530,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,2,"['intuit', 'simpl']","['intuitively', 'simple']"
Usability,"LSE;; 378}; 379 ; 380////////////////////////////////////////////////////////////////////////////////; 381/// Returns the current RGB value for the pixel in the XColor structure.; 382 ; 383void TGX11::QueryColors(Colormap cmap, RXColor *color, Int_t ncolors); 384{; 385 if (fRedDiv == -1) {; 386 XQueryColors((Display*)fDisplay, cmap, color, ncolors);; 387 } else {; 388 ULong_t r, g, b;; 389 for (Int_t i = 0; i < ncolors; i++) {; 390 r = (color[i].pixel & fVisual->red_mask) >> fRedShift;; 391 color[i].red = UShort_t(r*kBIGGEST_RGB_VALUE/(fVisual->red_mask >> fRedShift));; 392 ; 393 g = (color[i].pixel & fVisual->green_mask) >> fGreenShift;; 394 color[i].green = UShort_t(g*kBIGGEST_RGB_VALUE/(fVisual->green_mask >> fGreenShift));; 395 ; 396 b = (color[i].pixel & fVisual->blue_mask) >> fBlueShift;; 397 color[i].blue = UShort_t(b*kBIGGEST_RGB_VALUE/(fVisual->blue_mask >> fBlueShift));; 398 ; 399 color[i].flags = DoRed | DoGreen | DoBlue;; 400 }; 401 }; 402}; 403 ; 404////////////////////////////////////////////////////////////////////////////////; 405/// Clear the pixmap pix.; 406 ; 407void TGX11::ClearPixmap(Drawable *pix); 408{; 409 Window root;; 410 int xx, yy;; 411 unsigned int ww, hh, border, depth;; 412 XGetGeometry((Display*)fDisplay, *pix, &root, &xx, &yy, &ww, &hh, &border, &depth);; 413 SetColor(gGCpxmp, 0);; 414 XFillRectangle((Display*)fDisplay, *pix, *gGCpxmp, 0 ,0 ,ww ,hh);; 415 SetColor(gGCpxmp, 1);; 416 XFlush((Display*)fDisplay);; 417}; 418 ; 419////////////////////////////////////////////////////////////////////////////////; 420/// Clear current window.; 421 ; 422void TGX11::ClearWindow(); 423{; 424 if (!gCws->fIsPixmap && !gCws->fDoubleBuffer) {; 425 XSetWindowBackground((Display*)fDisplay, gCws->fDrawing, GetColor(0).fPixel);; 426 XClearWindow((Display*)fDisplay, gCws->fDrawing);; 427 XFlush((Display*)fDisplay);; 428 } else {; 429 SetColor(gGCpxmp, 0);; 430 XFillRectangle((Display*)fDisplay, gCws->fDrawing, *gGCpxmp,; 431 0, 0, gCws->fWidth, gCws->fHe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:13182,Clear,Clear,13182,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['Clear'],['Clear']
Usability,"LScenePad.cxx. ◆ ValidateObjectBuffer(). Int_t TGLScenePad::ValidateObjectBuffer ; (; const TBuffer3D & ; buffer, . Bool_t ; includeRaw . ); const. protected . Validate if the passed 'buffer' contains all sections we require to add object. ; Returns Int_t combination of TBuffer::ESection flags still required - or TBuffer3D::kNone if buffer is valid. If 'includeRaw' is kTRUE check for kRaw/kRawSizes - skip otherwise. See base/src/TVirtualViewer3D.cxx for description of viewer architecture ; Definition at line 543 of file TGLScenePad.cxx. Member Data Documentation. ◆ fAcceptedPhysicals. Int_t TGLScenePad::fAcceptedPhysicals. protected . last physical ID that was processed in AddObject() ; Definition at line 39 of file TGLScenePad.h. ◆ fComposite. TGLFaceSet* TGLScenePad::fComposite. mutableprotected . Definition at line 49 of file TGLScenePad.h. ◆ fCSLevel. UInt_t TGLScenePad::fCSLevel. protected . Paritally created composite. ; Definition at line 50 of file TGLScenePad.h. ◆ fCSTokens. std::vector<CSPart_t> TGLScenePad::fCSTokens. protected . Definition at line 51 of file TGLScenePad.h. ◆ fInternalPIDs. Bool_t TGLScenePad::fInternalPIDs. protected . Definition at line 36 of file TGLScenePad.h. ◆ fLastPID. UInt_t TGLScenePad::fLastPID. protected . next internal physical ID (from 1 - 0 reserved) ; Definition at line 38 of file TGLScenePad.h. ◆ fNextInternalPID. UInt_t TGLScenePad::fNextInternalPID. protected . using internal physical IDs ; Definition at line 37 of file TGLScenePad.h. ◆ fPad. TVirtualPad* TGLScenePad::fPad. protected . Definition at line 33 of file TGLScenePad.h. ◆ fSmartRefresh. Bool_t TGLScenePad::fSmartRefresh. protected . Definition at line 56 of file TGLScenePad.h. Libraries for TGLScenePad:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLScenePad.h; graf3d/gl/src/TGLScenePad.cxx. TGLScenePad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:35364,Guid,Guide,35364,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['Guid'],['Guide']
Usability,"Label(xMin,yMin,xMax+0.05,yMax,""SURF1CYL"",""brNDC"");; lego->Update();; ; //surface options; auto surf = new TCanvas(""surfopt"",""surface options"",200,200,800,600);; surf->Divide(2,2);; surf->SetFillColor(cancolor);; surf->cd(1);; h2->Draw(""surf1""); pl.DrawPaveLabel(xMin,yMin,xMax,yMax,""SURF1"",""brNDC"");; surf->cd(2);; h2->Draw(""surf2z""); pl.DrawPaveLabel(xMin,yMin,xMax,yMax,""SURF2Z"",""brNDC"");; surf->cd(3);; h2->Draw(""surf3""); pl.DrawPaveLabel(xMin,yMin,xMax,yMax,""SURF3"",""brNDC"");; surf->cd(4);; h2->Draw(""surf4""); pl.DrawPaveLabel(xMin,yMin,xMax,yMax,""SURF4"",""brNDC"");; surf->Update();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::DrawPaveLabelvirtual TPaveLabel * DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""")Draw this pavelabel with new coordinates.Definition TPaveLabel.cxx:100; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetFrameFillColorvoid SetFrameFillColor(Color_t color=1)Definition TStyle.h:372; TStyle::SetCanvasColorvoid SetCanvasColor(Color_t color=19)Definition TStyle.h:343; legovoid lego()Definition lego.C:31; AuthorRene Brun ; Definition in file draw2dopt.C. tutorialshistdraw2dopt.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/draw2dopt_8C.html:4530,Guid,Guide,4530,doc/master/draw2dopt_8C.html,https://root.cern,https://root.cern/doc/master/draw2dopt_8C.html,1,['Guid'],['Guide']
Usability,"LayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:34683,simpl,simple,34683,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"LayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete descri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:45499,learn,learning,45499,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"");; // Training strategies.; TString trainingString1(""LearningRate=1e-3,Momentum=0.0,Repetitions=1,""; ""ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,MaxEpochs=20""; ""DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"");; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString += trainingString1; // + ""|"" + trainingString2; ; // General Options.; TString dnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER:RandomSeed=0"");; ; dnnOptions.Append("":"");; dnnOptions.Append(inputLayoutString);; dnnOptions.Append("":"");; dnnOptions.Append(layoutString);; dnnOptions.Append("":"");; dnnOptions.Append(trainingStrategyString);; dnnOptions.Append("":"");; dnnOptions.Append(archString);; ; TString dnnName = ""TMVA_DNN"";; factory->BookMethod(dataloader, TMVA::Types::kDL, dnnName, dnnOptions);; }; ; /**; ## Book Keras recurrent models; ; Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; **/; ; if (useKeras) {; ; for (int i = 0; i < 3; i++) {; ; if (use_rnn_type[i]) {; ; TString modelName = TString::Format(""model_%s.h5"", rnn_types[i].c_str());; TString trainedModelName = TString::Format(""trained_model_%s.h5"", rnn_types[i].c_str());; ; Info(""TMVA_RNN_Classification"", ""Building recurrent keras model using a %s layer"", rnn_types[i].c_str());; // create python script which can be executed; // create 2 conv2d layer + maxpool + dense; TMacro m;; m.AddLine(""import tensorflow"");; m.AddLine(""from tensorflow.keras.models import Sequential"");; m.AddLine(""from tensorflow.keras.optimizers import Adam"");; m.AddLine(""from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, ""; ""BatchNormalization"");; m.AddLine("""");; m.AddLine(""model = Sequential() "");; m.AddLine(""model.add(Reshape((10, 30), input_shape = (10*30, )))"");; // add recurrent neural network depending on type / Use option t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:68076,Simpl,SimpleRNN,68076,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Simpl'],['SimpleRNN']
Usability,"LayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHtml(const TGWindow* p, int w, int h, int id = -1); HTML Widget constructor. ~TGHtml(); HTML widget destructor. void UpdateBackgroundStart(); Start background update. void FreeColor(ColorStruct_t* color); Free system color. ColorStruct_t * AllocColor(const char* name); Allocate system color by name. ColorStruct_t * AllocColorByValue(ColorStruct_t* color); Allocate system color by value. void Clear(Option_t* = """"); Erase all HTML from this widget and clear the screen. This is; typically done before loading a new document. int ParseText(char* text, const char* index = 0); Appends (or insert at the specified position) the given HTML text to the; end of any HTML text that may have been inserted by prior calls to this; command. Then it runs the tokenizer, parser and layout engine as far as; possible with the text that is available. The display is updated; appropriately. void SetTableRelief(int relief); Sets relief mode of html table. void SetRuleRelief(int relief); Sets relief mode of html rule. void UnderlineLinks(int onoff); Set/reset html links underline. void SetBaseUri(const char* uri); Sets base URI. int GotoAnchor(const char* name); Go to anchor position. const char * GetUid(const char* string); Given a string, this procedure returns a unique identifier for the; string. This procedure returns a pointer to a new char string corresponding to; the ""string"" argument. The new string has a value identical to st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:33163,Clear,Clear,33163,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"LeafElement::PrintValue ; (; Int_t ; i = 0); const. inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 71 of file TLeafElement.h. ◆ ReadBasketFast(). bool TLeafElement::ReadBasketFast ; (; TBuffer & ; input_buf, . Long64_t ; N . ). overridevirtual . Deserialize N events from an input buffer. ; Reimplemented from TLeaf.; Definition at line 144 of file TLeafElement.cxx. ◆ SetLeafCount(). void TLeafElement::SetLeafCount ; (; TLeaf * ; leaf). inlineoverridevirtual . Set the leaf count of this leaf. ; Reimplemented from TLeaf.; Definition at line 72 of file TLeafElement.h. ◆ Streamer(). void TLeafElement::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafElement::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TLeafElement.h. Member Data Documentation. ◆ fAbsAddress. char* TLeafElement::fAbsAddress. protected . ! Absolute leaf Address ; Definition at line 35 of file TLeafElement.h. ◆ fDataTypeCache. std::atomic<EDataType> TLeafElement::fDataTypeCache {EDataType::kOther_t}. mutableprotected . ! Cache of the EDataType of deserialization. ; Definition at line 39 of file TLeafElement.h. ◆ fDeserializeTypeCache. std::atomic<DeserializeType> TLeafElement::fDeserializeTypeCache { DeserializeType::kInvalid }. mutableprotected . ! Cache of the type of deserialization. ; Definition at line 38 of file TLeafElement.h. ◆ fID. Int_t TLeafElement::fID. protected . element serial number in fInfo ; Definition at line 36 of file TLeafElement.h. ◆ fType. Int_t TLeafElement::fType. protected . leaf type ; Definition at line 37 of file TLeafElement.h. Libraries for TLeafElement:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafElement.h; tree/tree/src/TLeafElement.cxx. TLeafElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafElement.html:24092,Guid,Guide,24092,doc/master/classTLeafElement.html,https://root.cern,https://root.cern/doc/master/classTLeafElement.html,1,['Guid'],['Guide']
Usability,"LegendEntry::GetObjectvirtual TObject * GetObject() constDefinition TLegendEntry.h:33; TLegendEntry::SetLabelvirtual void SetLabel(const char *label="""")Definition TLegendEntry.h:37; TLegendEntry::fObjectTObject * fObjectpointer to object being represented by this entryDefinition TLegendEntry.h:43; TLegendEntry::SetOptionvirtual void SetOption(Option_t *option=""lpf"")Definition TLegendEntry.h:40; TLegendEntry::TLegendEntryTLegendEntry()TLegendEntry do-nothing default constructor.Definition TLegendEntry.cxx:30; TLegendEntry::SaveEntryvirtual void SaveEntry(std::ostream &out, const char *name)Save this TLegendEntry as C++ statements on output stream out to be used with the SaveAs ....Definition TLegendEntry.cxx:114; TLegendEntry::~TLegendEntry~TLegendEntry() overrideTLegendEntry default destructor.Definition TLegendEntry.cxx:72; TLegendEntry::GetLabelvirtual const char * GetLabel() constDefinition TLegendEntry.h:32; TLegendEntry::operator=TLegendEntry & operator=(const TLegendEntry &)=delete; TLegendEntry::fLabelTString fLabelText associated with the entry, will become latex.Definition TLegendEntry.h:44; TLegendEntry::SetObjectvirtual void SetObject(TObject *obj)(re)set the obj pointed to by this entryDefinition TLegendEntry.cxx:138; TLegendEntry::Copyvoid Copy(TObject &obj) const overridecopy this TLegendEntry into objDefinition TLegendEntry.cxx:80; TLegendEntry::Printvoid Print(Option_t *option="""") const overridedump this TLegendEntry to std::coutDefinition TLegendEntry.cxx:95; TLegendEntry::fOptionTString fOptionOptions associated with this entry.Definition TLegendEntry.h:45; TLegendEntry::GetOptionOption_t * GetOption() const overrideDefinition TLegendEntry.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376. graf2dgrafincTLegendEntry.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegendEntry_8h_source.html:4857,Guid,Guide,4857,doc/master/TLegendEntry_8h_source.html,https://root.cern,https://root.cern/doc/master/TLegendEntry_8h_source.html,1,['Guid'],['Guide']
Usability,"Libraries. Function documentation; TBinomialEfficiencyFitter(); default constructor. TBinomialEfficiencyFitter(const TH1* numerator, const TH1* denominator); Constructor. Note that no objects are copied, so it is up to the user to ensure that the; histogram pointers remain valid. Both histograms need to be ""consistent"". This is not checked here, but in; TBinomialEfficiencyFitter::Fit(). ~TBinomialEfficiencyFitter(); destructor. void Set(const TH1* numerator, const TH1* denominator); Initialize with a new set of inputs. void SetPrecision(Double_t epsilon); Set the required integration precision, see TF1::Integral(). TVirtualFitter* GetFitter(); static: Provide access to the underlying fitter object.; This may be useful e.g. for the retrieval of additional information (such; as the output covariance matrix of the fit). Int_t Fit(TF1* f1, Option_t* option = """"); Carry out the fit of the given function to the given histograms. If option ""I"" is used, the fit function will be averaged over the; bin (the default is to evaluate it simply at the bin center). If option ""R"" is used, the fit range will be taken from the fit; function (the default is to use the entire histogram). Note that all parameter values, limits, and step sizes are copied; from the input fit function f1 (so they should be set before calling; this method. This is particularly relevant for the step sizes, taken; to be the ""error"" set on input, as a null step size usually fixes the; corresponding parameter. That is protected against, but in such cases; an arbitrary starting step size will be used, and the reliability of; the fit should be questioned). If parameters are to be fixed, this; should be done by specifying non-null parameter limits, with lower; limits larger than upper limits. On output, f1 contains the fitted parameters and errors, as well as; the number of degrees of freedom, and the goodness-of-fit estimator; as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437. void ComputeFCN(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBinomialEfficiencyFitter.html:9624,simpl,simply,9624,root/html526/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html526/TBinomialEfficiencyFitter.html,5,['simpl'],['simply']
Usability,"License along with this library; if not, write to the Free; 20Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,; 21MA 02110-1301 USA; 22******************************************************************************/; 23 ; 24/*******************************************************************************; 25* *; 26* Simple RSA public key code. *; 27* Adaptation in library for ROOT by G. Ganis, July 2003 *; 28* (gerardo.ganis@cern.ch) *; 29* *; 30*******************************************************************************/; 31 ; 32#include <stdio.h>; 33#include <string.h>; 34#include <ctype.h>; 35#include <stdlib.h>; 36#include <errno.h>; 37 ; 38#include ""rsaaux.h""; 39#include ""rsalib.h""; 40 ; 41static int g_clear_siz; /* clear-text blocksize */; 42static int g_enc_siz; /* encoded blocksize */; 43 /* g_clear_siz < g_enc_siz */; 44 ; 45int gLog = 0;; 46int kMAXT = 100;; 47 ; 48rsa_NUMBER rsa_genprim(int len, int prob); 49{; 50 rsa_NUMBER a_three,a_four;; 51 rsa_NUMBER prim;; 52 int i;; 53 ; 54 a_add( &a_one, &a_two, &a_three );; 55 a_add( &a_two, &a_two, &a_four );; 56 ; 57 /* This is done elsewhere to allow different initialization of; 58 rand seed (GGa - Sep 15, 2003) */; 59 /* init_rnd(); */; 60 ; 61 do {; 62 gen_number( len, &prim );; 63 } while ( !prim.n_len );; 64 ; 65 a_mult( &prim, &a_two, &prim );; 66 a_mult( &prim, &a_three, &prim );; 67 a_add( &prim, &a_one, &prim );; 68 ; 69 for (i=1 ;; i++) {; 70 ; 71 if (p_prim( &prim, prob )); 72 break;; 73 if (i % 2); 74 a_add( &prim, &a_four, &prim );; 75 else; 76 a_add( &prim, &a_two, &prim );; 77 }; 78 ; 79 return prim;; 80}; 81 ; 82int rsa_genrsa(rsa_NUMBER p1, rsa_NUMBER p2, rsa_NUMBER *n, rsa_NUMBER *e, rsa_NUMBER *d); 83{; 84 rsa_NUMBER phi, *max_p;; 85 int len;; 86 int ii, jj;; 87 ; 88 if ( !a_cmp( &p1, &p2) ) return 1;; 89 ; 90 if (a_cmp( &p1, &p2) > 0); 91 max_p = &p1;; 92 else; 93 max_p = &p2;; 94 ; 95 ; 96 a_mult( &p1, &p2, n );; 97 a_sub( &p1, &a_one, &phi );; 98 a_sub( &p2, &a_one, e );; 99",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rsalib_8cxx_source.html:1735,clear,clear-text,1735,doc/master/rsalib_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rsalib_8cxx_source.html,1,['clear'],['clear-text']
Usability,"Limit <= 0, wait for ever. ; Definition at line 43 of file TLockFile.cxx. ◆ ~TLockFile(). TLockFile::~TLockFile ; (; ). override . Destructor. Releases the lock. ; Definition at line 58 of file TLockFile.cxx. Member Function Documentation. ◆ Class(). static TClass * TLockFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLockFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLockFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 34 of file TLockFile.h. ◆ DeclFileName(). static const char * TLockFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 34 of file TLockFile.h. ◆ IsA(). TClass * TLockFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 34 of file TLockFile.h. ◆ Lock(). Bool_t TLockFile::Lock ; (; const char * ; path, . Int_t ; timeLimit . ). protected . Internal function that locks with the given path. ; Definition at line 69 of file TLockFile.cxx. ◆ operator=(). TLockFile & TLockFile::operator= ; (; const TLockFile & ; ). privatedelete . ◆ Streamer(). void TLockFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TLockFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 34 of file TLockFile.h. Member Data Documentation. ◆ fPath. TString TLockFile::fPath. protected . Path to file holding the lock. ; Definition at line 26 of file TLockFile.h. Libraries for TLockFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TLockFile.h; io/io/src/TLockFile.cxx. TLockFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLockFile.html:13078,Guid,Guide,13078,doc/master/classTLockFile.html,https://root.cern,https://root.cern/doc/master/classTLockFile.html,1,['Guid'],['Guide']
Usability,LinTransBinning. RooParamBinning. RooRangeBinning. RooUniformBinning. RooAbsData; ←. RooDataHist. RooDataSet. RooTreeData. RooAbsDataStore; ←. RooCompositeDataStore. RooTreeDataStore. RooVectorDataStore. RooAbsGenContext; ←. RooAddGenContext. RooBinnedGenContext. RooConvGenContext. RooEffGenContext. RooGenContext. RooProdGenContext. RooSimGenContext. RooSimSplitGenContext. RooAbsMCStudyModule; ←. RooChi2MCSModule. RooDLLSignificanceMCSModule. RooRandomizeParamMCSModule. RooStats::UpperLimitMCSModule. RooAbsNumGenerator; ←. RooAcceptReject. RooFoamGenerator. RooAbsStudy; ←. RooGenFitStudy. RooStats::ToyMCStudy. RooArgProxy; ←. RooCategoryProxy. RooRealProxy. RooClassFactory. RooCmdArg. RooCustomizer. RooDouble. RooFactoryWSTool. RooFitResult. RooInt. RooMCStudy. RooMapCatEntry. RooNameReg. RooPlot. RooSimWSTool. RooSimWSTool::SplitRule. RooStats::BayesianCalculator. RooStats::ConfInterval; ←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::HLFactory. RooStats::HistFactory::Measurement. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestResult; ←. RooStats::HybridResult. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::ModelConfig. RooStats::SPlot. RooStats::SamplingDistPlot; ←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::ToyMCPayload. RooStudyManager. RooStudyPackage. RooTObjWrap. RooTable; ←. Roo1DTable. RooUnitTest. RooWorkspace. TAttParticle. TAxis. TAxis3D. TBenchmark. TBranch; ←. TBranchClones. TBranchElement. TBranchObject. TBranchRef. TBranchSTL. THbookBranch. TBrowser. TBrowserPlugin. TChainElement. TClassTree. TColor; ←. TColorGradient; ←. TLinearGradient. TRadialGradient. TColorWheel. TContextMenu; ←. TEveContextMenu. TControlBarButton; ←. TCon,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassHierarchy.html:84494,Simpl,SimpleInterval,84494,root/html534/ClassHierarchy.html,https://root.cern,https://root.cern/root/html534/ClassHierarchy.html,3,['Simpl'],['SimpleInterval']
Usability,LinTransBinning. RooParamBinning. RooRangeBinning. RooUniformBinning. RooAbsData; ←. RooDataHist. RooDataSet. RooTreeData. RooAbsDataStore; ←. RooCompositeDataStore. RooTreeDataStore. RooVectorDataStore. RooAbsGenContext; ←. RooAddGenContext. RooBinnedGenContext. RooConvGenContext. RooEffGenContext. RooGenContext. RooProdGenContext. RooSimGenContext. RooSimSplitGenContext. RooAbsMCStudyModule; ←. RooChi2MCSModule. RooDLLSignificanceMCSModule. RooRandomizeParamMCSModule. RooStats::UpperLimitMCSModule. RooAbsNumGenerator; ←. RooAcceptReject. RooFoamGenerator. RooAbsStudy; ←. RooGenFitStudy. RooStats::ToyMCStudy. RooArgProxy; ←. RooCategoryProxy. RooRealProxy. RooClassFactory. RooCmdArg. RooCustomizer. RooDouble. RooFactoryWSTool. RooFitResult. RooInt. RooMCStudy. RooMapCatEntry. RooNameReg. RooPlot. RooSimWSTool. RooSimWSTool::SplitRule. RooStats::BayesianCalculator. RooStats::ConfInterval; ←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::HLFactory. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestResult; ←. RooStats::HybridResult. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::ModelConfig. RooStats::SPlot. RooStats::SamplingDistPlot; ←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStudyManager. RooStudyPackage. RooTObjWrap. RooTable; ←. Roo1DTable. RooWorkspace. TAttParticle. TAxis. TAxis3D. TBenchmark. TBranch; ←. TBranchClones. TBranchElement. TBranchObject. TBranchRef. TBranchSTL. THbookBranch. TBrowser. TBrowserPlugin. TChainElement. TClassTree. TColor. TColorWheel. TContextMenu. TControlBarButton; ←. TControlBar. TCut. TDSet; ←. TDSetProxy. TDSetElement. TDataSet; ←. TChair; ←. TColumnView. TFileSet. TObjectSet; ←. TVolume. TVolumeView. TTable; ←. TGe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassHierarchy.html:81656,Simpl,SimpleInterval,81656,root/html532/ClassHierarchy.html,https://root.cern,https://root.cern/root/html532/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,"Line(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,rect2);; 11555 }; 11556 c->Clear();; 11557 c->cd();; 11558 TH2 *hp = (TH2*)h3->Project3D(""yx"");; 11559 zaxis->SetRange(first,last);; 11560 if (hp) {; 11561 hp->SetFillColor(38);; 11562 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYX of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11563 else hp->SetTitle(TString::Format(""ProjectionYX, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11564 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11565 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11566 hp->SetZTitle(""Number of Entries"");; 11567 hp->Draw(fShowOption.Data());; 11568 }; 11569 }; 11570 break;; 11571 ; 11572 case 6:; 11573 // ""xz""; 11574 {; 11575 Int_t first = yaxis->GetFirst();; 11576 Int_t last = yaxis->GetLast();; 11577 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11578 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11579 yaxis->SetRange(biny,biny2);; 11580 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11581 if (nbins>1 && rect1[0].GetX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:420040,Clear,Clear,420040,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Line(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,rect2);; 11625 }; 11626 c->Clear();; 11627 c->cd();; 11628 TH2 *hp = (TH2*)h3->Project3D(""xz"");; 11629 yaxis->SetRange(first,last);; 11630 if (hp) {; 11631 hp->SetFillColor(38);; 11632 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXZ of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11633 else hp->SetTitle(TString::Format(""ProjectionXZ, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11634 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11635 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11636 hp->SetZTitle(""Number of Entries"");; 11637 hp->Draw(fShowOption.Data());; 11638 }; 11639 }; 11640 break;; 11641 ; 11642 case 7:; 11643 // ""zx""; 11644 {; 11645 Int_t first = yaxis->GetFirst();; 11646 Int_t last = yaxis->GetLast();; 11647 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11648 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11649 yaxis->SetRange(biny,biny2);; 11650 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11651 if (nbins>1 && rect1[0].GetX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:422933,Clear,Clear,422933,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Line(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,rect2);; 11695 }; 11696 c->Clear();; 11697 c->cd();; 11698 TH2 *hp = (TH2*)h3->Project3D(""zx"");; 11699 yaxis->SetRange(first,last);; 11700 if (hp) {; 11701 hp->SetFillColor(38);; 11702 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZX of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11703 else hp->SetTitle(TString::Format(""ProjectionZX, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11704 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11705 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11706 hp->SetZTitle(""Number of Entries"");; 11707 hp->Draw(fShowOption.Data());; 11708 }; 11709 }; 11710 break;; 11711 ; 11712 case 8:; 11713 // ""yz""; 11714 {; 11715 Int_t first = xaxis->GetFirst();; 11716 Int_t last = xaxis->GetLast();; 11717 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11718 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11719 xaxis->SetRange(binx,binx2);; 11720 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11721 if (nbins>1 && rect1[0].GetX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:425826,Clear,Clear,425826,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Line(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,rect2);; 11765 }; 11766 c->Clear();; 11767 c->cd();; 11768 TH2 *hp = (TH2*)h3->Project3D(""yz"");; 11769 xaxis->SetRange(first,last);; 11770 if (hp) {; 11771 hp->SetFillColor(38);; 11772 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYZ of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11773 else hp->SetTitle(TString::Format(""ProjectionYZ, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11774 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11775 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11776 hp->SetZTitle(""Number of Entries"");; 11777 hp->Draw(fShowOption.Data());; 11778 }; 11779 }; 11780 break;; 11781 ; 11782 case 9:; 11783 // ""zy""; 11784 {; 11785 Int_t first = xaxis->GetFirst();; 11786 Int_t last = xaxis->GetLast();; 11787 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11788 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11789 xaxis->SetRange(binx,binx2);; 11790 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11791 if (nbins>1 && rect1[0].GetX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:428719,Clear,Clear,428719,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Line(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,rect2);; 11835 }; 11836 c->Clear();; 11837 c->cd();; 11838 TH2 *hp = (TH2*)h3->Project3D(""zy"");; 11839 xaxis->SetRange(first,last);; 11840 if (hp) {; 11841 hp->SetFillColor(38);; 11842 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZY of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11843 else hp->SetTitle(TString::Format(""ProjectionZY, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11844 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11845 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11846 hp->SetZTitle(""Number of Entries"");; 11847 hp->Draw(fShowOption.Data());; 11848 }; 11849 }; 11850 break;; 11851 }; 11852 c->Update();; 11853}; kMouseMotion@ kMouseMotionDefinition Buttons.h:23; kWheelUp@ kWheelUpDefinition Buttons.h:18; kButton1Motion@ kButton1MotionDefinition Buttons.h:20; kButton1Up@ kButton1UpDefinition Buttons.h:19; kWheelDown@ kWheelDownDefinition Buttons.h:18; kButton1Down@ kButton1DownDefinition Buttons.h:17; kButton1Locate@ kButton1LocateDefinition Buttons.h:22; kArrowVer@ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:431612,Clear,Clear,431612,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"LinePad->Delete();; 6389 tmpGuideLinePad = nullptr;; 6390 if (guidePadClicked) return;; 6391 }; 6392 ; 6393 // Get Primitives; 6394 prims = gPad->GetListOfPrimitives();; 6395 n = TMath::Min(15,prims->GetSize());; 6396 Int_t lineColor = TColor::GetColor(239, 202, 0);; 6397 ; 6398 TAttBBox2D *cur = dynamic_cast<TAttBBox2D *>( object );; 6399 if (cur) {; 6400 //create invisible TPad above gPad; 6401 if (!tmpGuideLinePad){; 6402 tmpGuideLinePad = new TPad(""tmpGuideLinePad"", ""tmpGuideLinePad"", 0, 0, 1, 1);; 6403 Double_t x1, y1, x2, y2;; 6404 gPad->GetRange(x1, y1, x2, y2);; 6405 tmpGuideLinePad->Range(x1, y1, x2, y2);; 6406 tmpGuideLinePad->SetFillStyle(0);; 6407 tmpGuideLinePad->SetFillColor(0);; 6408 tmpGuideLinePad->Draw();; 6409 tmpGuideLinePad->cd();; 6410 gPad->GetRange(x1, y1, x2, y2);; 6411 }; 6412 if (cling && !log) threshold = 7;; 6413 else threshold = 1;; 6414 ; 6415 Rectangle_t BBox = cur->GetBBox();; 6416 TPoint center = cur->GetBBoxCenter();; 6417 ; 6418 otherDist.clear();; 6419 curDist.clear();; 6420 ; 6421 switch (event) {; 6422 ; 6423 case kButton1Down:; 6424 case kButton1Motion:; 6425 MX = gPad->GetX1() + 0.5 * (gPad->GetX2()-gPad->GetX1());; 6426 MY = gPad->GetY1() + 0.5 * (gPad->GetY2()-gPad->GetY1());; 6427 pMX = gPad->XtoPixel(MX);; 6428 pMY = gPad->YtoPixel(MY);; 6429 // Middlelines; 6430 if (TMath::Abs(pMX-center.GetX())<threshold) {; 6431 if (cling && (!resize)) {; 6432 cur->SetBBoxCenterX(pMX);; 6433 center = cur->GetBBoxCenter();; 6434 BBox = cur->GetBBox();; 6435 center = cur->GetBBoxCenter();; 6436 }; 6437 L = new TLine(MX, gPad->GetY1(), MX, gPad->GetY2());; 6438 L->SetBit(kCanDelete);; 6439 L->SetLineColor(lineColor);; 6440 L->Draw();; 6441 }; 6442 if (TMath::Abs(pMY-center.GetY())<threshold) {; 6443 if (cling && (!resize)) {; 6444 cur->SetBBoxCenterY(pMY);; 6445 center = cur->GetBBoxCenter();; 6446 BBox = cur->GetBBox();; 6447 center = cur->GetBBoxCenter();; 6448 }; 6449 L = new TLine(gPad->GetX1(), MY, gPad->GetX2(), MY);; 6450 L->SetBit(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:211445,clear,clear,211445,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['clear'],['clear']
Usability,"LinesWithAnchor. protected . Definition at line 120 of file TDocParser.h. ◆ fFirstClassDoc. TString TDocParser::fFirstClassDoc. protected . Definition at line 94 of file TDocParser.h. ◆ fgKeywords. std::set< std::string > TDocParser::fgKeywords. staticprotected . Definition at line 125 of file TDocParser.h. ◆ fHtml. THtml* TDocParser::fHtml. protected . Definition at line 86 of file TDocParser.h. ◆ fLastClassDoc. TString TDocParser::fLastClassDoc. protected . Definition at line 95 of file TDocParser.h. ◆ fLineComment. TString TDocParser::fLineComment. protected . Definition at line 91 of file TDocParser.h. ◆ fLineNo. UInt_t TDocParser::fLineNo. protected . Definition at line 88 of file TDocParser.h. ◆ fLineNumber. Long_t TDocParser::fLineNumber. protected . Definition at line 101 of file TDocParser.h. ◆ fLineRaw. TString TDocParser::fLineRaw. protected . Definition at line 89 of file TDocParser.h. ◆ fLineSource. TString TDocParser::fLineSource. protected . Definition at line 92 of file TDocParser.h. ◆ fLineStripped. TString TDocParser::fLineStripped. protected . Definition at line 90 of file TDocParser.h. ◆ fMethodCounts. std::map<std::string , Int_t > TDocParser::fMethodCounts. protected . Definition at line 103 of file TDocParser.h. ◆ fMethods. THashList TDocParser::fMethods[3]. protected . Definition at line 122 of file TDocParser.h. ◆ fParseContext. std::list<UInt_t> TDocParser::fParseContext. protected . Definition at line 105 of file TDocParser.h. ◆ fRecentClass. TClass* TDocParser::fRecentClass. protected . Definition at line 97 of file TDocParser.h. ◆ fSourceInfo. TString TDocParser::fSourceInfo[kNumSourceInfos]. protected . Definition at line 121 of file TDocParser.h. ◆ fSourceInfoTags. TString TDocParser::fSourceInfoTags[kNumSourceInfos]. protected . Definition at line 117 of file TDocParser.h. html/inc/TDocParser.h; html/src/TDocParser.cxx. TDocParser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocParser.html:34318,Guid,Guide,34318,doc/master/classTDocParser.html,https://root.cern,https://root.cern/doc/master/classTDocParser.html,1,['Guid'],['Guide']
Usability,"Link(); lnk; lnk = lnk->Next()) {; 961 TTree* clone = (TTree*) lnk->GetObject();; 962 // clone->ResetBranchAddresses();; 963 ; 964 // Reset only the branch we have set the address of.; 965 CopyAddresses(clone,true);; 966 }; 967 }; 968 // Get rid of our branches, note that this will also release; 969 // any memory allocated by TBranchElement::SetAddress().; 970 fBranches.Delete();; 971 ; 972 // The TBranch destructor is using fDirectory to detect whether it; 973 // owns the TFile that contains its data (See TBranch::~TBranch); 974 fDirectory = nullptr;; 975 ; 976 // FIXME: We must consider what to do with the reset of these if we are a clone.; 977 delete fPlayer;; 978 fPlayer = nullptr;; 979 if (fExternalFriends) {; 980 using namespace ROOT::Detail;; 981 for(auto fetree : TRangeStaticCast<TFriendElement>(*fExternalFriends)); 982 fetree->Reset();; 983 fExternalFriends->Clear(""nodelete"");; 984 SafeDelete(fExternalFriends);; 985 }; 986 if (fFriends) {; 987 fFriends->Delete();; 988 delete fFriends;; 989 fFriends = nullptr;; 990 }; 991 if (fAliases) {; 992 fAliases->Delete();; 993 delete fAliases;; 994 fAliases = nullptr;; 995 }; 996 if (fUserInfo) {; 997 fUserInfo->Delete();; 998 delete fUserInfo;; 999 fUserInfo = nullptr;; 1000 }; 1001 if (fClones) {; 1002 // Clone trees should no longer be removed from fClones when they are deleted.; 1003 {; 1004 R__LOCKGUARD(gROOTMutex);; 1005 gROOT->GetListOfCleanups()->Remove(fClones);; 1006 }; 1007 // Note: fClones does not own its content.; 1008 delete fClones;; 1009 fClones = nullptr;; 1010 }; 1011 if (fEntryList) {; 1012 if (fEntryList->TestBit(kCanDelete) && fEntryList->GetDirectory()==nullptr) {; 1013 // Delete the entry list if it is marked to be deleted and it is not also; 1014 // owned by a directory. (Otherwise we would need to make sure that a; 1015 // TDirectoryFile that has a TTree in it does a 'slow' TList::Delete.; 1016 delete fEntryList;; 1017 fEntryList=nullptr;; 1018 }; 1019 }; 1020 delete fTreeIndex;; 1021 fTreeIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:35681,Clear,Clear,35681,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Clear'],['Clear']
Usability,Link< Type >::TNotifyLink ; (; Type * ; subscriber). inline . Definition at line 132 of file TNotifyLink.h. Member Function Documentation. ◆ Class(). template<class Type > . static TClass * TNotifyLink< Type >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). template<class Type > . static const char * TNotifyLink< Type >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Type > . static constexpr Version_t TNotifyLink< Type >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 145 of file TNotifyLink.h. ◆ DeclFileName(). template<class Type > . static const char * TNotifyLink< Type >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 145 of file TNotifyLink.h. ◆ IsA(). template<class Type > . TClass * TNotifyLink< Type >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 145 of file TNotifyLink.h. ◆ Notify(). template<class Type > . Bool_t TNotifyLink< Type >::Notify ; (; ). inlineoverridevirtual . Call Notify on our subscriber and propagate the call to the next link. ; Reimplemented from TObject.; Definition at line 135 of file TNotifyLink.h. ◆ Streamer(). template<class Type > . void TNotifyLink< Type >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). template<class Type > . void TNotifyLink< Type >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 145 of file TNotifyLink.h. Member Data Documentation. ◆ fSubscriber. template<class Type > . Type* TNotifyLink< Type >::fSubscriber. private . Definition at line 129 of file TNotifyLink.h. core/base/inc/TNotifyLink.h. TNotifyLink. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLink.html:14651,Guid,Guide,14651,doc/master/classTNotifyLink.html,https://root.cern,https://root.cern/doc/master/classTNotifyLink.html,1,['Guid'],['Guide']
Usability,"LinkedList(), const RooCmdArg* formatCmd = 0) const; Internal implementation function of printLatex. Bool_t allInRange(const char* rangeSpec) const; Return true if all contained object report to have their; value inside the specified range. void makeStructureTag(). void makeTypedStructureTag(). TObject* clone(const char* newname) const. TObject* create(const char* newname) const. TObject* Clone(const char* newname = 0) const. void setHashTableSize(Int_t i); Hash table control. Int_t getHashTableSize() const; Return size of internal hash table. Bool_t contains(const RooAbsArg& var) const; Returns true if object with same name as var is contained in this collection. Bool_t containsInstance(const RooAbsArg& var) const; Returns true if var is contained in this collection. TIterator* createIterator(Bool_t dir = kIterForward) const; export subset of THashList interface. RooFIter fwdIterator() const; { return RooFIter(&_list); }. Int_t getSize() const; Return the number of elements in the collection. RooAbsArg * first() const; Return the first element in this collection. void Print(Option_t* options = 0) const; Printing interface (human readable). void setName(const char* name); Set name of collection. const char* GetName() const; Return namer of collection. Bool_t isOwning() const; Does collection own contents?. void releaseOwnership(); { _ownCont = kFALSE ; }. void takeOwnership(); { _ownCont = kTRUE ; }. void sort(Bool_t ascend = kTRUE); { _list.Sort(ascend) ; }. TNamed* structureTag(); { if (_structureTag==0) makeStructureTag() ; return _structureTag ; }. TNamed* typedStructureTag(); { if (_typedStructureTag==0) makeTypedStructureTag() ; return _typedStructureTag ; }. void clearStructureTags(); { _structureTag=0 ; _typedStructureTag = 0 ; }. » Last changed: Tue Jun 2 15:27:00 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsCollection.html:22627,clear,clearStructureTags,22627,root/html604/RooAbsCollection.html,https://root.cern,https://root.cern/root/html604/RooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to input/output. . ‹ Tracks; up; ROOT files ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/OROOT files; ROOT trees; Parallel processing. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:2666,Guid,Guides,2666,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:3862,clear,clearShapeDirty,3862,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,1,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:3806,clear,clearShapeDirty,3806,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:3878,clear,clearShapeDirty,3878,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,8,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStepFunction.html:3671,clear,clearShapeDirty,3671,root/html526/RooStepFunction.html,https://root.cern,https://root.cern/root/html526/RooStepFunction.html,2,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:4338,clear,clearShapeDirty,4338,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,1,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:4053,clear,clearShapeDirty,4053,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:4931,clear,clearShapeDirty,4931,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,2,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataWeightedAverage.html:3796,clear,clearShapeDirty,3796,root/html526/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html526/RooDataWeightedAverage.html,2,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProduct.html:3308,clear,clearShapeDirty,3308,root/html528/RooProduct.html,https://root.cern,https://root.cern/root/html528/RooProduct.html,1,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddition.html:3537,clear,clearShapeDirty,3537,root/html526/RooAddition.html,https://root.cern,https://root.cern/root/html526/RooAddition.html,90,['clear'],['clearShapeDirty']
Usability,"List& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealMPFE.html:4085,clear,clearShapeDirty,4085,root/html526/RooRealMPFE.html,https://root.cern,https://root.cern/root/html526/RooRealMPFE.html,1,['clear'],['clearShapeDirty']
Usability,"List& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Tue Jun 2 15:32:20 2015 » Last generated: 2015-06-02 15:32; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMultiVarGaussian.html:46943,Clear,Clear,46943,root/html604/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html604/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"List& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Tue Jun 30 14:34:14 2015 » Last generated: 2015-06-30 14:34; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian.html:46943,Clear,Clear,46943,root/html602/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"List& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. void generateEvent(Int_t code); Retrieve generator config from cache. void decodeCode(Int_t code, vector<int>& map1, vector<int>& map2) const; Decode analytical integration/generation code into index map of integrated/generated (map2); and non-integrated/generated observables (map1). void blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); Block decomposition of covI according to given maps of observables. RooMultiVarGaussian(); {}. void setAnaIntZ(Double_t z); { _z = z ; }. TObject* clone(const char* newname) const; { return new RooMultiVarGaussian(*this,newname); }. virtual ~RooMultiVarGaussian(); { }. const TMatrixDSym& covarianceMatrix() const; { return _cov ; }. AnaIntData& anaIntData(Int_t code) const. GenData& genData(Int_t code) const. » Last changed: Tue Mar 10 17:18:02 2015 » Last generated: 2015-03-10 17:18; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:45206,Clear,Clear,45206,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"List* wrks = 0); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2002,Clear,ClearCache,2002,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['ClearCache']
Usability,"ListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQCommand; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TQCommand * GetCommand ();  Return a command which is doing redo/undo action. ;  ;  Static Public Member Functions inherited from TList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSeqCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t ObjCompare (TObject *a, TObject *b);  Compare to objects in the collection. Use member Compare() of object a. ;  ; static void QSort (TObject **a, Int_t first, Int_t last);  Sort array of TObject pointers using a quicksort algorithm. ;  ; static void QSort (TObject **a, Int_t nBs, TObject ***b, Int_t first, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:19792,undo,undo,19792,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"ListOfFunctions::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 102 of file TListOfFunctions.h. ◆ Unload() [1/2]. void TListOfFunctions::Unload ; (; ). Mark 'all func' as being unloaded. ; After the unload, the function can no longer be found directly, until the decl can be found again in the interpreter (in which the func object will be reused. ; Definition at line 409 of file TListOfFunctions.cxx. ◆ Unload() [2/2]. void TListOfFunctions::Unload ; (; TFunction * ; func). Mark 'func' as being unloaded. ; After the unload, the function can no longer be found directly, until the decl can be found again in the interpreter (in which the func object will be reused. ; Definition at line 430 of file TListOfFunctions.cxx. ◆ UnmapObject(). void TListOfFunctions::UnmapObject ; (; TObject * ; obj). private . Remove a pair<id, object> from the map of functions and their ids. ; Definition at line 311 of file TListOfFunctions.cxx. Friends And Related Symbol Documentation. ◆ TClass. friend class TClass. friend . Definition at line 37 of file TListOfFunctions.h. Member Data Documentation. ◆ fClass. TClass* TListOfFunctions::fClass. private . Definition at line 38 of file TListOfFunctions.h. ◆ fIds. TExMap* TListOfFunctions::fIds. private . Definition at line 40 of file TListOfFunctions.h. ◆ fLastLoadMarker. ULong64_t TListOfFunctions::fLastLoadMarker. private . Definition at line 43 of file TListOfFunctions.h. ◆ fOverloads. THashTable TListOfFunctions::fOverloads. private . Definition at line 42 of file TListOfFunctions.h. ◆ fUnloaded. THashList* TListOfFunctions::fUnloaded. private . Definition at line 41 of file TListOfFunctions.h. Libraries for TListOfFunctions:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TListOfFunctions.h; core/meta/src/TListOfFunctions.cxx. TListOfFunctions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:35906,Guid,Guide,35906,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['Guid'],['Guide']
Usability,"LoadPlugin()Load the plugin library for this handler.Definition TPluginManager.cxx:293; TProfile::Classstatic TClass * Class(); TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::PoissonDvirtual Double_t PoissonD(Double_t mean)Generates a random number according to a Poisson law.Definition TRandom.cxx:461; TRandom::Poissonvirtual ULong64_t Poisson(Double_t mean)Generates a random integer N according to a Poisson law.Definition TRandom.cxx:404; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:467910,Clear,Clearvoid,467910,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"Long64_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Bool_tStoreResult(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. void*BeforeSet(const char* method, Int_t npar, Int_t sqltype, Bool_t sig = kTRUE, ULong_t size = 0); voidTSQLStatement::ClearError(); long doubleConvertToNumeric(Int_t npar); const char*ConvertToString(Int_t npar); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidFreeBuffers(); Bool_tIsResultSetMode() const; Bool_tIsSetParsMode() const; voidTObject::MakeZombie(); voidSetBuffersNumber(Int_t n); voidTSQLStatement::SetError(Int_t code, const char* msg, const char* method = 0); Bool_tSetSQLParamType(Int_t npar, int sqltype, Bool_t sig, ULong_t sqlsize = 0). private:. TMySQLStatement(const TMySQLStatement&); TMySQLStatement&operator=(const TMySQLStatement&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. MYSQL_BIND*fBind! array of bind data; TMySQLStatement::TParamData*fBuffer! parameter definition structures; Int_tTSQLStatement::fErrorCodeerror code of last operation; TStringTSQLStatement::fErrorMsgerror message of last operation; Bool_tTSQLStatement::fErrorOutenable error output ; Int_tfIterationCoun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMySQLStatement.html:7649,Clear,ClearError,7649,root/html534/TMySQLStatement.html,https://root.cern,https://root.cern/root/html534/TMySQLStatement.html,1,['Clear'],['ClearError']
Usability,"Lsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ; Make the plot of the result of the scan using the observed data.; By default plot CLs or CLsb depending if the flag UseCLs is set for the results that are passed to this instance.; Parameters. optOptions according to following list:; Empty: Return CLs or CLs+b depending on the value of UseCLs.ƒ; ""CLB"": return CLb plot; ""CLS+B"" / ""CLSPLUSB"": return CLs+b plot independently of the flag; ""CLS"": return CLs plot independently of the flag . Definition at line 80 of file HypoTestInverterPlot.cxx. ◆ MakeTestStatPlot(). SamplingDistPlot * HypoTestInverterPlot::MakeTestStatPlot ; (; int ; index, . int ; type = 0, . int ; nbins = 100 . ). Plot the test statistic distributions. ; Parameters. indexIndex of the result stored in HypoTestInverterResult ; typeType of the test (see below) ; nbinsNumber of bins; type =0 null and alt; type = 1 only null (S+B); type = 2 only alt (B) . Definition at line 395 of file HypoTestInverterPlot.cxx. ◆ Streamer(). void RooStats::HypoTestInverterPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HypoTestInverterPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file HypoTestInverterPlot.h. Member Data Documentation. ◆ fResults. HypoTestInverterResult* RooStats::HypoTestInverterPlot::fResults. private . Definition at line 72 of file HypoTestInverterPlot.h. Libraries for RooStats::HypoTestInverterPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestInverterPlot.h; roofit/roostats/src/HypoTestInverterPlot.cxx. RooStatsHypoTestInverterPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:18360,Guid,Guide,18360,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['Guid'],['Guide']
Usability,"MAX;loop++) events[loop] = 0;; for (Long64_t ev=0;ev<nev;ev++) {; if (ev%10 == 0) printf(""building pileup: %lld\n"",ev);; for (loop=0;loop<LOOPMAX;loop++) {; Int_t rev = gRandom->Uniform(LOOPMAX);; T->SetBranchAddress(""event"", &events[loop]);; T->GetEntry(rev);; }; }; }; ; void jets(Int_t nev=100, Int_t npileup=200, Bool_t secondrun = true) {; // Embedding these loads inside the first run of the script is not yet; // supported in v6; // gROOT->ProcessLine("".L $ROOTSYS/tutorials/tree/JetEvent.cxx+"");; write(nev);; read();; pileup(npileup);; }; ; #else; ; //void jets(Int_t nev=100, Int_t npileup=200, Bool_t secondrun);; void jets(Int_t nev=100, Int_t npileup=200) {; TString tutdir = gROOT->GetTutorialDir();; gROOT->ProcessLine("".L "" + tutdir + ""/tree/JetEvent.cxx+"");; gROOT->ProcessLine(""#define JETS_SECOND_RUN yes"");; gROOT->ProcessLine(""#include \"""" __FILE__ ""\"""");; gROOT->ProcessLine(""jets(100,200,true)"");; }; ; #endif; JetEvent.h; f#define f(i)Definition RSha256.hxx:104; Riostream.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TFile.h; nentriesint nentriesDefinition THbookFile.cxx:91; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TSystem.h; TTree.h; JetEventDefinition JetEvent.h:64; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; AuthorRene Brun ; Definition in file jets.C. tutorialstreejets.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_2jets_8C.html:3747,Guid,Guide,3747,doc/master/tree_2jets_8C.html,https://root.cern,https://root.cern/doc/master/tree_2jets_8C.html,1,['Guid'],['Guide']
Usability,MCIntegrationWorkspace.h. ◆ Init(). bool ROOT::Math::GSLPlainIntegrationWorkspace::Init ; (; size_t ; dim). inlineoverridevirtual . initialize the workspace creating the GSL pointer if it is not there ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 247 of file GSLMCIntegrationWorkspace.h. ◆ NDim(). size_t ROOT::Math::GSLPlainIntegrationWorkspace::NDim ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 270 of file GSLMCIntegrationWorkspace.h. ◆ Options(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::GSLPlainIntegrationWorkspace::Options ; (; ); const. inlineoverridevirtual . retrieve option pointer corresponding to parameters create a new object to be managed by the user ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 272 of file GSLMCIntegrationWorkspace.h. ◆ ReInit(). bool ROOT::Math::GSLPlainIntegrationWorkspace::ReInit ; (; ). inlineoverridevirtual . re-initialize an existing the workspace ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 253 of file GSLMCIntegrationWorkspace.h. ◆ SetOptions(). virtual void ROOT::Math::GSLPlainIntegrationWorkspace::SetOptions ; (; const ROOT::Math::IOptions & ; ). inlineoverridevirtual . set options ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 276 of file GSLMCIntegrationWorkspace.h. ◆ Type(). MCIntegration::Type ROOT::Math::GSLPlainIntegrationWorkspace::Type ; (; ); const. inlineoverridevirtual . Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 268 of file GSLMCIntegrationWorkspace.h. Member Data Documentation. ◆ fWs. gsl_monte_plain_state* ROOT::Math::GSLPlainIntegrationWorkspace::fWs. private . Definition at line 281 of file GSLMCIntegrationWorkspace.h. math/mathmore/src/GSLMCIntegrationWorkspace.h. ROOTMathGSLPlainIntegrationWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html:4119,Guid,Guide,4119,doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,1,['Guid'],['Guide']
Usability,MCTrack * ROOT::Experimental::REveVSD::fpK {nullptr}. Definition at line 46 of file REveVSD.hxx. ◆ fpKK. REveRecKink * ROOT::Experimental::REveVSD::fpKK {nullptr}. Definition at line 50 of file REveVSD.hxx. ◆ fpR. REveRecTrack * ROOT::Experimental::REveVSD::fpR {nullptr}. Definition at line 49 of file REveVSD.hxx. ◆ fpV0. REveRecV0 * ROOT::Experimental::REveVSD::fpV0 {nullptr}. Definition at line 51 of file REveVSD.hxx. ◆ fR. REveRecTrack ROOT::Experimental::REveVSD::fR. Definition at line 49 of file REveVSD.hxx. ◆ fTreeC. TTree* ROOT::Experimental::REveVSD::fTreeC {nullptr}. Hits. ; Definition at line 39 of file REveVSD.hxx. ◆ fTreeCC. TTree* ROOT::Experimental::REveVSD::fTreeCC {nullptr}. VO's. ; Definition at line 43 of file REveVSD.hxx. ◆ fTreeGI. TTree* ROOT::Experimental::REveVSD::fTreeGI {nullptr}. Cascades. ; Definition at line 44 of file REveVSD.hxx. ◆ fTreeH. TTree* ROOT::Experimental::REveVSD::fTreeH {nullptr}. Kinematics. ; Definition at line 38 of file REveVSD.hxx. ◆ fTreeK. TTree* ROOT::Experimental::REveVSD::fTreeK {nullptr}. Definition at line 37 of file REveVSD.hxx. ◆ fTreeKK. TTree* ROOT::Experimental::REveVSD::fTreeKK {nullptr}. Reconstructed tracks. ; Definition at line 41 of file REveVSD.hxx. ◆ fTreeR. TTree* ROOT::Experimental::REveVSD::fTreeR {nullptr}. Clusters. ; Definition at line 40 of file REveVSD.hxx. ◆ fTreeV0. TTree* ROOT::Experimental::REveVSD::fTreeV0 {nullptr}. Kinks. ; Definition at line 42 of file REveVSD.hxx. ◆ fV0. REveRecV0 ROOT::Experimental::REveVSD::fV0. Definition at line 51 of file REveVSD.hxx. ◆ fVerbose. Int_t ROOT::Experimental::REveVSD::fVerbose {0}. protected . Definition at line 34 of file REveVSD.hxx. Libraries for ROOT::Experimental::REveVSD:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveVSD.hxx; graf3d/eve7/src/REveVSD.cxx. ROOTExperimentalREveVSD. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:16962,Guid,Guide,16962,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['Guid'],['Guide']
Usability,"MENU ; virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:1908,Clear,ClearUnderflowAndOverflow,1908,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,4,['Clear'],['ClearUnderflowAndOverflow']
Usability,"MTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:2568,progress bar,progress bar,2568,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['progress bar'],['progress bar']
Usability,"MVA.DataLoader('dataset'); 38for branch in signal.GetListOfBranches():; 39 dataloader.AddVariable(branch.GetName()); 40 ; 41dataloader.AddSignalTree(signal, 1.0); 42dataloader.AddBackgroundTree(background, 1.0); 43dataloader.PrepareTrainingAndTestTree(TCut(''),; 44 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); 45 ; 46# Generate model; 47 ; 48# Define model; 49model = Sequential(); 50model.add(Dense(64, activation='relu', input_dim=4)); 51model.add(Dense(2, activation='softmax')); 52 ; 53# Set loss and optimizer; 54model.compile(loss='categorical_crossentropy',; 55 optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); 56 ; 57# Store model to file; 58model.save('modelClassification.h5'); 59model.summary(); 60 ; 61# Book methods; 62factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; 63 '!H:!V:Fisher:VarTransform=D,G'); 64factory.BookMethod(dataloader, TMVA.Types.kPyKeras, 'PyKeras',; 65 'H:!V:VarTransform=D,G:FilenameModel=modelClassification.h5:FilenameTrainedModel=trainedModelClassification.h5:NumEpochs=20:BatchSize=32'); 66 ; 67# Run training, test and evaluation; 68factory.TrainAllMethods(); 69factory.TestAllMethods(); 70factory.EvaluateAllMethods(); TCutA specialized string object used for TTree selections.Definition TCut.h:25; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71. tutorialstmvakerasClassificationKeras.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py_source.html:3246,Guid,Guide,3246,doc/master/ClassificationKeras_8py_source.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py_source.html,1,['Guid'],['Guide']
Usability,"MVA/DataSet.h""; #include ""TMVA/IMethod.h""; #include ""TMVA/MethodBase.h""; #include ""TMVA/DataInputHandler.h""; #include ""TMVA/DataSetManager.h""; #include ""TMVA/DataSetInfo.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/MethodBoost.h""; #include ""TMVA/MethodCategory.h""; #include ""TMVA/ROCCalc.h""; #include ""TMVA/ROCCurve.h""; #include ""TMVA/MsgLogger.h""; #include ""TMVA/VariableInfo.h""; #include ""TMVA/VariableTransform.h""; #include ""TMVA/Results.h""; #include ""TMVA/ResultsClassification.h""; #include ""TMVA/ResultsRegression.h""; #include ""TMVA/ResultsMulticlass.h""; #include <list>; #include <bitset>; #include <set>; #include ""TMVA/Types.h""; #include ""TROOT.h""; #include ""TFile.h""; #include ""TLeaf.h""; #include ""TEventList.h""; #include ""TH2.h""; #include ""TGraph.h""; #include ""TStyle.h""; #include ""TMatrixF.h""; #include ""TMatrixDSym.h""; #include ""TMultiGraph.h""; #include ""TPrincipal.h""; #include ""TMath.h""; #include ""TSystem.h""; #include ""TCanvas.h"". Include dependency graph for Factory.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Macros; #define READXML   kTRUE;  ; #define VIBITS   32;  . Functions; static uint64_t sum (uint64_t i);  . Variables; const Int_t MinNoTrainingEvents = 10;  . Macro Definition Documentation. ◆ READXML. #define READXML   kTRUE. Definition at line 100 of file Factory.cxx. ◆ VIBITS. #define VIBITS   32. Definition at line 103 of file Factory.cxx. Function Documentation. ◆ sum(). static uint64_t sum ; (; uint64_t ; i). static . Definition at line 2345 of file Factory.cxx. Variable Documentation. ◆ MinNoTrainingEvents. const Int_t MinNoTrainingEvents = 10. Definition at line 95 of file Factory.cxx. tmvatmvasrcFactory.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx.html:2313,Guid,Guide,2313,doc/master/tmva_2tmva_2src_2Factory_8cxx.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx.html,1,['Guid'],['Guide']
Usability,"MVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fEpsilon. protected . The Smoothing term used to avoid division by zero. ; Definition at line 51 of file Adagrad.h. ◆ fPastSquaredBiasGradients. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fPastSquaredBiasGradients. protected . The sum of the square of the past bias gradients associated with the deep net. ; Definition at line 56 of file Adagrad.h. ◆ fPastSquaredWeightGradients. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fPastSquaredWeightGradients. protected . The sum of the square of the past weight gradients associated with the deep net. ; Definition at line 54 of file Adagrad.h. ◆ fWorkBiasTensor. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fWorkBiasTensor. protected . working tensor used to keep a temporary copy of bias or bias gradients ; Definition at line 60 of file Adagrad.h. ◆ fWorkWeightTensor. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fWorkWeightTensor. protected . working tensor used to keep a temporary copy of weights or weight gradients ; Definition at line 58 of file Adagrad.h. tmva/tmva/inc/TMVA/DNN/Adagrad.h. TMVADNNTAdagrad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:9837,Guid,Guide,9837,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['Guid'],['Guide']
Usability,"MVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin; gets the low and GetMax gets the high constraint of the variable; the size of ""ranges"" is the number of coefficients which are optimised; Purpose:; Creates a random population with individuals of the size ranges.size(). ~GeneticAlgorithm(); destructor; deletes fLogger. void Init(); calls evolution, but if it is not the first time.; If it's the first time, the random population created by the; constructor is still not evaluated, .. therefore we wait for the; second time init is called. Double_t NewFitness(Double_t oldValue, Double_t newValue); if the ""fitnessFunction"" is called multiple times for one set of; factors (because i.e. each event of a TTree has to be assessed with; each set of Factors proposed by the Genetic Algorithm) the value; of the current calculation has to be added(? or else) to the value; obtained up to now.; example: some chi-square is calculated for every event,; after every event the new chi-square (newValue) has to be simply; added to the oldValue. this function has to be overridden eventually; it might contain only the following return statement.; return oldValue + newValue;. Double_t CalculateFitness(); starts the evaluation of the fitness of all different individuals of; the population. this function calls implicitly (many times) the ""fitnessFunction"" which; has been overridden by the user. void Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html:3598,simpl,simply,3598,root/html528/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html528/TMVA__GeneticAlgorithm.html,6,['simpl'],['simply']
Usability,"Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to input/output. . ‹ Tracks; up; ROOT files ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/OROOT files; ROOT trees; Parallel processing. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:2245,Guid,Guide,2245,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,1,['Guid'],['Guide']
Usability,"Main(). const TGWindow * TGTransientFrame::GetMain ; (; ); const. inline . Definition at line 514 of file TGFrame.h. ◆ IsA(). TClass * TGTransientFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Reimplemented in TGUndockedFrame, TRootDialog, TRootHelpDialog, TProofProgressLog, TNewChainDlg, TNewQueryDlg, and TUploadDataSetDlg.; Definition at line 518 of file TGFrame.h. ◆ operator=(). TGTransientFrame & TGTransientFrame::operator= ; (; const TGTransientFrame & ; ). privatedelete . ◆ SavePrimitive(). void TGTransientFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a transient frame widget as a C++ statement(s) on output stream out. ; Reimplemented from TGMainFrame.; Definition at line 3604 of file TGFrame.cxx. ◆ SaveSource(). void TGTransientFrame::SaveSource ; (; const char * ; filename = ""Rootdlog.C"", . Option_t * ; option = """" . ). overridevirtual . Save the GUI transient frame widget in a C++ macro file. ; Reimplemented from TGMainFrame.; Definition at line 3333 of file TGFrame.cxx. ◆ Streamer(). void TGTransientFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGMainFrame.; Reimplemented in TGUndockedFrame, TRootDialog, TRootHelpDialog, TProofProgressLog, TNewChainDlg, TNewQueryDlg, and TUploadDataSetDlg. ◆ StreamerNVirtual(). void TGTransientFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 518 of file TGFrame.h. Member Data Documentation. ◆ fMain. const TGWindow* TGTransientFrame::fMain. protected . Definition at line 501 of file TGFrame.h. Libraries for TGTransientFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFrame.h; gui/gui/src/TGFrame.cxx. TGTransientFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTransientFrame.html:39381,Guid,Guide,39381,doc/master/classTGTransientFrame.html,https://root.cern,https://root.cern/doc/master/classTGTransientFrame.html,1,['Guid'],['Guide']
Usability,"MainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); Create the undocked (transient) frame. ~TGUndockedFrame(); Delete undocked frame. Puts back dockable frame in its original container. void FixSize(); Fix the size of the undocked frame so it cannot be changed via the WM. void CloseWindow(); Close undocked frame (called via WM close button). TGUndockedFrame(const TGUndockedFrame& ). TGUndockedFrame& operator=(const TGUndockedFrame& ). » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGUndockedFrame.html:23603,undo,undocked,23603,root/html604/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html604/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,"MainFrame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGUndockedFrame(const TGWindow* p = 0, TGDockableFrame* dockable = 0); Create the undocked (transient) frame. ~TGUndockedFrame(); Delete undocked frame. Puts back dockable frame in its original container. void FixSize(); Fix the size of the undocked frame so it cannot be changed via the WM. void CloseWindow(); Close undocked frame (called via WM close button). TGUndockedFrame(const TGUndockedFrame& ). TGUndockedFrame& operator=(const TGUndockedFrame& ). » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGUndockedFrame.html:23603,undo,undocked,23603,root/html602/TGUndockedFrame.html,https://root.cern,https://root.cern/root/html602/TGUndockedFrame.html,4,['undo'],['undocked']
Usability,"MakeClass mode). ;  ; virtual void SetObject (void *objadd);  Set object this branch is pointing to. ;  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; virtual void SetupAddresses ();  If the branch address is not set, we set all addresses starting with the top level parent branch. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool SupportsBulkRead () const;  Returns true if this branch supports bulk IO, false otherwise. ;  ; virtual void UpdateAddress ();  ; virtual void UpdateFile ();  Refresh the value of fDirectory (i.e. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookBranch.html:10351,Clear,Clear,10351,doc/master/classTHbookBranch.html,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html,3,['Clear'],['Clear']
Usability,MakeEdge(GLUhalfEdge *eNext)Definition mesh.c:64; __gl_meshAddEdgeVertexGLUhalfEdge * __gl_meshAddEdgeVertex(GLUhalfEdge *eOrg)Definition mesh.c:441; allocVertexstatic GLUvertex * allocVertex()Definition mesh.c:48; mesh.h; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; EdgePairDefinition mesh.h:155; EdgePair::eSymGLUhalfEdge eSymDefinition mesh.h:155; EdgePair::eGLUhalfEdge eDefinition mesh.h:155; GLUfaceDefinition mesh.h:126; GLUface::markedGLboolean markedDefinition mesh.h:134; GLUface::trailGLUface * trailDefinition mesh.h:133; GLUface::anEdgeGLUhalfEdge * anEdgeDefinition mesh.h:129; GLUface::prevGLUface * prevDefinition mesh.h:128; GLUface::datavoid * dataDefinition mesh.h:130; GLUface::insideGLboolean insideDefinition mesh.h:135; GLUface::nextGLUface * nextDefinition mesh.h:127; GLUhalfEdgeDefinition mesh.h:138; GLUhalfEdge::LnextGLUhalfEdge * LnextDefinition mesh.h:142; GLUhalfEdge::OrgGLUvertex * OrgDefinition mesh.h:143; GLUhalfEdge::OnextGLUhalfEdge * OnextDefinition mesh.h:141; GLUhalfEdge::activeRegionActiveRegion * activeRegionDefinition mesh.h:147; GLUhalfEdge::SymGLUhalfEdge * SymDefinition mesh.h:140; GLUhalfEdge::LfaceGLUface * LfaceDefinition mesh.h:144; GLUhalfEdge::nextGLUhalfEdge * nextDefinition mesh.h:139; GLUhalfEdge::windingint windingDefinition mesh.h:148; GLUmeshDefinition mesh.h:168; GLUmesh::vHeadGLUvertex vHeadDefinition mesh.h:169; GLUmesh::eHeadGLUhalfEdge eHeadDefinition mesh.h:171; GLUmesh::fHeadGLUface fHeadDefinition mesh.h:170; GLUmesh::eHeadSymGLUhalfEdge eHeadSymDefinition mesh.h:172; GLUvertexDefinition mesh.h:114; GLUvertex::anEdgeGLUhalfEdge * anEdgeDefinition mesh.h:117; GLUvertex::nextGLUvertex * nextDefinition mesh.h:115; GLUvertex::datavoid * dataDefinition mesh.h:118; GLUvertex::prevGLUvertex * prevDefinition mesh.h:116. graf3deve7glumesh.c. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c_source.html:28494,Guid,Guide,28494,doc/master/mesh_8c_source.html,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html,1,['Guid'],['Guide']
Usability,"MakeZombie(); virtual voidTDataSet::SetMother(TObject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColumnView.html:11087,simpl,simple,11087,root/html534/TColumnView.html,https://root.cern,https://root.cern/root/html534/TColumnView.html,1,['simpl'],['simple']
Usability,"Manager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoPconEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPgonEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPgonEditor.html:22039,undo,undoing,22039,root/html528/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html528/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"Manager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoPconEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPgonEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPgonEditor.html:22139,undo,undoing,22139,root/html530/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html530/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"Manager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoPconEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoPgonEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPgonEditor.html:22139,undo,undoing,22139,root/html532/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html532/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"Manager.cxx:2010; TGeoManager::IsMatrixTransformBool_t IsMatrixTransform() constDefinition TGeoManager.h:390; TGeoManager::fTimeCutBool_t fTimeCutDefinition TGeoManager.h:85; TGeoManager::SetExportPrecisionstatic void SetExportPrecision(UInt_t prec)Definition TGeoManager.cxx:4336; TGeoManager::AddBorderSurfacevoid AddBorderSurface(TGeoBorderSurface *surf)Add border surface;.Definition TGeoManager.cxx:2067; TGeoManager::NavigatorsMapIt_tNavigatorsMap_t::iterator NavigatorsMapIt_tDefinition TGeoManager.h:113; TGeoManager::SetClippingShapevoid SetClippingShape(TGeoShape *clip)Set a user-defined shape as clipping for ray tracing.Definition TGeoManager.cxx:2366; TGeoManager::SetMatrixReflectionvoid SetMatrixReflection(Bool_t flag=kTRUE)Definition TGeoManager.h:399; TGeoManager::fCurrentVolumeTGeoVolume * fCurrentVolumecurrent navigatorDefinition TGeoManager.h:124; TGeoManager::GetClippingShapeTGeoShape * GetClippingShape() constDefinition TGeoManager.h:206; TGeoManager::ClearOverlapsvoid ClearOverlaps()Clear the list of overlaps.Definition TGeoManager.cxx:1605; TGeoManager::MakeConsTGeoVolume * MakeCons(const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a cone segment shape with given medium.Definition TGeoManager.cxx:3266; TGeoManager::SetStartSafevoid SetStartSafe(Bool_t flag=kTRUE)Definition TGeoManager.h:397; TGeoManager::GetListOfSkinSurfacesTObjArray * GetListOfSkinSurfaces() constDefinition TGeoManager.h:481; TGeoManager::fHashGVolumesTHashList * fHashGVolumeshash list of volumes providing fast searchDefinition TGeoManager.h:137; TGeoManager::GetListOfGDMLMatricesTObjArray * GetListOfGDMLMatrices() constDefinition TGeoManager.h:479; TGeoManager::GetLastSafetyDouble_t GetLastSafety() constDefinition TGeoManager.h:385; TGeoManager::fVisOptionInt_t fVisOptionDefinition TGeoManager.h:71; TGeoManager::fgMutexstatic std::mutex fgMutexDefinit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:48861,Clear,ClearOverlapsvoid,48861,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,3,['Clear'],"['Clear', 'ClearOverlaps', 'ClearOverlapsvoid']"
Usability,"Manager<RooAbsCacheElement>::wireCache(). Data Members; protected:. Bool_t_allowOptimize; static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndex! Last slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSize! Maximum size; vector<RooNormSetCache>RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; vector<RooAbsCacheElement*>RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_size! Actual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 2, Bool_t clearCacheOnServerRedirect = kTRUE, Bool_t allowOptimize = kFALSE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooObjCacheManager.html:4104,clear,clearCacheOnServerRedirect,4104,root/html534/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html534/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"Map_tstd::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_tDefinition RConversionRuleParser.h:27; ROOT::WriteReadRuleFuncvoid WriteReadRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for Read rule, the function name is being written to rule[""funcname""].Definition RConversionRuleParser.cxx:655; ROOT::gReadRulesR__EXTERN SchemaRuleClassMap_t gReadRulesDefinition RConversionRuleParser.h:24; ROOT::SchemaRuleMap_tstd::map< std::string, std::string > SchemaRuleMap_tDefinition RConversionRuleParser.h:22; ROOT::HasValidDataMembersbool HasValidDataMembers(SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string)Check if given rule contains references to valid data members.Definition RConversionRuleParser.cxx:461; ROOT::GetRuleIncludesvoid GetRuleIncludes(std::list< std::string > &result)Get the list of includes specified in the shema rules.Definition RConversionRuleParser.cxx:855; ROOT::WriteReadRawRuleFuncvoid WriteReadRawRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""...Definition RConversionRuleParser.cxx:708; ROOT::ProcessReadRawPragmavoid ProcessReadRawPragma(const char *args, std::string &error_string)I am being called then a readraw pragma is encountered.Definition RConversionRuleParser.cxx:935; ROOT::gReadRawRulesR__EXTERN SchemaRuleClassMap_t gReadRawRulesDefinition RConversionRuleParser.h:25; ROOT::ParseRulebool ParseRule(std::string rule, ROOT::Internal::MembersMap_t &result, std::string &error_string)Parse the schema rule as specified in the LinkDef file.Definition RConversionRuleParser.cxx:103; outputstatic void output(). corefoundationresRConversionRuleParser.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConversionRuleParser_8h_source.html:7320,Guid,Guide,7320,doc/master/RConversionRuleParser_8h_source.html,https://root.cern,https://root.cern/doc/master/RConversionRuleParser_8h_source.html,1,['Guid'],['Guide']
Usability,"Marker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::GetMarkerColorvirtual Color_t GetMarkerColor() constReturn the marker color.Definition TAttMarker.h:31; TAttMarker::fMarkerColorColor_t fMarkerColorMarker color.Definition TAttMarker.h:22; TAttMarker::GetMarkerSizevirtual Size_t GetMarkerSize() constReturn the marker size.Definition TAttMarker.h:33; TAttMarker::GetMarkerLineWidthstatic Width_t GetMarkerLineWidth(Style_t style)Internal helper function that returns the line width of the given marker style (0 = filled marker)Definition TAttMarker.cxx:306; TAttMarker::~TAttMarkervirtual ~TAttMarker()TAttMarker destructor.Definition TAttMarker.cxx:237; TAttMarker::SetMarkerAttributesvirtual void SetMarkerAttributes()Invoke the DialogCanvas Marker attributes.Definition TAttMarker.cxx:367; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::Copyvoid Copy(TAttMarker &attmarker) constCopy this marker attributes to a new TAttMarker.Definition TAttMarker.cxx:244; TAttMarker::TAttMarkerTAttMarker()TAttMarker default constructor.Definition TAttMarker.cxx:211; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TAttMarker::SetMarkerColorAlphavirtual void SetMarkerColorAlpha(Color_t mcolor, Float_t malpha)Set a transparent marker color.Definition TAttMarker.cxx:378; TAttMarker::fMarkerSizeSize_t fMarkerSizeMarker size.Definition TAttMarker.h:24; TAttMarker::fMarkerStyleStyle_t fMarkerStyleMarker style.Definition TAttMarker.h:23; TAttMarker::GetMarkerStyleBasestatic Style_t GetMarkerStyleBase(Style_t style)Internal helper function that returns the corresponding marker style with line width 1 for the given ...Definition TAttMarker.cxx:255. corebaseincTAttMarker.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8h_source.html:8402,Guid,Guide,8402,doc/master/TAttMarker_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8h_source.html,1,['Guid'],['Guide']
Usability,"MarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRFunctionExportThis is a class to pass functions from ROOT to R.Definition TRFunctionExport.h:140; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TVectorT< Double_t >; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Output Processing Minimization.C...; -----------------------------------------; Minimum x=0.99980006 y=0.99960016; Value at minimum =3.9974288e-08; -----------------------------------------; Minimization with the Gradient; Minimum x=0.99980443 y=0.99960838; Value at minimum =3.8273828e-08; ValueDefinition functioncalls.h:15; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 140 of file TRFunctionExport.h. Public Member Functions;  TRFunctionExport ();  Default TRFunctionExport constructor. ;  ;  TRFunctionExport (const TRFunctionExport &fun);  TRFunctionExport copy constructor. ;  ; template<class T > ;  TRFunctionExport (T fun);  TRFunctionExport template constructor that supports a lot of function's prototypes. ;  ;  ~TRFunctionExport ();  Default TRFunctionExport destructor. ;  ; virtual TClass * IsA () const;  ; template<class T > ; void SetFunction (T fun);  function to assign function to export, template method that supports a lot of function's prototypes ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:4753,Guid,Guide,4753,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html,1,['Guid'],['Guide']
Usability,"MarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG4 (VirtualX, SetDashes, GContext_t, gc, Int_t, offset, const char *, dash_list, Int_t, n, 1) VOID_METHOD_ARG4(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char VOID_METHOD_ARG4 (VirtualX, SetRGB, Int_t, cindex, Float_t, r, Float_t, g, Float_t, b, 1) VOID_METHOD_ARG4(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t VOID_METHOD_ARG5 (VirtualX, ChangeProperty, Window_t, id, Atom_t, property, Atom_t, type, UChar_t *, data, Int_t, len, 1) VOID_METHOD_ARG5(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t VOID_METHOD_ARG5 (VirtualX, ClearArea, Window_t, id, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG5(VirtualX;  ; Option_t Option_t TPoint TPoint VOID_METHOD_ARG5 (VirtualX, DrawBox, Int_t, x1, Int_t, y1, Int_t, x2, Int_t, y2, TVirtualX::EBoxMode, mode, 1) VOID_METHOD_ARG6(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t VOID_METHOD_ARG5 (VirtualX, GetGeometry, Int_t, wid, Int_t &, x, Int_t &, y, UInt_t &, w, UInt_t &, h, 1) VOID_METHOD_ARG4(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 (VirtualX, DrawRectangle, Drawable_t, id, GContext_t, gc, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG7(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:36991,Clear,ClearArea,36991,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearArea']
Usability,"Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetVegasParameters ();  . Private Attributes; VegasParameters fParams;  ; gsl_monte_vegas_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLVegasIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLVegasIntegrationWorkspace(). ROOT::Math::GSLVegasIntegrationWorkspace::GSLVegasIntegrationWorkspace ; (; size_t ; dim = 0). inline . Definition at line 89 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Chisq(). double ROOT::Math::GSLVegasIntegrationWorkspace::Chisq ; (; ); const. inline . Definition at line 127 of file GSLMCIntegrationWorkspace.h. ◆ Clear(). void ROOT::Math::GSLVegasIntegrationWorkspace::Clear ; (; ). inlineoverridevirtual . free the workspace deleting the GSL pointer ; Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 109 of file GSLMCIntegrationWorkspace.h. ◆ GetWS(). gsl_monte_vegas_state * ROOT::Math::GSLVegasIntegrationWorkspace::GetWS ; (; ). inline . Definition at line 114 of file GSLMCIntegrationWorkspace.h. ◆ Init(). bool ROOT::Math::GSLVegasIntegrationWorkspace::Init ; (; size_t ; dim). inlineoverridevirtual . initialize the workspace creating the GSL pointer if it is not there ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 95 of file GSLMCIntegrationWorkspace.h. ◆ NDim(). size_t ROOT::Math::GSLVegasIntegrationWorkspace::NDim ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 121 of file GSLMCIntegrationWorkspace.h. ◆ Options(). std::unique_ptr< IOptions > ROOT::Math::GSLVegasIntegrationWorkspace::Options ; (; ); const. inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html:2384,Clear,Clear,2384,doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,1,['Clear'],['Clear']
Usability,"Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::DataOptionsDataOptions()Default constructor: use the default options.Definition DataOptions.h:34; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. mathmathcoreincFitDataOptions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataOptions_8h_source.html:4272,Guid,Guide,4272,doc/master/DataOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html,1,['Guid'],['Guide']
Usability,"Math::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::Log2Double_t Log2(Double_t x)Returns the binary (base-2) logarithm of x.Definition TMath.cxx:107; TMath::BesselK1Double_t BesselK1(Double_t x)Modified Bessel function I_1(x)Definition TMath.cxx:1529; TMath::BubbleHighvoid BubbleHigh(Int_t Narr, Double_t *arr1, Int_t *arr2)Bubble sort variant to obtain the order of an array's elements into an index in order to do more usef...Definition TMath.cxx:1314; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::BesselI1Double_t BesselI1(Double_t x)Modified Bessel function K_0(x)Definition TMath.cxx:1494; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::PoissonIDouble_t PoissonI(Double_t x, Double_t par)Computes the Discrete Poisson distribution function for (x,par).Definition TMath.cxx:615; TMath::CauchyDistDouble_t CauchyDist(Double_t x, Double_t t=0, Double_t s=1)Computes the density of Cauchy distribution at point x by default, standard Cauchy distribution is us...Definition TMath.cxx:2175; TMath::StruveL1Double_t StruveL1(Double_t x)Modified Struve functions of order 0.Definition TMath.cxx:1970; TMath::ASinHDouble_t ASinH(Double_t)Returns the area hyperbolic sine of x.Definition TMath.cxx:67; TMath::LaplaceDistIDouble_t LaplaceDistI(Double_t x, Double_t alpha=0, Double_t beta=1)Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point ...Definition TMath.cxx:2380; TMath::Hash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:122274,Simpl,Simple,122274,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"Math::Signint Sign(const T &x)sign.Definition Functions.h:128; ROOT::Math::Roundint Round(const T &x)round.Definition Functions.h:113; ROOT::Math::Maximumconst T Maximum(const T &lhs, const T &rhs)maximum.Definition Functions.h:86; ROOT::Math::UnitSVector< T, D > Unit(const SVector< T, D > &rhs)Unit.Definition Functions.h:382; ROOT::Math::CrossSVector< T, 3 > Cross(const SVector< T, 3 > &lhs, const SVector< T, 3 > &rhs)Vector Cross Product (only for 3-dim vectors) .Definition Functions.h:323; ROOT::Math::Lmag2T Lmag2(const SVector< T, 4 > &rhs)Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute .Definition Functions.h:276; ROOT::Math::Mag2T Mag2(const SVector< T, D > &rhs)Vector magnitude square Template to compute .Definition Functions.h:230; ROOT::Math::MagT Mag(const SVector< T, D > &rhs)Vector magnitude (Euclidean norm) Compute : .Definition Functions.h:253; ROOT::Math::LmagT Lmag(const SVector< T, 4 > &rhs)Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: .Definition Functions.h:300; xDouble_t x[n]Definition legend1.C:17; I#define I(x, y, z); MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Dot#define Dot(u, v)Definition normal.c:49; ROOT::Math::meta_dot< 0 >::fstatic T f(const A &lhs, const B &rhs, const T &)Definition Functions.h:148; ROOT::Math::meta_dotDefinition Functions.h:134; ROOT::Math::meta_dot::fstatic T f(const A &lhs, const B &rhs, const T &x)Definition Functions.h:136; ROOT::Math::meta_mag< 0 >::fstatic T f(const A &rhs, const T &)Definition Functions.h:213; ROOT::Math::meta_magDefinition Functions.h:199; ROOT::Math::meta_mag::fstatic T f(const A &rhs, const T &x)Definition Functions.h:201. mathsmatrixincMathFunctions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html:17741,Guid,Guide,17741,doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html,https://root.cern,https://root.cern/doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html,1,['Guid'],['Guide']
Usability,"Matrix &m)Assign from an orthonormal linear algebra matrix of size 3x3, which must support operator()(i,...Definition Rotation3D.h:212; ROOT::Math::Rotation3D::operator=Rotation3D & operator=(RotationX const &r)Definition Rotation3D.h:204; ROOT::Math::Rotation3D::operator==bool operator==(const Rotation3D &rhs) constEquality/inequality operators.Definition Rotation3D.h:462; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle p...Definition RotationZYX.h:63; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; R; double; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::gv_detail::convertvoid convert(R1 const &, R2 const)Definition 3DConversions.h:41; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; mTMarker mDefinition textangle.C:8. mathgenvectorincMathGenVectorRotation3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html:28077,Guid,Guide,28077,doc/master/GenVector_2Rotation3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html,1,['Guid'],['Guide']
Usability,"Matrix > ; static dim3 GridDims1D (const AMatrix &A);  ; template<typename AMatrix > ; static dim3 GridDims2D (const AMatrix &A);  ; static dim3 GridDims2D (int nrows, int ncols);  ; template<typename AMatrix > ; static int NThreads (const AMatrix &A);  . Static Public Attributes; static constexpr int BlockDimX = 1;  ; static constexpr int BlockDimY = 32;  ; static constexpr int BlockSize = BlockDimX * BlockDimY;  . #include <TMVA/DNN/Architectures/Cuda/Device.h>; Member Function Documentation. ◆ BlockDims1D(). static dim3 TMVA::DNN::TDevice::BlockDims1D ; (; ). inlinestatic . Definition at line 48 of file Device.h. ◆ BlockDims2D(). static dim3 TMVA::DNN::TDevice::BlockDims2D ; (; ). inlinestatic . Definition at line 55 of file Device.h. ◆ GridDims1D(). template<typename AMatrix > . static dim3 TMVA::DNN::TDevice::GridDims1D ; (; const AMatrix & ; A). inlinestatic . Definition at line 63 of file Device.h. ◆ GridDims2D() [1/2]. template<typename AMatrix > . static dim3 TMVA::DNN::TDevice::GridDims2D ; (; const AMatrix & ; A). inlinestatic . Definition at line 88 of file Device.h. ◆ GridDims2D() [2/2]. static dim3 TMVA::DNN::TDevice::GridDims2D ; (; int ; nrows, . int ; ncols . ). inlinestatic . Definition at line 74 of file Device.h. ◆ NThreads(). template<typename AMatrix > . static int TMVA::DNN::TDevice::NThreads ; (; const AMatrix & ; A). inlinestatic . Definition at line 101 of file Device.h. Member Data Documentation. ◆ BlockDimX. constexpr int TMVA::DNN::TDevice::BlockDimX = 1. staticconstexpr . Definition at line 40 of file Device.h. ◆ BlockDimY. constexpr int TMVA::DNN::TDevice::BlockDimY = 32. staticconstexpr . Definition at line 42 of file Device.h. ◆ BlockSize. constexpr int TMVA::DNN::TDevice::BlockSize = BlockDimX * BlockDimY. staticconstexpr . Definition at line 44 of file Device.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/Device.h. TMVADNNTDevice. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDevice.html:2534,Guid,Guide,2534,doc/master/classTMVA_1_1DNN_1_1TDevice.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDevice.html,1,['Guid'],['Guide']
Usability,"Matrix<float,5,5,MatRepSym<float,5> > SMatrixSym5F;; 27 typedef SMatrix<float,6,6,MatRepSym<float,6> > SMatrixSym6F;; 28 typedef SMatrix<float,7,7,MatRepSym<float,7> > SMatrixSym7F;; 29 ; 30 ; 31} // namespace Math; 32 ; 33} // namespace ROOT; 34 ; 35#endif; ROOT::Math::SMatrixSMatrix: a generic fixed size D1 x D2 Matrix class.Definition SMatrix.h:101; MathNamespace for new Math classes and functions.; ROOT::Math::SMatrixSym6FSMatrix< float, 6, 6, MatRepSym< float, 6 > > SMatrixSym6FDefinition SMatrixFfwd.h:27; ROOT::Math::SMatrix7FSMatrix< float, 7, 7, MatRepStd< float, 7, 7 > > SMatrix7FDefinition SMatrixFfwd.h:21; ROOT::Math::SMatrixSym5FSMatrix< float, 5, 5, MatRepSym< float, 5 > > SMatrixSym5FDefinition SMatrixFfwd.h:26; ROOT::Math::SMatrix6FSMatrix< float, 6, 6, MatRepStd< float, 6, 6 > > SMatrix6FDefinition SMatrixFfwd.h:20; ROOT::Math::SMatrixSym4FSMatrix< float, 4, 4, MatRepSym< float, 4 > > SMatrixSym4FDefinition SMatrixFfwd.h:25; ROOT::Math::SMatrixSym7FSMatrix< float, 7, 7, MatRepSym< float, 7 > > SMatrixSym7FDefinition SMatrixFfwd.h:28; ROOT::Math::SMatrix4FSMatrix< float, 4, 4, MatRepStd< float, 4, 4 > > SMatrix4FDefinition SMatrixFfwd.h:18; ROOT::Math::SMatrixSym3FSMatrix< float, 3, 3, MatRepSym< float, 3 > > SMatrixSym3FDefinition SMatrixFfwd.h:24; ROOT::Math::SMatrix2FSMatrix< float, 2, 2, MatRepStd< float, 2, 2 > > SMatrix2FDefinition SMatrixFfwd.h:16; ROOT::Math::SMatrix5FSMatrix< float, 5, 5, MatRepStd< float, 5, 5 > > SMatrix5FDefinition SMatrixFfwd.h:19; ROOT::Math::SMatrixSym2FSMatrix< float, 2, 2, MatRepSym< float, 2 > > SMatrixSym2FDefinition SMatrixFfwd.h:23; ROOT::Math::SMatrix3FSMatrix< float, 3, 3, MatRepStd< float, 3, 3 > > SMatrix3FDefinition SMatrixFfwd.h:17; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathsmatrixincMathSMatrixFfwd.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrixFfwd_8h_source.html:3112,Guid,Guide,3112,doc/master/SMatrixFfwd_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrixFfwd_8h_source.html,1,['Guid'],['Guide']
Usability,"MatrixDSparse*fEResult: matrix E; TMatrixDSparse*fEinvResult: matrix E^(-1); Double_tfEpsMatrixmachine accuracy for eingenvalue analysis; Int_tfIgnoredBinsnumber of input bins which are dropped because they have error=0; Double_tfLXsquaredResult: chi**2 contribution from (x-s*x0)Lsquared(x-s*x0); Int_tfNdfResult: number of degrees of freedom; Double_tfRhoAvgResult: average global correlation; Double_tfRhoMaxResult: maximum global correlation; TMatrixDSparse*fVxxResult: covariance matrix on x; TMatrixDSparse*fVxxInvResult: inverse of covariance matrix on x; TMatrixDSparse*fVyyInvResult: inverse of covariance matrix on y; TMatrixD*fXResult: x. Class Charts. Inheritance Chart:. TObject. ←; TUnfold. ←. TUnfoldSys; ←. TUnfoldDensity. Function documentation; const char * GetTUnfoldVersion(void). void InitTUnfold(void); reset all data members. void DeleteMatrix(TMatrixD** m). void DeleteMatrix(TMatrixDSparse** m). void ClearResults(void); delete old results (if any); this function is virtual, so derived classes may implement their own; method to flag results as non-valid. TUnfold(const TUnfold& ); set all matrix pointers to zero. Double_t DoUnfold(Double_t tau); main unfolding algorithm. Declared virtual, because other algorithms; could be implemented. Purpose: unfold y -> x; Data members required:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fVyy: covariance matrix for y; fL: regularisation conditions; fTauSquared: regularisation strength; fConstraint: whether the constraint is applied; Data members modified:; fVyyInv: inverse of input data covariance matrix; fNdf: number of dgerres of freedom; fEinv: inverse of the matrix needed for unfolding calculations; fE: the matrix needed for unfolding calculations; fX: unfolded data points; fDXDY: derivative of x wrt y (for error propagation); fVxx: error matrix (covariance matrix) on x; fAx: estimate of distribution y from unfolded data; fChi2A: contribution to chi**2 f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfold.html:19916,Clear,ClearResults,19916,root/html602/TUnfold.html,https://root.cern,https://root.cern/root/html602/TUnfold.html,2,['Clear'],['ClearResults']
Usability,"Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdadelta (DeepNet_t &deepNet, Scalar_t learningRate=1.0, Scalar_t rho=0.95, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdadelta ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html:2023,learn,learningRate,2023,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,1,['learn'],['learningRate']
Usability,"MaxDouble_t * fTmpCutMaxtemporary maximum requirementDefinition MethodCuts.h:187; TMVA::MethodCuts::fVarHistS_smoothstd::vector< TH1 * > * fVarHistS_smoothsmoothed reference histograms (signal)Definition MethodCuts.h:207; TMVA::MethodCuts::MatchParsToCutsvoid MatchParsToCuts(Double_t *, Double_t *, Double_t *); TMVA::MethodCuts::fCutMaxDouble_t ** fCutMaxmaximum requirementDefinition MethodCuts.h:185; TMVA::MethodCuts::ReadWeightsFromXMLvoid ReadWeightsFromXML(void *wghtnode)read coefficients from xml weight fileDefinition MethodCuts.cxx:1327; TMVA::MethodCuts::fEffBvsSLocalTH1 * fEffBvsSLocalintermediate eff. background versus eff signal histoDefinition MethodCuts.h:202; TMVA::MethodCuts::GetEffsfromPDFsvoid GetEffsfromPDFs(Double_t *cutMin, Double_t *cutMax, Double_t &effS, Double_t &effB)compute signal and background efficiencies from PDFs for given cut sampleDefinition MethodCuts.cxx:1023; TMVA::MethodCuts::GetCutsDouble_t GetCuts(Double_t effS, std::vector< Double_t > &cutMin, std::vector< Double_t > &cutMax) constretrieve cut values for given signal efficiencyDefinition MethodCuts.cxx:551; TMVA::MethodCuts::PrintCutsvoid PrintCuts(Double_t effS) constprint cutsDefinition MethodCuts.cxx:465; TMVA::PDFPDF wrapper for histograms; uses user-defined spline interpolation.Definition PDF.h:63; TMVA::RankingRanking for variables in method (implementation)Definition Ranking.h:48; TMVA::Types::ESBTypeESBTypeDefinition Types.h:134; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStringBasic string class.Definition TString.h:139; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; double; int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22. tmvatmvaincTMVAMethodCuts.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:22899,Guid,Guide,22899,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['Guid'],['Guide']
Usability,"Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:1741,learn,learning,1741,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,3,['learn'],['learning']
Usability,"MdiDecorFrame, TGMdiFrame, and TGMainFrame.; Definition at line 129 of file TGWindow.cxx. ◆ Streamer(). void TGWindow::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGObject.; Reimplemented in TRootBrowser, TRootBrowserLite, TRootCanvas, TRootContextMenu, TRootControlBar, TRootDialog, TRootEmbeddedCanvas, TRootHelpDialog, TProofProgressLog, TNewChainDlg, TNewQueryDlg, TUploadDataSetDlg, TSessionServerFrame, TSessionFrame, TSessionQueryFrame, TSessionOutputFrame, TSessionInputFrame, TSessionViewer, and TTreeViewer. ◆ StreamerNVirtual(). void TGWindow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TGWindow.h. ◆ UnmapWindow(). void TGWindow::UnmapWindow ; (; ). virtual . unmap window ; Reimplemented in TGDragWindow, and TGFrame.; Definition at line 184 of file TGWindow.cxx. Friends And Related Symbol Documentation. ◆ TGClient. friend class TGClient. friend . Definition at line 25 of file TGWindow.h. Member Data Documentation. ◆ fEditDisabled. UInt_t TGWindow::fEditDisabled. protected . flags used for ""guibuilding"" ; Definition at line 32 of file TGWindow.h. ◆ fgCounter. Int_t TGWindow::fgCounter = 0. staticprotected . counter of created windows in SavePrimitive ; Definition at line 31 of file TGWindow.h. ◆ fName. TString TGWindow::fName. protected . name of the window used in SavePrimitive() ; Definition at line 30 of file TGWindow.h. ◆ fNeedRedraw. Bool_t TGWindow::fNeedRedraw. protected . kTRUE if window needs to be redrawn ; Definition at line 29 of file TGWindow.h. ◆ fParent. const TGWindow* TGWindow::fParent. protected . Parent window. ; Definition at line 28 of file TGWindow.h. Libraries for TGWindow:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGWindow.h; gui/gui/src/TGWindow.cxx. TGWindow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWindow.html:26949,Guid,Guide,26949,doc/master/classTGWindow.html,https://root.cern,https://root.cern/doc/master/classTGWindow.html,1,['Guid'],['Guide']
Usability,"MemFile::SysWrite ; (; Int_t ; fd, . const void * ; buf, . Int_t ; len . ). overrideprotectedvirtual . Write a buffer into the file. ; Reimplemented from TFile.; Definition at line 662 of file TMemFile.cxx. ◆ SysWriteImpl(). Int_t TMemFile::SysWriteImpl ; (; Int_t ; fd, . const void * ; buf, . Long64_t ; len . ). protected . Write a buffer into the file. ; Definition at line 598 of file TMemFile.cxx. Member Data Documentation. ◆ fBlockList. TMemBlock TMemFile::fBlockList. protected . Collection of memory blocks of size fgDefaultBlockSize. ; Definition at line 47 of file TMemFile.h. ◆ fBlockOffset. Long64_t TMemFile::fBlockOffset {0}. protected . Seek offset within the block. ; Definition at line 53 of file TMemFile.h. ◆ fBlockSeek. TMemBlock* TMemFile::fBlockSeek {nullptr}. protected . Pointer to the block we seeked to. ; Definition at line 52 of file TMemFile.h. ◆ fDefaultBlockSize. Long64_t TMemFile::fDefaultBlockSize = fgDefaultBlockSize. protected . Definition at line 56 of file TMemFile.h. ◆ fExternalData. ExternalDataPtr_t TMemFile::fExternalData. protected . shared file data / content ; Definition at line 48 of file TMemFile.h. ◆ fgDefaultBlockSize. constexpr Long64_t TMemFile::fgDefaultBlockSize = 2 * 1024 * 1024. staticconstexprprotected . Definition at line 55 of file TMemFile.h. ◆ fIsOwnedByROOT. Bool_t TMemFile::fIsOwnedByROOT {kFALSE}. protected . if this is a C-style memory region ; Definition at line 49 of file TMemFile.h. ◆ fSize. Long64_t TMemFile::fSize {0}. protected . Total file size (sum of the size of the chunks) ; Definition at line 50 of file TMemFile.h. ◆ fSysOffset. Long64_t TMemFile::fSysOffset {0}. protected . Seek offset in file. ; Definition at line 51 of file TMemFile.h. Libraries for TMemFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TMemFile.h; io/io/src/TMemFile.cxx. TMemFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:53264,Guid,Guide,53264,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,1,['Guid'],['Guide']
Usability,"MemStatInfoStamp information about stamps; TMemStatManager a manager of memstat sessions.; TMemStatStackInfo a stack information structure; TMemStatViewerGUI a GUI class of memstat; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a class member function (method); TMethodArg Dictionary for a method argument; TMethodBrowsable Helper object to browse methods; TMethodCall Method calling interface; TMinuit The MINUIT minimisation package; TMinuitMinimizer Implementation of Minimizer interface using TMinuit ; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:106095,simpl,simple,106095,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['simpl'],['simple']
Usability,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:46202,clear,clearing,46202,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,139,['clear'],['clearing']
Usability,"Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void ClearResults (void) override;  Clear all data members which depend on the unfolding results. ;  ; void DoBackgroundSubtraction (void);  perform background subtraction ;  ; void GetEmatrixFromVyy (const TMatrixDSparse *vyy, TH2 *ematrix, const Int_t *binMap, Bool_t clearEmat);  propagate an error matrix on the input vector to the unfolding result ;  ; TMatrixDSparse * GetSummedErrorMatrixXX (void);  determine total error matrix on the vector x ;  ; TMatrixDSparse * GetSummedErrorMatrixYY (void);  determine total error matrix on the vector Ax ;  ; virtual TMatrixDSparse * PrepareCorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2, const TMatrixDSparse *dsys);  propagate correlated systematic shift to an output vector ;  ; virtual void PrepareSysError (void);  Matrix calculations required to propagate systematic errors. ;  ; virtual TMatrixDSparse * PrepareUncorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2);  propagate uncorrelated systematic errors to a covariance matrix ;  ; void ScaleColumnsByVector (TMatrixDSparse *m, const TMatrixTBase< Double_t > *v) const;  scale columns of a matrix by the corresponding rows of a vector ;  ; void VectorMapToHist (TH1 *hist_delta, const TMatrixDSparse *delta, const Int_t *binMap);  map delta to hist_delta, possibly summing up bins ;  ;  Protected Member Functions inherited from TUnfold; void AddMSparse (TMatrixDSparse *dest, Double_t f, const TMatrixDSparse *src) const;  add a sparse ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:23040,clear,clearEmat,23040,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"Member Functions |; Protected Attributes |; List of all members ; TGLEventHandler Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Base-class and default implementation of event-handler for TGLViewer. ; This allows for complete disentanglement of GL-viewer from GUI event handling. Further, alternative event-handlers can easily be designed and set at run-time.; The signals about object being selected or hovered above are emitted via the TGLViewer itself.; The following rootrc settings influence the behaviour: OpenGL.EventHandler.ViewerCentricControls: 1; OpenGL.EventHandler.ArrowKeyFactor: -1.0; OpenGL.EventHandler.MouseDragFactor: -1.0; OpenGL.EventHandler.MouseWheelFactor: -1.0; ROOT::MacOSX::OpenGLDefinition ROOTOpenGLView.h:74. Definition at line 29 of file TGLEventHandler.h. Public Member Functions;  TGLEventHandler (TGWindow *w, TObject *obj);  Constructor. ;  ;  ~TGLEventHandler () override;  Destructor. ;  ;  ClassDefOverride (TGLEventHandler, 0);  ; virtual void ClearMouseOver ();  Clear mouse-over state and emit mouse-over signals. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Process event of type 'event' - one of EEventType types, occurring at window location px, py This is provided for use when embedding GL viewer into pad. ;  ; Bool_t GetArcBall () const;  ; Bool_t GetDoInternalSelection () const;  ; Int_t GetSecSelType () const;  ; Int_t GetTooltipPixelTolerance () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button 'event'. ;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handle configure notify 'event' - a window resize/movement. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle generic Event_t type 'event' - provided to catch focus changes and terminate any interaction in viewer. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle mouse double click 'event'. ;  ; Bool_t HandleEvent (Event_t *event) override;  Handle generic Event_t type 'event' - provided",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:1178,Clear,ClearMouseOver,1178,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,2,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGFrame into an eve-window. ; The frame is owned by the eve-window. ; Definition at line 335 of file TEveWindow.h. Public Member Functions;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:1182,Clear,ClearEveFrame,1182,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,2,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,"MemberWiseVecPtrAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AddWriteTextAction(TStreamerInfoActions::TActionSequence *writeSequence, Int_t index, TCompInfo *compinfo)TStreamerInfoprivate; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; Build(Bool_t isTransient=kFALSE) overrideTStreamerInfovirtual; BuildCheck(TFile *file=nullptr, Bool_t load=kTRUE) overrideTStreamerInfovirtual; BuildEmulated(TFile *file) overrideTStreamerInfovirtual; BuildFor(const TClass *cl) overrideTStreamerInfovirtual; BuildOld() overrideTStreamerInfovirtual; CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient) const overrideTStreamerInfovirtual; CanDelete()TVirtualStreamerInfostatic; CanOptimize()TVirtualStreamerInfostatic; CheckedHash()TObjectinline; Class()TStreamerInfostatic; Class_Name()TStreamerInfostatic; Class_Version()TStreamerInfoinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""") overrideTStreamerInfovirtual; Clone(const char *newname="""") const overrideTStreamerInfovirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompareContent(TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file) overrideTStreamerInfovirtual; Compile() overrideTStreamerInfovirtual; ComputeSize()TStreamerInfo; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TStreamerInfoinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteArray(void *p, Bool_t dtorOnly=kFALSE) overrideTStreamerInfovirtual; Destructor(void *p, Bool_t dtorOnly=kFALSE) overrideTStreamerInfovirtual; DestructorImpl(void *p, Bool_t dtorOnly)TStreamerInfoprivate; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo-members.html:1832,Clear,Clear,1832,doc/master/classTStreamerInfo-members.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo-members.html,1,['Clear'],['Clear']
Usability,"Members; Includes; Libraries. Function documentation; TQRootCanvas(QWidget* parent = 0, const char* name = 0, TCanvas* c = 0); set defaults. TQRootCanvas(QWidget* parent, QWidget* tabWin, const char* name = 0, TCanvas* c = 0); set defaults. void mouseMoveEvent(QMouseEvent* e); Handle mouse move event. void mousePressEvent(QMouseEvent* e); Handle mouse button press event. void mouseReleaseEvent(QMouseEvent* e); Handle mouse button release event. void mouseDoubleClickEvent(QMouseEvent* e); Handle mouse double click event. void resizeEvent(QResizeEvent* e); Call QWidget resize and inform the ROOT Canvas. void paintEvent(QPaintEvent* e); Handle paint event of Qt. void leaveEvent(QEvent* e); Handle leave event. void dragEnterEvent(QDragEnterEvent* e); Entering a drag event. void dropEvent(QDropEvent* Event); Start a drop, for now only histogram objects can be drwon by droping. void cd(Int_t subpadnumber = 0); Just a wrapper. void Browse(TBrowser* b); Just a wrapper. void Clear(Option_t* option = """"); Just a wrapper. void Close(Option_t* option = """"); Just a wrapper. void Draw(Option_t* option = """"); Just a wrapper. TObject * DrawClone(Option_t* option = """"); Just a wrapper. TObject * DrawClonePad(); Just a wrapper. void EditorBar(); Just a wrapper. void EnterLeave(TPad* prevSelPad, TObject* prevSelObj); just a wrapper. void FeedbackMode(Bool_t set); just a wrapper. void Flush(); just a wrapper. void UseCurrentStyle(); just a wrapper. void ForceUpdate(); just a wrapper. const char * GetDISPLAY(); just a wrapper. TContextMenu * GetContextMenu(); just a wrapper. Int_t GetDoubleBuffer(); just a wrapper. Int_t GetEvent(); just a wrapper. Int_t GetEventX(); just a wrapper. Int_t GetEventY(); just a wrapper. Color_t GetHighLightColor(); just a wrapper. TVirtualPad * GetPadSave(); just a wrapper. TObject * GetSelected(); just a wrapper. Option_t * GetSelectedOpt(); just a wrapper. TVirtualPad * GetSelectedPad(); just a wrapper. Bool_t GetShowEventStatus(); just a wrapper. Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQRootCanvas.html:4884,Clear,Clear,4884,root/html528/TQRootCanvas.html,https://root.cern,https://root.cern/root/html528/TQRootCanvas.html,3,['Clear'],['Clear']
Usability,"Menu *c, const char *name, const char *title);  Create a batch version of TContextMenuImp. ;  ; virtual TControlBarImp * CreateControlBarImp (TControlBar *c, const char *title);  Create a batch version of TControlBarImp. ;  ; virtual TControlBarImp * CreateControlBarImp (TControlBar *c, const char *title, Int_t x, Int_t y);  Create a batch version of TControlBarImp. ;  ; virtual TInspectorImp * CreateInspectorImp (const TObject *obj, UInt_t width, UInt_t height);  Create a batch version of TInspectorImp. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiFactory.html:2645,Clear,Clear,2645,doc/master/classTGuiFactory.html,https://root.cern,https://root.cern/doc/master/classTGuiFactory.html,1,['Clear'],['Clear']
Usability,"Merger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:7651,feedback,feedback,7651,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['feedback'],['feedback']
Usability,"MethodBase.h:133; TMVA::PyMethodBase::fModulePicklestatic PyObject * fModulePickleDefinition PyMethodBase.h:128; TMVA::PyMethodBase::fModuleBuiltinstatic PyObject * fModuleBuiltinDefinition PyMethodBase.h:123; TMVA::PyMethodBase::PyMethodBasePyMethodBase(const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""")Definition PyMethodBase.cxx:84; TMVA::PyMethodBase::fEvalstatic PyObject * fEvalDefinition PyMethodBase.h:124; TMVA::PyMethodBase::GetValueFromDictstatic PyObject * GetValueFromDict(PyObject *dict, const char *key)Utility function which checks if a given key is present in a Python dictionary object and returns the...Definition PyMethodBase.cxx:409; TMVA::PyMethodBase::PyRunStringvoid PyRunString(TString code, TString errorMessage=""Failed to run python code"", int start=256)Execute Python code from string.Definition PyMethodBase.cxx:325; TMVA::PyMethodBase::fLocalNSPyObject * fLocalNSDefinition PyMethodBase.h:134; TMVA::Tools::LogMsgLogger & Log() constDefinition Tools.h:228; TMVA::Types::EMVAEMVADefinition Types.h:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::GetFromPipevirtual TString GetFromPipe(const char *command)Execute command and return output in TString.Definition TSystem.cxx:680; int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::Python_ExecutableTString Python_Executable()Function to find current Python executable used by ROOT If ""Python3"" is installed,...Definition PyMethodBase.cxx:43; TMVA::gToolsTools & gTools(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148. tmvapymvasrcPyMethodBase.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:20203,Guid,Guide,20203,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Min, Float_t etaMax, Float_t phiMin, Float_t phiMax); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveCaloData::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloDataVec.html:2024,Clear,Clear,2024,root/html528/TEveCaloDataVec.html,https://root.cern,https://root.cern/root/html528/TEveCaloDataVec.html,6,['Clear'],['Clear']
Usability,"Minimizer.h. ◆ Tolerance(). double ROOT::Math::Minimizer::Tolerance ; (; ); const. inline . absolute tolerance ; Definition at line 300 of file Minimizer.h. ◆ VariableIndex(). int ROOT::Math::Minimizer::VariableIndex ; (; const std::string & ; name); const. virtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 232 of file Minimizer.cxx. ◆ VariableName(). std::string ROOT::Math::Minimizer::VariableName ; (; unsigned int ; ivar); const. virtual . get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 224 of file Minimizer.cxx. ◆ X(). virtual const double * ROOT::Math::Minimizer::X ; (; ); const. pure virtual . return pointer to X values at the minimum ; Implemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::BasicMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer. Member Data Documentation. ◆ fOptions. MinimizerOptions ROOT::Math::Minimizer::fOptions. protected . minimizer options ; Definition at line 370 of file Minimizer.h. ◆ fStatus. int ROOT::Math::Minimizer::fStatus = -1. protected . status of minimizer ; Definition at line 371 of file Minimizer.h. ◆ fValidError. bool ROOT::Math::Minimizer::fValidError = false. protected . flag to control if errors have been validated (Hesse has been run in case of Minuit) ; Definition at line 369 of file Minimizer.h. Libraries for ROOT::Math::Minimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Minimizer.h; math/mathcore/src/Minimizer.cxx. ROOTMathMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:37261,Guid,Guide,37261,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['Guid'],['Guide']
Usability,MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  LinkDef.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  Mn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:52929,Simpl,SimplexSeedGenerator,52929,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexSeedGenerator']
Usability,MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  BFGSErrorUpdator.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnF,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:51478,Simpl,SimplexSeedGenerator,51478,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['SimplexSeedGenerator']
Usability,MinimumSeed.h;  MinimumSeedGenerator.h;  MinimumState.h;  MinosError.h;  Minuit2Minimizer.h;  MinuitParameter.h;  MnApplication.h;  MnConfig.h;  MnContours.h;  MnCovarianceSqueeze.h;  MnCross.h;  MnEigen.h;  MnFcn.h;  MnFumiliMinimize.h;  MnFunctionCross.h;  MnGlobalCorrelationCoeff.h;  MnHesse.h;  MnLineSearch.h;  MnMachinePrecision.h;  MnMatrix.h;  MnMigrad.h;  MnMinimize.h;  MnMinos.h;  MnParabola.h;  MnParabolaFactory.h;  MnParabolaPoint.h;  MnParameterScan.h;  MnPlot.h;  MnPosDef.h;  MnPrint.h;  MnRefCountedPointer.h;  MnReferenceCounter.h;  MnScan.h;  MnSeedGenerator.h;  MnSimplex.h;  MnStrategy.h;  MnTiny.h;  MnTraceObject.h;  MnUserCovariance.h;  MnUserFcn.h;  MnUserParameters.h;  MnUserParameterState.h;  MnUserTransformation.h;  MnVectorTransform.h;  ModularFunctionMinimizer.h;  MPIProcess.h;  NegativeG2LineSearch.h;  Numerical2PGradientCalculator.h;  ParametricFunction.h;  ScanBuilder.h;  ScanMinimizer.h;  SimplexBuilder.h;  SimplexMinimizer.h;  SimplexParameters.h;  SimplexSeedGenerator.h;  SinParameterTransformation.h;  SqrtLowParameterTransformation.h;  SqrtUpParameterTransformation.h;  StackAllocator.h;  VariableMetricBuilder.h;  VariableMetricEDMEstimator.h;  VariableMetricMinimizer.h;  VectorOuterProduct.h;  TMinuit2TraceObject.h;  ► src;  AnalyticalGradientCalculator.cxx;  BasicMinimumError.cxx;  CombinedMinimumBuilder.cxx;  DavidonErrorUpdator.cxx;  FitterUtil.h;  FumiliBuilder.cxx;  FumiliErrorUpdator.cxx;  FumiliGradientCalculator.cxx;  FumiliMinimizer.cxx;  FumiliStandardChi2FCN.cxx;  FumiliStandardMaximumLikelihoodFCN.cxx;  HessianGradientCalculator.cxx;  InitialGradientCalculator.cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:51483,Simpl,SimplexSeedGenerator,51483,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,2,['Simpl'],['SimplexSeedGenerator']
Usability,"Minuit2 Namespace Reference. Classes; class  ABObj;  ; class  ABObj< sym, LASymMatrix, double >;  ; class  ABObj< vec, LAVector, double >;  ; class  ABProd;  ; class  ABSum;  ; class  AlgebraicProdType;  ; class  AlgebraicProdType< gen, gen >;  ; class  AlgebraicProdType< gen, sym >;  ; class  AlgebraicProdType< gen, vec >;  ; class  AlgebraicProdType< sym, gen >;  ; class  AlgebraicProdType< sym, sym >;  ; class  AlgebraicProdType< sym, vec >;  ; class  AlgebraicProdType< T, T >;  ; class  AlgebraicProdType< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1243,Simpl,Simplex,1243,doc/v632/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html,1,['Simpl'],['Simplex']
Usability,"Minuit2 Namespace Reference. Classes; class  ABObj;  ; class  ABObj< sym, LASymMatrix, double >;  ; class  ABObj< vec, LAVector, double >;  ; class  ABProd;  ; class  ABSum;  ; class  AlgebraicProdType;  ; class  AlgebraicProdType< gen, gen >;  ; class  AlgebraicProdType< gen, sym >;  ; class  AlgebraicProdType< gen, vec >;  ; class  AlgebraicProdType< sym, gen >;  ; class  AlgebraicProdType< sym, sym >;  ; class  AlgebraicProdType< sym, vec >;  ; class  AlgebraicProdType< T, T >;  ; class  AlgebraicProdType< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:1244,Simpl,Simplex,1244,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,1,['Simpl'],['Simplex']
Usability,"MonSender.h. Classes; class  TDSetPlet;  . Public Member Functions;  TProofMonSender (const char *n=""Abstract"", const char *t=""ProofMonSender"");  ;  ~TProofMonSender () override;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; virtual Int_t SendDataSetInfo (TDSet *, TList *, const char *, const char *)=0;  ; virtual Int_t SendFileInfo (TDSet *, TList *, const char *, const char *)=0;  ; virtual Int_t SendSummary (TList *, const char *)=0;  ; Int_t SetSendOptions (const char *);  Parse send options from string 'sendopts'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSender.html:1485,Clear,Clear,1485,doc/master/classTProofMonSender.html,https://root.cern,https://root.cern/doc/master/classTProofMonSender.html,1,['Clear'],['Clear']
Usability,"Monitoring; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPBHandleDSType Streamable PBHandleDSType; TPBHistType Streamable PBHistType; TPBReadType Streamable PBReadType; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:111376,simpl,simple,111376,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['simpl'],['simple']
Usability,"More...;  ; class  ROOT::Detail::RDF::RMergeableStdDev;  Specialization of RMergeableValue for the StdDev action. More...;  ; class  ROOT::Detail::RDF::RMergeableValue< T >;  A result of an RDataFrame execution, that knows how to merge with other results of the same type. More...;  ; class  ROOT::Detail::RDF::RMergeableValueBase;  Base class of RMergeableValue. More...;  ; class  ROOT::Detail::RDF::RMergeableVariations< T >;  A container for variation names and variation results that knows how to merge with others of the same type. More...;  ; class  ROOT::Detail::RDF::RMergeableVariationsBase;  A container for variation names and variation results. More...;  ; class  ROOT::RDF::Experimental::RMetaData;  Class behaving as a heterogenuous dictionary to store the metadata of a dataset. More...;  ; class  ROOT::Experimental::RNTupleDS;  The RDataSource implementation for RNTuple. More...;  ; class  ROOT::RDF::RResultPtr< T >;  Smart pointer for the return type of actions. More...;  ; class  ROOT::RDF::Experimental::RSample;  Class representing a sample which is a grouping of trees and their fileglobs, and, optionally, the sample's metadata information via the RMetaData object. More...;  ; class  ROOT::RDF::RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  ROOT::RDF::TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; class  ROOT::RDF::TH2DModel;  A struct which stores the parameters of a TH2D. More...;  ; class  ROOT::RDF::TH3DModel;  A struct which stores the parameters of a TH3D. More...;  ; class  ROOT::RDF::THnDModel;  A struct which stores the parameters of a THnD. More...;  ; class  ROOT::RDF::TProfile1DModel;  A struct which stores the parameters of a TProfile. More...;  ; class  ROOT::RDF::TProfile2DModel;  A struct which stores the parameters of a TProfile2D. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__dataframe.html:4348,Guid,Guide,4348,doc/master/group__dataframe.html,https://root.cern,https://root.cern/doc/master/group__dataframe.html,1,['Guid'],['Guide']
Usability,"MsgService that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooMsgService::addStream. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, ROOT.RooFit.Topic(ROOT.RooFit.Tracing), ROOT.RooFit.ClassName(""RooGaussian"")); ; # With keyword arguments:; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic = ROOT.RooFit.Tracing, ClassName = ""RooGaussian""). Definition at line 110 of file RooMsgService.h. Classes; struct  StreamConfig;  . Public Member Functions;  ~RooMsgService () override;  ; Int_t addStream (RooFit::MsgLevel level, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Add a message logging stream for message with given RooFit::MsgLevel or higher. ;  ; void clearErrorCount ();  ; Int_t & debugCode ();  ; RooWorkspace * debugWorkspace ();  ; void deleteStream (Int_t id);  Delete stream with given unique ID code. ;  ; Int_t errorCount () const;  ; StreamConfig & getStream (Int_t id);  ; bool getStreamStatus (Int_t id) const;  Get activation status of stream with given unique ID. ;  ; RooFit::MsgLevel globalKillBelow () const;  ; TClass * IsA () const override;  ; template<class T > ; bool isActive (T self, RooFit::MsgTopic topic, RooFit::MsgLevel level);  Check if logging is active for given object/topic/RooFit::MsgLevel combination. ;  ; std::ostream & log (const RooAbsArg *self, RooFit::MsgLevel level, RooFit::MsgTopic facility, bool forceSkipPrefix=false);  Log error message associated with RooAbsArg object self at given level and topic. ;  ; std::ostream & log (const TObject *self, RooFit::MsgLevel level, RooFit::MsgTopic facility, bool forceSkipPrefix=false);  Log error message associated with TObject object self at given level and topic. ;  ; std::ostream & log (std::nullptr_t, RooFit::MsgLevel level, RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:2875,clear,clearErrorCount,2875,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['clear'],['clearErrorCount']
Usability,"MultB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0); Elementary constructors. void AMultB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr=0). void AMultB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0). void APlusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr=0). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data); { memmove(fRowIndex,data,(this->fNrows+1)*sizeof(Int_t)); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* data); { memmove(fColIndex,data,this->fNelems*sizeof(Int_t)); return *this; }. TMatrixTSparse<Element> & SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b). TMatrixTBase<Element> & SetMatrixArray(const float* data, Option_t* = """"); { memcpy(fElements,data,this->fNelems*sizeof(Element)); return *this; }. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). void Clear(Option_t* = """"). TMatrixTSparse<Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros, Int_t* pRowIndex, Int_t* pColIndex, float* pData). Bool_t IsSymmetric() const; { return (*this == TMatrixTSparse<Element>(kTransposed,*this)); }. void Mult(const TMatrixTSparse<float>& a, const TMatrixTSparse<float>& b); { AMultB(a,b,0); }. Int_t NonZeros() const; { return this->fNelems; }. TMatrixTBase<Element> & NormByDiag(const TVectorT<float>& , Option_t* ); { MayNotUse(""NormByDiag""); return *this; }. const TMatrixTSparseRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTSparseRow_const<Element>(*this,rown); }. TMatrixTSparseRow <Element> operator[](Int_t rown); { return TMatrixTSparseRow <Element>(*this,rown); }. TMatrixTSparse<Element> & operator-=(Element val). TMatrixTSparse<Element> & operator+=(Element val). TMatrixTSparse<Element> & operator*=(Element val). TMatrixTSparse<Element> & operator+=(const TMatrixTSparse<Element> ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_float_.html:26455,Clear,Clear,26455,root/html528/TMatrixTSparse_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_float_.html,6,['Clear'],['Clear']
Usability,"MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a mu...Definition MultiDimParamFunctionAdapter.h:172; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::gDefaultErrorDefdouble gDefaultErrorDefDefinition Fitter.cxx:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodFunction >::Typestatic int Type(const ROOT::Math::FitMethodFunction &f)Definition Fitter.cxx:682; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodFunction >::IsGradstatic bool IsGrad()Definition Fitter.cxx:683; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodFunction >::NCallsstatic unsigned int NCalls(const ROOT::Math::FitMethodFunction &f)Definition Fitter.cxx:681; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodGradFunction >::IsGradstatic bool IsGrad()Definition Fitter.cxx:689; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodGradFunction >::Typestatic int Type(const ROOT::Math::FitMethodGradFunction &f)Definition Fitter.cxx:688; ROOT::Fit::ObjFuncTrait< ROOT::Math::FitMethodGradFunction >::NCallsstatic unsigned int NCalls(const ROOT::Math::FitMethodGradFunction &f)Definition Fitter.cxx:687; ROOT::Fit::ObjFuncTraitDefinition Fitter.cxx:674; ROOT::Fit::ObjFuncTrait::IsGradstatic bool IsGrad()Definition Fitter.cxx:677; ROOT::Fit::ObjFuncTrait::NCallsstatic unsigned int NCalls(const Func &)Definition Fitter.cxx:675; ROOT::Fit::ObjFuncTrait::Typestatic int Type(const Func &)Definition Fitter.cxx:676. mathmathcoresrcFitter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:54854,Guid,Guide,54854,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"MultiRootFinder();; 140 ; 141 // usually copying is non trivial, so we delete this; 142 GSLMultiRootFinder(const GSLMultiRootFinder &) = delete;; 143 GSLMultiRootFinder & operator = (const GSLMultiRootFinder &) = delete;; 144 GSLMultiRootFinder(GSLMultiRootFinder &&) = delete;; 145 GSLMultiRootFinder & operator = (GSLMultiRootFinder &&) = delete;; 146 ; 147 /// set the type for an algorithm without derivatives; 148 void SetType(EType type) {; 149 fType = type; fUseDerivAlgo = false;; 150 }; 151 ; 152 /// set the type of algorithm using derivatives; 153 void SetType(EDerivType type) {; 154 fType = type; fUseDerivAlgo = true;; 155 }; 156 ; 157 /// set the type using a string; 158 void SetType(const char * name);; 159 ; 160 /*; 161 add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; 162 ROOT::Math::IMultiGenFunctions. The method requires the; 163 the begin and end of the list iterator.; 164 The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; 165 whatever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:6354,simpl,simple,6354,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['simpl'],['simple']
Usability,"N >::GetState ; (; std::vector< StateInt_t > & ; state); const. inline . Definition at line 102 of file MixMaxEngineImpl.h. ◆ IntRndm(). Result_t ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::IntRndm ; (; ). inline . Definition at line 95 of file MixMaxEngineImpl.h. ◆ Iterate(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::Iterate ; (; ). inline . Definition at line 108 of file MixMaxEngineImpl.h. ◆ ReadState(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::ReadState ; (; const char ; filename[]). inline . Definition at line 125 of file MixMaxEngineImpl.h. ◆ Rndm(). double ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::Rndm ; (; ). inline . Definition at line 91 of file MixMaxEngineImpl.h. ◆ RndmArray(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::RndmArray ; (; int ; n, . double * ; array . ). inline . Definition at line 122 of file MixMaxEngineImpl.h. ◆ SetCounter(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::SetCounter ; (; int ; val). inline . Definition at line 114 of file MixMaxEngineImpl.h. ◆ SetSeed(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::SetSeed ; (; Result_t ; seed). inline . Definition at line 87 of file MixMaxEngineImpl.h. ◆ SetSeedFast(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::SetSeedFast ; (; Result_t ; seed). inline . Definition at line 84 of file MixMaxEngineImpl.h. ◆ SetState(). void ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::SetState ; (; const std::vector< StateInt_t > & ; state). inline . Definition at line 98 of file MixMaxEngineImpl.h. ◆ Size(). static int ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::Size ; (; ). inlinestatic . Definition at line 117 of file MixMaxEngineImpl.h. Member Data Documentation. ◆ fRngState. rng_state_t* ROOT::Math::MixMaxEngineImpl< ROOT_MM_N >::fRngState. private . Definition at line 71 of file MixMaxEngineImpl.h. math/mathcore/src/MixMaxEngineImpl.h. ROOTMathMixMaxEngineImpl< ROOT_MM_N >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html:4299,Guid,Guide,4299,doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl_3_01ROOT__MM__N_01_4.html,1,['Guid'],['Guide']
Usability,"N::EInitialization::kUniform;; 320 } else if (fWeightInitializationString == ""ZERO"") {; 321 fWeightInitialization = DNN::EInitialization::kZero;; 322 } else if (fWeightInitializationString == ""IDENTITY"") {; 323 fWeightInitialization = DNN::EInitialization::kIdentity;; 324 } else {; 325 fWeightInitialization = DNN::EInitialization::kGlorotUniform;; 326 }; 327 ; 328 // Training settings.; 329 ; 330 KeyValueVector_t strategyKeyValues = ParseKeyValueString(fTrainingStrategyString, TString(""|""), TString("",""));; 331 for (auto &block : strategyKeyValues) {; 332 TTrainingSettings settings;; 333 ; 334 settings.convergenceSteps = fetchValueTmp(block, ""ConvergenceSteps"", 100);; 335 settings.batchSize = fetchValueTmp(block, ""BatchSize"", 30);; 336 settings.maxEpochs = fetchValueTmp(block, ""MaxEpochs"", 2000);; 337 settings.testInterval = fetchValueTmp(block, ""TestRepetitions"", 7);; 338 settings.weightDecay = fetchValueTmp(block, ""WeightDecay"", 0.0);; 339 settings.learningRate = fetchValueTmp(block, ""LearningRate"", 1e-5);; 340 settings.momentum = fetchValueTmp(block, ""Momentum"", 0.3);; 341 settings.dropoutProbabilities = fetchValueTmp(block, ""DropConfig"", std::vector<Double_t>());; 342 ; 343 TString regularization = fetchValueTmp(block, ""Regularization"", TString(""NONE""));; 344 if (regularization == ""L1"") {; 345 settings.regularization = DNN::ERegularization::kL1;; 346 } else if (regularization == ""L2"") {; 347 settings.regularization = DNN::ERegularization::kL2;; 348 } else {; 349 settings.regularization = DNN::ERegularization::kNone;; 350 }; 351 ; 352 TString optimizer = fetchValueTmp(block, ""Optimizer"", TString(""ADAM""));; 353 settings.optimizerName = optimizer;; 354 if (optimizer == ""SGD"") {; 355 settings.optimizer = DNN::EOptimizer::kSGD;; 356 } else if (optimizer == ""ADAM"") {; 357 settings.optimizer = DNN::EOptimizer::kAdam;; 358 } else if (optimizer == ""ADAGRAD"") {; 359 settings.optimizer = DNN::EOptimizer::kAdagrad;; 360 } else if (optimizer == ""RMSPROP"") {; 361 settings.optim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:13034,learn,learningRate,13034,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,"['Learn', 'learn']","['LearningRate', 'learningRate']"
Usability,"N::VGeneralLayer::GetBatchSizesize_t GetBatchSize() constGetters.Definition GeneralLayer.h:163; TMVA::DNN::VGeneralLayer::GetWeightGradientsAtMatrix_t & GetWeightGradientsAt(size_t i)Definition GeneralLayer.h:188; TMVA::DNN::VGeneralLayer::ReadMatrixXMLvoid ReadMatrixXML(void *node, const char *name, Matrix_t &matrix)Definition GeneralLayer.h:544; TMVA::DNN::VGeneralLayer::Forwardvirtual void Forward(Tensor_t &input, bool applyDropout=false)=0Computes activation of the layer for the given input.; TMVA::DNN::VGeneralLayer::GetOutputAtMatrix_t GetOutputAt(size_t i)Definition GeneralLayer.h:202; TMVA::DNN::VGeneralLayer::GetWidthsize_t GetWidth() constDefinition GeneralLayer.h:169; TMVA::DNN::VGeneralLayer::GetHeightsize_t GetHeight() constDefinition GeneralLayer.h:168; TMVA::DNN::VGeneralLayer::GetWeightGradientsAtconst Matrix_t & GetWeightGradientsAt(size_t i) constDefinition GeneralLayer.h:187; TMVA::DNN::VGeneralLayer::UpdateBiasesvoid UpdateBiases(const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate)Updates the biases, given the gradients and the learning rate.Definition GeneralLayer.h:428; TMVA::DNN::VGeneralLayer::Tensor_ttypename Architecture_t::Tensor_t Tensor_tDefinition GeneralLayer.h:53; TMVA::DNN::VGeneralLayer::IsTrainingbool IsTraining() constDefinition GeneralLayer.h:170; TMVA::DNN::VGeneralLayer::GetOutputTensor_t & GetOutput()Definition GeneralLayer.h:197; TMVA::DNN::VGeneralLayer::~VGeneralLayervirtual ~VGeneralLayer()Virtual Destructor.Definition GeneralLayer.h:388; TMVA::DNN::VGeneralLayer::GetOutputAtconst Matrix_t & GetOutputAt(size_t i) constDefinition GeneralLayer.h:203; TMVA::DNN::VGeneralLayer::VGeneralLayerVGeneralLayer(size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, size_t WeightsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:36746,learn,learningRate,36746,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"NCalls() const; ROOT::Math::IntegratorMultiDimOptions&operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNCalls(unsigned int ncall); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNCalls(unsigned int calls); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options ; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance ; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html:2468,Clear,ClearExtra,2468,root/html528/ROOT__Math__IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDimOptions.html,4,['Clear'],['ClearExtra']
Usability,"NDC) ; Definition at line 66 of file TPad.h. ◆ fX1. Double_t TPad::fX1. protected . X of lower X coordinate. ; Definition at line 36 of file TPad.h. ◆ fX2. Double_t TPad::fX2. protected . X of upper X coordinate. ; Definition at line 38 of file TPad.h. ◆ fXlowNDC. Double_t TPad::fXlowNDC. protected . X bottom left corner of pad in NDC [0,1]. ; Definition at line 62 of file TPad.h. ◆ fXtoAbsPixelk. Double_t TPad::fXtoAbsPixelk. protected . Conversion coefficient for X World to absolute pixel. ; Definition at line 41 of file TPad.h. ◆ fXtoPixel. Double_t TPad::fXtoPixel. protected . xpixel = fXtoPixelk + fXtoPixel*xworld ; Definition at line 43 of file TPad.h. ◆ fXtoPixelk. Double_t TPad::fXtoPixelk. protected . Conversion coefficient for X World to pixel. ; Definition at line 42 of file TPad.h. ◆ fXUpNDC. Double_t TPad::fXUpNDC. protected . Definition at line 64 of file TPad.h. ◆ fY1. Double_t TPad::fY1. protected . Y of lower Y coordinate. ; Definition at line 37 of file TPad.h. ◆ fY2. Double_t TPad::fY2. protected . Y of upper Y coordinate. ; Definition at line 39 of file TPad.h. ◆ fYlowNDC. Double_t TPad::fYlowNDC. protected . Y bottom left corner of pad in NDC [0,1]. ; Definition at line 63 of file TPad.h. ◆ fYtoAbsPixelk. Double_t TPad::fYtoAbsPixelk. protected . Conversion coefficient for Y World to absolute pixel. ; Definition at line 44 of file TPad.h. ◆ fYtoPixel. Double_t TPad::fYtoPixel. protected . ypixel = fYtoPixelk + fYtoPixel*yworld ; Definition at line 46 of file TPad.h. ◆ fYtoPixelk. Double_t TPad::fYtoPixelk. protected . Conversion coefficient for Y World to pixel. ; Definition at line 45 of file TPad.h. ◆ fYUpNDC. Double_t TPad::fYUpNDC. protected . Definition at line 65 of file TPad.h. Libraries for TPad:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TPad.h; graf2d/gpad/src/TPad.cxx. TPad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:142976,Guid,Guide,142976,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Guid'],['Guide']
Usability,"NN::TDeepNet< Architecture_t, Layer_t >::AddReshapeLayer ; (; TReshapeLayer< Architecture_t > * ; reshapeLayer). Function for adding Reshape Layer in the Deep Neural Network, when the layer is already created. ; Definition at line 870 of file DeepNet.h. ◆ Backward(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Backward ; (; const Tensor_t & ; input, . const Matrix_t & ; groundTruth, . const Matrix_t & ; weights . ). Function that executes the entire backward pass in the network. ; Definition at line 1033 of file DeepNet.h. ◆ calculateDimension(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). private . Definition at line 421 of file DeepNet.h. ◆ Clear(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . void TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Clear ; (; ). inline . Remove all layers from the network. ; Definition at line 334 of file DeepNet.h. ◆ Forward(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Forward ; (; Tensor_t & ; input, . bool ; applyDropout = false . ). Function that executes the entire forward pass in the network. ; Definition at line 896 of file DeepNet.h. ◆ GetBatchDepth(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::GetBatchDepth ; (; ); const. inline . Definition at line 342 of file DeepNet.h. ◆ GetBatchHeight(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::GetBatchHeight ; (; ); const. inline . Definition at line 343 of file DeepNet.h. ◆ GetBatchSize(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architectu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:18233,Clear,Clear,18233,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['Clear'],['Clear']
Usability,"NN::VOptimizer<Architecture_t, Layer_t, DeepNet_t>> optimizer;; 1352 ; 1353 // initialize the base class pointer with the corresponding derived class object.; 1354 switch (O) {; 1355 ; 1356 case EOptimizer::kSGD:; 1357 optimizer = std::unique_ptr<DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>>(; 1358 new DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>(settings.learningRate, deepNet, settings.momentum));; 1359 break;; 1360 ; 1361 case EOptimizer::kAdam: {; 1362 optimizer = std::unique_ptr<DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>>(; 1363 new DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>(; 1364 deepNet, settings.learningRate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams[""RMSPROP_eps""]));; 1380 break;; 1381 ; 1382 case EOptimizer::kAdadelta:; 1383 optimizer = std::unique_ptr<DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>>(; 1384 new DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1385 settings.optimizerParams[""ADADELTA_rho""],; 1386 settings.optimizerParams[""ADADELTA_eps""]));; 1387 break;; 1388 }; 1389 ; 1390 ; 1391 // Initialize the vector of batches, one batch for one slave network; 1392 std::vector<TTensorBatch<Architecture_t>> batches{};; 1393 ; 1394 bool converged = false;; 1395 size_t convergenceCount = 0;; 1396 size_t batchesInEpoch = nTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:54375,learn,learningRate,54375,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"NO));; 5835 }; 5836 }; 5837 exit(EXIT_FAILURE);; 5838 }; 5839 ; 5840 return pid;; 5841}; 5842#endif /* !NO_CGI */; 5843 ; 5844 ; 5845static int; 5846set_non_blocking_mode(SOCKET sock); 5847{; 5848 int flags = fcntl(sock, F_GETFL, 0);; 5849 if (flags < 0) {; 5850 return -1;; 5851 }; 5852 ; 5853 if (fcntl(sock, F_SETFL, (flags | O_NONBLOCK)) < 0) {; 5854 return -1;; 5855 }; 5856 return 0;; 5857}; 5858 ; 5859static int; 5860set_blocking_mode(SOCKET sock); 5861{; 5862 int flags = fcntl(sock, F_GETFL, 0);; 5863 if (flags < 0) {; 5864 return -1;; 5865 }; 5866 ; 5867 if (fcntl(sock, F_SETFL, flags & (~(int)(O_NONBLOCK))) < 0) {; 5868 return -1;; 5869 }; 5870 return 0;; 5871}; 5872#endif /* _WIN32 / else */; 5873 ; 5874/* End of initial operating system specific define block. */; 5875 ; 5876 ; 5877/* Get a random number (independent of C rand function) */; 5878static uint64_t; 5879get_random(void); 5880{; 5881 static uint64_t lfsr = 0; /* Linear feedback shift register */; 5882 static uint64_t lcg = 0; /* Linear congruential generator */; 5883 uint64_t now = mg_get_current_time_ns();; 5884 ; 5885 if (lfsr == 0) {; 5886 /* lfsr will be only 0 if has not been initialized,; 5887 * so this code is called only once. */; 5888 lfsr = mg_get_current_time_ns();; 5889 lcg = mg_get_current_time_ns();; 5890 } else {; 5891 /* Get the next step of both random number generators. */; 5892 lfsr = (lfsr >> 1); 5893 | ((((lfsr >> 0) ^ (lfsr >> 1) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1); 5894 << 63);; 5895 lcg = lcg * 6364136223846793005LL + 1442695040888963407LL;; 5896 }; 5897 ; 5898 /* Combining two pseudo-random number generators and a high resolution; 5899 * part; 5900 * of the current server time will make it hard (impossible?) to guess; 5901 * the; 5902 * next number. */; 5903 return (lfsr ^ lcg ^ now);; 5904}; 5905 ; 5906 ; 5907static int; 5908mg_poll(struct mg_pollfd *pfd,; 5909 unsigned int n,; 5910 int milliseconds,; 5911 const stop_flag_t *stop_flag); 5912{; 5913 /* Call poll, but only fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:172502,feedback,feedback,172502,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['feedback'],['feedback']
Usability,"NO));; 5836 }; 5837 }; 5838 exit(EXIT_FAILURE);; 5839 }; 5840 ; 5841 return pid;; 5842}; 5843#endif /* !NO_CGI */; 5844 ; 5845 ; 5846static int; 5847set_non_blocking_mode(SOCKET sock); 5848{; 5849 int flags = fcntl(sock, F_GETFL, 0);; 5850 if (flags < 0) {; 5851 return -1;; 5852 }; 5853 ; 5854 if (fcntl(sock, F_SETFL, (flags | O_NONBLOCK)) < 0) {; 5855 return -1;; 5856 }; 5857 return 0;; 5858}; 5859 ; 5860static int; 5861set_blocking_mode(SOCKET sock); 5862{; 5863 int flags = fcntl(sock, F_GETFL, 0);; 5864 if (flags < 0) {; 5865 return -1;; 5866 }; 5867 ; 5868 if (fcntl(sock, F_SETFL, flags & (~(int)(O_NONBLOCK))) < 0) {; 5869 return -1;; 5870 }; 5871 return 0;; 5872}; 5873#endif /* _WIN32 / else */; 5874 ; 5875/* End of initial operating system specific define block. */; 5876 ; 5877 ; 5878/* Get a random number (independent of C rand function) */; 5879static uint64_t; 5880get_random(void); 5881{; 5882 static uint64_t lfsr = 0; /* Linear feedback shift register */; 5883 static uint64_t lcg = 0; /* Linear congruential generator */; 5884 uint64_t now = mg_get_current_time_ns();; 5885 ; 5886 if (lfsr == 0) {; 5887 /* lfsr will be only 0 if has not been initialized,; 5888 * so this code is called only once. */; 5889 lfsr = mg_get_current_time_ns();; 5890 lcg = mg_get_current_time_ns();; 5891 } else {; 5892 /* Get the next step of both random number generators. */; 5893 lfsr = (lfsr >> 1); 5894 | ((((lfsr >> 0) ^ (lfsr >> 1) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1); 5895 << 63);; 5896 lcg = lcg * 6364136223846793005LL + 1442695040888963407LL;; 5897 }; 5898 ; 5899 /* Combining two pseudo-random number generators and a high resolution; 5900 * part; 5901 * of the current server time will make it hard (impossible?) to guess; 5902 * the; 5903 * next number. */; 5904 return (lfsr ^ lcg ^ now);; 5905}; 5906 ; 5907 ; 5908static int; 5909mg_poll(struct mg_pollfd *pfd,; 5910 unsigned int n,; 5911 int milliseconds,; 5912 const stop_flag_t *stop_flag); 5913{; 5914 /* Call poll, but only fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:172534,feedback,feedback,172534,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['feedback'],['feedback']
Usability,"NTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html:1119,simpl,simple,1119,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html,1,['simpl'],['simple']
Usability,"NTupleModel & ; ). friend . ◆ Internal::GetProjectedFieldsOfModel. Internal::RProjectedFields & Internal::GetProjectedFieldsOfModel ; (; RNTupleModel & ; ). friend . Member Data Documentation. ◆ fDefaultEntry. std::unique_ptr<REntry> ROOT::Experimental::RNTupleModel::fDefaultEntry. private . Contains field values corresponding to the created top-level fields, as well as registered subfields. ; Definition at line 200 of file RNTupleModel.hxx. ◆ fDescription. std::string ROOT::Experimental::RNTupleModel::fDescription. private . Free text set by the user. ; Definition at line 204 of file RNTupleModel.hxx. ◆ fFieldNames. std::unordered_set<std::string> ROOT::Experimental::RNTupleModel::fFieldNames. private . Keeps track of which field names are taken, including projected field names. ; Definition at line 202 of file RNTupleModel.hxx. ◆ fFieldZero. std::unique_ptr<RFieldZero> ROOT::Experimental::RNTupleModel::fFieldZero. private . Hierarchy of fields consisting of simple types and collections (sub trees) ; Definition at line 198 of file RNTupleModel.hxx. ◆ fIsFrozen. bool ROOT::Experimental::RNTupleModel::fIsFrozen = false. private . Changed by Freeze() / Unfreeze() and by the RUpdater. ; Definition at line 215 of file RNTupleModel.hxx. ◆ fModelId. std::uint64_t ROOT::Experimental::RNTupleModel::fModelId = 0. private . Every model has a unique ID to distinguish it from other models. ; Entries are linked to models via the ID. Cloned models get a new model ID. ; Definition at line 211 of file RNTupleModel.hxx. ◆ fProjectedFields. std::unique_ptr<Internal::RProjectedFields> ROOT::Experimental::RNTupleModel::fProjectedFields. private . The set of projected top-level fields. ; Definition at line 206 of file RNTupleModel.hxx. ◆ fRegisteredSubfields. std::unordered_set<std::string> ROOT::Experimental::RNTupleModel::fRegisteredSubfields. private . Keeps track of which subfields have been registered to be included in entries belonging to this model. ; Definition at line 208 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html:20493,simpl,simple,20493,doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleModel.html,1,['simpl'],['simple']
Usability,"NVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsRealLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:54395,clear,clearEvalErrorLog,54395,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,4,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"Name () const override;  Returns name of object. ;  ; void Print (Option_t *option="""") const override;  Printf info. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:1403,Clear,Clear,1403,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['Clear'],['Clear']
Usability,"Name () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:4487,Clear,Clear,4487,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['Clear'],['Clear']
Usability,"Name () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:5536,Clear,Clear,5536,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,4,['Clear'],['Clear']
Usability,"Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * ElementGetter (TClass *cl, const char *membername, int specials=0);  produce code to access member of given class. ;  ; const char * ElementSetter (TClass *cl, const char *membername, char *endch);  Produce code to set value to given data member. ;  ; TString GetBasicTypeName (TStreamerElement *el);  return simple data types for given TStreamerElement object ;  ; TString GetBasicTypeReaderMethodName (Int_t type, const char *realname);  return functions name to read simple data type from xml file ;  ; TString GetMemberTypeName (TDataMember *member);  returns name of simple data type for given data member ;  ; TString GetStreamerName (TClass *cl);  returns streamer function name for given class ;  ; Bool_t ProduceSTLstreamer (std::ostream &fs, TClass *cl, TStreamerSTL *el, Bool_t isWriting);  Produce code of xml streamer for data member of stl type. ;  ; void ProduceStreamerSource (std::ostream &fs, TClass *cl, TList *cllist);  Produce source code of streamer function for specified class. ;  ; void ReadSTLarg (std::ostream &fs, TString &argname, int argtyp, Bool_t isargptr, TClass *argcl, TString &tname, TString &ifcond);  Produce code to read argument of stl container from xml file. ;  ; void WriteSTLarg (std::ostream &fs, const char *accname, int argtyp, Bool_t isargptr, TClass *argcl);  Produce code to write argument of stl container to xml file. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLPlayer.html:9480,simpl,simple,9480,doc/master/classTXMLPlayer.html,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html,3,['simpl'],['simple']
Usability,"Name());; 2606 fElements->Add( el );; 2607 }; 2608 ; 2609 Compile();; 2610}; 2611 ; 2612////////////////////////////////////////////////////////////////////////////////; 2613/// If opt contains 'built', reset this StreamerInfo as if Build or BuildOld; 2614/// was never called on it (useful to force their re-running).; 2615 ; 2616void TStreamerInfo::Clear(Option_t *option); 2617{; 2618 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 2648 if (fWriteText) fWriteText->fActions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:105421,clear,clear,105421,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,Name(). static const char * TObjectRefSpy::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObjectRefSpy::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 69 of file TObjectSpy.h. ◆ DeclFileName(). static const char * TObjectRefSpy::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file TObjectSpy.h. ◆ GetObject(). TObject * TObjectRefSpy::GetObject ; (; ); const. inline . Definition at line 67 of file TObjectSpy.h. ◆ IsA(). TClass * TObjectRefSpy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TObjectSpy.h. ◆ operator=(). TObjectRefSpy & TObjectRefSpy::operator= ; (; const TObjectRefSpy & ; s). privatedelete . ◆ RecursiveRemove(). void TObjectRefSpy::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Sets the object pointer to zero if the object is deleted in the RecursiveRemove() operation. ; Reimplemented from TObject.; Definition at line 135 of file TObjectSpy.cxx. ◆ Streamer(). void TObjectRefSpy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TObjectRefSpy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TObjectSpy.h. Member Data Documentation. ◆ fObj. TObject*& TObjectRefSpy::fObj. protected . Definition at line 59 of file TObjectSpy.h. ◆ fResetMustCleanupBit. Bool_t TObjectRefSpy::fResetMustCleanupBit. protected . Definition at line 60 of file TObjectSpy.h. Libraries for TObjectRefSpy:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TObjectSpy.h; core/gui/src/TObjectSpy.cxx. TObjectRefSpy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectRefSpy.html:13073,Guid,Guide,13073,doc/master/classTObjectRefSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectRefSpy.html,1,['Guid'],['Guide']
Usability,"Name=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; double getNominal (Int_t ibin) const;  ; double getNominalError (Int_t ibin) const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; const RooArgList & paramList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; void setActual (Int_t ibin, double newVal);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:3109,simpl,simple,3109,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,1,['simpl'],['simple']
Usability,"Named type= 67, offset= 0, len=1, method=0; i= 1, TAttLine type= 0, offset= 28, len=1, method=142484480; i= 2, TAttFill type= 0, offset= 40, len=1, method=142496992; i= 3, TAttMarker type= 0, offset= 48, len=1, method=142509704; i= 4, fNcells type= 3, offset= 60, len=1, method=0; i= 5, fXaxis type= 61, offset= 64, len=1, method=1081287424; i= 6, fYaxis type= 61, offset=192, len=1, method=1081287548; i= 7, fZaxis type= 61, offset=320, len=1, method=1081287676; i= 8, fBarOffset type= 22, offset=448, len=2, method=0; i= 9, fEntries type= 28, offset=452, len=8, method=0; i=10, fContour type= 62, offset=516, len=1, method=1081287804; i=11, fSumw2 type= 62, offset=528, len=1, method=1081287924; i=12, fOption type= 65, offset=540, len=1, method=1081288044; i=13, fFunctions type= 63, offset=548, len=1, method=1081288164; 11.5.4 Optimized StreamerInfo; The entries starting with “i = 0” is the optimized format of the StreamerInfo. Consecutive data members of the same simple type and size are collapsed and read at once into an array for performance optimization.; i= 0, TNamed type= 67, offset= 0, len=1, method=0; i= 1, TAttLine type= 0, offset= 28, len=1, method=142484480; i= 2, TAttFill type= 0, offset= 40, len=1, method=142496992; i= 3, TAttMarker type= 0, offset= 48, len=1, method=142509704; For example, the five data members beginning with fEntiesand the three data members beginning with fMaximum, are put into an array called fEntries (i = 9) with the length 8.; i= 9, fEntries type= 28, offset=452, len=8, method=0; Only simple type data members are combined, object data members are not combined. For example the three axis data members remain separate. The “method” is a handle to the method that reads the object.; 11.5.5 Automatic Schema Evolution; When a class is defined in ROOT, it must include the ClassDef macro as the last line in the header file inside the class definition. The syntax is:; ClassDef(<ClassName>,<VersionNumber>); The version number identifies this particu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:496568,simpl,simple,496568,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"Named::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TRandom::Poissonvirtual ULong64_t Poisson(Double_t mean)Generates a random integer N according to a Poisson law.Definition TRandom.cxx:404; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TRandom::Integervirtual UInt_t Integer(UInt_t imax)Returns a random integer uniformly distributed on the interval [ 0, imax-1 ].Definition TRandom.cxx:361; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::Dataconst char * Data() constDefinition TString.h:376; double; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; RooFit::SupNormSetRooCmdArg SupNormSet(const RooArgSet &nset)Definition RooGlobalFunc.cxx:1092; RooFit::NormRangeRooCmdArg NormRange(const char *rangeNameList)Definition RooGlobalFunc.cxx:207; RooFit::RangeRooCmdArg Range(const char *rangeName, bool adjustNorm=true)Definition RooGlobalFunc.cxx:199; RooFit::NormalizationRooCmdArg Normalization(double scaleFactor)Definition RooGlobalFunc.cxx:195; ROOT::Splitstd::vector< std::string > Split(std::string_view str, std::string_view delims, bool skipEmpty=false)Splits a string at each character in delims.Definition StringUtils.cxx:23; RooFit::WARNING@ WARNINGDefinition RooGlobalFunc.h:60; RooFit::Eval@ EvalDefinition RooGlobalFunc.h:63; RooFit:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:169719,Clear,Clearvoid,169719,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"Namedvirtual; SortBranchesByTime()TTreeprivate; StartViewer()TTreevirtual; StopCacheLearningPhase()TTreevirtual; Streamer(TBuffer &) overrideTNtuplevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TNtupleinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TIOFeatures typedefTTreeprivate; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TNtuple(const TNtuple &)=deleteTNtupleprivate; TNtuple()TNtuple; TNtuple(const char *name, const char *title, const char *varlist, Int_t bufsize=32000)TNtuple; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TTree()TTree; TTree(const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}))TTree; TTree(const TTree &tt)=deleteTTree; UnbinnedFit(const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; UseCurrentStyle() overrideTTreevirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideTTreevirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const overrideTTreevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TNamed()TNamedvirtual; ~TNtuple() overrideTNtuple; ~TObject()TObjectvirtual; ~TTree() overrideTTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple-members.html:26284,Guid,Guide,26284,doc/master/classTNtuple-members.html,https://root.cern,https://root.cern/doc/master/classTNtuple-members.html,1,['Guid'],['Guide']
Usability,"Namespace for new Math classes and functions.; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, detail::manipulator< char_t > const &manip)Definition GenVectorIO.h:147; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::ios_dataint ios_data(int k)Definition GenVectorIO.h:39; ROOT::Math::detail::manip_tmanip_tDefinition GenVectorIO.h:35; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::set_opendetail::manipulator< char_t > set_open(char_t ch)Definition GenVectorIO.h:167; ROOT::Math::set_separatordetail::manipulator< char_t > set_separator(char_t ch)Definition GenVectorIO.h:177; ROOT::Math::human_readablestd::basic_ios< char_t, traits_t > & human_readable(std::basic_ios< char_t, traits_t > &ios)Definition GenVectorIO.h:197; ROOT::Math::machine_readablestd::basic_ios< char_t, traits_t > & machine_readable(std::basic_ios< char_t, traits_t > &ios)Definition GenVectorIO.h:208; ROOT::Math::set_closedetail::manipulator< char_t > set_close(char_t ch)Definition GenVectorIO.h:187; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathgenvectorincMathGenVectorGenVectorIO.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVectorIO_8h_source.html:7435,Guid,Guide,7435,doc/master/GenVectorIO_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVectorIO_8h_source.html,1,['Guid'],['Guide']
Usability,"Namestd::string ColumnName2ColumnTypeName(const std::string &colName, TTree *, RDataSource *, RDefineBase *, bool vector2RVec=true)Return a string containing the type of the given branch.Definition RDFUtils.cxx:229; ROOT::Internal::RDF::CheckReaderTypeMatchesvoid CheckReaderTypeMatches(const std::type_info &colType, const std::type_info &requestedType, const std::string &colName)Definition RDFUtils.cxx:402; ROOT::Internal::RDF::IsInternalColumnbool IsInternalColumn(std::string_view colName)Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_.Definition RDFUtils.cxx:381; ROOT::Internal::RDF::InterpreterDeclarevoid InterpreterDeclare(const std::string &code)Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors.Definition RDFUtils.cxx:333; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDFDefinition RArrowDS.hxx:28; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::kSTLvector@ kSTLvectorDefinition ESTLType.h:30; TClassEdit::IsSTLContROOT::ESTLType IsSTLCont(std::string_view type)type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of cont...Definition TClassEdit.cxx:1378; TClassEdit::GetSplitint GetSplit(const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone)Stores in output (after emptying it) the split type.Definition TClassEdit.cxx:1029; vecDefinition civetweb.c:1855; lTLine lDefinition textangle.C:4. treedataframesrcRDFUtils.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFUtils_8cxx_source.html:26921,Guid,Guide,26921,doc/master/RDFUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFUtils_8cxx_source.html,1,['Guid'],['Guide']
Usability,NewProto; kCXX_ConstructorProto; kCXX_ScopeProto; kCXX_DirectProto; kCXX_IndirectProto; kCXX_ScopeMember; kCXX_DirectMember; kCXX_IndirectMember; kCXX_Global; kCXX_GlobalProto; kNUM_PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds a,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:6932,Clear,ClearClasses,6932,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,8,['Clear'],"['Clear', 'ClearClasses']"
Usability,"NewSlots () const override;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; void FlipOrientation ();  Flip orientation of the pack (vertical / horizontal). ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the pack. ;  ; TGPack * GetPack () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create a new frame-slot at the last position of the pack. ;  ; virtual TEveWindowSlot * NewSlotWithWeight (Float_t w);  Create a new weighted frame-slot at the last position of the pack. ;  ; void SetHorizontal ();  ; void SetVertical (Bool_t x=kTRUE);  Set orientation of the pack (vertical / horizontal). ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:1636,Clear,ClearEveFrame,1636,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,2,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,"Next;  Container accessors: generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if containee has pointers (key or value) ;  ; Proxies_t fProxyKept;  Optimization: Keep proxies once they were created. ;  ; Proxies_t fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_type;  STL container type. ;  ; Info_t fTypeinfo;  Type information. ;  ; Value * fVal;  Descriptor of the Value_type. ;  ; int fValDiff;  Offset between two consecutive value_types (memory layout). ;  ; int fValOffset;  Offset from key to value (in maps) ;  ; std::atomic< Value * > fValue;  Descriptor of the container value type. ;  ; TStreamerInfoActions::TActionSequence * fWriteMemberWise;  ;  Protected Attributes inherited from TVirtualCollectionProxy; TClassRef fClass;  ; UInt_t fProperties;  . Inheritance diagram for TGenListProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGenListProxy(). TGenListProxy::TGenListProxy ; (; const TGenCollectionProxy & ; c). inline . Definition at line 193 of file TGenCollectionProxy.cxx. ◆ ~TGenListProxy(). TGenListProxy::~TGenListProxy ; (; ). inlineoverride . Definition at line 197 of file TGenCollectionProxy.cxx. Member Function Documentation. ◆ At(). void * TGenListProxy::At ; (; UInt_t ; idx). inlineoverridevirtual . Return the address of the value at index 'idx'. ; Reimplemented from TGenCollectionProxy.; Definition at line 201 of file TGenCollectionProxy.cxx. io/io/src/TGenCollectionProxy.cxx. TGenListProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenListProxy.html:12468,Guid,Guide,12468,doc/master/classTGenListProxy.html,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html,1,['Guid'],['Guide']
Usability,"No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMappedCategory Class Reference. ; RooMappedCategory provides a category-to-category mapping defined by pattern matching on their state labels. ; The mapping function consists of a series of wild card regular expressions. Each expression is matched to the input categories' state labels, and an associated output state label. ; Definition at line 27 of file RooMappedCategory.h. Classes; class  Entry;  . Public Member Functions;  RooMappedCategory ();  ;  RooMappedCategory (const char *name, const char *title, RooAbsCategory &inputCat, const char *defCatName=""NotMapped"", Int_t defCatIdx=NoCatIdx);  ;  RooMappedCategory (const RooMappedCategory &other, const char *name=nullptr);  ;  ~RooMappedCategory () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; bool map (const char *inKeyRegExp, const char *outKeyName, Int_t outKeyNum=NoCatIdx);  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the product operator construction. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to ostream. ;  ;  Public Member Functions inherited from RooAbsCategory;  RooAbsCategory ();  ;  RooAbsCategor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:1387,intuit,intuitively,1387,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"No Matches. df031_Stats.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Use the Stats action to extract the statistics of a column. ; Extract the statistics relative to RDataFrame columns and store them in TStatistic instances.; ; void df031_Stats() {; ; // Create a data frame and add two columns: one for the values and one for the weight.; ROOT::RDataFrame r(256);; auto rr = r.Define(""v"", [](ULong64_t e){return e;}, {""rdfentry_""}); .Define(""w"", [](ULong64_t e){return 1./(e+1);}, {""v""});; ; // Now extract the statistics, weighted, unweighted - with and without explicit types.; auto stats_eu = rr.Stats<ULong64_t>(""v"");; auto stats_ew = rr.Stats<ULong64_t, double>(""v"", ""w"");; auto stats_iu = rr.Stats(""v"");; auto stats_iw = rr.Stats(""v"", ""w"");; ; // Now print them: they are all identical of course!; stats_eu->Print();; stats_ew->Print();; stats_iu->Print();; stats_iw->Print();; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df031_StatsDefinition df031_Stats.py:1; ; OBJ: TStatistic Mean = 127.5 +- 4.628 RMS = 74.045 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 40.8 +- 12.86 RMS = 60.318 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 127.5 +- 4.628 RMS = 74.045 Count = 256 Min = 0 Max = 255; OBJ: TStatistic Mean = 40.8 +- 12.86 RMS = 60.318 Count = 256 Min = 0 Max = 255; DateApril 2019 ; AuthorDanilo Piparo (CERN) ; Definition in file df031_Stats.C. tutorialsdataframedf031_Stats.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df031__Stats_8C.html:2047,Guid,Guide,2047,doc/master/df031__Stats_8C.html,https://root.cern,https://root.cern/doc/master/df031__Stats_8C.html,1,['Guid'],['Guide']
Usability,"Node * TGeoVolumeAssembly::AddNode ; (; TGeoVolume * ; vol, . Int_t ; copy_no, . TGeoMatrix * ; mat = nullptr, . Option_t * ; option = """" . ). overridevirtual . Add a component to the assembly. ; Reimplemented from TGeoVolume.; Definition at line 2978 of file TGeoVolume.cxx. ◆ AddNodeOverlap(). void TGeoVolumeAssembly::AddNodeOverlap ; (; TGeoVolume * ; vol, . Int_t ; copy_no, . TGeoMatrix * ; mat, . Option_t * ; option . ). overridevirtual . Add an overlapping node - not allowed for assemblies. ; Reimplemented from TGeoVolume.; Definition at line 2989 of file TGeoVolume.cxx. ◆ Class(). static TClass * TGeoVolumeAssembly::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoVolumeAssembly::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoVolumeAssembly::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 359 of file TGeoVolume.h. ◆ ClearThreadData(). void TGeoVolumeAssembly::ClearThreadData ; (; ); const. overridevirtual . Reimplemented from TGeoVolume.; Definition at line 2884 of file TGeoVolume.cxx. ◆ CloneVolume(). TGeoVolume * TGeoVolumeAssembly::CloneVolume ; (; ); const. overridevirtual . Clone this volume. ; build a volume with same name, shape and medium ; Reimplemented from TGeoVolume.; Definition at line 3001 of file TGeoVolume.cxx. ◆ CreateThreadData(). void TGeoVolumeAssembly::CreateThreadData ; (; Int_t ; nthreads). overridevirtual . Reimplemented from TGeoVolume.; Definition at line 2899 of file TGeoVolume.cxx. ◆ DeclFileName(). static const char * TGeoVolumeAssembly::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 359 of file TGeoVolume.h. ◆ Divide() [1/2]. TGeoVolume * TGeoVolumeAssembly::Divide ; (; const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step, . Int_t ; numed = 0, . Option_t * ; option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:32554,Clear,ClearThreadData,32554,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['Clear'],['ClearThreadData']
Usability,"Node.; Definition at line 1135 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoSubtraction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBoolNode.; Definition at line 203 of file TGeoBoolNode.h. ◆ MakeClone(). TGeoBoolNode * TGeoSubtraction::MakeClone ; (; ); const. overridevirtual . Make a clone of this. Pointers are preserved. ; Implements TGeoBoolNode.; Definition at line 875 of file TGeoBoolNode.cxx. ◆ Paint(). void TGeoSubtraction::Paint ; (; Option_t * ; option). overridevirtual . Paint method. ; Reimplemented from TGeoBoolNode.; Definition at line 883 of file TGeoBoolNode.cxx. ◆ Safety(). Double_t TGeoSubtraction::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Compute safety distance for a union node;. ; Implements TGeoBoolNode.; Definition at line 1177 of file TGeoBoolNode.cxx. ◆ SavePrimitive(). void TGeoSubtraction::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBoolNode.; Definition at line 1201 of file TGeoBoolNode.cxx. ◆ Sizeof3D(). void TGeoSubtraction::Sizeof3D ; (; ); const. overridevirtual . Register 3D size of this shape. ; Reimplemented from TGeoBoolNode.; Definition at line 1220 of file TGeoBoolNode.cxx. ◆ Streamer(). void TGeoSubtraction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBoolNode. ◆ StreamerNVirtual(). void TGeoSubtraction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 203 of file TGeoBoolNode.h. Libraries for TGeoSubtraction:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBoolNode.h; geom/geom/src/TGeoBoolNode.cxx. TGeoSubtraction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSubtraction.html:19551,Guid,Guide,19551,doc/master/classTGeoSubtraction.html,https://root.cern,https://root.cern/doc/master/classTGeoSubtraction.html,1,['Guid'],['Guide']
Usability,"NodeProperty::GetColor ; (; ); const. Returns color of class. ; Definition at line 112 of file TStructNodeProperty.cxx. ◆ GetPixel(). Pixel_t TStructNodeProperty::GetPixel ; (; ); const. Return color in Pixel_t format. ; Definition at line 120 of file TStructNodeProperty.cxx. ◆ IsA(). TClass * TStructNodeProperty::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 37 of file TStructNodeProperty.h. ◆ IsSortable(). Bool_t TStructNodeProperty::IsSortable ; (; ); const. overridevirtual . Retruns true, because we have overrided method Compare. ; Reimplemented from TNamed.; Definition at line 128 of file TStructNodeProperty.cxx. ◆ SetColor() [1/3]. void TStructNodeProperty::SetColor ; (; const TColor & ; color). Sets the color to ""color"". ; Definition at line 136 of file TStructNodeProperty.cxx. ◆ SetColor() [2/3]. void TStructNodeProperty::SetColor ; (; Int_t ; color). Sets the color to ""color"". ; Definition at line 144 of file TStructNodeProperty.cxx. ◆ SetColor() [3/3]. void TStructNodeProperty::SetColor ; (; Pixel_t ; pixel). Sets the color to ""pixel"". ; Definition at line 152 of file TStructNodeProperty.cxx. ◆ Streamer(). void TStructNodeProperty::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TStructNodeProperty::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 37 of file TStructNodeProperty.h. Member Data Documentation. ◆ fColor. TColor TStructNodeProperty::fColor. private . Definition at line 22 of file TStructNodeProperty.h. Libraries for TStructNodeProperty:. [legend]; The documentation for this class was generated from the following files:; graf3d/gviz3d/inc/TStructNodeProperty.h; graf3d/gviz3d/src/TStructNodeProperty.cxx. TStructNodeProperty. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNodeProperty.html:15495,Guid,Guide,15495,doc/master/classTStructNodeProperty.html,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html,1,['Guid'],['Guide']
Usability,NormIntegral. Double_t TF1::fNormIntegral {}. protected . Integral of the function before being normalized. ; Definition at line 286 of file TF1.h. ◆ fNpar. Int_t TF1::fNpar {}. protected . Number of parameters. ; Definition at line 265 of file TF1.h. ◆ fNpfits. Int_t TF1::fNpfits {}. protected . Number of points used in the fit. ; Definition at line 269 of file TF1.h. ◆ fNpx. Int_t TF1::fNpx {100}. protected . Number of points used for the graphical representation. ; Definition at line 267 of file TF1.h. ◆ fParams. std::unique_ptr<TF1Parameters> TF1::fParams. protected . Pointer to Function parameters object (exists only for not-formula functions) ; Definition at line 289 of file TF1.h. ◆ fParent. TObject* TF1::fParent {nullptr}. protected . ! Parent object hooking this function (if one) ; Definition at line 282 of file TF1.h. ◆ fParErrors. std::vector<Double_t> TF1::fParErrors. protected . Array of errors of the fNpar parameters. ; Definition at line 274 of file TF1.h. ◆ fParMax. std::vector<Double_t> TF1::fParMax. protected . Array of upper limits of the fNpar parameters. ; Definition at line 276 of file TF1.h. ◆ fParMin. std::vector<Double_t> TF1::fParMin. protected . Array of lower limits of the fNpar parameters. ; Definition at line 275 of file TF1.h. ◆ fSave. std::vector<Double_t> TF1::fSave. protected . Array of fNsave function values. ; Definition at line 277 of file TF1.h. ◆ fType. EFType TF1::fType {EFType::kTemplScalar}. protected . Definition at line 268 of file TF1.h. ◆ fXmax. Double_t TF1::fXmax {-1111}. protected . Upper bounds for the range. ; Definition at line 264 of file TF1.h. ◆ fXmin. Double_t TF1::fXmin {-1111}. protected . Lower bounds for the range. ; Definition at line 263 of file TF1.h. Libraries for TF1:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF1.h; hist/hist/src/TF1.cxx. TF1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:121396,Guid,Guide,121396,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['Guid'],['Guide']
Usability,"NotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse; static TMVA::MsgLogger*fgLogger! message logger, static to save resources. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); constructor. ~TSynapse(); destructor. void SetWeight(Double_t weight); set synapse weight. Double_t GetWeightedValue(); get output of pre-neuron weighted by synapse weight. Double_t GetWeightedDelta(); get error field of post-neuron weighted by synapse weight. void AdjustWeight(); adjust the weight based on the error field all ready calculated by CalculateDelta. void CalculateDelta(); calculate/adjust the error field for this synapse. TSynapse(). Double_t GetWeight(); get the weight of the synapse. { return fWeight; }. void SetLearningRate(Double_t rate); set the learning rate. { fLearnRate = rate; }. Double_t GetLearningRate(); get the learning rate. { return fLearnRate; }. void DecayLearningRate(Double_t rate); decay the learning rate. { fLearnRate *= (1-rate); }. void SetPreNeuron(TMVA::TNeuron* pre); set the pre-neuron. { fPreNeuron = pre; }. void SetPostNeuron(TMVA::TNeuron* post); set hte post-neuron. { fPostNeuron = post; }. void InitDelta(); initialize the error field of the synpase to 0. { fDelta = 0.0; fCount = 0; }. void SetDEDw(Double_t DEDw); { fDEDw = DEDw; }. Double_t GetDEDw(); { return fDEDw; }. Double_t GetDelta(); { return fDelta; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__TSynapse.html:6679,learn,learning,6679,root/html534/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html534/TMVA__TSynapse.html,3,['learn'],['learning']
Usability,"Notify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  Sets the default maximum number of lines to be shown before <CR> when calling Scan(). ;  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:28866,learn,learning,28866,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,2,['learn'],['learning']
Usability,"Ntuple; 13#define ROOT_TNtuple; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TNtuple //; 19// //; 20// A simple tree with branches of floats. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TTree.h""; 25 ; 26class TBrowser;; 27 ; 28class TNtuple : public TTree {; 29 ; 30protected:; 31 Int_t fNvar; ///< Number of columns; 32 Float_t *fArgs; ///<! [fNvar] Array of variables; 33 ; 34 Int_t Fill() override;; 35 ; 36private:; 37 TNtuple(const TNtuple&) = delete;; 38 TNtuple& operator=(const TNtuple&) = delete;; 39 ; 40public:; 41 TNtuple();; 42 TNtuple(const char *name,const char *title, const char *varlist, Int_t bufsize=32000);; 43 ~TNtuple() override;; 44 ; 45 void Browse(TBrowser *b) override;; 46 TTree *CloneTree(Long64_t nentries = -1, Option_t* option = """") override;; 47 virtual Int_t Fill(const Float_t *x);; 48 Int_t Fill(Int_t x0) { return Fill((Float_t)x0); }; 49 Int_t Fill(Double_t x0) { return Fill((Float_t)x0); }; 50 virtual Int_t Fill(Float_t x0, Float_t x1=0, Float_t x2=0, Float_t x3=0,; 51 Float_t x4=0, Float_t x5=0, Float_t x6=0, Float_t x7=0,; 52 Float_t x8=0, Float_t x9=0, Float_t x10=0,; 53 Float_t x11=0, Float_t x12=0, Float_t x13=0,; 54 Float_t x14=0);; 55 virtual Int_t GetNvar() const { return fNvar; }; 56 Float_t *GetArgs() const { return fArgs; }; 57 Long64_t ReadStream(std::istream& inputStream, const char *branchDescriptor="""", char delimiter = ' ') override;; 58 void ResetBranchAddress(TBranch *) override;; 59 void ResetBranchAddresses() override;; 60 ; 61 ClassDefOverride(TNtuple,2); //A simple tree with branches of floats.; 62};; 63 ; 64#endif; b#define b(i)Definition RSha256.hxx:100; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNtuple_8h_source.html:2280,simpl,simple,2280,doc/master/TNtuple_8h_source.html,https://root.cern,https://root.cern/doc/master/TNtuple_8h_source.html,1,['simpl'],['simple']
Usability,"Nuclides.C It demonstrates also the decay of a mixture made of radionuclides. Concentracion of elements derived fromCa53+Sr78. 18.2.3 Tracking Media; The class TGeoMedium describes tracking media properties. This has a pointer to a material and the additional data members representing the properties related to tracking.; TGeoMedium(const char *name,Int_t numed,TGeoMaterial *mat,; Double_t *params=0);. name: name assigned to the medium; mat: pointer to a material; params: array of additional parameters. Another constructor allows effectively defining tracking parameters in GEANT3 style:; TGeoMedium(const char *name,Int_t numed,Int_t imat,Int_t ifield,; Double_t fieldm,Double_t tmaxfd,Double_t stemax,; Double_t deemax,Double_t epsil,Double_t stmin);; This constructor is reserved for creating tracking media from the VMC interface […]:. numed: user-defined medium index; imat: unique ID of the material; others: see G3 documentation. Looking at our simple world example, one can see that for creating volumes one needs to create tracking media before. The way to proceed for those not interested in performing tracking with external MC’s is to define and use only one dummy tracking medium as in the example (or a NULL pointer).; 18.2.4 User Interface for Handling Materials and Media; The TGeoManager class contains the API for accessing and handling defined materials:; TGeoManager::GetMaterial(name);; 18.3 Shapes; Shapes are geometrical objects that provide the basic modeling functionality. They provide the definition of the local coordinate system of the volume. Any volume must have a shape. Any shape recognized by the modeller has to derive from the base TGeoShape class, providing methods for:. Finding out if a point defined in their local frame is contained or not by the shape;; Computing the distance to enter/exit the shape from a local point, given a known direction;; Computing the maximum distance in any direction from a local point that does NOT result in a boundary cros",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:896055,simpl,simple,896055,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"NullBool_t IsNull() constDefinition TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::IsWhitespaceBool_t IsWhitespace() constDefinition TString.h:415; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TStyle::GetHistTopMarginDouble_t GetHistTopMargin() constDefinition TStyle.h:238; TVirtualHistPainter::SetStackvirtual void SetStack(TList *stack)=0; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::GetListOfPrimitivesvirtual TList * GetListOfPrimitives() const =0; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::GetPadvirtual TVirtualPad * GetPad(Int_t subpadnumber) const =0; TVirtualPad::Dividevirtual void Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0)=0; TVirtualPad::Classstatic TClass * Class(); TVirtualPad::Clearvoid Clear(Option_t *option="""") override=0; bool; double; int; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; Drawth1 Draw(). histhistsrcTHStack.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:53547,Clear,Clearvoid,53547,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,3,"['Clear', 'Guid']","['Clear', 'Clearvoid', 'Guide']"
Usability,NumIterations. int RooStats::BayesianCalculator::fNumIterations. private . number of iterations (when using ToyMC) ; Definition at line 187 of file BayesianCalculator.h. ◆ fPdf. RooAbsPdf* RooStats::BayesianCalculator::fPdf. private . model pdf (could contain the nuisance pdf as constraint term) ; Definition at line 165 of file BayesianCalculator.h. ◆ fPOI. RooArgSet RooStats::BayesianCalculator::fPOI. private . POI. ; Definition at line 166 of file BayesianCalculator.h. ◆ fPosteriorFunction. ROOT::Math::IGenFunction* RooStats::BayesianCalculator::fPosteriorFunction. mutableprivate . function representing the posterior ; Definition at line 178 of file BayesianCalculator.h. ◆ fPosteriorPdf. RooAbsPdf* RooStats::BayesianCalculator::fPosteriorPdf. mutableprivate . normalized (on the poi) posterior pdf ; Definition at line 177 of file BayesianCalculator.h. ◆ fPriorPdf. RooAbsPdf* RooStats::BayesianCalculator::fPriorPdf. private . prior pdf (typically for the POI) ; Definition at line 167 of file BayesianCalculator.h. ◆ fProductPdf. RooAbsPdf* RooStats::BayesianCalculator::fProductPdf. mutableprivate . internal pointer to model * prior ; Definition at line 173 of file BayesianCalculator.h. ◆ fSize. double RooStats::BayesianCalculator::fSize. private . size used for getting the interval ; Definition at line 183 of file BayesianCalculator.h. ◆ fUpper. double RooStats::BayesianCalculator::fUpper. mutableprivate . upper interval bound ; Definition at line 181 of file BayesianCalculator.h. ◆ fValidInterval. bool RooStats::BayesianCalculator::fValidInterval. mutableprivate . Definition at line 188 of file BayesianCalculator.h. Libraries for RooStats::BayesianCalculator:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/BayesianCalculator.h; roofit/roostats/src/BayesianCalculator.cxx. RooStatsBayesianCalculator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:40085,Guid,Guide,40085,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Guid'],['Guide']
Usability,"Number, double weight, double wgtErr)Set bin content of bin that was last loaded with get(std::size_t).Definition RooDataHist.cxx:1754; RooDataHist::binVolumedouble binVolume(std::size_t i) constReturn bin volume of i-th bin.Definition RooDataHist.h:118; RooDataHist::getconst RooArgSet * get() const overrideGet bin centre of current bin.Definition RooDataHist.h:82; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooDerivativeRepresents the first, second, or third order derivative of any RooAbsReal as calculated (numerically)...Definition RooDerivative.h:30; RooFirstMomentDefinition RooFirstMoment.h:26; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFitResult::covarianceMatrixconst TMatrixDSym & covarianceMatrix() constReturn covariance matrix.Definition RooFitResult.cxx:1112; RooFitResult::reducedCovarianceMatrixTMatrixDSym reducedCovarianceMatrix(const RooArgList &params) constReturn a reduced covariance matrix (Note that Vred is a simple sub-matrix of V, row/columns are order...Definition RooFitResult.cxx:1124; RooFitResult::floatParsFinalconst RooArgList & floatParsFinal() constReturn list of floating parameters after fit.Definition RooFitResult.h:111; RooFitResult::createHessePdfRooAbsPdf * createHessePdf(const RooArgSet &params) constReturn a p.d.f that represents the fit result as a multi-variate probability densisty function on the...Definition RooFitResult.cxx:1260; RooFit::Detail::CodeSquashContextA class to maintain the context for squashing of RooFit models into code.Definition CodeSquashContext.h:42; RooFit::EvalContextDefinition EvalContext.h:84; RooFit::EvalContext::atstd::span< const double > at(RooAbsArg const *arg, RooAbsArg const *caller=nullptr)Definition EvalContext.cxx:35; RooFit::EvalContext::outputstd::span< double > output()Definition EvalContext.h:112; RooFormulaVarA RooFormulaVar is a generic implementation of a real-valued obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:242682,simpl,simple,242682,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['simpl'],['simple']
Usability,"O:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_expo_expoData_right' created with bounds [20,30]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(expo_over_expo_Int[x|left,right]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_expo_over_expo_Int[x|left,right]_expoData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'full', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'full'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; Now plotting with unique normalisation for each slice.; ; ; ; Now plotting with correct norm ranges:; ; DateJune 2021 ; AuthorHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf212_plottingInRanges_blinding.py. tutorialsroofitrf212_plottingInRanges_blinding.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:6579,Guid,Guide,6579,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['Guid'],['Guide']
Usability,"OFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::ModeOutputValues::SIGMOID@ SIGMOID; TMVA::DNN::SoftSignstd::shared_ptr< std::function< double(double)> > SoftSignDefinition NeuralNet.cxx:32; TMVA::DNN::InvSoftPlusstd::shared_ptr< std::function< double(double)> > InvSoftPlusDefinition NeuralNet.cxx:19; TMVA::DNN::ReLUstd::shared_ptr< std::function< double(double)> > ReLUDefinition NeuralNet.cxx:25; TMVA::DNN::computeRegularizationdouble computeRegularization(double weight, const double &factorWeightDecay)compute the regularization (L1, L2)Definition NeuralNet.icc:209; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::InvTanhShiftstd::shared_ptr< std::function< double(double)> > InvTanhShiftDefinition NeuralNet.cxx:23; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVA::DNN::InvSymmReLUstd::shared_ptr< std::function< double(double)> > InvSymmReLUDefinition NeuralNet.cxx:21; TMVA::DNN::InvLinearstd::shared_ptr< std::function< double(double)> > InvLinearDefinition NeuralNet.cxx:16; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.icc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:78163,Guid,Guide,78163,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['Guid'],['Guide']
Usability,"OMParser & operator= (const TDOMParser &)=delete;  ; Int_t ParseContext ();  Creates a XML document for the parser. ;  . Private Attributes; TXMLDocument * fTXMLDoc;  xmlDoc ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TXMLParser; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:14829,clear,clear,14829,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['clear'],['clear']
Usability,"ONTour options. The LIST option. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL. General information: plot types and supported options; TH3 as color boxes; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Interaction with the plots; Selectable parts; Rotation and zooming; Panning; Box cut; Plot specific interactions (dynamic slicing etc.); Surface with option ""GLSURF""; TF3; Box; Iso; Parametric plot. Introduction; Histograms are drawn via the THistPainter class. Each histogram has a; pointer to its own painter (to be usable in a multithreaded program). When the; canvas has to be redrawn, the Paint function of each objects in the; pad is called. In case of histograms, TH1::Paint invokes directly; THistPainter::Paint.; To draw a histogram ""h"" is enough to do:. h->Draw();. ""h"" can be of any kind: 1D, 2D or 3D. To choose how the histogram will; be drawn, the Draw() method can be invoked with an option. For instance; to draw a 2D histogram as a lego plot it is enough to do:. h->Draw(""lego"");. THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time; (TH1::Draw), it creates a THistPainter object and saves a; pointer to this ""painter"" as a data member of the histogram. The; THistPainter class specializes in the drawing of histograms. It is; separated from the histogram so that one can have histograms without the; graphics overhead, for example in a batch program. Each histogram have its own; painter rather than a cen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:2143,usab,usable,2143,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['usab'],['usable']
Usability,"OOT and Spark | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out ROOT based da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:1016,Guid,Guides,1016,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,1,['Guid'],['Guides']
Usability,"OOT.RooConst(...); # {a,b,c} -. converted to ROOT.RooArgSet() or ROOT.RooArgList() depending on required ctor arg; # dataset name -. converted to ROOT.RooAbsData reference for any dataset residing in the workspace; # enum -. Any enum label that belongs to an enum defined in the (base); # class; ; # Make a dummy dataset pdf 'model' and import it in the workspace; data = w[""model""].generate({w[""x""]}, 1000); # Cannot call 'import' directly because this is a python keyword:; w.Import(data, Rename=""data""); ; # Construct a KEYS pdf passing a dataset name and an enum type defining the; # mirroring strategy; # w.factory(""KeysPdf::k(x,data,NoMirror,0.2)""); # Workaround for pyROOT; x = w[""x""]; k = ROOT.RooKeysPdf(""k"", ""k"", x, data, ROOT.RooKeysPdf.NoMirror, 0.2); w.Import(k, RenameAllNodes=""workspace""); ; # Print workspace contents; w.Print(); [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset modelData; [#1] INFO:ObjectHandling -- RooWorkSpace::import(w) changing name of dataset from modelData to data; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) Resolving name conflict in workspace by changing name of imported node k to k_workspace; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooKeysPdf::k_workspace; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 1; RooKeysPdf::k_workspace[ x=x ] = 0.0139016; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 0.5/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 7.45331e-07/1; RooGaussian::sig1[ x=x mean=mean sigma=0.5 ] = 1.92875e-22; RooGaussian::sig2[ x=x mean=mean sigma=1 ] = 3.72665e-06; ; datasets; --------; RooDataSet::data(x); ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf511_wsfactory_basic.py. tutorialsroofitrf511_wsfactory_basic.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf511__wsfactory__basic_8py.html:3749,Guid,Guide,3749,doc/master/rf511__wsfactory__basic_8py.html,https://root.cern,https://root.cern/doc/master/rf511__wsfactory__basic_8py.html,1,['Guid'],['Guide']
Usability,"OOT: TGeoRegionCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegionCut Class Reference. . Definition at line 20 of file TGeoRegion.h. Public Member Functions;  TGeoRegionCut ();  ;  TGeoRegionCut (const char *name, Double_t cut);  ;  ~TGeoRegionCut () override;  ; Double_t GetCut () const;  ; TClass * IsA () const override;  ; void SetCut (Double_t cut);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegionCut.html:969,Clear,Clear,969,doc/master/classTGeoRegionCut.html,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html,1,['Clear'],['Clear']
Usability,"OOT: math/mathcore/inc/Fit/DataOptions.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataOptions.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Wed Aug 30 11:04:59 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class DataOptions; 12 ; 13#ifndef ROOT_Fit_DataOptions; 14#define ROOT_Fit_DataOptions; 15 ; 16 ; 17namespace ROOT {; 18 ; 19 namespace Fit {; 20 ; 21 ; 22//___________________________________________________________________________________; 23/**; 24 DataOptions : simple structure holding the options on how the data are filled; 25 ; 26 @ingroup FitData; 27*/; 28struct DataOptions {; 29 ; 30 ; 31 /**; 32 Default constructor: use the default options; 33 */; 34 DataOptions () :; 35 fIntegral(false),; 36 fBinVolume(false),; 37 fNormBinVolume(false),; 38 fUseEmpty(false),; 39 fUseRange(false),; 40 fErrors1(false),; 41 fExpErrors(false),; 42 fCoordErrors(true),; 43 fAsymErrors(true); 44 {}; 45 ; 46 ; 47 bool fIntegral; ///< use integral of bin content instead of bin center (default is false); 48 bool fBinVolume; ///< normalize data by the bin volume (it is used in the Poisson likelihood fits); 49 bool fNormBinVolume; ///< normalize data by a normalized the bin volume (bin volume divided by a reference value); 50 bool fUseEmpty; ///< use empty bins (default is false) with a fixed error of 1; 51 bool fUseRange; ///< use the function range when creating the fit data (default is false); 52 bool fErrors1; ///< use all errors equal to 1, i.e. fit without errors (default is false); 53 bool fExpErrors; ///< use expected errors from the function and not from the data; 54 bool fCoordErrors; ///< use errors on the x coordinates when available (default is true); 55 bool f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataOptions_8h_source.html:791,simpl,simple,791,doc/master/DataOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html,1,['simpl'],['simple']
Usability,"OOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5936; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:116; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:115; ROOT::Class_ShowMembersvoid Class_ShowMembers(TClass *cl, const void *obj, TMemberInspector &)Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full defi...Definition TClass.cxx:613; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::SetClassVersionShort_t SetClassVersion(RootClass *); ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:117; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:114; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:120; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; ROOT::Internal::THashConsistencyHolderDefinition Rtypes.h:260; ROOT::Internal::THashConsistencyHolder::fgHashConsistencystatic Bool_t fgHashConsistencyDefinition Rtypes.h:261. corebaseincRtypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:33725,Guid,Guide,33725,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['Guid'],['Guide']
Usability,"OOT::Experimental::RColor::kTransparentstatic R__DLLEXPORT constexpr float kTransparentDefinition RColor.hxx:194; ROOT::Experimental::RColor::AsStringconst std::string & AsString() constReturns color as it stored as string.Definition RColor.hxx:157; ROOT::Experimental::RColor::GetGreenuint8_t GetGreen() constReturns green color component 0..255.Definition RColor.hxx:116; ROOT::Experimental::RColor::GetAlphauint8_t GetAlpha() constReturns color alpha (opacity) as uint8_t 0..255.Definition RColor.hxx:130; ROOT::Experimental::RColor::kBluestatic R__DLLEXPORT constexpr RGB_t kBlueDefinition RColor.hxx:186; ROOT::Experimental::RColor::RColorRColor()=default; ROOT::Experimental::RColor::kNavystatic R__DLLEXPORT constexpr RGB_t kNavyDefinition RColor.hxx:185; ROOT::Experimental::RColor::AsHexstd::string AsHex(bool with_alpha=false) constReturns color value in hex format like ""66FF66"" - without any prefix Alpha parameter can be optionall...Definition RColor.cxx:275; ROOT::Experimental::RColor::Clearvoid Clear()Definition RColor.hxx:171; ROOT::Experimental::RColor::kOlivestatic R__DLLEXPORT constexpr RGB_t kOliveDefinition RColor.hxx:188; ROOT::Experimental::RColor::GetOrdinalfloat GetOrdinal() constReturn ordinal value, which was set before with SetOrdinal() call.Definition RColor.cxx:124; ROOT::Experimental::RColor::HasAlphabool HasAlpha() constReturns true if color alpha (opacity) was specified.Definition RColor.hxx:103; ROOT::Experimental::RColor::kMaroonstatic R__DLLEXPORT constexpr RGB_t kMaroonDefinition RColor.hxx:190; ROOT::Experimental::RColor::GetReduint8_t GetRed() constReturns red color component 0..255.Definition RColor.hxx:109; ROOT::Experimental::RColor::GetAlphaFloatfloat GetAlphaFloat() constReturns color alpha (opacity) as float from 0..1.Definition RColor.hxx:137; ROOT::Experimental::RColor::RGB_tstd::array< uint8_t, 3 > RGB_tDefinition RColor.hxx:35; ROOT::Experimental::RColor::toHexstatic std::string toHex(uint8_t v)Converts integer from 0 to 255 into h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RColor_8hxx_source.html:13226,Clear,Clearvoid,13226,doc/master/RColor_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RColor_8hxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"OOT::Math::GaussIntegrator, ROOT::Math::GSLIntegrator, and ROOT::Math::GSLMCIntegrator. ◆ NEval(). virtual int ROOT::Math::VirtualIntegrator::NEval ; (; ); const. inlinevirtual . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Reimplemented in ROOT::Math::AdaptiveIntegratorMultiDim, ROOT::Math::GaussLegendreIntegrator, ROOT::Math::GSLIntegrator, and ROOT::Math::GSLMCIntegrator.; Definition at line 84 of file VirtualIntegrator.h. ◆ Result(). virtual double ROOT::Math::VirtualIntegrator::Result ; (; ); const. pure virtual . return the Result of the last Integral calculation ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, ROOT::Math::GaussIntegrator, ROOT::Math::GSLIntegrator, and ROOT::Math::GSLMCIntegrator. ◆ SetAbsTolerance(). virtual void ROOT::Math::VirtualIntegrator::SetAbsTolerance ; (; double ; ). pure virtual . set the desired absolute Error ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, ROOT::Math::GSLIntegrator, ROOT::Math::GSLMCIntegrator, ROOT::Math::GaussIntegrator, and ROOT::Math::GaussLegendreIntegrator. ◆ SetRelTolerance(). virtual void ROOT::Math::VirtualIntegrator::SetRelTolerance ; (; double ; ). pure virtual . set the desired relative Error ; Implemented in ROOT::Math::GaussIntegrator, ROOT::Math::AdaptiveIntegratorMultiDim, ROOT::Math::GSLIntegrator, ROOT::Math::GSLMCIntegrator, and ROOT::Math::GaussLegendreIntegrator. ◆ Status(). virtual int ROOT::Math::VirtualIntegrator::Status ; (; ); const. pure virtual . return the Error Status of the last Integral calculation ; Implemented in ROOT::Math::AdaptiveIntegratorMultiDim, ROOT::Math::GaussIntegrator, ROOT::Math::GSLIntegrator, and ROOT::Math::GSLMCIntegrator. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/VirtualIntegrator.h. ROOTMathVirtualIntegrator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html:4334,Guid,Guide,4334,doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegrator.html,1,['Guid'],['Guide']
Usability,"OOT::Math::MinimTransformFunction::operator= ; (; const MinimTransformFunction & ; ). inlineprivate . Definition at line 132 of file MinimTransformFunction.h. ◆ OriginalFunction(). const IMultiGradFunction * ROOT::Math::MinimTransformFunction::OriginalFunction ; (; ); const. inline . Definition at line 101 of file MinimTransformFunction.h. ◆ Transformation() [1/2]. const double * ROOT::Math::MinimTransformFunction::Transformation ; (; const double * ; x); const. inline . transform from internal to external result is cached also inside the class ; Definition at line 78 of file MinimTransformFunction.h. ◆ Transformation() [2/2]. void ROOT::Math::MinimTransformFunction::Transformation ; (; const double * ; xint, . double * ; xext . ); const. transform from internal to external ; Definition at line 63 of file MinimTransformFunction.cxx. Member Data Documentation. ◆ fFunc. const IMultiGradFunction* ROOT::Math::MinimTransformFunction::fFunc. private . user function ; Definition at line 143 of file MinimTransformFunction.h. ◆ fIndex. std::vector<unsigned int> ROOT::Math::MinimTransformFunction::fIndex. private . vector with external indices for internal variables ; Definition at line 142 of file MinimTransformFunction.h. ◆ fVariables. std::vector<MinimTransformVariable> ROOT::Math::MinimTransformFunction::fVariables. private . vector of variable settings and transformation function ; Definition at line 141 of file MinimTransformFunction.h. ◆ fX. std::vector<double> ROOT::Math::MinimTransformFunction::fX. mutableprivate . internal cached of external values ; Definition at line 140 of file MinimTransformFunction.h. Libraries for ROOT::Math::MinimTransformFunction:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/MinimTransformFunction.h; math/mathcore/src/MinimTransformFunction.cxx. ROOTMathMinimTransformFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html:10911,Guid,Guide,10911,doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimTransformFunction.html,1,['Guid'],['Guide']
Usability,"OOT::Math::VecExpr< ExprType, T, D >::value_type. Definition at line 67 of file Expression.h. Member Enumeration Documentation. ◆ anonymous enum. template<class ExprType , class T , unsigned int D> . anonymous enum. EnumeratorkRows . Definition at line 93 of file Expression.h. Constructor & Destructor Documentation. ◆ VecExpr(). template<class ExprType , class T , unsigned int D> . ROOT::Math::VecExpr< ExprType, T, D >::VecExpr ; (; const ExprType & ; rhs). inline . Definition at line 70 of file Expression.h. ◆ ~VecExpr(). template<class ExprType , class T , unsigned int D> . ROOT::Math::VecExpr< ExprType, T, D >::~VecExpr ; (; ). inline . Definition at line 74 of file Expression.h. Member Function Documentation. ◆ apply(). template<class ExprType , class T , unsigned int D> . T ROOT::Math::VecExpr< ExprType, T, D >::apply ; (; unsigned int ; i); const. inline . Definition at line 77 of file Expression.h. ◆ IsInUse(). template<class ExprType , class T , unsigned int D> . bool ROOT::Math::VecExpr< ExprType, T, D >::IsInUse ; (; const T * ; p); const. inline . function to determine if any use operand is being used (has same memory address) ; Definition at line 104 of file Expression.h. ◆ operator()(). template<class ExprType , class T , unsigned int D> . T ROOT::Math::VecExpr< ExprType, T, D >::operator() ; (; unsigned int ; i); const. inline . Definition at line 81 of file Expression.h. ◆ print(). template<class ExprType , class T , unsigned int D> . std::ostream & ROOT::Math::VecExpr< ExprType, T, D >::print ; (; std::ostream & ; os); const. inline . used by operator<<() ; Definition at line 110 of file Expression.h. Member Data Documentation. ◆ rhs_. template<class ExprType , class T , unsigned int D> . ExprType ROOT::Math::VecExpr< ExprType, T, D >::rhs_. private . Definition at line 124 of file Expression.h. math/smatrix/inc/Math/Expression.h. ROOTMathVecExpr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VecExpr.html:3073,Guid,Guide,3073,doc/master/classROOT_1_1Math_1_1VecExpr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VecExpr.html,1,['Guid'],['Guide']
Usability,"OOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::SimplexMinimizer&operator=(const ROOT::Minuit2::SimplexMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(); ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(const ROOT::Minuit2::SimplexMinimizer&). Data Members; private:. ROOT::Minuit2::SimplexBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimplexMinimizer(); {}. ~SimplexMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html:3549,Simpl,SimplexMinimizer,3549,root/html534/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html,9,['Simpl'],"['SimplexBuilderfBuilder', 'SimplexMinimizer', 'SimplexMinimizerSimplexMinimizer', 'SimplexSeedGeneratorfSeedGenerator']"
Usability,"OOT::RWebWindow::WebConn::~WebConn~WebConn()Destructor for WebConn Notify special HTTP request which blocks headless browser from exit.Definition RWebWindow.cxx:42; ROOT::RWebWindow::WebConn::fMutexstd::mutex fMutex! mutex must be used to protect all following dataDefinition RWebWindow.hxx:84; ROOT::RWebWindow::WebConn::fDoingSendbool fDoingSend! true when performing send operationDefinition RWebWindow.hxx:89; ROOT::RWebWindow::WebConn::fWasFirstbool fWasFirst! indicate if this was first connection, will be reinjected also on first placeDefinition RWebWindow.hxx:74; ROOT::RWebWindow::WebConn::fSendCreditsint fSendCredits! how many send operation can be performed without confirmation from other sideDefinition RWebWindow.hxx:87; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, unsigned wsid)Definition RWebWindow.hxx:96; ROOT::RWebWindow::WebConn::fNewKeystd::string fNewKey! new key if connection request reloadDefinition RWebWindow.hxx:77; ROOT::RWebWindow::WebConn::fWSIdunsigned fWSId! websocket idDefinition RWebWindow.hxx:82; ROOT::RWebWindow::WebConn::fSendStamptimestamp_t fSendStamp! last server operation, always used from window threadDefinition RWebWindow.hxx:80; ROOT::RWebWindow::WebConn::fRecvStamptimestamp_t fRecvStamp! last receive operation, protected with connection mutexDefinition RWebWindow.hxx:85; ROOT::RWebWindow::WebConn::fRecvCountint fRecvCount! number of received packets, should return back with next sendingDefinition RWebWindow.hxx:86; ROOT::RWebWindow::WebConn::ResetStampsvoid ResetStamps()Definition RWebWindow.hxx:104; ROOT::RWebWindow::WebConn::fQueuestd::queue< QueueItem > fQueue! output queueDefinition RWebWindow.hxx:92; ROOT::RWebWindow::WebConn::fDisplayHandlestd::unique_ptr< RWebDisplayHandle > fDisplayHandle! handle assigned with started web display (when exists)Definition RWebWindow.hxx:78. guiwebdisplayincROOTRWebWindow.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:51601,Guid,Guide,51601,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['Guid'],['Guide']
Usability,"OOT::gCoreMutex);; 324 ; 325 if (IsOwner()); 326 Delete();; 327 else; 328 Init(fSize, fLowerBound);; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Remove empty slots from array.; 333 ; 334void TObjArray::Compress(); 335{; 336 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 337 ; 338 Int_t j = 0;; 339 ; 340 for (Int_t i = 0; i < fSize; i++) {; 341 if (fCont[i]) {; 342 fCont[j] = fCont[i];; 343 j++;; 344 }; 345 }; 346 ; 347 fLast = j - 1;; 348 ; 349 for ( ; j < fSize; j++); 350 fCont[j] = nullptr;; 351}; 352 ; 353////////////////////////////////////////////////////////////////////////////////; 354/// Remove all objects from the array AND delete all heap based objects.; 355 ; 356void TObjArray::Delete(Option_t * /* opt */); 357{; 358 // In some case, for example TParallelCoord, a list (the pad's list of; 359 // primitives) will contain both the container and the containees; 360 // (the TParallelCoordVar) but if the Clear is being called from; 361 // the destructor of the container of this list, one of the first; 362 // thing done will be the remove the container (the pad) from the; 363 // list (of Primitives of the canvas) that was connecting it; 364 // (indirectly) to the list of cleanups.; 365 // Note: The Code in TParallelCoordVar was changed (circa June 2017),; 366 // to no longer have this behavior and thus rely on this code (by moving; 367 // from using Draw to Paint) but the structure might still exist elsewhere; 368 // so we keep this comment here.; 369 ; 370 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 371 ; 372 // Since we set fCont[i] only after the deletion is completed, we do not; 373 // lose the connection and thus do not need to take any special action.; 374 for (Int_t i = 0; i < fSize; i++) {; 375 if (fCont[i] && fCont[i]->IsOnHeap()) {; 376 TCollection::GarbageCollect(fCont[i]);; 377 fCont[i] = nullptr;; 378 }; 379 }; 380 ; 381 Init(fSize, fLowerBound);; 382}; 383 ; 384///////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:11691,Clear,Clear,11691,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['Clear'],['Clear']
Usability,"OSXGLManager::PanObject ; (; TVirtualGLPainter * ; o, . Int_t ; x, . Int_t ; y . ). overridevirtual . Implements TGLManager.; Definition at line 209 of file TGOSXGL.mm. ◆ PlotSelected(). Bool_t TGOSXGLManager::PlotSelected ; (; TVirtualGLPainter * ; plot, . Int_t ; px, . Int_t ; py . ). overridevirtual . Implements TGLManager.; Definition at line 182 of file TGOSXGL.mm. ◆ PrintViewer(). void TGOSXGLManager::PrintViewer ; (; TVirtualViewer3D * ; vv). overridevirtual . Implements TGLManager.; Definition at line 218 of file TGOSXGL.mm. ◆ ReadGLBuffer(). void TGOSXGLManager::ReadGLBuffer ; (; Int_t ; devInd). overridevirtual . Implements TGLManager.; Definition at line 160 of file TGOSXGL.mm. ◆ ResizeOffScreenDevice(). Bool_t TGOSXGLManager::ResizeOffScreenDevice ; (; Int_t ; devInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Implements TGLManager.; Definition at line 133 of file TGOSXGL.mm. ◆ SelectManip(). Bool_t TGOSXGLManager::SelectManip ; (; TVirtualGLManip * ; manip, . const TGLCamera * ; camera, . const TGLRect * ; rect, . const TGLBoundingBox * ; sceneBox . ). overridevirtual . Implements TGLManager.; Definition at line 168 of file TGOSXGL.mm. ◆ SelectOffScreenDevice(). void TGOSXGLManager::SelectOffScreenDevice ; (; Int_t ; devInd). overridevirtual . Implements TGLManager.; Definition at line 141 of file TGOSXGL.mm. ◆ Streamer(). void TGOSXGLManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLManager. ◆ StreamerNVirtual(). void TGOSXGLManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TGOSXGL.h. Member Data Documentation. ◆ fCtxToWin. CtxToWindowMap_t TGOSXGLManager::fCtxToWin. private . Definition at line 52 of file TGOSXGL.h. graf2d/cocoa/inc/TGOSXGL.h; graf2d/cocoa/src/TGOSXGL.mm. TGOSXGLManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGOSXGLManager.html:18728,Guid,Guide,18728,doc/master/classTGOSXGLManager.html,https://root.cern,https://root.cern/doc/master/classTGOSXGLManager.html,1,['Guid'],['Guide']
Usability,"OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-c,\v--create \tCreates\vsomething."" },; {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; ; // results in; ; -c, Creates; --create something.; -k, Destroys; --kill something.; You can mix lines that do not use \t or \v with those that do. The plain lines will not mess up the table layout. Alignment of the table columns will be maintained even across these interjections.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""----------------------------------"" },; {..., ""-k, --kill \tDestroys somethi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:6982,simpl,simply,6982,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,1,['simpl'],['simply']
Usability,"OT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | download; 6.06 - browse | download; 6.04 - browse | download; 6.02 - browse | download; 5.34 - browse | download; 5.32 - browse | download; 5.30 - browse | download; 5.28 - browse | download; 5.26 - browse | download; 5.24 - browse | download. Additionally, the source code is accessible via:. Browsing the Git repository using gitweb; Github. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:1897,Guid,Guide,1897,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['Guid'],['Guide']
Usability,"OT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:120455,simpl,simpleTableTest,120455,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simpleTableTest']
Usability,"OT team in 1996. He developed the first version of the HTML documentation system (THtml) and worked on the first version of the 3D graphics system. Nenad left in 1997.; Paul Russo; Paul joined the ROOT team at Fermilab in 2005 and has been focusing on support and developing CINT.; Pere Mato; Pere Mato was the project leader from 2014 to 2017. He was the driving force behind ROOT's migration to CMake and has contributed to PyROOT.; Richard Maunder; Richard worked as project associate on the 3D graphics OpenGL based system.; Susan Panacek; Susan wrote the first ROOT User's Guide and developed a number of ROOT tutorials.; Timur Pocheptsov; Timur worked as a project associate on many different aspects of ROOT, but mostly on the OpenGL accelerated 3D graphics and the native macOS Cocoa based GUI. Timur also ported ROOT to the iPad. He continues to maintain the OpenGL and Cocoa code till this day.; Valeri Fine; Valeri was a member of the ROOT team from 1998-2000. He made the initial port to Windows. Currently he is the maintainer of the ROOT-Qt interface.; Valeri Onuchin; Valeri worked as a project associate on many different aspects of ROOT, but mostly in the GUI and graphics area. He did develop the signal/slot functionality and the GUI builder. He also developed the Carrot ROOT enabled web server. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:6722,Guid,Guides,6722,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"OT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRootCanvas Class ReferenceGUI » Low level GUI widgets. ; This class creates a main window with menubar, scrollbars and a drawing area. ; The widgets used are the new native ROOT GUI widgets. ; Definition at line 34 of file TRootCanvas.h. Public Member Functions;  TRootCanvas (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  Create a basic ROOT canvas. ;  ;  TRootCanvas (TCanvas *c=nullptr, const char *name=""ROOT Canvas"", UInt_t width=500, UInt_t height=300);  Create a basic ROOT canvas. ;  ;  ~TRootCanvas () override;  Delete ROOT basic canvas. ;  ; void Activated (Int_t id);  Slot handling tab switching in the browser, to properly set the canvas and the model to the editor. ;  ; void AdjustSize ();  Keep the same canvas size while docking/undocking toolbar. ;  ; void Close () override;  Called via TCanvasImp interface by TCanvas. ;  ; void CloseWindow () override;  In case window is closed via WM we get here. ;  ; void EventInfo (Int_t event, Int_t px, Int_t py, TObject *selected);  Display a tooltip with infos about the primitive below the cursor. ;  ; void FitCanvas ();  Fit canvas container to current window size. ;  ; void ForceUpdate () override;  ; UInt_t GetCheight () const;  Return height of canvas container. ;  ; UInt_t GetCwidth () const;  Return width of canvas container. ;  ; TGMenuBar * GetMenuBar () const;  ; TGLayoutHints * GetMenuBarItemLayout () const;  ; TGStatusBar * GetStatusBar () const;  ; TGDockableFrame * GetToolDock () const;  ; UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Gets the size and position of the window containing the canvas. ;  ; Bool_t HasEditor () const override;  Returns kTRUE if the editor is shown. ;  ; Bool_t HasMenuBar (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:1066,undo,undocking,1066,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['undo'],['undocking']
Usability,"OT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; normal.c File Reference. #include ""gluos.h""; #include ""mesh.h""; #include ""tess.h""; #include ""normal.h""; #include <math.h>; #include <assert.h>. Include dependency graph for normal.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ABS(x)   ((x) < 0 ? -(x) : (x));  ; #define Dot(u, v)   (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);  ; #define FALSE   0;  ; #define S_UNIT_X   1.0;  ; #define S_UNIT_Y   0.0;  ; #define TRUE   1;  . Functions; void __gl_projectPolygon (GLUtesselator *tess);  ; static void CheckOrientation (GLUtesselator *tess);  ; static void ComputeNormal (GLUtesselator *tess, GLdouble norm[3]);  ; static int LongAxis (GLdouble v[3]);  . Macro Definition Documentation. ◆ ABS. #define ABS; (;  ; x);    ((x) < 0 ? -(x) : (x)). Definition at line 65 of file normal.c. ◆ Dot. #define Dot; (;  ; u, .  ; v . );    (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]). Definition at line 49 of file normal.c. ◆ FALSE. #define FALSE   0. Definition at line 46 of file normal.c. ◆ S_UNIT_X. #define S_UNIT_X   1.0. Definition at line 190 of file normal.c. ◆ S_UNIT_Y. #define S_UNIT_Y   0.0. Definition at line 191 of file normal.c. ◆ TRUE. #define TRUE   1. Definition at line 43 of file normal.c. Function Documentation. ◆ __gl_projectPolygon(). void __gl_projectPolygon ; (; GLUtesselator * ; tess). Definition at line 198 of file normal.c. ◆ CheckOrientation(). static void CheckOrientation ; (; GLUtesselator * ; tess). static . Definition at line 141 of file normal.c. ◆ ComputeNormal(). static void ComputeNormal ; (; GLUtesselator * ; tess, . GLdouble ; norm[3] . ). static . Definition at line 76 of file normal.c. ◆ LongAxis(). static int LongAxis ; (; GLdouble ; v[3]). static . Definition at line 67 of file normal.c. graf3deve7glunormal.c. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/normal_8c.html:1973,Guid,Guide,1973,doc/master/normal_8c.html,https://root.cern,https://root.cern/doc/master/normal_8c.html,1,['Guid'],['Guide']
Usability,"OT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  Nsurfaces;  Ntbb;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:83227,simpl,simple,83227,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['simpl'],['simple']
Usability,"OT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLook",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:79547,simpl,simple,79547,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['simpl'],['simple']
Usability,"OT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNodeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNodeBase(). ROOT::RGeomNodeBase::RGeomNodeBase ; (; int ; _id = 0). inline . Definition at line 56 of file RGeomData.hxx. Member Function Documentation. ◆ GetArg(). const char * ROOT::RGeomNodeBase::GetArg ; (; int ; kind). inline . Returns argument for regexp. ; Definition at line 61 of file RGeomData.hxx. ◆ IsVisible(). bool ROOT::RGeomNodeBase::IsVisible ; (; ); const. inline . Definition at line 58 of file RGeomData.hxx. Member Data Documentation. ◆ chlds. std::vector<int> ROOT::RGeomNodeBase::chlds. list of childs id ; Definition at line 48 of file RGeomData.hxx. ◆ color. std::string ROOT::RGeomNodeBase::color. rgb code in hex format ; Definition at line 52 of file RGeomData.hxx. ◆ id. int ROOT::RGeomNodeBase::id {0}. node id, index in array ; Definition at line 46 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeomNodeBase::material. name of the material ; Definition at line 53 of file RGeomData.hxx. ◆ name. std::string ROOT::RGeomNodeBase::name. node name ; Definition at line 47 of file RGeomData.hxx. ◆ nochlds. bool ROOT::RGeomNodeBase::nochlds {false}. how far in hierarchy depth should be scanned ; Definition at line 50 of file RGeomData.hxx. ◆ sortid. int ROOT::RGeomNodeBase::sortid {0}. ! place in sorted array, to check cuts, or id of original node when used search structures ; Definition at line 54 of file RGeomData.hxx. ◆ vis. int ROOT::RGeomNodeBase::vis {0}. visibility flag, 0 - off, 1 - only when level==0, 99 - always ; Definition at line 49 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeBase:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeBase. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomNodeBase.html:2965,Guid,Guide,2965,doc/v632/classROOT_1_1RGeomNodeBase.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNodeBase.html,1,['Guid'],['Guide']
Usability,"OT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs resources that are taken by using the default error handler.Definition TErrorDefaultHandler.cxx:47; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetMacroPathTString & GetMacroPath()Definition TROOT.cxx:476; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854; v@ vDefinition rootcling_impl.cxx:3687; FileStat_tDefinition TSystem.h:122; FileStat_t::fModeInt_t fModeDefinition TSystem.h:125; socketDefinition civetweb.c:1894; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. corebasesrcTROOT.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:174102,Guid,Guide,174102,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['Guid'],['Guide']
Usability,"OT: tutorials/graphs/gerrors.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gerrors.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a graph with error bars . ; void gerrors() {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; ; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; ; const Int_t n = 10;; Float_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; TGraphErrors *gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; ; c1->Update();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; gerrorsDefinition gerrors.py:1; AuthorRene Brun ; Definition in file gerrors.C. tutorialsgraphsgerrors.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gerrors_8C.html:1924,Guid,Guide,1924,doc/master/gerrors_8C.html,https://root.cern,https://root.cern/doc/master/gerrors_8C.html,1,['Guid'],['Guide']
Usability,"OT::EFunctionMatchMode=ROOT::kConversionMatch) constTInterpreterinlinevirtual; ClassInfo_IsValidMethod(ClassInfo_t *, const char *, const char *, Bool_t, Longptr_t *, ROOT::EFunctionMatchMode=ROOT::kConversionMatch) constTInterpreterinlinevirtual; ClassInfo_Name(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, int) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, int, void *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, void *) constTInterpreterinlinevirtual; ClassInfo_Next(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Property(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Size(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Tagnum(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Title(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_TmpltName(ClassInfo_t *) constTInterpreterinlinevirtual; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearFileBusy()=0TInterpreterpure virtual; ClearStack()=0TInterpreterpure virtual; Clone(const char *newname="""") const overrideTNamedvirtual; CodeComplete(const std::string &, size_t &, std::vector< std::string > &)TInterpreterinlinevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CreateEnum(void *VD, TClass *cl) const =0TInterpreterpure virtual; CreateListOfBaseClasses(TClass *cl) const =0TInterpreterpure virtual; CreateListOfDataMembers(TClass *cl) const =0TInterpreterpure virtual; CreateListOfMethodArgs(TFunction *m) const =0TInterpreterpure virtual; CreateListOfMethods(TClass *cl) const =0TInterpreterpure virtual; CreateTemporary() constTInterpreterinline; DataMemberInfo_ArrayDim(DataMemberInfo_t *) constTInterpreterinlinevirtual; DataMemberInfo_Delete(DataMemberInfo_t *) constTInterpreterinlinevirtual; DataMemberInfo_Factory(ClassInfo_t *, TDictionary::EMemberSelection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter-members.html:8988,Clear,Clear,8988,doc/master/classTInterpreter-members.html,https://root.cern,https://root.cern/doc/master/classTInterpreter-members.html,1,['Clear'],['Clear']
Usability,"OT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; file  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ; file  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ; file  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df004_cutFlowReport.py;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df005_fillAnyObject.C;   Using the generic Fill action. ;  ; file  df006_ranges.C;   Use Range to limit the amount of data processed. ;  ; file  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ; file  df0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__dataframe.html:1556,guid,guide,1556,doc/master/group__tutorial__dataframe.html,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html,1,['guid'],['guide']
Usability,"OT::Experimental::RCanvas::RCanvas ; (; ). inline . Create a temporary RCanvas; for long-lived ones please use Create(). ; Definition at line 88 of file RCanvas.hxx. ◆ ~RCanvas(). ROOT::Experimental::RCanvas::~RCanvas ; (; ). overridedefault . Member Function Documentation. ◆ AddPanel(). template<class PANEL > . bool ROOT::Experimental::RCanvas::AddPanel ; (; std::shared_ptr< PANEL > & ; panel). inline . Insert panel into the canvas, canvas should be shown at this moment. ; Definition at line 139 of file RCanvas.hxx. ◆ ClearOnClose(). void ROOT::Experimental::RCanvas::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 239 of file RCanvas.cxx. ◆ ClearShown(). void ROOT::Experimental::RCanvas::ClearShown ; (; ). inline . clear IsShown() flag ; Definition at line 123 of file RCanvas.hxx. ◆ ClearUpdated(). void ROOT::Experimental::RCanvas::ClearUpdated ; (; ). inline . clear IsUpdated() flag ; Definition at line 169 of file RCanvas.hxx. ◆ Create(). std::shared_ptr< ROOT::Experimental::RCanvas > ROOT::Experimental::RCanvas::Create ; (; const std::string & ; title). static . Create new canvas instance. ; Definition at line 89 of file RCanvas.cxx. ◆ CreateJSON(). std::string ROOT::Experimental::RCanvas::CreateJSON ; (; ). Provide JSON which can be used for offline display. ; Create JSON data for the canvas Can be used of offline display with JSROOT. ; Definition at line 211 of file RCanvas.cxx. ◆ GetCanvas() [1/2]. const RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ); const. inlineoverridevirtual . Access to the top-most canvas, if any (const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 92 of file RCanvas.hxx. ◆ GetCanvas() [2/2]. RCanvas * ROOT::Experimental::RCanvas::GetCanvas ; (; ). inlineoverridevirtual . Access to the top-most canvas, if any (non-const version). ; Implements ROOT::Experimental::RPadBase.; Definition at line 95 of file RCanvas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:10656,clear,clear,10656,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['clear'],['clear']
Usability,"OT::Fit::FitDatainline; Range() constROOT::Fit::FitDatainline; Size() constROOT::Fit::FitDatainline; UnBinData(unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false)ROOT::Fit::UnBinDatainlineexplicit; UnBinData(const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false)ROOT::Fit::UnBinDatainlineexplicit; UnBinData(const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int n, const double *dataX)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int n, const double *dataX, const double *dataY, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int n, const double *dataX, const double *dataY, const double *dataZ, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int n, unsigned int dim, Iterator dataItr, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int maxpoints, const double *dataX, const DataRange &range)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int maxpoints, const double *dataX, const double *dataY, const DataRange &range, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int maxpoints, const double *dataX, const double *dataY, const double *dataZ, const DataRange &range, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(unsigned int maxpoints, unsigned int dim, Iterator dataItr, const DataRange &range, bool isWeighted=false)ROOT::Fit::UnBinDatainline; UnBinData(const UnBinData &)ROOT::Fit::UnBinData; UnWrap()ROOT::Fit::FitDatainlineprotected; VectorPadding(const unsigned)ROOT::Fit::FitDatainlineprotectedstatic; Weight(unsigned int ipoint) constROOT::Fit::UnBinDatainline; WeightsPtr(unsigned int ipoint) constROOT::Fit::UnBinDatainline; ~FitData()ROOT::Fit::FitDatavirtual; ~UnBinData() overrideROOT::Fit::UnBinDatainline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData-members.html:4844,Guid,Guide,4844,doc/master/classROOT_1_1Fit_1_1UnBinData-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1UnBinData-members.html,1,['Guid'],['Guide']
Usability,"OT::Math::Quaternion::operator== ; (; const Quaternion & ; rhs); const. inline . Equality/inequality operators. ; Definition at line 302 of file Quaternion.h. ◆ Rectify(). void ROOT::Math::Quaternion::Rectify ; (; ). Re-adjust components to eliminate small deviations from |Q| = 1 orthonormality. ; Definition at line 34 of file Quaternion.cxx. ◆ SetComponents() [1/2]. template<class IT > . void ROOT::Math::Quaternion::SetComponents ; (; IT ; begin, . IT ; end . ). inline . Set the four components given an iterator to the start of the desired data, and another to the end (4 past start). ; Definition at line 113 of file Quaternion.h. ◆ SetComponents() [2/2]. void ROOT::Math::Quaternion::SetComponents ; (; Scalar ; u, . Scalar ; i, . Scalar ; j, . Scalar ; k . ). inline . Set the components based on four Scalars. ; The sum of the squares of these Scalars should be 1; no checking is done. ; Definition at line 151 of file Quaternion.h. ◆ U(). Scalar ROOT::Math::Quaternion::U ; (; ); const. inline . Access to the four quaternion components: U() is the coefficient of the identity Pauli matrix, I(), J() and K() are the coefficients of sigma_x, sigma_y, sigma_z. ; Definition at line 167 of file Quaternion.h. Member Data Documentation. ◆ fI. Scalar ROOT::Math::Quaternion::fI. private . Definition at line 316 of file Quaternion.h. ◆ fJ. Scalar ROOT::Math::Quaternion::fJ. private . Definition at line 317 of file Quaternion.h. ◆ fK. Scalar ROOT::Math::Quaternion::fK. private . Definition at line 318 of file Quaternion.h. ◆ fU. Scalar ROOT::Math::Quaternion::fU. private . Definition at line 315 of file Quaternion.h. Libraries for ROOT::Math::Quaternion:. [legend]; The documentation for this class was generated from the following files:; math/genvector/inc/Math/GenVector/Quaternion.h; math/genvector/src/Quaternion.cxx; math/genvector/src/QuaternionXaxial.cxx. ROOTMathQuaternion. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Quaternion.html:13619,Guid,Guide,13619,doc/master/classROOT_1_1Math_1_1Quaternion.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Quaternion.html,1,['Guid'],['Guide']
Usability,"OT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__ScanMinimizer.html:3868,Simpl,SimplexSeedGeneratorfSeedGenerator,3868,root/html534/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"OT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1242,Clear,ClearCache,1242,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,6,"['Clear', 'clear']","['Clear', 'ClearCache', 'clear']"
Usability,"OT; » CORE; » BASE; » TQUndoManager. class TQUndoManager: public TQCommand. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:1286,undo,undo,1286,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,6,['undo'],['undo']
Usability,"OTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to sep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:131037,Simpl,Simple,131037,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Simpl'],['Simple']
Usability,"Obj, int siz). protected:. voidTGenCollectionProxy::CheckFunctions() const; virtual voidTGenCollectionProxy::DeleteItem(Bool_t force, void* ptr) const; voidExpand(UInt_t nCurr, UInt_t left); TGenCollectionProxy*TGenCollectionProxy::Initialize() const; virtual TGenCollectionProxy*InitializeEx(); voidReadItems(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodTGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of the key_type; stringTGenCollectionProxy::fNameName of the class being proxied.; TGenCollectionProxy::MethodTGenCollectionProxy::fNextCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEmulatedCollectionProxy.html:4284,clear,clear,4284,root/html528/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TEmulatedCollectionProxy.html,2,['clear'],['clear']
Usability,"ObjArray * fVolumesDefinition TGeoManager.h:95; TGeoManager::fValuePNEIdInt_t * fValuePNEIdDefinition TGeoManager.h:143; TGeoManager::GetAlignableEntryByUIDTGeoPNEntry * GetAlignableEntryByUID(Int_t uid) constRetrieves an existing alignable object having a preset UID.Definition TGeoManager.cxx:3390; TGeoManager::AddGDMLMatrixvoid AddGDMLMatrix(TGDMLMatrix *mat)Add GDML matrix;.Definition TGeoManager.cxx:2010; TGeoManager::fTimeCutBool_t fTimeCutDefinition TGeoManager.h:85; TGeoManager::SetExportPrecisionstatic void SetExportPrecision(UInt_t prec)Definition TGeoManager.cxx:4336; TGeoManager::AddBorderSurfacevoid AddBorderSurface(TGeoBorderSurface *surf)Add border surface;.Definition TGeoManager.cxx:2067; TGeoManager::SetClippingShapevoid SetClippingShape(TGeoShape *clip)Set a user-defined shape as clipping for ray tracing.Definition TGeoManager.cxx:2366; TGeoManager::fCurrentVolumeTGeoVolume * fCurrentVolumecurrent navigatorDefinition TGeoManager.h:124; TGeoManager::ClearOverlapsvoid ClearOverlaps()Clear the list of overlaps.Definition TGeoManager.cxx:1605; TGeoManager::MakeConsTGeoVolume * MakeCons(const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a cone segment shape with given medium.Definition TGeoManager.cxx:3266; TGeoManager::fHashGVolumesTHashList * fHashGVolumeshash list of volumes providing fast searchDefinition TGeoManager.h:137; TGeoManager::fVisOptionInt_t fVisOptionDefinition TGeoManager.h:71; TGeoManager::fgMutexstatic std::mutex fgMutexDefinition TGeoManager.h:49; TGeoManager::IsInPhiRangeBool_t IsInPhiRange() constTrue if current node is in phi range.Definition TGeoManager.cxx:2834; TGeoManager::cdvirtual Bool_t cd(const char *path="""")Browse the tree of nodes starting from fTopNode according to pathname.Definition TGeoManager.cxx:1707; TGeoManager::SearchNodeTGeoNode * SearchNode(Bool_t downwards=kFALSE, const TGeoNode *s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:184110,Clear,ClearOverlapsvoid,184110,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,3,['Clear'],"['Clear', 'ClearOverlaps', 'ClearOverlapsvoid']"
Usability,"ObjArray * fVolumesDefinition TGeoVolume.h:268; TGeoVolumeMulti::GetNdivInt_t GetNdiv() constDefinition TGeoVolume.h:295; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::GetNextNodeIndexvirtual Int_t GetNextNodeIndex() constDefinition TGeoVolume.h:168; TGeoVolume::WeightADouble_t WeightA() constAnalytical computation of the weight.Definition TGeoVolume.cxx:2517; TGeoVolume::IsCylVoxelsBool_t IsCylVoxels() constDefinition TGeoVolume.h:151; TGeoVolume::AddNodeOffsetvoid AddNodeOffset(TGeoVolume *vol, Int_t copy_no, Double_t offset=0, Option_t *option="""")Add a division node to the list of nodes.Definition TGeoVolume.cxx:1018; TGeoVolume::SetVisContainersvoid SetVisContainers(Bool_t flag=kTRUE) overrideSet visibility for containers.Definition TGeoVolume.cxx:2365; TGeoVolume::cdvirtual void cd(Int_t inode) constActualize matrix of node indexed <inode>Definition TGeoVolume.cxx:965; TGeoVolume::ClearThreadDatavirtual void ClearThreadData() constDefinition TGeoVolume.cxx:425; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::IsVisContainersBool_t IsVisContainers() constDefinition TGeoVolume.h:157; TGeoVolume::SetVoxelFindervoid SetVoxelFinder(TGeoVoxelFinder *finder)Definition TGeoVolume.h:243; TGeoVolume::RemoveNodevoid RemoveNode(TGeoNode *node)Remove an existing daughter.Definition TGeoVolume.cxx:2251; TGeoVolume::GetNodeIndexInt_t GetNodeIndex(const TGeoNode *node, Int_t *check_list, Int_t ncheck) constGet the index of a daughter within check_list by providing the node pointer.Definition TGeoVolume.cxx:1729; TGeoVolume::ValidBool_t Valid() constCheck if the shape of this volume is valid.Definition TGeoVolume.cxx:2409; TGeoVolume::GetNodeTGeoNode * GetNode(Int_t i) constDefinition TGeoVolume.h:182; TGeoVolume::GetUserExtensionTGeoExtension * GetUserExtension() constDefinition TGeoVolume.h:132; TGeoVolume::Is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:30015,Clear,ClearThreadDatavirtual,30015,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavirtual']"
Usability,"ObjArray TTreeFormula::fMethods. protected . ! List of leaf method calls ; Definition at line 105 of file TTreeFormula.h. ◆ fMultiplicity. Int_t TTreeFormula::fMultiplicity. protected . Indicator of the variability of the formula. ; Definition at line 100 of file TTreeFormula.h. ◆ fNcodes. Int_t TTreeFormula::fNcodes. protected . Number of leaves referenced in formula. ; Definition at line 98 of file TTreeFormula.h. ◆ fNdata. Int_t TTreeFormula::fNdata[kMAXCODES]. protected . ! This caches the physical number of element in the leaf or data member. ; Definition at line 97 of file TTreeFormula.h. ◆ fNdimensions. Int_t TTreeFormula::fNdimensions[kMAXCODES]. protected . Number of array dimensions in each leaf. ; Definition at line 113 of file TTreeFormula.h. ◆ fNeedLoading. bool TTreeFormula::fNeedLoading. protected . ! If true, the current entry has not been loaded yet. ; Definition at line 111 of file TTreeFormula.h. ◆ fNindex. Int_t TTreeFormula::fNindex. protected . Size of fIndex. ; Definition at line 101 of file TTreeFormula.h. ◆ fQuickLoad. bool TTreeFormula::fQuickLoad. protected . ! If true, branch GetEntry is only called when the entry number changes. ; Definition at line 110 of file TTreeFormula.h. ◆ fRealInstanceCache. RealInstanceCache TTreeFormula::fRealInstanceCache. protected . ! Cache accelerating the GetRealInstance function ; Definition at line 132 of file TTreeFormula.h. ◆ fTree. TTree* TTreeFormula::fTree. protected . ! Pointer to Tree ; Definition at line 95 of file TTreeFormula.h. ◆ fVarIndexes. TTreeFormula* TTreeFormula::fVarIndexes[kMAXCODES][kMAXFORMDIM]. protected . Pointer to a variable index. ; Definition at line 120 of file TTreeFormula.h. Libraries for TTreeFormula:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TTreeFormula.h; tree/treeplayer/src/TTreeFormula.cxx. TTreeFormula. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:56308,Guid,Guide,56308,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Guid'],['Guide']
Usability,"ObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:16823,undo,undo,16823,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,3,['undo'],['undo']
Usability,"Object * RooGamma::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 26 of file RooGamma.h. ◆ DeclFileName(). static const char * RooGamma::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file RooGamma.h. ◆ doEval(). void RooGamma::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Gamma PDF. ; Reimplemented from RooAbsReal.; Definition at line 97 of file RooGamma.cxx. ◆ evaluate(). double RooGamma::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 83 of file RooGamma.cxx. ◆ generateEvent(). void RooGamma::generateEvent ; (; Int_t ; code). overridevirtual . algorithm adapted from code example in: Marsaglia, G. ; and Tsang, W. W. A Simple Method for Generating Gamma Variables ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000; The speed of this algorithm depends on the speed of generating normal variates. The algorithm is limited to \( \gamma \geq 0 \) ! ; Reimplemented from RooAbsPdf.; Definition at line 182 of file RooGamma.cxx. ◆ getAnalyticalIntegral(). Int_t RooGamma::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 105 of file RooGamma.cxx. ◆ getGenerator(). Int_t RooGamma::getGenerator ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:77218,Simpl,Simple,77218,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Simpl'],['Simple']
Usability,"Object* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); TGeoNavigator*AddNavigator(); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t i) const; virtual TObject*TObjArray::Before(const TObject* obj) const; virtual Int_tTObjArray::BinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoNavigatorArray.html:2063,Clear,Clear,2063,root/html532/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html532/TGeoNavigatorArray.html,2,['Clear'],['Clear']
Usability,"Object* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); virtual Bool_tCanCompress(TQCommand* c) const; virtual Bool_tCanMerge(TQCommand* c) const; virtual Bool_tCanRedo() const; virtual Bool_tCanUndo() const; Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(TQCommand* c); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:4935,Clear,Clear,4935,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,3,['Clear'],['Clear']
Usability,"Object* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); virtual Bool_tCanCompress(TQCommand* c) const; virtual Bool_tCanMerge(TQCommand* c) const; virtual Bool_tCanRedo() const; virtual Bool_tCanUndo() const; Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(TQCommand* c); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:4935,Clear,Clear,4935,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['Clear'],['Clear']
Usability,"Object. ; Reimplemented from RooAbsCategoryLValue.; Definition at line 432 of file RooCategory.cxx. ◆ StreamerNVirtual(). void RooCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 141 of file RooCategory.h. ◆ writeToStream(). void RooCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . compact only at the moment ; Reimplemented from RooAbsCategory.; Definition at line 306 of file RooCategory.cxx. Member Data Documentation. ◆ _ranges. std::shared_ptr<RangeMap_t> RooCategory::_ranges {new RangeMap_t()}. private . Map range names to allowed category states. ; Note that this must be shared between copies, so categories in datasets have the same ranges as their counterparts outside of the dataset. ; Definition at line 131 of file RooCategory.h. ◆ _rangesPointerForIO. RangeMap_t* RooCategory::_rangesPointerForIO {nullptr}. private . Pointer to the same object as _ranges, but not shared for I/O. ; Definition at line 132 of file RooCategory.h. ◆ _sharedRangeIOHelper. std::map< std::string, std::weak_ptr< RooCategory::RangeMap_t > > RooCategory::_sharedRangeIOHelper. staticprivate . Helper for restoring shared ranges from current versions of this class read from files. Maps category names to shared ranges. ; Definition at line 139 of file RooCategory.h. ◆ _uuidToSharedRangeIOHelper. std::map< RooSharedProperties::UUID, std::weak_ptr< RooCategory::RangeMap_t > > RooCategory::_uuidToSharedRangeIOHelper. staticprivate . Helper for restoring shared ranges from old versions of this class read from files. Maps TUUID names to shared ranges. ; Definition at line 137 of file RooCategory.h. Libraries for RooCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCategory.h; roofit/roofitcore/src/RooCategory.cxx. RooCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:67284,Guid,Guide,67284,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Guid'],['Guide']
Usability,Object. ◆ StreamerNVirtual(). void TRolke::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TRolke.h. Member Data Documentation. ◆ f_b. Double_t TRolke::f_b. private . Definition at line 57 of file TRolke.h. ◆ f_bm. Double_t TRolke::f_bm. private . Definition at line 50 of file TRolke.h. ◆ f_e. Double_t TRolke::f_e. private . Definition at line 52 of file TRolke.h. ◆ f_em. Double_t TRolke::f_em. private . Definition at line 51 of file TRolke.h. ◆ f_m. Int_t TRolke::f_m. private . Definition at line 58 of file TRolke.h. ◆ f_mid. Int_t TRolke::f_mid. private . Definition at line 53 of file TRolke.h. ◆ f_sdb. Double_t TRolke::f_sdb. private . Definition at line 55 of file TRolke.h. ◆ f_sde. Double_t TRolke::f_sde. private . Definition at line 54 of file TRolke.h. ◆ f_tau. Double_t TRolke::f_tau. private . Definition at line 56 of file TRolke.h. ◆ f_x. Int_t TRolke::f_x. private . Definition at line 47 of file TRolke.h. ◆ f_y. Int_t TRolke::f_y. private . Definition at line 48 of file TRolke.h. ◆ f_z. Int_t TRolke::f_z. private . Definition at line 49 of file TRolke.h. ◆ fBounding. bool TRolke::fBounding. private . Definition at line 40 of file TRolke.h. ◆ fCL. Double_t TRolke::fCL. private . Definition at line 37 of file TRolke.h. ◆ fLowerLimit. Double_t TRolke::fLowerLimit. private . Definition at line 39 of file TRolke.h. ◆ fNumWarningsDeprecated1. Int_t TRolke::fNumWarningsDeprecated1. private . Definition at line 42 of file TRolke.h. ◆ fNumWarningsDeprecated2. Int_t TRolke::fNumWarningsDeprecated2. private . Definition at line 43 of file TRolke.h. ◆ fUpperLimit. Double_t TRolke::fUpperLimit. private . Definition at line 38 of file TRolke.h. Libraries for TRolke:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TRolke.h; math/physics/src/TRolke.cxx. TRolke. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:43267,Guid,Guide,43267,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Guid'],['Guide']
Usability,"Object.; Definition at line 128 of file TBranchBrowsable.h. ◆ IsMethodBrowsable(). bool TMethodBrowsable::IsMethodBrowsable ; (; const TMethod * ; m). static . A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ; A method called *, Get*, or get* will not be browsable if there is a persistent data member called f*, _*, or m*, as data member access is faster than method access. Examples: if one of fX, _X, or mX is a persistent data member, the methods GetX(), getX(), and X() will not be browsable. ; Definition at line 530 of file TBranchBrowsable.cxx. ◆ Register(). void TMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 585 of file TBranchBrowsable.cxx. ◆ Streamer(). void TMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TBranchBrowsable.h. ◆ Unregister(). void TMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 595 of file TBranchBrowsable.cxx. Member Data Documentation. ◆ fMethod. TMethod* TMethodBrowsable::fMethod {nullptr}. private . Definition at line 127 of file TBranchBrowsable.h. Libraries for TMethodBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchBrowsable.h; tree/tree/src/TBranchBrowsable.cxx. TMethodBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodBrowsable.html:20477,Guid,Guide,20477,doc/master/classTMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html,1,['Guid'],['Guide']
Usability,Object.; Definition at line 399 of file TVector3.cxx. ◆ StreamerNVirtual(). void TVector3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 188 of file TVector3.h. ◆ Theta(). Double_t TVector3::Theta ; (; ); const. Return the polar angle. ; Definition at line 244 of file TVector3.cxx. ◆ Transform(). TVector3 & TVector3::Transform ; (; const TRotation & ; m). Transform this vector with a TRotation. ; Definition at line 196 of file TVector3.cxx. ◆ Unit(). TVector3 TVector3::Unit ; (; ); const. Return unit vector parallel to this. ; Definition at line 252 of file TVector3.cxx. ◆ x(). Double_t TVector3::x ; (; ); const. inline . Definition at line 213 of file TVector3.h. ◆ X(). Double_t TVector3::X ; (; ); const. inline . Definition at line 216 of file TVector3.h. ◆ XYvector(). TVector2 TVector3::XYvector ; (; ); const. inline . Definition at line 413 of file TVector3.h. ◆ y(). Double_t TVector3::y ; (; ); const. inline . Definition at line 214 of file TVector3.h. ◆ Y(). Double_t TVector3::Y ; (; ); const. inline . Definition at line 217 of file TVector3.h. ◆ z(). Double_t TVector3::z ; (; ); const. inline . Definition at line 215 of file TVector3.h. ◆ Z(). Double_t TVector3::Z ; (; ); const. inline . Definition at line 218 of file TVector3.h. Friends And Related Symbol Documentation. ◆ TLorentzVector. friend class TLorentzVector. friend . Definition at line 191 of file TVector3.h. Member Data Documentation. ◆ fX. Double_t TVector3::fX. private . Definition at line 185 of file TVector3.h. ◆ fY. Double_t TVector3::fY. private . Definition at line 185 of file TVector3.h. ◆ fZ. Double_t TVector3::fZ. private . Definition at line 185 of file TVector3.h. Libraries for TVector3:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TVector3.h; math/physics/src/TVector3.cxx. TVector3. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVector3.html:28554,Guid,Guide,28554,doc/master/classTVector3.html,https://root.cern,https://root.cern/doc/master/classTVector3.html,1,['Guid'],['Guide']
Usability,"Object::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoVolume::RegisterYourself(Option_t* option = """"); voidTGeoVolume::RemoveNode(TGeoNode* node); TGeoNode*TGeoVolume::ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); voidTGeoVolume::ReplayCreation(const TGeoVolume* other); voidTGeoAtt::ResetAttBit(UInt_t f); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTGeoVolume::SaveAs(const char* filename, Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTGeoVolume::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoVolume::SelectVolume(Bool_t clear = kFALSE); voidTGeoVolume::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoVolume::SetActivity(Bool_t flag = kTRUE); voidTGeoVolume::SetAdded(); voidTGeoVolume::SetAsTopVolume()TOGGLE GETTER ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTGeoVolume::SetAttVisibility(Bool_t vis); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentNodeIndex(Int_t index); voidTGeoVolume::SetCurrentPoint(Double_t x, Double_t y, Double_t z); voidTGeoVolume::SetCylVoxels(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoVolume::SetField(TObject* field); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidTGeoVolume::SetFinder(TGeoPatternFinder* finder); voidTGeoVolume::SetInvisible(); virtual voidTAttLine::SetLineAttributes()MENU ; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolumeAssembly.html:17408,clear,clear,17408,root/html528/TGeoVolumeAssembly.html,https://root.cern,https://root.cern/root/html528/TGeoVolumeAssembly.html,3,['clear'],['clear']
Usability,"Object::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoVolume::RegisterYourself(Option_t* option = """"); voidTGeoVolume::RemoveNode(TGeoNode* node); TGeoNode*TGeoVolume::ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); voidTGeoVolume::ReplayCreation(const TGeoVolume* other); voidTGeoAtt::ResetAttBit(UInt_t f); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTGeoVolume::SaveAs(const char* filename, Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTGeoVolume::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoVolume::SelectVolume(Bool_t clear = kFALSE); voidTGeoVolume::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoVolume::SetActivity(Bool_t flag = kTRUE); voidTGeoVolume::SetAdded(); voidTGeoVolume::SetAsTopVolume()TOGGLE GETTER ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTGeoVolume::SetAttVisibility(Bool_t vis); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoVolume::SetCurrentPoint(Double_t x, Double_t y, Double_t z); voidTGeoVolume::SetCylVoxels(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoVolume::SetField(TObject* field); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidTGeoVolume::SetFinder(TGeoPatternFinder* finder); voidTGeoVolume::SetInvisible(); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t lcolor); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolumeMulti.html:17586,clear,clear,17586,root/html528/TGeoVolumeMulti.html,https://root.cern,https://root.cern/root/html528/TGeoVolumeMulti.html,3,['clear'],['clear']
Usability,"Object::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:7034,Simpl,SimpleInterval,7034,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,9,['Simpl'],"['SimpleInterval', 'SimpleIntervalRooStats']"
Usability,"Object::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGScrollBar&operator=(const TGScrollBar&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGScrollBar.html:14779,Clear,ClearFlags,14779,root/html528/TGScrollBar.html,https://root.cern,https://root.cern/root/html528/TGScrollBar.html,4,['Clear'],['ClearFlags']
Usability,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTDataSet::AddMain(TDataSet* set); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); static TTableDescriptor*CreateDescriptor(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidSetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char *const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. enum TTable::EColumnType { kNAN; kFloat; kInt; kLong; kShort; kDouble; kUInt; kULong; kUShort; kUChar; kChar; kPtr; kBool; kEndColumnType; };; enum TTable::ETableBits { kIsNotOwn; };; enum TDataSet::EDataSetPass { kContinue; kPrune; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TIndexTable.html:12451,Clear,Clear,12451,root/html528/TIndexTable.html,https://root.cern,https://root.cern/root/html528/TIndexTable.html,4,['Clear'],['Clear']
Usability,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTDataSet::AddMain(TDataSet* set); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); static TTableDescriptor*CreateDescriptor(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidSetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char*const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. static const char*TTable::fgTypeName[13]; static TDataSet::EDataSetPassTDataSet::kAll; static TDataSet::ESetBitsTDataSet::kArray; static TObject::(anonymous)TObject::kBitMask; static TTable::EColumnTypeTTable::kBool; static TObject::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIndexTable.html:12670,Clear,Clear,12670,root/html602/TIndexTable.html,https://root.cern,https://root.cern/root/html602/TIndexTable.html,2,['Clear'],['Clear']
Usability,"Object::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*TGeoCombiTrans::fRotationrotation matrix; Double_tfScale[3]scale (x, y, z); TStringTNamed::fTitleobject title; Double_tTGeoCombiTrans::fTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGenTrans(); dummy ctor. TGeoGenTrans(const char* name); constructor. TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. ~TGeoGenTrans(); destructor. void Clear(Option_t* option = """"); clear the fields of this transformation. void SetScale(Double_t sx, Double_t sy, Double_t sz); set the scale. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t Normalize(); A scale transformation should be normalized by sx*sy*sz factor. TGeoMatrix& operator=(const TGeoGenTrans& ); Preventing warnings with -Weffc++ in GCC since the behaviour of operator * was chosen so by design. const Double_t * GetScale() const. TGeoMatrix * MakeClone() const. void SetScale(Double_t sx, Double_t sy, Double_t sz). TGeoGenTrans(). » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoGenTrans.html:16734,Clear,Clear,16734,root/html604/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html604/TGeoGenTrans.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"Object::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*TGeoCombiTrans::fRotationrotation matrix; Double_tfScale[3]scale (x, y, z); TStringTNamed::fTitleobject title; Double_tTGeoCombiTrans::fTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGenTrans(); dummy ctor. TGeoGenTrans(const char* name); constructor. TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. ~TGeoGenTrans(); destructor. void Clear(Option_t* option = """"); clear the fields of this transformation. void SetScale(Double_t sx, Double_t sy, Double_t sz); set the scale. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t Normalize(); A scale transformation should be normalized by sx*sy*sz factor. TGeoMatrix& operator=(const TGeoGenTrans& ); Preventing warnings with -Weffc++ in GCC since the behaviour of operator * was chosen so by design. const Double_t * GetScale() const. TGeoMatrix * MakeClone() const. void SetScale(Double_t sx, Double_t sy, Double_t sz). TGeoGenTrans(). » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoGenTrans.html:16734,Clear,Clear,16734,root/html602/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html602/TGeoGenTrans.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"Object::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TVirtualPerfStats::EEventTypekNumEventType; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TVirtualPerfStats::EEventTypekPacket; static TVirtualPerfStats::EEventTypekRate; static TObject::(anonymous)TObject::kSingleKey; static TVirtualPerfStats::EEventTypekStart; static TVirtualPerfStats::EEventTypekStop; static TVirtualPerfStats::EEventTypekUnDefined; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TVirtualPerfStats. ←. TPerfStats. TTreePerfStats. Function documentation; TVirtualPerfStats *& CurrentPerfStats(); Return the current ROOT perf stats if any. const char * EventType(TVirtualPerfStats::EEventType type); Return the name of the event type. virtual ~TVirtualPerfStats(); {}. void SimpleEvent(TVirtualPerfStats::EEventType type). void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead). void FileOpenEvent(TFile* file, const char* filename, Double_t start). void FileReadEvent(TFile* file, Int_t len, Double_t start). void UnzipEvent(TObject* tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen). void RateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead). Long64_t GetBytesRead() const. void SetNumEvents(Long64_t num). Long64_t GetNumEvents() const. » Author: Kristjan Gulbrandsen 11/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualPerfStats.html:7602,Simpl,SimpleEvent,7602,root/html604/TVirtualPerfStats.html,https://root.cern,https://root.cern/root/html604/TVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"Object::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TVirtualPerfStats::EEventTypekNumEventType; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TVirtualPerfStats::EEventTypekPacket; static TVirtualPerfStats::EEventTypekRate; static TObject::(anonymous)TObject::kSingleKey; static TVirtualPerfStats::EEventTypekStart; static TVirtualPerfStats::EEventTypekStop; static TVirtualPerfStats::EEventTypekUnDefined; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TVirtualPerfStats. ←. TPerfStats. TTreePerfStats. Function documentation; TVirtualPerfStats *& CurrentPerfStats(); Return the current ROOT perf stats if any. const char * EventType(TVirtualPerfStats::EEventType type); Return the name of the event type. virtual ~TVirtualPerfStats(); {}. void SimpleEvent(TVirtualPerfStats::EEventType type). void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead). void FileOpenEvent(TFile* file, const char* filename, Double_t start). void FileReadEvent(TFile* file, Int_t len, Double_t start). void UnzipEvent(TObject* tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen). void RateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead). Long64_t GetBytesRead() const. void SetNumEvents(Long64_t num). Long64_t GetNumEvents() const. » Author: Kristjan Gulbrandsen 11/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualPerfStats.html:7602,Simpl,SimpleEvent,7602,root/html602/TVirtualPerfStats.html,https://root.cern,https://root.cern/root/html602/TVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"Object; TStreamerObjectPointer Streamer element of type pointer to a TObject; TStreamerSTL Streamer element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringRef ; TStringToken String tokenizer using PCRE for finding next tokens.; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform comand line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TText Text; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:120181,simpl,simple,120181,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['simpl'],['simple']
Usability,"Object; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool ; TNamed*RooAbsCollection::_structureTag! Structure tag; TNamed*RooAbsCollection::_typedStructureTag! Typed structure tag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgSet.html:14469,Clear,Clear,14469,root/html532/RooArgSet.html,https://root.cern,https://root.cern/root/html532/RooArgSet.html,2,['Clear'],['Clear']
Usability,"ObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TTreeReaderGenerator.h>. Inheritance diagram for ROOT::Internal::TTreeReaderDescriptor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ReaderType. enum ROOT::Internal::TTreeReaderDescriptor::ReaderType. EnumeratorkValue ; kArray . Definition at line 42 of file TTreeReaderGenerator.h. Constructor & Destructor Documentation. ◆ TTreeReaderDescriptor(). ROOT::Internal::TTreeReaderDescriptor::TTreeReaderDescriptor ; (; ReaderType ; type, . TString ; dataType, . TString ; name, . TString ; branchName . ). inline . Definition at line 48 of file TTreeReaderGenerator.h. Member Data Documentation. ◆ fBranchName. TString ROOT::Internal::TTreeReaderDescriptor::fBranchName. Branch corresponding to the reader. ; Definition at line 46 of file TTreeReaderGenerator.h. ◆ fDataType. TString ROOT::Internal::TTreeReaderDescriptor::fDataType. Data type of reader. ; Definition at line 44 of file TTreeReaderGenerator.h. ◆ fName. TString ROOT::Internal::TTreeReaderDescriptor::fName. Reader name. ; Definition at line 45 of file TTreeReaderGenerator.h. ◆ fType. ReaderType ROOT::Internal::TTreeReaderDescriptor::fType. Type of the reader: Value or Array. ; Definition at line 43 of file TTreeReaderGenerator.h. Libraries for ROOT::Internal::TTreeReaderDescriptor:. [legend]; The documentation for this class was generated from the following file:; tree/treeplayer/inc/TTreeReaderGenerator.h. ROOTInternalTTreeReaderDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:11448,Guid,Guide,11448,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,1,['Guid'],['Guide']
Usability,"ObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for TProofPerfAnalysis::TPackInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPackInfo() [1/2]. TProofPerfAnalysis::TPackInfo::TPackInfo ; (; const char * ; ord, . const char * ; host . ). inline . Definition at line 102 of file TProofPerfAnalysis.cxx. ◆ TPackInfo() [2/2]. TProofPerfAnalysis::TPackInfo::TPackInfo ; (; const char * ; ord, . const char * ; host, . Float_t ; start, . Float_t ; stop, . Long64_t ; sz, . Double_t ; mbr . ). inline . Definition at line 103 of file TProofPerfAnalysis.cxx. Member Function Documentation. ◆ Print(). void TProofPerfAnalysis::TPackInfo::Print ; (; Option_t * ; option = """"); const. inlineoverridevirtual . Print TNamed name and title. ; Reimplemented from TNamed.; Definition at line 109 of file TProofPerfAnalysis.cxx. Member Data Documentation. ◆ fMBRate. Double_t TProofPerfAnalysis::TPackInfo::fMBRate. Definition at line 108 of file TProofPerfAnalysis.cxx. ◆ fSize. Long64_t TProofPerfAnalysis::TPackInfo::fSize. Definition at line 107 of file TProofPerfAnalysis.cxx. ◆ fStart. Float_t TProofPerfAnalysis::TPackInfo::fStart. Definition at line 105 of file TProofPerfAnalysis.cxx. ◆ fStop. Float_t TProofPerfAnalysis::TPackInfo::fStop. Definition at line 106 of file TProofPerfAnalysis.cxx. proof/proofbench/src/TProofPerfAnalysis.cxx. TProofPerfAnalysisTPackInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TPackInfo.html:12348,Guid,Guide,12348,doc/master/classTProofPerfAnalysis_1_1TPackInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TPackInfo.html,1,['Guid'],['Guide']
Usability,"ObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3008 ; 3009 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 3010 else fWriteObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This may be the case for empty classes (e.g., TAtt3D).; 3032 // We still need to properly set the size of emulated classes (i.e. add the virtual table); 3033 if (fClass->GetState() == TClass::kEmulated && fNVirtualInfoLoc!=0) {; 3034 fSize = sizeof(TStreamerInfo*);; 3035 }; 3036 fComp = new TCompInfo[1];; 3037 fCompFull = new TCompInfo*[1];; 3038 fCompOpt = new TCompInfo*[1];; 3039 fCompOpt[0] = fCompFull[0] = &(fComp[0]);; 3040 SetIsCompiled();; 3041 return;; 3042 }; 3043 ; 3044 // At most half of the elements can be used to hold optimized versions.; 3045 // We use the bottom to hold the optimized-into elements and the non-optimized elements; 3046 // and the top to hold the original copy of the optimized out elements.; 3047 fNslots = ndata + ndata/2 + 1;; 3048 Int_t optiOut = 0;; 3049 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:132567,clear,clear,132567,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"ObjectWise. private . ! List of read action resulting from the compilation. ; Definition at line 104 of file TStreamerInfo.h. ◆ fReadText. TStreamerInfoActions::TActionSequence* TStreamerInfo::fReadText. private . ! List of text read action resulting from the compilation, used for JSON. ; Definition at line 107 of file TStreamerInfo.h. ◆ fSize. Int_t TStreamerInfo::fSize. private . !size of the persistent class ; Definition at line 92 of file TStreamerInfo.h. ◆ fVirtualInfoLoc. ULong_t* TStreamerInfo::fVirtualInfoLoc. private . ![fNVirtualInfoLoc] Location of the pointer to the TStreamerInfo inside the object (when emulated) ; Definition at line 103 of file TStreamerInfo.h. ◆ fWriteMemberWise. TStreamerInfoActions::TActionSequence* TStreamerInfo::fWriteMemberWise. private . ! List of write action resulting from the compilation for use in member wise streaming. ; Definition at line 109 of file TStreamerInfo.h. ◆ fWriteMemberWiseVecPtr. TStreamerInfoActions::TActionSequence* TStreamerInfo::fWriteMemberWiseVecPtr. private . ! List of write action resulting from the compilation for use in member wise streaming. ; Definition at line 110 of file TStreamerInfo.h. ◆ fWriteObjectWise. TStreamerInfoActions::TActionSequence* TStreamerInfo::fWriteObjectWise. private . ! List of write action resulting from the compilation. ; Definition at line 108 of file TStreamerInfo.h. ◆ fWriteText. TStreamerInfoActions::TActionSequence* TStreamerInfo::fWriteText. private . ! List of text write action resulting for the compilation, used for JSON. ; Definition at line 111 of file TStreamerInfo.h. Libraries for TStreamerInfo:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TStreamerInfo.h; io/io/src/TStreamerInfo.cxx; io/io/src/TStreamerInfoActions.cxx; io/io/src/TStreamerInfoReadBuffer.cxx; io/io/src/TStreamerInfoWriteBuffer.cxx. TStreamerInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:73175,Guid,Guide,73175,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['Guid'],['Guide']
Usability,"Observables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50834,clear,clearValueDirty,50834,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearValueDirty']
Usability,"ObservablesRooCmdArg ConditionalObservables(Args_t &&... argsOrArgSet)Create a RooCmdArg to declare conditional observables.Definition RooGlobalFunc.h:278; RooFit::ProjWDataRooCmdArg ProjWData(const RooAbsData &projData, bool binData=false)Definition RooGlobalFunc.cxx:179; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFit::LineStyleRooCmdArg LineStyle(Style_t style)Definition RooGlobalFunc.cxx:240; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::Math::fabsVecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > fabs(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:131; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf303_conditionalDefinition rf303_conditional.py:1; ; RooDataSet::modelData[x,y] = 6850 entries; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_over_model_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_over_model_Int[x]_d) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf303_conditional.C. tutorialsroofitrf303_conditional.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf303__conditional_8C.html:8787,Guid,Guide,8787,doc/master/rf303__conditional_8C.html,https://root.cern,https://root.cern/doc/master/rf303__conditional_8C.html,1,['Guid'],['Guide']
Usability,"Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDrawFeedback(). TDrawFeedback::TDrawFeedback ; (; TProof * ; proof = 0, . TSeqCollection * ; names = 0 . ). Constructor. ; Definition at line 41 of file TDrawFeedback.cxx. ◆ ~TDrawFeedback(). TDrawFeedback::~TDrawFeedback ; (; ). override . Destructor. ; Definition at line 80 of file TDrawFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TDrawFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDrawFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDrawFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 54 of file TDrawFeedback.h. ◆ DeclFileName(). static const char * TDrawFeedback::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file TDrawFeedback.h. ◆ Feedback(). void TDrawFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 93 of file TDrawFeedback.cxx. ◆ GetName(). const char * TDrawFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 50 of file TDrawFeedback.h. ◆ Hash(). ULong_t TDrawFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:16058,Feedback,Feedback,16058,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['Feedback'],['Feedback']
Usability,"Option_t *option) const; 2499{; 2500 if (!func) {; 2501 Error(""Chisquare"",""Function pointer is Null - return -1"");; 2502 return -1;; 2503 }; 2504 ; 2505 TString opt(option); opt.ToUpper();; 2506 bool useRange = opt.Contains(""R"");; 2507 ROOT::Fit::EChisquareType type = ROOT::Fit::EChisquareType::kNeyman; // default chi2 with observed error; 2508 if (opt.Contains(""L"")) type = ROOT::Fit::EChisquareType::kPLikeRatio;; 2509 else if (opt.Contains(""P"")) type = ROOT::Fit::EChisquareType::kPearson;; 2510 ; 2511 return ROOT::Fit::Chisquare(*this, *func, useRange, type);; 2512}; 2513 ; 2514////////////////////////////////////////////////////////////////////////////////; 2515/// Remove all the content from the underflow and overflow bins, without changing the number of entries; 2516/// After calling this method, every undeflow and overflow bins will have content 0.0; 2517/// The Sumw2 is also cleared, since there is no more content in the bins; 2518 ; 2519void TH1::ClearUnderflowAndOverflow(); 2520{; 2521 for (Int_t bin = 0; bin < fNcells; ++bin); 2522 if (IsBinUnderflow(bin) || IsBinOverflow(bin)) {; 2523 UpdateBinContent(bin, 0.0);; 2524 if (fSumw2.fN) fSumw2.fArray[bin] = 0.0;; 2525 }; 2526}; 2527 ; 2528////////////////////////////////////////////////////////////////////////////////; 2529/// Compute integral (normalized cumulative sum of bins) w/o under/overflows; 2530/// The result is stored in fIntegral and used by the GetRandom functions.; 2531/// This function is automatically called by GetRandom when the fIntegral; 2532/// array does not exist or when the number of entries in the histogram; 2533/// has changed since the previous call to GetRandom.; 2534/// The resulting integral is normalized to 1.; 2535/// If the routine is called with the onlyPositive flag set an error will; 2536/// be produced in case of negative bin content and a NaN value returned; 2537/// \return 1 if success, 0 if integral is zero, NAN if onlyPositive-test fails; 2538 ; 2539Double_t TH1::ComputeIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:99962,clear,cleared,99962,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,"['Clear', 'clear']","['ClearUnderflowAndOverflow', 'cleared']"
Usability,"Option_t *option="""") constTObjectvirtual; SaveColor(std::ostream &out, Int_t ci)TColorstatic; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAlpha(Float_t a)TColorinlinevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetColorThreshold(Float_t t)TColorstatic; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetGrayscale(Bool_t set=kTRUE)TColorstatic; SetName(const char *name) overrideTColorvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPalette(Int_t ncolors, Int_t *colors, Float_t alpha=1.)TColorstatic; SetRGB(Float_t r, Float_t g, Float_t b)TColorvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTColorvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TColorinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TColor()TColor; TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char *name="""", Float_t a=1)TColor; TColor(Float_t r, Float_t g, Float_t b, Float_t a=1)TColor; TColor(const TColor &color)TColor; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TColor()TColorvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor-members.html:9587,Guid,Guide,9587,doc/master/classTColor-members.html,https://root.cern,https://root.cern/doc/master/classTColor-members.html,1,['Guid'],['Guide']
Usability,"Option_t * ; option = ""*""); const. overridevirtual . List the tree of tasks. ; Indentation is used to identify the task tree. ; Reimplemented from TNamed.; Definition at line 359 of file TTask.cxx. ◆ operator=(). TTask & TTask::operator= ; (; const TTask & ; tt). Assignment operator. ; Definition at line 124 of file TTask.cxx. ◆ SetActive(). void TTask::SetActive ; (; Bool_t ; active = kTRUE). inline . Definition at line 71 of file TTask.h. ◆ SetBreakin(). void TTask::SetBreakin ; (; Int_t ; breakin = 1). inline . Definition at line 72 of file TTask.h. ◆ SetBreakout(). void TTask::SetBreakout ; (; Int_t ; breakout = 1). inline . Definition at line 73 of file TTask.h. ◆ Streamer(). void TTask::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TTask::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TTask.h. Member Data Documentation. ◆ fActive. Bool_t TTask::fActive. protected . Definition at line 43 of file TTask.h. ◆ fBreakin. Int_t TTask::fBreakin. protected . Definition at line 40 of file TTask.h. ◆ fBreakout. Int_t TTask::fBreakout. protected . Definition at line 41 of file TTask.h. ◆ fgBeginTask. TTask * TTask::fgBeginTask = nullptr. staticprotected . Definition at line 45 of file TTask.h. ◆ fgBreakPoint. TTask * TTask::fgBreakPoint = nullptr. staticprotected . Definition at line 46 of file TTask.h. ◆ fHasExecuted. Bool_t TTask::fHasExecuted. protected . Definition at line 42 of file TTask.h. ◆ fOption. TString TTask::fOption. protected . Definition at line 39 of file TTask.h. ◆ fTasks. TList* TTask::fTasks. protected . Definition at line 38 of file TTask.h. Libraries for TTask:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TTask.h; core/base/src/TTask.cxx. TTask. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:22184,Guid,Guide,22184,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['Guid'],['Guide']
Usability,OrdCollection::Remove ; (; TObject * ; obj). overridevirtual . Remove object from collection. ; Implements TCollection.; Definition at line 365 of file TOrdCollection.cxx. ◆ RemoveAt(). TObject * TOrdCollection::RemoveAt ; (; Int_t ; idx). overridevirtual . Remove object at index idx. ; Reimplemented from TSeqCollection.; Definition at line 328 of file TOrdCollection.cxx. ◆ SetCapacity(). void TOrdCollection::SetCapacity ; (; Int_t ; newCapacity). private . Set/change ordered collection capacity. ; Definition at line 378 of file TOrdCollection.cxx. ◆ Sort(). void TOrdCollection::Sort ; (; ). If objects in collection are sortable (i.e. ; IsSortable() returns true for all objects) then sort collection. ; Definition at line 397 of file TOrdCollection.cxx. ◆ Streamer(). void TOrdCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TCollection. ◆ StreamerNVirtual(). void TOrdCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TOrdCollection.h. Friends And Related Symbol Documentation. ◆ TOrdCollectionIter. friend class TOrdCollectionIter. friend . Definition at line 34 of file TOrdCollection.h. Member Data Documentation. ◆ fCapacity. Int_t TOrdCollection::fCapacity. private . Definition at line 38 of file TOrdCollection.h. ◆ fCont. TObject** TOrdCollection::fCont. private . Definition at line 37 of file TOrdCollection.h. ◆ fGapSize. Int_t TOrdCollection::fGapSize. private . Definition at line 40 of file TOrdCollection.h. ◆ fGapStart. Int_t TOrdCollection::fGapStart. private . Definition at line 39 of file TOrdCollection.h. Libraries for TOrdCollection:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TOrdCollection.h; core/cont/src/TOrdCollection.cxx. TOrdCollection. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:27290,Guid,Guide,27290,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,1,['Guid'],['Guide']
Usability,"Output. class TClassDocOutput: public TDocOutput. Write the documentation for a class or namespace. The documentation is; parsed by TDocParser and then passed to TClassDocOutput to generate; the class doc header, the class description, members overview, and method; documentation. All generic output functionality is in TDocOutput; it is; re-used in this derived class. You usually do not use this class yourself; it is invoked indirectly by; THtml. Customization of the output should happen via the interfaces defined; by THtml. Function Members (Methods); public:. virtual~TClassDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDocOutput::AdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); voidClass2Html(Bool_t force = kFALSE); Bool_tClassDotCharts(ostream& out); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTDocOutput::Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassDocOutput.html:1249,Clear,Clear,1249,root/html602/TClassDocOutput.html,https://root.cern,https://root.cern/root/html602/TClassDocOutput.html,2,['Clear'],['Clear']
Usability,"Overwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each wei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:10663,simpl,simple,10663,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"P6Blue+6; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 8-color scheme; y = 0.1;; x = 0.4;; t->DrawText(x, y-h/2., ""8-colors scheme"");; for (c=kP8Blue; c<kP8Blue+8; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 10-color scheme; y = 0.1;; x = 0.7;; t->DrawText(x, y-h/2., ""10-colors scheme"");; for (c=kP10Blue; c<kP10Blue+10; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; kP8Blue@ kP8BlueDefinition Rtypes.h:70; kP10Blue@ kP10BlueDefinition Rtypes.h:71; kP6Blue@ kP6BlueDefinition Rtypes.h:69; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TTextBase class for several text objects.Definition TText.h:22; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorOlivier Couet ; Definition in file accessiblecolorschemes.C. tutorialsgraphicsaccessiblecolorschemes.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/accessiblecolorschemes_8C.html:3254,Guid,Guide,3254,doc/master/accessiblecolorschemes_8C.html,https://root.cern,https://root.cern/doc/master/accessiblecolorschemes_8C.html,1,['Guid'],['Guide']
Usability,PAT; };. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Retu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:7127,Clear,ClearFiles,7127,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,4,['Clear'],['ClearFiles']
Usability,"POI of this interval) ;  ; virtual double ConfidenceLevel () const =0;  return confidence level ;  ; virtual RooArgSet * GetParameters () const =0;  return list of parameters of interest defining this interval (return a new cloned list) ;  ; TClass * IsA () const override;  ; virtual bool IsInInterval (const RooArgSet &) const =0;  check if given point is in the interval ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; virtual void SetConfidenceLevel (double cl)=0;  used to set confidence level. Keep pure virtual ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:2119,Clear,Clear,2119,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Clear'],['Clear']
Usability,"PROOF cluster. If logtomacro is TRUE the text result of the action is saved in the fMacroLog TMacro, accessible via TMacro::GetMacroLog(); Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6589 of file TProof.cxx. ◆ Exec() [3/3]. Int_t TProof::Exec ; (; const char * ; cmd, . ESlaves ; list, . Bool_t ; plusMaster . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6533 of file TProof.cxx. ◆ ExistsDataSet(). Bool_t TProof::ExistsDataSet ; (; const char * ; dataset). virtual . Returns kTRUE if 'dataset' exists, kFALSE otherwise. ; Reimplemented in TProofLite.; Definition at line 10868 of file TProof.cxx. ◆ Feedback(). void TProof::Feedback ; (; TList * ; objs). Get list of feedback objects. ; Connect a slot to this signal to monitor the feedback object. ; Definition at line 9268 of file TProof.cxx. ◆ FinalizationDone(). void TProof::FinalizationDone ; (; ). inlineprivate . Definition at line 694 of file TProof.h. ◆ Finalize() [1/2]. Long64_t TProof::Finalize ; (; const char * ; ref, . Bool_t ; force = kFALSE . ). Finalize query with reference ref. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If ref = 0, finalize current query. Return 0 on success, -1 on error ; Definition at line 5908 of file TProof.cxx. ◆ Finalize() [2/2]. Long64_t TProof::Finalize ; (; Int_t ; qry = -1, . Bool_t ; force = kFALSE . ). Finalize the qry-th query in fQueries. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If query < 0, finalize current query. Return 0 on success, -1 on error ; Definition at line 5883 of file TProof.cxx. ◆ FindDataSets(). TList * TProof::FindDataSets ; (; const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:89819,feedback,feedback,89819,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ; file  triangles.C;   Create small triangles at random positions on the canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphics.html:4396,Guid,Guide,4396,doc/master/group__tutorial__graphics.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html,1,['Guid'],['Guide']
Usability,Pad. TVirtualPad* TASPaletteEditor::fImagePad. protected . Definition at line 70 of file TASPaletteEditor.h. ◆ fLimitLine. LimitLine* TASPaletteEditor::fLimitLine[2]. protected . Definition at line 72 of file TASPaletteEditor.h. ◆ fMaxValue. Double_t TASPaletteEditor::fMaxValue. protected . max value of image ; Definition at line 63 of file TASPaletteEditor.h. ◆ fMinValue. Double_t TASPaletteEditor::fMinValue. protected . min value of image ; Definition at line 62 of file TASPaletteEditor.h. ◆ fPaintPalette. PaintPalette* TASPaletteEditor::fPaintPalette. protected . Definition at line 71 of file TASPaletteEditor.h. ◆ fPalette. TImagePalette* TASPaletteEditor::fPalette. protected . current palette ; Definition at line 69 of file TASPaletteEditor.h. ◆ fPaletteCanvas. TRootEmbeddedCanvas* TASPaletteEditor::fPaletteCanvas. protected . canvas to draw the current palette ; Definition at line 66 of file TASPaletteEditor.h. ◆ fPaletteList. TList* TASPaletteEditor::fPaletteList. protected . list of palettes for undo and redo ; Definition at line 68 of file TASPaletteEditor.h. ◆ fRampFactor. Int_t TASPaletteEditor::fRampFactor. protected . Definition at line 80 of file TASPaletteEditor.h. ◆ fRamps. TGRadioButton* TASPaletteEditor::fRamps[3]. protected . Definition at line 79 of file TASPaletteEditor.h. ◆ fReDoButton. TGTextButton* TASPaletteEditor::fReDoButton. protected . Definition at line 75 of file TASPaletteEditor.h. ◆ fStepButton. TGCheckButton* TASPaletteEditor::fStepButton. protected . Definition at line 78 of file TASPaletteEditor.h. ◆ fUnDoButton. TGTextButton* TASPaletteEditor::fUnDoButton. protected . Definition at line 74 of file TASPaletteEditor.h. Libraries for TASPaletteEditor:. [legend]; The documentation for this class was generated from the following files:; graf2d/asimage/inc/TASPaletteEditor.h; graf2d/asimage/src/TASPaletteEditor.cxx. TASPaletteEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:44191,undo,undo,44191,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,2,"['Guid', 'undo']","['Guide', 'undo']"
Usability,"Pad;; 1083 prevSelObj->ExecuteEvent(kMouseLeave, fEventX, fEventY);; 1084 fEvent = kMouseLeave;; 1085 RunAutoExec();; 1086 ProcessedEvent(kMouseLeave, fEventX, fEventY, prevSelObj); // emit signal; 1087 }; 1088 ; 1089 gPad = fSelectedPad;; 1090 ; 1091 if (fSelected) {; 1092 fSelected->ExecuteEvent(kMouseEnter, fEventX, fEventY);; 1093 fEvent = kMouseEnter;; 1094 RunAutoExec();; 1095 ProcessedEvent(kMouseEnter, fEventX, fEventY, fSelected); // emit signal; 1096 }; 1097 ; 1098 fEvent = sevent;; 1099}; 1100 ; 1101////////////////////////////////////////////////////////////////////////////////; 1102/// Execute action corresponding to one event.; 1103///; 1104/// This member function must be implemented to realize the action; 1105/// corresponding to the mouse click on the object in the canvas; 1106///; 1107/// Only handle mouse motion events in TCanvas, all other events are; 1108/// ignored for the time being; 1109 ; 1110void TCanvas::ExecuteEvent(Int_t event, Int_t px, Int_t py); 1111{; 1112 if (gROOT->GetEditorMode()) {; 1113 TPad::ExecuteEvent(event,px,py);; 1114 return;; 1115 }; 1116 ; 1117 switch (event) {; 1118 ; 1119 case kMouseMotion:; 1120 SetCursor(kCross);; 1121 break;; 1122 }; 1123}; 1124 ; 1125////////////////////////////////////////////////////////////////////////////////; 1126/// Turn rubberband feedback mode on or off.; 1127 ; 1128void TCanvas::FeedbackMode(Bool_t set); 1129{; 1130 if (IsWeb()); 1131 return;; 1132 ; 1133 if (set) {; 1134 SetDoubleBuffer(0); // turn off double buffer mode; 1135 gVirtualX->SetDrawMode(TVirtualX::kInvert); // set the drawing mode to XOR mode; 1136 } else {; 1137 SetDoubleBuffer(1); // turn on double buffer mode; 1138 gVirtualX->SetDrawMode(TVirtualX::kCopy); // set drawing mode back to normal (copy) mode; 1139 }; 1140}; 1141 ; 1142////////////////////////////////////////////////////////////////////////////////; 1143/// Flush canvas buffers.; 1144 ; 1145void TCanvas::Flush(); 1146{; 1147 if ((fCanvasID == -1) || IsWeb()) ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:36257,feedback,feedback,36257,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['feedback'],['feedback']
Usability,"Paint(Option_t *chopt="""") overridePaint the list of histograms.Definition THStack.cxx:707; THStack::endTIter end() constDefinition THStack.h:74; THStack::fHistsTList * fHistsPointer to array of TH1.Definition THStack.h:45; THStack::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set maximum.Definition THStack.cxx:1081; THStack::fHistogramTH1 * fHistogramPointer to histogram used for drawing axis.Definition THStack.h:47; THStack::GetZaxisTAxis * GetZaxis() constGet the z-axis of the histogram used to draw the stack.Definition THStack.cxx:646; THStack::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition THStack.cxx:1031; THStack::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition THStack.cxx:381; THStack::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px, py to each graph.Definition THStack.cxx:416; THStack::Modifiedvirtual void Modified()Note: this method invalidates the sum of histograms.Definition THStack.cxx:694; THStack::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Set minimum.Definition THStack.cxx:1090; THStack::GetXaxisTAxis * GetXaxis() constGet the x-axis of the histogram used to draw the stack.Definition THStack.cxx:620; THStack::fMaximumDouble_t fMaximumMaximum value for plotting along y.Definition THStack.h:48; TIterDefinition TCollection.h:235; TIter::Endstatic TIter End()Pointing to the element after the last - to a nullptr value in our case.Definition TCollection.cxx:814; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; bool; double; Drawth1 Draw(). histhistincTHStack.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8h_source.html:9161,Guid,Guide,9161,doc/master/THStack_8h_source.html,https://root.cern,https://root.cern/doc/master/THStack_8h_source.html,1,['Guid'],['Guide']
Usability,"Painter.; Definition at line 463 of file RCanvasPainter.cxx. ◆ ProduceJSON(). std::string RCanvasPainter::ProduceJSON ; (; ). finalvirtual . Produce JSON for the canvas. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 494 of file RCanvasPainter.cxx. ◆ Run(). void RCanvasPainter::Run ; (; double ; tm = 0.). finalvirtual . Run canvas functionality for specified period of time Required when canvas used not from the main thread. ; Implements ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 894 of file RCanvasPainter.cxx. ◆ SaveCreatedFile(). void RCanvasPainter::SaveCreatedFile ; (; std::string & ; reply). private . Method called when GUI sends file to save on local disk File data coded with base64 coding beside SVG format. ; Definition at line 827 of file RCanvasPainter.cxx. ◆ SetClearOnClose(). void RCanvasPainter::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle). finalvirtual . Set handle to window which will be cleared when connection is closed. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 757 of file RCanvasPainter.cxx. Member Data Documentation. ◆ fCanvas. RCanvas& ROOT::Experimental::RCanvasPainter::fCanvas. private . ! Canvas we are painting, *this will be owned by canvas ; Definition at line 109 of file RCanvasPainter.cxx. ◆ fCmds. std::list<std::shared_ptr<WebCommand> > ROOT::Experimental::RCanvasPainter::fCmds. private . ! list of submitted commands ; Definition at line 114 of file RCanvasPainter.cxx. ◆ fCmdsCnt. uint64_t ROOT::Experimental::RCanvasPainter::fCmdsCnt {0}. private . ! commands counter ; Definition at line 115 of file RCanvasPainter.cxx. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > ROOT::Experimental::RCanvasPainter::fHelpHandles. private . ! array of handles for help widgets ; Definition at line 122 of file RCanvasPainter.cxx. ◆ fJsonComp. int ROOT::Experimental::RCanvasPainter::fJsonComp {23}. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:11515,clear,cleared,11515,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,1,['clear'],['cleared']
Usability,"Palette **palette, TAttImage *attImage);  ; void Paint (Option_t *option="""") override;  Actually paint the paletter. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:1320,Clear,Clear,1320,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['Clear'],['Clear']
Usability,"Palette() any more after a call of this function!. void Slice(UInt_t xStart, UInt_t xEnd, UInt_t yStart, UInt_t yEnd, UInt_t toWidth, UInt_t toHeight); Another method of enlarging images where corners remain unchanged,; but middle part gets tiled. void Tile(UInt_t width, UInt_t height); Tile the original image. void Zoom(UInt_t offX, UInt_t offY, UInt_t width, UInt_t height); The area of an image displayed in a pad is defined by this function.; Note: the size on the screen is defined by the size of the pad.; The original image is not modified by this function.; If width or height is larger than the original image they are reduced to; the width and height of the image.; If the off values are too large (off + width > image width) than the off; values are decreased. For example: offX = image width - width; Note: the parameters are always relative to the original image not to the; size of an already zoomed image. void UnZoom(); Un-zoom the image to original size.; UnZoom() - performs undo for Zoom,Crop,Scale actions. void Flip(Int_t flip = 180); Flip image in place.; Flip is either 90, 180, 270, 180 is default.; This function manipulates the original image and destroys the; scaled and zoomed image which will be recreated at the next call of; the Draw function. If the image is zoomed the zoom - coordinates are; now relative to the new image.; This function cannot be used for images which were created with the; SetImage() functions, because the original pixel values would be; destroyed. void Mirror(Bool_t vert = kTRUE); Mirror image in place.; If vert is true mirror in vertical axis, horizontal otherwise.; Vertical is default.; This function manipulates the original image and destroys the; scaled and zoomed image which will be recreated at the next call of; the Draw function. If the image is zoomed the zoom - coordinates are; now relative to the new image.; This function cannot be used for images which were created with the; SetImage() functions, because the original pixel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:27842,undo,undo,27842,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,7,['undo'],['undo']
Usability,"PaletteAxis::SetNdivisions ; (; Int_t ; ndiv = 10). inlinevirtual . Definition at line 57 of file TPaletteAxis.h. ◆ SetTickLength(). virtual void TPaletteAxis::SetTickLength ; (; Float_t ; length = 0.03). inlinevirtual . Definition at line 63 of file TPaletteAxis.h. ◆ SetTitle(). virtual void TPaletteAxis::SetTitle ; (; const char * ; title = """"). inlinevirtual . Definition at line 68 of file TPaletteAxis.h. ◆ SetTitleColor(). virtual void TPaletteAxis::SetTitleColor ; (; Int_t ; color = 1). inlinevirtual . Definition at line 66 of file TPaletteAxis.h. ◆ SetTitleFont(). virtual void TPaletteAxis::SetTitleFont ; (; Int_t ; font = 42). inlinevirtual . Definition at line 67 of file TPaletteAxis.h. ◆ SetTitleOffset(). virtual void TPaletteAxis::SetTitleOffset ; (; Float_t ; offset = 1). inlinevirtual . Definition at line 64 of file TPaletteAxis.h. ◆ SetTitleSize(). virtual void TPaletteAxis::SetTitleSize ; (; Float_t ; size = 0.035). inlinevirtual . Definition at line 65 of file TPaletteAxis.h. ◆ Streamer(). void TPaletteAxis::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TBox. ; Reimplemented from TBox. ◆ StreamerNVirtual(). void TPaletteAxis::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TPaletteAxis.h. ◆ UnZoom(). void TPaletteAxis::UnZoom ; (; ). virtual . Unzoom the palette. ; Definition at line 663 of file TPaletteAxis.cxx. Member Data Documentation. ◆ fAxis. TGaxis TPaletteAxis::fAxis. protected . Palette axis. ; Definition at line 31 of file TPaletteAxis.h. ◆ fH. TH1* TPaletteAxis::fH. protected . ! Pointer to parent histogram ; Definition at line 32 of file TPaletteAxis.h. Libraries for TPaletteAxis:. [legend]; The documentation for this class was generated from the following files:; hist/histpainter/inc/TPaletteAxis.h; hist/histpainter/src/TPaletteAxis.cxx. TPaletteAxis. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:33348,Guid,Guide,33348,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['Guid'],['Guide']
Usability,"Partitioning Algorithm"" section for details). The partitioning algorithm divides the histogram into regions called cells. The bins that each cell intersects are recorded in an array of TLists. When a coordinate in the histogram is to be filled; the method (quickly) finds which cell the coordinate belongs. It then only loops over the bins intersecting that cell to find the bin the input coordinate corresponds to. The partitioning of the histogram is updated continuously as each bin is added. The default number of cells on each axis is 25. This number could be set to another value in the constructor or adjusted later by calling the ChangePartition(Int_t, Int_t) method. The partitioning algorithm is considerably faster than the brute force algorithm (i.e. checking if each bin contains the input coordinates), especially if the histogram is to be filled many times.; The following very simple macro shows how to build and fill a TH2Poly: {; auto h2p = new TH2Poly();; ; Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};; ; h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);; ; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; Double_tdouble Double_tDefinition RtypesCore.h:59; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TH2Poly::TH2PolyTH2Poly()Default Constructor. No boundaries specified.Definition TH2Poly.cxx:148; double; More examples can be found in th2polyBoxes.C, th2polyEurope.C, th2polyHoneycomb.C and th2polyUSA.C. Partitioning Algorithm; The partition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:2740,simpl,simple,2740,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['simpl'],['simple']
Usability,"PatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaX & operator= (const TGeoPatternParaX &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaX.html:2261,Clear,ClearThreadData,2261,doc/master/classTGeoPatternParaX.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html,1,['Clear'],['ClearThreadData']
Usability,"PatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaY & operator= (const TGeoPatternParaY &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaY.html:2283,Clear,ClearThreadData,2283,doc/master/classTGeoPatternParaY.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html,1,['Clear'],['ClearThreadData']
Usability,"PatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaZ & operator= (const TGeoPatternParaZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaZ.html:2283,Clear,ClearThreadData,2283,doc/master/classTGeoPatternParaZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html,1,['Clear'],['ClearThreadData']
Usability,"PatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternTrapZ & operator= (const TGeoPatternTrapZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternTrapZ.html:2341,Clear,ClearThreadData,2341,doc/master/classTGeoPatternTrapZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html,1,['Clear'],['ClearThreadData']
Usability,"PaveText(4,11,6,12);; p6->SetTextAlign(12);; p6->SetFillColor(42);; p6->AddText(""10 bytes"");; p6->Draw();; TText text;; text.SetTextAlign(12);; text.SetTextSize(0.04);; text.SetTextFont(72);; text.DrawText(6.2,11.5,""Header:Event_flag"");; text.DrawText(7.2,9.5,""Trigger_Info"");; text.DrawText(8.2,7.5,""Muon_Detector: TOF"");; text.DrawText(9.2,5.5,""Calorimeters"");; text.DrawText(10.2,3.5,""Forward_Detectors"");; text.DrawText(11.2,1.5,""TPCs"");; }; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; arrowDefinition RArrowDS.hxx:17; AuthorRene Brun ; Definition in file event.C. tutorialsgraphicsevent.C. ROOT master - Refere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/event_8C.html:2747,simpl,simple,2747,doc/master/event_8C.html,https://root.cern,https://root.cern/doc/master/event_8C.html,1,['simpl'],['simple']
Usability,"Pdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:2558,Simpl,SimpleLikelihoodRatioTestStat,2558,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,2,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,Pdf. RooProofDriverSelector. RooPullVar. RooRandomizeParamMCSModule. RooRangeBinning. RooRangeBoolean. RooRealAnalytic. RooRealBinding←. RooDataProjBinding. RooRealAnalytic. RooRealIntegral. RooRealMPFE. RooRealProxy. RooRealSumPdf. RooRealVar. RooRealVarSharedProperties. RooRecursiveFraction. RooRefCountList. RooResolutionModel←. RooAddModel. RooGExpModel. RooGaussModel. RooTruthModel. RooScaledFunc. RooSegmentedIntegrator1D←. RooSegmentedIntegrator2D. RooSegmentedIntegrator2D. RooSetPair. RooSetProxy. RooSharedProperties←. RooCategorySharedProperties. RooRealVarSharedProperties. RooSharedPropertiesList. RooSimGenContext. RooSimPdfBuilder. RooSimWSTool. RooSimWSTool::MultiBuildConfig. RooSimWSTool::SplitRule. RooSimultaneous. RooSpHarmonic. RooStats::AcceptanceRegion. RooStats::BayesianCalculator. RooStats::CombinedCalculator←. RooStats::ProfileLikelihoodCalculator. RooStats::ConfInterval←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::DebuggingSampler. RooStats::DebuggingTestStat. RooStats::FeldmanCousins. RooStats::FrequentistCalculator. RooStats::HLFactory. RooStats::Heaviside. RooStats::HistFactory::EstimateSummary. RooStats::HistFactory::FlexibleInterpVar. RooStats::HistFactory::HistoToWorkspaceFactory. RooStats::HistFactory::HistoToWorkspaceFactoryFast. RooStats::HistFactory::LinInterpVar. RooStats::HybridCalculator. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HybridResult. RooStats::HypoTestCalculatorGeneric←. RooStats::FrequentistCalculator. RooStats::HybridCalculator. RooStats::HypoTestInverter. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCInterv,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassHierarchy.html:23817,Simpl,SimpleInterval,23817,root/html530/ClassHierarchy.html,https://root.cern,https://root.cern/root/html530/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,Pdf. RooProofDriverSelector. RooPullVar. RooRandomizeParamMCSModule. RooRangeBinning. RooRangeBoolean. RooRealAnalytic. RooRealBinding←. RooDataProjBinding. RooRealAnalytic. RooRealIntegral. RooRealMPFE. RooRealProxy. RooRealSumPdf. RooRealVar. RooRealVarSharedProperties. RooRecursiveFraction. RooRefCountList. RooResolutionModel←. RooAddModel. RooGExpModel. RooGaussModel. RooTruthModel. RooScaledFunc. RooSegmentedIntegrator1D←. RooSegmentedIntegrator2D. RooSegmentedIntegrator2D. RooSetPair. RooSetProxy. RooSharedProperties←. RooCategorySharedProperties. RooRealVarSharedProperties. RooSharedPropertiesList. RooSimGenContext. RooSimPdfBuilder. RooSimWSTool. RooSimWSTool::MultiBuildConfig. RooSimWSTool::SplitRule. RooSimultaneous. RooSpHarmonic. RooStats::AcceptanceRegion. RooStats::BayesianCalculator. RooStats::CombinedCalculator←. RooStats::ProfileLikelihoodCalculator. RooStats::ConfInterval←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::DebuggingSampler. RooStats::DebuggingTestStat. RooStats::FeldmanCousins. RooStats::HLFactory. RooStats::Heaviside. RooStats::HistFactory::EstimateSummary. RooStats::HistFactory::HistoToWorkspaceFactory. RooStats::HistFactory::LinInterpVar. RooStats::HybridCalculator. RooStats::HybridCalculatorGeneric←. RooStats::HybridCalculator. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HybridResult. RooStats::HypoTestInverter. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfP,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:23740,Simpl,SimpleInterval,23740,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,"Pdf.h. ◆ setCallWarning(). void RooNumConvPdf::setCallWarning ; (; Int_t ; threshold = 2000). inline . Definition at line 46 of file RooNumConvPdf.h. ◆ setConvolutionWindow(). void RooNumConvPdf::setConvolutionWindow ; (; RooAbsReal & ; centerParam, . RooAbsReal & ; widthParam, . double ; widthScaleFactor = 1 . ). inline . Definition at line 44 of file RooNumConvPdf.h. ◆ Streamer(). void RooNumConvPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooNumConvPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file RooNumConvPdf.h. ◆ var(). RooRealVar & RooNumConvPdf::var ; (; ); const. inline . Definition at line 52 of file RooNumConvPdf.h. Friends And Related Symbol Documentation. ◆ RooConvGenContext. friend class RooConvGenContext. friend . Definition at line 76 of file RooNumConvPdf.h. Member Data Documentation. ◆ _conv. std::unique_ptr<RooNumConvolution> RooNumConvPdf::_conv. mutableprotected . ! Actual convolution calculation ; Definition at line 67 of file RooNumConvPdf.h. ◆ _init. bool RooNumConvPdf::_init = false. mutableprotected . ! do not persist ; Definition at line 65 of file RooNumConvPdf.h. ◆ _origModel. RooRealProxy RooNumConvPdf::_origModel. protected . Original resolution model. ; Definition at line 71 of file RooNumConvPdf.h. ◆ _origPdf. RooRealProxy RooNumConvPdf::_origPdf. protected . Original input PDF. ; Definition at line 70 of file RooNumConvPdf.h. ◆ _origVar. RooRealProxy RooNumConvPdf::_origVar. protected . Original convolution variable. ; Definition at line 69 of file RooNumConvPdf.h. Libraries for RooNumConvPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNumConvPdf.h; roofit/roofitcore/src/RooNumConvPdf.cxx. RooNumConvPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:82397,Guid,Guide,82397,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['Guid'],['Guide']
Usability,"Pdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . If all components that depend on obs are binned, so is their sum. ; Reimplemented from RooAbsReal.; Definition at line 929 of file RooAddPdf.cxx. ◆ materializeRefCoefNormFromAttribute(). void RooAddPdf::materializeRefCoefNormFromAttribute ; (; ); const. private . Definition at line 345 of file RooAddPdf.cxx. ◆ pdfList(). const RooArgList & RooAddPdf::pdfList ; (; ); const. inline . Definition at line 70 of file RooAddPdf.h. ◆ plotSamplingHint(). std::list< double > * RooAddPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Loop over components for plot sampling hints and merge them if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:90589,intuit,intuitively,90589,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,2,['intuit'],['intuitively']
Usability,"PerfStats.; Definition at line 142 of file TPerfStats.h. ◆ SetMissed() [2/2]. void TPerfStats::SetMissed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 141 of file TPerfStats.h. ◆ SetNumEvents(). void TPerfStats::SetNumEvents ; (; Long64_t ; num). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 133 of file TPerfStats.h. ◆ Setup(). void TPerfStats::Setup ; (; TList * ; input). static . Setup the PROOF input list with requested statistics and tracing options. ; Definition at line 727 of file TPerfStats.cxx. ◆ SetUsed() [1/2]. void TPerfStats::SetUsed ; (; size_t ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 144 of file TPerfStats.h. ◆ SetUsed() [2/2]. void TPerfStats::SetUsed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 143 of file TPerfStats.h. ◆ SimpleEvent(). void TPerfStats::SimpleEvent ; (; EEventType ; type). overridevirtual . Simple event. ; Implements TVirtualPerfStats.; Definition at line 387 of file TPerfStats.cxx. ◆ Start(). void TPerfStats::Start ; (; TList * ; input, . TList * ; output . ). static . Initialize PROOF statistics run. ; Definition at line 744 of file TPerfStats.cxx. ◆ Stop(). void TPerfStats::Stop ; (; ). static . Terminate the PROOF statistics run. ; Definition at line 764 of file TPerfStats.cxx. ◆ Streamer(). void TPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file TPerfStats.h. ◆ UnzipEvent(). void TPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). overridevirtual . Record TTree file unzip event. ; start is the TimeStamp before unzip pos is where in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfStats.html:20819,Simpl,SimpleEvent,20819,doc/master/classTPerfStats.html,https://root.cern,https://root.cern/doc/master/classTPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"Pgon::TGeoPgon ; (; const TGeoPgon & ; ). protecteddelete . ◆ TGeoPgon() [2/5]. TGeoPgon::TGeoPgon ; (; ). ◆ TGeoPgon() [3/5]. TGeoPgon::TGeoPgon ; (; Double_t ; phi, . Double_t ; dphi, . Int_t ; nedges, . Int_t ; nz . ). ◆ TGeoPgon() [4/5]. TGeoPgon::TGeoPgon ; (; const char * ; name, . Double_t ; phi, . Double_t ; dphi, . Int_t ; nedges, . Int_t ; nz . ). ◆ TGeoPgon() [5/5]. TGeoPgon::TGeoPgon ; (; Double_t * ; params). ◆ ~TGeoPgon(). TGeoPgon::~TGeoPgon ; (; ). override . Member Function Documentation. ◆ Capacity(). Double_t TGeoPgon::Capacity ; (; ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ Class(). static TClass * TGeoPgon::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoPgon::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoPgon::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 118 of file TGeoPgon.h. ◆ ClearThreadData(). void TGeoPgon::ClearThreadData ; (; ); const. overridevirtual . Reimplemented from TGeoShape. ◆ ComputeBBox(). void TGeoPgon::ComputeBBox ; (; ). overridevirtual . Reimplemented from TGeoPcon. ◆ ComputeNormal(). void TGeoPgon::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). overridevirtual . Reimplemented from TGeoPcon. ◆ ComputeNormal_v(). void TGeoPgon::ComputeNormal_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; norms, . Int_t ; vecsize . ). overridevirtual . Reimplemented from TGeoPcon. ◆ Contains(). Bool_t TGeoPgon::Contains ; (; const Double_t * ; point); const. overridevirtual . Reimplemented from TGeoPcon. ◆ Contains_v(). void TGeoPgon::Contains_v ; (; const Double_t * ; points, . Bool_t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoPcon. ◆ CreateThreadData(). void TGeoPgon::CreateThreadData ; (; Int_t ; nthreads). overridevirtual . Reimplemented from TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:26892,Clear,ClearThreadData,26892,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,1,['Clear'],['ClearThreadData']
Usability,"Phase was used ;  ; Long64_t fLastMiss {-1};  ! set to the event # of the last miss. ;  ; bool fLearnPrefilling {false};  ! true if we are in the process of executing LearnPrefill ;  ; std::unique_ptr< MissCache > fMissCache;  ! Cache contents for misses ;  ; Int_t fNbranches {0};  ! Number of branches in the cache ;  ; Long64_t fNextClusterStart {-1};  ! End+1 of the cluster(s) where the current content was picked out ;  ; Int_t fNMissReadMiss {0};  Number of blocks read and not found in either cache. ;  ; Int_t fNMissReadOk {0};  Number of blocks read, not found in the primary cache, and found in the secondary cache. ;  ; Int_t fNMissReadPref {0};  Number of blocks read into the secondary (""miss"") cache. ;  ; Int_t fNReadMiss {0};  Number of blocks read and not found in the cache. ;  ; Int_t fNReadOk {0};  Number of blocks read and found in the cache. ;  ; Int_t fNReadPref {0};  Number of blocks that were prefetched. ;  ; bool fOneTime {false};  ! used in the learning phase ;  ; bool fOptimizeMisses {false};  ! true if we should optimize cache misses. ;  ; EPrefillType fPrefillType;  Whether a pre-filling is enabled (and if applicable which type) ;  ; bool fReadDirectionSet {false};  ! read direction established ;  ; bool fReverseRead {false};  ! reading in reverse mode ;  ; TTree * fTree {nullptr};  ! pointer to the current Tree ;  ;  Protected Attributes inherited from TFileCacheRead; Bool_t fAsyncReading;  ; Bool_t fBIsSorted;  ; Bool_t fBIsTransferred;  ; Int_t * fBLen;  [fBNb] ;  ; Int_t fBNb;  ; Int_t fBNseek;  ; Int_t fBNtot;  ; Long64_t * fBPos;  [fBNb] ;  ; Long64_t * fBSeek;  [fBNseek] ;  ; Int_t * fBSeekIndex;  [fBNseek] ;  ; Int_t * fBSeekLen;  [fBNseek] ;  ; Int_t * fBSeekPos;  [fBNseek] ;  ; Int_t fBSeekSize;  ; Long64_t * fBSeekSort;  [fBNseek] ;  ; Int_t * fBSeekSortLen;  [fBNseek] ;  ; char * fBuffer;  [fBufferSize] buffer of contiguous prefetched blocks ;  ; Int_t fBufferLen;  Current buffer length (<= fBufferSize) ;  ; Int_t fBufferSize;  Allocat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:29425,learn,learning,29425,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,4,['learn'],['learning']
Usability,"Pick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCondor.html:6915,Resume,Resume,6915,root/html534/TCondor.html,https://root.cern,https://root.cern/root/html534/TCondor.html,2,['Resume'],['Resume']
Usability,"Picture* bpic = 0, const TGPicture* blpic = 0, const TGPicture* spic = 0, const TGPicture* slpic = 0, TGString* name = 0, Int_t type = 0, Long64_t size = 1, Int_t uid = 0, Int_t gid = 0, Long_t modtime = 0, EListViewMode viewMode = kLVList, UInt_t options = kVerticalFrame, Pixel_t back = GetWhitePixel()); virtual~TGFileItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGLVEntry::Activate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileItem.html:1729,Clear,Clear,1729,root/html528/TGFileItem.html,https://root.cern,https://root.cern/root/html528/TGFileItem.html,4,['Clear'],['Clear']
Usability,"Pixel_t back = GetDefaultFrameBackground()); Create a canvas object. ~TGCanvas(); Delete canvas. void MapSubwindows(); Map all canvas sub windows. void AddFrame(TGFrame* f, TGLayoutHints* l = 0); Adding a frame to a canvas is actually adding the frame to the; viewport container. The viewport container must be at least a; TGCompositeFrame for this method to succeed. void DrawBorder(); Draw canvas border. void Layout(); Create layout for canvas. Depending on the size of the container; we need to add the scrollbars. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle message generated by the canvas scrollbars. Int_t GetHsbPosition() const; Get position of horizontal scrollbar. Int_t GetVsbPosition() const; Get position of vertical scrollbar. void SetHsbPosition(Int_t newPos); Set position of horizontal scrollbar. void SetVsbPosition(Int_t newPos); Set position of vertical scrollbar. void SetScrolling(Int_t scrolling); Set scrolling policy. Use values defined by the enum: kCanvasNoScroll,; kCanvasScrollHorizontal, kCanvasScrollVertical, kCanvasScrollBoth. void ClearViewPort(); Clear view port and redraw content. void SavePrimitive(ostream& out, Option_t* option = """"); Save a canvas widget as a C++ statement(s) on output stream out. TGContainer& operator=(const TGCanvas& ). TGHScrollBar * GetHScrollbar() const. TGVScrollBar * GetVScrollbar() const. TGFrame * GetContainer() const; { return fContainer; }. void SetContainer(TGFrame* f). TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fHeight); }. TGCanvas(const TGCanvas& ). TGViewPort * GetViewPort() const; { return fVport; }. Int_t GetScrolling() const; { return fScrolling; }. » Author: Fons Rademakers 11/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGCanvas.html:20903,Clear,ClearViewPort,20903,root/html604/TGCanvas.html,https://root.cern,https://root.cern/root/html604/TGCanvas.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"Pixel_t back = GetDefaultFrameBackground()); Create a canvas object. ~TGCanvas(); Delete canvas. void MapSubwindows(); Map all canvas sub windows. void AddFrame(TGFrame* f, TGLayoutHints* l = 0); Adding a frame to a canvas is actually adding the frame to the; viewport container. The viewport container must be at least a; TGCompositeFrame for this method to succeed. void DrawBorder(); Draw canvas border. void Layout(); Create layout for canvas. Depending on the size of the container; we need to add the scrollbars. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle message generated by the canvas scrollbars. Int_t GetHsbPosition() const; Get position of horizontal scrollbar. Int_t GetVsbPosition() const; Get position of vertical scrollbar. void SetHsbPosition(Int_t newPos); Set position of horizontal scrollbar. void SetVsbPosition(Int_t newPos); Set position of vertical scrollbar. void SetScrolling(Int_t scrolling); Set scrolling policy. Use values defined by the enum: kCanvasNoScroll,; kCanvasScrollHorizontal, kCanvasScrollVertical, kCanvasScrollBoth. void ClearViewPort(); Clear view port and redraw content. void SavePrimitive(ostream& out, Option_t* option = """"); Save a canvas widget as a C++ statement(s) on output stream out. TGContainer& operator=(const TGCanvas& ). TGHScrollBar * GetHScrollbar() const. TGVScrollBar * GetVScrollbar() const. TGFrame * GetContainer() const; { return fContainer; }. void SetContainer(TGFrame* f). TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fHeight); }. TGCanvas(const TGCanvas& ). TGViewPort * GetViewPort() const; { return fVport; }. Int_t GetScrolling() const; { return fScrolling; }. » Author: Fons Rademakers 11/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-04 16:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGCanvas.html:19976,Clear,ClearViewPort,19976,root/html534/TGCanvas.html,https://root.cern,https://root.cern/root/html534/TGCanvas.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"Pixel_t back = GetDefaultFrameBackground()); Create a canvas object. ~TGCanvas(); Delete canvas. void MapSubwindows(); Map all canvas sub windows. void AddFrame(TGFrame* f, TGLayoutHints* l = 0); Adding a frame to a canvas is actually adding the frame to the; viewport container. The viewport container must be at least a; TGCompositeFrame for this method to succeed. void DrawBorder(); Draw canvas border. void Layout(); Create layout for canvas. Depending on the size of the container; we need to add the scrollbars. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle message generated by the canvas scrollbars. Int_t GetHsbPosition() const; Get position of horizontal scrollbar. Int_t GetVsbPosition() const; Get position of vertical scrollbar. void SetHsbPosition(Int_t newPos); Set position of horizontal scrollbar. void SetVsbPosition(Int_t newPos); Set position of vertical scrollbar. void SetScrolling(Int_t scrolling); Set scrolling policy. Use values defined by the enum: kCanvasNoScroll,; kCanvasScrollHorizontal, kCanvasScrollVertical, kCanvasScrollBoth. void ClearViewPort(); Clear view port and redraw content. void SavePrimitive(ostream& out, Option_t* option = """"); Save a canvas widget as a C++ statement(s) on output stream out. TGContainer& operator=(const TGCanvas& ). TGHScrollBar * GetHScrollbar() const. TGVScrollBar * GetVScrollbar() const. TGFrame * GetContainer() const; { return fContainer; }. void SetContainer(TGFrame* f). TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fHeight); }. TGCanvas(const TGCanvas& ). TGViewPort * GetViewPort() const; { return fVport; }. Int_t GetScrolling() const; { return fScrolling; }. » Author: Fons Rademakers 11/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCanvas.html:20903,Clear,ClearViewPort,20903,root/html602/TGCanvas.html,https://root.cern,https://root.cern/root/html602/TGCanvas.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"Point.h:47; TPoint::GetXSCoord_t GetX() constDefinition TPoint.h:46; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::YtoAbsPixelvirtual Int_t YtoAbsPixel(Double_t y) const =0; TVirtualPad::GetX2virtual Double_t GetX2() const =0; TVirtualPad::XtoAbsPixelvirtual Int_t XtoAbsPixel(Double_t x) const =0; TVirtualPad::GetY1virtual Double_t GetY1() const =0; TVirtualPad::GetY2virtual Double_t GetY2() const =0; TVirtualPad::GetBorderSizevirtual Short_t GetBorderSize() const =0; TVirtualPad::GetX1virtual Double_t GetX1() const =0; TVirtualX::kHollow@ kHollowDefinition TVirtualX.h:50; bool; double; int; unsigned int; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361. graf2dgrafsrcTBox.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBox_8cxx_source.html:41125,Guid,Guide,41125,doc/master/TBox_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBox_8cxx_source.html,1,['Guid'],['Guide']
Usability,"PointComplex ; (; Int_t ; , . TComplex & ;  . ). inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 64 of file TFFTReal.h. ◆ SetPoints(). void TFFTReal::SetPoints ; (; const Double_t * ; data). overridevirtual . Sets all points. ; Implements TVirtualFFT.; Definition at line 348 of file TFFTReal.cxx. ◆ SetPointsComplex(). void TFFTReal::SetPointsComplex ; (; const Double_t * ; , . const Double_t * ;  . ). inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 65 of file TFFTReal.h. ◆ Streamer(). void TFFTReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFFTReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TFFTReal.h. ◆ Transform(). void TFFTReal::Transform ; (; ). overridevirtual . Computes the transform, specified in Init() function. ; Implements TVirtualFFT.; Definition at line 197 of file TFFTReal.cxx. Member Data Documentation. ◆ fFlags. TString TFFTReal::fFlags. protected . Definition at line 29 of file TFFTReal.h. ◆ fIn. void* TFFTReal::fIn. protected . Definition at line 22 of file TFFTReal.h. ◆ fKind. void* TFFTReal::fKind. protected . Definition at line 28 of file TFFTReal.h. ◆ fN. Int_t* TFFTReal::fN. protected . Definition at line 27 of file TFFTReal.h. ◆ fNdim. Int_t TFFTReal::fNdim. protected . Definition at line 25 of file TFFTReal.h. ◆ fOut. void* TFFTReal::fOut. protected . Definition at line 23 of file TFFTReal.h. ◆ fPlan. void* TFFTReal::fPlan. protected . Definition at line 24 of file TFFTReal.h. ◆ fTotalSize. Int_t TFFTReal::fTotalSize. protected . Definition at line 26 of file TFFTReal.h. Libraries for TFFTReal:. [legend]; The documentation for this class was generated from the following files:; math/fftw/inc/TFFTReal.h; math/fftw/src/TFFTReal.cxx. TFFTReal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTReal.html:24603,Guid,Guide,24603,doc/master/classTFFTReal.html,https://root.cern,https://root.cern/doc/master/classTFFTReal.html,1,['Guid'],['Guide']
Usability,PointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:8757,simpl,simply,8757,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['simpl'],['simply']
Usability,"PointerToMemFn >::Clone ; (; ); const. inline . Definition at line 209 of file ParamFunctor.h. ◆ operator()() [1/3]. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . double ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::operator() ; (; const double * ; x, . const double * ; p . ). inline . Definition at line 204 of file ParamFunctor.h. ◆ operator()() [2/3]. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . double ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::operator() ; (; double * ; x, . double * ; p . ). inline . Definition at line 200 of file ParamFunctor.h. ◆ operator()() [3/3]. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . double ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::operator() ; (; double ; x, . double * ; p . ). inline . Definition at line 192 of file ParamFunctor.h. ◆ operator=(). template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . ParamMemFunHandler & ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::operator= ; (; const ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn > & ; ). privatedelete . Member Data Documentation. ◆ fMemFn. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . PointerToMemFn ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::fMemFn. private . Definition at line 254 of file ParamFunctor.h. ◆ fObj. template<class ParentFunctor , typename PointerToObj , typename PointerToMemFn > . PointerToObj ROOT::Math::ParamMemFunHandler< ParentFunctor, PointerToObj, PointerToMemFn >::fObj. private . Definition at line 253 of file ParamFunctor.h. math/mathcore/inc/Math/ParamFunctor.h. ROOTMathParamMemFunHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html:5142,Guid,Guide,5142,doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamMemFunHandler.html,1,['Guid'],['Guide']
Usability,"Pointer_t parent, const char* comment); Bool_tAddDocComment(XMLDocPointer_t xmldoc, const char* comment); Bool_tAddDocRawLine(XMLDocPointer_t xmldoc, const char* line); Bool_tAddDocStyleSheet(XMLDocPointer_t xmldoc, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); voidAddNodeContent(XMLNodePointer_t xmlnode, const char* content, Int_t len = 0); Bool_tAddRawLine(XMLNodePointer_t parent, const char* line); Bool_tAddStyleSheet(XMLNodePointer_t parent, const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); voidAssignDtd(XMLDocPointer_t xmldoc, const char* dtdname, const char* rootname); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; voidCleanNode(XMLNodePointer_t xmlnode); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); XMLNodePointer_tDocGetRootElement(XMLDocPointer_t xmldoc); voidDocSetRootElement(XMLDocPointer_t xmldoc, XMLNodePointer_t xmlnode); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLEngine.html:1941,Clear,Clear,1941,root/html534/TXMLEngine.html,https://root.cern,https://root.cern/root/html534/TXMLEngine.html,3,['Clear'],['Clear']
Usability,Points. int HypoTestInverterResult::fgAsymptoticNumPoints = 11. staticprotected . number of points used to build expected p-values ; Definition at line 203 of file HypoTestInverterResult.h. ◆ fInterpolateLowerLimit. bool RooStats::HypoTestInverterResult::fInterpolateLowerLimit. protected . Definition at line 191 of file HypoTestInverterResult.h. ◆ fInterpolateUpperLimit. bool RooStats::HypoTestInverterResult::fInterpolateUpperLimit. protected . Definition at line 192 of file HypoTestInverterResult.h. ◆ fInterpolOption. InterpolOption_t RooStats::HypoTestInverterResult::fInterpolOption. protected . interpolation option (linear or spline) ; Definition at line 195 of file HypoTestInverterResult.h. ◆ fIsTwoSided. bool RooStats::HypoTestInverterResult::fIsTwoSided. protected . two sided scan (look for lower/upper limit) ; Definition at line 190 of file HypoTestInverterResult.h. ◆ fLowerLimitError. double RooStats::HypoTestInverterResult::fLowerLimitError. protected . Definition at line 197 of file HypoTestInverterResult.h. ◆ fUpperLimitError. double RooStats::HypoTestInverterResult::fUpperLimitError. protected . Definition at line 198 of file HypoTestInverterResult.h. ◆ fUseCLs. bool RooStats::HypoTestInverterResult::fUseCLs. protected . Definition at line 189 of file HypoTestInverterResult.h. ◆ fXValues. std::vector<double> RooStats::HypoTestInverterResult::fXValues. protected . Definition at line 205 of file HypoTestInverterResult.h. ◆ fYObjects. TList RooStats::HypoTestInverterResult::fYObjects. protected . list of HypoTestResult for each point ; Definition at line 207 of file HypoTestInverterResult.h. Libraries for RooStats::HypoTestInverterResult:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestInverterResult.h; roofit/roostats/src/HypoTestInverterResult.cxx. RooStatsHypoTestInverterResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:41897,Guid,Guide,41897,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Guid'],['Guide']
Usability,"Pol.h:34; ROOT::Math::Chebyshev10double Chebyshev10(double x, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9, double c10)Definition ChebyshevPol.h:87; ROOT::Math::ChebyshevNdouble ChebyshevN(unsigned int n, double x, const double *c)Definition ChebyshevPol.h:93; ROOT::Math::Chebyshev0double Chebyshev0(double, double c0)Definition ChebyshevPol.h:57; ROOT::Math::Chebyshev2double Chebyshev2(double x, double c0, double c1, double c2)Definition ChebyshevPol.h:63; ROOT::Math::Chebyshev3double Chebyshev3(double x, double c0, double c1, double c2, double c3)Definition ChebyshevPol.h:66; ROOT::Math::Chebyshev4double Chebyshev4(double x, double c0, double c1, double c2, double c3, double c4)Definition ChebyshevPol.h:69; ROOT::Math::Chebyshev1double Chebyshev1(double x, double c0, double c1)Definition ChebyshevPol.h:60; ROOT::Math::Chebyshev6double Chebyshev6(double x, double c0, double c1, double c2, double c3, double c4, double c5, double c6)Definition ChebyshevPol.h:75; ROOT::Math::Chebyshev7double Chebyshev7(double x, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7)Definition ChebyshevPol.h:78; ROOT::Math::Chebyshev5double Chebyshev5(double x, double c0, double c1, double c2, double c3, double c4, double c5)Definition ChebyshevPol.h:72; ROOT::Math::Chebyshev8double Chebyshev8(double x, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8)Definition ChebyshevPol.h:81; ROOT::Math::Chebyshev9double Chebyshev9(double x, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9)Definition ChebyshevPol.h:84; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathChebyshevPol.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ChebyshevPol_8h_source.html:9051,Guid,Guide,9051,doc/master/ChebyshevPol_8h_source.html,https://root.cern,https://root.cern/doc/master/ChebyshevPol_8h_source.html,1,['Guid'],['Guide']
Usability,"Primitives_t = std::vector<std::unique_ptr<RDisplayItem> >. Definition at line 31 of file RPadDisplayItem.hxx. Constructor & Destructor Documentation. ◆ RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::RPadBaseDisplayItem ; (; ). default . ◆ ~RPadBaseDisplayItem(). ROOT::Experimental::RPadBaseDisplayItem::~RPadBaseDisplayItem ; (; ). overridedefault . Member Function Documentation. ◆ Add(). void ROOT::Experimental::RPadBaseDisplayItem::Add ; (; std::unique_ptr< RDisplayItem > && ; item, . std::shared_ptr< RStyle > && ; style . ). inline . Add display item and style which should be used for it. ; Definition at line 42 of file RPadDisplayItem.hxx. ◆ SetAttributes(). void ROOT::Experimental::RPadBaseDisplayItem::SetAttributes ; (; const RAttrMap * ; f). inline . Definition at line 40 of file RPadDisplayItem.hxx. ◆ SetPadStyle(). void ROOT::Experimental::RPadBaseDisplayItem::SetPadStyle ; (; std::shared_ptr< RStyle > && ; style). inline . Assign style for the pad. ; Definition at line 51 of file RPadDisplayItem.hxx. Member Data Documentation. ◆ fAttr. const RAttrMap* ROOT::Experimental::RPadBaseDisplayItem::fAttr {nullptr}. protected . temporary pointer on attributes ; Definition at line 34 of file RPadDisplayItem.hxx. ◆ fPrimitives. PadPrimitives_t ROOT::Experimental::RPadBaseDisplayItem::fPrimitives. protected . display items for all primitives in the pad ; Definition at line 35 of file RPadDisplayItem.hxx. ◆ fStyles. std::vector<std::shared_ptr<RStyle> > ROOT::Experimental::RPadBaseDisplayItem::fStyles. protected . ! locked styles of the objects and pad until streaming is performed ; Definition at line 36 of file RPadDisplayItem.hxx. Libraries for ROOT::Experimental::RPadBaseDisplayItem:. [legend]; The documentation for this class was generated from the following file:; graf2d/gpadv7/inc/ROOT/RPadDisplayItem.hxx. ROOTExperimentalRPadBaseDisplayItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html:4851,Guid,Guide,4851,doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBaseDisplayItem.html,1,['Guid'],['Guide']
Usability,"Print ; (; Option_t * ; option = """"); const. overridevirtual . Pretty print basic ZIP member info. ; Reimplemented from TObject.; Definition at line 670 of file TZIPFile.cxx. ◆ Streamer(). void TZIPMember::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TArchiveMember. ◆ StreamerNVirtual(). void TZIPMember::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 190 of file TZIPFile.h. Friends And Related Symbol Documentation. ◆ TZIPFile. friend class TZIPFile. friend . Definition at line 158 of file TZIPFile.h. Member Data Documentation. ◆ fAttrExt. UInt_t TZIPMember::fAttrExt. private . External file attributes. ; Definition at line 167 of file TZIPFile.h. ◆ fAttrInt. UInt_t TZIPMember::fAttrInt. private . Internal file attributes. ; Definition at line 166 of file TZIPFile.h. ◆ fCRC32. UInt_t TZIPMember::fCRC32. private . CRC-32 for all decompressed data. ; Definition at line 165 of file TZIPFile.h. ◆ fGlobal. void* TZIPMember::fGlobal. private . Extra directory data. ; Definition at line 163 of file TZIPFile.h. ◆ fGlobalLen. UInt_t TZIPMember::fGlobalLen. private . Length of extra directory data. ; Definition at line 164 of file TZIPFile.h. ◆ fLevel. UInt_t TZIPMember::fLevel. private . Compression level. ; Definition at line 169 of file TZIPFile.h. ◆ fLocal. void* TZIPMember::fLocal. private . Extra file header data. ; Definition at line 161 of file TZIPFile.h. ◆ fLocalLen. UInt_t TZIPMember::fLocalLen. private . Length of extra file header data. ; Definition at line 162 of file TZIPFile.h. ◆ fMethod. UInt_t TZIPMember::fMethod. private . Compression type. ; Definition at line 168 of file TZIPFile.h. Libraries for TZIPMember:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TZIPFile.h; io/io/src/TZIPFile.cxx. TZIPMember. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPMember.html:16876,Guid,Guide,16876,doc/master/classTZIPMember.html,https://root.cern,https://root.cern/doc/master/classTZIPMember.html,1,['Guid'],['Guide']
Usability,"Product(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. RooArgSet components(); { RooArgSet tmp(_compRSet) ; tmp.add(_compCSet) ; return tmp ; }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Mon Jul 4 15:23:44 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProduct.html:34894,intuit,intuitively,34894,root/html530/RooProduct.html,https://root.cern,https://root.cern/root/html530/RooProduct.html,1,['intuit'],['intuitively']
Usability,"Product(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. RooArgSet components(); { RooArgSet tmp(_compRSet) ; tmp.add(_compCSet) ; return tmp ; }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Sat Oct 9 20:48:34 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProduct.html:34377,intuit,intuitively,34377,root/html528/RooProduct.html,https://root.cern,https://root.cern/root/html528/RooProduct.html,1,['intuit'],['intuitively']
Usability,"ProjectedFieldsstd::vector< RFieldBase * > fAddedProjectedFieldsPoints to the projected fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:113; ROOT::Experimental::Internal::RNTupleModelChangeset::fAddedFieldsstd::vector< RFieldBase * > fAddedFieldsPoints to the fields in fModel that were added as part of an updater transaction.Definition RNTupleModel.hxx:111; ROOT::Experimental::Internal::RNTupleModelChangeset::fModelRNTupleModel & fModelDefinition RNTupleModel.hxx:109; ROOT::Experimental::Internal::RNTupleModelChangeset::RNTupleModelChangesetRNTupleModelChangeset(RNTupleModel &model)Definition RNTupleModel.hxx:115; ROOT::Experimental::Internal::RNTupleModelChangeset::IsEmptybool IsEmpty() constDefinition RNTupleModel.hxx:116; ROOT::Experimental::RNTupleModel::NameWithDescription_tA wrapper over a field name and an optional description; used in AddField() and RUpdater::AddField()Definition RNTupleModel.hxx:147; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(const std::string &name)Definition RNTupleModel.hxx:149; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(std::string_view name)Definition RNTupleModel.hxx:150; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(std::string_view name, std::string_view descr)Definition RNTupleModel.hxx:151; ROOT::Experimental::RNTupleModel::NameWithDescription_t::NameWithDescription_tNameWithDescription_t(const char *name)Definition RNTupleModel.hxx:148; ROOT::Experimental::RNTupleModel::NameWithDescription_t::fNamestd::string_view fNameDefinition RNTupleModel.hxx:153; ROOT::Experimental::RNTupleModel::NameWithDescription_t::fDescriptionstd::string_view fDescriptionDefinition RNTupleModel.hxx:154. treentuplev7incROOTRNTupleModel.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleModel_8hxx_source.html:35647,Guid,Guide,35647,doc/master/RNTupleModel_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html,1,['Guid'],['Guide']
Usability,"ProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tfSmartRefresh; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. TEveScene(TGLScenePad* gl_scene, const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveSce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveScene.html:20697,simpl,simply,20697,root/html534/TEveScene.html,https://root.cern,https://root.cern/root/html534/TEveScene.html,1,['simpl'],['simply']
Usability,"Projection* p) const; virtual voidPropagateMainColor(Color_t color, Color_t old_color); virtual voidPropagateMainTransparency(Char_t t, Char_t old_t); virtual voidPropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); virtual voidPropagateVizParams(TEveElement* el = 0); virtual voidRemoveProjected(TEveProjected* p); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TEveProjectable&operator=(const TEveProjectable&). Data Members; protected:. list<TEveProjected*>fProjectedListreferences to projected instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TEveProjectable(); Destructor.; Force projected replicas to unreference *this, then destroy them. void AnnihilateProjecteds(); Optimized destroy of projected elements with condition; there is only one parent for projected element. Method is; called from TEveElement::Annihilate(). void ClearProjectedList(). void AddProjectedsToSet(set<TEveElement*>& set); Add the projected elements to the set, dyn-casting them to; TEveElement. void PropagateVizParams(TEveElement* el = 0); Set visualization parameters of projecteds.; Use element el as model. If el == 0 (default), this casted to; TEveElement is used. void PropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); Set render state of projecteds. void PropagateMainColor(Color_t color, Color_t old_color); Set main color of projecteds if their color is the same as old_color. void PropagateMainTransparency(Char_t t, Char_t old_t); Set main transparency of projecteds if their transparecy is the; same as the old one. TEveProjectable& operator=(const TEveProjectable& ). TClass* ProjectedClass(const TEveProjection* p) const. Bool_t HasProjecteds() const; { return ! fProjectedList.empty(); }. ProjList_i BeginProjecteds(); { return fProjectedList.begin(); }. ProjList_i EndProjecteds(); { return fProjectedList.end(); }. void AddProjected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveProjectable.html:2223,Clear,ClearProjectedList,2223,root/html534/TEveProjectable.html,https://root.cern,https://root.cern/root/html534/TEveProjectable.html,1,['Clear'],['ClearProjectedList']
Usability,"Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia6 Interface to Pythia6.1 Event Generator; TPythia6Decayer Particle Decayer Base Class; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQuaternion a quaternion class; TQueryDescription Query description; TQue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:118729,undo,undo,118729,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['undo'],['undo']
Usability,"ProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25318,Clear,Clear,25318,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,4,['Clear'],['Clear']
Usability,"ProofPlayer.h. ◆ SetMerging(). void TProofPlayer::SetMerging ; (; Bool_t ; = kTRUE). inlineoverridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 215 of file TProofPlayer.h. ◆ SetOutputFilePath(). void TProofPlayer::SetOutputFilePath ; (; const char * ; fp). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 220 of file TProofPlayer.h. ◆ SetProcessing(). void TProofPlayer::SetProcessing ; (; Bool_t ; on = kTRUE). Set processing bit according to 'on'. ; Definition at line 274 of file TProofPlayer.cxx. ◆ SetStopTimer(). void TProofPlayer::SetStopTimer ; (; Bool_t ; on = kTRUE, . Bool_t ; abort = kFALSE, . Int_t ; timeout = 0 . ). overridevirtual . Enable/disable the timer to stop/abort processing. ; The 'timeout' is in seconds. ; Implements TVirtualProofPlayer.; Definition at line 323 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayer::SetupFeedback ; (; ). protectedvirtual . Set up feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, and TProofPlayerLite.; Definition at line 1642 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayer::StopFeedback ; (; ). virtual . Stop feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, and TProofPlayerSlave.; Definition at line 1650 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop the process after this event. ; If timeout is positive, start a timer firing after timeout seconds to hard-stop time-expensive events. ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 287 of file TProofPlayer.cxx. ◆ StoreFeedback(). void TProofPlayer::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback list (may not be used in this class). ; Implem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:42013,feedback,feedback,42013,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"ProofPlayer::AddInput ; (; TObject * ; inp). pure virtual . Implemented in TProofPlayer. ◆ AddOutput(). virtual void TVirtualProofPlayer::AddOutput ; (; TList * ; out). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ AddOutputObject(). virtual Int_t TVirtualProofPlayer::AddOutputObject ; (; TObject * ; obj). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ AddQueryResult(). virtual void TVirtualProofPlayer::AddQueryResult ; (; TQueryResult * ; q). pure virtual . Implemented in TProofPlayer. ◆ Class(). static TClass * TVirtualProofPlayer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualProofPlayer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualProofPlayer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 142 of file TVirtualProofPlayer.h. ◆ ClearInput(). virtual void TVirtualProofPlayer::ClearInput ; (; ). pure virtual . Implemented in TProofPlayer. ◆ Create(). TVirtualProofPlayer * TVirtualProofPlayer::Create ; (; const char * ; player, . TProof * ; p, . TSocket * ; s = 0 . ). static . Create a PROOF player. ; Definition at line 28 of file TVirtualProofPlayer.cxx. ◆ CreateDrawFeedback(). virtual TDrawFeedback * TVirtualProofPlayer::CreateDrawFeedback ; (; TProof * ; p). pure virtual . Implemented in TProofPlayer. ◆ DeclFileName(). static const char * TVirtualProofPlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 142 of file TVirtualProofPlayer.h. ◆ DeleteDrawFeedback(). virtual void TVirtualProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). pure virtual . Implemented in TProofPlayer. ◆ DrawSelect(). virtual Long64_t TVirtualProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:20444,Clear,ClearInput,20444,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Clear'],['ClearInput']
Usability,ProofPlayerSuperMaster::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayerRemote. ◆ StreamerNVirtual(). void TProofPlayerSuperMaster::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 442 of file TProofPlayer.h. Member Data Documentation. ◆ fReturnFeedback. Bool_t TProofPlayerSuperMaster::fReturnFeedback. private . Definition at line 409 of file TProofPlayer.h. ◆ fSlaveActW. TArrayI TProofPlayerSuperMaster::fSlaveActW. private . Definition at line 405 of file TProofPlayer.h. ◆ fSlaveBytesRead. TArrayL64 TProofPlayerSuperMaster::fSlaveBytesRead. private . Definition at line 400 of file TProofPlayer.h. ◆ fSlaveEffS. TArrayF TProofPlayerSuperMaster::fSlaveEffS. private . Definition at line 407 of file TProofPlayer.h. ◆ fSlaveEvtRti. TArrayF TProofPlayerSuperMaster::fSlaveEvtRti. private . Definition at line 403 of file TProofPlayer.h. ◆ fSlaveInitTime. TArrayF TProofPlayerSuperMaster::fSlaveInitTime. private . Definition at line 401 of file TProofPlayer.h. ◆ fSlaveMBRti. TArrayF TProofPlayerSuperMaster::fSlaveMBRti. private . Definition at line 404 of file TProofPlayer.h. ◆ fSlaveProcTime. TArrayF TProofPlayerSuperMaster::fSlaveProcTime. private . Definition at line 402 of file TProofPlayer.h. ◆ fSlaveProgress. TArrayL64 TProofPlayerSuperMaster::fSlaveProgress. private . Definition at line 398 of file TProofPlayer.h. ◆ fSlaves. TList TProofPlayerSuperMaster::fSlaves. private . Definition at line 408 of file TProofPlayer.h. ◆ fSlaveTotals. TArrayL64 TProofPlayerSuperMaster::fSlaveTotals. private . Definition at line 399 of file TProofPlayer.h. ◆ fSlaveTotS. TArrayI TProofPlayerSuperMaster::fSlaveTotS. private . Definition at line 406 of file TProofPlayer.h. proof/proofplayer/inc/TProofPlayer.h; proof/proofplayer/src/TProofPlayer.cxx. TProofPlayerSuperMaster. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:16 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:32813,Guid,Guide,32813,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['Guid'],['Guide']
Usability,ProofProgressStatus::SetBytesRead ; (; Long64_t ; bytesRead). inline . Definition at line 60 of file TProofProgressStatus.h. ◆ SetCPUTime(). void TProofProgressStatus::SetCPUTime ; (; Double_t ; procTime). inline . Definition at line 67 of file TProofProgressStatus.h. ◆ SetEntries(). void TProofProgressStatus::SetEntries ; (; Long64_t ; entries). inline . Definition at line 57 of file TProofProgressStatus.h. ◆ SetLastEntries(). void TProofProgressStatus::SetLastEntries ; (; Long64_t ; entries). inline . Definition at line 56 of file TProofProgressStatus.h. ◆ SetLastProcTime(). void TProofProgressStatus::SetLastProcTime ; (; Double_t ; procTime). inline . Definition at line 64 of file TProofProgressStatus.h. ◆ SetLastUpdate(). void TProofProgressStatus::SetLastUpdate ; (; Double_t ; updtTime = 0). Update time stamp either with the passed value (if > 0) or with the current time. ; Definition at line 104 of file TProofProgressStatus.cxx. ◆ SetLearnTime(). void TProofProgressStatus::SetLearnTime ; (; Double_t ; learnTime). inline . Definition at line 63 of file TProofProgressStatus.h. ◆ SetProcTime(). void TProofProgressStatus::SetProcTime ; (; Double_t ; procTime). inline . Definition at line 65 of file TProofProgressStatus.h. ◆ SetReadCalls(). void TProofProgressStatus::SetReadCalls ; (; Long64_t ; readCalls). inline . Definition at line 62 of file TProofProgressStatus.h. ◆ Streamer(). void TProofProgressStatus::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TProofProgressStatus::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TProofProgressStatus.h. Member Data Documentation. ◆ fBytesRead. Long64_t TProofProgressStatus::fBytesRead. private . Definition at line 33 of file TProofProgressStatus.h. ◆ fCPUTime. Double_t TProofProgressStatus::fCPUTime. private . Definition at line 38 of file TProofProgressStatus.h. ◆ fEntrie,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressStatus.html:17206,learn,learnTime,17206,doc/master/classTProofProgressStatus.html,https://root.cern,https://root.cern/doc/master/classTProofProgressStatus.html,1,['learn'],['learnTime']
Usability,"Prop = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:2068,clear,clearShapeDirty,2068,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['clear'],['clearShapeDirty']
Usability,"Prop = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCategory.html:2068,clear,clearShapeDirty,2068,root/html528/RooCategory.html,https://root.cern,https://root.cern/root/html528/RooCategory.html,2,['clear'],['clearShapeDirty']
Usability,Properties & RooSharedProperties::operator= ; (; RooSharedProperties && ; ). delete . ◆ operator==(). bool RooSharedProperties::operator== ; (; const RooSharedProperties & ; other); const. Return true of unique id of this property is equal to that of other. ; Definition at line 69 of file RooSharedProperties.cxx. ◆ Print(). void RooSharedProperties::Print ; (; Option_t * ; opts = nullptr); const. overridevirtual . Printing interface. ; Reimplemented from TObject.; Definition at line 78 of file RooSharedProperties.cxx. ◆ refCount(). Int_t RooSharedProperties::refCount ; (; ); const. inline . Definition at line 42 of file RooSharedProperties.h. ◆ setInSharedList(). void RooSharedProperties::setInSharedList ; (; ). inline . Definition at line 44 of file RooSharedProperties.h. ◆ Streamer(). void RooSharedProperties::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooSharedProperties::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file RooSharedProperties.h. ◆ uuid(). UUID RooSharedProperties::uuid ; (; ); const. inline . Definition at line 58 of file RooSharedProperties.h. Member Data Documentation. ◆ _inSharedList. Int_t RooSharedProperties::_inSharedList. protected . ! Is in shared list ; Definition at line 64 of file RooSharedProperties.h. ◆ _refCount. Int_t RooSharedProperties::_refCount. protected . ! Use count ; Definition at line 63 of file RooSharedProperties.h. ◆ _uuid. TUUID RooSharedProperties::_uuid. protected . Unique object ID. ; Definition at line 62 of file RooSharedProperties.h. Libraries for RooSharedProperties:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooSharedProperties.h; roofit/roofitcore/src/RooSharedProperties.cxx. RooSharedProperties. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSharedProperties.html:15089,Guid,Guide,15089,doc/master/classRooSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooSharedProperties.html,1,['Guid'],['Guide']
Usability,"Proxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:162857,Simpl,Simple,162857,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['Simpl'],['Simple']
Usability,"Proxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:158922,Simpl,Simple,158922,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,2,['Simpl'],['Simple']
Usability,"Proxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:157069,Simpl,Simple,157069,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Simpl'],['Simple']
Usability,"Proxyvirtual; operator=(const TGenCollectionProxy &)TGenCollectionProxyprivate; operator[](UInt_t idx) constTVirtualCollectionProxyinline; PopProxy() overrideTGenCollectionProxyvirtual; Proxies_t typedefTGenCollectionProxyprotected; PushProxy(void *objstart) overrideTGenCollectionProxyvirtual; ReadBuffer(TBuffer &b, void *obj)TGenCollectionProxyvirtual; ReadBuffer(TBuffer &b, void *obj, const TClass *onfileClass)TGenCollectionProxyvirtual; Reset() overrideTGenCollectionProxyvirtual; Resize(UInt_t n, Bool_t force_delete)TGenCollectionProxyvirtual; SetOnFileClass(TClass *cl)TGenCollectionProxyinlinevirtual; Size() const overrideTGenCollectionProxyvirtual; Sizeof() const overrideTGenCollectionProxyvirtual; Sizing_t typedefTGenCollectionProxyprotected; Staged_t typedefTGenCollectionProxyprotected; Streamer(TBuffer &refBuffer)TGenCollectionProxyvirtual; Streamer(TBuffer &refBuffer, void *pObject, int siz)TGenCollectionProxyvirtual; TGenCollectionProxy()TGenCollectionProxyprivate; TGenCollectionProxy(const TGenCollectionProxy &copy)TGenCollectionProxy; TGenCollectionProxy(Info_t typ, size_t iter_size)TGenCollectionProxy; TGenCollectionProxy(const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl)TGenCollectionProxy; TGenMapProxy(const TGenCollectionProxy &c)TGenMapProxyinline; TGenSetProxy(const TGenCollectionProxy &c)TGenSetProxyinline; TGenVectorProxy(const TGenCollectionProxy &c)TGenVectorProxyinline; TVirtualCollectionProxy(const TVirtualCollectionProxy &)=deleteTVirtualCollectionProxyprivate; TVirtualCollectionProxy()TVirtualCollectionProxyinline; TVirtualCollectionProxy(TClass *cl)TVirtualCollectionProxyinline; ~TGenCollectionProxy() overrideTGenCollectionProxy; ~TGenMapProxy() overrideTGenMapProxyinline; ~TGenSetProxy() overrideTGenSetProxyinline; ~TGenVectorProxy() overrideTGenVectorProxyinline; ~TVirtualCollectionProxy()TVirtualCollectionProxyinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenMapProxy-members.html:6968,Guid,Guide,6968,doc/master/classTGenMapProxy-members.html,https://root.cern,https://root.cern/doc/master/classTGenMapProxy-members.html,1,['Guid'],['Guide']
Usability,"Ptr.hxx:175; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; bool; F#define F(x, y, z); ROOT::Internal::RDFDefinition RArrowDS.hxx:23; ROOT::Internal::RDF::NotHelperstd::function< bool(ArgTypes...)> NotHelper(ROOT::TypeTraits::TypeList< ArgTypes... >, F &&f)Definition RDFHelpers.hxx:37; ROOT::Internal::RDF::PassAsVecauto PassAsVec(F &&f) -> PassAsVecHelper< std::make_index_sequence< N >, T, F >Definition RDFHelpers.hxx:63; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::RDF::Notauto Not(F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)))Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns ...Definition RDFHelpers.hxx:83; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; ROOT::RDF::AsRNodeRNode AsRNode(NodeType node)Cast a RDataFrame node to the common type ROOT::RDF::RNode.Definition RDFHelpers.hxx:158; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::TypeTraits::TypeListLightweight storage for a collection of types.Definition TypeTraits.hxx:25. treedataframeincROOTRDFHelpers.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:28747,Guid,Guide,28747,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['Guid'],['Guide']
Usability,"Public Member Functions;  TTreeReaderDescriptor (ReaderType type, TString dataType, TString name, TString branchName);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:2000,Clear,Clear,2000,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,1,['Clear'],['Clear']
Usability,"Pythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf101_basics.py This tutorial illustrates the basic features of RooFit ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 ;  rf103_interprfuncs.py 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 Interpreted functions and p.d.f.s ;  rf104_classfactory.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #104 ;  rf104_classfactory.py BASIC FUNCTIONALITY' RooFit tutorial macro #104 The class factory for functions and p.d.f.s ;  rf105_funcbinding.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #105 ;  rf106_plotdecoration.C 'BASIC FUNCTIONALITY' RooFit tutorial m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:147980,Simpl,SimpleFitting,147980,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['SimpleFitting']
Usability,"Pythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 ;  rf104_classfactory.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #104 ;  rf105_funcbinding.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #105 ;  rf106_plotdecoration.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #106 ;  rf107_plotstyles.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #107 ;  rf108_plotbinning.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #108 ;  rf109_chi2residpull.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #109 ;  rf110_normintegration.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:140623,Simpl,SimpleFitting,140623,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,['Simpl'],['SimpleFitting']
Usability,"QObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); voidCheckRemote(TGListTreeItem* item); Bool_tCheckSorted(TGListTreeItem* item, Bool_t but = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClicked(TGListTreeItem* item, Int_t btn, Int_t x, Int_t y); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTBrowserImp::CloseTabs(); virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGFileBrowser.html:2200,Clear,Clear,2200,root/html530/TGFileBrowser.html,https://root.cern,https://root.cern/root/html530/TGFileBrowser.html,1,['Clear'],['Clear']
Usability,"QObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); voidCheckRemote(TGListTreeItem* item); Bool_tCheckSorted(TGListTreeItem* item, Bool_t but = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClicked(TGListTreeItem* item, Int_t btn, Int_t x, Int_t y); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileBrowser.html:2200,Clear,Clear,2200,root/html528/TGFileBrowser.html,https://root.cern,https://root.cern/root/html528/TGFileBrowser.html,1,['Clear'],['Clear']
Usability,"QObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGProgressBar.h>. Inheritance diagram for TGHProgressBar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHProgressBar() [1/2]. TGHProgressBar::TGHProgressBar ; (; const TGWindow * ; p = nullptr, . UInt_t ; w = 4, . UInt_t ; h = kProgressBarTextWidth, . Pixel_t ; back = GetWhitePixel(), . Pixel_t ; barcolor = GetDefaultSelectedBackground(), . GContext_t ; norm = GetDefaultGC()(), . FontStruct_t ; font = GetDefaultFontStruct(), . UInt_t ; options = kDoubleBorder | kSunkenFrame . ). Horizontal progress bar constructor. ; Definition at line 223 of file TGProgressBar.cxx. ◆ TGHProgressBar() [2/2]. TGHProgressBar::TGHProgressBar ; (; const TGWindow * ; p, . EBarType ; type, . UInt_t ; w . ). Simple constructor allow you to create either a standard progress bar, or a more fancy progress bar (fancy means: double sized border, white background and a bit wider to allow for text to be printed in the bar. ; Definition at line 238 of file TGProgressBar.cxx. ◆ ~TGHProgressBar(). TGHProgressBar::~TGHProgressBar ; (; ). inlineoverride . Definition at line 108 of file TGProgressBar.h. Member Function Documentation. ◆ Class(). static TClass * TGHProgressBar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGHProgressBar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGHProgressBar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 118 of file TGProgressBar.h. ◆ DeclFileName(). static const char * TGHProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 118 of file TGProgressBar.h. ◆ DoRedraw(). void TGHProgressBar::DoRedraw ; (; ). overrideprotectedvirtual . Draw hori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:31992,Simpl,Simple,31992,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,3,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"Quartz graphics backend (MacOS X only). davix; *; DavIx library for HTTP/WEBDAV access. dcache; ON; dCache support, requires libdcap from DESY. exceptions; ON; Turn on compiler exception handling capability. explicit link; *; Explicitly link with all dependent libraries. fail-on-missing; OFF; Fail the configure step if a required external package is missing. fftw3; ON; Fast Fourier Transform support, requires libfftw3. fitsio; ON; Read images and data from FITS files, requires cfitsio. fortran; *; Enable the Fortran components of ROOT. gdml; *; GDML writer and reader. geocad; OFF; ROOT-CAD Interface. genvector; ON; Build the new libGenVector library. gfal; ON; GFAL support, requires libgfal. glite; ON; gLite support, requires libglite-api-wrapper v.3 from GSI (https://subversion.gsi.de/trac/dgrid/wiki). globus; OFF; Globus authentication support, requires Globus toolkit. gminimal; OFF; Do not automatically search for support libraries, but include X11. gnuinstall; OFF; Perform installation following the GNU guidelines. gsl_shared; OFF; Enable linking against shared libraries for GSL (default no). gviz; ON; Graphs visualization support, requires graphviz. hdfs; ON; HDFS support; requires libhdfs from HDFS >= 0.19.1. http; *; HTTP Server support. imt; ON; Enable ROOT Multithreading Capabilities (default ON from version 6.10). jemalloc; OFF; Using the jemalloc allocator. krb5; ON; Kerberos5 support, requires Kerberos libs. ldap; ON; LDAP support, requires (Open)LDAP libs. mathmore; ON; Build the new libMathMore extended math library, requires GSL (vers. >= 1.8). memstat; *; A memory statistics utility, helps to detect memory leaks. minimal; OFF; Do not automatically search for support libraries. minuit2; *; Build the new libMinuit2 minimizer library. monalisa; ON; Monalisa monitoring support, requires libapmoncpp. mt; OFF; Multi-threading support (deprecated and unused since ROOT v6.12). mysql; ON; MySQL support, requires libmysqlclient. odbc; ON; ODBC support, require",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:10042,guid,guidelines,10042,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['guid'],['guidelines']
Usability,"QueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressDialog.html:4144,progress bar,progress bar,4144,root/html602/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html602/TProofProgressDialog.html,2,['progress bar'],['progress bar']
Usability,"QueryMode (EQueryMode mode);  Change query running mode to the one specified by 'mode'. ;  ; void SetRealTimeLog (Bool_t on=kTRUE);  Switch ON/OFF the real-time logging facility. ;  ; virtual void ShowCache (Bool_t all=kFALSE);  List contents of file cache. ;  ; virtual void ShowData ();  List contents of the data directory in the sandbox. ;  ; void ShowDataSet (const char *dataset="""", const char *opt=""filter:SsCc"");  display meta-info for given dataset usi ;  ; virtual void ShowDataSetCache (const char *dataset=0);  Display the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ShowDataSetQuota (Option_t *opt=0);  shows the quota and usage of all groups if opt contains ""U"" shows also distribution of usage on user-level ;  ; virtual void ShowDataSets (const char *uri="""", const char *optStr="""");  Shows datasets in locations that match the uri. ;  ; void ShowEnabledPackages (Bool_t all=kFALSE);  List which packages are enabled. ;  ; void ShowFeedback () const;  Show items in feedback list. ;  ; void ShowLog (const char *queryref);  Display on screen the content of the temporary log file for query in reference. ;  ; void ShowLog (Int_t qry=-1);  Display on screen the content of the temporary log file. ;  ; void ShowMissingFiles (TQueryResult *qr=0);  Show information about missing files during query described by 'qr' or the last query if qr is null (default). ;  ; void ShowPackages (Bool_t all=kFALSE, Bool_t redirlog=kFALSE);  List contents of package directory. ;  ; void ShowParameters (const char *wildcard=""PROOF_*"") const;  Show the input list parameters specified by the wildcard. ;  ; void ShowQueries (Option_t *opt="""");  Ask the master for the list of queries. ;  ; virtual void ShowStagingStatusDataSet (const char *dataset, const char *optStr=""filter:SsCc"");  Like GetStagingStatusDataSet, but displays results immediately. ;  ; void StartupMessage (const char *msg, Bool_t status, Int_t done, Int_t total);  Send startup message. ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:20065,feedback,feedback,20065,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['feedback'],['feedback']
Usability,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:59932,clear,clearEvalErrorLog,59932,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:58702,clear,clearEvalErrorLog,58702,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,104,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"R2 >::RepType > Div(const SMatrix< T, D, D2, R1 > &lhs, const SMatrix< T, D, D2, R2 > &rhs)Division (element wise) of two matrices of the same dimensions: C(i,j) = A(i,j) / B(i,...Definition BinaryOperators.h:895; ROOT::Math::TimesExpr< BinaryOp< MulOp< T >, SMatrix< T, D, D2, R1 >, SMatrix< T, D, D2, R2 >, T >, T, D, D2, typename AddPolicy< T, D, D2, R1, R2 >::RepType > Times(const SMatrix< T, D, D2, R1 > &lhs, const SMatrix< T, D, D2, R2 > &rhs)Element by element matrix multiplication C(i,j) = A(i,j)*B(i,j) returning a matrix expression.Definition BinaryOperators.h:652; ROOT::Math::operator/VecExpr< BinaryOp< DivOp< T >, SVector< T, D >, SVector< T, D >, T >, T, D > operator/(const SVector< T, D > &lhs, const SVector< T, D > &rhs)Element by element division of vectors of the same dimension: v3(i) = v1(i)/v2(i) returning a vector ...Definition BinaryOperators.h:784; MathNamespace for new Math classes and functions.; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::AddPolicy::RepTypeMatRepStd< typename R1::value_type, N1, N2 > RepTypeDefinition BinaryOpPolicy.h:50. mathsmatrixincMathBinaryOperators.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinaryOperators_8h_source.html:50526,Guid,Guide,50526,doc/master/BinaryOperators_8h_source.html,https://root.cern,https://root.cern/doc/master/BinaryOperators_8h_source.html,1,['Guid'],['Guide']
Usability,"RATOR > ; void add (ITERATOR itBegin, ITERATOR itEnd);  ; template<typename T > ; void add (T value, double weight=1.0);  ; void clear ();  ; int count () const;  ; double mean () const;  ; double stdDev () const;  ; double stdDev_corr () const;  ; double var () const;  ; double var_corr () const;  ; double weights () const;  . Private Attributes; double m_mean;  ; size_t m_n;  ; double m_squared;  ; double m_sumWeights;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ MeanVariance(). TMVA::DNN::MeanVariance::MeanVariance ; (; ). inline . Definition at line 77 of file NeuralNet.h. Member Function Documentation. ◆ add() [1/2]. template<typename ITERATOR > . void TMVA::DNN::MeanVariance::add ; (; ITERATOR ; itBegin, . ITERATOR ; itEnd . ). inline . Definition at line 116 of file NeuralNet.h. ◆ add() [2/2]. template<typename T > . void TMVA::DNN::MeanVariance::add ; (; T ; value, . double ; weight = 1.0 . ). inline . Definition at line 93 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::MeanVariance::clear ; (; ). inline . Definition at line 84 of file NeuralNet.h. ◆ count(). int TMVA::DNN::MeanVariance::count ; (; ); const. inline . Definition at line 124 of file NeuralNet.h. ◆ mean(). double TMVA::DNN::MeanVariance::mean ; (; ); const. inline . Definition at line 126 of file NeuralNet.h. ◆ stdDev(). double TMVA::DNN::MeanVariance::stdDev ; (; ); const. inline . Definition at line 145 of file NeuralNet.h. ◆ stdDev_corr(). double TMVA::DNN::MeanVariance::stdDev_corr ; (; ); const. inline . Definition at line 144 of file NeuralNet.h. ◆ var(). double TMVA::DNN::MeanVariance::var ; (; ); const. inline . Definition at line 127 of file NeuralNet.h. ◆ var_corr(). double TMVA::DNN::MeanVariance::var_corr ; (; ); const. inline . Definition at line 136 of file NeuralNet.h. ◆ weights(). double TMVA::DNN::MeanVariance::weights ; (; ); const. inline . Definition at line 125 of file NeuralNet.h. Member Data Documentation. ◆ m_mean. double TMVA::DNN::MeanVaria",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1MeanVariance.html:1375,clear,clear,1375,doc/master/classTMVA_1_1DNN_1_1MeanVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1MeanVariance.html,1,['clear'],['clear']
Usability,"RDF::RInterfaceBase::GetNFilesunsigned int GetNFiles()Definition RInterfaceBase.cxx:27; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::BookRResultPtr< typename std::decay_t< Helper >::Result_t > Book(Helper &&helper, const ColumnNames_t &columns={})Book execution of a custom action using a user-defined helper object.Definition RInterface.hxx:2984; ROOT::RDF::RResultHandleA type-erased version of RResultPtr and RResultMap.Definition RResultHandle.hxx:33; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Foreachvoid Foreach(F func, unsigned nTimes, unsigned nChunks=0)Execute a function without arguments several times in parallel, dividing the execution in nChunks.Definition TThreadExecutor.hxx:146; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:21162,simpl,simple,21162,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['simpl'],['simple']
Usability,"RDFColumnRegister.cxx. Member Data Documentation. ◆ fAliases. std::shared_ptr<const AliasesMap_t> ROOT::Internal::RDF::RColumnRegister::fAliases. private . Immutable map of Aliases, can be shared among several nodes. ; The pointee changes if a new Alias node is added to the RColumnRegister. It is a vector because we rely on insertion order to recreate the branch of the computation graph where necessary. ; Definition at line 91 of file RColumnRegister.hxx. ◆ fDefines. std::shared_ptr<const DefinesMap_t> ROOT::Internal::RDF::RColumnRegister::fDefines. private . Immutable collection of Defines, can be shared among several nodes. ; The pointee changes if a new Define node is added to the RColumnRegister. It is a vector because we rely on insertion order to recreate the branch of the computation graph where necessary. ; Definition at line 86 of file RColumnRegister.hxx. ◆ fLoopManager. ROOT::Detail::RDF::RLoopManager* ROOT::Internal::RDF::RColumnRegister::fLoopManager. private . The head node of the computation graph this register belongs to. Never null. ; Definition at line 74 of file RColumnRegister.hxx. ◆ fVariations. std::shared_ptr<const VariationsMap_t> ROOT::Internal::RDF::RColumnRegister::fVariations. private . Immutable multimap of Variations, can be shared among several nodes. ; The key is the name of an existing column, the values are all variations that affect that column. Variations that affect multiple columns are inserted in the map multiple times, once per column, and conversely each column (i.e. each key) can have several associated variations. ; Definition at line 81 of file RColumnRegister.hxx. Libraries for ROOT::Internal::RDF::RColumnRegister:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RColumnRegister.hxx; tree/dataframe/src/RDFColumnRegister.cxx. ROOTInternalRDFRColumnRegister. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html:13639,Guid,Guide,13639,doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RDF_1_1RColumnRegister.html,1,['Guid'],['Guide']
Usability,"RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF.html:16648,Guid,Guide,16648,doc/master/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html,1,['Guid'],['Guide']
Usability,"RDistances () const;  ; void GetRDistances (TVectorD &rdist);  returns the robust distances (helps to find outliers) ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:7811,Clear,Clear,7811,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['Clear'],['Clear']
Usability,"RESS:Generation -- RooMCStudy::run: sample 95; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 90; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 85; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 80; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 75; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 70; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 65; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 55; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 45; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 35; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 25; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 15; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 5; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#1] INFO:ObjectHandling -- RooWorkspace::import() importing RooRealVar::fpull; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pullGauss_over_pullGauss_Int[fpull]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pullGauss_over_pullGauss_Int[fpull]_fitParData_sumc) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf804_mcstudy_constr.C. tutorialsroofitrf804_mcstudy_constr.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf804__mcstudy__constr_8C.html:11441,Guid,Guide,11441,doc/master/rf804__mcstudy__constr_8C.html,https://root.cern,https://root.cern/doc/master/rf804__mcstudy__constr_8C.html,1,['Guid'],['Guide']
Usability,RNTupleCollectionView::GetFieldId ; (; std::string_view ; fieldName). inlineprivate . Definition at line 368 of file RNTupleView.hxx. ◆ GetView(). template<typename T > . RNTupleView< T > ROOT::Experimental::RNTupleCollectionView::GetView ; (; std::string_view ; fieldName). inline . Raises an exception if there is no field with the given name. ; Definition at line 404 of file RNTupleView.hxx. ◆ operator()() [1/2]. std::uint64_t ROOT::Experimental::RNTupleCollectionView::operator() ; (; NTupleSize_t ; globalIndex). inline . Definition at line 426 of file RNTupleView.hxx. ◆ operator()() [2/2]. std::uint64_t ROOT::Experimental::RNTupleCollectionView::operator() ; (; RClusterIndex ; clusterIndex). inline . Definition at line 432 of file RNTupleView.hxx. ◆ operator=() [1/2]. RNTupleCollectionView & ROOT::Experimental::RNTupleCollectionView::operator= ; (; const RNTupleCollectionView & ; other). delete . ◆ operator=() [2/2]. RNTupleCollectionView & ROOT::Experimental::RNTupleCollectionView::operator= ; (; RNTupleCollectionView && ; other). default . Friends And Related Symbol Documentation. ◆ RNTupleReader. friend class RNTupleReader. friend . Definition at line 339 of file RNTupleView.hxx. Member Data Documentation. ◆ fField. RField<RNTupleCardinality<std::uint64_t> > ROOT::Experimental::RNTupleCollectionView::fField. private . Definition at line 343 of file RNTupleView.hxx. ◆ fSource. Internal::RPageSource* ROOT::Experimental::RNTupleCollectionView::fSource. private . Definition at line 342 of file RNTupleView.hxx. ◆ fValue. RFieldBase::RValue ROOT::Experimental::RNTupleCollectionView::fValue. private . Definition at line 344 of file RNTupleView.hxx. Libraries for ROOT::Experimental::RNTupleCollectionView:. [legend]; The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RNTupleView.hxx. ROOTExperimentalRNTupleCollectionView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleCollectionView.html:6072,Guid,Guide,6072,doc/master/classROOT_1_1Experimental_1_1RNTupleCollectionView.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleCollectionView.html,1,['Guid'],['Guide']
Usability,"RNTupleWriter.hxx:138; ROOT::Experimental::RNTupleWriter::GetLastCommittedClusterGroupNTupleSize_t GetLastCommittedClusterGroup() constReturn the entry number that was last committed in a cluster group.Definition RNTupleWriter.hxx:133; ROOT::Experimental::RNTupleWriter::fZipTasksstd::unique_ptr< Internal::RPageStorage::RTaskScheduler > fZipTasksThe page sink's parallel page compression scheduler if IMT is on.Definition RNTupleWriter.hxx:68; ROOT::Experimental::RNTupleWriter::FillNoFlushvoid FillNoFlush(REntry &entry, RNTupleFillStatus &status)Fill an entry into this ntuple, but don't commit the cluster.Definition RNTupleWriter.hxx:112; ROOT::Experimental::RNTupleWriter::GetModelconst RNTupleModel & GetModel() constDefinition RNTupleWriter.hxx:140; ROOT::Experimental::RNTupleWriter::FlushColumnsvoid FlushColumns()Flush column data, preparing for CommitCluster or to reduce memory usage.Definition RNTupleWriter.hxx:115; ROOT::Experimental::RNTupleWriter::Fillstd::size_t Fill()The simplest user interface if the default entry that comes with the ntuple model is used.Definition RNTupleWriter.hxx:105; ROOT::Experimental::RNTupleWriter::GetLastFlushedNTupleSize_t GetLastFlushed() constReturn the entry number that was last flushed in a cluster.Definition RNTupleWriter.hxx:129; ROOT::Experimental::RNTupleWriter::CreateEntrystd::unique_ptr< REntry > CreateEntry()Definition RNTupleWriter.hxx:126; ROOT::Experimental::RNTupleWriter::Createstatic std::unique_ptr< RNTupleWriter > Create(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::GetUpdatableModelRNTupleModel & GetUpdatableModel()Definition RNTupleWriter.hxx:76; ROOT::Experimental::RNTupleWriter::GetLastCommittedNTupleSize_t GetLastCommitted() constReturn the entry number that was last committed in a cluster.Definition RNTupleW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:12621,simpl,simplest,12621,doc/master/RNTupleWriter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html,1,['simpl'],['simplest']
Usability,"RN_MSG(loc, str)Definition Error.h:80; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; ROOT::Fit::DataRange::GetInfRangestatic void GetInfRange(double &x1, double &x2)Definition DataRange.cxx:182; ROOT::Fit::DataRange::RangeSetstd::vector< std::pair< double, double > > RangeSetDefinition DataRange.h:39; ROOT::Fit::DataRange::fRangesRangeIntervals fRangeslist of all rangesDefinition DataRange.h:232; ROOT::Fit::DataRange::CleanRangeSetvoid CleanRangeSet(unsigned int icoord, double xmin, double xmax)internal function to remove all the existing ranges between xmin and xmax called when a new range is ...Definition DataRange.cxx:165; ROOT::Fit::DataRange::IsInsidebool IsInside(double x, unsigned int icoord=0) constcheck if a point is inside the range for the given coordinateDefinition DataRange.cxx:146; ROOT::Fit::DataRange::Clearvoid Clear(unsigned int icoord=0)clear all ranges in one coordinate (is now -inf, +inf)Definition DataRange.cxx:158; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::DataRangeDataRange(unsigned int dim=1)Default constructor (infinite range)Definition DataRange.h:45; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::operator()std::pair< double, double > operator()(unsigned int icoord=0, unsigned int irange=0) constreturn the i-th range for the coordinate icoord.Definition DataRange.cxx:78; ROOT::Fit::DataRange::SetRangevoid SetRange(unsigned int icoord, double xmin, double xmax)set a range [xmin,xmax] for the new coordinate icoord If more range exists for other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataRange_8cxx_source.html:7180,Clear,Clearvoid,7180,doc/master/DataRange_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataRange_8cxx_source.html,3,"['Clear', 'clear']","['Clear', 'Clearvoid', 'clear']"
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . . Getting Started. . Reference Guide. . Forum. . Gallery.  ; ROOT is ...; A modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.Start from examples or try it in your brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:1218,guid,guidelines,1218,d/index.html,https://root.cern,https://root.cern/d/index.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome About ROOT. ROOT is a framework for data processing, born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists use ROOT applications to analyze their data or to perform simulations. With ROOT you can:. Save data You can save your data (and any C++ object) in a compressed binary form in a ROOT file. The ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:1198,guid,guidelines,1198,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Development. The links in this menu and in the block on your right are intended for the ROOT developers and for people who want to contribute to the ROOT system. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sign in. Sitemap. DownloadDownload ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/development.html:1199,guid,guidelines,1199,d/development.html,https://root.cern,https://root.cern/d/development.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code documentation. This is mainly for software developers of ROOT and using ROOT to build the applications.; A general Users Guide is provided for a more in depth explanation of concepts and functionality a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:1201,guid,guidelines,1201,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find useful to browse the following documents:. Processing data with ROOT (to learn about the interactive and batch use of ROOT); Analyzing data with ROOT (about histograms and trees; mathematical and statisti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:1209,guid,guidelines,1209,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,2,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might not be necessary on some platforms.; Provided that ROOT is installed on your machine, these are the steps to follow to use a ROOT-flavoured C++ notebook:; # Install dependencies; sudo pip install jupyter metak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:1213,guid,guidelines,1213,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome News. 02-02-2019 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH University of Science and Technology - Poland) wanted to evaluate a set of Big Data tools for the analysis of the data from the TOTEM experiment which will enable interactive or semi-interacti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:1192,guid,guidelines,1192,d/news.html,https://root.cern,https://root.cern/d/news.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome ROOT 6 Analysis Workshop. Abstract; This tutorial will guide you through an example analysis with ROOT 6. It shows the recommended practices for analyzing data stored in ROOT TTrees - the most common format for High Energy Physics data.; It requires ROOT 6 as it uses several of its features.; . 0. Setting up ROOT ›. Navigate through this book; 0. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-6-analysis-workshop-1.html:1212,guid,guidelines,1212,d/root-6-analysis-workshop-1.html,https://root.cern,https://root.cern/d/root-6-analysis-workshop-1.html,2,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Support. Top level support is what makes ROOT a success. We do our utmost to solve any issues as soon as possible. To make this task as efficient as possible for us follow these few simple rules. In case you think you have found a bug, please first search the forum and roottalk digests to see if the issue has already been discussed. If not then ple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/support.html:1195,guid,guidelines,1195,d/support.html,https://root.cern,https://root.cern/d/support.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Contact Us. You can contact the ROOT developers in the following ways, in order of preference:. Via the RootTalk web forum. Use this forum to post your questions. ROOT team members are actively reading this forum and answering the questions. And if the developers don't happen to be online your question might be answered by a fellow user. Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/contact-us.html:1198,guid,guidelines,1198,d/contact-us.html,https://root.cern,https://root.cern/d/contact-us.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About License. The ROOT system is being made available under the LGPL 2.1 or (at your option) any later version, which allows ROOT to be used in a wide range of open and closed environments. The LGPL is copied verbatim below.; The optional MathMore library uses the GSL library which is licensed under the GPL and hence the MathMore library is only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:1195,guid,guidelines,1195,d/license.html,https://root.cern,https://root.cern/d/license.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without their contributions:; Andrei Gheata; Andrei works since 2001 in the offline group of the ALICE experiment. He is an experimental nuclear physicist who worked before ALICE on data analysis for heavy-ion e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:1207,guid,guidelines,1207,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Project Founders. Rene Brun ; ; Rene, a lifetime developer of ROOT. He joined CERN in 1973. While working with C. Rubbia at the ISR he developped the HBOOK package still in use today. In 1975 he followed Rubbia in the NA4 deep inelastic muon scattering experiment at the SPS where he was in charge of the simulation and reconstruction softwar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:1204,guid,guidelines,1204,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » About Team. . Axel Naumann ; ; Starting off as a physicist, Axel studied physics and math in Muenster, Germany. In 2000, he got a Ph.D. position for high energy physics in Nijmegen, The Netherlands. They sent him to Fermilab at Chicago, where he worked with the DØ experiment - which also meant writing software from PCI drivers to data analysis co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/team.html:1192,guid,guidelines,1192,d/team.html,https://root.cern,https://root.cern/d/team.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Blogs » Axel Naumann's blog Do we need yet another custom C++ interpreter?. Axel Naumann on Thu, 12/22/2011 - 22:13 . Hi,; ""A ROOT User"" asks ""Is it really necessary to replace CINT dictionary with cling?"", bringing up very reasonable concerns and arguments against re-implementing CINT. I will try to answer his comments to clarify why we do it, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:1234,guid,guidelines,1234,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Contribute Collaborate With Us. We warmly welcome external contributions to the ROOT! By providing code, you agree to transfer your copyright on the code to the ""ROOT project"". Of course you will be duly credited and your name will appear on the contributors page and in the CREDITS file shipped with every binary and source distribution. The copyr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:1207,guid,guidelines,1207,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that review pull requests and guide these packages over a couple of years.; An up-to-date, detailed mapping of code versus owners can be found at https://github.com/root-project/root/blob/master/.github/C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:1199,guid,guidelines,1199,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling; Namespaces; Using comments to document the code; Source file layout. Header file layout; Implementation file layout. Preferred Coding Style. Indentation; Placing Braces and Spaces. ClangFormat; Astyle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:1206,guid,guidelines,1206,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will find a number of conventions and tips for converting the existing source code to generate proper documentation.; How to generate the doxygen documentation; Developers may generate the documentation by hand to see the r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:1219,guid,guidelines,1219,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git Tips and Tricks; Creating a Pull Request. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Site",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:1198,guid,guidelines,1198,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environment with all the required ROOT externals coming from the central installations inAFS or CVMFS. This is exactly the same scripts used by the continuous integration system (Jenkins).; For slc and centos systems using the gcc compi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:1230,guid,guidelines,1230,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to use the ROOT Jenkins. The ROOT project uses a Jenkins instance to schedule a number of software development procedures (nightly builds, production of releases, documentation generation, etc.). Practical information about the service can be found here. The purpose of this page is to document the different existing procedures for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:1215,guid,guidelines,1215,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Meetings. All ROOT-related meetings ca be found in ROOT's Indico category; the upcoming ones can be seen here to the right.; Weekly Developers Meetings; Developers get together on a weekly basis to discuss the plans and review the progress on Monday's at 16:00 CET. Indico category; Vidyo ROOT Team meeting. Experiments Planning Meeting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meetings.html:1196,guid,guidelines,1196,d/meetings.html,https://root.cern,https://root.cern/d/meetings.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Program of Work. The program of work is guided by the project vision laid out here, and documented for the relevant years in the following documents:; 2019. Presentation. 2018. Presentation. 2017. Presentation at the ROOT planning meeting, Jan 11 2017; JIRA items. 2016. Presentation at the EP-SFT group meeting. 2015. Presentation at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/program-work.html:1203,guid,guidelines,1203,d/program-work.html,https://root.cern,https://root.cern/d/program-work.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:1194,guid,guidelines,1194,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:1205,guid,guidelines,1205,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:1201,guid,guidelines,1201,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week during the ROOT meeting. The hand-over to the next shifter must be carefully handled.; Forum Posts; All forum posts have to be followed up. Some hours can be given to the community to discuss the questions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:1210,guid,guidelines,1210,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages relative to always working on the master branch:; It is easy to keep track of upstream changes even when working on a protracted task.; The change tree remai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:1240,guid,guidelines,1240,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Creating a Pull Request. Prerequisites. You have set up git on our system; You have registered a GitHub account and forked the ROOT repository; You have cloned your forked ROOT repository using git clone https://github.com/<your GitHub username>/root. After you have cloned the repository, you will be on the master branch.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:1211,guid,guidelines,1211,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git How Tos. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages relative to always working on the master branch:. It is easy to keep track of upstream changes even when working on a protracted task.; The change tree remains simple, easy to understand at a glance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-how-tos.html:1199,guid,guidelines,1199,d/git-how-tos.html,https://root.cern,https://root.cern/d/git-how-tos.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git Tips and Tricks. Overview; This page gives some helpful hints and tricks on using git, along with a suggested work-flow, with an explanation of its motivation and details.; Some pertinent Git details; It is assumed at this point that you have a passing familiarity with CVS and/or Subversion; and that you have at least",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:1207,guid,guidelines,1207,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ssh key; Run; ssh-keygen -t rsa -b 4096 -C ""your_email@example.com"" -f ~/.ssh/github_id_rsa. The email address is for your convenience, it doesn't really matter what you put there; you can even use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:1202,guid,guidelines,1202,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Building ROOT. Introduction; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:1201,guid,guidelines,1201,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Courses. This page lists a number of ROOT tutorials and courses. Some are made by third parties others by the ROOT team.; Basic. ROOT Basic Course (CERN Technical Training: register here) ; CERN Summer Students' Introductory Tutorial (2018 2017, 2016, 2015 ); First Steps With ROOT; Introductory Tutorials (approx 2 hours); Lectures a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/courses.html:1195,guid,guidelines,1195,d/courses.html,https://root.cern,https://root.cern/d/courses.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Frequently Asked Questions; [expand all][collapse all]. How to generate a dictionary . A dictionary is a source file that once compiled, linked into a library or executable and loaded into a process will give to CINT all the information its need about a type or variable. A dictionary is essential for a C++ to entity to useable from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:1214,guid,guidelines,1214,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation How To. Developer's Tips . Graphics and GUI . Histograms . Input/Output . Jupyter Notebooks . Language Bindings . Legacy . Linear Algebra . Multicore . Trees . Type System . Virtual Monte Carlo . Writing a Graphical User Interface . Language Bindings. How To Call CERNLIB Routines from CINT? . How to inherit a C++ class from Python? ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/howtos.html:1194,guid,guidelines,1194,d/howtos.html,https://root.cern,https://root.cern/d/howtos.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out ROOT based data analysis:. PyROOTSpark : offers the possibility to use a simple map reduce interface to run existing root code with a few changes on Spark resources. The key is to use the PyROOT inteface in co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:1214,guid,guidelines,1214,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Publications. In case you want to cite ROOT in your own publications, this is the preferred reference. Rene Brun and Fons Rademakers,; ROOT - An Object Oriented Data Analysis Framework,; Proceedings AIHENP'96 Workshop, Lausanne, Sep. 1996, Nucl. Inst. & Meth. in Phys. Res. A 389 (1997) 81-86. See also http://root.cern.ch/. The most ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:1200,guid,guidelines,1200,d/publications.html,https://root.cern,https://root.cern/d/publications.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Man",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:1216,guid,guidelines,1216,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | downl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:1203,guid,guidelines,1203,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs. They are separated in two categories: C++ or python scripts and Jupyter notebooks.; The tutorials are available for all major ROOT releases. These are the links for the latest git snapshot. A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:1197,guid,guidelines,1197,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, extract some data from it, display a histogram and then fit it.;  ; Information about the ROOT classes can be found on the ROOT reference guide, and there is also a web based documentation and the Root prime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:1210,guid,guidelines,1210,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,2,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TBrowser. Now, with the TFile still open, let's do some interactive work. Start the ROOT Browser by typing:; root[1] new TBrowser(). Something like this should appear:. Figure 2: Example of TBrowser at start-up time; On the left, in the ""ROOT Files"" folder, you can find the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tbrowser.html:1221,guid,guidelines,1221,d/accessing-ttree-tbrowser.html,https://root.cern,https://root.cern/d/accessing-ttree-tbrowser.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROOT features (e.g. PROOF and PROOF-lite) you should use a class deriving from the TSelector to analyze a TTree. The selector's code will be used by calling TTree::Process().; We provide a TSelector derived class in a sim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:1222,guid,guidelines,1222,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Compiling Your Code (also known as ACLiC). You can run your code as compiled code instead of interpreted. This makes it possible to debug your code, and might give slightly faster code.; Wherever you would specify MyCode.C you can simply specify MyCode.C+ (note the trailing ""+"") and ROOT will start",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/compiling-your-code-also-known-aclic.html:1229,guid,guidelines,1229,d/compiling-your-code-also-known-aclic.html,https://root.cern,https://root.cern/d/compiling-your-code-also-known-aclic.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:1197,guid,guidelines,1197,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelector derived class in a simple source file. So please download also the following source file and save it where you can find it: EventDataSelector.C (or wget http://root-mirror.github.io/training/intro/EventDataSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:1215,guid,guidelines,1215,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming. Preparation; Start from the previously used macro (AnalyzeTree.C).; Adding a Variable; Just like for the sum of event sizes, you need to add a variable in your macro. We want to histogram the particles' fPosX; the type of the data member should thus be TH1F *. TH1F is a 1 dimensional",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:1201,guid,guidelines,1201,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Meet a TTree. We have created an example ROOT file containing a TTree: a typical data container used e.g. by all LHC experiments.; Start ROOT (it will reply with root[0]) and open the file located at http://root.cern/files/introtutorials/eventdata.root; To do so, just copy and paste:; TFile::Open(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:1200,guid,guidelines,1200,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is that only selected parts of it are in memory at any given time. Here, with the help of some illustrations by our colleague Ioannis, we see how to extract these parts. Sit back and enjoy - in this step ther",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:1206,guid,guidelines,1206,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials The End. You are done - that was the introductory tutorial!. Image by Tangopaso; If you want to go on, have a look at the ROOT Courses section!; . ‹ Using a TSelector with PROOF; up. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/end.html:1195,guid,guidelines,1195,d/end.html,https://root.cern,https://root.cern/d/end.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. For this exercise, you will probably need the TTree::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:1225,guid,guidelines,1225,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a Macro to Read a TTree. Why using a macro?; As real analyses don't fit into simple TTree::Draw() invocations, and as it is quite cumbersome to type the same lines again and again in the Root prompt, simply create macros for commonly used code. A macro is a file that is interpreted by ROOT.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:1217,guid,guidelines,1217,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it is possible to exploit all the available CPUs by using PROOF-Lite. N.B. PROOF-Lite doesn't work on Windows yet and it requires to use a selector composed of a source file and a header file. You can download both f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:1216,guid,guidelines,1216,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion of the user base requires a stable product we generally keep at least three versions of the system available for download. The development, production and old versions.; Production release; This is a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:1204,guid,guidelines,1204,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Releases. ; Pro ; Release 6.20/04 - 2020-04-01 ; . Old ; Release 6.18/04 - 2019-09-11 ; ; ; . Version 6 ; ; Release 6.20/06 - 2020-06-10. Release 6.20/02 - 2020-03-15. Release 6.20/00 - 2020-02-26. Release 6.19/02 - 2020-01-10. Release 6.19/01 - 2019-05-29. Release 6.18/02 - 2019-08-23. Release 6.18/00 - 2019-06-25. Release 6.16/00 - 201",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:1196,guid,guidelines,1196,d/releases.html,https://root.cern,https://root.cern/d/releases.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:1213,guid,guidelines,1213,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT ROOT I/O. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-io.html:1196,guid,guidelines,1196,d/root-io.html,https://root.cern,https://root.cern/d/root-io.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:1213,guid,guidelines,1213,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation abou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:1206,guid,guidelines,1206,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Blog. ROOT::RWhy! ; ## Background. ROOT is implementing new interfaces following new interface styles. We follow [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md) where reasonable in our context. Most noticeably this means. - use of references as parameters instead... more . The status of ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:1192,guid,guidelines,1192,d/blog.html,https://root.cern,https://root.cern/d/blog.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » News Workshops. Here the list with ROOT workshops:. ROOT 2018 ; ROOT 2015 ; ROOT 2013 (slides); ROOT 2007 (slides); ROOT 2005 (slides); ROOT 2007; ROOT 2002 (slides); ROOT 2001 (slides); ROOT 2000 (slides); ROOT 1999 slides ; And PROOF workshops:; PROOF 2007 (slides). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/workshops.html:1197,guid,guidelines,1197,d/workshops.html,https://root.cern,https://root.cern/d/workshops.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:1206,guid,guidelines,1206,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 1. Extracting an object from a TFile. File can be local on your disk or remote accessible for instance through http:; root [0] TFile* file = TFile::Open(""http://someserver/somefile.root"");. You can list the objects inside the file using .ls:; root [1] .ls; TFile** hsimple.root Demo ROOT file with histograms; TFile* hsimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:1224,guid,guidelines,1224,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 10. Go Parallel!. Why you care; Number crunching takes time. If you look at top (open a terminal, type top) in Linux or your activity monitor on MacOS you will see that one core is really really busy with root. But only one core - and you have two or four or if you're lucky even more. What about getting much more data cru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:1204,guid,guidelines,1204,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 11. Done!. Congratulations for finishing the tutorials! Here are a few relevant pointers on where to go from here:; The forum; Bug reports - also for bugs in this workshop!; The ROOT's tutorials - you find them in $ROOTSYS/tutorials; We hope to hear from you!; Your ROOT team. . ‹ TutorialSelector.C; up. Navigate through t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/11-done.html:1197,guid,guidelines,1197,d/11-done.html,https://root.cern,https://root.cern/d/11-done.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 2. Running code in ROOT. Interpreting; ROOT executes your C++ code. There are two ways: loading it into the interpreter or compiling it as a shared library. Either way, it's easiest to provide a function that has the same name as the file. For instance you could have a file printTree.C containing; int printTree(TFile* fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:1211,guid,guidelines,1211,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 3. Examining a TTree's data. The TTree; A TTree is a collection of similar data. It is the collection used by basically all High Energy Physics data. Traditionally, each entry in a TTree corresponds to a collision event. (Notable exceptions at the LHC are ALICE and LHCb which have a different mapping of TTree entries.); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/3-examining-ttrees-data.html:1215,guid,guidelines,1215,d/3-examining-ttrees-data.html,https://root.cern,https://root.cern/d/3-examining-ttrees-data.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care about is its distribution - for instance by counting how often electrons have an energy within a certain range. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:1204,guid,guidelines,1204,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 5. Fitting. Distributions; Some analyses want to check theory predictions that exist as a function definition. Others want to use a distribution from a histogram in another step of the analysis. But histograms have bin steps by nature instead of being smooth, and they have bumps / fluctuations due to limited statistics (i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:1198,guid,guidelines,1198,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 6. Multivariate Analysis. Multiple Variables; The muon trigger should fire more likely for higher muon momenta - let's check that!; For that we need to draw two variables: how many were fired and ho many were not, against the momentum of the muon. We could put the fired / not fired on the y-axis, and the muon momentum on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/6-multivariate-analysis.html:1212,guid,guidelines,1212,d/6-multivariate-analysis.html,https://root.cern,https://root.cern/d/6-multivariate-analysis.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw() expressions and the TBrowser interface. Sometimes it's better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:1212,guid,guidelines,1212,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 8. Efficiency Calculation. Efficiency; Basically all analyses involve selections on parameters - as an example we will use the trigger selecting muons above a certain pT. Ideally, these selections suppress all events that have no muon above this pT, and include all events with at least one muon that has more than the cut ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/8-efficiency-calculation.html:1213,guid,guidelines,1213,d/8-efficiency-calculation.html,https://root.cern,https://root.cern/d/8-efficiency-calculation.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 9. Fitting By Coding. TF1; In ROOT you can fit histograms (or TEfficiency objects) using formulas that you provide, and that have free parameters. For an efficiency curve a TMath::Erf() is usually a good fit function. But you can't really use it as is. Let's see what it looks like:; // This lambda defines the values of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/9-fitting-coding.html:1208,guid,guidelines,1208,d/9-fitting-coding.html,https://root.cern,https://root.cern/d/9-fitting-coding.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop TutorialSelector.C. // This class is derived from the ROOT class TSelector to demonstrate; // the use of PROOF with the ROOT 6 Analysis Workshop from; // http://root.cern.ch/drupal/content/root-6-analysis-workshop; //; // For more information on the TSelector framework see; // $ROOTSYS/README/README.SELECTOR or the ROOT U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:1206,guid,guidelines,1206,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Guidelines for submitting a bug. Introduction; The RootTalk mailing list and forum can be used to pass information of general interest to the ROOT user community or to submit problems that you cannot solve with the information provided in the Documentation. Several thousands users read the list and forum and my provide you with solutions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:1219,guid,guidelines,1219,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support Mailing List mode on Discourse. Here is how to enable the ""mailing list mode"" feature on our Discourse forum. If you visit your profile, in Preferences - Emails, you will see:. By ticking ""Enable mailing list mode"", you will automatically receive an email every time a post is made on the forum.; Note: You can reply by email, and you can a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/mailing-list-mode-discourse.html:1218,guid,guidelines,1218,d/mailing-list-mode-discourse.html,https://root.cern,https://root.cern/d/mailing-list-mode-discourse.html,1,['guid'],['guidelines']
Usability,"ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Support RootTalk Digest. This mailing list is used to keep you up to date about important ROOT events (new releases, urgent bug fixes, etc.). This list is also used to discuss anything concerning ROOT with your fellow ROOT users and with the developers.; Currently available digests:; All articles of 2012 on the new e-groups mailing list; All arti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/roottalk-digest.html:1203,guid,guidelines,1203,d/roottalk-digest.html,https://root.cern,https://root.cern/d/roottalk-digest.html,1,['guid'],['guidelines']
Usability,"ROOT destructor; 512 gROOT->GetListOfGeometries()->Remove(this);; 513 gROOT->GetListOfBrowsables()->Remove(this);; 514 }; 515 // TSeqCollection *brlist = gROOT->GetListOfBrowsers();; 516 // TIter next(brlist);; 517 // TBrowser *browser = 0;; 518 // while ((browser=(TBrowser*)next())) browser->RecursiveRemove(this);; 519 ClearThreadsMap();; 520 ClearThreadData();; 521 delete TGeoBuilder::Instance(this);; 522 if (fBits); 523 delete[] fBits;; 524 SafeDelete(fNodes);; 525 SafeDelete(fTopNode);; 526 if (fOverlaps) {; 527 fOverlaps->Delete();; 528 SafeDelete(fOverlaps);; 529 }; 530 if (fRegions) {; 531 fRegions->Delete();; 532 SafeDelete(fRegions);; 533 }; 534 if (fMaterials) {; 535 fMaterials->Delete();; 536 SafeDelete(fMaterials);; 537 }; 538 SafeDelete(fElementTable);; 539 if (fMedia) {; 540 fMedia->Delete();; 541 SafeDelete(fMedia);; 542 }; 543 if (fHashVolumes) {; 544 fHashVolumes->Clear(""nodelete"");; 545 SafeDelete(fHashVolumes);; 546 }; 547 if (fHashGVolumes) {; 548 fHashGVolumes->Clear(""nodelete"");; 549 SafeDelete(fHashGVolumes);; 550 }; 551 if (fHashPNE) {; 552 fHashPNE->Delete();; 553 SafeDelete(fHashPNE);; 554 }; 555 if (fArrayPNE) {; 556 delete fArrayPNE;; 557 }; 558 if (fVolumes) {; 559 fVolumes->Delete();; 560 SafeDelete(fVolumes);; 561 }; 562 if (fShapes) {; 563 fShapes->Delete();; 564 SafeDelete(fShapes);; 565 }; 566 if (fPhysicalNodes) {; 567 fPhysicalNodes->Delete();; 568 SafeDelete(fPhysicalNodes);; 569 }; 570 if (fMatrices) {; 571 fMatrices->Delete();; 572 SafeDelete(fMatrices);; 573 }; 574 if (fTracks) {; 575 fTracks->Delete();; 576 SafeDelete(fTracks);; 577 }; 578 SafeDelete(fUniqueVolumes);; 579 if (fPdgNames) {; 580 fPdgNames->Delete();; 581 SafeDelete(fPdgNames);; 582 }; 583 if (fGDMLMatrices) {; 584 fGDMLMatrices->Delete();; 585 SafeDelete(fGDMLMatrices);; 586 }; 587 if (fOpticalSurfaces) {; 588 fOpticalSurfaces->Delete();; 589 SafeDelete(fOpticalSurfaces);; 590 }; 591 if (fSkinSurfaces) {; 592 fSkinSurfaces->Delete();; 593 SafeDelete(fSkinSurfac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:21987,Clear,Clear,21987,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ROOT headers needed by the proxy\n"");; 1746 fprintf(hf,""#include <TROOT.h>\n"");; 1747 fprintf(hf,""#include <TChain.h>\n"");; 1748 fprintf(hf,""#include <TFile.h>\n"");; 1749 fprintf(hf,""#include <TPad.h>\n"");; 1750 fprintf(hf,""#include <TH1.h>\n"");; 1751 fprintf(hf,""#include <TSelector.h>\n"");; 1752 fprintf(hf,""#include <TBranchProxy.h>\n"");; 1753 fprintf(hf,""#include <TBranchProxyDirector.h>\n"");; 1754 fprintf(hf,""#include <TBranchProxyTemplate.h>\n"");; 1755 fprintf(hf,""#include <TFriendProxy.h>\n"");; 1756 fprintf(hf,""using namespace ROOT::Internal;\n""); // questionable; 1757 fprintf(hf,""using ROOT::Detail::TBranchProxy;\n""); // questionable; 1758 fprintf(hf,""\n"");; 1759 ; 1760 fprintf(hf,""// forward declarations needed by this particular proxy\n"");; 1761 TIter next( &fListOfForwards );; 1762 TObject *current;; 1763 while ( (current=next()) ) {; 1764 if (strstr(current->GetTitle(),""::"")==nullptr) {; 1765 // We can not forward declared nested classes (well we might be able to do so for; 1766 // the one nested in a namespace but it is not clear yet if we can really reliably; 1767 // find this information); 1768 fprintf(hf,""%s"",current->GetTitle());; 1769 }; 1770 }; 1771 ; 1772 fprintf(hf,""\n\n"");; 1773 fprintf(hf,""// Header needed by this particular proxy\n"");; 1774 next = &fListOfHeaders;; 1775 TObject *header;; 1776 while ( (header = next()) ) {; 1777 fprintf(hf,""%s"",header->GetTitle());; 1778 }; 1779 fprintf(hf,""\n\n"");; 1780 ; 1781 fprintf(hf,""class %s_Interface {\n"", scriptfunc.Data());; 1782 fprintf(hf,"" // This class defines the list of methods that are directly used by %s,\n"",classname.Data());; 1783 fprintf(hf,"" // and that can be overloaded in the user's script\n"");; 1784 fprintf(hf,""public:\n"");; 1785 fprintf(hf,"" void %s_Begin(TTree*) {}\n"",scriptfunc.Data());; 1786 fprintf(hf,"" void %s_SlaveBegin(TTree*) {}\n"",scriptfunc.Data());; 1787 fprintf(hf,"" bool %s_Notify() { return true; }\n"",scriptfunc.Data());; 1788 fprintf(hf,"" bool %s_Process(Long64_t) { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:66588,clear,clear,66588,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['clear'],['clear']
Usability,"ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.h. Go to the documentation of this file. 1#include ""TH2.h""; 2#include ""TF1.h""; 3#include ""TStyle.h""; 4#include ""TCanvas.h""; 5#include ""TLine.h""; 6#include ""TEntryList.h""; 7#include ""TPaveStats.h""; 8#include ""TMath.h""; 9 ; 10const Double_t dxbin = (0.17-0.13)/40; // Bin-width; 11const Double_t sigma = 0.0012;; 12 ; 13//_____________________________________________________________________; 14Double_t fdm5(Double_t *xx, Double_t *par); 15{; 16 Double_t x = xx[0];; 17 if (x <= 0.13957) return 0;; 18 Double_t xp3 = (x-par[3])*(x-par[3]);; 19 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); 20 + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; 21 return res;; 22}; 23 ; 24//_____________________________________________________________________; 25Double_t fdm2(Double_t *xx, Double_t *par); 26{; 27 Double_t x = xx[0];; 28 if (x <= 0.13957) return 0;; 29 Double_t xp3 = (x-0.1454)*(x-0.1454);; 30 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); 31 + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; 32 return res;; 33}; 34 ; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TEntryList.h; TF1.h; TH2.h; TLine.h; TMath.h; TPaveStats.h; TStyle.h; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; xDouble_t x[n]Definition legend1.C:17; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8h_source.html:1976,Guid,Guide,1976,doc/master/h1analysisProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h_source.html,1,['Guid'],['Guide']
Usability,"ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:1785,guid,guide,1785,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,2,['guid'],['guide']
Usability,"ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5869; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:111; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:110; ROOT::Class_ShowMembersvoid Class_ShowMembers(TClass *cl, const void *obj, TMemberInspector &)Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full defi...Definition TClass.cxx:546; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::SetClassVersionShort_t SetClassVersion(RootClass *); ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:112; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:109; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:115; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; ROOT::Internal::THashConsistencyHolderDefinition Rtypes.h:255; ROOT::Internal::THashConsistencyHolder::fgHashConsistencystatic Bool_t fgHashConsistencyDefinition Rtypes.h:256. corebaseincRtypes.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:32187,Guid,Guide,32187,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['Guid'],['Guide']
Usability,"ROOT::EExecutionPolicy ExecPolicyDefinition Foption.h:52; Foption_t::StoreResultint StoreResultDefinition Foption.h:49; Foption_t::Nochisqint NochisqDefinition Foption.h:45; Foption_t::Robustint RobustDefinition Foption.h:48; Foption_t::hRobustdouble hRobustDefinition Foption.h:51; Foption_t::Plusint PlusDefinition Foption.h:43; Foption_t::Integralint IntegralDefinition Foption.h:44; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:64607,simpl,simple,64607,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['simpl'],['simple']
Usability,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:7723,simpl,simple,7723,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['simpl'],['simple']
Usability,ROOT::Internal::THnBaseBrowsable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Internal::THnBaseBrowsable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 311 of file THnBase.h. ◆ DeclFileName(). static const char * ROOT::Internal::THnBaseBrowsable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 311 of file THnBase.h. ◆ IsA(). TClass * ROOT::Internal::THnBaseBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 311 of file THnBase.h. ◆ IsFolder(). Bool_t ROOT::Internal::THnBaseBrowsable::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 305 of file THnBase.h. ◆ Streamer(). void ROOT::Internal::THnBaseBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Internal::THnBaseBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 311 of file THnBase.h. Member Data Documentation. ◆ fAxis. Int_t ROOT::Internal::THnBaseBrowsable::fAxis. private . Definition at line 309 of file THnBase.h. ◆ fHist. THnBase* ROOT::Internal::THnBaseBrowsable::fHist. private . Definition at line 308 of file THnBase.h. ◆ fProj. TH1* ROOT::Internal::THnBaseBrowsable::fProj. private . Definition at line 310 of file THnBase.h. Libraries for ROOT::Internal::THnBaseBrowsable:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THnBase.h; hist/hist/src/THnBase.cxx. ROOTInternalTHnBaseBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:14202,Guid,Guide,14202,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,1,['Guid'],['Guide']
Usability,"ROOT::Math::CholeskyDecompGenDim< F >::Invert ; (; M & ; m); const. inline . place the inverse into m ; This is the method to use with an SMatrix.; Returnsif the decomposition was successful ; Definition at line 389 of file CholeskyDecomp.h. ◆ ok(). template<class F > . bool ROOT::Math::CholeskyDecompGenDim< F >::ok ; (; ); const. inline . returns true if decomposition was successful ; Returnstrue if decomposition was successful ; Definition at line 363 of file CholeskyDecomp.h. ◆ operator bool(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::operator bool ; (; ); const. inline . returns true if decomposition was successful ; Returnstrue if decomposition was successful ; Definition at line 366 of file CholeskyDecomp.h. ◆ Solve(). template<class F > . template<class V > . bool ROOT::Math::CholeskyDecompGenDim< F >::Solve ; (; V & ; rhs); const. inline . solves a linear system for the given right hand side ; Note that you can use both SVector classes and plain arrays for rhs. (Make sure that the sizes match!). It will work with any vector implementing the operator [i]; Returnsif the decomposition was successful ; Definition at line 376 of file CholeskyDecomp.h. Member Data Documentation. ◆ fL. template<class F > . F* ROOT::Math::CholeskyDecompGenDim< F >::fL. private . lower triangular matrix L ; lower triangular matrix L, packed storage, with diagonal elements pre-inverted ; Definition at line 319 of file CholeskyDecomp.h. ◆ fN. template<class F > . unsigned ROOT::Math::CholeskyDecompGenDim< F >::fN. private . dimensionality dimensionality of the problem ; Definition at line 315 of file CholeskyDecomp.h. ◆ fOk. template<class F > . bool ROOT::Math::CholeskyDecompGenDim< F >::fOk. private . flag indicating a successful decomposition ; Definition at line 321 of file CholeskyDecomp.h. math/smatrix/inc/Math/CholeskyDecomp.h. ROOTMathCholeskyDecompGenDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:8176,Guid,Guide,8176,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,1,['Guid'],['Guide']
Usability,"ROOT::Math::IParametricGradFunctionOneDim.; Definition at line 95 of file WrappedTF1.cxx. ◆ ParameterName(). std::string ROOT::Math::WrappedTF1::ParameterName ; (; unsigned int ; i); const. inlineoverridevirtual . return parameter name (this is stored in TF1) ; Reimplemented from ROOT::Math::IBaseParam.; Definition at line 104 of file WrappedTF1.h. ◆ Parameters(). const double * ROOT::Math::WrappedTF1::Parameters ; (; ); const. inlineoverridevirtual . get the parameter values (return values cachen inside, those inside TF1 might be different) ; Implements ROOT::Math::IBaseParam.; Definition at line 82 of file WrappedTF1.h. ◆ SetDerivPrecision(). void ROOT::Math::WrappedTF1::SetDerivPrecision ; (; double ; eps). static . precision value used for calculating the derivative step-size h = eps * |x|. ; The default is 0.001, give a smaller in case function changes rapidly ; Definition at line 142 of file WrappedTF1.cxx. ◆ SetParameters(). void ROOT::Math::WrappedTF1::SetParameters ; (; const double * ; p). inlineoverridevirtual . set parameter values need to call also SetParameters in TF1 in ace some other operations (re-normalizations) are needed ; Implements ROOT::Math::IBaseParam.; Definition at line 90 of file WrappedTF1.h. Member Data Documentation. ◆ fFunc. TF1* ROOT::Math::WrappedTF1::fFunc. private . Definition at line 159 of file WrappedTF1.h. ◆ fLinear. bool ROOT::Math::WrappedTF1::fLinear. private . Definition at line 157 of file WrappedTF1.h. ◆ fPolynomial. bool ROOT::Math::WrappedTF1::fPolynomial. private . Definition at line 158 of file WrappedTF1.h. ◆ fX. double ROOT::Math::WrappedTF1::fX[1]. mutableprivate . Definition at line 160 of file WrappedTF1.h. Libraries for ROOT::Math::WrappedTF1:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/Math/WrappedTF1.h; hist/hist/src/WrappedTF1.cxx. ROOTMathWrappedTF1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html:11897,Guid,Guide,11897,doc/master/classROOT_1_1Math_1_1WrappedTF1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedTF1.html,1,['Guid'],['Guide']
Usability,"ROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovarvector storing the covariance matrix; unsigned intfDim; vector<double>fErrorsvector of output errors; boolfMinosRun; TMinuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IBaseFunctionMultiDim*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuitMinimizer.html:6366,Simpl,Simplex,6366,root/html534/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html534/TMinuitMinimizer.html,1,['Simpl'],['Simplex']
Usability,"ROOT::RDF::RSqliteDS::fValuesstd::vector< Value_t > fValuesThe data source is inherently single-threaded and returns only one row at a time. This vector holds t...Definition RSqliteDS.hxx:86; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TRandom::Integervirtual UInt_t Integer(UInt_t imax)Returns a random integer uniformly distributed on the interval [ 0, imax-1 ].Definition TRandom.cxx:361; TSystem::Sleepvirtual void Sleep(UInt_t milliSec)Sleep milliSec milli seconds.Definition TSystem.cxx:437; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::FromSqliteRDataFrame FromSqlite(std::string_view fileName, std::string_view query)Factory method to create a SQlite RDataFrame.Definition RSqliteDS.cxx:538; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RDF::Internal::RSqliteDSDataSetThe state of an open dataset in terms of the sqlite3 C library.Definition RSqliteDS.cxx:325; ROOT::RDF::Internal::RSqliteDSDataSet::fQuerysqlite3_stmt * fQueryDefinition RSqliteDS.cxx:327; ROOT::RDF::Internal::RSqliteDSDataSet::fDbsqlite3 * fDbDefinition RSqliteDS.cxx:326; ROOT::RDF::RSqliteDS::Value_t::fPtrvoid * fPtrPoints to one of the values; an address to this pointer is returned by GetColumnReadersImpl.Definition RSqliteDS.hxx:75; ROOT::RDF::RSqliteDS::Value_t::fTextstd::string fTextDefinition RSqliteDS.hxx:72; ROOT::RDF::RSqliteDS::Value_t::fIntegerLong64_t fIntegerDefinition RSqliteDS.hxx:70; ROOT::RDF::RSqliteDS::Value_t::fNullvoid * fNullDefinition RSqliteDS.hxx:74; ROOT::RDF::RSqliteDS::Value_t::fBlobstd::vector< unsigned char > fBlobDefinition RSqliteDS.hxx:73; ROOT::RDF::RSqliteDS::Value_t::fRealdouble fRealDefinition RSqliteDS.hxx:71. treedataframesrcRSqliteDS.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:31408,Guid,Guide,31408,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3901,Clear,Clear,3901,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Foreachvoid Foreach(F func, unsigned nTimes, unsigned nChunks=0)Execute a function without arguments several times in parallel, dividing the execution in nChunks.Definition TThreadExecutor.hxx:146; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; int; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:22084,simpl,simple,22084,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['simpl'],['simple']
Usability,"ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:13706,simpl,simply,13706,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,2,['simpl'],['simply']
Usability,"RUE, Int_t nrays = 10000, const Double_t* vertex = __null); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.10000000000000001, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of approach from point px,py to a volume. void DefaultAngles(); Set default angles for the current view. void DefaultColors(); Set default volume colors according to tracking media. Int_t CountNodes(TGeoVolume* vol, Int_t level) const; Count number of visible nodes down to a given level. Int_t CountVisibleNodes(); Count total number of visible nodes. void CheckEdit(); Check if Ged library is loaded and load geometry editor classe. void EditGeometry(Option_t* option = """"); Start the geometry editor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPainter.html:15799,Clear,ClearVisibleVolumes,15799,root/html602/TGeoPainter.html,https://root.cern,https://root.cern/root/html602/TGeoPainter.html,4,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 624 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1447 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseConnections ; (; ). Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ; Definition at line 1438 of file RWebWindow.cxx. ◆ CompleteWSSend(). void RWebWindow::CompleteWSSend ; (; unsigned ; wsid). private . Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ; Definition at line 1088 of file RWebWindow.cxx. ◆ Create(). std::shared_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1883 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where File",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:27414,Clear,Clear,27414,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['Clear'],['Clear']
Usability,"RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 625 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1489 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseConnections ; (; ). Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ; Definition at line 1480 of file RWebWindow.cxx. ◆ CompleteWSSend(). void RWebWindow::CompleteWSSend ; (; unsigned ; wsid). private . Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ; Definition at line 1121 of file RWebWindow.cxx. ◆ Create(). std::shared_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1925 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where File",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:27017,Clear,Clear,27017,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['Clear'],['Clear']
Usability,R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFTP::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 125 of file TFTP.h. Member Data Documentation. ◆ fBlockSize. Int_t TFTP::fBlockSize. private . Definition at line 44 of file TFTP.h. ◆ fBytesRead. Long64_t TFTP::fBytesRead. private . Definition at line 50 of file TFTP.h. ◆ fBytesWrite. Long64_t TFTP::fBytesWrite. private . connection to rootd ; Definition at line 49 of file TFTP.h. ◆ fCurrentFile. TString TFTP::fCurrentFile. private . Definition at line 47 of file TFTP.h. ◆ fDir. Bool_t TFTP::fDir. private . Definition at line 51 of file TFTP.h. ◆ fgBytesRead. Long64_t TFTP::fgBytesRead = 0. staticprivate . Definition at line 65 of file TFTP.h. ◆ fgBytesWrite. Long64_t TFTP::fgBytesWrite = 0. staticprivate . Definition at line 64 of file TFTP.h. ◆ fHost. TString TFTP::fHost. private . Definition at line 37 of file TFTP.h. ◆ fLastBlock. Int_t TFTP::fLastBlock. private . Definition at line 43 of file TFTP.h. ◆ fMode. Int_t TFTP::fMode. private . Definition at line 45 of file TFTP.h. ◆ fParallel. Int_t TFTP::fParallel. private . Definition at line 40 of file TFTP.h. ◆ fPort. Int_t TFTP::fPort. private . Definition at line 39 of file TFTP.h. ◆ fProtocol. Int_t TFTP::fProtocol. private . Definition at line 42 of file TFTP.h. ◆ fRestartAt. Long64_t TFTP::fRestartAt. private . Definition at line 46 of file TFTP.h. ◆ fSocket. TSocket* TFTP::fSocket. private . Definition at line 48 of file TFTP.h. ◆ fUser. TString TFTP::fUser. private . Definition at line 38 of file TFTP.h. ◆ fWindowSize. Int_t TFTP::fWindowSize. private . Definition at line 41 of file TFTP.h. Libraries for TFTP:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TFTP.h; net/net/src/TFTP.cxx. TFTP. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:25751,Guid,Guide,25751,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['Guid'],['Guide']
Usability,RangeFrame. protected . Frame that contains the top part. ; Definition at line 57 of file TGTable.h. ◆ fRangeLabel. TGLabel* TGTable::fRangeLabel. protected . Label for the range frame. ; Definition at line 75 of file TGTable.h. ◆ fReadOnly. Bool_t TGTable::fReadOnly. protected . Table readonly state. ; Definition at line 41 of file TGTable.h. ◆ fRHdrFrame. TGTableHeaderFrame* TGTable::fRHdrFrame. protected . Frame that contains the row headers. ; Definition at line 56 of file TGTable.h. ◆ fRHdrHintsList. TList* TGTable::fRHdrHintsList. protected . Definition at line 92 of file TGTable.h. ◆ fRowHeaders. TObjArray* TGTable::fRowHeaders. protected . Array of row headers. ; Definition at line 38 of file TGTable.h. ◆ fRows. TObjArray* TGTable::fRows. protected . Array of rows. ; Definition at line 37 of file TGTable.h. ◆ fSelectColor. Pixel_t TGTable::fSelectColor. protected . Select Color. ; Definition at line 42 of file TGTable.h. ◆ fTableFrame. TGTableFrame* TGTable::fTableFrame. protected . Container for the frames. ; Definition at line 48 of file TGTable.h. ◆ fTableHeader. TGTableHeader* TGTable::fTableHeader. protected . Top left element of the table. ; Definition at line 40 of file TGTable.h. ◆ fTMode. Int_t TGTable::fTMode. protected . Text justify mode. ; Definition at line 43 of file TGTable.h. ◆ fTopExtraFrame. TGHorizontalFrame* TGTable::fTopExtraFrame. protected . Dev idea. ; Definition at line 59 of file TGTable.h. ◆ fTopFrame. TGHorizontalFrame* TGTable::fTopFrame. protected . Frame that contains the top part. ; Definition at line 58 of file TGTable.h. ◆ fUpdateButton. TGTextButton* TGTable::fUpdateButton. protected . Button to update current view. ; Definition at line 68 of file TGTable.h. Libraries for TGTable:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTable.h; gui/gui/src/TGTable.cxx. TGTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:61860,Guid,Guide,61860,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['Guid'],['Guide']
Usability,"RangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidRooCacheManager<RooAbsCacheElement>::sterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:3631,clear,clearCacheOnServerRedirect,3631,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"RankValue () const;  ; const TString & GetVariable () const;  ; Bool_t operator< (const Rank &other) const;  comparison operator < ;  ; Bool_t operator> (const Rank &other) const;  comparison operator > ;  ; void SetRank (Int_t rank);  . Private Attributes; Int_t fRank;  ; Double_t fRankValue;  ; TString fVariable;  . #include <TMVA/Ranking.h>; Constructor & Destructor Documentation. ◆ Rank(). TMVA::Rank::Rank ; (; const TString & ; variable, . Double_t ; rankValue . ). constructor ; Definition at line 139 of file Ranking.cxx. ◆ ~Rank(). TMVA::Rank::~Rank ; (; ). virtual . destructor ; Definition at line 149 of file Ranking.cxx. Member Function Documentation. ◆ GetRank(). Int_t TMVA::Rank::GetRank ; (; ); const. inline . Definition at line 89 of file Ranking.h. ◆ GetRankValue(). Double_t TMVA::Rank::GetRankValue ; (; ); const. inline . Definition at line 88 of file Ranking.h. ◆ GetVariable(). const TString & TMVA::Rank::GetVariable ; (; ); const. inline . Definition at line 87 of file Ranking.h. ◆ operator<(). Bool_t TMVA::Rank::operator< ; (; const Rank & ; other); const. comparison operator < ; Definition at line 156 of file Ranking.cxx. ◆ operator>(). Bool_t TMVA::Rank::operator> ; (; const Rank & ; other); const. comparison operator > ; Definition at line 165 of file Ranking.cxx. ◆ SetRank(). void TMVA::Rank::SetRank ; (; Int_t ; rank). inline . Definition at line 90 of file Ranking.h. Member Data Documentation. ◆ fRank. Int_t TMVA::Rank::fRank. private . Definition at line 97 of file Ranking.h. ◆ fRankValue. Double_t TMVA::Rank::fRankValue. private . Definition at line 95 of file Ranking.h. ◆ fVariable. TString TMVA::Rank::fVariable. private . Definition at line 94 of file Ranking.h. Libraries for TMVA::Rank:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Ranking.h; tmva/tmva/src/Ranking.cxx. TMVARank. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Rank.html:2372,Guid,Guide,2372,doc/master/classTMVA_1_1Rank.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Rank.html,1,['Guid'],['Guide']
Usability,"Rate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams[""RMSPROP_eps""]));; 1380 break;; 1381 ; 1382 case EOptimizer::kAdadelta:; 1383 optimizer = std::unique_ptr<DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>>(; 1384 new DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1385 settings.optimizerParams[""ADADELTA_rho""],; 1386 settings.optimizerParams[""ADADELTA_eps""]));; 1387 break;; 1388 }; 1389 ; 1390 ; 1391 // Initialize the vector of batches, one batch for one slave network; 1392 std::vector<TTensorBatch<Architecture_t>> batches{};; 1393 ; 1394 bool converged = false;; 1395 size_t convergenceCount = 0;; 1396 size_t batchesInEpoch = nTrainingSamples / deepNet.GetBatchSize();; 1397 ; 1398 // start measuring; 1399 std::chrono::time_point<std::chrono::system_clock> tstart, tend;; 1400 tstart = std::chrono::system_clock::now();; 1401 ; 1402 // function building string with optimizer parameters values for logging; 1403 auto optimParametersString = [&]() {; 1404 TString optimParameters;; 1405 for ( auto & element : settings.optimizerParams) {; 1406 TString key = element.first;; 1407 key.ReplaceAll(settings.optimizerName + ""_"", """"); // strip optimizerName_; 1408 double value = element.second;; 1409 if (!optimParameters.IsNull()); 1410 optimParameters += "","";; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:55004,learn,learningRate,55004,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"ReadBasketFast(). bool TLeafI::ReadBasketFast ; (; TBuffer & ; input_buf, . Long64_t ; N . ). overridevirtual . Deserialize input by performing byteswap as needed. ; Reimplemented from TLeaf.; Definition at line 187 of file TLeafI.cxx. ◆ ReadValue(). void TLeafI::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read an integer from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 218 of file TLeafI.cxx. ◆ SetAddress(). void TLeafI::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 232 of file TLeafI.cxx. ◆ SetMaximum(). virtual void TLeafI::SetMaximum ; (; Int_t ; max). inlinevirtual . Definition at line 56 of file TLeafI.h. ◆ SetMinimum(). virtual void TLeafI::SetMinimum ; (; Int_t ; min). inlinevirtual . Definition at line 57 of file TLeafI.h. ◆ Streamer(). void TLeafI::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafI::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file TLeafI.h. Member Data Documentation. ◆ fMaximum. Int_t TLeafI::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 31 of file TLeafI.h. ◆ fMinimum. Int_t TLeafI::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 30 of file TLeafI.h. ◆ fPointer. Int_t** TLeafI::fPointer. protected . ! Address of pointer to data buffer ; Definition at line 33 of file TLeafI.h. ◆ fValue. Int_t* TLeafI::fValue. protected . ! Pointer to data buffer ; Definition at line 32 of file TLeafI.h. Libraries for TLeafI:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafI.h; tree/tree/src/TLeafI.cxx. TLeafI. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafI.html:22743,Guid,Guide,22743,doc/master/classTLeafI.html,https://root.cern,https://root.cern/doc/master/classTLeafI.html,1,['Guid'],['Guide']
Usability,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:89314,usab,usable,89314,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['usab'],['usable']
Usability,"ReadZip64EndLocator(). Long64_t TZIPFile::ReadZip64EndLocator ; (; Long64_t ; pos). protected . Read Zip64 end of central directory locator. ; Returns -1 in case of error, -2 in case end locator magic is not found (i.e. not a zip64 file) and offset of Zip64 end of central directory record in case of success. ; Definition at line 211 of file TZIPFile.cxx. ◆ ReadZip64EndRecord(). Int_t TZIPFile::ReadZip64EndRecord ; (; Long64_t ; pos). protected . Read Zip64 end of central directory record. ; Returns -1 in case of error and 0 in case of success. ; Definition at line 246 of file TZIPFile.cxx. ◆ SetCurrentMember(). Int_t TZIPFile::SetCurrentMember ; (; ). overridevirtual . Find the desired member in the member array and make it the current member. ; Returns -1 in case member is not found, 0 otherwise. ; Implements TArchiveFile.; Definition at line 486 of file TZIPFile.cxx. ◆ Streamer(). void TZIPFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TArchiveFile. ◆ StreamerNVirtual(). void TZIPFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 144 of file TZIPFile.h. Member Data Documentation. ◆ fComment. TString TZIPFile::fComment. protected . Archive comment. ; Definition at line 26 of file TZIPFile.h. ◆ fDirOffset. Long64_t TZIPFile::fDirOffset. protected . Central directory offset (from the beginning of the archive) ; Definition at line 25 of file TZIPFile.h. ◆ fDirPos. Long64_t TZIPFile::fDirPos. protected . Central directory position. ; Definition at line 23 of file TZIPFile.h. ◆ fDirSize. Long64_t TZIPFile::fDirSize. protected . Central directory size. ; Definition at line 24 of file TZIPFile.h. Libraries for TZIPFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TZIPFile.h; io/io/src/TZIPFile.cxx. TZIPFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:27855,Guid,Guide,27855,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['Guid'],['Guide']
Usability,"Reader.h:161; TMVA::Reader::DataInfoconst DataSetInfo & DataInfo() constDefinition Reader.h:117; TMVA::Tools::xmlengineTXMLEngine & xmlengine()Definition Tools.h:262; TMVA::Tools::ReadAttrvoid ReadAttr(void *node, const char *, T &value)read attribute from xmlDefinition Tools.h:329; TMVA::Types::Instancestatic Types & Instance()The single instance of ""Types"" if existing already, or create it (Singleton)Definition Types.cxx:70; TMVA::Types::EMVAEMVADefinition Types.h:76; TMVA::Types::kCategory@ kCategoryDefinition Types.h:97; TMVA::Types::kCuts@ kCutsDefinition Types.h:78; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::LastSsiz_t Last(char c) constFind last occurrence of a character c.Definition TString.cxx:931; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TXMLEngine::FreeDocvoid FreeDoc(XMLDocPointer_t xmldoc)frees allocated document data and deletes document itselfDefinition TXMLEngine.cxx:1288; TXMLEngine::DocGetRootElementXMLNodePointer_t DocGetRootElement(XMLDocPointer_t xmldoc)returns root node of documentDefinition TXMLEngine.cxx:1339; TXMLEngine::ParseFileXMLDocPointer_t ParseFile(const char *filename, Int_t maxbuf=100000)Parses content of file and tries to produce xml structures.Definition TXMLEngine.cxx:1356; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; Config.h; Types.h. tmvatmvasrcReader.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:42364,Guid,Guide,42364,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ReadingBool_t fIsGeomReadingDefinition TGeoManager.h:82; TGeoManager::MakeTorusTGeoVolume * MakeTorus(const char *name, TGeoMedium *medium, Double_t r, Double_t rmin, Double_t rmax, Double_t phi1=0, Double_t dphi=360)Make in one step a volume pointing to a torus shape with given medium.Definition TGeoManager.cxx:3195; TGeoManager::GetHMatrixTGeoHMatrix * GetHMatrix()Return stored current matrix (global matrix of the next touched node).Definition TGeoManager.cxx:2139; TGeoManager::fParallelWorldTGeoParallelWorld * fParallelWorldDefinition TGeoManager.h:148; TGeoManager::RegisterMatrixvoid RegisterMatrix(const TGeoMatrix *matrix)Register a matrix to the list of matrices.Definition TGeoManager.cxx:1115; TGeoManager::GetTrackTVirtualGeoTrack * GetTrack(Int_t index)Definition TGeoManager.h:373; TGeoManager::GetMaxDaughtersstatic Int_t GetMaxDaughters()Return maximum number of daughters of a volume used in the geometry.Definition TGeoManager.cxx:2107; TGeoManager::ClearThreadsMapstatic void ClearThreadsMap()Clear the current map of threads.Definition TGeoManager.cxx:984; TGeoManager::AddVolumeInt_t AddVolume(TGeoVolume *volume)Add a volume to the list. Returns index of the volume in list.Definition TGeoManager.cxx:743; TGeoManager::fPainterTVirtualGeoPainter * fPainterflag that nodes are the selected objects in pad rather than volumesDefinition TGeoManager.h:91; TGeoManager::SetVolumeAttributevoid SetVolumeAttribute(const char *name, const char *att, Int_t val)Set volume attributes in G3 style.Definition TGeoManager.cxx:2308; TGeoManager::GetPdgNameconst char * GetPdgName(Int_t pdg) constGet name for given pdg code;.Definition TGeoManager.cxx:1966; TGeoManager::CheckGeometryFullvoid CheckGeometryFull(Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"")Geometry checking.Definition TGeoManager.cxx:3811; TGeoManager::fIsNodeSelectableBool_t fIsNodeSelectableswitch ON/OFF volume activity (default OFF - all volumes active))Definition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:194161,Clear,ClearThreadsMapstatic,194161,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,3,['Clear'],"['Clear', 'ClearThreadsMap', 'ClearThreadsMapstatic']"
Usability,"Real::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6565,clear,clearValueAndShapeDirty,6565,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"Real::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3209,clear,clearEvalError,3209,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,32,['clear'],['clearEvalError']
Usability,"Real::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:5030,clear,clearShapeDirty,5030,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,3,['clear'],['clearShapeDirty']
Usability,"RealRoots ; (; ). Find the only the real polynomial roots. ; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used The numerical method used is from GSL (see documentation ) ; Definition at line 237 of file Polynomial.cxx. ◆ FindRoots(). const std::vector< std::complex< double > > & ROOT::Math::Polynomial::FindRoots ; (; ). Find the polynomial roots. ; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used The numerical method used is from GSL (see documentation ) For the case of n = 4 by default an analytical algorithm is used from an implementation by Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4 ). Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots() ; Definition at line 151 of file Polynomial.cxx. ◆ Order(). unsigned int ROOT::Math::Polynomial::Order ; (; ); const. inline . Order of Polynomial. ; Definition at line 137 of file Polynomial.h. Member Data Documentation. ◆ fDerived_params. std::vector<double> ROOT::Math::Polynomial::fDerived_params. mutableprivate . Definition at line 166 of file Polynomial.h. ◆ fOrder. unsigned int ROOT::Math::Polynomial::fOrder. private . Definition at line 163 of file Polynomial.h. ◆ fRoots. std::vector< std::complex < double > > ROOT::Math::Polynomial::fRoots. private . Definition at line 170 of file Polynomial.h. Libraries for ROOT::Math::Polynomial:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Polynomial.h; math/mathmore/src/Polynomial.cxx. ROOTMathPolynomial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html:12788,Guid,Guide,12788,doc/master/classROOT_1_1Math_1_1Polynomial.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Polynomial.html,1,['Guid'],['Guide']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _eval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMinuit.html:13134,clear,clearPdfParamAsymErr,13134,root/html530/RooMinuit.html,https://root.cern,https://root.cern/root/html530/RooMinuit.html,1,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Int_t getNPar() const; { return _nPar ; }. ofstream* logfile() const; { return _log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:13013,clear,clearPdfParamAsymErr,13013,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,2,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:13285,clear,clearPdfParamAsymErr,13285,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:13495,clear,clearPdfParamAsymErr,13495,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,3,['clear'],['clearPdfParamAsymErr']
Usability,"RealVar&basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:4410,Clear,Clear,4410,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,1,['Clear'],['Clear']
Usability,"Receive a pasted object. ; TEveViewer only accepts objects of class TEveScene. Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 309 of file TEveViewer.cxx. ◆ InitInternal(). void TEveViewer::InitInternal ; (; ). staticprotected . Initialize static data-members according to running conditions. ; Definition at line 92 of file TEveViewer.cxx. ◆ IsA(). TClass * TEveViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 71 of file TEveViewer.h. ◆ operator=(). TEveViewer & TEveViewer::operator= ; (; const TEveViewer & ; ). private . ◆ PostDock(). void TEveViewer::PostDock ; (; ). overridevirtual . Virtual function called after a window is docked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 123 of file TEveViewer.cxx. ◆ PreUndock(). void TEveViewer::PreUndock ; (; ). overridevirtual . Virtual function called before a window is undocked. ; On mac we have to force recreation of gl-context. ; Reimplemented from TEveWindow.; Definition at line 105 of file TEveViewer.cxx. ◆ Redraw(). void TEveViewer::Redraw ; (; Bool_t ; resetCameras = kFALSE). Redraw viewer immediately. ; Definition at line 222 of file TEveViewer.cxx. ◆ RemoveElementLocal(). void TEveViewer::RemoveElementLocal ; (; TEveElement * ; el). overridevirtual . Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 279 of file TEveViewer.cxx. ◆ RemoveElementsLocal(). void TEveViewer::RemoveElementsLocal ; (; ). overridevirtual . Remove all children, forwarded to GLViewer. ; Virtual from TEveElement. ; Reimplemented from TEveElement.; Definition at line 288 of file TEveViewer.cxx. ◆ SetGLViewer(). void TEveViewer::SetGLViewer ; (; TGLViewer * ; viewer, . TGFrame * ; frame . ). Set TGLViewer that is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:42721,undo,undocked,42721,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['undo'],['undocked']
Usability,"Redraw(fLt);; 507 ; 508 //--- map slider and list view; 509 SwitchTree(fTreeIndex-1);; 510 fLVContainer->RemoveNonStatic();; 511 MapTree(fTree);; 512 fListView->Layout();; 513 SetFile();; 514}; 515////////////////////////////////////////////////////////////////////////////////; 516/// Allow geting the tree from the context menu.; 517 ; 518void TTreeViewer::SetTreeName(const char* treeName); 519{; 520 if (!treeName) return;; 521 TTree *tree = (TTree *) gROOT->FindObject(treeName);; 522 if (fTreeList) {; 523 if (fTreeList->FindObject(treeName)) {; 524 printf(""Tree found\n"");; 525 TIter next(fTreeList);; 526 Int_t index = 0;; 527 while ((tree = (TTree*)next())) {; 528 if (!strcmp(treeName, tree->GetName())) {printf(""found at index %i\n"", index);break;}; 529 index++;; 530 }; 531 SwitchTree(index);; 532 if (fTree != fMappedTree) {; 533 // switch also the global ""tree"" variable; 534 fLVContainer->RemoveNonStatic();; 535 // map it on the right panel; 536 MapTree(fTree);; 537 fListView->Layout();; 538 TGListTreeItem *base = nullptr;; 539 TGListTreeItem *parent = fLt->FindChildByName(base, ""TreeList"");; 540 TGListTreeItem *item = fLt->FindChildByName(parent, fTree->GetName());; 541 fLt->ClearHighlighted();; 542 fLt->HighlightItem(item);; 543 fClient->NeedRedraw(fLt);; 544 }; 545 return;; 546 }; 547 }; 548 if (!tree) return;; 549// ((TTreePlayer *)tree->GetPlayer())->SetViewer(this);; 550 if (fTree != tree) {; 551 fTree = tree;; 552 // load the tree via the interpreter; 553 // define a global ""tree"" variable for the same tree; 554 TString command = TString::Format(""tv__tree = (TTree *) gROOT->FindObject(\""%s\"");"", treeName);; 555 ExecuteCommand(command.Data());; 556 }; 557 //--- add the tree to the list if it is not already in; 558 if (fTreeList) fTreeList->Add(fTree);; 559 ExecuteCommand(""tv__tree_list->Add(tv__tree);"");; 560 //--- map this tree; 561 TGListTreeItem *base = nullptr;; 562 TGListTreeItem *parent = fLt->FindChildByName(base, ""TreeList"");; 563 if (!parent) parent ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:20023,Clear,ClearHighlighted,20023,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Clear'],['ClearHighlighted']
Usability,"RefStrong is; true). void DestroyPhysicals(); Destroy all physicals attached to this logical. UInt_t UnrefFirstPhysical(); Unreference first physical in the list, returning its id and; making it fit for destruction somewhere else.; Returns 0 if there are no replicas attached. void UpdateBoundingBoxesOfPhysicals(); Update bounding-boxed of all dependent physicals. Bool_t SetDLCache(Bool_t cached); Modify capture of draws into display list cache kTRUE - capture,; kFALSE direct draw. Return kTRUE is state changed, kFALSE if not. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Returns kTRUE if draws should be display list cached; kFALSE otherwise. Here we check that:; a) fScene is set (Scene manages link to GL-context);; b) secondary selection is not in progress as different; render-path is usually taken in this case. Otherwise we return internal bool. Override this in sub-class if different behaviour is required. void DLCacheClear(); Clear all entries for all LODs for this drawable from the; display list cache but keeping the reserved ids from GL context. void DLCacheDrop(); Drop all entries for all LODs for this drawable from the display; list cache, WITHOUT returning the reserved ids to GL context. This is called by scene if it realized that the GL context was; destroyed. void DLCachePurge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids to GL context. If you override this function:; 1. call the base-class version from it;; 2. call it from the destructor of the derived class!. void PurgeDLRange(UInt_t base, Int_t size) const; Purge given display-list range.; Utility function. Short_t QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD) const; Logical shapes usually support only discreet LOD values,; especially in view of display-list caching.; This function should be overriden to perform the desired quantization.; See TGLSphere. void Draw(TGLRnrCtx& rnrCtx) const; Draw the GL drawable, using draw flags. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:5820,Clear,Clear,5820,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,6,['Clear'],['Clear']
Usability,"Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses Introductory Tutorials. Overview; The goal of this tutorial session is to learn how to read a tree from a ROOT file, extract some data from it, display a histogram and then fit it.;  ; Information about the ROOT classes can be found on the ROOT reference guide, and there is also a web based documentation and the Root primer and other manuals available to download.; . Meet a TTree ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/introductory-tutorials-1.html:1957,learn,learn,1957,d/introductory-tutorials-1.html,https://root.cern,https://root.cern/d/introductory-tutorials-1.html,2,['learn'],['learn']
Usability,"Reference. . Definition at line 377 of file TSessionViewer.h. Public Member Functions;  TSessionQueryFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionQueryFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build query information frame. ;  ; void Feedback (TList *objs);  Feedback function connected to Feedback signal. ;  ; TEditQueryFrame * GetQueryEditFrame () const;  ; TCanvas * GetStatsCanvas () const;  ; TGTab * GetTab () const;  ; void IndicateStop (Bool_t aborted);  Indicate that Cancel or Stop was clicked. ;  ; TClass * IsA () const override;  ; void Modified (Bool_t mod=kTRUE);  Notify changes in query editor settings. ;  ; void OnBtnAbort ();  Abort processing query. ;  ; void OnBtnFinalize ();  Finalize query. ;  ; void OnBtnRetrieve ();  Retrieve query. ;  ; void OnBtnShowLog ();  Show query log. ;  ; void OnBtnStop ();  Stop processing query. ;  ; void OnBtnSubmit ();  Submit query. ;  ; void Progress (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  New version of Progress (just forward to the old version for the time being). ;  ; void ProgressLocal (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void ResetProgressDialog (const char *selec, Int_t files, Long64_t first, Long64_t entries);  Reset progress frame information fields. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateButtons (TQueryDescription *desc);  Update buttons state for the current query status. ;  ; void UpdateHistos (TList *objs);  Update feedback histog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:1313,progress bar,progress bar,1313,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorBinding Class ReferenceRooFit » RooFit. ; RooFunctorBinding makes math functions from ROOT usable in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 31 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorBinding ()=default;  ;  RooFunctorBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit function that makes ftor usable in RooFit. ;  ;  RooFunctorBinding (const RooFunctorBinding &other, const char *name=nullptr);  ;  ~RooFunctorBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:1139,usab,usable,1139,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,1,['usab'],['usable']
Usability,"Referenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum2Painter (TH2 *h2, Int_t bs);  TSpectrum2Painter normal constructor. ;  ;  ~TSpectrum2Painter () override;  TSpectrum2Painter destructor. ;  ; void GetAngles (Int_t &alpha, Int_t &beta, Int_t &view);  Gets angles of the view: ;  ; void GetBezier (Int_t &bezier);  Gets Bezier smoothing switch: ;  ; void GetChanGrid (Int_t &enable, Int_t &color);  This function gets attributes for drawing channel: ;  ; void GetChanMarks (Int_t &enable, Int_t &color, Int_t &width, Int_t &height, Int_t &style);  Gets drawing attributes for channel marks: ;  ; void GetColorAlgorithm (Int_t &colorAlgorithm);  Gets shading color algorithm: ;  ; void GetColorIncrements (Double_t &r, Double_t &g, Double_t &b);  Gets color increments between two color levels for r, g, b components: ;  ; void GetContourWidth (Int_t &width);  Gets width between horizontal slices: ;  ; void GetDisplayMode (Int_t &modeGroup, Int_t &displayMode);  Gets display group mode and display mode: -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. ;  ; void GetLightHeightWeight (Double_t &weight);  Gets weight between shading according to fictive light source and according to channels counts: ;  ; void GetLightPosition (Int_t &x, Int_t &y, Int_t &z);  Gets position of fictive light source in 3D space: ;  ; void GetNodes (Int_t &nodesx, Int_t &nodesy);  Gets nodes in both directions: ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:4322,simpl,simple,4322,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"Register, RDataSource *ds, std::weak_ptr< RJittedAction > *jittedActionOnHeap, const bool vector2RVec)Definition RDFInterfaceUtils.cxx:849; ROOT::Internal::RDF::FindUnknownColumnsColumnNames_t FindUnknownColumns(const ColumnNames_t &requiredCols, const ColumnNames_t &datasetColumns, const RColumnRegister &definedCols, const ColumnNames_t &dataSourceColumns)Definition RDFInterfaceUtils.cxx:611; ROOT::Internal::VecOps::voidvoid(off) SmallVectorTemplateBase< T; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; ROOT::RDFDefinition RArrowDS.hxx:28; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOT::TypeTraitsROOT type_traits extensions.Definition TypeTraits.hxx:21; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::MeanDouble_t Mean(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the weighted mean of an array a with length n.Definition TMath.h:1089; TMath::StdDevDouble_t StdDev(Long64_t n, const T *a, const Double_t *w=nullptr)Definition TMath.h:527; ROOT::Detail::RDF::ExtraArgsForDefine::NoneDefinition RDefine.hxx:39; ROOT::Detail::RDF::RInferredTypeDefinition Utils.hxx:59; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::TypeTraits::TypeListLightweight storage for a collection of types.Definition TypeTraits.hxx:25. treedataframeincROOTRDFInterfaceUtils.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:47709,Guid,Guide,47709,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,1,['Guid'],['Guide']
Usability,"Registry * ; reg, . TSqlRawBuffer * ; blobs . ). protected . tries to write array of objects as list of object references in streamer table, while objects itself will be stored in other tables. ; If not successful, object data will be stored in streamer table ; Definition at line 1732 of file TSQLStructure.cxx. ◆ UnpackTObject(). Bool_t TSQLStructure::UnpackTObject ; (; TSQLFile * ; f, . TBufferSQL2 * ; buf, . TSQLObjectData * ; data, . Long64_t ; objid, . Int_t ; clversion . ). static . Unpack TObject data in form, accepted by custom TObject streamer. ; Definition at line 2302 of file TSQLStructure.cxx. ◆ UnpackTString(). Bool_t TSQLStructure::UnpackTString ; (; TSQLFile * ; f, . TBufferSQL2 * ; buf, . TSQLObjectData * ; data, . Long64_t ; objid, . Int_t ; clversion . ). static . Unpack TString data in form, accepted by custom TString streamer. ; Definition at line 2336 of file TSQLStructure.cxx. Member Data Documentation. ◆ fArrayIndex. Int_t TSQLStructure::fArrayIndex {-1}. protected . Definition at line 108 of file TSQLStructure.h. ◆ fChilds. TObjArray TSQLStructure::fChilds. protected . Definition at line 110 of file TSQLStructure.h. ◆ fParent. TSQLStructure* TSQLStructure::fParent {nullptr}. protected . Definition at line 104 of file TSQLStructure.h. ◆ fPointer. const void* TSQLStructure::fPointer {nullptr}. protected . Definition at line 106 of file TSQLStructure.h. ◆ fRepeatCnt. Int_t TSQLStructure::fRepeatCnt {0}. protected . Definition at line 109 of file TSQLStructure.h. ◆ fType. Int_t TSQLStructure::fType {0}. protected . Definition at line 105 of file TSQLStructure.h. ◆ fValue. TString TSQLStructure::fValue. protected . Definition at line 107 of file TSQLStructure.h. Libraries for TSQLStructure:. [legend]; The documentation for this class was generated from the following files:; io/sql/inc/TSQLStructure.h; io/sql/src/TSQLStructure.cxx. TSQLStructure. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:33351,Guid,Guide,33351,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['Guid'],['Guide']
Usability,"Reimplemented from RooAbsReal.; Definition at line 89 of file RooWrapperPdf.h. ◆ minTrialSamples(). Int_t RooWrapperPdf::minTrialSamples ; (; const RooArgSet & ; arGenObs); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 92 of file RooWrapperPdf.h. ◆ plotSamplingHint(). std::list< double > * RooWrapperPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. inlineoverridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 103 of file RooWrapperPdf.h. ◆ selfNormalized(). bool RooWrapperPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooWrapperPdf.h. ◆ Streamer(). void RooWrapperPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooWrapperPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 117 of file RooWrapperPdf.h. Member Data Documentation. ◆ _func. RooRealProxy RooWrapperPdf::_func. private . Definition at line 110 of file RooWrapperPdf.h. ◆ _selfNormalized. bool RooWrapperPdf::_selfNormalized = false. private . Definition at line 111 of file RooWrapperPdf.h. Libraries for RooWrapperPdf:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooWrapperPdf.h. RooWrapperPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:82038,Guid,Guide,82038,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['Guid'],['Guide']
Usability,"Reimplemented from TGeoMatrix.; Definition at line 419 of file TGeoMatrix.h. ◆ MakeClone(). TGeoMatrix * TGeoIdentity::MakeClone ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Definition at line 427 of file TGeoMatrix.h. ◆ MasterToLocal(). void TGeoIdentity::MasterToLocal ; (; const Double_t * ; master, . Double_t * ; local . ); const. inlineoverridevirtual . convert a point by multiplying its column vector (x, y, z, 1) to matrix ; Reimplemented from TGeoMatrix.; Definition at line 428 of file TGeoMatrix.h. ◆ MasterToLocalBomb(). void TGeoIdentity::MasterToLocalBomb ; (; const Double_t * ; master, . Double_t * ; local . ); const. inlineoverridevirtual . convert a point by multiplying its column vector (x, y, z, 1) to matrix ; Reimplemented from TGeoMatrix.; Definition at line 436 of file TGeoMatrix.h. ◆ MasterToLocalVect(). void TGeoIdentity::MasterToLocalVect ; (; const Double_t * ; master, . Double_t * ; local . ); const. inlineoverridevirtual . convert a point by multiplying its column vector (x, y, z, 1) to matrix ; Reimplemented from TGeoMatrix.; Definition at line 432 of file TGeoMatrix.h. ◆ SavePrimitive(). void TGeoIdentity::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). inlineoverridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 444 of file TGeoMatrix.h. ◆ Streamer(). void TGeoIdentity::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoIdentity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 446 of file TGeoMatrix.h. Libraries for TGeoIdentity:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoMatrix.h; geom/geom/src/TGeoMatrix.cxx. TGeoIdentity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIdentity.html:20365,Guid,Guide,20365,doc/master/classTGeoIdentity.html,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html,1,['Guid'],['Guide']
Usability,"Reimplemented from TGeoPatternFinder.; Definition at line 474 of file TGeoPatternFinder.h. ◆ IsA(). TClass * TGeoPatternSphTheta::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 480 of file TGeoPatternFinder.h. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternSphTheta::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 2088 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternSphTheta & TGeoPatternSphTheta::operator= ; (; const TGeoPatternSphTheta & ; pf). assignment operator ; Definition at line 2057 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternSphTheta::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 2097 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternSphTheta::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternSphTheta::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 480 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternSphTheta::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 2115 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternSphTheta:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternSphTheta. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphTheta.html:18132,Guid,Guide,18132,doc/master/classTGeoPatternSphTheta.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html,1,['Guid'],['Guide']
Usability,"Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file TMessageHandler.cxx. ◆ Removed(). virtual void TMessageHandler::Removed ; (; ). inlinevirtual . Definition at line 65 of file TMessageHandler.h. ◆ Streamer(). void TMessageHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMessageHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TMessageHandler.h. Member Data Documentation. ◆ fClass. const TClass* TMessageHandler::fClass. protected . Definition at line 37 of file TMessageHandler.h. ◆ fCnts. Int_t* TMessageHandler::fCnts. protected . Definition at line 41 of file TMessageHandler.h. ◆ fDerived. Bool_t TMessageHandler::fDerived. protected . Definition at line 43 of file TMessageHandler.h. ◆ fMessId. Long_t TMessageHandler::fMessId. protected . Definition at line 39 of file TMessageHandler.h. ◆ fMessIds. Long_t* TMessageHandler::fMessIds. protected . Definition at line 42 of file TMessageHandler.h. ◆ fMessObj. const TObject* TMessageHandler::fMessObj. protected . Definition at line 38 of file TMessageHandler.h. ◆ fSize. Int_t TMessageHandler::fSize. protected . Definition at line 40 of file TMessageHandler.h. Libraries for TMessageHandler:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TMessageHandler.h; core/base/src/TMessageHandler.cxx. TMessageHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:22672,Guid,Guide,22672,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,1,['Guid'],['Guide']
Usability,"Reimplemented in RooArgProxy, RooCollectionProxy< RooCollection_t >, RooCollectionProxy< RooArgList >, and RooCollectionProxy< RooArgSet >.; Definition at line 47 of file RooAbsProxy.h. ◆ nset(). const RooArgSet * RooAbsProxy::nset ; (; ); const. inline . Definition at line 52 of file RooAbsProxy.h. ◆ print(). void RooAbsProxy::print ; (; std::ostream & ; os, . bool ; addContents = false . ); const. virtual . Print proxy name. ; Reimplemented in RooArgProxy, RooCollectionProxy< RooCollection_t >, RooCollectionProxy< RooArgList >, and RooCollectionProxy< RooArgSet >.; Definition at line 60 of file RooAbsProxy.cxx. ◆ Streamer(). virtual void RooAbsProxy::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in RooArgProxy, RooCollectionProxy< RooCollection_t >, RooCollectionProxy< RooArgList >, RooCollectionProxy< RooArgSet >, RooTemplateProxy< T >, RooTemplateProxy< const RooHistFunc >, RooTemplateProxy< RooAbsCategory >, RooTemplateProxy< RooAbsPdf >, RooTemplateProxy< RooAbsReal >, RooTemplateProxy< RooAbsRealLValue >, RooTemplateProxy< RooMultiCategory >, and RooTemplateProxy< RooRealVar >. ◆ StreamerNVirtual(). void RooAbsProxy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file RooAbsProxy.h. Friends And Related Symbol Documentation. ◆ RooAbsArg. friend class RooAbsArg. friend . Definition at line 62 of file RooAbsProxy.h. ◆ RooAbsPdf. friend class RooAbsPdf. friend . Definition at line 66 of file RooAbsProxy.h. Member Data Documentation. ◆ _nset. RooArgSet* RooAbsProxy::_nset = nullptr. protected . ! Normalization set to be used for evaluation of RooAbsPdf contents ; Definition at line 60 of file RooAbsProxy.h. Libraries for RooAbsProxy:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsProxy.h; roofit/roofitcore/src/RooAbsProxy.cxx. RooAbsProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsProxy.html:6324,Guid,Guide,6324,doc/master/classRooAbsProxy.html,https://root.cern,https://root.cern/doc/master/classRooAbsProxy.html,1,['Guid'],['Guide']
Usability,"Remove navigator"", ""Navigator %p not found"", nav);; 917 if (fMultiThread); 918 fgMutex.unlock();; 919}; 920 ; 921////////////////////////////////////////////////////////////////////////////////; 922/// Set maximum number of threads for navigation.; 923 ; 924void TGeoManager::SetMaxThreads(Int_t nthreads); 925{; 926 if (!fClosed) {; 927 Error(""SetMaxThreads"", ""Cannot set maximum number of threads before closing the geometry"");; 928 return;; 929 }; 930 if (!fMultiThread) {; 931 ROOT::EnableThreadSafety();; 932 std::thread::id threadId = std::this_thread::get_id();; 933 NavigatorsMap_t::const_iterator it = fNavigators.find(threadId);; 934 if (it != fNavigators.end()) {; 935 TGeoNavigatorArray *array = it->second;; 936 fNavigators.erase(it);; 937 fNavigators.insert(NavigatorsMap_t::value_type(threadId, array));; 938 }; 939 }; 940 if (fMaxThreads) {; 941 ClearThreadsMap();; 942 ClearThreadData();; 943 }; 944 fMaxThreads = nthreads + 1;; 945 if (fMaxThreads > 0) {; 946 fMultiThread = kTRUE;; 947 CreateThreadData();; 948 }; 949}; 950 ; 951////////////////////////////////////////////////////////////////////////////////; 952 ; 953void TGeoManager::ClearThreadData() const; 954{; 955 if (!fMaxThreads); 956 return;; 957 fgMutex.lock();; 958 TIter next(fVolumes);; 959 TGeoVolume *vol;; 960 while ((vol = (TGeoVolume *)next())); 961 vol->ClearThreadData();; 962 fgMutex.unlock();; 963}; 964 ; 965////////////////////////////////////////////////////////////////////////////////; 966/// Create thread private data for all geometry objects.; 967 ; 968void TGeoManager::CreateThreadData() const; 969{; 970 if (!fMaxThreads); 971 return;; 972 fgMutex.lock();; 973 TIter next(fVolumes);; 974 TGeoVolume *vol;; 975 while ((vol = (TGeoVolume *)next())); 976 vol->CreateThreadData(fMaxThreads);; 977 fgMutex.unlock();; 978}; 979 ; 980////////////////////////////////////////////////////////////////////////////////; 981/// Clear the current map of threads. This will be filled again by the calling; 982/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:34526,Clear,ClearThreadsMap,34526,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,3,['Clear'],"['ClearThreadData', 'ClearThreadsMap']"
Usability,Request(). ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest ; (; ). overridedefault . Member Function Documentation. ◆ NeedCanvasUpdate(). bool ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdate ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 36 of file RCanvas.hxx. ◆ operator=(). RChangeAttrRequest & ROOT::Experimental::RChangeAttrRequest::operator= ; (; const RChangeAttrRequest & ; ). privatedelete . ◆ Process(). std::unique_ptr< ROOT::Experimental::RDrawableReply > ROOT::Experimental::RChangeAttrRequest::Process ; (; ). overridevirtual . Apply attributes changes to the drawable Return mask with actions which were really applied. ; Reimplemented from ROOT::Experimental::RDrawableRequest.; Definition at line 327 of file RCanvas.cxx. Member Data Documentation. ◆ fNeedUpdate. bool ROOT::Experimental::RChangeAttrRequest::fNeedUpdate {false}. private . ! is canvas update required ; Definition at line 29 of file RCanvas.hxx. ◆ ids. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::ids. private . array of ids ; Definition at line 25 of file RCanvas.hxx. ◆ names. std::vector<std::string> ROOT::Experimental::RChangeAttrRequest::names. private . array of attribute names ; Definition at line 26 of file RCanvas.hxx. ◆ update. bool ROOT::Experimental::RChangeAttrRequest::update {true}. private . update canvas at the end ; Definition at line 28 of file RCanvas.hxx. ◆ values. std::vector<std::unique_ptr<RAttrMap::Value_t> > ROOT::Experimental::RChangeAttrRequest::values. private . array of values ; Definition at line 27 of file RCanvas.hxx. Libraries for ROOT::Experimental::RChangeAttrRequest:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RCanvas.hxx; graf2d/gpadv7/src/RCanvas.cxx. ROOTExperimentalRChangeAttrRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html:3921,Guid,Guide,3921,doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RChangeAttrRequest.html,1,['Guid'],['Guide']
Usability,"Requests are; saved in a special dataset repository and must be honored by the endpoint.; This is the special PROOF-Lite re-implementation of the TProof function; and includes code originally implemented in TProofServ. Bool_t CancelStagingDataSet(const char* dataset); Cancels a dataset staging request. Returns kTRUE on success, kFALSE on; failure. Dataset not found equals to a failure. PROOF-Lite; re-implementation of the equivalent function in TProofServ. TFileCollection * GetStagingStatusDataSet(const char* dataset); Obtains a TFileCollection showing the staging status of the specified; dataset. A valid dataset manager and dataset staging requests repository; must be present on the endpoint. PROOF-Lite version of the equivalent; function from TProofServ. Int_t VerifyDataSet(const char* uri, const char* = 0); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). void SendInputDataFile(); Make sure that the input data objects are available to the workers in a; dedicated file in the cache; the objects are taken from the dedicated list; and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:35111,Clear,ClearDataSetCache,35111,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,6,['Clear'],"['Clear', 'ClearDataSetCache']"
Usability,"Result*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:5379,clear,clearShapeDirty,5379,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['clear'],['clearShapeDirty']
Usability,"Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.72761 a1=-0.375581 mean=5.04879 nbkg=141.143 nsig=137.402 sig1frac=0.495257; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#0] WARNING:Generation -- Fit parameter 'sigma1' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#0] WARNING:Generation -- Fit parameter 'sigma2' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#1] INFO:ObjectHandling -- RooWorkspace::import() importing RooRealVar::meanpull; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pullGauss_over_pullGauss_Int[meanpull]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pullGauss_over_pullGauss_Int[meanpull]_fitParData_model) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf801_mcstudy.py. tutorialsroofitrf801_mcstudy.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8py.html:24601,Guid,Guide,24601,doc/master/rf801__mcstudy_8py.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8py.html,1,['Guid'],['Guide']
Usability,"Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; invvoid inv(rsa_NUMBER *, rsa_NUMBER *, rsa_NUMBER *)Definition rsaaux.cxx:949; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Rectangle_t::fXShort_t fXDefinition GuiTypes.h:362; Rectangle_t::fHeightUShort_t fHeightDefinition GuiTypes.h:363; Rectangle_t::fYShort_t fYDefinition GuiTypes.h:362; Rectangle_t::fWidthUShort_t fWidthDefinition GuiTypes.h:363; dFieldstruct used by ShowGuidelines to store the distance Field between objects in the canvas.Definition TPad.cxx:6319; dField::fbTAttBBox2D * fbDefinition TPad.cxx:6321; dField::dFielddField()Definition TPad.cxx:6326; dField::fdirchar fdirDefinition TPad.cxx:6323; dField::dFielddField(TAttBBox2D *a, TAttBBox2D *b, Int_t dist, char direction)Definition TPad.cxx:6330; dField::faTAttBBox2D * faDefinition TPad.cxx:6320; dField::fdistInt_t fdistDefinition TPad.cxx:6322; mTMarker mDefinition textangle.C:8. graf2dgpadsrcTPad.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:340083,Guid,Guide,340083,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Draw vertical progress bar. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:23748,progress bar,progress bar,23748,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 51 of file TRootDialog.h. ◆ Popup(). void TRootDialog::Popup ; (; ). virtual . Popup dialog. ; Definition at line 171 of file TRootDialog.cxx. ◆ Streamer(). void TRootDialog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGTransientFrame. ◆ StreamerNVirtual(). void TRootDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TRootDialog.h. ◆ TabPressed(). void TRootDialog::TabPressed ; (; ). Handle Tab keyboard navigation in this dialog. ; Definition at line 264 of file TRootDialog.cxx. Member Data Documentation. ◆ fApply. Bool_t TRootDialog::fApply. private . if true show Apply button ; Definition at line 30 of file TRootDialog.h. ◆ fCancel. Bool_t TRootDialog::fCancel. private . if true show Cancel button ; Definition at line 29 of file TRootDialog.h. ◆ fHelp. Bool_t TRootDialog::fHelp. private . if true show Online Help button ; Definition at line 31 of file TRootDialog.h. ◆ fL1. TGLayoutHints* TRootDialog::fL1. private . label layout ; Definition at line 25 of file TRootDialog.h. ◆ fL2. TGLayoutHints* TRootDialog::fL2. private . text entry layout ; Definition at line 26 of file TRootDialog.h. ◆ fMenu. TRootContextMenu* TRootDialog::fMenu. private . associated context menu ; Definition at line 24 of file TRootDialog.h. ◆ fOk. Bool_t TRootDialog::fOk. private . if true show OK button ; Definition at line 28 of file TRootDialog.h. ◆ fWidgets. TList* TRootDialog::fWidgets. private . label and text field widgets created in dialog ; Definition at line 27 of file TRootDialog.h. Libraries for TRootDialog:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TRootDialog.h; gui/gui/src/TRootDialog.cxx. TRootDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootDialog.html:40929,Guid,Guide,40929,doc/master/classTRootDialog.html,https://root.cern,https://root.cern/doc/master/classTRootDialog.html,1,['Guid'],['Guide']
Usability,"ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DecisionTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DecisionTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 243 of file DecisionTree.h. ◆ ClassName(). virtual const char * TMVA::DecisionTree::ClassName ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 98 of file DecisionTree.h. ◆ CleanTree(). UInt_t TMVA::DecisionTree::CleanTree ; (; DecisionTreeNode * ; node = nullptr). remove those last splits that result in two leaf nodes that are both of the type (i.e. ; both signal or both background) this of course is only a reasonable thing to do when you use ""YesOrNo"" leafs, while it might loose s.th. if you use the purity information in the nodes. --> hence I don't call it automatically in the tree building ; Definition at line 937 of file DecisionTree.cxx. ◆ ClearTree(). void TMVA::DecisionTree::ClearTree ; (; ). clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree ; Definition at line 923 of file DecisionTree.cxx. ◆ CountLeafNodes(). UInt_t TMVA::DecisionTree::CountLeafNodes ; (; TMVA::Node * ; n = nullptr). return the number of terminal nodes in the sub-tree below Node n ; Definition at line 1131 of file DecisionTree.cxx. ◆ CreateFromXML(). TMVA::DecisionTree * TMVA::DecisionTree::CreateFromXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). static . re-create a new tree (decision tree or search tree) from XML ; Definition at line 281 of file DecisionTree.cxx. ◆ CreateNode(). virtual DecisionTreeNode * TMVA::DecisionTree::CreateNode ; (; UInt_t ; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 95 of file DecisionTree.h. ◆ CreateTree(). virtual BinaryTree * TMVA::DecisionTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 96 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:17628,Clear,ClearTree,17628,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['Clear'],['ClearTree']
Usability,"ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:10152,Clear,ClearGlobals,10152,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearGlobals']
Usability,"Right (Int_t v);  ; virtual void SetPadTop (Int_t v);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableLayoutHints.html:3718,Clear,Clear,3718,doc/master/classTGTableLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGTableLayoutHints.html,2,['Clear'],['Clear']
Usability,"RooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6430,clear,clearShapeDirty,6430,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Roo2DKeysPdf.html:2721,clear,clearShapeDirty,2721,root/html530/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html530/Roo2DKeysPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsCategory.cxx. ◆ attachToVStore(). void RooAbsCategory::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Attach the category index and label to as branches to the given vector store. ; Implements RooAbsArg.; Definition at line 436 of file RooAbsCategory.cxx. ◆ begin(). std::map< std::string, value_type >::const_iterator RooAbsCategory::begin ; (; ); const. inline . Iterator for category state names. Points to pairs of index and name. ; Definition at line 91 of file RooAbsCategory.h. ◆ Class(). static TClass * RooAbsCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCategory::Class_Version ; (; ). inlinestaticconstexpr . A buffer for reading values from trees. ; ReturnsVersion of this class ; Definition at line 226 of file RooAbsCategory.h. ◆ clearTypes(). void RooAbsCategory::clearTypes ; (; ). protected . Delete all currently defined states. ; Definition at line 277 of file RooAbsCategory.cxx. ◆ copyCache(). void RooAbsCategory::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value from given source and raise dirty flag. ; It is the callers responsibility to ensure that the sources cache is clean(valid) before this function is called, e.g. by calling syncCache() on the source. ; Implements RooAbsArg.; Reimplemented in RooAbsCategoryLValue.; Definition at line 560 of file RooAbsCategory.cxx. ◆ createFundamental(). RooFit::OwningPtr< RooAbsArg > RooAbsCategory::createFundamental ; (; const char * ; newname = nullptr); const. overridevirtual . Create a RooCategory fundamental object with our properties. ; Implements RooAbsArg.; Definition at line 642 of file RooAbsCategory.cxx. ◆ createTable(). Roo1DTable * RooAbsCategory::createTable ; (; const char * ; label",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:47998,clear,clearTypes,47998,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['clear'],['clearTypes']
Usability,"RooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgList.html:11874,clear,clearStructureTags,11874,root/html534/RooArgList.html,https://root.cern,https://root.cern/root/html534/RooArgList.html,1,['clear'],['clearStructureTags']
Usability,"RooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionRooPrintable::kArgs; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static TObject::EStatusBitsTObject::kHasUUID; static RooPrintable::StyleOptionRooPrintable::kInline; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgList.html:11857,clear,clearStructureTags,11857,root/html602/RooArgList.html,https://root.cern,https://root.cern/root/html602/RooArgList.html,2,['clear'],['clearStructureTags']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3176,clear,clearShapeDirty,3176,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:2967,clear,clearShapeDirty,2967,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2689,clear,clearShapeDirty,2689,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4161,clear,clearShapeDirty,4161,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsAnaConvPdf.html:4161,clear,clearShapeDirty,4161,root/html530/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsAnaConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3261,clear,clearShapeDirty,3261,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3261,clear,clearShapeDirty,3261,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDecay.html:2665,clear,clearShapeDirty,2665,root/html530/RooDecay.html,https://root.cern,https://root.cern/root/html530/RooDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:2967,clear,clearShapeDirty,2967,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBDecay.html:2865,clear,clearShapeDirty,2865,root/html530/RooBDecay.html,https://root.cern,https://root.cern/root/html530/RooBDecay.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2689,clear,clearShapeDirty,2689,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['clear'],['clearShapeDirty']
Usability,"RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3214,clear,clearShapeDirty,3214,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['clear'],['clearShapeDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:4062,clear,clearValueDirty,4062,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,2,['clear'],['clearValueDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:4508,clear,clearValueDirty,4508,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:4508,clear,clearValueDirty,4508,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,3,['clear'],['clearValueDirty']
Usability,"RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator parameters to initial values and before call to generator context Any modifications to generator parameters will affect next generation operation (only) ;  ; virtual bool processBetweenGenAndFit (Int_t);  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2MCSModule.html:2615,Clear,Clear,2615,doc/master/classRooChi2MCSModule.html,https://root.cern,https://root.cern/doc/master/classRooChi2MCSModule.html,2,['Clear'],['Clear']
Usability,"RooAbsPdf, the base class of all PDFs; 23 ; 24RooAbsPdf is the base class for all probability density; 25functions (PDFs). The class provides hybrid analytical/numerical; 26normalization for its implementations, error tracing, and a Monte Carlo; 27generator interface.; 28 ; 29### A Minimal PDF Implementation; 30 ; 31A minimal implementation of a PDF class derived from RooAbsPdf; 32should override the `evaluate()` function. This function should; 33return the PDF's value (which does not need to be normalised).; 34 ; 35 ; 36#### Normalization/Integration; 37 ; 38Although the normalization of a PDF is an integral part of a; 39probability density function, normalization is treated separately; 40in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; 41PDF: it can be a building block for a more complex composite PDF; 42if any of its variables are functions instead of variables. In; 43such cases, the normalization of the composite PDF may not simply be; 44integral over the dependents of the top-level PDF: these are; 45functions with potentially non-trivial Jacobian terms themselves.; 46\note Therefore, no explicit attempt should be made to normalize the; 47function output in evaluate(). In particular, normalisation constants; 48can be omitted to speed up the function evaluations, and included later; 49in the integration of the PDF (see below), which is rarely called in; 50comparison to the `evaluate()` function.; 51 ; 52In addition, RooAbsPdf objects do not have a static concept of what; 53variables are parameters, and what variables are dependents (which; 54need to be integrated over for a correct PDF normalization).; 55Instead, the choice of normalization is always specified each time a; 56normalized value is requested from the PDF via the getVal(); 57method.; 58 ; 59RooAbsPdf manages the entire normalization logic of each PDF with; 60the help of a RooRealIntegral object, which coordinates the integration; 61of a given choice of normalization. By default, Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:2097,simpl,simply,2097,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['simpl'],['simply']
Usability,RooAbsReal::PlotOpt::addToWgtSelfdouble addToWgtSelfDefinition RooAbsReal.h:482; RooAbsReal::PlotOpt::shiftToZerobool shiftToZeroDefinition RooAbsReal.h:471; RooAbsReal::PlotOpt::projDataSetconst RooArgSet * projDataSetDefinition RooAbsReal.h:472; RooAbsReal::PlotOpt::binProjDatabool binProjDataDefinition RooAbsReal.h:468; RooAbsReal::PlotOpt::stypeScaleType stypeDefinition RooAbsReal.h:466; RooAbsReal::PlotOpt::curveNameSuffixconst char * curveNameSuffixDefinition RooAbsReal.h:486; RooAbsReal::PlotOpt::addToCurveNameconst char * addToCurveNameDefinition RooAbsReal.h:481; RooAbsReal::PlotOpt::numeeInt_t numeeDefinition RooAbsReal.h:487; RooAbsReal::PlotOpt::errorFRconst RooFitResult * errorFRDefinition RooAbsReal.h:491; RooAbsReal::PlotOpt::rangeHidouble rangeHiDefinition RooAbsReal.h:475; RooAbsReal::PlotOpt::numCPUInt_t numCPUDefinition RooAbsReal.h:484; RooAbsReal::PlotOpt::projSetconst RooArgSet * projSetDefinition RooAbsReal.h:469; RooAbsReal::PlotOpt::postRangeFracScalebool postRangeFracScaleDefinition RooAbsReal.h:476; RooAbsReal::PlotOpt::curveInvisiblebool curveInvisibleDefinition RooAbsReal.h:479; RooAbsReal::PlotOpt::curveNameconst char * curveNameDefinition RooAbsReal.h:480; RooAbsReal::PlotOpt::projDataconst RooAbsData * projDataDefinition RooAbsReal.h:467; RooAbsReal::PlotOpt::drawOptionsOption_t * drawOptionsDefinition RooAbsReal.h:464; RooAbsReal::PlotOpt::rangeLodouble rangeLoDefinition RooAbsReal.h:474; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39; RooFit::UniqueId::valueconstexpr Value_t value() constReturn numerical value of ID.Definition UniqueId.h:59; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; outputstatic void output(). roofitroofitcoresrcRooAbsReal.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:261232,Guid,Guide,261232,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['Guid'],['Guide']
Usability,"RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:6197,Clear,Clear,6197,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['Clear'],['Clear']
Usability,"RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6782,Clear,Clear,6782,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['Clear'],['Clear']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:3216,clear,clearEvalError,3216,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3085,clear,clearEvalError,3085,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3085,clear,clearEvalError,3085,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearEvalError']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4344,clear,clearValueDirty,4344,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsReal*RooAbsPdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3264,clear,clearValueDirty,3264,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3444,clear,clearValueDirty,3444,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2753,clear,clearValueDirty,2753,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:3055,clear,clearValueDirty,3055,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2953,clear,clearValueDirty,2953,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsReal*RooAbsPdf::createChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2777,clear,clearValueDirty,2777,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['clear'],['clearValueDirty']
Usability,"RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:3045,clear,clearValueDirty,3045,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,4,['clear'],['clearValueDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:3934,clear,clearShapeDirty,3934,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['clear'],['clearShapeDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:4093,clear,clearShapeDirty,4093,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,3,['clear'],['clearShapeDirty']
Usability,"RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:3934,clear,clearShapeDirty,3934,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,2,['clear'],['clearShapeDirty']
Usability,"RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:6584,clear,clearShapeDirty,6584,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,1,['clear'],['clearShapeDirty']
Usability,RooAbsString; ←. RooStringVar. RooAbsBinning; ←. RooBinning. RooLinTransBinning. RooParamBinning. RooRangeBinning. RooUniformBinning. RooAbsData; ←. RooDataHist. RooDataSet. RooTreeData. RooAbsDataStore; ←. RooCompositeDataStore. RooTreeDataStore. RooAbsGenContext; ←. RooAddGenContext. RooConvGenContext. RooEffGenContext. RooGenContext. RooProdGenContext. RooSimGenContext. RooAbsMCStudyModule; ←. RooChi2MCSModule. RooDLLSignificanceMCSModule. RooRandomizeParamMCSModule. RooStats::UpperLimitMCSModule. RooAbsNumGenerator; ←. RooAcceptReject. RooFoamGenerator. RooAbsStudy; ←. RooGenFitStudy. RooStats::ToyMCStudy. RooArgProxy; ←. RooCategoryProxy. RooRealProxy. RooClassFactory. RooCmdArg. RooCustomizer. RooDouble. RooFactoryWSTool. RooFitResult. RooInt. RooMCStudy. RooMapCatEntry. RooNameReg. RooPlot. RooSimWSTool. RooSimWSTool::SplitRule. RooStats::BayesianCalculator. RooStats::ConfInterval; ←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::HLFactory. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HypoTestInverter. RooStats::HypoTestInverterPlot. RooStats::HypoTestResult; ←. RooStats::HybridResult. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::ModelConfig. RooStats::SPlot. RooStats::SamplingDistPlot; ←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStudyManager. RooStudyPackage. RooTObjWrap. RooTable; ←. Roo1DTable. RooWorkspace. TAttParticle. TAxis. TAxis3D. TBenchmark. TBranch; ←. TBranchClones. TBranchElement. TBranchObject. TBranchRef. TBranchSTL. THbookBranch. TBrowser. TBrowserPlugin. TChainElement. TClassTree. TColor. TColorWheel. TContextMenu. TControlBarButton; ←. TControlBar. TCut. TDSet; ←. TDSetProxy. TDSetElement. TDataSet; ←. TChair; ←. TColumnView. TFileSet. TObjectSet; ←. TVolume. TVolumeView. TTable; ←. TGenericTab,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:78219,Simpl,SimpleInterval,78219,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,RooAbsString; ←. RooStringVar. RooAbsBinning; ←. RooBinning. RooLinTransBinning. RooParamBinning. RooRangeBinning. RooUniformBinning. RooAbsData; ←. RooDataHist. RooDataSet. RooTreeData. RooAbsDataStore; ←. RooCompositeDataStore. RooTreeDataStore. RooAbsGenContext; ←. RooAddGenContext. RooConvGenContext. RooEffGenContext. RooGenContext. RooProdGenContext. RooSimGenContext. RooAbsMCStudyModule; ←. RooChi2MCSModule. RooDLLSignificanceMCSModule. RooRandomizeParamMCSModule. RooStats::UpperLimitMCSModule. RooAbsNumGenerator; ←. RooAcceptReject. RooFoamGenerator. RooAbsStudy; ←. RooGenFitStudy. RooStats::ToyMCStudy. RooArgProxy; ←. RooCategoryProxy. RooRealProxy. RooClassFactory. RooCmdArg. RooCustomizer. RooDouble. RooFactoryWSTool. RooFitResult. RooInt. RooMCStudy. RooMapCatEntry. RooNameReg. RooPlot. RooSimWSTool. RooSimWSTool::SplitRule. RooStats::BayesianCalculator. RooStats::ConfInterval; ←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::HLFactory. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestResult; ←. RooStats::HybridResult. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::ModelConfig. RooStats::SPlot. RooStats::SamplingDistPlot; ←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStudyManager. RooStudyPackage. RooTObjWrap. RooTable; ←. Roo1DTable. RooWorkspace. TAttParticle. TAxis. TAxis3D. TBenchmark. TBranch; ←. TBranchClones. TBranchElement. TBranchObject. TBranchRef. TBranchSTL. THbookBranch. TBrowser. TBrowserPlugin. TChainElement. TClassTree. TColor. TColorWheel. TContextMenu. TControlBarButton; ←. TControlBar. TCut. TDSet; ←. TDSetProxy. TDSetElement. TDataSet; ←. TChair; ←. TColumnView. TFileSet. TObjectSet; ←. TVolume. TVolumeView. TTable; ←. TGe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassHierarchy.html:80624,Simpl,SimpleInterval,80624,root/html530/ClassHierarchy.html,https://root.cern,https://root.cern/root/html530/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,"RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsDataStore::dirtyProp() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:1667,Clear,Clear,1667,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,1,['Clear'],['Clear']
Usability,"RooArgSet(Asig1, Abkg1)));; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; pt.Clear();; for (auto text : {; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; can->cd(3);; frame = x.frame(Title(""Barlow Beeston light for (Sig+Bkg)""));; sumData.plotOn(frame);; model2.plotOn(frame, LineColor(kBlue), VisualizeError(*result2));; // Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame);; model2.plotOn(frame, LineColor(kBlue));; model2.plotOn(frame, Components(p_ph_sig2), LineColor(kAzure));; model2.plotOn(frame, Components(p_ph_bkg2), LineColor(kRed));; model2.paramOn(frame, Parameters(RooArgSet(Asig2, Abkg2)));; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; pt.Clear();; for (auto text : {; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink slightly.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; ; std::cout << ""Asig [normal ] = "" << Asig0.getVal() << "" +/- "" << Asig0.getError() << std::endl;; std::cout << ""Asig [BB ] = "" << Asig1.getVal() << "" +/- "" << Asig1.getError() << std::endl;; std::cout << ""Asig [BBlight] = "" << Asig2.getVal() << "" +/- "" << Asig2.getError() << std::endl;; ; }; g#define g(i)Definition RSha256.hxx:105; RooDataHist.h; RooDataSet.h; RooGaussian.h; RooHistConstraint.h; RooHistFunc.h; RooParamHistFunc.h; RooPlot.h; RooProdPdf.h; RooRealSumPdf.h; RooRealVar.h; RooUniform.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kAzure@ kAzureDefinition Rtypes.h:67; TCanvas.h; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; TPaveText.h; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:7222,Clear,Clear,7222,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,1,['Clear'],['Clear']
Usability,"RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:5070,clear,clearValueAndShapeDirty,5070,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"RooCmdArg ConditionalObservables(Args_t &&... argsOrArgSet)Create a RooCmdArg to declare conditional observables.Definition RooGlobalFunc.h:278; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; RooFit::ProjWDataRooCmdArg ProjWData(const RooAbsData &projData, bool binData=false)Definition RooGlobalFunc.cxx:179; RooFit::NormalizationRooCmdArg Normalization(double scaleFactor)Definition RooGlobalFunc.cxx:195; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf306_condpereventerrorsDefinition rf306_condpereventerrors.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_over_gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt]_decay_gmData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(gm1_conv_exp(-abs(@0)/@1)_dt_tau_[decay_gm]_Int[dt,dterr]) using numeric integrator RooIntegrator1D to calculate Int(dterr); [#1] INFO:Plotting -- RooAbsReal::plotOn(decay_gm) plot on dt averages using data variables (dterr); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf306_condpereventerrors.C. tutorialsroofitrf306_condpereventerrors.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf306__condpereventerrors_8C.html:8052,Guid,Guide,8052,doc/master/rf306__condpereventerrors_8C.html,https://root.cern,https://root.cern/doc/master/rf306__condpereventerrors_8C.html,1,['Guid'],['Guide']
Usability,"RooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf613_global_observablesDefinition rf613_global_observables.py:1; RooMsgService::StreamConfig::removeTopicvoid removeTopic(RooFit::MsgTopic oldTopic)Definition RooMsgService.h:122; ; 1. model.fitTo(*data, GlobalObservables(mu_obs)); ------------------------------------------------; ; RooFitResult: minimized FCN value: 68.2482, estimated distance to minimum: 9.80327e-07; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu 5.2717e-02 +/- 8.11e-02; sigma 9.7190e-01 +/- 9.73e-02; ; 2. model.fitTo(*data); ---------------------; ; RooFitResult: minimized FCN value: 68.2482, estimated distance to minimum: 9.80327e-07; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu 5.2717e-02 +/- 8.11e-02; sigma 9.7190e-01 +/- 9.73e-02; ; 3. model.fitTo(*data, GlobalObservables(mu_obs), GlobalObservablesSource(""model"")); ------------------------------------------------; ; RooFitResult: minimized FCN value: 83.7181, estimated distance to minimum: 6.67911e-07; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu 7.4744e-01 +/- 9.68e-02; sigma 1.2451e+00 +/- 1.38e-01; ; DateJanuary 2022 ; AuthorJonas Rembser ; Definition in file rf613_global_observables.C. tutorialsroofitrf613_global_observables.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf613__global__observables_8C.html:11081,Guid,Guide,11081,doc/master/rf613__global__observables_8C.html,https://root.cern,https://root.cern/doc/master/rf613__global__observables_8C.html,1,['Guid'],['Guide']
Usability,"RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:3731,clear,clearValueDirty,3731,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['clear'],['clearValueDirty']
Usability,"RooFit » RooFit Core. ; Abstract interface for all probability density functions. . RooAbsPdf, the base class of all PDFs; RooAbsPdf is the base class for all probability density functions (PDFs). The class provides hybrid analytical/numerical normalization for its implementations, error tracing, and a Monte Carlo generator interface. A Minimal PDF Implementation; A minimal implementation of a PDF class derived from RooAbsPdf should override the evaluate() function. This function should return the PDF's value (which does not need to be normalised).; Normalization/Integration; Although the normalization of a PDF is an integral part of a probability density function, normalization is treated separately in RooAbsPdf. The reason is that a RooAbsPdf object is more than a PDF: it can be a building block for a more complex composite PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:1384,simpl,simply,1384,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['simpl'],['simply']
Usability,RooJeffreysPrior::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 52 of file RooJeffreysPrior.h. ◆ evaluate(). double RooJeffreysPrior::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 72 of file RooJeffreysPrior.cxx. ◆ IsA(). TClass * RooJeffreysPrior::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 52 of file RooJeffreysPrior.h. ◆ lowList(). const RooArgList & RooJeffreysPrior::lowList ; (; ); const. inline . Definition at line 26 of file RooJeffreysPrior.h. ◆ paramList(). const RooArgList & RooJeffreysPrior::paramList ; (; ); const. inline . Definition at line 27 of file RooJeffreysPrior.h. ◆ Streamer(). void RooJeffreysPrior::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooJeffreysPrior::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file RooJeffreysPrior.h. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooJeffreysPrior::_cacheMgr. mutableprivate . Definition at line 50 of file RooJeffreysPrior.h. ◆ _nominal. RooTemplateProxy<RooAbsPdf> RooJeffreysPrior::_nominal. protected . Definition at line 31 of file RooJeffreysPrior.h. ◆ _obsSet. RooListProxy RooJeffreysPrior::_obsSet. protected . Definition at line 32 of file RooJeffreysPrior.h. ◆ _paramSet. RooListProxy RooJeffreysPrior::_paramSet. protected . Definition at line 33 of file RooJeffreysPrior.h. Libraries for RooJeffreysPrior:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooJeffreysPrior.h; roofit/roofit/src/RooJeffreysPrior.cxx. RooJeffreysPrior. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:77512,Guid,Guide,77512,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,1,['Guid'],['Guide']
Usability,"RooProfileLL() [3/3]. RooProfileLL::RooProfileLL ; (; const RooProfileLL & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 73 of file RooProfileLL.cxx. Member Function Documentation. ◆ alwaysStartFromMin(). bool RooProfileLL::alwaysStartFromMin ; (; ); const. inline . Definition at line 31 of file RooProfileLL.h. ◆ bestFitObs(). const RooArgSet & RooProfileLL::bestFitObs ; (; ); const. Definition at line 98 of file RooProfileLL.cxx. ◆ bestFitParams(). const RooArgSet & RooProfileLL::bestFitParams ; (; ); const. Definition at line 89 of file RooProfileLL.cxx. ◆ Class(). static TClass * RooProfileLL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProfileLL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProfileLL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 70 of file RooProfileLL.h. ◆ clearAbsMin(). void RooProfileLL::clearAbsMin ; (; ). inline . Definition at line 42 of file RooProfileLL.h. ◆ clone(). TObject * RooProfileLL::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 28 of file RooProfileLL.h. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooProfileLL::createProfile ; (; const RooArgSet & ; paramsOfInterest). overridevirtual . Optimized implementation of createProfile for profile likelihoods. ; Return profile of original function in terms of stated parameters of interest rather than profiling recursively. ; Reimplemented from RooAbsReal.; Definition at line 112 of file RooProfileLL.cxx. ◆ DeclFileName(). static const char * RooProfileLL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 70 of file RooProfileLL.h. ◆ evaluate(). double RooProfileLL::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate profile likelihood by minimizing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:63000,clear,clearAbsMin,63000,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"RooRealSumFunc, and RooRealSumPdf.; Definition at line 384 of file RooAbsArg.h. ◆ changeServer(). void RooAbsArg::changeServer ; (; RooAbsArg & ; server, . bool ; valueProp, . bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50523,clear,clearShapeDirty,50523,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:2772,Simpl,SimpleLikelihoodRatioTestStat,2772,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutput; }. const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html:2772,Simpl,SimpleLikelihoodRatioTestStat,2772,root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"RooStudyPackage.cxx. ◆ initRandom(). Int_t RooStudyPackage::initRandom ; (; ). Choose random seed for this process in case pass a definite seed to have it deterministic use also worker number. ; Definition at line 177 of file RooStudyPackage.cxx. ◆ IsA(). TClass * RooStudyPackage::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file RooStudyPackage.h. ◆ processFile(). void RooStudyPackage::processFile ; (; const char * ; infile, . Int_t ; nexp . ). static . Read in study package. ; Definition at line 205 of file RooStudyPackage.cxx. ◆ run(). void RooStudyPackage::run ; (; Int_t ; nExperiments). Definition at line 101 of file RooStudyPackage.cxx. ◆ runOne(). void RooStudyPackage::runOne ; (; ). Definition at line 117 of file RooStudyPackage.cxx. ◆ Streamer(). void RooStudyPackage::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStudyPackage::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file RooStudyPackage.h. ◆ studies(). std::list< RooAbsStudy * > & RooStudyPackage::studies ; (; ). inline . Definition at line 36 of file RooStudyPackage.h. ◆ wspace(). RooWorkspace & RooStudyPackage::wspace ; (; ). inline . Definition at line 35 of file RooStudyPackage.h. Member Data Documentation. ◆ _studies. std::list<RooAbsStudy*> RooStudyPackage::_studies. protected . Definition at line 53 of file RooStudyPackage.h. ◆ _ws. RooWorkspace* RooStudyPackage::_ws = nullptr. protected . Definition at line 52 of file RooStudyPackage.h. Libraries for RooStudyPackage:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooStudyPackage.h; roofit/roofitcore/src/RooStudyPackage.cxx. RooStudyPackage. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyPackage.html:16497,Guid,Guide,16497,doc/master/classRooStudyPackage.html,https://root.cern,https://root.cern/doc/master/classRooStudyPackage.html,1,['Guid'],['Guide']
Usability,"RootBrowserLite.cxx. ◆ Checked(). void TRootBrowserLite::Checked ; (; TObject * ; obj, . Bool_t ; check . ). virtual . Emits signal when double clicking on icon. ; Definition at line 2562 of file TRootBrowserLite.cxx. ◆ CheckObjectItem(). void TRootBrowserLite::CheckObjectItem ; (; TObject * ; obj, . Bool_t ; check = kFALSE . ). overridevirtual . Check / uncheck the TGListTreeItem corresponding to this object and add a checkmark on TGLVEntry if check = kTRUE. ; Reimplemented from TBrowserImp.; Definition at line 1347 of file TRootBrowserLite.cxx. ◆ Class(). static TClass * TRootBrowserLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootBrowserLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootBrowserLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 165 of file TRootBrowserLite.h. ◆ ClearHistory(). void TRootBrowserLite::ClearHistory ; (; ). private . clear navigation history ; Definition at line 2301 of file TRootBrowserLite.cxx. ◆ CloseTabs(). void TRootBrowserLite::CloseTabs ; (; ). inlineoverridevirtual . Reimplemented from TBrowserImp.; Definition at line 131 of file TRootBrowserLite.h. ◆ CloseWindow(). void TRootBrowserLite::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 1578 of file TRootBrowserLite.cxx. ◆ CreateBrowser(). void TRootBrowserLite::CreateBrowser ; (; const char * ; name). private . Create the actual browser. ; Definition at line 977 of file TRootBrowserLite.cxx. ◆ DeclFileName(). static const char * TRootBrowserLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 165 of file TRootBrowserLite.h. ◆ DeleteListTreeItem(). void TRootBrowserLite::DeleteListTreeItem ; (; TGListTreeItem * ; item). private . delete list tree item, rem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:46643,Clear,ClearHistory,46643,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['Clear'],['ClearHistory']
Usability,"RotateYEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the y-convention. ; Definition at line 526 of file TRotation.cxx. ◆ RotateZ(). TRotation & TRotation::RotateZ ; (; Double_t ; a). Rotate around z. ; Definition at line 378 of file TRotation.cxx. ◆ SetToIdentity(). TRotation & TRotation::SetToIdentity ; (; ). inline . Definition at line 251 of file TRotation.h. ◆ SetXAxis() [1/2]. TRotation & TRotation::SetXAxis ; (; const TVector3 & ; axis). Set X axis. ; Definition at line 713 of file TRotation.cxx. ◆ SetXAxis() [2/2]. TRotation & TRotation::SetXAxis ; (; const TVector3 & ; axis, . const TVector3 & ; xyPlane . ). Set X axis. ; Definition at line 698 of file TRotation.cxx. ◆ SetXEulerAngles(). TRotation & TRotation::SetXEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the x-convention (Landau and Lifshitz, Goldstein, &c) by doing the explicit rotations. ; This is slightly less efficient than directly applying the rotation, but makes the code much clearer. My presumption is that this code is not going to be a speed bottle neck. ; Definition at line 488 of file TRotation.cxx. ◆ SetXPhi(). void TRotation::SetXPhi ; (; Double_t ; phi). Set XPhi. ; Definition at line 537 of file TRotation.cxx. ◆ SetXPsi(). void TRotation::SetXPsi ; (; Double_t ; psi). Set XPsi. ; Definition at line 551 of file TRotation.cxx. ◆ SetXTheta(). void TRotation::SetXTheta ; (; Double_t ; theta). Set XTheta. ; Definition at line 544 of file TRotation.cxx. ◆ SetYAxis() [1/2]. TRotation & TRotation::SetYAxis ; (; const TVector3 & ; axis). Set Y axis. ; Definition at line 736 of file TRotation.cxx. ◆ SetYAxis() [2/2]. TRotation & TRotation::SetYAxis ; (; const TVector3 & ; axis, . const TVector3 & ; yzPlane . ). Set Y axis. ; Definition at line 721 of file TRotation.cxx. ◆ SetYEulerAngles(). TRotation & TRotation::SetYEulerAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Rotate using the y-conven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:26536,clear,clearer,26536,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['clear'],['clearer']
Usability,"RotationMatrix[5] * fRotationMatrix[7] * fRotationMatrix[0] -; 1371 fRotationMatrix[8] * fRotationMatrix[1] * fRotationMatrix[3];; 1372 return det;; 1373}; 1374 ; 1375////////////////////////////////////////////////////////////////////////////////; 1376/// performes an orthogonality check and finds if the matrix is a reflection; 1377/// Warning(""CheckMatrix"", ""orthogonality check not performed yet"");; 1378 ; 1379void TGeoRotation::CheckMatrix(); 1380{; 1381 if (Determinant() < 0); 1382 SetBit(kGeoReflection);; 1383 Double_t dd = fRotationMatrix[0] + fRotationMatrix[4] + fRotationMatrix[8] - 3.;; 1384 if (TMath::Abs(dd) < 1.E-12); 1385 ResetBit(kGeoRotation);; 1386 else; 1387 SetBit(kGeoRotation);; 1388}; 1389 ; 1390////////////////////////////////////////////////////////////////////////////////; 1391/// Get the inverse rotation matrix (which is simply the transpose); 1392 ; 1393void TGeoRotation::GetInverse(Double_t *invmat) const; 1394{; 1395 if (!invmat) {; 1396 Error(""GetInverse"", ""no place to store the inverse matrix"");; 1397 return;; 1398 }; 1399 for (Int_t i = 0; i < 3; i++) {; 1400 for (Int_t j = 0; j < 3; j++) {; 1401 invmat[3 * i + j] = fRotationMatrix[3 * j + i];; 1402 }; 1403 }; 1404}; 1405 ; 1406////////////////////////////////////////////////////////////////////////////////; 1407/// Multiply this rotation with the one specified by ROT.; 1408/// - after=TRUE (default): THIS*ROT; 1409/// - after=FALSE : ROT*THIS; 1410 ; 1411void TGeoRotation::MultiplyBy(const TGeoRotation *rot, Bool_t after); 1412{; 1413 const Double_t *matleft, *matright;; 1414 SetBit(kGeoRotation);; 1415 Double_t newmat[9] = {0};; 1416 if (after) {; 1417 matleft = &fRotationMatrix[0];; 1418 matright = rot->GetRotationMatrix();; 1419 } else {; 1420 matleft = rot->GetRotationMatrix();; 1421 matright = &fRotationMatrix[0];; 1422 }; 1423 for (Int_t i = 0; i < 3; i++) {; 1424 for (Int_t j = 0; j < 3; j++) {; 1425 for (Int_t k = 0; k < 3; k++) {; 1426 newmat[3 * i + j] += matleft[3 * i + k] * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:50173,simpl,simply,50173,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['simpl'],['simply']
Usability,"Rule ; (; ). virtual . Destructor. ; Definition at line 100 of file TSchemaRule.cxx. ◆ TSchemaRule() [2/2]. TSchemaRule::TSchemaRule ; (; const TSchemaRule & ; rhs). Copy Constructor. ; Definition at line 112 of file TSchemaRule.cxx. Member Function Documentation. ◆ AsString(). void TSchemaRule::AsString ; (; TString & ; out, . const char * ; options = """" . ); const. Add to the string 'out' the string representation of the rule. ; if options contains: 's' : add the short form of the rule is possible 'x' : add the xml form of the rule ; Definition at line 218 of file TSchemaRule.cxx. ◆ Class(). static TClass * ROOT::TSchemaRule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TSchemaRule::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TSchemaRule::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file TSchemaRule.h. ◆ Clear(). void TSchemaRule::Clear ; (; Option_t * ; = """"). overridevirtual . Zero out this rule object. ; Reimplemented from TObject.; Definition at line 297 of file TSchemaRule.cxx. ◆ Conflicts(). Bool_t TSchemaRule::Conflicts ; (; const TSchemaRule * ; rule); const. Check if this rule conflicts with the given one. ; Definition at line 772 of file TSchemaRule.cxx. ◆ DeclFileName(). static const char * ROOT::TSchemaRule::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 120 of file TSchemaRule.h. ◆ GetAttributes(). const char * TSchemaRule::GetAttributes ; (; ); const. Get the attributes code of this rule. ; Definition at line 664 of file TSchemaRule.cxx. ◆ GetCode(). const char * TSchemaRule::GetCode ; (; ); const. Get the source code of this rule. ; Definition at line 648 of file TSchemaRule.cxx. ◆ GetEmbed(). Bool_t TSchemaRule::GetEmbed ; (; ); const. Return true if this rule should be saved in the ROOT File. ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:17812,Clear,Clear,17812,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['Clear'],['Clear']
Usability,"Rule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 36 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 26 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 25 of file RConversionRuleParser.h. ROOT. ROOT v6-20 - Reference Guide Generated on Fri Apr 1 2022 00:30:04 (GVA Time) using Doxygen 1.9.4   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v620/namespaceROOT.html:30009,Guid,Guide,30009,doc/v620/namespaceROOT.html,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"Rule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 36 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 26 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 25 of file RConversionRuleParser.h. ROOT. ROOT v6-22 - Reference Guide Generated on Fri Apr 1 2022 11:59:56 (GVA Time) using Doxygen 1.9.4   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:30753,Guid,Guide,30753,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"RuleEnsemble::CalcNRules ; (; const TMVA::DecisionTree * ; dtree). calculate the number of rules ; Definition at line 1253 of file RuleEnsemble.cxx. ◆ CalcRuleImportance(). Double_t TMVA::RuleEnsemble::CalcRuleImportance ; (; ). calculate importance of each rule ; Definition at line 435 of file RuleEnsemble.cxx. ◆ CalcRuleSupport(). void TMVA::RuleEnsemble::CalcRuleSupport ; (; ). calculate the support for all rules ; Definition at line 367 of file RuleEnsemble.cxx. ◆ CalcVarImportance(). void TMVA::RuleEnsemble::CalcVarImportance ; (; ). Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ; Definition at line 481 of file RuleEnsemble.cxx. ◆ CleanupLinear(). void TMVA::RuleEnsemble::CleanupLinear ; (; ). cleanup linear model ; Definition at line 352 of file RuleEnsemble.cxx. ◆ CleanupRules(). void TMVA::RuleEnsemble::CleanupRules ; (; ). cleanup rules ; Definition at line 325 of file RuleEnsemble.cxx. ◆ ClearCoefficients(). void TMVA::RuleEnsemble::ClearCoefficients ; (; Double_t ; val = 0). inline . Definition at line 119 of file RuleEnsemble.h. ◆ ClearLinCoefficients(). void TMVA::RuleEnsemble::ClearLinCoefficients ; (; Double_t ; val = 0). inline . Definition at line 120 of file RuleEnsemble.h. ◆ ClearLinNorm(). void TMVA::RuleEnsemble::ClearLinNorm ; (; Double_t ; val = 1.0). inline . Definition at line 121 of file RuleEnsemble.h. ◆ ClearRuleMap(). void TMVA::RuleEnsemble::ClearRuleMap ; (; ). inline . Definition at line 150 of file RuleEnsemble.h. ◆ CoefficientRadius(). Double_t TMVA::RuleEnsemble::CoefficientRadius ; (; ). Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ; Definition at line 198 of file RuleEnsemble.cxx. ◆ Copy(). void TMVA::RuleEnsemble::Copy ; (; RuleEnsemble const & ; other). private . copy function ; Definition at line 1226 of file RuleEnsemble.cxx. ◆ DeleteRules(). void TMVA::RuleEnsemble::DeleteRules ; (; ). inlineprivate . Definition at line 319 of file RuleEnsemble.h. ◆ DoFull(). Bool_t TMVA::Rul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:13763,Clear,ClearCoefficients,13763,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Clear'],['ClearCoefficients']
Usability,"RulesR__EXTERN SchemaRuleClassMap_t gReadRulesDefinition RConversionRuleParser.h:24; ROOT::SchemaRuleMap_tstd::map< std::string, std::string > SchemaRuleMap_tDefinition RConversionRuleParser.h:22; ROOT::HasValidDataMembersbool HasValidDataMembers(SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string)Check if given rule contains references to valid data members.Definition RConversionRuleParser.cxx:461; ROOT::GetRuleIncludesvoid GetRuleIncludes(std::list< std::string > &result)Get the list of includes specified in the shema rules.Definition RConversionRuleParser.cxx:855; ROOT::WriteReadRawRuleFuncvoid WriteReadRawRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""...Definition RConversionRuleParser.cxx:708; ROOT::ProcessReadRawPragmavoid ProcessReadRawPragma(const char *args, std::string &error_string)I am being called then a readraw pragma is encountered.Definition RConversionRuleParser.cxx:935; ROOT::gReadRawRulesR__EXTERN SchemaRuleClassMap_t gReadRawRulesDefinition RConversionRuleParser.h:25; ROOT::ParseRulebool ParseRule(std::string rule, ROOT::Internal::MembersMap_t &result, std::string &error_string)Parse the schema rule as specified in the LinkDef file.Definition RConversionRuleParser.cxx:103; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854; ROOT::Internal::TSchemaTypeDefinition TSchemaType.h:13; ROOT::Internal::TSchemaType::fDimensionsstd::string fDimensionsDefinition TSchemaType.h:18; ROOT::Internal::TSchemaType::fTypestd::string fTypeDefinition TSchemaType.h:17; lTLine lDefinition textangle.C:4; outputstatic void output(). corefoundationsrcRConversionRuleParser.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:43691,Guid,Guide,43691,doc/v632/RConversionRuleParser_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will find a number of conventions and tips for converting the existing source code to generate proper documentation.; How to generate the doxygen documentation; Developers may generate the documentation by hand to see the results of the current changes before committing them to the repository. The automatic daily Jenkins procedures will generate the complete set of documentation.; $ cd <root_sources>/documentation/doxygen ; $ make . The results are placed by default at ${HOME}/rootdoc/html. The file documentation/doxygen/Doxyfile can be edited to reduce the number of input files and thus reduce the time for generating the HTML pages. The property to be modified is INPUT = ../../<module>; General Guidelines; Classes and methods can be documented both in the .cxx and .h files. For the long descriptions of a class functionality and its methods we usually prefer the .cxx file.; Class documentation; The documentation for the class is in general located at the beginning of the .cxx file. The \class Doxygen command is mandatory otherwise Doxygen will not associate the comments to the proper class. The first sentence is a brief description of the class and will appear in all class listings. For an example see the TF2 class documentation:; /** \class TF2; A 2-Dim function with parameters;  ; TF2 graphics function is via the TH1 drawing functions.; Example of a function;  ; TF2 *f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();;  ; \image html tf2_function2.png; See TF1 class for the list of functions formats; */; Method documentation; Methods are documented just before the method/function is defined in the .cxx file. The use of \param[in] and \param[out] is encouraged to document the parameters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:2698,Guid,Guidelines,2698,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['Guid'],['Guidelines']
Usability,"Run the tests | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anythi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:1003,Guid,Guides,1003,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['Guid'],['Guides']
Usability,"Run/I"");; T->Branch(""Event"",&evt,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) run = 1;; else run = 2;; evt = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; ; // Draw with option goff and generate seven variables; Int_t n = T->Draw(""x:y:z:Run:Event:sin(x):cos(x)"",""Run==1"",""goff"");; printf(""The arrays' dimension is %d\n"",n);; ; // Retrieve variables 0, 5 et 6; Double_t *vx = T->GetVal(0);; Double_t *vxs = T->GetVal(5);; Double_t *vxc = T->GetVal(6);; ; // Create and draw graphs; TGraph *gs = new TGraph(n,vx,vxs);; TGraph *gc = new TGraph(n,vx,vxc);; gs->Draw(""ap"");; gc->Draw(""p"");; }; ; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gcOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void gcDefinition TGWin32VirtualXProxy.cxx:130; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; AuthorOlivier Couet ; Definition in file treegetval.C. tutorialstreetreegetval.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treegetval_8C.html:3291,Guid,Guide,3291,doc/master/treegetval_8C.html,https://root.cern,https://root.cern/doc/master/treegetval_8C.html,1,['Guid'],['Guide']
Usability,"S . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:3145,Guid,Guides,3145,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"SE); voidAddRoot(const char* string)MENU ; virtual voidAdjustPosition(); voidAdjustPosition(TGListTreeItem* item); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAllChildren(TGListTreeItem* item, Bool_t state); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; voidCheckItem(TGListTreeItem* item, Bool_t check = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearHighlighted(); virtual voidTGContainer::ClearViewPort(); virtual voidClicked(TGListTreeItem* entry, Int_t btn)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseItem(TGListTreeItem* item); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:2615,Clear,Clear,2615,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['Clear'],['Clear']
Usability,"SE, Int_t sqltype=-1, Int_t size=-1, Int_t length=-1, Int_t scale=-1, Int_t sign=-1);  normal constructor ;  ; virtual ~TSQLColumnInfo ();  ; Int_t GetLength () const;  ; Int_t GetScale () const;  ; Int_t GetSigned () const;  ; Int_t GetSize () const;  ; Int_t GetSQLType () const;  ; const char * GetTypeName () const;  ; TClass * IsA () const override;  ; Bool_t IsNullable () const;  ; Bool_t IsSigned () const;  ; Bool_t IsUnsigned () const;  ; void Print (Option_t *option="""") const override;  Prints column information to standard output. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnInfo.html:1476,Clear,Clear,1476,doc/master/classTSQLColumnInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnInfo.html,1,['Clear'],['Clear']
Usability,"SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the envi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:3272,simpl,simply,3272,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['simpl'],['simply']
Usability,"SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextButton::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTGTextButton::Init(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGedNameTextButton(const TEveGedNameTextButton&); TEveGedNameTextButton&operator=(const TEveGedNameTextButton&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedNameTextButton.html:16238,Clear,ClearFlags,16238,root/html528/TEveGedNameTextButton.html,https://root.cern,https://root.cern/root/html528/TEveGedNameTextButton.html,4,['Clear'],['ClearFlags']
Usability,"SK ^ 0x01d3191f). Definition at line 203 of file md5.inl. ◆ T59. #define T59   /* 0xa3014314 */ (T_MASK ^ 0x5cfebceb). Definition at line 204 of file md5.inl. ◆ T6. #define T6   (0x4787c62a). Definition at line 151 of file md5.inl. ◆ T60. #define T60   (0x4e0811a1). Definition at line 205 of file md5.inl. ◆ T61. #define T61   /* 0xf7537e82 */ (T_MASK ^ 0x08ac817d). Definition at line 206 of file md5.inl. ◆ T62. #define T62   /* 0xbd3af235 */ (T_MASK ^ 0x42c50dca). Definition at line 207 of file md5.inl. ◆ T63. #define T63   (0x2ad7d2bb). Definition at line 208 of file md5.inl. ◆ T64. #define T64   /* 0xeb86d391 */ (T_MASK ^ 0x14792c6e). Definition at line 209 of file md5.inl. ◆ T7. #define T7   /* 0xa8304613 */ (T_MASK ^ 0x57cfb9ec). Definition at line 152 of file md5.inl. ◆ T8. #define T8   /* 0xfd469501 */ (T_MASK ^ 0x02b96afe). Definition at line 153 of file md5.inl. ◆ T9. #define T9   (0x698098d8). Definition at line 154 of file md5.inl. ◆ T_MASK. #define T_MASK   ((md5_word_t)~0). Definition at line 145 of file md5.inl. Typedef Documentation. ◆ md5_byte_t. typedef unsigned char md5_byte_t. Definition at line 50 of file md5.inl. ◆ md5_state_t. typedef struct md5_state_s md5_state_t. ◆ md5_word_t. typedef unsigned int md5_word_t. Definition at line 51 of file md5.inl. Function Documentation. ◆ md5_append(). MD5_STATIC void md5_append ; (; md5_state_t * ; pms, . const md5_byte_t * ; data, . size_t ; nbytes . ). Definition at line 412 of file md5.inl. ◆ md5_finish(). MD5_STATIC void md5_finish ; (; md5_state_t * ; pms, . md5_byte_t ; digest[16] . ). Definition at line 450 of file md5.inl. ◆ md5_init(). MD5_STATIC void md5_init ; (; md5_state_t * ; pms). Definition at line 402 of file md5.inl. ◆ md5_process(). static void md5_process ; (; md5_state_t * ; pms, . const md5_byte_t * ; data . ). static . Definition at line 212 of file md5.inl. nethttpcivetwebmd5.inl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md5_8inl.html:13048,Guid,Guide,13048,doc/master/md5_8inl.html,https://root.cern,https://root.cern/doc/master/md5_8inl.html,1,['Guid'],['Guide']
Usability,"SLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ; (; const char * ; name). protected . Definition at line 207 of file GSLMultiRootFinder.cxx. ◆ Iterations(). int ROOT::Math::GSLMultiRootFinder::Iterations ; (; ); const. inline . Return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7925,Clear,ClearFunctions,7925,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['Clear'],['ClearFunctions']
Usability,"STL type. The concrete types are optimized; 36for element access.; 37*/; 38 ; 39class TGenVectorProxy : public TGenCollectionProxy {; 40public:; 41 // Standard Destructor; 42 TGenVectorProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c); 43 {; 44 }; 45 // Standard Destructor; 46 ~TGenVectorProxy() override; 47 {; 48 }; 49 // Return the address of the value at index 'idx'; 50 void* At(UInt_t idx) override; 51 {; 52 if ( fEnv && fEnv->fObject ) {; 53 fEnv->fIdx = idx;; 54 switch( idx ) {; 55 case 0:; 56 return fEnv->fStart = fFirst.invoke(fEnv);; 57 default:; 58 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 59 return ((char*)fEnv->fStart) + fValDiff*idx;; 60 }; 61 }; 62 Fatal(""TGenVectorProxy"",""At> Logic error - no proxy object set."");; 63 return nullptr;; 64 }; 65 // Call to delete/destruct individual item; 66 void DeleteItem(Bool_t force, void* ptr) const override; 67 {; 68 if ( force && ptr ) {; 69 if ( fVal->fProperties&kNeedDelete) {; 70 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 71 TPushPop helper(proxy,ptr);; 72 proxy->Clear(""force"");; 73 }; 74 fVal->DeleteItem(ptr);; 75 }; 76 }; 77};; 78 ; 79/**; 80\class TGenVectorBoolProxy; 81\ingroup IO; 82Local optimization class.; 83 ; 84Collection proxies get copied. On copy we switch the type of the; 85proxy to the concrete STL type. The concrete types are optimized; 86for element access.; 87*/; 88class TGenVectorBoolProxy : public TGenCollectionProxy {; 89 Bool_t fLastValue;; 90 ; 91public:; 92 TGenVectorBoolProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c), fLastValue(false); 93 {; 94 // Standard Constructor.; 95 }; 96 ~TGenVectorBoolProxy() override; 97 {; 98 // Standard Destructor.; 99 }; 100 void* At(UInt_t idx) override; 101 {; 102 // Return the address of the value at index 'idx'; 103 ; 104 // However we can 'take' the address of the content of std::vector<bool>.; 105 if ( fEnv && fEnv->fObject ) {; 106 auto vec = (std::vector<bool> *)(fEnv->fObject);; 107",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:2358,Clear,Clear,2358,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,STOGRAM1D ; kHISTOGRAM2D ; kLISTOFGRAPHS ; kLISTOFPOLYMARKERS3D ; kHISTOGRAM3D . Definition at line 32 of file TTreeDrawArgsParser.h. Constructor & Destructor Documentation. ◆ TTreeDrawArgsParser(). TTreeDrawArgsParser::TTreeDrawArgsParser ; (; ). Constructor - cleans all the class variables. ; Definition at line 30 of file TTreeDrawArgsParser.cxx. ◆ ~TTreeDrawArgsParser(). TTreeDrawArgsParser::~TTreeDrawArgsParser ; (; ). override . Destructor. ; Definition at line 38 of file TTreeDrawArgsParser.cxx. Member Function Documentation. ◆ Class(). static TClass * TTreeDrawArgsParser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeDrawArgsParser::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeDrawArgsParser::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file TTreeDrawArgsParser.h. ◆ ClearPrevious(). void TTreeDrawArgsParser::ClearPrevious ; (; ). protected . Resets all the variables of the class. ; Definition at line 53 of file TTreeDrawArgsParser.cxx. ◆ DeclFileName(). static const char * TTreeDrawArgsParser::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file TTreeDrawArgsParser.h. ◆ DefineType(). TTreeDrawArgsParser::EOutputType TTreeDrawArgsParser::DefineType ; (; ). protected . Put the type of the draw result into fOutputType and return it. ; Definition at line 266 of file TTreeDrawArgsParser.cxx. ◆ GetAdd(). bool TTreeDrawArgsParser::GetAdd ; (; ); const. inline . Definition at line 86 of file TTreeDrawArgsParser.h. ◆ GetDimension(). Int_t TTreeDrawArgsParser::GetDimension ; (; ); const. inline . Definition at line 87 of file TTreeDrawArgsParser.h. ◆ GetExp(). TString const & TTreeDrawArgsParser::GetExp ; (; ); const. inline . Definition at line 89 of file TTreeDrawArgsParser.h. ◆ GetIfSpecified(). Double_t TTreeDrawArgsPars,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:14918,Clear,ClearPrevious,14918,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['Clear'],['ClearPrevious']
Usability,"STool.cxx. ◆ autoClassNamePostFix(). const char * RooFactoryWSTool::autoClassNamePostFix ; (; ); const. inline . Definition at line 155 of file RooFactoryWSTool.h. ◆ checkIndex(). void RooFactoryWSTool::checkIndex ; (; UInt_t ; index). staticprotected . Definition at line 1516 of file RooFactoryWSTool.cxx. ◆ checkSyntax(). bool RooFactoryWSTool::checkSyntax ; (; const char * ; arg). protected . Perform basic syntax on given factory expression. ; If function returns true syntax errors are found. ; Definition at line 1481 of file RooFactoryWSTool.cxx. ◆ Class(). static TClass * RooFactoryWSTool::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooFactoryWSTool::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooFactoryWSTool::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 199 of file RooFactoryWSTool.h. ◆ clearError(). void RooFactoryWSTool::clearError ; (; ). inlineprotected . Associated workspace. ; Definition at line 192 of file RooFactoryWSTool.h. ◆ createArg(). RooAbsArg * RooFactoryWSTool::createArg ; (; const char * ; className, . const char * ; objName, . const char * ; varList . ). Low-level factory interface for creating a RooAbsPdf of a given class with a given list of input variables The variable list varList should be of the form ""a,b,c"" where the interpretation of the argument is dependent on the pdf. ; Set and List arguments can be passed by substituting a single argument with the form (a,b,c), i.e. one can set varList to ""x,(a0,a1,a2)"" to pass a RooAbsReal and a RooArgSet as arguments. ; Definition at line 280 of file RooFactoryWSTool.cxx. ◆ createCategory(). RooCategory * RooFactoryWSTool::createCategory ; (; const char * ; name, . const char * ; stateNameList = nullptr . ). Low-level factory interface for creating a RooCategory with a given list of state names. ; The State name list can be of the form ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:30180,clear,clearError,30180,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Constraint ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:45347,simpl,simple,45347,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['simpl'],['simple']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:42319,simpl,simple,42319,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['simpl'],['simple']
Usability,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:44581,simpl,simple,44581,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['simpl'],['simple']
Usability,"SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMemberStreamer() [1/3]. TMemberStreamer::TMemberStreamer ; (; ). inlineprotected . Definition at line 28 of file TMemberStreamer.h. ◆ TMemberStreamer() [2/3]. TMemberStreamer::TMemberStreamer ; (; MemberStreamerFunc_t ; pointer). inline . Definition at line 31 of file TMemberStreamer.h. ◆ TMemberStreamer() [3/3]. TMemberStreamer::TMemberStreamer ; (; const TMemberStreamer & ; rhs). inline . Definition at line 32 of file TMemberStreamer.h. ◆ ~TMemberStreamer(). virtual TMemberStreamer::~TMemberStreamer ; (; ). inlinevirtual . Definition at line 35 of file TMemberStreamer.h. Member Function Documentation. ◆ GetOnFileClass(). virtual const TClass * TMemberStreamer::GetOnFileClass ; (; ); const. inlinevirtual . Definition at line 38 of file TMemberStreamer.h. ◆ operator()(). virtual void TMemberStreamer::operator() ; (; TBuffer & ; b, . void * ; pmember, . Int_t ; size = 0 . ). inlinevirtual . Reimplemented in TConvertClonesArrayToProxy, TConvertMapToProxy, and TCollectionMemberStreamer.; Definition at line 40 of file TMemberStreamer.h. ◆ operator=(). TMemberStreamer & TMemberStreamer::operator= ; (; const TMemberStreamer & ; rhs). inline . Definition at line 33 of file TMemberStreamer.h. ◆ SetOnFileClass(). virtual void TMemberStreamer::SetOnFileClass ; (; const TClass * ; cl). inlinevirtual . Definition at line 37 of file TMemberStreamer.h. Member Data Documentation. ◆ fOnFileClass. TClassRef TMemberStreamer::fOnFileClass. private . Definition at line 51 of file TMemberStreamer.h. ◆ fStreamer. MemberStreamerFunc_t TMemberStreamer::fStreamer. private . Definition at line 50 of file TMemberStreamer.h. Libraries for TMemberStreamer:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TMemberStreamer.h. TMemberStreamer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemberStreamer.html:2881,Guid,Guide,2881,doc/master/classTMemberStreamer.html,https://root.cern,https://root.cern/doc/master/classTMemberStreamer.html,1,['Guid'],['Guide']
Usability,"SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Documentation. ◆ IPruneTool(). TMVA::IPruneTool::IPruneTool ; (; ). inline . Definition at line 107 of file IPruneTool.h. ◆ ~IPruneTool(). TMVA::IPruneTool::~IPruneTool ; (; ). virtual . Definition at line 58 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). virtual PruningInfo * TMVA::IPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). pure virtual . Implemented in TMVA::CostComplexityPruneTool, and TMVA::ExpectedErrorPruneTool. ◆ GetPruneStrength(). Double_t TMVA::IPruneTool::GetPruneStrength ; (; ); const. inline . Definition at line 90 of file IPruneTool.h. ◆ IsAutomatic(). Bool_t TMVA::IPruneTool::IsAutomatic ; (; ); const. inline . Definition at line 95 of file IPruneTool.h. ◆ SetAutomatic(). void TMVA::IPruneTool::SetAutomatic ; (; ). inline . Definition at line 94 of file IPruneTool.h. ◆ SetPruneStrength(). void TMVA::IPruneTool::SetPruneStrength ; (; Double_t ; alpha). inline . Definition at line 88 of file IPruneTool.h. Member Data Documentation. ◆ B. Double_t TMVA::IPruneTool::B. protected . Definition at line 104 of file IPruneTool.h. ◆ fPruneStrength. Double_t TMVA::IPruneTool::fPruneStrength. protected . ! regularization parameter in pruning ; Definition at line 101 of file IPruneTool.h. ◆ S. Double_t TMVA::IPruneTool::S. protected . Definition at line 104 of file IPruneTool.h. Libraries for TMVA::IPruneTool:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/IPruneTool.h; tmva/tmva/src/ExpectedErrorPruneTool.cxx. TMVAIPruneTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:3676,Guid,Guide,3676,doc/master/classTMVA_1_1IPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html,1,['Guid'],['Guide']
Usability,"SYS/etc/system.rootrc) and the prefix is the name of your script.; The default behavior of rootcling is to not link in (i.e. generate the dictionary for) any of the symbols. In particular, this means that the following lines are, in the general case, unnecessary.; #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;; This also means that linking the instantiation of a class template:; #pragma link C++ class mytemplate<int>;; ONLY links this specific class. You need to request the generation of the iterators explicitly.; See the documentation of rootcling for details how pragma can be used.; NOTE: You should not call ACLiC with a script that has a function called main().; 7.4.4 Intermediate Steps and Files; ACLiC executes two steps and a third one if needed. These are:. Calling rootcling to create a dictionary using rootcling.; Calling the compiler to build the shared library from the script.; If there are errors, it calls the compiler to build a dummy executable to clearly report unresolved symbols. ACLiC makes a shared library with a dictionary containing the classes and functions declared in the script. It also adds the classes and functions declared in included files with the same name as the script file and any of the following extensions: .h, .hh, .hpp, .hxx, .hPP, .hXX. This means that, by default, you cannot combine scripts from different files into one library by using #include statements; you will need to compile each script separately. In a future release, we plan to add the global variables declared in the script to the dictionary also. If you are curious about the specific calls, you can raise the ROOT debug level: gDebug=3 and ACLiC will print these steps. If you need to keep the intermediate files around, for example when debugging the script using gdb, use gDebug=7.; 7.4.5 Moving between Interpreter and Compiler; The best way to develop portable scripts is to make sure you can always run them with both, the int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:275205,clear,clearly,275205,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearly']
Usability,"Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchRef() [1/2]. TBranchRef::TBranchRef ; (; ). Default constructor. ; Definition at line 46 of file TBranchRef.cxx. ◆ TBranchRef() [2/2]. TBranchRef::TBranchRef ; (; TTree * ; tree). Main constructor called by TTree::BranchRef. ; Definition at line 55 of file TBranchRef.cxx. ◆ ~TBranchRef(). TBranchRef::~TBranchRef ; (; ). override . Typical destructor. ; Definition at line 87 of file TBranchRef.cxx. Member Function Documentation. ◆ Class(). static TClass * TBranchRef::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBranchRef::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBranchRef::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file TBranchRef.h. ◆ Clear(). void TBranchRef::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear entries in the TRefTable. ; Reimplemented from TObject.; Definition at line 95 of file TBranchRef.cxx. ◆ DeclFileName(). static const char * TBranchRef::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file TBranchRef.h. ◆ FillImpl(). Int_t TBranchRef::FillImpl ; (; ROOT::Internal::TBranchIMTHelper * ; imtHelper). overrideprivatevirtual . Fill the branch basket with the referenced objects parent numbers. ; Reimplemented from TBranch.; Definition at line 103 of file TBranchRef.cxx. ◆ FillLeavesImpl(). void TBranchRef::FillLeavesImpl ; (; TBuffer & ; b). protected . This function called by TBranch::Fill overloads TBranch::FillLeaves. ; Definition at line 176 of file TBranchRef.cxx. ◆ GetRefTable(). TRefTable * TBranchRef::GetRefTable ; (; ); const. inline . Definition at line 49 of file TBranchRef.h. ◆ IsA(). TClass * TBranchRef::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:29244,Clear,Clear,29244,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['Clear'],['Clear']
Usability,"SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult& other, const char* name); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; boolIsOneSided() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; boolIsTwoSided() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HypoTestInverterResult&operator=(const RooStats::HypoTestInverterResult& other); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:4756,Simpl,SimpleInterval,4756,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"SearchTreeNode::ReadContent ; (; std::stringstream & ; s). virtual . read events from node ; Implements TMVA::Node.; Definition at line 268 of file BinarySearchTreeNode.cxx. ◆ ReadDataRecord(). Bool_t TMVA::BinarySearchTreeNode::ReadDataRecord ; (; std::istream & ; is, . UInt_t ; tmva_Version_Code = 262657 . ). virtual . Read the data block. ; Implements TMVA::Node.; Definition at line 189 of file BinarySearchTreeNode.cxx. ◆ SetSelector(). void TMVA::BinarySearchTreeNode::SetSelector ; (; Short_t ; i). inline . set index of variable used for discrimination at this node ; Definition at line 84 of file BinarySearchTreeNode.h. ◆ Streamer(). virtual void TMVA::BinarySearchTreeNode::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::Node. ◆ StreamerNVirtual(). void TMVA::BinarySearchTreeNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file BinarySearchTreeNode.h. Member Data Documentation. ◆ fClass. UInt_t TMVA::BinarySearchTreeNode::fClass. private . Definition at line 114 of file BinarySearchTreeNode.h. ◆ fEventV. std::vector<Float_t> TMVA::BinarySearchTreeNode::fEventV. private . Definition at line 110 of file BinarySearchTreeNode.h. ◆ fSelector. Short_t TMVA::BinarySearchTreeNode::fSelector. private . index of variable used in node selection (decision tree) ; Definition at line 116 of file BinarySearchTreeNode.h. ◆ fTargets. std::vector<Float_t> TMVA::BinarySearchTreeNode::fTargets. private . Definition at line 111 of file BinarySearchTreeNode.h. ◆ fWeight. Float_t TMVA::BinarySearchTreeNode::fWeight. private . Definition at line 113 of file BinarySearchTreeNode.h. Libraries for TMVA::BinarySearchTreeNode:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BinarySearchTreeNode.h; tmva/tmva/src/BinarySearchTreeNode.cxx. TMVABinarySearchTreeNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:12120,Guid,Guide,12120,doc/master/classTMVA_1_1BinarySearchTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html,1,['Guid'],['Guide']
Usability,"Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRecorder Class ReferenceGUI » Events recorder. ; Class provides direct recorder/replayer interface for a user. ; See 'ROOT EVENT RECORDING SYSTEM' for more information about usage.; Implementation uses C++ design pattern State. Functionality of recorder is divided into 4 classes according to the current state of recorder.; Internally, there is a pointer to TRecorderState object. This object changes whenever state of recorder is changed. States of recorder are the following:. INACTIVE Implemented in TRecorderInactive class. Default state after TRecorder object is created.; RECORDING Implemented in TRecorderRecording class.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying); REPLAYING -> PAUSED via TRecorder::Pause (Pause replaying); PAUSED -> REPLAYIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:1081,Pause,Pause,1081,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Pause'],['Pause']
Usability,"Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::VirtualIntegratorMultiDim←. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::GSLMCIntegrator. ROOT::Math::VirtualIntegratorOneDim←. ROOT::Math::GSLIntegrator. ROOT::Math::GaussIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::WrappedMultiTF1. ROOT::Math::WrappedTF1. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FCNBase←. ROOT::Minuit2::FCNGradientBase; ←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FCNGradientBase←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::Minuit2Minimizer. ROOT::Minuit2::MnFumiliMinimize. ROOT::Minuit2::MnMigrad. ROOT::Minuit2::MnMinimize. ROOT::Minuit2::MnScan. ROOT::Minuit2::MnSimplex. ROOT::Minuit2::ModularFunctionMinimizer←. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::TArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<short,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> >. ROOT::TBranchProxyClassDescriptor. ROOT::TBranchProxyDescriptor. ROOT::TClaArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:4206,Simpl,SimplexMinimizer,4206,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,1,['Simpl'],['SimplexMinimizer']
Usability,"Seg(); TGeoTubeSeg(Double_t* params); TGeoTubeSeg(const TGeoTubeSeg&); TGeoTubeSeg(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); TGeoTubeSeg(const char* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); virtual~TGeoTubeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidAfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:2039,Clear,ClearThreadData,2039,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"Seg(Double_t* params); TGeoConeSeg(const TGeoConeSeg&); TGeoConeSeg(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t dz, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoConeSeg.html:1557,Clear,Clear,1557,root/html530/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html530/TGeoConeSeg.html,1,['Clear'],['Clear']
Usability,"Seg(Double_t* params); TGeoConeSeg(const TGeoConeSeg&); TGeoConeSeg(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoConeSeg.html:1557,Clear,Clear,1557,root/html532/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html532/TGeoConeSeg.html,1,['Clear'],['Clear']
Usability,"SelectPointer to selection formula; TStringfSelection; TStatus*fStatus; Long64_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 16:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDraw.html:8221,Clear,ClearFormula,8221,root/html534/TProofDraw.html,https://root.cern,https://root.cern/root/html534/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"SelectSearch(Bool_t value) const; voidSetSearchMethod(); voidSetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows). private:. TTableSorter(const TTableSorter&); TTableSorter&operator=(const TTableSorter&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfColDimensionsThe number of the dimensions for array (=-1 means it is a ""simple"" array); TStringfColName; Int_tfColOffset; Int_tfColSizeThe size of the selected column in bytes; TTable::EColumnTypefColTypedata type of the selected column; COMPAREMETHODfCompareMethodFunction to sort the original array; const char*fFirstParentRow! pointer to the internal array of TTable object;; Int_tfFirstRowfirst row of the table to be sorted; Int_t*fIndexArray""parsed"" indecis; Int_tfLastFoundThe index of the last found index within fSortIndex; TStringTNamed::fNameobject identifier; Int_tfNumberOfRowsnumber of rows of the table to be sorted; Long_tfParentRowSizeTo be filled from TTable::GetRowSize() method; const TTable*fParentTable!- the back pointer to the sorted table; SEARCHMETHODfSearchMethodFunction selected to search values; void**fSortIndexArray of pointers to columns of the sorted table; TStringTNamed::fTitleobject title; const Char_t*fsimpleArrayPointer to the ""simple"" array;. private:. TTableSorter::fValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTableSorter(); default ctor for RootCint dictionary. TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0). TTableSorter ctor sorts the input table along its column defined with colName. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:11921,simpl,simple,11921,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,2,['simpl'],['simple']
Usability,"Selectablevirtual void PopTopLevelSelectable()Does nothing, unless you implement your own picking.Definition TVirtualPad.cxx:184; TVirtualPad::SetCanvasvirtual void SetCanvas(TCanvas *c)=0; TVirtualPad::DeleteToolTipvirtual void DeleteToolTip(TObject *tip)=0; TVirtualPad::SetPhivirtual void SetPhi(Double_t phi=30)=0; TVirtualPad::SetCursorvirtual void SetCursor(ECursor cursor)=0; TVirtualPad::GetViewvirtual TView * GetView() const =0; TVirtualPad::CopyPixmapsvirtual void CopyPixmaps()=0; TVirtualPad::GetHighLightColorvirtual Color_t GetHighLightColor() const =0; TVirtualPad::GetLogxvirtual Int_t GetLogx() const =0; TVirtualPad::SetLogyvirtual void SetLogy(Int_t value=1)=0; TVirtualPad::GetBorderSizevirtual Short_t GetBorderSize() const =0; TVirtualPad::SetBorderModevirtual void SetBorderMode(Short_t bordermode)=0; TVirtualPad::GetEventYvirtual Int_t GetEventY() const =0; TVirtualPad::GetXlowNDCvirtual Double_t GetXlowNDC() const =0; TVirtualPad::GetVirtCanvasvirtual TVirtualPad * GetVirtCanvas() const =0; TVirtualPad::GetCanvasvirtual TCanvas * GetCanvas() const =0; TVirtualPad::HasCrosshairvirtual Bool_t HasCrosshair() const =0; TVirtualPad::IsEditablevirtual Bool_t IsEditable() const =0; TVirtualPad::AddFirstvirtual void AddFirst(TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE)=0; TVirtualPad::GetX1virtual Double_t GetX1() const =0; TVirtualPad::GetPrimitivevirtual TObject * GetPrimitive(const char *name) const =0; TVirtualPad::SetBorderSizevirtual void SetBorderSize(Short_t bordersize)=0; TVirtualPad::Clearvoid Clear(Option_t *option="""") override=0; TVirtualPad::SetNamevirtual void SetName(const char *name)=0; TVirtualPad::ResizePadvirtual void ResizePad(Option_t *option="""")=0; TVirtualPad::GetGridyvirtual Bool_t GetGridy() const =0; TVirtualPad::OpaqueMovingvirtual Bool_t OpaqueMoving() const =0; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualPad_8h_source.html:37840,Clear,Clearvoid,37840,doc/master/TVirtualPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualPad_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"SelectedSlot (Pixel_t pixel);  Slot for default color selsect. ;  ; void DoubleClickedSlot ();  Activated when user double click on objects on 3D scene. ;  ; void Draw (Option_t *option="""") override;  Check limits and draws nodes and links. ;  ; TCanvas * GetCanvas ();  ; Int_t GetColor (TStructNode *node);  Returns color form fColors for given ""node"". ;  ; TStructNodeProperty * GetDefaultColor ();  Return default color for nodes. ;  ; Bool_t GetLinksVisibility () const;  Returns true if links are visible, otherwise return false. ;  ; TStructNode * GetNodePtr () const;  Returns top node pointer. ;  ; void GLWidgetProcessedEventSlot (Event_t *event);  Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:1926,Undo,Undo,1926,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['Undo']
Usability,"Server::ESQLDataTypes. printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on . EnumeratorkSQL_NONE ; kSQL_CHAR ; kSQL_VARCHAR ; kSQL_INTEGER ; kSQL_FLOAT ; kSQL_DOUBLE ; kSQL_NUMERIC ; kSQL_BINARY ; kSQL_TIMESTAMP . Definition at line 60 of file TSQLServer.h. Constructor & Destructor Documentation. ◆ TSQLServer(). TSQLServer::TSQLServer ; (; ). inlineprotected . Definition at line 52 of file TSQLServer.h. ◆ ~TSQLServer(). virtual TSQLServer::~TSQLServer ; (; ). inlinevirtual . Definition at line 72 of file TSQLServer.h. Member Function Documentation. ◆ Class(). static TClass * TSQLServer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSQLServer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSQLServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TSQLServer.h. ◆ ClearError(). void TSQLServer::ClearError ; (; ). protected . reset error fields ; Definition at line 119 of file TSQLServer.cxx. ◆ Close(). virtual void TSQLServer::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ Commit(). Bool_t TSQLServer::Commit ; (; ). virtual . submit ""COMMIT"" query to database return kTRUE, if successful ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 160 of file TSQLServer.cxx. ◆ Connect(). TSQLServer * TSQLServer::Connect ; (; const char * ; db, . const char * ; uid, . const char * ; pw . ). static . The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ; Depending on the <dbms> the shared library (plugin) for the selected system will be loaded. When the connection could n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:14866,Clear,ClearError,14866,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['Clear'],['ClearError']
Usability,"ServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to hand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8626,Clear,Clear,8626,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['Clear'],['Clear']
Usability,"ServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. » Last changed: Fri Dec 2 14:26:56 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:5724,clear,clearOnRedirect,5724,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"ServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. » Last changed: Mon Jul 4 15:23:37 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:5388,clear,clearOnRedirect,5388,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"Session = session;; 1291 }; 1292}; 1293 ; 1294////////////////////////////////////////////////////////////////////////////////; 1295/// Empty the bracket content of a string.; 1296 ; 1297const char* TTreeViewer::EmptyBrackets(const char* name); 1298{; 1299 TString stripped(name);; 1300 if (!stripped.Contains(""["")) return name;; 1301 TString retstr(name);; 1302 TObjString *objstr;; 1303 Int_t index = 0;; 1304 while (stripped.Index(""["", index) != kNPOS) {; 1305 Int_t start = stripped.Index(""["", index);; 1306 Int_t end = stripped.Index(""]"", index);; 1307 if (end == kNPOS) {; 1308 objstr = new TObjString(retstr.Data());; 1309 fWidgets->Add(objstr);; 1310 return (objstr->String()).Data();; 1311 }; 1312 index = start+2;; 1313 retstr = stripped.Remove(start+1, end-start-1);; 1314 stripped = retstr;; 1315 }; 1316 objstr = new TObjString(retstr.Data());; 1317 fWidgets->Add(objstr);; 1318 return (objstr->String()).Data();; 1319}; 1320 ; 1321////////////////////////////////////////////////////////////////////////////////; 1322/// Clear the content of all items in the list view.; 1323 ; 1324void TTreeViewer::EmptyAll(); 1325{; 1326 fLVContainer->EmptyAll();; 1327}; 1328 ; 1329////////////////////////////////////////////////////////////////////////////////; 1330/// Empty the content of the selected expression.; 1331 ; 1332void TTreeViewer::Empty(); 1333{; 1334 void *p = nullptr;; 1335 TTVLVEntry *item = nullptr;; 1336 if ((item = (TTVLVEntry *) fLVContainer->GetNextSelected(&p)) == nullptr) {; 1337 Warning(""Empty"", ""No item selected."");; 1338 return;; 1339 }; 1340 ULong_t *itemType = (ULong_t *) item->GetUserData();; 1341 if (!(*itemType & kLTExpressionType)) {; 1342 Warning(""Empty"", ""Not expression type."");; 1343 return;; 1344 }; 1345 if (*itemType & kLTPackType) {; 1346 item->SetSmallPic(fClient->GetPicture(""pack-empty_t.xpm""));; 1347 item->SetTrueName("""");; 1348 return;; 1349 }; 1350 item->Empty();; 1351}; 1352 ; 1353////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:50423,Clear,Clear,50423,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:29156,feedback,feedback,29156,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['feedback'],['feedback']
Usability,SessionToken(). TS3HTTPRequest & TS3HTTPRequest::SetSessionToken ; (; const TString & ; token). inline . Definition at line 157 of file TS3HTTPRequest.h. ◆ SetTimeStamp(). TS3HTTPRequest & TS3HTTPRequest::SetTimeStamp ; (; ). protected . Sets this request's time stamp according to: http://code.google.com/apis/storage/docs/reference-headers.html#date. ; Definition at line 158 of file TS3HTTPRequest.cxx. ◆ Streamer(). void TS3HTTPRequest::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TS3HTTPRequest::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file TS3HTTPRequest.h. Member Data Documentation. ◆ fAccessKey. TString TS3HTTPRequest::fAccessKey. private . Definition at line 59 of file TS3HTTPRequest.h. ◆ fAuthType. EAuthType TS3HTTPRequest::fAuthType. private . Definition at line 54 of file TS3HTTPRequest.h. ◆ fBucket. TString TS3HTTPRequest::fBucket. private . Definition at line 56 of file TS3HTTPRequest.h. ◆ fHost. TString TS3HTTPRequest::fHost. private . Definition at line 55 of file TS3HTTPRequest.h. ◆ fObjectKey. TString TS3HTTPRequest::fObjectKey. private . Definition at line 57 of file TS3HTTPRequest.h. ◆ fSecretKey. TString TS3HTTPRequest::fSecretKey. private . Definition at line 60 of file TS3HTTPRequest.h. ◆ fSessionToken. TString TS3HTTPRequest::fSessionToken. private . Definition at line 61 of file TS3HTTPRequest.h. ◆ fTimeStamp. TString TS3HTTPRequest::fTimeStamp. private . Definition at line 58 of file TS3HTTPRequest.h. ◆ fVerb. EHTTPVerb TS3HTTPRequest::fVerb. private . Definition at line 53 of file TS3HTTPRequest.h. Libraries for TS3HTTPRequest:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TS3HTTPRequest.h; net/net/src/TS3HTTPRequest.cxx. TS3HTTPRequest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3HTTPRequest.html:20880,Guid,Guide,20880,doc/master/classTS3HTTPRequest.html,https://root.cern,https://root.cern/doc/master/classTS3HTTPRequest.html,1,['Guid'],['Guide']
Usability,"Set rendering of line. Propagate to projected lines. ; Definition at line 112 of file REveLine.cxx. ◆ SetRnrPoints(). void REveLine::SetRnrPoints ; (; Bool_t ; r). Set rendering of points. Propagate to projected lines. ; Definition at line 130 of file REveLine.cxx. ◆ SetSmooth(). void REveLine::SetSmooth ; (; Bool_t ; r). Set smooth rendering. Propagate to projected lines. ; Definition at line 148 of file REveLine.cxx. ◆ WriteCoreJson(). Int_t REveLine::WriteCoreJson ; (; nlohmann::json & ; j, . Int_t ; rnr_offset . ). overridevirtual . Write core json. ; If rnr_offset is negative, render data shall not be written. Returns number of bytes written into binary render data. ; Reimplemented from ROOT::Experimental::REveElement.; Reimplemented in ROOT::Experimental::REveTrack, and ROOT::Experimental::REveTrackProjected.; Definition at line 283 of file REveLine.cxx. ◆ WriteVizParams(). void REveLine::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from ROOT::Experimental::REveElement.; Reimplemented in ROOT::Experimental::REveTrack.; Definition at line 262 of file REveLine.cxx. Member Data Documentation. ◆ fgDefaultSmooth. Bool_t REveLine::fgDefaultSmooth = kFALSE. staticprotected . Definition at line 39 of file REveLine.hxx. ◆ fRnrLine. Bool_t ROOT::Experimental::REveLine::fRnrLine. protected . Definition at line 35 of file REveLine.hxx. ◆ fRnrPoints. Bool_t ROOT::Experimental::REveLine::fRnrPoints. protected . Definition at line 36 of file REveLine.hxx. ◆ fSmooth. Bool_t ROOT::Experimental::REveLine::fSmooth. protected . Definition at line 37 of file REveLine.hxx. Libraries for ROOT::Experimental::REveLine:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveLine.hxx; graf3d/eve7/src/REveLine.cxx. ROOTExperimentalREveLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:32346,Guid,Guide,32346,doc/master/classROOT_1_1Experimental_1_1REveLine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html,1,['Guid'],['Guide']
Usability,"Set& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3374,clear,clearValueDirty,3374,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,32,['clear'],['clearValueDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"Set& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7324,clear,clearShapeDirty,7324,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"SetArray::Size ; (; Bool_t ; under = kFALSE, . Bool_t ; over = kFALSE . ); const. Get the total number of filled points. ; 'under' and 'over' flags specify if under/overflow channels should be added to the sum. ; Definition at line 397 of file REvePointSet.cxx. Member Data Documentation. ◆ fBins. REvePointSet** ROOT::Experimental::REvePointSetArray::fBins {nullptr}. protected . Definition at line 104 of file REvePointSet.hxx. ◆ fBinWidth. Double_t ROOT::Experimental::REvePointSetArray::fBinWidth. protected . Definition at line 110 of file REvePointSet.hxx. ◆ fCurMax. Double_t ROOT::Experimental::REvePointSetArray::fCurMax. protected . Definition at line 109 of file REvePointSet.hxx. ◆ fCurMin. Double_t ROOT::Experimental::REvePointSetArray::fCurMin. protected . Definition at line 108 of file REvePointSet.hxx. ◆ fDefPointSetCapacity. Int_t ROOT::Experimental::REvePointSetArray::fDefPointSetCapacity. protected . Definition at line 105 of file REvePointSet.hxx. ◆ fLastBin. Int_t ROOT::Experimental::REvePointSetArray::fLastBin. protected . Definition at line 107 of file REvePointSet.hxx. ◆ fMax. Double_t ROOT::Experimental::REvePointSetArray::fMax. protected . Definition at line 109 of file REvePointSet.hxx. ◆ fMin. Double_t ROOT::Experimental::REvePointSetArray::fMin. protected . Index of the last filled REvePointSet. ; Definition at line 108 of file REvePointSet.hxx. ◆ fNBins. Int_t ROOT::Experimental::REvePointSetArray::fNBins. protected . Definition at line 106 of file REvePointSet.hxx. ◆ fQuantName. std::string ROOT::Experimental::REvePointSetArray::fQuantName. protected . Definition at line 111 of file REvePointSet.hxx. Libraries for ROOT::Experimental::REvePointSetArray:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REvePointSet.hxx; graf3d/eve7/src/REvePointSet.cxx. ROOTExperimentalREvePointSetArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:26854,Guid,Guide,26854,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,1,['Guid'],['Guide']
Usability,"SetComponents(IT begin, IT end)Set the four components given an iterator to the start of the desired data, and another to the end (4...Definition Quaternion.h:113; ROOT::Math::Quaternion::JScalar J() constDefinition Quaternion.h:169; ROOT::Math::Quaternion::Invertvoid Invert()Invert a rotation in place.Definition Quaternion.h:250; ROOT::Math::Rotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix.Definition Rotation3D.h:67; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle p...Definition RotationZYX.h:63; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; R; double; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::gv_detail::convertvoid convert(R1 const &, R2 const)Definition 3DConversions.h:41; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOT::Math::ScalarRotation3D::Scalar ScalarDefinition Rotation3DxAxial.cxx:69; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorincMathGenVectorQuaternion.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2Quaternion_8h_source.html:18596,Guid,Guide,18596,doc/master/GenVector_2Quaternion_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2Quaternion_8h_source.html,1,['Guid'],['Guide']
Usability,SetDlg::fBrowseButton. private . Definition at line 128 of file TSessionDialogs.h. ◆ fClearButton. TGTextButton* TUploadDataSetDlg::fClearButton. private . Definition at line 130 of file TSessionDialogs.h. ◆ fCloseDlgButton. TGTextButton* TUploadDataSetDlg::fCloseDlgButton. private . Definition at line 135 of file TSessionDialogs.h. ◆ fDestinationURL. TGTextEntry* TUploadDataSetDlg::fDestinationURL. private . Definition at line 123 of file TSessionDialogs.h. ◆ fDSetName. TGTextEntry* TUploadDataSetDlg::fDSetName. private . Definition at line 122 of file TSessionDialogs.h. ◆ fListView. TGListView* TUploadDataSetDlg::fListView. private . Definition at line 125 of file TSessionDialogs.h. ◆ fLocationURL. TGTextEntry* TUploadDataSetDlg::fLocationURL. private . Definition at line 124 of file TSessionDialogs.h. ◆ fLVContainer. TGLVContainer* TUploadDataSetDlg::fLVContainer. private . Definition at line 126 of file TSessionDialogs.h. ◆ fOverwriteDSet. TGCheckButton* TUploadDataSetDlg::fOverwriteDSet. private . Definition at line 131 of file TSessionDialogs.h. ◆ fOverwriteFiles. TGCheckButton* TUploadDataSetDlg::fOverwriteFiles. private . Definition at line 132 of file TSessionDialogs.h. ◆ fRemoveButton. TGTextButton* TUploadDataSetDlg::fRemoveButton. private . Definition at line 129 of file TSessionDialogs.h. ◆ fSkippedFiles. TList* TUploadDataSetDlg::fSkippedFiles. private . Definition at line 121 of file TSessionDialogs.h. ◆ fUploadButton. TGTextButton* TUploadDataSetDlg::fUploadButton. private . Definition at line 134 of file TSessionDialogs.h. ◆ fUploading. Bool_t TUploadDataSetDlg::fUploading. private . Definition at line 120 of file TSessionDialogs.h. ◆ fViewer. TSessionViewer* TUploadDataSetDlg::fViewer. private . Definition at line 136 of file TSessionDialogs.h. gui/sessionviewer/inc/TSessionDialogs.h; gui/sessionviewer/src/TSessionDialogs.cxx. TUploadDataSetDlg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUploadDataSetDlg.html:43243,Guid,Guide,43243,doc/master/classTUploadDataSetDlg.html,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html,1,['Guid'],['Guide']
Usability,"SetEditor, TEveTextEditor, TEveTrackEditor, TEveTrackListEditor, TEveTrackPropagatorEditor, TEveTransEditor, TEveTriangleSetEditor, TEveViewerListEditor, TEveWindowEditor, TGL5DDataSetEditor, TGLClipSetEditor, TGLLightSetEditor, TGLPShapeObjEditor, TGLViewerEditor, TStructNodeEditor, TArrowEditor, TAttFillEditor, TAttLineEditor, TAttMarkerEditor, TAttTextEditor, TAxisEditor, TCurlyArcEditor, TCurlyLineEditor, TF1Editor, TFrameEditor, TGedNameFrame, TGraphEditor, TH1Editor, TH2Editor, TLineEditor, TPadEditor, TPaveStatsEditor, TParallelCoordEditor, and TSpiderEditor. ◆ SetModelClass(). void TGedFrame::SetModelClass ; (; TClass * ; mcl). inline . Definition at line 78 of file TGedFrame.h. ◆ Update(). void TGedFrame::Update ; (; ). virtual . Update the current pad when an attribute is changed via GUI. ; Reimplemented in TGeoGedFrame, and TStructNodeEditor.; Definition at line 72 of file TGedFrame.cxx. Member Data Documentation. ◆ fAvoidSignal. Bool_t TGedFrame::fAvoidSignal. protected . flag for executing slots ; Definition at line 50 of file TGedFrame.h. ◆ fExtraTabs. TList* TGedFrame::fExtraTabs. protected . addtional tabs in ged editor ; Definition at line 52 of file TGedFrame.h. ◆ fGedEditor. TGedEditor* TGedFrame::fGedEditor. protected . manager of this frame ; Definition at line 48 of file TGedFrame.h. ◆ fInit. Bool_t TGedFrame::fInit. protected . init flag for setting signals/slots ; Definition at line 47 of file TGedFrame.h. ◆ fModelClass. TClass* TGedFrame::fModelClass. protected . class corresponding to instantiated GedFrame ; Definition at line 49 of file TGedFrame.h. ◆ fPriority. Int_t TGedFrame::fPriority. protected . location in GedEditor ; Definition at line 53 of file TGedFrame.h. Libraries for TGedFrame:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TGedFrame.h; gui/ged/src/TGedFrame.cxx. TGedFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame.html:38383,Guid,Guide,38383,doc/master/classTGedFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame.html,1,['Guid'],['Guide']
Usability,"SetMatrix(newpos);; 2308 }; 2309 // Replace nodeorig with new one; 2310 fNodes->RemoveAt(ind);; 2311 fNodes->AddAt(newnode, ind);; 2312 if (fVoxels); 2313 fVoxels->SetNeedRebuild();; 2314 if (IsAssembly()); 2315 fShape->ComputeBBox();; 2316 return newnode;; 2317}; 2318 ; 2319////////////////////////////////////////////////////////////////////////////////; 2320/// Select this volume as matching an arbitrary criteria. The volume is added to; 2321/// a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; 2322/// to be reset at the end by calling the method with CLEAR=true. This will also clear; 2323/// the list.; 2324 ; 2325void TGeoVolume::SelectVolume(Bool_t clear); 2326{; 2327 static TObjArray array(256);; 2328 static Int_t len = 0;; 2329 Int_t i;; 2330 TObject *vol;; 2331 if (clear) {; 2332 for (i = 0; i < len; i++) {; 2333 vol = array.At(i);; 2334 vol->ResetBit(TGeoVolume::kVolumeSelected);; 2335 }; 2336 array.Clear();; 2337 len = 0;; 2338 return;; 2339 }; 2340 SetBit(TGeoVolume::kVolumeSelected);; 2341 array.AddAtAndExpand(this, len++);; 2342}; 2343 ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// set visibility of this volume; 2346 ; 2347void TGeoVolume::SetVisibility(Bool_t vis); 2348{; 2349 TGeoAtt::SetVisibility(vis);; 2350 if (fGeoManager->IsClosed()); 2351 SetVisTouched(kTRUE);; 2352 fGeoManager->SetVisOption(4);; 2353 TSeqCollection *brlist = gROOT->GetListOfBrowsers();; 2354 TIter next(brlist);; 2355 TBrowser *browser = nullptr;; 2356 while ((browser = (TBrowser *)next())) {; 2357 browser->CheckObjectItem(this, vis);; 2358 browser->Refresh();; 2359 }; 2360}; 2361 ; 2362////////////////////////////////////////////////////////////////////////////////; 2363/// Set visibility for containers.; 2364 ; 2365void TGeoVolume::SetVisContainers(Bool_t flag); 2366{; 2367 TGeoAtt::SetVisContainers(flag);; 2368 if (fGeoManager && fGeoManager->IsClosed()) {; 2369 if (flag); 2370 fGeoManager->SetVisOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:86604,Clear,Clear,86604,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Clear'],['Clear']
Usability,SetMatrixTransform(Bool_t on = kTRUE); {fMatrixTransform = on;}. void SetMatrixReflection(Bool_t flag = kTRUE); {fMatrixReflection = flag;}. void SetStep(Double_t step); {GetCurrentNavigator()->SetStep(step);}. Bool_t IsCurrentOverlapping() const; {return GetCurrentNavigator()->IsCurrentOverlapping();}. Bool_t IsEntering() const; {return GetCurrentNavigator()->IsEntering();}. Bool_t IsExiting() const; {return GetCurrentNavigator()->IsExiting();}. Bool_t IsStepEntering() const; {return GetCurrentNavigator()->IsStepEntering();}. Bool_t IsStepExiting() const; {return GetCurrentNavigator()->IsStepExiting();}. Bool_t IsOutside() const; {return GetCurrentNavigator()->IsOutside();}. Bool_t IsOnBoundary() const; {return GetCurrentNavigator()->IsOnBoundary();}. Bool_t IsNullStep() const; {return GetCurrentNavigator()->IsNullStep();}. Bool_t IsActivityEnabled() const; {return fActivity;}. void SetOutside(Bool_t flag = kTRUE); {GetCurrentNavigator()->SetOutside(flag);}. void ClearTracks(); {fTracks->Delete(); fNtracks=0;}. UChar_t * GetBits(); {return fBits;}. Int_t GetMaxThreads() const; {return fMaxThreads-1;}. void SetMultiThread(Bool_t flag = kTRUE); {fMultiThread = flag;}. Bool_t IsMultiThread() const; {return fMultiThread;}. Bool_t IsStreamingVoxels() const; {return fStreamVoxels;}. Bool_t IsCleaning() const; {return fIsGeomCleaning;}. TObjArray * GetListOfNodes(); --- list getters. {return fNodes;}. TObjArray * GetListOfPhysicalNodes(); {return fPhysicalNodes;}. TObjArray * GetListOfOverlaps(); {return fOverlaps;}. TObjArray * GetListOfMatrices() const; {return fMatrices;}. TList * GetListOfMaterials() const; {return fMaterials;}. TList * GetListOfMedia() const; {return fMedia;}. TObjArray * GetListOfVolumes() const; {return fVolumes;}. TObjArray * GetListOfGVolumes() const; {return fGVolumes;}. TObjArray * GetListOfShapes() const; {return fShapes;}. TObjArray * GetListOfGShapes() const; {return fGShapes;}. TObjArray * GetListOfUVolumes() const; {return fUniqueVolumes;},MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:76533,Clear,ClearTracks,76533,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['Clear'],['ClearTracks']
Usability,SetMatrixTransform(Bool_t on = kTRUE); {fMatrixTransform = on;}. void SetMatrixReflection(Bool_t flag = kTRUE); {fMatrixReflection = flag;}. void SetStep(Double_t step); {GetCurrentNavigator()->SetStep(step);}. Bool_t IsCurrentOverlapping() const; {return GetCurrentNavigator()->IsCurrentOverlapping();}. Bool_t IsEntering() const; {return GetCurrentNavigator()->IsEntering();}. Bool_t IsExiting() const; {return GetCurrentNavigator()->IsExiting();}. Bool_t IsStepEntering() const; {return GetCurrentNavigator()->IsStepEntering();}. Bool_t IsStepExiting() const; {return GetCurrentNavigator()->IsStepExiting();}. Bool_t IsOutside() const; {return GetCurrentNavigator()->IsOutside();}. Bool_t IsOnBoundary() const; {return GetCurrentNavigator()->IsOnBoundary();}. Bool_t IsNullStep() const; {return GetCurrentNavigator()->IsNullStep();}. Bool_t IsActivityEnabled() const; {return fActivity;}. void SetOutside(Bool_t flag = kTRUE); {GetCurrentNavigator()->SetOutside(flag);}. void ClearTracks(); {fTracks->Delete(); fNtracks=0;}. UChar_t * GetBits(); {return fBits;}. void SetMultiThread(Bool_t flag = kTRUE); {fMultiThread = flag;}. Bool_t IsMultiThread() const; {return fMultiThread;}. void SetNavigatorsLock(Bool_t flag); {fgLockNavigators = flag;}. Int_t GetNumThreads(); {return fgNumThreads;}. Bool_t IsStreamingVoxels() const; {return fStreamVoxels;}. TObjArray * GetListOfNodes(); --- list getters. {return fNodes;}. TObjArray * GetListOfPhysicalNodes(); {return fPhysicalNodes;}. TObjArray * GetListOfOverlaps(); {return fOverlaps;}. TObjArray * GetListOfMatrices() const; {return fMatrices;}. TList * GetListOfMaterials() const; {return fMaterials;}. TList * GetListOfMedia() const; {return fMedia;}. TObjArray * GetListOfVolumes() const; {return fVolumes;}. TObjArray * GetListOfGVolumes() const; {return fGVolumes;}. TObjArray * GetListOfShapes() const; {return fShapes;}. TObjArray * GetListOfGShapes() const; {return fGShapes;}. TObjArray * GetListOfUVolumes() const; {return fUniqueVolum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:74560,Clear,ClearTracks,74560,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['Clear'],['ClearTracks']
Usability,SetMinMax(). void TGLTH3Slice::SetMinMax ; (; const Rgl::Range_t & ; newRange). inline . Definition at line 135 of file TGLPlotPainter.h. ◆ SetSliceWidth(). void TGLTH3Slice::SetSliceWidth ; (; Int_t ; width = 1). Set Slice width. ; Definition at line 1734 of file TGLPlotPainter.cxx. ◆ Streamer(). void TGLTH3Slice::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGLTH3Slice::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 152 of file TGLPlotPainter.h. Member Data Documentation. ◆ fAxis. const TAxis* TGLTH3Slice::fAxis. private . Definition at line 105 of file TGLPlotPainter.h. ◆ fAxisType. ESliceAxis TGLTH3Slice::fAxisType. private . Definition at line 104 of file TGLPlotPainter.h. ◆ fBox. const TGLPlotBox* TGLTH3Slice::fBox. private . Definition at line 109 of file TGLPlotPainter.h. ◆ fCoord. const TGLPlotCoordinates* TGLTH3Slice::fCoord. private . Definition at line 108 of file TGLPlotPainter.h. ◆ fF3. const TF3* TGLTH3Slice::fF3. private . Definition at line 113 of file TGLPlotPainter.h. ◆ fHist. const TH3* TGLTH3Slice::fHist. private . Definition at line 112 of file TGLPlotPainter.h. ◆ fMinMax. Rgl::Range_t TGLTH3Slice::fMinMax. mutableprivate . Definition at line 117 of file TGLPlotPainter.h. ◆ fPalette. TGLLevelPalette TGLTH3Slice::fPalette. mutableprivate . Definition at line 106 of file TGLPlotPainter.h. ◆ fSliceWidth. Int_t TGLTH3Slice::fSliceWidth. private . Definition at line 110 of file TGLPlotPainter.h. ◆ fTexCoords. TGL2DArray<Double_t> TGLTH3Slice::fTexCoords. mutableprivate . Definition at line 115 of file TGLPlotPainter.h. Libraries for TGLTH3Slice:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLPlotPainter.h; graf3d/gl/src/TGLPlotPainter.cxx. TGLTH3Slice. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Slice.html:17262,Guid,Guide,17262,doc/master/classTGLTH3Slice.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Slice.html,1,['Guid'],['Guide']
Usability,"SetMinimum(minimum);; 1350 }; 1351 if (maximum == -1111) {; 1352 maximum = theGraph->GetHistogram()->GetYaxis()->GetXmax();; 1353 theGraph->GetHistogram()->SetMaximum(maximum);; 1354 }; 1355 uxmin = gPad->PadtoX(rwxmin);; 1356 uxmax = gPad->PadtoX(rwxmax);; 1357 } else {; 1358 ; 1359 theGraph->ComputeRange(rwxmin, rwymin, rwxmax, rwymax); //this is redefined in TGraphErrors; 1360 ; 1361 if (rwxmin == rwxmax) rwxmax += 1.;; 1362 if (rwymin == rwymax) rwymax += 1.;; 1363 dx = 0.1*(rwxmax-rwxmin);; 1364 dy = 0.1*(rwymax-rwymin);; 1365 uxmin = rwxmin - dx;; 1366 uxmax = rwxmax + dx;; 1367 minimum = rwymin - dy;; 1368 maximum = rwymax + dy;; 1369 }; 1370 if (theGraph->GetMinimum() != -1111) rwymin = minimum = theGraph->GetMinimum();; 1371 if (theGraph->GetMaximum() != -1111) rwymax = maximum = theGraph->GetMaximum();; 1372 if (uxmin < 0 && rwxmin >= 0) uxmin = 0.9*rwxmin;; 1373 if (uxmax > 0 && rwxmax <= 0) {; 1374 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1375 else uxmax = 0;; 1376 }; 1377 if (minimum < 0 && rwymin >= 0) minimum = 0.9*rwymin;; 1378 if (maximum > 0 && rwymax <= 0) {; 1379 //if(gPad->GetLogy()) maximum = 1.1*rwymax;; 1380 //else maximum = 0;; 1381 }; 1382 if (minimum <= 0 && gPad->GetLogy()) minimum = 0.001*maximum;; 1383 if (uxmin <= 0 && gPad->GetLogx()) {; 1384 if (uxmax > 1000) uxmin = 1;; 1385 else uxmin = 0.001*uxmax;; 1386 }; 1387 rwymin = minimum;; 1388 rwymax = maximum;; 1389 ; 1390 // Create a temporary histogram and fill each bin with the; 1391 // function value.; 1392 char chopth[8] = "" "";; 1393 if (strstr(chopt,""x+"")) strncat(chopth, ""x+"",3);; 1394 if (strstr(chopt,""y+"")) strncat(chopth, ""y+"",3);; 1395 if (optionIAxis) strncat(chopth, ""A"",2);; 1396 if (!theGraph->GetHistogram()) {; 1397 // the graph is created with at least as many bins as there are; 1398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = 100;; 1402 if (theNpoints > npt) npt = theNpoints;; 1403 TH1F *h = new TH1F(TString::Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:50789,ux,uxmax,50789,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:27962,learn,learning,27962,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['learn'],['learning']
Usability,"SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParent(const TObject *parent)TKeyvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() const overrideTKeyvirtual; Streamer(TBuffer &) overrideTKeyvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TKeyinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TKey(const TKey &)=deleteTKeyprivate; TKey()TKey; TKey(TDirectory *motherDir)TKey; TKey(TDirectory *motherDir, const TKey &orig, UShort_t pidOffset)TKey; TKey(const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir)TKey; TKey(const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory *motherDir)TKey; TKey(const TObject *obj, const char *name, Int_t bufsize, TDirectory *motherDir)TKey; TKey(const void *obj, const TClass *cl, const char *name, Int_t bufsize, TDirectory *motherDir)TKey; TKey(Long64_t pointer, Int_t nbytes, TDirectory *motherDir=nullptr)TKey; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteFile(Int_t cycle=1, TFile *f=nullptr)TKeyvirtual; WriteFileKeepBuffer(TFile *f=nullptr)TKeyprotectedvirtual; ~TKey() overrideTKey; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey-members.html:8069,Guid,Guide,8069,doc/master/classTKey-members.html,https://root.cern,https://root.cern/doc/master/classTKey-members.html,1,['Guid'],['Guide']
Usability,"SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::SetContourvirtual void SetContour(Int_t nlevels=20, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TF2.cxx:892; TF2::SetNpyvirtual void SetNpy(Int_t npy=100)Set the number of points used to draw the function.Definition TF2.cxx:927; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/waves_8C.html:6708,simpl,simple,6708,doc/master/waves_8C.html,https://root.cern,https://root.cern/doc/master/waves_8C.html,1,['simpl'],['simple']
Usability,"SetParNames (const char *name0=""p0"", const char *name1=""p1"", const char *name2=""p2"", const char *name3=""p3"", const char *name4=""p4"", const char *name5=""p5"", const char *name6=""p6"", const char *name7=""p7"", const char *name8=""p8"", const char *name9=""p9"", const char *name10=""p10"");  Set up to 11 parameter names. ;  ; void Streamer (TBuffer &b, const TClass *onfile_class);  Stream a class object. ;  ; void Streamer (TBuffer &b, Int_t version, UInt_t start, UInt_t count, const TClass *onfile_class=nullptr);  specialized streamer function being able to read old TF1 versions as TF1Old in memory ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:9321,Clear,Clear,9321,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Clear'],['Clear']
Usability,"SetSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fSize = size; }. void SetTypeSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fTypeSize = size; }. void SetDimensions(UInt_t dim, Int_t column); {((tableDescriptor_st *)At(column))->fDimensions = dim; }. void SetColumnType(TTable::EColumnType type, Int_t column); {((tableDescriptor_st *)At(column))->fType = type; }. TTableDescriptor & operator=(const TTableDescriptor& dsc). void Init(TClass* classPtr). void SetCommentsSetName(const char* name = "".comments""). TTableDescriptor(const TTable* parentTable). TTableDescriptor(TClass* classPtr). TTableDescriptor(const TTableDescriptor& dsc); {}. virtual ~TTableDescriptor(). Int_t AddAt(const void* c). void AddAt(const void* c, Int_t i). void AddAt(const tableDescriptor_st& element, const char* comment, Int_t indx). void AddAt(TDataSet* dataset, Int_t idx = 0). TString CreateLeafList() const. void LearnTable(const TTable* parentTable). void LearnTable(TClass* classPtr). Int_t ColumnByName(const Char_t* columnName = 0) const. UInt_t Offset(Int_t column) const. UInt_t ColumnSize(Int_t column) const. UInt_t TypeSize(Int_t column) const. UInt_t Dimensions(Int_t column) const. Int_t Sizeof() const. Int_t UpdateOffsets(const TTableDescriptor* newDesciptor). TTableDescriptor * MakeDescriptor(const char* structName). TDataSet * MakeCommentField(Bool_t createFlag = kTRUE). TTableDescriptor * GetDescriptorPointer() const. void SetDescriptorPointer(TTableDescriptor* list). TTableDescriptor(); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name); {SetType(""tableDescriptor_st"");}. TTableDescriptor(Int_t n); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name, Int_t n); {SetType(""tableDescriptor_st"");}. tableDescriptor_st * GetTable(Int_t i = 0) const; { return ((tableDescriptor_st *)GetArray())+i;}. tableDescriptor_st & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); return *GetTable(i); }. const tableDescri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableDescriptor.html:17591,Learn,LearnTable,17591,root/html534/TTableDescriptor.html,https://root.cern,https://root.cern/root/html534/TTableDescriptor.html,1,['Learn'],['LearnTable']
Usability,"SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TGraph*fGraph; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawGraph.html:5630,Clear,ClearFormula,5630,root/html528/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html528/TProofDrawGraph.html,1,['Clear'],['ClearFormula']
Usability,"SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawListOfGraphs.html:5672,Clear,ClearFormula,5672,root/html528/TProofDrawListOfGraphs.html,https://root.cern,https://root.cern/root/html528/TProofDrawListOfGraphs.html,5,['Clear'],['ClearFormula']
Usability,SetVisLevel ; (; Int_t ; vl). inline . Definition at line 112 of file TEveGeoNode.h. ◆ SetVisOption(). void TEveGeoTopNode::SetVisOption ; (; Int_t ; vo). inline . Definition at line 110 of file TEveGeoNode.h. ◆ SingleRnrState(). Bool_t TEveGeoTopNode::SingleRnrState ; (; ); const. inlineoverridevirtual . Reimplemented from TEveElement.; Definition at line 117 of file TEveGeoNode.h. ◆ Streamer(). void TEveGeoTopNode::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveGeoNode. ◆ StreamerNVirtual(). void TEveGeoTopNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TEveGeoNode.h. ◆ UseNodeTrans(). void TEveGeoTopNode::UseNodeTrans ; (; ). Use transformation matrix from the TGeoNode. ; Warning: this is local transformation of the node! ; Definition at line 484 of file TEveGeoNode.cxx. ◆ VolumeColChanged(). void TEveGeoTopNode::VolumeColChanged ; (; TGeoVolume * ; volume). Callback for propagating volume parameter changes. ; Definition at line 571 of file TEveGeoNode.cxx. ◆ VolumeVisChanged(). void TEveGeoTopNode::VolumeVisChanged ; (; TGeoVolume * ; volume). Callback for propagating volume visibility changes. ; Definition at line 561 of file TEveGeoNode.cxx. Member Data Documentation. ◆ fManager. TGeoManager* TEveGeoTopNode::fManager. protected . Definition at line 95 of file TEveGeoNode.h. ◆ fMaxVisNodes. Int_t TEveGeoTopNode::fMaxVisNodes. protected . Definition at line 98 of file TEveGeoNode.h. ◆ fVisLevel. Int_t TEveGeoTopNode::fVisLevel. protected . Definition at line 97 of file TEveGeoNode.h. ◆ fVisOption. Int_t TEveGeoTopNode::fVisOption. protected . Definition at line 96 of file TEveGeoNode.h. Libraries for TEveGeoTopNode:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveGeoNode.h; graf3d/eve/src/TEveGeoNode.cxx. TEveGeoTopNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoTopNode.html:37598,Guid,Guide,37598,doc/master/classTEveGeoTopNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoTopNode.html,1,['Guid'],['Guide']
Usability,"SetVisTouched(Bool_t vis=kTRUE)TGeoAtt; SetVoxelFinder(TGeoVoxelFinder *finder)TGeoVolumeinline; Sizeof() constTNamedvirtual; Sizeof3D() constTAtt3Dvirtual; SortNodes()TGeoVolume; Streamer(TBuffer &) overrideTGeoVolumevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGeoVolumeinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAtt3D()TAtt3Dinline; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TestAttBit(UInt_t f) constTGeoAttinline; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGeoAtt()TGeoAtt; TGeoAtt(Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""")TGeoAtt; TGeoVolume(const TGeoVolume &)=deleteTGeoVolumeprivate; TGeoVolume()TGeoVolume; TGeoVolume(const char *name, const TGeoShape *shape, const TGeoMedium *med=nullptr)TGeoVolume; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnmarkSaved()TGeoVolume; UseCurrentStyle()TObjectvirtual; Valid() constTGeoVolume; VisibleDaughters(Bool_t vis=kTRUE)TGeoVolume; Voxelize(Option_t *option)TGeoVolume; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Weight(Double_t precision=0.01, Option_t *option=""va"")TGeoVolume; WeightA() constTGeoVolume; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAtt3D()TAtt3Dinlinevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TGeoAtt()TGeoAttvirtual; ~TGeoVolume() overrideTGeoVolume; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume-members.html:16627,Guid,Guide,16627,doc/master/classTGeoVolume-members.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume-members.html,1,['Guid'],['Guide']
Usability,"Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SupportsExtension (const char *ext) const;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:29432,Clear,Clear,29432,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['Clear']
Usability,"Setting::EAlgorithm::kZLIB@ kZLIBUse ZLIB compression.Definition Compression.h:95; ROOT::RDF::RSnapshotOptionsA collection of options to steer the creation of the dataset on file.Definition RSnapshotOptions.hxx:22; ROOT::RDF::RSnapshotOptions::RSnapshotOptionsRSnapshotOptions()=default; ROOT::RDF::RSnapshotOptions::RSnapshotOptionsRSnapshotOptions(std::string_view mode, ECAlgo comprAlgo, int comprLevel, int autoFlush, int splitLevel, bool lazy, bool overwriteIfExists=false, bool vector2RVec=true)Definition RSnapshotOptions.hxx:27; ROOT::RDF::RSnapshotOptions::fAutoFlushint fAutoFlushAutoFlush value for output tree.Definition RSnapshotOptions.hxx:43; ROOT::RDF::RSnapshotOptions::fModestd::string fModeMode of creation of output file.Definition RSnapshotOptions.hxx:39; ROOT::RDF::RSnapshotOptions::fVector2RVecbool fVector2RVecIf set to true will convert std::vector columns to RVec when saving to disk.Definition RSnapshotOptions.hxx:47; ROOT::RDF::RSnapshotOptions::RSnapshotOptionsRSnapshotOptions(const RSnapshotOptions &)=default; ROOT::RDF::RSnapshotOptions::fCompressionAlgorithmECAlgo fCompressionAlgorithmCompression algorithm of output file.Definition RSnapshotOptions.hxx:40; ROOT::RDF::RSnapshotOptions::fSplitLevelint fSplitLevelSplit level of output tree.Definition RSnapshotOptions.hxx:44; ROOT::RDF::RSnapshotOptions::RSnapshotOptionsRSnapshotOptions(RSnapshotOptions &&)=default; ROOT::RDF::RSnapshotOptions::fLazybool fLazyDo not start the event loop when Snapshot is called.Definition RSnapshotOptions.hxx:45; ROOT::RDF::RSnapshotOptions::fCompressionLevelint fCompressionLevelCompression level of output file.Definition RSnapshotOptions.hxx:42; ROOT::RDF::RSnapshotOptions::fOverwriteIfExistsbool fOverwriteIfExistsIf fMode is ""UPDATE"", overwrite object in output file if it already exists.Definition RSnapshotOptions.hxx:46. treedataframeincROOTRSnapshotOptions.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSnapshotOptions_8hxx_source.html:4735,Guid,Guide,4735,doc/master/RSnapshotOptions_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RSnapshotOptions_8hxx_source.html,1,['Guid'],['Guide']
Usability,"Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Shifter's Instructions. These are the aspects the shifter shall keep under control; The shifter summarises the events of the week during the ROOT meeting. The hand-over to the next shifter must be carefully handled.; Forum Posts; All forum posts have to be followed up. Some hours can be given to the community to discuss the questions but an answer from the ROOT team must be given within 24 hours. It is responsibility of the shifter to make sure this happens, either answering or involving the relevant expert.; Failing tests; The shifter has the responsibility to ""keep the builds green"". She needs to fix the broken tests in the incremental and nightly builds and/or involve the relevant experts to make that happen.; Open pull requests; The shifter has the responsibility to follow up PRs if the relevant expert did not either interacting with the contributor or involving the relevant expert. Again, feedback needs to be given within 24 hours after the PR submission. Simple PRs should be reviewed. For simple PRs submitted by a contributor, the shifter should merge them immediately if they are acceptable (i.e. passing continuous integration and shifter's review). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/shifters-instructions.html:2778,feedback,feedback,2778,d/shifters-instructions.html,https://root.cern,https://root.cern/d/shifters-instructions.html,5,"['Guid', 'Simpl', 'feedback', 'guid', 'simpl']","['Guides', 'Simple', 'feedback', 'guidelines', 'simple']"
Usability,"Setvoid CleanRangeSet(unsigned int icoord, double xmin, double xmax)internal function to remove all the existing ranges between xmin and xmax called when a new range is ...Definition DataRange.cxx:165; ROOT::Fit::DataRange::IsInsidebool IsInside(double x, unsigned int icoord=0) constcheck if a point is inside the range for the given coordinateDefinition DataRange.cxx:146; ROOT::Fit::DataRange::GetRangevoid GetRange(double &xmin, double &xmax, unsigned int irange=0) constget first range for the x - coordinateDefinition DataRange.h:125; ROOT::Fit::DataRange::Rangesconst RangeSet & Ranges(unsigned int icoord=0) constreturn the vector of ranges for the coordinate icoordDefinition DataRange.h:89; ROOT::Fit::DataRange::IsSetbool IsSet() constreturn true if a range has been set in any of the coordinates i.e.Definition DataRange.h:80; ROOT::Fit::DataRange::NDimunsigned int NDim() constget range dimensionDefinition DataRange.h:65; ROOT::Fit::DataRange::Clearvoid Clear(unsigned int icoord=0)clear all ranges in one coordinate (is now -inf, +inf)Definition DataRange.cxx:158; ROOT::Fit::DataRange::AddRangevoid AddRange(unsigned int icoord, double xmin, double xmax)add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one,...Definition DataRange.cxx:94; ROOT::Fit::DataRange::DataRangeDataRange(unsigned int dim=1)Default constructor (infinite range)Definition DataRange.h:45; ROOT::Fit::DataRange::Sizeunsigned int Size(unsigned int icoord=0) constreturn range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-...Definition DataRange.h:71; ROOT::Fit::DataRange::GetRangevoid GetRange(double *xmin, double *xmax, unsigned int irange=0) constget range for coordinates and fill the vectorDefinition DataRange.h:141; ROOT::Fit::DataRange::GetRangevoid GetRange(unsigned int icoord, double &xmin, double &xmax) constget the first range for given coordinate.Definition DataRange.h:115; ROOT::Fit::DataRange::operator()std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataRange_8h_source.html:11345,Clear,Clearvoid,11345,doc/master/DataRange_8h_source.html,https://root.cern,https://root.cern/doc/master/DataRange_8h_source.html,3,"['Clear', 'clear']","['Clear', 'Clearvoid', 'clear']"
Usability,"ShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. Light modes group, display mode = surface, 64 x 64 channels, shaded, with; shadow.; Function:; TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid,; kDisplayModeLinesX >and kDisplayModeLinesY display modes one; can smooth data using Bezier smoothing algorithm. The function does not apply; for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; smoothing.; Function:; TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode.; One can change the width between horizontal slices and thus their density.; Default value: width=50. Simple modes group, display mode = contours, 64 x 64 channels. Width between; slices was set to 30.; Function:; TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the; weight between both shading algorithm. The function does not apply for other; display modes groups. Default value is: weight=0.5. Light - height modes group, display mode = surface, 64 x 64 channels.; The weight between both shading algorithms is set to 0.7.; Function:; TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display; channel marks. One can control the color as well as the width, height; (in pixels) and the style of the marks. The parameter enable can be set to:. kChannelMarksNotDrawn; kChannelMarksDrawn. The possible styles can be chosen from the set:. kChannelMarksStyleDot; kChannelMarksStyleCross; kChannelMarksStyleStar; kChannelMarksStyleRectangle; kChan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:25502,Simpl,Simple,25502,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"Shape ; (; const char * ; name, . TGeoBoolNode * ; node . ). Constructor with a Boolean node. ; Definition at line 259 of file TGeoCompositeShape.cxx. ◆ ~TGeoCompositeShape(). TGeoCompositeShape::~TGeoCompositeShape ; (; ). override . destructor ; Definition at line 273 of file TGeoCompositeShape.cxx. Member Function Documentation. ◆ Capacity(). Double_t TGeoCompositeShape::Capacity ; (; ); const. overridevirtual . Computes capacity of this shape [length^3] by sampling with 1% error. ; Reimplemented from TGeoBBox.; Definition at line 282 of file TGeoCompositeShape.cxx. ◆ Class(). static TClass * TGeoCompositeShape::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoCompositeShape::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoCompositeShape::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 84 of file TGeoCompositeShape.h. ◆ ClearThreadData(). void TGeoCompositeShape::ClearThreadData ; (; ); const. overridevirtual . Needed just for cleanup. ; Reimplemented from TGeoShape.; Definition at line 200 of file TGeoCompositeShape.cxx. ◆ ComputeBBox(). void TGeoCompositeShape::ComputeBBox ; (; ). overridevirtual . compute bounding box of the sphere ; Reimplemented from TGeoBBox.; Definition at line 305 of file TGeoCompositeShape.cxx. ◆ ComputeNormal(). void TGeoCompositeShape::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). overridevirtual . Computes normal vector in POINT to the composite shape. ; Reimplemented from TGeoBBox.; Definition at line 314 of file TGeoCompositeShape.cxx. ◆ ComputeNormal_v(). void TGeoCompositeShape::ComputeNormal_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; norms, . Int_t ; vecsize . ). overridevirtual . Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:35098,Clear,ClearThreadData,35098,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Clear'],['ClearThreadData']
Usability,"Shape, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ CheckShape(). void TGeoShape::CheckShape ; (; Int_t ; testNo, . Int_t ; nsamples = 10000, . Option_t * ; option = """" . ). Test for shape navigation methods. ; Summary for test numbers:. 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 211 of file TGeoShape.cxx. ◆ Class(). static TClass * TGeoShape::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoShape::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoShape::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TGeoShape.h. ◆ ClearThreadData(). virtual void TGeoShape::ClearThreadData ; (; ); const. inlinevirtual . Reimplemented in TGeoCompositeShape, TGeoPgon, and TGeoXtru.; Definition at line 66 of file TGeoShape.h. ◆ ComputeBBox(). virtual void TGeoShape::ComputeBBox ; (; ). pure virtual . Implemented in TGeoArb8, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ ComputeEpsMch(). Double_t TGeoShape::ComputeEpsMch ; (; ). static . Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ; Definition at line 225 of file TGeoShape.cxx. ◆ ComputeNormal(). virtual void TGeoShape::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). pure virtual . Implemented in TGeoArb8, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:28469,Clear,ClearThreadData,28469,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Clear'],['ClearThreadData']
Usability,"Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPadPainter.html:5748,simpl,simple,5748,root/html534/TPadPainter.html,https://root.cern,https://root.cern/root/html534/TPadPainter.html,1,['simpl'],['simple']
Usability,"Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). » Author: Matevz Tadel, Feb 2007 » Copyright (C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6615,Clear,ClearAfterRebuild,6615,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,4,['Clear'],"['Clear', 'ClearAfterRebuild']"
Usability,"ShowProjection/100; //decode nbins; 11030 if (fH->GetDimension() < 3) {; 11031 if (fShowProjection2 % 100 == 1) {; 11032 ShowProjectionY(px, py);; 11033 }; 11034 if (fShowProjection % 100 == 1) {; 11035 ShowProjectionX(px, py);; 11036 return;; 11037 }; 11038 if (fShowProjection % 100 == 2) {; 11039 ShowProjectionY(px, py);; 11040 return;; 11041 }; 11042 }; 11043 ; 11044 gPad->SetDoubleBuffer(0); // turn off double buffer mode; 11045 gVirtualX->SetDrawMode(TVirtualX::kInvert); // set the drawing mode to XOR mode; 11046 ; 11047 // Erase old position and draw a line at current position; 11048 TView *view = gPad->GetView();; 11049 if (!view) return;; 11050 TH3 *h3 = (TH3*)fH;; 11051 TAxis *xaxis = h3->GetXaxis();; 11052 TAxis *yaxis = h3->GetYaxis();; 11053 TAxis *zaxis = h3->GetZaxis();; 11054 Double_t u[3],xx[3];; 11055 ; 11056 static TPoint line1[2];//store end points of a line, initialised 0 by default; 11057 static TPoint line2[2];// second line when slice thickness > 1 bin thickness; 11058 static TPoint line3[2];; 11059 static TPoint line4[2];; 11060 static TPoint endface1[5];; 11061 static TPoint endface2[5];; 11062 static TPoint rect1[5];//store vertices of the polyline (rectangle), initialsed 0 by default; 11063 static TPoint rect2[5];// second rectangle when slice thickness > 1 bin thickness; 11064 ; 11065 Double_t uxmin = gPad->GetUxmin();; 11066 Double_t uxmax = gPad->GetUxmax();; 11067 Double_t uymin = gPad->GetUymin();; 11068 Double_t uymax = gPad->GetUymax();; 11069 ; 11070 int pxmin = gPad->XtoAbsPixel(uxmin);; 11071 int pxmax = gPad->XtoAbsPixel(uxmax);; 11072 if (pxmin==pxmax) return;; 11073 int pymin = gPad->YtoAbsPixel(uymin);; 11074 int pymax = gPad->YtoAbsPixel(uymax);; 11075 if (pymin==pymax) return;; 11076 Double_t cx = (pxmax-pxmin)/(uxmax-uxmin);; 11077 Double_t cy = (pymax-pymin)/(uymax-uymin);; 11078 TVirtualPad *c = (TVirtualPad*)gROOT->GetListOfCanvases()->FindObject(TString::Format(""c_%zx_projection_%d"",; 11079 (size_t)fH, fShowProjection).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:400125,ux,uxmin,400125,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,5,['ux'],"['uxmax', 'uxmax-uxmin', 'uxmin']"
Usability,"SignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* ti); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUdpService(int port, int backlog); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tChangeDirectory(const char* path); voidCheckChilds(); Bool_tCheckDescriptors(); Bool_tCheckSignals(Bool_t sync); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseConnection(int sock, Bool_t force = kFALSE); virtual voidCloselog(); virtual intClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); intConnectService(const char* server, int port, int tcpwindowsize, const char* protocol = ""tcp""); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnixSystem.html:1872,Clear,Clear,1872,root/html532/TUnixSystem.html,https://root.cern,https://root.cern/root/html532/TUnixSystem.html,4,['Clear'],['Clear']
Usability,SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::Sim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:15723,Simpl,SimpleInterval,15723,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:14758,Simpl,SimpleInterval,14758,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"SingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance Chart:. TObject. ←; TXMLPlayer. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:10812,simpl,simple,10812,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,2,['simpl'],['simple']
Usability,"Size void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraph2D.h; TH1.h; TMath.h; TRandom.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TF2A 2-Dim function with parameters.Definition TF2.h:29; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetHistTopMarginvoid SetHistTopMargin(Double_t hmax=0.05)Definition TStyle.h:385; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMVA_SOFIE_GNN_Parser.h3h3Definition TMVA_SOFIE_GNN_Parser.py:189; AuthorOlivier Couet ; Definition in file graph2dfit.C. tutorialsfitgraph2dfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph2dfit_8C.html:5346,Guid,Guide,5346,doc/master/graph2dfit_8C.html,https://root.cern,https://root.cern/doc/master/graph2dfit_8C.html,1,['Guid'],['Guide']
Usability,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html:2867,Clear,ClearExtra,2867,root/html602/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2867,Clear,ClearExtra,2867,root/html604/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"SizePNEIdInt_t fSizePNEIdarray of physical node entriesDefinition TGeoManager.h:140; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoManager::fPdgIdInt_t fPdgId[1024]Definition TGeoManager.h:78; TGeoManager::SortOverlapsvoid SortOverlaps()Sort overlaps by decreasing overlap distance. Extrusions comes first.Definition TGeoManager.cxx:2476; TGeoManager::MakeEltuTGeoVolume * MakeEltu(const char *name, TGeoMedium *medium, Double_t a, Double_t b, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3222; TGeoManager::RemoveNavigatorvoid RemoveNavigator(const TGeoNavigator *nav)Clear a single navigator.Definition TGeoManager.cxx:899; TGeoManager::MasterToTopvoid MasterToTop(const Double_t *master, Double_t *top) constConvert coordinates from master volume frame to top.Definition TGeoManager.cxx:4257; TGeoManager::fStreamVoxelsBool_t fStreamVoxelsflag volume lists loopDefinition TGeoManager.h:81; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMaterial::IsMixturevirtual Bool_t IsMixture() constDefinition TGeoMaterial.h:124; TGeoMaterial::GetByteCountvirtual Int_t GetByteCount() constDefinition TGeoMaterial.h:98; TGeoMaterial::GetElementTGeoElement * GetElement() constGet a pointer to the element this material is made of.Definition TGeoMaterial.cxx:625; TGeoMaterial::kMatSavePrimitive@ kMatSavePrimitiveDefinition TGeoMaterial.h:36; TGeoMaterial::IsEqvirtual Bool_t IsEq(const TGeoMaterial *other) constreturn true if the other material has the same physical propertiesDefinition TGeoMaterial.cxx:563; TGeoM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:220448,Clear,Clear,220448,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"Slave (TSocket *socket=0);  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:1455,feedback,feedback,1455,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['feedback'],['feedback']
Usability,"SlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidBegin1D(TTree* t); virtual voidBegin2D(TTree* t); virtual voidBegin3D(TTree* t); virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). private:. voidDefVar1D(); voidDefVar2D(); voidDefVar3D(). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TH1*fHistogram; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDrawHist.html:5875,Clear,ClearFormula,5875,root/html534/TProofDrawHist.html,https://root.cern,https://root.cern/root/html534/TProofDrawHist.html,1,['Clear'],['ClearFormula']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 14:10:12 2015 » Last generated: 2015-06-02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:20687,clear,clearEmat,20687,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1., Double_t scale_error = 0.). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Tue Jun 2 16:35:15 2015 » Last generated: 2015-06-02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnfoldSys.html:20687,clear,clearEmat,20687,root/html604/TUnfoldSys.html,https://root.cern,https://root.cern/root/html604/TUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"Sparse * GetSummedErrorMatrixYY(void). TMatrixDSparse * GetSummedErrorMatrixXX(void). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void GetRhoItotal(TH1* rhoi, const Int_t* binMap = 0, TH2* invEmat = 0); get global correlation coefficients including systematic,statistical,background,tau errors; rhoi: output histogram; binMap: for each global bin, indicate in which histogram bin; to store its content; invEmat: output histogram for inverse of error matrix; (pointer may zero if inverse is not requested). TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap). void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat). TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea). void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode). void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0). Bool_t GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0). void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: Sun Mar 15 16:40:30 2015 » Last generated: 2015-03",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:19911,clear,clearEmat,19911,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"Spline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond = -1. protected . 0=no end cond, 1=first derivative, 2=second derivative ; Definition at line 188 of file TSpline.h. ◆ fPoly. TSplinePoly3* TSpline3::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Definition at line 184 of file TSpline.h. ◆ fValBeg. Double_t TSpline3::fValBeg = 0. protected . Initial value of first or second derivative. ; Definition at line 185 of file TSpline.h. ◆ fValEnd. Double_t TSpline3::fValEnd = 0. protected . End value of first or second derivative. ; Definition at line 186 of file TSpline.h. Libraries for TSpline3:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.cxx. TSpline3. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline3.html:31278,Guid,Guide,31278,doc/master/classTSpline3.html,https://root.cern,https://root.cern/doc/master/classTSpline3.html,1,['Guid'],['Guide']
Usability,SqSum.h. ◆ ~TNeuronInputSqSum(). virtual TMVA::TNeuronInputSqSum::~TNeuronInputSqSum ; (; ). inlinevirtual . Definition at line 48 of file TNeuronInputSqSum.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputSqSum::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputSqSum::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TNeuronInputSqSum::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file TNeuronInputSqSum.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInputSqSum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TNeuronInputSqSum.h. ◆ GetInput(). Double_t TMVA::TNeuronInputSqSum::GetInput ; (; const TNeuron * ; neuron); const. inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 51 of file TNeuronInputSqSum.h. ◆ GetName(). TString TMVA::TNeuronInputSqSum::GetName ; (; ). inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 62 of file TNeuronInputSqSum.h. ◆ IsA(). virtual TClass * TMVA::TNeuronInputSqSum::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TNeuronInput.; Definition at line 64 of file TNeuronInputSqSum.h. ◆ Streamer(). virtual void TMVA::TNeuronInputSqSum::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TNeuronInput. ◆ StreamerNVirtual(). void TMVA::TNeuronInputSqSum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TNeuronInputSqSum.h. Libraries for TMVA::TNeuronInputSqSum:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TNeuronInputSqSum.h. TMVATNeuronInputSqSum. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSqSum.html:3559,Guid,Guide,3559,doc/master/classTMVA_1_1TNeuronInputSqSum.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSqSum.html,1,['Guid'],['Guide']
Usability,"Standard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polynomial ; (; double const * ; coeffs, . int ; nCoeffs, . int ; lowestOrder, . double ; x . ). inline . In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ; Definition at line 130 of file MathFuncs.h. ◆ polynomialIntegral(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polynomialIntegral ; (; double const * ; coeffs, . int ; nCoeffs, . int ; lowestOrder, . double ; xMin, . double ; xMax . ). inline . In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ; Definition at line 481 of file MathFuncs.h. ◆ product(). double RooFit::Detail::MathFuncs::product ; (; double const * ; factors, . std::size_t ; nFactors . ). inline . Definition at line 93 of file MathFuncs.h. ◆ ratio(). double RooFit::Detail::MathFuncs::ratio ; (; double ; numerator, . double ; denominator . ). inline . Definition at line 103 of file MathFuncs.h. ◆ recursiveFraction(). double RooFit::Detail::MathFuncs::recursiveFraction ; (; double * ; a, . unsigned int ; n . ). inline . Definition at line 371 of file MathFuncs.h. RooFitDetailMathFuncs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:11260,Guid,Guide,11260,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['Guid'],['Guide']
Usability,"Start the TTreeViewer on this tree.; 9456///; 9457/// - ww is the width of the canvas in pixels; 9458/// - wh is the height of the canvas in pixels; 9459 ; 9460void TTree::StartViewer(); 9461{; 9462 GetPlayer();; 9463 if (fPlayer) {; 9464 fPlayer->StartViewer(600, 400);; 9465 }; 9466}; 9467 ; 9468////////////////////////////////////////////////////////////////////////////////; 9469/// Stop the cache learning phase; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506////////////////////////////////////////////////////////////////////////////////; 9507/// Set the fTree member for all branches and sub branches.; 9508 ; 9509static void TBranch__SetTree(TTree *tree, TObjArray &branches); 9510{; 9511 Int_t nb = branches.GetEntriesFast();; 9512 for (Int_t i = 0; i < nb; ++i) {; 9513 TBranch* br = (TBranch*) branches.UncheckedAt(i);; 9514 br->SetTree(tree);; 9515 ; 9516 Int_t writeBasket = br->GetWriteBasket();; 9517 for (Int_t j = writeBasket; j >= 0; --j) {; 9518 TBasket *bk = (TBasket*)br->GetListOfBaskets()->UncheckedAt(j);; 9519 if (bk) {; 9520 tree->In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:365027,learn,learning,365027,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"StatXvoid SetStatX(Float_t x=0)Definition TStyle.h:397; TStyle::SetLabelFontvoid SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition TStyle.cxx:1413; TStyle::SetLabelOffsetvoid SetLabelOffset(Float_t offset=0.005, Option_t *axis=""X"")Set offset between axis and axis labels.Definition TStyle.cxx:1429; TStyle::SetStatWvoid SetStatW(Float_t w=0.19)Definition TStyle.h:399; Note that when an object is created, its attributes are taken from the current style. For example, you may have created an histogram in a previous session, saved it in a file. Meanwhile, if you have changed the style, the histogram will be drawn with the old attributes. You can force the current style attributes to be set when you read an object from a file by calling:; gROOT->ForceStyle();; before reading the objects from the file.; Let's assume you have a canvas or pad with your histogram or any other object, you can force these objects to get the attributes of the current style via:; canvas->UseCurrentStyle();; The description of the style functions should be clear from the name of the TStyle Setters or Getters. Some functions have an extended description, in particular:. TStyle:SetLabelFont.; TStyle:SetLineStyleString, to set the format of dashed lines.; TStyle:SetOptStat.; TStyle:SetPalette to change the colors palette.; TStyle:SetTitleOffset. . Definition at line 29 of file TStyle.h. Public Types; enum  EPaperSize { kA4; , kUSLetter; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:3621,clear,clear,3621,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['clear'],['clear']
Usability,"State(TGLClipSet::kClipPlane, planeEq);; As with cameras, any clip can be configured at any time, but you must set the clip current to see the effect.; 9.13.2.6 Manipulators; Manipulators are GUI ‘widgets’ or controls attached to a 3D object in the viewer, allowing a direct manipulation of the object’s geometry. There are three manipulators for the three basic geometries transformations. In each case, the manipulator consists of three components, one for each local axis of the object, shown in standard colors: red (X), green (Y) and blue (Z). GL Viewer object manipulators. Activate the manipulator by moving the mouse over one of these components (which turns yellow to indicate active state). Click with left mouse and drag this active component to perform the manipulation. Toggle between the manipulator types using the ‘x’, ‘c’, ‘v’ keys while the mouse cursor is above the manipulator. Note: Manipulators cannot be controlled via the API at present.; 9.13.2.7 Guides; Guides are visual aids drawn into the viewer world. Controls for these are under the “Guides” tab:; Viewer Controls Pane Guides Tab; Axes show the world (global) frame coordinatedirections: X (red), Y (green) and Z (blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:396642,Guid,Guides,396642,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guides']
Usability,"State=mixState tagFlav=tagFlav tau=tau dm=dm t=dt ] = 2.0398; RooBMixDecay::sig_t_Lep[ mistag=w_Lep delMistag=dw_Lep mixState=mixState tagFlav=tagFlav tau=tau dm=dm t=dt ] = 2.0398; RooBMixDecay::sig_t_NT1[ mistag=w_NT1 delMistag=dw_NT1 mixState=mixState tagFlav=tagFlav tau=tau dm=dm t=dt ] = 2.0398; RooBMixDecay::sig_t_NT2[ mistag=w_NT2 delMistag=dw_NT2 mixState=mixState tagFlav=tagFlav tau=tau dm=dm t=dt ] = 2.0398; RooBMixDecay::sig_t_model_D[ mistag=model_D_2 delMistag=dw mixState=mixState tagFlav=tagFlav tau=tau dm=dm t=dt ] = 1.62247; ; analytical resolution models; ----------------------------; RooAddModel::gm[ x=dt (fracC * gm_11 + fracT * gm_12 + [%] * gm_13) ] = 1.25632; RooGaussModel::gm_11[ x=dt mean=biasC sigma=sigmaC msf=dterr ssf=dterr ] = 2.45126; RooGaussModel::gm_11_Kao[ x=dt mean=biasC_Kao sigma=sigmaC msf=dterr ssf=dterr ] = 2.45126; RooGaussModel::gm_11_Lep[ x=dt mean=biasC_Lep sigma=sigmaC msf=dterr ssf=dterr ] = 2.45126; RooGaussModel::gm_11_NT1[ x=dt mean=biasC_NT1 sigma=sigmaC msf=dterr ssf=dterr ] = 2.45126; RooGaussModel::gm_11_NT2[ x=dt mean=biasC_NT2 sigma=sigmaC msf=dterr ssf=dterr ] = 2.45126; RooGaussModel::gm_12[ x=dt mean=0 sigma=sigmaT msf=1 ssf=1 ] = 0.0613757; RooGaussModel::gm_13[ x=dt mean=0 sigma=20 msf=1 ssf=1 ] = 0.0199471; RooAddModel::gm_Kao[ x=dt (fracC * gm_11_Kao + fracT * gm_12 + [%] * gm_13) ] = 1.25632; RooAddModel::gm_Lep[ x=dt (fracC * gm_11_Lep + fracT * gm_12 + [%] * gm_13) ] = 1.25632; RooAddModel::gm_NT1[ x=dt (fracC * gm_11_NT1 + fracT * gm_12 + [%] * gm_13) ] = 1.25632; RooAddModel::gm_NT2[ x=dt (fracC * gm_11_NT2 + fracT * gm_12 + [%] * gm_13) ] = 1.25632; ; functions; --------; RooFormulaVar::model_D_2[ actualVars=(D) formula=""0.5-D/2"" ] = 0.25; ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf513_wsfactory_tools.py. tutorialsroofitrf513_wsfactory_tools.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf513__wsfactory__tools_8py.html:6978,Guid,Guide,6978,doc/master/rf513__wsfactory__tools_8py.html,https://root.cern,https://root.cern/doc/master/rf513__wsfactory__tools_8py.html,1,['Guid'],['Guide']
Usability,"StopCacheLearningPhase()TTreevirtual; Streamer(TBuffer &) overrideTChainvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TChaininline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TChain(const TChain &)TChainprivate; TChain(Mode mode=kWithGlobalRegistration)TChain; TChain(const char *name, const char *title="""", Mode mode=kWithGlobalRegistration)TChain; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TIOFeatures typedefTTreeprivate; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TTree()TTree; TTree(const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}))TTree; TTree(const TTree &tt)=deleteTTree; UnbinnedFit(const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; UseCache(Int_t maxCacheSize=10, Int_t pageSize=0)TChainvirtual; UseCurrentStyle() overrideTTreevirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideTTreevirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const overrideTTreevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TChain() overrideTChain; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TTree() overrideTTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain-members.html:28174,Guid,Guide,28174,doc/master/classTChain-members.html,https://root.cern,https://root.cern/doc/master/classTChain-members.html,1,['Guid'],['Guide']
Usability,"StopRealTime = 0;; 47 fStopCpuTime = 0;; 48 ; 49 Start();; 50}; 51 ; 52////////////////////////////////////////////////////////////////////////////////; 53/// Start the stopwatch. If reset is kTRUE reset the stopwatch before; 54/// starting it (including the stopwatch counter).; 55/// Use kFALSE to continue timing after a Stop() without; 56/// resetting the stopwatch.; 57 ; 58void TStopwatch::Start(Bool_t reset); 59{; 60 if (reset) {; 61 fState = kUndefined;; 62 fTotalCpuTime = 0;; 63 fTotalRealTime = 0;; 64 fCounter = 0;; 65 }; 66 if (fState != kRunning) {; 67 fStartRealTime = GetRealTime();; 68 fStartCpuTime = GetCPUTime();; 69 }; 70 fState = kRunning;; 71 fCounter++;; 72}; 73 ; 74////////////////////////////////////////////////////////////////////////////////; 75/// Stop the stopwatch.; 76 ; 77void TStopwatch::Stop(); 78{; 79 fStopRealTime = GetRealTime();; 80 fStopCpuTime = GetCPUTime();; 81 ; 82 if (fState == kRunning) {; 83 fTotalCpuTime += fStopCpuTime - fStartCpuTime;; 84 fTotalRealTime += fStopRealTime - fStartRealTime;; 85 }; 86 fState = kStopped;; 87}; 88 ; 89////////////////////////////////////////////////////////////////////////////////; 90/// Resume a stopped stopwatch. The stopwatch continues counting from the last; 91/// Start() onwards (this is like the laptimer function).; 92 ; 93void TStopwatch::Continue(); 94{; 95 if (fState == kUndefined); 96 Error(""Continue"", ""stopwatch not started"");; 97 ; 98 if (fState == kStopped) {; 99 fTotalCpuTime -= fStopCpuTime - fStartCpuTime;; 100 fTotalRealTime -= fStopRealTime - fStartRealTime;; 101 }; 102 ; 103 fState = kRunning;; 104}; 105 ; 106////////////////////////////////////////////////////////////////////////////////; 107/// Stop the stopwatch (if it is running) and return the realtime (in; 108/// seconds) passed between the start and stop events.; 109 ; 110Double_t TStopwatch::RealTime(); 111{; 112 if (fState == kUndefined); 113 Error(""RealTime"", ""stopwatch not started"");; 114 ; 115 if (fState == kRunning);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8cxx_source.html:2579,Resume,Resume,2579,doc/master/TStopwatch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8cxx_source.html,1,['Resume'],['Resume']
Usability,Stopwatch.h. ◆ ResetRealTime(). void TStopwatch::ResetRealTime ; (; Double_t ; time = 0). inline . Definition at line 54 of file TStopwatch.h. ◆ Start(). void TStopwatch::Start ; (; Bool_t ; reset = kTRUE). Start the stopwatch. ; If reset is kTRUE reset the stopwatch before starting it (including the stopwatch counter). Use kFALSE to continue timing after a Stop() without resetting the stopwatch. ; Definition at line 58 of file TStopwatch.cxx. ◆ Stop(). void TStopwatch::Stop ; (; ). Stop the stopwatch. ; Definition at line 77 of file TStopwatch.cxx. ◆ Streamer(). void TStopwatch::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStopwatch::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TStopwatch.h. Member Data Documentation. ◆ fCounter. Int_t TStopwatch::fCounter. private . Definition at line 40 of file TStopwatch.h. ◆ fStartCpuTime. Double_t TStopwatch::fStartCpuTime. private . Definition at line 35 of file TStopwatch.h. ◆ fStartRealTime. Double_t TStopwatch::fStartRealTime. private . Definition at line 33 of file TStopwatch.h. ◆ fState. EState TStopwatch::fState. private . Definition at line 39 of file TStopwatch.h. ◆ fStopCpuTime. Double_t TStopwatch::fStopCpuTime. private . Definition at line 36 of file TStopwatch.h. ◆ fStopRealTime. Double_t TStopwatch::fStopRealTime. private . Definition at line 34 of file TStopwatch.h. ◆ fTotalCpuTime. Double_t TStopwatch::fTotalCpuTime. private . Definition at line 37 of file TStopwatch.h. ◆ fTotalRealTime. Double_t TStopwatch::fTotalRealTime. private . Definition at line 38 of file TStopwatch.h. Libraries for TStopwatch:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TStopwatch.h; core/base/src/TStopwatch.cxx. TStopwatch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStopwatch.html:16019,Guid,Guide,16019,doc/master/classTStopwatch.html,https://root.cern,https://root.cern/doc/master/classTStopwatch.html,1,['Guid'],['Guide']
Usability,"Store& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:4256,Clear,Clear,4256,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,2,['Clear'],['Clear']
Usability,"Stream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either '\r' | '\n' or eof of some problem. ; Definition at line 298 of file TreeUtils.cxx. ◆ SkipComment(). void ROOT::TreeUtils::SkipComment ; (; std::istream & ; input). Skips everything from '#' to (including) '\r' or '\n'. ; Definition at line 240 of file TreeUtils.cxx. ◆ SkipEmptyLines(). void ROOT::TreeUtils::SkipEmptyLines ; (; std::istream & ; input). Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ; Definition at line 259 of file TreeUtils.cxx. ◆ SkipWSCharacters(). void ROOT::TreeUtils::SkipWSCharacters ; (; std::istream & ; input). Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ; Definition at line 280 of file TreeUtils.cxx. ROOTTreeUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:3400,Guid,Guide,3400,doc/master/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html,1,['Guid'],['Guide']
Usability,"Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Experimental::ClassificationResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file Classification.h. Friends And Related Symbol Documentation. ◆ Classification. friend class Classification. friend . Definition at line 129 of file Classification.h. Member Data Documentation. ◆ fClassNames. std::vector<TString> TMVA::Experimental::ClassificationResult::fClassNames. private . Definition at line 136 of file Classification.h. ◆ fDataLoaderName. TString TMVA::Experimental::ClassificationResult::fDataLoaderName. private . Definition at line 133 of file Classification.h. ◆ fIsCuts. Bool_t TMVA::Experimental::ClassificationResult::fIsCuts. private . if it is a method cuts need special output ; Definition at line 139 of file Classification.h. ◆ fMethod. OptionMap TMVA::Experimental::ClassificationResult::fMethod. private . Definition at line 132 of file Classification.h. ◆ fMvaTest. std::map<UInt_t, std::vector<std::tuple<Float_t, Float_t, Bool_t> > > TMVA::Experimental::ClassificationResult::fMvaTest. private . Mvas for two-class and multiclass classification. ; Definition at line 135 of file Classification.h. ◆ fMvaTrain. std::map<UInt_t, std::vector<std::tuple<Float_t, Float_t, Bool_t> > > TMVA::Experimental::ClassificationResult::fMvaTrain. private . Mvas for two-class classification. ; Definition at line 134 of file Classification.h. ◆ fROCIntegral. Double_t TMVA::Experimental::ClassificationResult::fROCIntegral. private . Definition at line 140 of file Classification.h. Libraries for TMVA::Experimental::ClassificationResult:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Classification.h; tmva/tmva/src/Classification.cxx. TMVAExperimentalClassificationResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:17582,Guid,Guide,17582,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,1,['Guid'],['Guide']
Usability,Streamer(). template<class T > . void RooTemplateProxy< T >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooArgProxy. ◆ StreamerNVirtual(). template<class T > . void RooTemplateProxy< T >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 448 of file RooTemplateProxy.h. Member Data Documentation. ◆ desc [1/2]. template<class T > . const char* RooTemplateProxy< T >::desc. Definition at line 198 of file RooTemplateProxy.h. ◆ desc [2/2]. template<class T > . const char RooAbsArg Bool bool bool RooTemplateProxy< T >::desc. Definition at line 200 of file RooTemplateProxy.h. ◆ owner [1/2]. template<class T > . const char RooAbsArg* RooTemplateProxy< T >::owner. Definition at line 198 of file RooTemplateProxy.h. ◆ owner [2/2]. template<class T > . const char RooAbsArg Bool bool bool RooTemplateProxy< T >::owner. Definition at line 200 of file RooTemplateProxy.h. ◆ proxyOwnsArg. template<class T > . const char RooAbsArg Bool bool bool RooTemplateProxy< T >::proxyOwnsArg. Definition at line 199 of file RooTemplateProxy.h. ◆ shapeServer [1/2]. template<class T > . const char RooAbsArg Bool bool RooTemplateProxy< T >::shapeServer. Definition at line 199 of file RooTemplateProxy.h. ◆ shapeServer [2/2]. template<class T > . const char RooAbsArg Bool bool bool RooTemplateProxy< T >::shapeServer. Definition at line 200 of file RooTemplateProxy.h. ◆ valueServer [1/2]. template<class T > . const char RooAbsArg Bool RooTemplateProxy< T >::valueServer. Definition at line 199 of file RooTemplateProxy.h. ◆ valueServer [2/2]. template<class T > . const char RooAbsArg Bool bool bool RooTemplateProxy< T >::valueServer. Definition at line 200 of file RooTemplateProxy.h. roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h; roofit/roofitcore/inc/RooTemplateProxy.h. RooTemplateProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:30343,Guid,Guide,30343,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['Guid'],['Guide']
Usability,"StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TUnfoldSys(); voidTUnfold::AddMSparse(TMatrixDSparse* dest, Double_t f, const TMatrixDSparse* src) const; Bool_tTUnfold::AddRegularisationCondition(Int_t nEle, const Int_t* indices, const Double_t* rowData); Bool_tTUnfold::AddRegularisationCondition(Int_t i0, Double_t f0, Int_t i1 = -1, Double_t f1 = 0., Int_t i2 = -1, Double_t f2 = 0.); voidTUnfold::ClearHistogram(TH1* h, Double_t x = 0.) const; virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; Int_tTUnfold::GetBinFromRow(int ix) const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:11974,Clear,ClearHistogram,11974,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,1,['Clear'],['ClearHistogram']
Usability,"StreamerNVirtual_b). inline . Definition at line 292 of file THnBase.h. ◆ Sumw2(). virtual void THnBase::Sumw2 ; (; ). pure virtual . Implemented in THn, and THnSparse. ◆ UpdateXStat(). void THnBase::UpdateXStat ; (; const Double_t * ; x, . Double_t ; w = 1. . ). inlineprotected . Definition at line 77 of file THnBase.h. Friends And Related Symbol Documentation. ◆ THnIter. friend class THnIter. friend . Definition at line 294 of file THnBase.h. Member Data Documentation. ◆ fAxes. TObjArray THnBase::fAxes. protected . Axes of the histogram. ; Definition at line 46 of file THnBase.h. ◆ fBrowsables. TObjArray THnBase::fBrowsables. protected . ! Browser-helpers for each axis ; Definition at line 47 of file THnBase.h. ◆ fEntries. Double_t THnBase::fEntries. protected . Number of entries, spread over chunks. ; Definition at line 48 of file THnBase.h. ◆ fIntegral. std::vector<Double_t> THnBase::fIntegral. protected . ! vector with bin weight sums ; Definition at line 53 of file THnBase.h. ◆ []. enum { ... } THnBase::fIntegralStatus. ! status of integral . ◆ fNdimensions. Int_t THnBase::fNdimensions. protected . Number of dimensions. ; Definition at line 45 of file THnBase.h. ◆ fTsumw. Double_t THnBase::fTsumw. protected . Total sum of weights. ; Definition at line 49 of file THnBase.h. ◆ fTsumw2. Double_t THnBase::fTsumw2. protected . Total sum of weights squared; -1 if no errors are calculated. ; Definition at line 50 of file THnBase.h. ◆ fTsumwx. TArrayD THnBase::fTsumwx. protected . Total sum of weight*X for each dimension. ; Definition at line 51 of file THnBase.h. ◆ fTsumwx2. TArrayD THnBase::fTsumwx2. protected . Total sum of weight*X*X for each dimension. ; Definition at line 52 of file THnBase.h. Libraries for THnBase:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THnBase.h; hist/hist/src/THnBase.cxx. THnBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:46146,Guid,Guide,46146,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['Guid'],['Guide']
Usability,"Streaming mechanism ensures that only one copy of each object in the tree/graph is written to the output buffer to avoid circular dependencies.; However if the object event is split into several files or into several branches of one or more Trees, normal C++ pointers cannot be used because each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with TRef fRef;; TRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject.Definition TRef.h:32; one can do: fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls in the same or different files, in the same or different branches of a Tree.; If the TRef is read and the referenced object has not yet been read, the TRef will return a null pointer. As soon as the referenced object will be read, the TRef will point to it. If the referenced object is contained in a TTree it can be auto-loaded using the TBranchRef mechanism, which is set up by simply calling TTree::BranchRef().; TRef also supports the complex situation where a TFile is updated multiple times on the same machine or a different machine. How does it work; A TRef is itself a TObject with an additional transient pointer fPID. When the statement fRef = robj is executed, the following actions happen:. The pointer fPID is set to the current TProcessID.; The current ObjectNumber (see below) is incremented by one.; robj::fUniqueID is set to ObjectNumber.; In the fPID object, the element fObjects[ObjectNumber] is set to robj; ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj using fRef.GetObject(). This function returns directly fObjects[fUniqueID] from the fPID object.; When the TRef is written, the process id number pidf of fPID is written in addition to the TObject part of TRef (fBits,fUniqueID).; When the TRef is read, its pointer fPID is set to the value store",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:1785,simpl,simply,1785,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['simpl'],['simply']
Usability,"String != NULL; tokenString = (TObjString*)nextToken ()) {; 413 std::stringstream sstr;; 414 double currentValue;; 415 sstr << tokenString->GetString ().Data ();; 416 sstr >> currentValue;; 417 values.push_back (currentValue);; 418 }; 419 return values;; 420}; 421 ; 422////////////////////////////////////////////////////////////////////////////////; 423 ; 424void TMVA::MethodDNN::ProcessOptions(); 425{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:14838,Guid,Guide,14838,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Guid'],['Guide']
Usability,"String &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  Constructor. ;  ;  MethodDL (DataSetInfo &theData, const TString &theWeightFile);  Constructor. ;  ; virtual ~MethodDL ();  Virtual Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; TString GetArchitectureString () const;  ; size_t GetBatchDepth () const;  ; size_t GetBatchHeight () const;  ; TString GetBatchLayoutString () const;  ; size_t GetBatchSize () const;  ; size_t GetBatchWidth () const;  ; const DeepNetImpl_t & GetDeepNet () const;  ; TString GetErrorStrategyString () const;  ; size_t GetInputDepth () const;  ; size_t GetInputDim () const;  ; size_t GetInputHeight () const;  ; TString GetInputLayoutString () const;  ; std::vector< size_t > GetInputShape () const;  ; size_t GetInputWidth () const;  ; KeyValueVector_t & GetKeyValueSettings ();  ; const KeyValueVector_t & GetKeyValueSettings () const;  ; TString GetLayoutString () const;  ; DNN::ELossFunction GetLossFunction () const;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; DNN::EOutputFunction GetOutputFunction () const;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  ; std::vector< TTrainingSettings > & GetTrainingSettings ();  ; const std::vector< TTrainingSettings > & GetTrainingSettings () const;  ; TString GetTrainingStrategyString () const;  ; DNN::EInitialization GetWeightInitialization () const;  ; TString GetWeightInitializationString () const;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  Check the type of analysis the deep learning network can do. ;  ; virtual TClass * IsA () const;  ; KeyValueVector_t ParseKeyValueString (TString parseString, TString blockDelim, TString tokenDelim);  Function for parsing the training settings, provided as a string in a key-value form. ;  ; void R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:2182,learn,learning,2182,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['learn'],['learning']
Usability,"String attributes; Bool_t_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_t_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void setACleanADirty(Bool_t flag); This global switch changes the cache mode of all objects marked as 'always clean'; to 'always dirty'. For internal use in RooRealIntegral. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:18091,clear,clear,18091,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,['clear'],['clear']
Usability,"String& colName, Int_t firstRow, Int_t numberRows). BuildSorter backs TTableSorter ctor. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression inside of [], only a single integer number allowed !; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. void SetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows); Set some common parameteres for the ""simple"" arrays. ~TTableSorter(); to be documented. Int_t BSearch(valuetype value). Int_t SelectSearch(valuetype value). Int_t BSearch(const void* value) const; to be documented. Int_t GetIndex(UInt_t sortedIndex) const; returns the original ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:16787,simpl,simpleArray,16787,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['simpl'],['simpleArray']
Usability,"String& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelection.html:2340,Clear,Clear,2340,root/html528/TEveSelection.html,https://root.cern,https://root.cern/root/html528/TEveSelection.html,2,['Clear'],['Clear']
Usability,"String& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveSelection.html:2479,Clear,Clear,2479,root/html530/TEveSelection.html,https://root.cern,https://root.cern/root/html530/TEveSelection.html,10,['Clear'],['Clear']
Usability,"String.h. ◆ BeginsWith() [2/2]. Bool_t TString::BeginsWith ; (; const TString & ; pat, . ECaseCompare ; cmp = kExact . ); const. inline . Definition at line 626 of file TString.h. ◆ Capacity() [1/2]. Ssiz_t TString::Capacity ; (; ); const. inline . Definition at line 364 of file TString.h. ◆ Capacity() [2/2]. Ssiz_t TString::Capacity ; (; Ssiz_t ; nc). Return string capacity. ; If nc != current capacity Clone() the string in a string with the desired capacity. ; Definition at line 442 of file TString.cxx. ◆ Chop(). TString & TString::Chop ; (; ). inline . Definition at line 691 of file TString.h. ◆ Class(). static TClass * TString::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TString::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TString::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 473 of file TString.h. ◆ Clear(). void TString::Clear ; (; ). Clear string without changing its capacity. ; Definition at line 1235 of file TString.cxx. ◆ Clobber(). Ssiz_t TString::Clobber ; (; Ssiz_t ; nc). protected . Clear string and make sure it has a capacity of nc. ; WarningIf nc > MaxSize(), then Fatal() is raised, and only MaxSize() elements are allocated if Fatal does not abort ; ReturnsResulting allocated capacity (after clamping, if needed) ; Definition at line 1246 of file TString.cxx. ◆ Clone(). void TString::Clone ; (; Ssiz_t ; tot). private . Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current length. ; Preserve previous contents. WarningIf tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated ; Definition at line 1279 of file TString.cxx. ◆ CompareTo() [1/2]. int TString::CompareTo ; (; const char * ; cs2, . ECaseCompare ; cmp = kExact . ); const. Compare a string to char *cs2. ; Returns returns zero if the two strings are identical, othe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTString.html:25091,Clear,Clear,25091,doc/master/classTString.html,https://root.cern,https://root.cern/doc/master/classTString.html,2,['Clear'],['Clear']
Usability,"String2; ; /// Define the full RNN Noption string adding the final options for all network; TString rnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234"");; ; rnnOptions.Append("":"");; rnnOptions.Append(inputLayoutString);; rnnOptions.Append("":"");; rnnOptions.Append(layoutString);; rnnOptions.Append("":"");; rnnOptions.Append(trainingStrategyString);; rnnOptions.Append("":"");; rnnOptions.Append(TString::Format(""Architecture=%s"", archString.Data()));; ; TString rnnName = ""TMVA_"" + TString(rnn_type);; factory->BookMethod(dataloader, TMVA::Types::kDL, rnnName, rnnOptions);; ; }; }; ; /**; ## Book TMVA fully connected dense layer models; ; **/; ; if (useTMVA_DNN) {; // Method DL with Dense Layer; TString inputLayoutString = TString::Format(""InputLayout=1|1|%d"", ntime * ninput);; ; TString layoutString(""Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"");; // Training strategies.; TString trainingString1(""LearningRate=1e-3,Momentum=0.0,Repetitions=1,""; ""ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,MaxEpochs=20""; ""DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"");; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString += trainingString1; // + ""|"" + trainingString2; ; // General Options.; TString dnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER:RandomSeed=0"");; ; dnnOptions.Append("":"");; dnnOptions.Append(inputLayoutString);; dnnOptions.Append("":"");; dnnOptions.Append(layoutString);; dnnOptions.Append("":"");; dnnOptions.Append(trainingStrategyString);; dnnOptions.Append("":"");; dnnOptions.Append(archString);; ; TString dnnName = ""TMVA_DNN"";; factory->BookMethod(dataloader, TMVA::Types::kDL, dnnName, dnnOptions);; }; ; /**; ## Book Keras recurrent models; ; Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; **/; ; if (useKeras) {; ; for (int i = 0; i < 3; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:67152,Learn,LearningRate,67152,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"StringLong(); TStringLong(Ssiz_t ic); TStringLong(const TString& s); TStringLong(const char* s); TStringLong(char c); TStringLong(const TSubString& sub); TStringLong(const TStringLong&); TStringLong(const char* s, Ssiz_t n); TStringLong(char c, Ssiz_t s); virtual~TStringLong(); TString&TString::Append(const char* cs); TString&TString::Append(const TString& s); TString&TString::Append(const char* cs, Ssiz_t n); TString&TString::Append(const TString& s, Ssiz_t n); TString&TString::Append(char c, Ssiz_t rep = 1); Double_tTString::Atof() const; Int_tTString::Atoi() const; Long64_tTString::Atoll() const; static TStringTString::BaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Bool_tTString::BeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::BeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tTString::Capacity() const; Ssiz_tTString::Capacity(Ssiz_t n); TString&TString::Chop(); static TClass*Class(); voidTString::Clear(); intTString::CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intTString::CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TRegexp& pat) const; Bool_tTString::Contains(TPRegexp& pat) const; Bool_tTString::Contains(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tTString::Contains(const TString& pat, TString::ECaseCompare cmp = kExact) const; TStringTString::Copy() const; Int_tTString::CountChar(Int_t c) const; const char*TString::Data() const; Bool_tTString::EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Bool_tTString::EqualTo(const TString& st, TString::ECaseCompare cmp = kExact) const; virtual voidFillBuffer(char*& buffer) const; Ssiz_tTString::First(char c) const; Ssiz_tTString::First(const char* cs) const; voidTString::Form(const char* fmt); static TStringTString::Format(const char* fmt);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStringLong.html:1621,Clear,Clear,1621,root/html534/TStringLong.html,https://root.cern,https://root.cern/root/html534/TStringLong.html,1,['Clear'],['Clear']
Usability,"StructNode * GetNodePtr () const;  Returns top node pointer. ;  ; void GLWidgetProcessedEventSlot (Event_t *event);  Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:2475,Undo,Undo,2475,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['Undo']
Usability,Study.; Definition at line 89 of file ToyMCStudy.cxx. ◆ initialize(). bool RooStats::ToyMCStudy::initialize ; (; void ; ). overridevirtual . Reimplemented from RooAbsStudy.; Definition at line 43 of file ToyMCStudy.cxx. ◆ IsA(). TClass * RooStats::ToyMCStudy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsStudy.; Definition at line 65 of file ToyMCStudy.h. ◆ merge(). RooDataSet * RooStats::ToyMCStudy::merge ; (; ). Definition at line 100 of file ToyMCStudy.cxx. ◆ SetParamPoint(). void RooStats::ToyMCStudy::SetParamPoint ; (; const RooArgSet & ; paramPoint). inline . Definition at line 54 of file ToyMCStudy.h. ◆ SetRandomSeed(). void RooStats::ToyMCStudy::SetRandomSeed ; (; unsigned int ; seed). inline . Definition at line 56 of file ToyMCStudy.h. ◆ SetToyMCSampler(). void RooStats::ToyMCStudy::SetToyMCSampler ; (; ToyMCSampler & ; t). inline . Definition at line 53 of file ToyMCStudy.h. ◆ Streamer(). void RooStats::ToyMCStudy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsStudy. ◆ StreamerNVirtual(). void RooStats::ToyMCStudy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file ToyMCStudy.h. Member Data Documentation. ◆ fParamPoint. RooArgSet RooStats::ToyMCStudy::fParamPoint. protected . Definition at line 62 of file ToyMCStudy.h. ◆ fRandomSeed. unsigned int RooStats::ToyMCStudy::fRandomSeed. protected . Definition at line 60 of file ToyMCStudy.h. ◆ fToyMCSampler. ToyMCSampler* RooStats::ToyMCStudy::fToyMCSampler. protected . Definition at line 61 of file ToyMCStudy.h. Libraries for RooStats::ToyMCStudy:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/ToyMCStudy.h; roofit/roostats/src/ToyMCStudy.cxx. RooStatsToyMCStudy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html:16390,Guid,Guide,16390,doc/master/classRooStats_1_1ToyMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html,1,['Guid'],['Guide']
Usability,Study::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 115; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 105; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 100; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 95; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 90; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 85; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 80; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 75; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 70; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 65; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 55; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 45; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 35; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 25; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 15; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 5; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#0] WARNING:Generation -- Fit parameter 'mtop' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#0] WARNING:Generation -- Fit parameter 'wtop' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf803_mcstudy_addons2.C. tutorialsroofitrf803_mcstudy_addons2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html:14192,Guid,Guide,14192,doc/master/rf803__mcstudy__addons2_8C.html,https://root.cern,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html,1,['Guid'],['Guide']
Usability,"Style="":""); ; # Draw the frame on the canvas; c = ROOT.TCanvas(""rf503_wspaceread"", ""rf503_wspaceread"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); ; c.SaveAs(""rf503_wspaceread.png""); 0x8fdb600 RooAddPdf::model = 1/1 [Auto,Clean] ; 0x91994b0/V- RooChebychev::bkg = 1 [Auto,Dirty] ; 0x880af10/V- RooRealVar::x = 5; 0x27be9c0/V- RooRealVar::a0 = 0.5; 0x2765460/V- RooRealVar::a1 = 0; 0x9279200/V- RooRealVar::bkgfrac = 0.5; 0x926e430/V- RooAddPdf::sig = 1/1 [Auto,Clean] ; 0x91f8100/V- RooGaussian::sig1 = 1 [Auto,Dirty] ; 0x880af10/V- RooRealVar::x = 5; 0x87e28d0/V- RooRealVar::mean = 5; 0x4735f60/V- RooRealVar::sigma1 = 0.5; 0x4735b70/V- RooRealVar::sig1frac = 0.8; 0x9205290/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x880af10/V- RooRealVar::x = 5; 0x87e28d0/V- RooRealVar::mean = 5; 0x873e5a0/V- RooRealVar::sigma2 = 1; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (sig); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf503_wspaceread.py. tutorialsroofitrf503_wspaceread.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf503__wspaceread_8py.html:3380,Guid,Guide,3380,doc/master/rf503__wspaceread_8py.html,https://root.cern,https://root.cern/doc/master/rf503__wspaceread_8py.html,1,['Guid'],['Guide']
Usability,"Style_t lstyle); Set the line style. void SetLineWidth(Width_t lwidth); Set the line width. TGeoNode * GetNode(const char* name) const; get the pointer to a daughter node. Int_t GetByteCount() const; get the total size in bytes for this volume. void FindOverlaps() const; loop all nodes marked as overlaps and find overlaping brothers. void RemoveNode(TGeoNode* node); Remove an existing daughter. TGeoNode * ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); Replace an existing daughter with a new volume having the same name but; possibly a new shape, position or medium. Not allowed for positioned assemblies.; For division cells, the new shape/matrix are ignored. void SelectVolume(Bool_t clear = kFALSE); Select this volume as matching an arbitrary criteria. The volume is added to; a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; to be reset at the end by calling the method with CLEAR=true. This will also clear; the list. void SetVisibility(Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:30906,clear,clear,30906,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,6,['clear'],['clear']
Usability,"SubBuffer ; (; size_t ; offset, . size_t ; start . ); const. Return sub-buffer of size start starting at element offset. ; Definition at line 47 of file CpuBuffer.cxx. ◆ GetUseCount(). template<typename AFloat > . size_t TMVA::DNN::TCpuBuffer< AFloat >::GetUseCount ; (; ); const. inline . Definition at line 105 of file CpuBuffer.h. ◆ operator AFloat *(). template<typename AFloat > . TMVA::DNN::TCpuBuffer< AFloat >::operator AFloat * ; (; ); const. inline . Definition at line 67 of file CpuBuffer.h. ◆ operator=() [1/2]. template<typename AFloat > . TCpuBuffer & TMVA::DNN::TCpuBuffer< AFloat >::operator= ; (; const TCpuBuffer< AFloat > & ; ). default . ◆ operator=() [2/2]. template<typename AFloat > . TCpuBuffer & TMVA::DNN::TCpuBuffer< AFloat >::operator= ; (; TCpuBuffer< AFloat > && ; ). default . ◆ operator[]() [1/2]. template<typename AFloat > . AFloat & TMVA::DNN::TCpuBuffer< AFloat >::operator[] ; (; size_t ; i). inline . Definition at line 89 of file CpuBuffer.h. ◆ operator[]() [2/2]. template<typename AFloat > . AFloat TMVA::DNN::TCpuBuffer< AFloat >::operator[] ; (; size_t ; i); const. inline . Definition at line 90 of file CpuBuffer.h. Member Data Documentation. ◆ fBuffer. template<typename AFloat > . std::shared_ptr<AFloat *> TMVA::DNN::TCpuBuffer< AFloat >::fBuffer. private . Definition at line 49 of file CpuBuffer.h. ◆ fDestructor. template<typename AFloat > . struct TMVA::DNN::TCpuBuffer::TDestructor TMVA::DNN::TCpuBuffer< AFloat >::fDestructor. private . ◆ fOffset. template<typename AFloat > . size_t TMVA::DNN::TCpuBuffer< AFloat >::fOffset. private . Definition at line 48 of file CpuBuffer.h. ◆ fSize. template<typename AFloat > . size_t TMVA::DNN::TCpuBuffer< AFloat >::fSize. private . Definition at line 47 of file CpuBuffer.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuBuffer.h; tmva/tmva/src/DNN/Architectures/Cpu/CpuBuffer.cxx. TMVADNNTCpuBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html:5884,Guid,Guide,5884,doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,1,['Guid'],['Guide']
Usability,"SubString::operator=TSubString & operator=(const char *s)Assign char* to sub-string.Definition TString.cxx:1696; TSubString::IsNullBool_t IsNull() constDefinition TString.h:129; TSubString::ToUppervoid ToUpper()Convert sub-string to upper-case.Definition TString.cxx:1754; TSubString::fStrTString & fStrDefinition TString.h:95; TSubString::SubStringErrorvoid SubStringError(Ssiz_t, Ssiz_t, Ssiz_t) constOutput error message.Definition TString.cxx:1766; TSubString::fBeginSsiz_t fBeginDefinition TString.h:96; TSubString::operator[]char & operator[](Ssiz_t i)Return character at pos i from sub-string. Check validity of i.Definition TString.cxx:1668; TSubString::fExtentSsiz_t fExtentDefinition TString.h:97; TSubString::AssertElementvoid AssertElement(Ssiz_t i) constCheck to make sure a sub-string index is in range.Definition TString.cxx:1775; TSubString::ToLowervoid ToLower()Convert sub-string to lower-case.Definition TString.cxx:1742; TSubString::Dataconst char * Data() constDefinition TString.h:736; TSubString::operator()char & operator()(Ssiz_t i)Return character at pos i from sub-string. No check on i.Definition TString.cxx:1677; TSubString::LengthSsiz_t Length() constDefinition TString.h:122; bool; double; int; unsigned int; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TString::Rep_t::fRawRawStr_t fRawDefinition TString.h:219; lTLine lDefinition textangle.C:4; t1auto * t1Definition textangle.C:20. corebasesrcTString.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:108386,Guid,Guide,108386,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Guid'],['Guide']
Usability,Sum(). void RooNonCentralChiSquare::SetForceSum ; (; bool ; flag). Definition at line 97 of file RooNonCentralChiSquare.cxx. ◆ SetMaxIters(). void RooNonCentralChiSquare::SetMaxIters ; (; Int_t ; mi). inline . Definition at line 31 of file RooNonCentralChiSquare.h. ◆ Streamer(). void RooNonCentralChiSquare::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooNonCentralChiSquare::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file RooNonCentralChiSquare.h. Member Data Documentation. ◆ fErrorTol. double RooNonCentralChiSquare::fErrorTol. protected . Definition at line 43 of file RooNonCentralChiSquare.h. ◆ fForceSum. bool RooNonCentralChiSquare::fForceSum. protected . Definition at line 45 of file RooNonCentralChiSquare.h. ◆ fHasIssuedConvWarning. bool RooNonCentralChiSquare::fHasIssuedConvWarning. mutableprotected . Definition at line 46 of file RooNonCentralChiSquare.h. ◆ fHasIssuedSumWarning. bool RooNonCentralChiSquare::fHasIssuedSumWarning. mutableprotected . Definition at line 47 of file RooNonCentralChiSquare.h. ◆ fMaxIters. Int_t RooNonCentralChiSquare::fMaxIters. protected . Definition at line 44 of file RooNonCentralChiSquare.h. ◆ k. RooRealProxy RooNonCentralChiSquare::k. protected . Definition at line 41 of file RooNonCentralChiSquare.h. ◆ lambda. RooRealProxy RooNonCentralChiSquare::lambda. protected . Definition at line 42 of file RooNonCentralChiSquare.h. ◆ x. RooRealProxy RooNonCentralChiSquare::x. protected . Definition at line 40 of file RooNonCentralChiSquare.h. Libraries for RooNonCentralChiSquare:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitmore/inc/RooNonCentralChiSquare.h; roofit/roofitmore/src/RooNonCentralChiSquare.cxx. RooNonCentralChiSquare. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:01 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:80015,Guid,Guide,80015,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['Guid'],['Guide']
Usability,"Sumw2void Sumw2() overrideEnable calculation of errors.Definition THnSparse.cxx:948; THnSparse::GetNbinsLong64_t GetNbins() const overrideDefinition THnSparse.h:93; THnSparse::CreateIterROOT::Internal::THnBaseBinIter * CreateIter(Bool_t respectAxisRange) const overrideCreate an iterator over all filled bins of a THnSparse.Definition THnSparse.cxx:896; THnSparse::GetBinIndexForCurrentBinLong64_t GetBinIndexForCurrentBin(Bool_t allocate)Return the index for fCurrentBinIndex.Definition THnSparse.cxx:789; TIterDefinition TCollection.h:235; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::LastTObject * Last() const overrideReturn the object in the last filled slot. Returns 0 if no entries.Definition TObjArray.cxx:506; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AddLastvoid AddLast(TObject *obj) overrideAdd object in the next empty slot in the array.Definition TObjArray.cxx:178; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; bool; double; int; unsigned int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. histhistsrcTHnSparse.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:50610,Clear,Clearvirtual,50610,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,3,"['Clear', 'Guid']","['Clear', 'Clearvirtual', 'Guide']"
Usability,"Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:12002,learn,learning,12002,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['learn'],['learning']
Usability,"SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidRooArgSet::writeToFile(const char* fileName) const; virtual voidRooArgSet::writeToStream(ostream& os, Bool_t compact, const char* section = 0) const. protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidRooAbsProxy::changeNormSet(const RooArgSet* newNormSet); virtual Bool_tchangePointer(const RooAbsCollection& newServerSet, Bool_t nameChange = kFALSE, Bool_t factoryInitMode = kFALSE); Bool_tRooArgSet::checkForDup(const RooAbsArg& arg, Bool_t silent) const; voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; Bool_t_defShapeServer; Bool_t_defValueServer; TIterator*_iter! do not persist; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSetProxy.html:11690,clear,clearStructureTags,11690,root/html534/RooSetProxy.html,https://root.cern,https://root.cern/root/html534/RooSetProxy.html,1,['clear'],['clearStructureTags']
Usability,"SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidRooArgSet::writeToFile(const char* fileName) const; virtual voidRooArgSet::writeToStream(ostream& os, Bool_t compact, const char* section = 0) const. protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidRooAbsProxy::changeNormSet(const RooArgSet* newNormSet); virtual Bool_tchangePointer(const RooAbsCollection& newServerSet, Bool_t nameChange = kFALSE, Bool_t factoryInitMode = kFALSE); Bool_tRooArgSet::checkForDup(const RooAbsArg& arg, Bool_t silent) const; voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionRooPrintable::kArgs; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static TObject::EStatusBitsTObject::kHasUUID; static RooPrintable::StyleOptionRooPrintable::kInline; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSetProxy.html:11680,clear,clearStructureTags,11680,root/html602/RooSetProxy.html,https://root.cern,https://root.cern/root/html602/RooSetProxy.html,2,['clear'],['clearStructureTags']
Usability,"SysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:4010,Clear,Clear,4010,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,1,['Clear'],['Clear']
Usability,"System.h; TTree.h; EventDefinition collection_proxies.C:172; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::GetEntryvirtual Int_t GetEntry(Long64_t entry=0, Int_t getall=0)Read all leaves of entry and return total number of bytes read.Definition TBranch.cxx:1706; TBranch::SetAddressvirtual void SetAddress(void *add)Set address of this branch.Definition TBranch.cxx:2682; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::Showvirtual void Show(Long64_t entry=-1, Int_t lenmax=20)Print values of all active leaves for entry.Definition TTree.cxx:9385; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::StartViewervirtual void StartViewer()Start the TTreeViewer on this tree.Definition TTree.cxx:9459; mTMarker mDefinition textangle.C:8. AuthorRene Brun ; Definition in file tree4.C. tutorialstreetree4.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:6844,Guid,Guide,6844,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,1,['Guid'],['Guide']
Usability,"T &Elt)Definition RVec.hxx:804; ROOT::Detail::VecOps::RVecImpl::pop_back_valT pop_back_val()Definition RVec.hxx:641; ROOT::Detail::VecOps::RVecImpl::~RVecImpl~RVecImpl()Definition RVec.hxx:577; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(const RVecImpl &RHS)Definition RVec.hxx:995; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CS, const_iterator CE)Definition RVec.hxx:721; ROOT::Detail::VecOps::RVecImpl::referencetypename SuperClass::reference referenceDefinition RVec.hxx:567; ROOT::Detail::VecOps::RVecImpl::appendvoid append(size_type NumInputs, const T &Elt)Append NumInputs copies of Elt to the end.Definition RVec.hxx:665; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CI)Definition RVec.hxx:704; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(RVecImpl &&RHS)Definition RVec.hxx:1048; ROOT::Detail::VecOps::RVecImpl::pop_back_nvoid pop_back_n(size_type NumItems)Definition RVec.hxx:631; ROOT::Detail::VecOps::RVecImpl::clearvoid clear()Definition RVec.hxx:586; ROOT::Detail::VecOps::RVecImpl::RVecImplRVecImpl(const RVecImpl &)=delete; ROOT::Detail::VecOps::RVecImpl::appendvoid append(std::initializer_list< T > IL)Definition RVec.hxx:674; ROOT::Detail::VecOps::RVecImpl::insertvoid insert(iterator I, std::initializer_list< T > IL)Definition RVec.hxx:917; ROOT::Internal::VecOps::SmallVectorBaseThis is all the stuff common to all SmallVectors.Definition RVec.hxx:138; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase()=delete; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase(void *FirstEl, size_t TotalCapacity)Definition RVec.hxx:156; ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMaxstatic constexpr size_t SizeTypeMax()The maximum value of the Size_T used.Definition RVec.hxx:153; ROOT::Internal::VecOps::SmallVectorBase::fCapacitySize_T fCapacityAlways >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.Definition RVec.hxx:150; ROOT::Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:134106,clear,clearvoid,134106,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,4,['clear'],"['clear', 'clearvoid']"
Usability,"T 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075479,Simpl,Simple,1075479,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:21312,learn,learning,21312,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,5,['learn'],['learning']
Usability,"T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr);  Change branch address, dealing with clone trees properly. ;  ; virtual Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr);  Verify the validity of the type of addr before calling SetBranchAddress. ;  ; virtual void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr);  Set branch status to Process or DoNotProcess. ;  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual Int_t SetCacheSize (Long64_t cachesize=-1);  Set maximum size of the file cache . ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual void SetDirectory (TDirectory *dir);  Change the tree's directory. ;  ; virtual void SetEntryList (TEntryList *list, Option_t *opt="""");  Set an EntryList. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:21414,learn,learning,21414,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,1,['learn'],['learning']
Usability,"T Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderRecording. class TRecorderRecording: public TRecorderState. Represents state of TRecorder when recording events. Function Members (Methods); public:. TRecorderRecording(const TRecorderRecording&); static TClass*Class(); voidFilterEventPave(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderRecording&operator=(const TRecorderRecording&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRecordCmdEvent(const char* line); voidRecordExtraEvent(TString line, TTime extTime); voidRecordGuiBldEvent(Event_t* e); voidRecordGuiCNEvent(Event_t* e); voidRecordGuiEvent(Event_t* e, Window_t wid); voidRecordMousePosition(); voidRecordPave(const TObject* obj); voidRecordText(const TObject* obj); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); voidStartEditing(); virtual voidStop(TRecorder* r, Bool_t guiCommand); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderRecording(TRecorder* r, const char* filename, Option_t* option, Window_t* w, Int_t winCount); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tStartRecording(). private:. (unknown)(); voidCopyEvent(Event_t* e, Window_t wid); Bool_tIsFiltered(Window_t id); voidSetTypeOfConfigureNotify(Event_t* e). Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderRecording.html:772,Pause,Pause,772,root/html528/TRecorderRecording.html,https://root.cern,https://root.cern/root/html528/TRecorderRecording.html,6,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,"T objects.Definition TBrowser.h:37; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::ReadStreamLong64_t ReadStream(std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ') overrideRead from filename as many columns as variables in the ntuple the function returns the number of rows...Definition TNtuple.cxx:220; TNtuple::~TNtuple~TNtuple() overrideDefault destructor for an Ntuple.Definition TNtuple.cxx:103; TNtuple::TNtupleTNtuple(const TNtuple &)=delete; TNtuple::GetNvarvirtual Int_t GetNvar() constDefinition TNtuple.h:55; TNtuple::ResetBranchAddressesvoid ResetBranchAddresses() overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:147; TNtuple::GetArgsFloat_t * GetArgs() constDefinition TNtuple.h:56; TNtuple::fNvarInt_t fNvarNumber of columns.Definition TNtuple.h:31; TNtuple::ResetBranchAddressvoid ResetBranchAddress(TBranch *) overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:133; TNtuple::Browsevoid Browse(TBrowser *b) overrideBrowse content of the ntuple.Definition TNtuple.cxx:158; TNtuple::operator=TNtuple & operator=(const TNtuple &)=delete; TNtuple::FillInt_t Fill(Double_t x0)Definition TNtuple.h:49; TNtuple::TNtupleTNtuple()Default constructor for Ntuple.Definition TNtuple.cxx:46; TNtuple::FillInt_t Fill(Int_t x0)Definition TNtuple.h:48; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TNtuple::fArgsFloat_t * fArgs! [fNvar] Array of variablesDefinition TNtuple.h:32; TNtuple::CloneTreeTTree * CloneTree(Long64_t nentries=-1, Option_t *option="""") overrideCreate a clone of this tree and copy nentries.Definition TNtuple.cxx:119; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; int; xDouble_t x[n]Definition legend1.C:17. treetreeincTNtuple.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNtuple_8h_source.html:5030,Guid,Guide,5030,doc/master/TNtuple_8h_source.html,https://root.cern,https://root.cern/doc/master/TNtuple_8h_source.html,1,['Guid'],['Guide']
Usability,"T(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2569,progress bar,progress bar,2569,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['progress bar'],['progress bar']
Usability,"T(double x)Definition ChebyshevPol.h:34; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, DisplacementVector2D< T, U > &v)Definition DisplacementVector2D.h:515; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701. mathgenvectorincMathGenVectorPositionVector3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html:35924,Guid,Guide,35924,doc/master/GenVector_2PositionVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html,1,['Guid'],['Guide']
Usability,"T, you can do so by following the instructions in the appendix, or on the ROOT web site: http://root.cern.ch/root/Availability.html; 2.1 Setting the Environment Variables; Before you can run ROOT you need to set the environment variable ROOTSYS and change your path to include root/bin and library path variables to include root/lib. Please note: the syntax is for bash, if you are running tcsh you will have to use setenv instead of export. Define the variable $ROOTSYS to the directory where you unpacked the ROOT:. $ export ROOTSYS=$HOME/root. Add ROOTSYS/bin to your PATH:. $ export PATH=$PATH:$ROOTSYS/bin. Setting the Library Path. On HP-UX, before executing the interactive module, you must set the library path:; $ export SHLIB_PATH=$SHLIB_PATH:$ROOTSYS/lib; On AIX, before executing the interactive module, you must set the library path:; $ [ -z ""$LIBPATH"" ] && export LIBPATH=/lib:/usr/lib; $ export LIBPATH=$LIBPATH:$ROOTSYS/lib; On Linux, Solaris, Alpha OSF and SGI, before executing the interactive module, you must set the library path:; $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib; On Solaris, in case your LD_LIBRARY_PATH is empty, you should set it:; $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROOTSYS/lib:/usr/dt/lib; If you use the afs version you should set (vers = version number, arch = architecture):; $ export ROOTSYS=/afs/cern.ch/sw/lcg/external/root/vers/arch/root; If ROOT was installed in $HOME/myroot directory on a local machine, one can do:; cd $HOME/myroot; . bin/thisroot.sh // or source bin/thisroot.sh; The new $ROOTSYS/bin/thisroot.[c]sh scripts will set correctly the ROOTSYS, LD_LIBRARY_PATH or other paths depending on the platform and the MANPATH. To run the program just type: root.; 2.2 Start and Quit a ROOT Session; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:31017,UX,UX,31017,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['UX'],['UX']
Usability,"T-latest/x86_64-slc6-gcc49-opt/setup.sh ; # on CVMFS; source /cvmfs/sft.cern.ch/lcg/views/ROOT-latest/x86_64-slc6-gcc49-opt/setup.csh. For all the other compilers (icc, clang,...) and systems; In this case we can use the script that is used by jenkins. The script expects 4 arguments:. LABEL is system OS and version. E.g. 'slc6', 'centos7', 'fedora14', 'mac1012', etc.; COMPILER is the compiler and version. E.g. 'icc16', 'clang37', 'native' (for the native compiler), etc.; BUILDTYPE is the type of the build. E.g. Release, Debug; EXTERNALS is the label for the set of versions of the externals. Typically 'ROOT-date', but 'ROOT-latest' is a safe bet. . git clone http://root.cern.ch/git/rootspi.git ; source rootspi/jenkins/jk-setup.sh slc6 icc14 Release ROOT-latest. Debugging an existing nightly build; Often when a build has failed in the nightlies we are required to debug it. The following are the instructions to get the correct environment for starting the debug session. As input you need to know the node name and the working directory in the build node (and the password of the sftnight account). You can get this information from the logs in Jenkins or CDash.; $ ssh sftnight@<node-name>; $ cd <work-directory>; $ source setup.sh; $ cd build; $ ctest -V -R <failing test>; or; $ make <failing target>. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:3873,Guid,Guides,3873,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"T/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNodeBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNodeBase(). ROOT::RGeomNodeBase::RGeomNodeBase ; (; int ; _id = 0). inline . Definition at line 56 of file RGeomData.hxx. Member Function Documentation. ◆ GetArg(). const char * ROOT::RGeomNodeBase::GetArg ; (; int ; kind). inline . Returns argument for regexp. ; Definition at line 61 of file RGeomData.hxx. ◆ IsVisible(). bool ROOT::RGeomNodeBase::IsVisible ; (; ); const. inline . Definition at line 58 of file RGeomData.hxx. Member Data Documentation. ◆ chlds. std::vector<int> ROOT::RGeomNodeBase::chlds. list of childs id ; Definition at line 48 of file RGeomData.hxx. ◆ color. std::string ROOT::RGeomNodeBase::color. rgb code in hex format ; Definition at line 52 of file RGeomData.hxx. ◆ id. int ROOT::RGeomNodeBase::id {0}. node id, index in array ; Definition at line 46 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeomNodeBase::material. name of the material ; Definition at line 53 of file RGeomData.hxx. ◆ name. std::string ROOT::RGeomNodeBase::name. node name ; Definition at line 47 of file RGeomData.hxx. ◆ nochlds. bool ROOT::RGeomNodeBase::nochlds {false}. how far in hierarchy depth should be scanned ; Definition at line 50 of file RGeomData.hxx. ◆ sortid. int ROOT::RGeomNodeBase::sortid {0}. ! place in sorted array, to check cuts, or id of original node when used search structures ; Definition at line 54 of file RGeomData.hxx. ◆ vis. int ROOT::RGeomNodeBase::vis {0}. visibility flag, 0 - off, 1 - only when level==0, 99 - always ; Definition at line 49 of file RGeomData.hxx. Libraries for ROOT::RGeomNodeBase:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNodeBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNodeBase.html:2967,Guid,Guide,2967,doc/master/classROOT_1_1RGeomNodeBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNodeBase.html,1,['Guid'],['Guide']
Usability,"T2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs resources that are taken by using the default error handler.Definition TErrorDefaultHandler.cxx:47; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetMacroPathTString & GetMacroPath()Definition TROOT.cxx:476; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854; v@ vDefinition rootcling_impl.cxx:3699; FileStat_tDefinition TSystem.h:122; FileStat_t::fModeInt_t fModeDefinition TSystem.h:125; socketDefinition civetweb.c:1893; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. corebasesrcTROOT.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:174279,Guid,Guide,174279,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['Guid'],['Guide']
Usability,T::Experimental::REveGeoShapeExtract::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Experimental::REveGeoShapeExtract::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file REveGeoShapeExtract.hxx. Member Data Documentation. ◆ fElements. TList* ROOT::Experimental::REveGeoShapeExtract::fElements. protected . Definition at line 37 of file REveGeoShapeExtract.hxx. ◆ fMiniFrame. Bool_t ROOT::Experimental::REveGeoShapeExtract::fMiniFrame. protected . Definition at line 35 of file REveGeoShapeExtract.hxx. ◆ fRGBA. Float_t ROOT::Experimental::REveGeoShapeExtract::fRGBA[4]. protected . Definition at line 30 of file REveGeoShapeExtract.hxx. ◆ fRGBALine. Float_t ROOT::Experimental::REveGeoShapeExtract::fRGBALine[4]. protected . Definition at line 31 of file REveGeoShapeExtract.hxx. ◆ fRnrElements. Bool_t ROOT::Experimental::REveGeoShapeExtract::fRnrElements. protected . Definition at line 33 of file REveGeoShapeExtract.hxx. ◆ fRnrFrame. Bool_t ROOT::Experimental::REveGeoShapeExtract::fRnrFrame. protected . Definition at line 34 of file REveGeoShapeExtract.hxx. ◆ fRnrSelf. Bool_t ROOT::Experimental::REveGeoShapeExtract::fRnrSelf. protected . Definition at line 32 of file REveGeoShapeExtract.hxx. ◆ fShape. TGeoShape* ROOT::Experimental::REveGeoShapeExtract::fShape. protected . Definition at line 36 of file REveGeoShapeExtract.hxx. ◆ fTrans. Double_t ROOT::Experimental::REveGeoShapeExtract::fTrans[16]. protected . Definition at line 29 of file REveGeoShapeExtract.hxx. Libraries for ROOT::Experimental::REveGeoShapeExtract:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveGeoShapeExtract.hxx; graf3d/eve7/src/REveGeoShapeExtract.cxx. ROOTExperimentalREveGeoShapeExtract. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html:19382,Guid,Guide,19382,doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveGeoShapeExtract.html,1,['Guid'],['Guide']
Usability,T::Experimental::REveSelectorToEventList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file REveTreeTools.hxx. ◆ IsA(). TClass * ROOT::Experimental::REveSelectorToEventList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 42 of file REveTreeTools.hxx. ◆ operator=(). REveSelectorToEventList & ROOT::Experimental::REveSelectorToEventList::operator= ; (; const REveSelectorToEventList & ; ). privatedelete . ◆ Process(). Bool_t REveSelectorToEventList::Process ; (; Long64_t ; entry). overridevirtual . Process entry. ; Reimplemented from TSelector.; Definition at line 45 of file REveTreeTools.cxx. ◆ Streamer(). void ROOT::Experimental::REveSelectorToEventList::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Experimental::REveSelectorToEventList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file REveTreeTools.hxx. ◆ Version(). Int_t ROOT::Experimental::REveSelectorToEventList::Version ; (; ); const. inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 39 of file REveTreeTools.hxx. Member Data Documentation. ◆ fEvList. TEventList* ROOT::Experimental::REveSelectorToEventList::fEvList {nullptr}. protected . Definition at line 32 of file REveTreeTools.hxx. ◆ fInputList. TList ROOT::Experimental::REveSelectorToEventList::fInputList. protected . Definition at line 33 of file REveTreeTools.hxx. Libraries for ROOT::Experimental::REveSelectorToEventList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveTreeTools.hxx; graf3d/eve7/src/REveTreeTools.cxx. ROOTExperimentalREveSelectorToEventList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:21013,Guid,Guide,21013,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,1,['Guid'],['Guide']
Usability,"T::Experimental::RNTupleReadOptions::HasMetricsEnabled ; (; ); const. inline . Definition at line 61 of file RNTupleReadOptions.hxx. ◆ SetClusterBunchSize(). void ROOT::Experimental::RNTupleReadOptions::SetClusterBunchSize ; (; unsigned int ; val). inline . Definition at line 56 of file RNTupleReadOptions.hxx. ◆ SetClusterCache(). void ROOT::Experimental::RNTupleReadOptions::SetClusterCache ; (; EClusterCache ; val). inline . Definition at line 53 of file RNTupleReadOptions.hxx. ◆ SetMetricsEnabled(). void ROOT::Experimental::RNTupleReadOptions::SetMetricsEnabled ; (; bool ; enable). inline . Definition at line 62 of file RNTupleReadOptions.hxx. ◆ SetUseImplicitMT(). void ROOT::Experimental::RNTupleReadOptions::SetUseImplicitMT ; (; EImplicitMT ; val). inline . Definition at line 59 of file RNTupleReadOptions.hxx. Member Data Documentation. ◆ fClusterBunchSize. unsigned int ROOT::Experimental::RNTupleReadOptions::fClusterBunchSize = 1. private . Definition at line 45 of file RNTupleReadOptions.hxx. ◆ fClusterCache. EClusterCache ROOT::Experimental::RNTupleReadOptions::fClusterCache = EClusterCache::kDefault. private . Definition at line 44 of file RNTupleReadOptions.hxx. ◆ fEnableMetrics. bool ROOT::Experimental::RNTupleReadOptions::fEnableMetrics = false. private . If true, the RNTupleReader will track metrics straight from its construction, as if calling RNTupleReader::EnableMetrics() before having created the object. ; Definition at line 49 of file RNTupleReadOptions.hxx. ◆ fUseImplicitMT. EImplicitMT ROOT::Experimental::RNTupleReadOptions::fUseImplicitMT = EImplicitMT::kDefault. private . Definition at line 46 of file RNTupleReadOptions.hxx. Libraries for ROOT::Experimental::RNTupleReadOptions:. [legend]; The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RNTupleReadOptions.hxx. ROOTExperimentalRNTupleReadOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReadOptions.html:4286,Guid,Guide,4286,doc/master/classROOT_1_1Experimental_1_1RNTupleReadOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReadOptions.html,1,['Guid'],['Guide']
Usability,"T::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ; data, . TF1 * ; f1, . Foption_t & ; option, . const ROOT::Math::MinimizerOptions & ; moption . ). fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ; N.B. ownership of fit data is passed to the UnBinFit function which will be responsible of deleting the data after the fit. User calling this function MUST NOT delete UnBinData after calling it. ; Definition at line 821 of file HFitImpl.cxx. Variable Documentation. ◆ gDefaultErrorDef. double ROOT::Fit::gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef(). Definition at line 48 of file Fitter.cxx. ◆ gInitialResultStatus. const int ROOT::Fit::gInitialResultStatus = -99. Definition at line 43 of file FitResult.cxx. ROOTFit. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:17985,Guid,Guide,17985,doc/v632/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html,1,['Guid'],['Guide']
Usability,"T::Math::GSLRngROOTWrapper< Engine >::FreeEngine ; (; gsl_rng * ; r). inlinestatic . Definition at line 71 of file GSLRngROOTWrapper.h. ◆ IntRndm(). template<class Engine > . static unsigned long ROOT::Math::GSLRngROOTWrapper< Engine >::IntRndm ; (; void * ; p). inlinestatic . Definition at line 57 of file GSLRngROOTWrapper.h. ◆ Max(). template<class Engine > . static unsigned long ROOT::Math::GSLRngROOTWrapper< Engine >::Max ; (; ). inlinestatic . Definition at line 79 of file GSLRngROOTWrapper.h. ◆ Min(). template<class Engine > . static unsigned long ROOT::Math::GSLRngROOTWrapper< Engine >::Min ; (; ). inlinestatic . Definition at line 80 of file GSLRngROOTWrapper.h. ◆ Name(). template<class Engine > . static std::string ROOT::Math::GSLRngROOTWrapper< Engine >::Name ; (; ). inlinestatic . Definition at line 82 of file GSLRngROOTWrapper.h. ◆ Rndm(). template<class Engine > . static double ROOT::Math::GSLRngROOTWrapper< Engine >::Rndm ; (; void * ; p). inlinestatic . Definition at line 56 of file GSLRngROOTWrapper.h. ◆ Seed(). template<class Engine > . static void ROOT::Math::GSLRngROOTWrapper< Engine >::Seed ; (; void * ; p, . unsigned long ; seed . ). inlinestatic . Definition at line 59 of file GSLRngROOTWrapper.h. ◆ Size(). template<class Engine > . static size_t ROOT::Math::GSLRngROOTWrapper< Engine >::Size ; (; ). inlinestatic . Definition at line 81 of file GSLRngROOTWrapper.h. Member Data Documentation. ◆ fEngine. template<class Engine > . Engine* ROOT::Math::GSLRngROOTWrapper< Engine >::fEngine = nullptr. Definition at line 41 of file GSLRngROOTWrapper.h. Collaboration diagram for ROOT::Math::GSLRngROOTWrapper< Engine >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; math/mathmore/src/GSLRngROOTWrapper.h. ROOTMathGSLRngROOTWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html:3968,Guid,Guide,3968,doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLRngROOTWrapper.html,1,['Guid'],['Guide']
Usability,"T::Math::IGenFunction* TUnuranContDist::fCdf. private . pointer to the cdf (cumulative dist.) ; Definition at line 201 of file TUnuranContDist.h. ◆ fDPdf. const ROOT::Math::IGenFunction* TUnuranContDist::fDPdf. private . pointer to the derivative of the pdf ; Definition at line 200 of file TUnuranContDist.h. ◆ fHasArea. bool TUnuranContDist::fHasArea. private . flag to control if distribution has a pre-computed area below the pdf ; Definition at line 212 of file TUnuranContDist.h. ◆ fHasDomain. bool TUnuranContDist::fHasDomain. private . flag to control if distribution has a defined domain (otherwise is [-inf,+inf] ; Definition at line 210 of file TUnuranContDist.h. ◆ fHasMode. bool TUnuranContDist::fHasMode. private . flag to control if distribution has a pre-computed mode ; Definition at line 211 of file TUnuranContDist.h. ◆ fIsLogPdf. bool TUnuranContDist::fIsLogPdf. private . flag to control if function pointer represent log of pdf ; Definition at line 209 of file TUnuranContDist.h. ◆ fMode. double TUnuranContDist::fMode. private . mode of the distribution ; Definition at line 205 of file TUnuranContDist.h. ◆ fOwnFunc. bool TUnuranContDist::fOwnFunc. private . flag to indicate if class manages the function pointers ; Definition at line 213 of file TUnuranContDist.h. ◆ fPdf. const ROOT::Math::IGenFunction* TUnuranContDist::fPdf. private . pointer to the pdf ; Definition at line 199 of file TUnuranContDist.h. ◆ fXmax. double TUnuranContDist::fXmax. private . upper value of the domain ; Definition at line 204 of file TUnuranContDist.h. ◆ fXmin. double TUnuranContDist::fXmin. private . lower value of the domain ; Definition at line 203 of file TUnuranContDist.h. Libraries for TUnuranContDist:. [legend]; The documentation for this class was generated from the following files:; math/unuran/inc/TUnuranContDist.h; math/unuran/src/TUnuranContDist.cxx. TUnuranContDist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranContDist.html:14357,Guid,Guide,14357,doc/master/classTUnuranContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html,1,['Guid'],['Guide']
Usability,"T::Math::VirtualIntegrator ; ROOT::Math::VirtualIntegratorMultiDim ; ROOT::Math::VirtualIntegratorOneDim ; ROOT::Math::WrappedMultiTF1 ; ROOT::Math::WrappedTF1 ; ROOT::MathMore ; ROOT::Minuit2::CombinedMinimizer ; ROOT::Minuit2::FCNBase ; ROOT::Minuit2::FCNGradientBase ; ROOT::Minuit2::FumiliFCNBase ; ROOT::Minuit2::FumiliMinimizer ; ROOT::Minuit2::FunctionMinimizer ; ROOT::Minuit2::FunctionMinimum ; ROOT::Minuit2::GenericFunction ; ROOT::Minuit2::MinosError ; ROOT::Minuit2::Minuit2Minimizer ; ROOT::Minuit2::MinuitParameter ; ROOT::Minuit2::MnApplication ; ROOT::Minuit2::MnContours ; ROOT::Minuit2::MnFumiliMinimize ; ROOT::Minuit2::MnHesse ; ROOT::Minuit2::MnMigrad ; ROOT::Minuit2::MnMinimize ; ROOT::Minuit2::MnMinos ; ROOT::Minuit2::MnPlot ; ROOT::Minuit2::MnScan ; ROOT::Minuit2::MnSimplex ; ROOT::Minuit2::MnStrategy ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:20527,Simpl,SimplexMinimizer,20527,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['Simpl'],['SimplexMinimizer']
Usability,"T::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY])`, a 2d gaussian including a correlation parameter.; 179 3. Three Dimensional functions:; 180 - `xyzgaus` is for a 3d Gaussians without correlations:; 181 `[Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2))`; 182 ; 183 ; 184 ### An expanded note on variables and parameters; 185 ; 186 In a TFormula, a variable is a defined by a name `x`, `y`, `z` or `t` or an; 187 index like `x[0]`, `x[1]`, `x[2]`; that is `x[N]` where N is an integer.; 188 ; 189 ```; 190 TFormula("""", ""x[0] * x[1] + 10""); 191 ```; 192 ; 193 Parameters are similar and can take any name. It is specified using brackets; 194 e.g. `[expected_mass]` or `[0]`.; 195 ; 196 ```; 197 TFormula("""", ""exp([expected_mass])-1""); 198 ```; 199 ; 200 Variables and parameters can be combined in the same TFormula. Here we consider; 201 a very simple case where we have an exponential decay after some time t and a; 202 number of events with timestamps for which we want to evaluate this function.; 203 ; 204 ```; 205 TFormula tf ("""", ""[0]*exp(-[1]*t)"");; 206 tf.SetParameter(0, 1);; 207 tf.SetParameter(1, 0.5);; 208 ; 209 for (auto & event : events) {; 210 tf.Eval(event.t);; 211 }; 212 ```; 213 ; 214 The distinction between variables and parameters arose from the TFormula's; 215 application in fitting. There parameters are fitted to the data provided; 216 through variables. In other applications this distinction can go away.; 217 ; 218 Parameter values can be provided dynamically using `TFormula::EvalPar`; 219 instead of `TFormula::Eval`. In this way parameters can be used identically; 220 to variables. See below for an example that uses only parameters to model a; 221 function.; 222 ; 223 ```; 224 Int_t params[2] = {1, 2}; // {vel_x, vel_y}; 225 TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");; 226 ; 227 tf.EvalPar(nullptr, params);; 228 ```; 229 ; 230 ### A note on operators; 231 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:7841,simpl,simple,7841,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['simpl'],['simple']
Usability,"T::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:2488,simpl,simple,2488,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,['simpl'],['simple']
Usability,"T; » CORE; » BASE; » TTask. class TTask: public TNamed. TTask is a base class that can be used to build a complex tree of Tasks.; Each TTask derived class may contain other TTasks that can be executed; recursively, such that a complex program can be dynamically built and executed; by invoking the services of the top level Task or one of its subtasks. Use the TTask::Add function to add a subtask to an existing TTask.; To execute a TTask, one calls the ExecuteTask function. ExecuteTask will; call recursively:; - the TTask::Exec function of the derived class; - TTask::ExecuteTasks to execute for each task the list of its subtasks.; If the top level task (see example below) is added to the list of Root; browsable objects, the tree of tasks can be visualized by the Root browser.; The browser can be used to start a task, set break points at the beginning; of a task or when the task has completed. At a breakpoint, data structures; generated by the execution up this point may be inspected asyncronously; and then the execution can be resumed by selecting the ""Continue"" function; of a task. A Task may be active or inactive (controlled by TTask::SetActive).; When a task is not active, its sub tasks are not executed. A TTask tree may be made persistent, saving the status of all the tasks. The picture in the Root browser below has been generated by executing; the following script:. { //------------------script tasks.C---------------------------; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""geomInit"",""Initialize ALICE geometry"");; TTask *matinit = new TTask(""matInit"",""Initialize ALICE materials"");; TTask *physinit = new TTask(""physInit"",""Initialize Physics processes"");; TTask *tracker = new TTask(""tracker"",""Track reconstruction manager"");; TTask *tpcrec = new TTask(""tpcrec"",""TPC reconstruction"");; TTask *itsrec = new TTask(""itsrec"",""ITS reconstruction"");; TTask *muonrec = new TTask(""muonRec"",""Muon Reconstruction"");; TTask *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTask.html:1260,resume,resumed,1260,root/html528/TTask.html,https://root.cern,https://root.cern/root/html528/TTask.html,6,['resume'],['resumed']
Usability,"TApplication::ApplicationName ; (; ); const. inlinevirtual . Reimplemented in TApplicationRemote.; Definition at line 128 of file TApplication.h. ◆ Argc(). Int_t TApplication::Argc ; (; ); const. inline . Definition at line 140 of file TApplication.h. ◆ Argv() [1/2]. char ** TApplication::Argv ; (; ); const. inline . Definition at line 141 of file TApplication.h. ◆ Argv() [2/2]. char * TApplication::Argv ; (; Int_t ; index); const. Return specified argument. ; Definition at line 329 of file TApplication.cxx. ◆ Class(). static TClass * TApplication::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplication::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplication::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 167 of file TApplication.h. ◆ ClearInputFiles(). void TApplication::ClearInputFiles ; (; ). Clear list containing macro files passed as program arguments. ; This method is called from TRint::Run() to ensure that the macro files are only executed the first time Run() is called. ; Definition at line 318 of file TApplication.cxx. ◆ Close(). void TApplication::Close ; (; TApplication * ; app). staticprotected . Static function used to close a remote application. ; Definition at line 2070 of file TApplication.cxx. ◆ CreateApplication(). void TApplication::CreateApplication ; (; ). static . Static function used to create a default application environment. ; Definition at line 1975 of file TApplication.cxx. ◆ DeclFileName(). static const char * TApplication::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 167 of file TApplication.h. ◆ ExecuteFile(). Longptr_t TApplication::ExecuteFile ; (; const char * ; file, . Int_t * ; error = nullptr, . Bool_t ; keep = kFALSE . ). static . Execute a file containing a C++ macro (static method). ; Can be used whi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:24553,Clear,Clear,24553,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['Clear'],['Clear']
Usability,"TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TArrow::DrawArrowvirtual TArrow * DrawArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0, Option_t *option="""")Draw this arrow with new coordinates.Definition TArrow.cxx:135; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; c1ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/analyze_8C.html:5327,simpl,simple,5327,doc/master/analyze_8C.html,https://root.cern,https://root.cern/doc/master/analyze_8C.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLParametricPlot.html:5167,simpl,simple,5167,root/html528/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html528/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLParametricPlot.html:5282,simpl,simple,5282,root/html530/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html530/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,"TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. Int_tfColorScheme; TGLParametricEquation*fEquation; TGL2DArray<TGLParametricPlot::Vertex_t>fMesh; Int_tfMeshSize; Bool_tfShowMesh. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera); Constructor. Bool_t InitGeometry(); Build mesh. The surface is 'immutable':; the only reason to rebuild it - the change in size or; if one of equations contain reference to TF2 function, whose; parameters were changed. void StartPan(Int_t px, Int_t py); User clicks right mouse button (in a pad). void Pan(Int_t px, Int_t py); User's moving mouse cursor, with middle mouse button pressed (for pad).; Calculate 3d shift related to 2d mouse movement. char * GetPlotInfo(Int_t px, Int_t py); No object info yet. void AddOption(const TString& option); No additional options for parametric surfaces. void ProcessEvent(Int_t event, Int_t px, Int_t py); Change color/mesh size or switch on/off mesh/box cut.; Left double click - remove box cut. void InitGL() const; Initialize gl state. void DeInitGL() const; Initialize gl state. void DrawPlot() const; Draw parametric surface. void InitColors(); Calculate colors for vertices,; using one of 20 color themes.; -1 simple 'metal' surface. void DrawSectionXOZ() const; No such sections. void DrawSectionYOZ() const; No such sections. void DrawSectionXOY() const; No such sections. void SetSurfaceColor() const; Set material properties. TGLParametricPlot(TGLParametricEquation* equation, TGLPlotCamera* camera). » Author: Timur Pocheptsov 26/01/2007 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLParametric.h 28464 2009-05-06 12:37:21Z brun $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLParametricPlot.html:5463,simpl,simple,5463,root/html532/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html532/TGLParametricPlot.html,1,['simpl'],['simple']
Usability,TB::mvaValues. protected . Definition at line 73 of file MethodPyGTB.h. ◆ pInit. PyObject* TMVA::MethodPyGTB::pInit. protected . Definition at line 126 of file MethodPyGTB.h. ◆ pLearningRate. PyObject* TMVA::MethodPyGTB::pLearningRate. protected . Definition at line 89 of file MethodPyGTB.h. ◆ pLoss. PyObject* TMVA::MethodPyGTB::pLoss. protected . Definition at line 82 of file MethodPyGTB.h. ◆ pMaxDepth. PyObject* TMVA::MethodPyGTB::pMaxDepth. protected . Definition at line 118 of file MethodPyGTB.h. ◆ pMaxFeatures. PyObject* TMVA::MethodPyGTB::pMaxFeatures. protected . Definition at line 139 of file MethodPyGTB.h. ◆ pMaxLeafNodes. PyObject* TMVA::MethodPyGTB::pMaxLeafNodes. protected . Definition at line 157 of file MethodPyGTB.h. ◆ pMinSamplesLeaf. PyObject* TMVA::MethodPyGTB::pMinSamplesLeaf. protected . Definition at line 110 of file MethodPyGTB.h. ◆ pMinSamplesSplit. PyObject* TMVA::MethodPyGTB::pMinSamplesSplit. protected . Definition at line 106 of file MethodPyGTB.h. ◆ pMinWeightFractionLeaf. PyObject* TMVA::MethodPyGTB::pMinWeightFractionLeaf. protected . Definition at line 114 of file MethodPyGTB.h. ◆ pNestimators. PyObject* TMVA::MethodPyGTB::pNestimators. protected . Definition at line 94 of file MethodPyGTB.h. ◆ pRandomState. PyObject* TMVA::MethodPyGTB::pRandomState. protected . Definition at line 132 of file MethodPyGTB.h. ◆ pSubsample. PyObject* TMVA::MethodPyGTB::pSubsample. protected . Definition at line 98 of file MethodPyGTB.h. ◆ pVerbose. PyObject* TMVA::MethodPyGTB::pVerbose. protected . Definition at line 154 of file MethodPyGTB.h. ◆ pWarmStart. PyObject* TMVA::MethodPyGTB::pWarmStart. protected . Definition at line 164 of file MethodPyGTB.h. Libraries for TMVA::MethodPyGTB:. [legend]; The documentation for this class was generated from the following files:; tmva/pymva/inc/TMVA/MethodPyGTB.h; tmva/pymva/src/MethodPyGTB.cxx. TMVAMethodPyGTB. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:38513,Guid,Guide,38513,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,1,['Guid'],['Guide']
Usability,"TBackCompFitter(). TBackCompFitter::~TBackCompFitter ; (; ). override . Destructor - delete the managed objects. ; Definition at line 102 of file TBackCompFitter.cxx. Member Function Documentation. ◆ Chisquare(). Double_t TBackCompFitter::Chisquare ; (; Int_t ; npar, . Double_t * ; params . ); const. overridevirtual . Do chisquare calculations in case of likelihood fits Do evaluation a the minimum only. ; Implements TVirtualFitter.; Definition at line 112 of file TBackCompFitter.cxx. ◆ Class(). static TClass * TBackCompFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBackCompFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBackCompFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 143 of file TBackCompFitter.h. ◆ Clear(). void TBackCompFitter::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear resources for consecutive fits. ; Implements TVirtualFitter.; Definition at line 129 of file TBackCompFitter.cxx. ◆ Contour(). bool TBackCompFitter::Contour ; (; unsigned int ; ipar, . unsigned int ; jpar, . TGraph * ; gr, . double ; confLevel = 0.683 . ). Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ; if the size is zero a default number of points = 20 is used pass optionally the confidence level, default is 0.683 it is assumed that ErrorDef() defines the right error definition (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level ; Definition at line 852 of file TBackCompFitter.cxx. ◆ DeclFileName(). static const char * TBackCompFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 143 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:24966,Clear,Clear,24966,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['Clear'],['Clear']
Usability,"TBranch::fNleaves. protected . ! Number of leaves ; Definition at line 128 of file TBranch.h. ◆ fOffset. Int_t TBranch::fOffset. protected . Offset of this branch. ; Definition at line 124 of file TBranch.h. ◆ fParent. TBranch* TBranch::fParent. protected . ! Pointer to parent branch. ; Definition at line 146 of file TBranch.h. ◆ fReadBasket. Int_t TBranch::fReadBasket. protected . ! Current basket number when reading ; Definition at line 129 of file TBranch.h. ◆ fReadEntry. Long64_t TBranch::fReadEntry. protected . ! Current entry number when reading ; Definition at line 130 of file TBranch.h. ◆ fReadLeaves. ReadLeaves_t TBranch::fReadLeaves. protected . ! Pointer to the ReadLeaves implementation to use. ; Definition at line 161 of file TBranch.h. ◆ fSkipZip. bool TBranch::fSkipZip. protected . ! After being read, the buffer will not be unzipped. ; Definition at line 155 of file TBranch.h. ◆ fSplitLevel. Int_t TBranch::fSplitLevel. protected . Branch split level. ; Definition at line 127 of file TBranch.h. ◆ fTotBytes. Long64_t TBranch::fTotBytes. protected . Total number of bytes in all leaves before compression. ; Definition at line 136 of file TBranch.h. ◆ fTransientBuffer. TBuffer* TBranch::fTransientBuffer. protected . ! Pointer to the current transient buffer. ; Definition at line 151 of file TBranch.h. ◆ fTree. TTree* TBranch::fTree. protected . ! Pointer to Tree header ; Definition at line 144 of file TBranch.h. ◆ fWriteBasket. Int_t TBranch::fWriteBasket. protected . Last basket number written. ; Definition at line 120 of file TBranch.h. ◆ fZipBytes. Long64_t TBranch::fZipBytes. protected . Total number of bytes in all leaves after compression. ; Definition at line 137 of file TBranch.h. Libraries for TBranch:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranch.h; tree/tree/src/TBranch.cxx. TBranch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:75964,Guid,Guide,75964,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['Guid'],['Guide']
Usability,"TBranchElement::SetTargetClassvirtual void SetTargetClass(const char *name)Set the name of the class of the in-memory object into which the data will loaded.Definition TBranchElement.cxx:5855; TBranchElement::GetCheckSumUInt_t GetCheckSum()Definition TBranchElement.h:185; TBranchElement::SetObjectvoid SetObject(void *objadd) overrideSet object this branch is pointing to.Definition TBranchElement.cxx:5575; TBranchObjectA Branch for the case of an object.Definition TBranchObject.h:26; TBranchRefA branch containing and managing a TRefTable for TRef autoloading.Definition TBranchRef.h:34; TBranchRef::Resetvoid Reset(Option_t *option="""") overrideDefinition TBranchRef.cxx:187; TBranchRef::Printvoid Print(Option_t *option="""") const overridePrint the TRefTable branch.Definition TBranchRef.cxx:159; TBranchRef::Clearvoid Clear(Option_t *option="""") overrideClear entries in the TRefTable.Definition TBranchRef.cxx:95; TBranchRef::ResetAfterMergevoid ResetAfterMerge(TFileMergeInfo *) overrideReset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared.Definition TBranchRef.cxx:198; TBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while stori...Definition TBranchSTL.h:22; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::GetLeafvirtual TLeaf * GetLeaf(const char *name) constReturn pointer to the 1st Leaf named name in thisBranch.Definition TBranch.cxx:2055; TBranch::GetMakeClassvirtual bool GetMakeClass() constReturn whether this branch is in a mode where the object are decomposed or not (Also known as MakeCla...Definition TBranch.cxx:2117; TBranch::SetupAddressesvirtual void SetupAddresses()If the branch address is not set, we set all addresses starting with the top level parent branch.Definition TBranch.cxx:3294; TBranch::ResetAddressvirtual void ResetAddress()Reset the address of the branch.Definition TBranch.cxx:2651; TBranch::GetBasketSeekvirtual Long64_t GetBasketSeek(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:393778,clear,cleared,393778,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['cleared']
Usability,"TBrowser *) overrideTChainvirtual; BuildIndex(const char *majorname, const char *minorname=""0"")TTreevirtual; BuildStreamerInfo(TClass *cl, void *pointer=nullptr, bool canOptimize=true)TTree; CanDeleteRefs(bool flag=true)TChainvirtual; ChangeFile(TFile *file)TTreevirtual; CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)TTreeprotectedvirtual; CheckedHash()TObjectinline; Class()TChainstatic; Class_Name()TChainstatic; Class_Version()TChaininlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneTree(Long64_t nentries=-1, Option_t *option="""")TTreevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAddresses(TTree *, bool undo=false)TTreevirtual; CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)TTreevirtual; CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; CreateBasket(TBranch *)TTreevirtual; CreatePackets()TChainvirtual; Debug() constTTreeinline; DeclFileName()TChaininlinestatic; Delete(Option_t *option="""") overrideTTreevirtual; DirectoryAutoAdd(TDirectory *) overrideTChainvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0) overrideTChainvirtual; Draw(const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain-members.html:4579,undo,undo,4579,doc/master/classTChain-members.html,https://root.cern,https://root.cern/doc/master/classTChain-members.html,1,['undo'],['undo']
Usability,"TBuffer &) override;  Stream a 3-D polyline object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHelix.html:8182,Clear,Clear,8182,doc/master/classTHelix.html,https://root.cern,https://root.cern/doc/master/classTHelix.html,2,['Clear'],['Clear']
Usability,"TBuffer &) override;  Stream an object of class TPave. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPaveText;  TPaveText ();  pavetext default constructor. ;  ;  TPaveText (const TPaveText &pavetext);  pavetext copy constructor. ;  ;  TPaveText (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option=""br"");  PaveText normal constructor. ;  ;  ~TPaveText () override;  pavetext default destructor. ;  ; virtual TBox * AddBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Add a new graphics box to this pavetext. ;  ; virtual TLine * AddLine (Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0);  Add a new graphics line to this pavetext. ;  ; virtual TText * AddText (const char *label);  Add a new Text line to this pavetext. ;  ; virtual TText * AddText (Double_t x1, Double_t y1, const char *label);  Add a new Text line to this pavetext at given coordinates. ;  ; void Clear (Option_t *option="""") override;  Clear all lines in this pavetext. ;  ; virtual void DeleteText ();  Delete text at the mouse position. ;  ; void Draw (Option_t *option="""") override;  Draw this pavetext with its current attributes. ;  ; virtual void DrawFile (const char *filename, Option_t *option="""");  Draw lines in filename in this pavetext. ;  ; virtual void EditText ();  Edit text at the mouse position. ;  ; const char * GetLabel () const;  ; virtual TText * GetLine (Int_t number) const;  Get Pointer to line number in this pavetext. ;  ; virtual TText * GetLineWith (const char *text) const;  Get Pointer to first containing string text in this pavetext. ;  ; virtual TList * GetListOfLines () const;  ; Float_t GetMargin () const;  ; virtual TObject * GetObject (Double_t &ymouse, Double_t &yobj) const;  Get object pointed by the mouse in this pavetext. ;  ; virtual Int_t GetSize () const;  return number of text lines (ignoring TLine, etc) ;  ; virtual void InsertLine ();  Add a new line at the mouse position.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPavesText.html:2201,Clear,Clear,2201,doc/master/classTPavesText.html,https://root.cern,https://root.cern/doc/master/classTPavesText.html,2,['Clear'],['Clear']
Usability,"TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:6946,Clear,Clear,6946,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['Clear'],['Clear']
Usability,"TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearDynamicVariables ();  ; static const char * DeclFileName ();  ; static void SetIgnoreNegWeightsInTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ; static void SetIsTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fBoostWeight;  internal weight to be set by boosting alg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:10833,Clear,ClearDynamicVariables,10833,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['Clear'],['ClearDynamicVariables']
Usability,"TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html:2137,Clear,Clear,2137,doc/master/classRooStats_1_1ToyMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html,1,['Clear'],['Clear']
Usability,"TBuffer &R__b);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html:1717,Clear,Clear,1717,doc/master/classPyROOT_1_1RegulatorCleanup.html,https://root.cern,https://root.cern/doc/master/classPyROOT_1_1RegulatorCleanup.html,1,['Clear'],['Clear']
Usability,"TBuffer &buf, ULong64_t l){ buf.WriteULong64(l);return buf; }; 372inline TBuffer &operator<<(TBuffer &buf, Float_t f) { buf.WriteFloat(f); return buf; }; 373inline TBuffer &operator<<(TBuffer &buf, Double_t d) { buf.WriteDouble(d); return buf; }; 374inline TBuffer &operator<<(TBuffer &buf, const Char_t *c) { buf.WriteCharP(c); return buf; }; 375inline TBuffer &operator<<(TBuffer &buf, const TString &s) { buf.WriteTString(s);return buf; }; 376 ; 377#if defined(R__SOLARIS) && defined(R__GNU); 378#include <typeinfo>; 379#endif; 380 ; 381template <class Tmpl> TBuffer &operator>>(TBuffer &buf, Tmpl *&obj); 382{; 383 // Read TObject derived classes from a TBuffer. Need to provide; 384 // custom version for non-TObject derived classes.; 385 ; 386 // This operator has to be a templated and/or automatically; 387 // generated if we want to be able to check the type of the; 388 // incoming object. I.e. a operator>>(TBuffer &buf, TObject *&); 389 // would not be sufficient to pass the information 'which class do we want'; 390 // since the pointer could be zero (so typeid(*obj) is not usable).; 391 ; 392 auto cl = TClass::GetClass<Tmpl>();; 393 obj = (Tmpl *) ( (void*) buf.ReadObjectAny(cl) );; 394 return buf;; 395}; 396 ; 397template <class Tmpl> TBuffer &operator<<(TBuffer &buf, const Tmpl *obj); 398{; 399 auto cl = (obj) ? TClass::GetClass<Tmpl>() : nullptr;; 400 buf.WriteObjectAny(obj, cl);; 401 return buf;; 402}; 403 ; 404template <class T>; 405inline Int_t TBuffer::WriteObject(const T *objptr, Bool_t cacheReuse); 406{; 407 auto cl = (objptr) ? TClass::GetClass<T>() : nullptr;; 408 return WriteObjectAny(objptr, cl, cacheReuse);; 409}; 410 ; 411#endif // ROOT_TBuffer; Bytes.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; Bool_tbool Bool_tDefinition RtypesCore.h:63; UShort_tunsign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:21487,usab,usable,21487,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['usab'],['usable']
Usability,"TBuffer3D::kBoundingBox | TBuffer3D::kShapeSpecific, localFrame);; 1569 Int_t reqSections = viewer->AddObject(buffer, &addDaughters);; 1570 ; 1571 // If the viewer requires additional sections fetch from the shape (if possible); 1572 // and add again; 1573 if (reqSections != TBuffer3D::kNone) {; 1574 shape.GetBuffer3D(reqSections, localFrame);; 1575 viewer->AddObject(buffer, &addDaughters);; 1576 }; 1577 }; 1578 // Composite shapes have their own internal hierarchy of shapes, each; 1579 // of which generate a filled TBuffer3D. Therefore we can't pass up a; 1580 // single buffer to here. So as a special case the TGeoCompositeShape; 1581 // performs it's own painting & negotiation with the viewer.; 1582 else {; 1583 const TGeoCompositeShape *composite = static_cast<const TGeoCompositeShape *>(&shape);; 1584 ; 1585 // We need the addDaughters flag returned from the viewer from paint; 1586 // so can't use the normal TObject::Paint(); 1587 // TGeoHMatrix *matrix = (TGeoHMatrix*)TGeoShape::GetTransform();; 1588 // if (viewer->PreferLocalFrame()) matrix->Clear();; 1589 addDaughters = composite->PaintComposite(option);; 1590 }; 1591 ; 1592 return addDaughters;; 1593}; 1594 ; 1595////////////////////////////////////////////////////////////////////////////////; 1596/// Paint an overlap.; 1597 ; 1598void TGeoPainter::PaintShape(TGeoShape *shape, Option_t *option); 1599{; 1600 TGeoShape::SetTransform(fGlobal);; 1601 fGlobal->Clear();; 1602 fGeoManager->SetPaintVolume(nullptr);; 1603 PaintShape(*shape, option);; 1604}; 1605 ; 1606////////////////////////////////////////////////////////////////////////////////; 1607/// Paints a physical node associated with a path.; 1608 ; 1609void TGeoPainter::PaintPhysicalNode(TGeoPhysicalNode *node, Option_t *option); 1610{; 1611 if (!node->IsVisible()); 1612 return;; 1613 Int_t level = node->GetLevel();; 1614 Int_t i, col, wid, sty;; 1615 TGeoShape *shape;; 1616 TGeoShape::SetTransform(fGlobal);; 1617 TGeoHMatrix *matrix = fGlobal;; 1618 TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:51563,Clear,Clear,51563,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf302_utilfuncsDefinition rf302_utilfuncs.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_3' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_4' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_1_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_2_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_3_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_4_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf302_utilfuncs.C. tutorialsroofitrf302_utilfuncs.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf302__utilfuncs_8C.html:6921,Guid,Guide,6921,doc/master/rf302__utilfuncs_8C.html,https://root.cern,https://root.cern/doc/master/rf302__utilfuncs_8C.html,1,['Guid'],['Guide']
Usability,"TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TTreeProcessorMP never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TTreeProcessorMP::Process is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Process will outrun the benefits of parallel execution on most machines.; Parameters. funca lambda expression, an std::function, a loaded macro, a functor class or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard container (vector, list, deque), an initializer list or a pointer to a TCollection (TList*, TObjArray*, ...). . Note: the version of ROOT::TTreeProcessorMP::Process that takes a TFileCollection* as argument incurs in the overhead of copying data from the TCollection to an STL container. Only use it when absolutely necessary.; Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:2259,simpl,simply,2259,doc/v632/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html,2,['simpl'],['simply']
Usability,"TChainElement.cxx:65; TChainElement::SetBranchPtrvirtual void SetBranchPtr(TBranch **ptr)Definition TChainElement.h:73; TChainElement::GetLoadResultInt_t GetLoadResult() constDefinition TChainElement.h:61; TChainElement::lsvoid ls(Option_t *option="""") const overrideList files in the chain.Definition TChainElement.cxx:78; TChainElement::GetStatusvirtual Int_t GetStatus() constDefinition TChainElement.h:66; TChainElement::fBaddressTypeUInt_t fBaddressType! Type of the value pointed to by fBaddressDefinition TChainElement.h:42; TChainElement::fBaddressClassNameTString fBaddressClassName! Name of the class pointed to by fBaddressDefinition TChainElement.h:41; TChainElement::GetBaddressvirtual void * GetBaddress() constDefinition TChainElement.h:55; TChainElement::GetDecomposedObjbool GetDecomposedObj() constDefinition TChainElement.h:63; TChainElement::SetBaddressTypevirtual void SetBaddressType(UInt_t type)Definition TChainElement.h:72; TChainElement::GetCheckedTypebool GetCheckedType() constDefinition TChainElement.h:62; TChainElement::fBaddressvoid * fBaddress! branch address when used as a branchDefinition TChainElement.h:40; TChainElement::fCheckedTypebool fCheckedType! True if the branch type and the address type have been checked.Definition TChainElement.h:45; TChainElement::GetBaddressClassNamevirtual const char * GetBaddressClassName() constDefinition TChainElement.h:56; TChainElement::SetBaddressIsPtrvirtual void SetBaddressIsPtr(bool isptr)Definition TChainElement.h:71; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TStringBasic string class.Definition TString.h:139; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; mTMarker mDefinition textangle.C:8. treetreeincTChainElement.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChainElement_8h_source.html:11550,Guid,Guide,11550,doc/master/TChainElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TChainElement_8h_source.html,1,['Guid'],['Guide']
Usability,"TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel)TTreeprotectedvirtual; BranchOld(const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1)TTreevirtual; BranchRef()TTreevirtual; Bronch(const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99)TTreevirtual; BronchExec(const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel)TTreeprotectedvirtual; Browse(TBrowser *b) overrideTNtuplevirtual; BuildIndex(const char *majorname, const char *minorname=""0"")TTreevirtual; BuildStreamerInfo(TClass *cl, void *pointer=nullptr, bool canOptimize=true)TTree; ChangeFile(TFile *file)TTreevirtual; CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)TTreeprotectedvirtual; CheckedHash()TObjectinline; Class()TNtuplestatic; Class_Name()TNtuplestatic; Class_Version()TNtupleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneTree(Long64_t nentries=-1, Option_t *option="""") overrideTNtuplevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAddresses(TTree *, bool undo=false)TTreevirtual; CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)TTreevirtual; CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; CreateBasket(TBranch *)TTreevirtual; Debug() constTTreeinline; DeclFileName()TNtupleinlinestatic; Delete(Option_t *option="""") overrideTTreevirtual; DirectoryAutoAdd(TDirectory *)TTreevirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple-members.html:3746,Clear,Clear,3746,doc/master/classTNtuple-members.html,https://root.cern,https://root.cern/doc/master/classTNtuple-members.html,1,['Clear'],['Clear']
Usability,"TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TInsCharCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInsCharCom(). TInsCharCom::TInsCharCom ; (; TGTextEdit * ; te, . char ; ch . ). inline . Definition at line 98 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TInsCharCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 101 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TInsCharCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsCharCom.html:10785,Guid,Guide,10785,doc/master/classTInsCharCom.html,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html,1,['Guid'],['Guide']
Usability,TClass describing this class . ◆ Class_Name(). static const char * TEveWindowTab::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveWindowTab::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 415 of file TEveWindow.h. ◆ DeclFileName(). static const char * TEveWindowTab::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 415 of file TEveWindow.h. ◆ GetGUIFrame(). TGFrame * TEveWindowTab::GetGUIFrame ; (; ). overridevirtual . Return top-frame of this eve-window - the tab. ; Implements TEveWindow.; Definition at line 1454 of file TEveWindow.cxx. ◆ GetTab(). TGTab * TEveWindowTab::GetTab ; (; ); const. inline . Definition at line 413 of file TEveWindow.h. ◆ IsA(). TClass * TEveWindowTab::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveWindow.; Definition at line 415 of file TEveWindow.h. ◆ NewSlot(). TEveWindowSlot * TEveWindowTab::NewSlot ; (; ). overridevirtual . Create new frame-slot - a new tab. ; Reimplemented from TEveWindow.; Definition at line 1462 of file TEveWindow.cxx. ◆ operator=(). TEveWindowTab & TEveWindowTab::operator= ; (; const TEveWindowTab & ; ). private . ◆ Streamer(). void TEveWindowTab::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveWindow. ◆ StreamerNVirtual(). void TEveWindowTab::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 415 of file TEveWindow.h. Member Data Documentation. ◆ fTab. TGTab* TEveWindowTab::fTab. protected . Definition at line 402 of file TEveWindow.h. Libraries for TEveWindowTab:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveWindowTab. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:47 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:40024,Guid,Guide,40024,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,1,['Guid'],['Guide']
Usability,"TClassEdit.h:183; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::IsStdPairbool IsStdPair(std::string_view name)Definition TClassEdit.h:184; TClassEdit::GetLong64_Namestd::string GetLong64_Name(const char *original)Replace 'long long' and 'unsigned long long' by 'Long64_t' and 'ULong64_t'.Definition TClassEdit.cxx:908; TClassEdit::IsSTLContROOT::ESTLType IsSTLCont(std::string_view type)type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of cont...Definition TClassEdit.cxx:1378; TClassEdit::ShortTypestd::string ShortType(const char *typeDesc, int mode)Return the absolute type of typeDesc.Definition TClassEdit.cxx:1305; TClassEdit::GetStdArrayPropertiesbool GetStdArrayProperties(const char *typeName, std::string &typeNameBuf, std::array< int, 5 > &maxIndices, int &ndim)Definition TClassEdit.cxx:2117; TClassEdit::GetNameForIOstd::string GetNameForIO(const std::string &templateInstanceName, TClassEdit::EModType mode=TClassEdit::kNone, bool *hasChanged=nullptr)Definition TClassEdit.cxx:2095; TClassEdit::GetSplitint GetSplit(const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone)Stores in output (after emptying it) the split type.Definition TClassEdit.cxx:1029; TClassEdit::kDropTrailStar@ kDropTrailStarDefinition TClassEdit.h:77; TClassEdit::kLong64@ kLong64Definition TClassEdit.h:85; TClassEdit::kDropStlDefault@ kDropStlDefaultDefinition TClassEdit.h:82; TClassEdit::kNone@ kNoneDefinition TClassEdit.h:76; TClassEdit::kDropStd@ kDropStdDefinition TClassEdit.h:86; TClassEdit::IsSTLBitsetbool IsSTLBitset(const char *type)Return true is the name is std::bitset<number> or bitset<number>Definition TClassEdit.cxx:1340; v1@ v1Definition rootcling_impl.cxx:3701. ioiosrcTStreamerInfo.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:303228,Guid,Guide,303228,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TClasses as needed below.; 1775 for (auto proto : *protoClasses) {; 1776 if (TClass *existingCl = (TClass *)gROOT->GetListOfClasses()->FindObject(proto->GetName())) {; 1777 // We have an existing TClass object. It might be emulated; 1778 // or interpreted; we now have more information available.; 1779 // Make that available.; 1780 if (existingCl->GetState() != TClass::kHasTClassInit) {; 1781 DictFuncPtr_t dict = gClassTable->GetDict(proto->GetName());; 1782 if (!dict) {; 1783 ::Error(""TCling::LoadPCM"", ""Inconsistent TClassTable for %s"", proto->GetName());; 1784 } else {; 1785 // This will replace the existing TClass.; 1786 TClass *ncl = (*dict)();; 1787 if (ncl); 1788 ncl->PostLoadCheck();; 1789 }; 1790 }; 1791 }; 1792 }; 1793 ; 1794 protoClasses->Clear(); // Ownership was transfered to TClassTable.; 1795 delete protoClasses;; 1796 }; 1797 ; 1798 TObjArray *dataTypes;; 1799 pcmFile.GetObject(""__Typedefs"", dataTypes);; 1800 if (dataTypes) {; 1801 for (auto typedf : *dataTypes); 1802 gROOT->GetListOfTypes()->Add(typedf);; 1803 dataTypes->Clear(); // Ownership was transfered to TListOfTypes.; 1804 delete dataTypes;; 1805 }; 1806}; 1807 ; 1808////////////////////////////////////////////////////////////////////////////////; 1809/// Tries to load a rdict PCM, issues diagnostics if it fails.; 1810 ; 1811void TCling::LoadPCM(std::string pcmFileNameFullPath); 1812{; 1813 SuspendAutoLoadingRAII autoloadOff(this);; 1814 SuspendAutoParsing autoparseOff(this);; 1815 assert(!pcmFileNameFullPath.empty());; 1816 assert(llvm::sys::path::is_absolute(pcmFileNameFullPath));; 1817 ; 1818 // Easier to work with the ROOT interfaces.; 1819 TString pcmFileName = pcmFileNameFullPath;; 1820 ; 1821 // Prevent the ROOT-PCMs hitting this during auto-load during; 1822 // JITting - which will cause recursive compilation.; 1823 // Avoid to call the plugin manager at all.; 1824 R__InitStreamerInfoFactory();; 1825 ; 1826 TDirectory::TContext ctxt;; 1827 llvm::SaveAndRestore<Int_t> SaveGDebug(gDebug);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:67794,Clear,Clear,67794,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Clear'],['Clear']
Usability,"TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TLinearGradient(); TLinearGradient(const TLinearGradient&); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TLinearGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearGradient.html:1511,Clear,Clear,1511,root/html534/TLinearGradient.html,https://root.cern,https://root.cern/root/html534/TLinearGradient.html,1,['Clear'],['Clear']
Usability,"TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. TRadialGradient(); TRadialGradient(const TRadialGradient&); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Color_t* colorIndices, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); TRadialGradient(Color_t newColor, UInt_t nPoints, const Double_t* points, const Double_t* colors, TColorGradient::ECoordinateMode mode = kObjectBoundingMode); ~TRadialGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRadialGradient.html:1511,Clear,Clear,1511,root/html534/TRadialGradient.html,https://root.cern,https://root.cern/root/html534/TRadialGradient.html,1,['Clear'],['Clear']
Usability,"TCutG::GetVarXconst char * GetVarX() constDefinition TCutG.h:41; TCutG::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TCutG.cxx:356; TCutG::fObjectYTObject * fObjectY! pointer to an object corresponding to YDefinition TCutG.h:26; TCutG::SetVarYvirtual void SetVarY(const char *vary)Set Y variable.Definition TCutG.cxx:412; TCutG::Areavirtual Double_t Area() constCompute the area inside this TCutG The algorithm uses Stoke's theorem over the border of the closed p...Definition TCutG.cxx:272; TCutG::fVarXTString fVarXX variable.Definition TCutG.h:23; TCutG::SetObjectYvirtual void SetObjectY(TObject *obj)Set the Y object (and delete the previous one if any).Definition TCutG.cxx:393; TCutG::SetVarXvirtual void SetVarX(const char *varx)Set X variable.Definition TCutG.cxx:402; TCutG::operator=TCutG & operator=(const TCutG &)Assignment operator.Definition TCutG.cxx:254; TCutG::GetObjectYTObject * GetObjectY() constDefinition TCutG.h:40; TCutG::SetObjectXvirtual void SetObjectX(TObject *obj)Set the X object (and delete the previous one if any).Definition TCutG.cxx:384; TCutG::GetObjectXTObject * GetObjectX() constDefinition TCutG.h:39; TCutG::fObjectXTObject * fObjectX! pointer to an object corresponding to XDefinition TCutG.h:25; TCutG::GetVarYconst char * GetVarY() constDefinition TCutG.h:42; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. graf2dgrafincTCutG.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCutG_8h_source.html:4976,Guid,Guide,4976,doc/master/TCutG_8h_source.html,https://root.cern,https://root.cern/doc/master/TCutG_8h_source.html,1,['Guid'],['Guide']
Usability,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Mon Dec 7 13:49:52 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__WSDir.html:13042,Clear,Clear,13042,root/html526/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Mon Jul 4 15:24:51 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace__WSDir.html:13093,Clear,Clear,13093,root/html530/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html530/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Thu Nov 3 20:10:09 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:13248,Clear,Clear,13248,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Wed Dec 8 11:39:40 2010 » Last generated: 2010-12-08 11:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__WSDir.html:13024,Clear,Clear,13024,root/html528/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"TEXTnn Option; The CONTour options. The LIST option. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL. General information: plot types and supported options; TH3 as boxes (spheres); TH3 as iso-surface(s); TF3 (implicit function); Parametric surfaces; Interaction with the plots; Selectable parts; Rotation and zooming; Panning; Box cut; Plot specific interactions (dynamic slicing etc.); Surface with option ""GLSURF""; TF3; Box; Iso; Parametric plot. Introduction; Histograms are drawn via the THistPainter class. Each histogram has a; pointer to its own painter (to be usable in a multithreaded program). When the; canvas has to be redrawn, the Paint function of each objects in the; pad is called. In case of histograms, TH1::Paint invokes directly; THistPainter::Paint.; To draw a histogram ""h"" is enough to do:. h->Draw();. ""h"" can be of any kind: 1D, 2D or 3D. To choose how the histogram will; be drawn, the Draw() method can be invoked with an option. For instance; to draw a 2D histogram as a lego plot it is enough to do:. h->Draw(""lego"");. THistPainter offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time; (TH1::Draw), it creates a THistPainter object and saves a; pointer to this ""painter"" as a data member of the histogram. The; THistPainter class specializes in the drawing of histograms. It is; separated from the histogram so that one can have histograms without the; graphics overhead, for example in a batch program. Each histogram have its own; painter rather than a cen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:2085,usab,usable,2085,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['usab'],['usable']
Usability,"TEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionManager.html:2421,Clear,ClearStamps,2421,root/html528/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html528/TEveProjectionManager.html,1,['Clear'],['ClearStamps']
Usability,"TEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetCone.html:2933,Clear,ClearStamps,2933,root/html528/TEveJetCone.html,https://root.cern,https://root.cern/root/html528/TEveJetCone.html,2,['Clear'],['ClearStamps']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveEventManager.html:2295,Clear,Clear,2295,root/html530/TEveEventManager.html,https://root.cern,https://root.cern/root/html530/TEveEventManager.html,5,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElementList.html:2358,Clear,Clear,2358,root/html528/TEveElementList.html,https://root.cern,https://root.cern/root/html528/TEveElementList.html,6,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConnect(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewerList.html:2188,Clear,Clear,2188,root/html528/TEveViewerList.html,https://root.cern,https://root.cern/root/html528/TEveViewerList.html,6,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackList.html:2300,Clear,Clear,2300,root/html530/TEveTrackList.html,https://root.cern,https://root.cern/root/html530/TEveTrackList.html,5,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElementListProjected.html:2247,Clear,Clear,2247,root/html528/TEveElementListProjected.html,https://root.cern,https://root.cern/root/html528/TEveElementListProjected.html,17,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveTrackList::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApply",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackListProjected.html:2210,Clear,Clear,2210,root/html530/TEveTrackListProjected.html,https://root.cern,https://root.cern/root/html530/TEveTrackListProjected.html,5,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidCloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveCompound.html:2190,Clear,Clear,2190,root/html530/TEveCompound.html,https://root.cern,https://root.cern/root/html530/TEveCompound.html,5,['Clear'],['Clear']
Usability,"TEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTEveCompound::CloseCompound(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveCompoundProjected.html:2171,Clear,Clear,2171,root/html530/TEveCompoundProjected.html,https://root.cern,https://root.cern/root/html530/TEveCompoundProjected.html,5,['Clear'],['Clear']
Usability,"TEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*CreateDefaultWindowSlot(); static TEveWindowSlot*CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*CreateWindowMainFra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindow.html:2338,Clear,Clear,2338,root/html530/TEveWindow.html,https://root.cern,https://root.cern/root/html530/TEveWindow.html,5,['Clear'],['Clear']
Usability,"TEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindowPack.html:2253,Clear,Clear,2253,root/html530/TEveWindowPack.html,https://root.cern,https://root.cern/root/html530/TEveWindowPack.html,10,['Clear'],['Clear']
Usability,"TEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; TGLEmbeddedViewer*SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); TGLSAViewer*SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE, Bool_t quad_buf = kTRUE); voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; voidSwitchStereo(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveViewer.html:17945,Undo,UndockWindow,17945,root/html604/TEveViewer.html,https://root.cern,https://root.cern/root/html604/TEveViewer.html,2,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"TEveRGBAPalette & ; ). private . ◆ TEveRGBAPalette() [2/3]. TEveRGBAPalette::TEveRGBAPalette ; (; ). Constructor. ; Definition at line 33 of file TEveRGBAPalette.cxx. ◆ TEveRGBAPalette() [3/3]. TEveRGBAPalette::TEveRGBAPalette ; (; Int_t ; min, . Int_t ; max, . Bool_t ; interp = kTRUE, . Bool_t ; showdef = kTRUE, . Bool_t ; fixcolrng = kFALSE . ). Constructor. ; Definition at line 65 of file TEveRGBAPalette.cxx. ◆ ~TEveRGBAPalette(). TEveRGBAPalette::~TEveRGBAPalette ; (; ). override . Destructor. ; Definition at line 98 of file TEveRGBAPalette.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveRGBAPalette::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveRGBAPalette::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveRGBAPalette::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TEveRGBAPalette.h. ◆ ClearColorArray(). void TEveRGBAPalette::ClearColorArray ; (; ). Clear internal color array. ; Definition at line 152 of file TEveRGBAPalette.cxx. ◆ ColorFromValue() [1/3]. const UChar_t * TEveRGBAPalette::ColorFromValue ; (; Int_t ; val); const. inline . Definition at line 179 of file TEveRGBAPalette.h. ◆ ColorFromValue() [2/3]. Bool_t TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . Int_t ; defVal, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 217 of file TEveRGBAPalette.h. ◆ ColorFromValue() [3/3]. void TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 209 of file TEveRGBAPalette.h. ◆ DeclFileName(). static const char * TEveRGBAPalette::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TEveRGBAPalette.h. ◆ DoubleToInt(). Int_t TEveRGBAPalette::DoubleToInt ; (; Double_t ; d); const. inlineprote",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:21054,Clear,ClearColorArray,21054,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Clear'],['ClearColorArray']
Usability,"TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are two cuts (see TTreeFormula) defining events; to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:20878,simpl,simple,20878,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['simpl'],['simple']
Usability,"TExecutor::Map and TExecutor::MapReduce ;  ►NExperimental;  NDetail;  NHist;  NInternal;  NTDF;  ►NFitNamespace for the fitting classes ;  NFitUtilNamespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  NHFitInterface;  NGLTutorials;  ►NInternal;  NExecutorUtils;  NTDF;  NTThreadedObjectUtils;  ►NMacOSX;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  Ntest;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  NTreeUtils;  NTThreadedObjectUtils;  ►Nv5;  NTFastFun;  Nrootmarks;  NROOTwriter;  Nshapes;  Nsqlio;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ndetail;  Nsurfaces;  Ntbb;  Ntdf001_introduction;  Ntdf002_dataModel;  Ntdf004_cutFlowReport;  Ntdf006_ranges;  Ntdf007_snapshot;  Ntest;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  NBlas;  NkNN;  NTMVAGlob;  Ntornado;  Ntree;  NTStreamerInfoActions;  Nwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo. ROOT 6.10/09 - Reference Guide Generated on Thu May 31 2018 12:15:42 using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/namespaces.html:3602,Guid,Guide,3602,doc/v610/namespaces.html,https://root.cern,https://root.cern/doc/v610/namespaces.html,1,['Guid'],['Guide']
Usability,"TF1.cxx:1584; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::SetContourvirtual void SetContour(Int_t nlevels=20, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TF2.cxx:892; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetLogzvoid SetLogz(Int_t value=1) overrideSet Lin/Log scale for Z.Definition TPad.cxx:6111; TPad::Updatevoid Update() overrideUpdate pad.Definition TPad.cxx:2935; TPad::SetPhivoid SetPhi(Double_t phi=30) overrideDefinition TPad.h:360; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPad::SetThetavoid SetTheta(Double_t theta=30) overrideDefinition TPad.h:359; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; c1return c1Definition legend1.C:41; surfacesDefinition surfaces.py:1; AuthorRene Brun ; Definition in file surfaces.C. tutorialsgraphssurfaces.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/surfaces_8C.html:4162,Guid,Guide,4162,doc/master/surfaces_8C.html,https://root.cern,https://root.cern/doc/master/surfaces_8C.html,1,['Guid'],['Guide']
Usability,"TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; lTLine lDefinition textangle.C:4; AuthorRene Brun ; Definition in file tree2a.C. tutorialstreetree2a.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2a_8C.html:9183,Guid,Guide,9183,doc/master/tree2a_8C.html,https://root.cern,https://root.cern/doc/master/tree2a_8C.html,1,['Guid'],['Guide']
Usability,"TFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); Long64_tfTotalUnzipBytes! The total sum of the currently unzipped blks; TTree*TTreeCache::fTree! pointer to the current Tree; Long64_tfUnzipBufferSize! Max Size for the ready unzipped blocks (default is 2*fBufferSize); char**fUnzipChunks! [fNseek] Individual unzipped chunks. Their summed size is kept under control.; TCondition*fUnzipDoneConditionUsed to wait for an unzip tour to finish. Gives the Async feel.; Int_t*fUnzipLen! [fNseek] Length of the unzipped buffers; TCondition*fUnzipStartConditionUsed to signal the threads to start.; Byte_t*fUnzipStatus! [fNSeek] For each blk, tells us if it's unzipped or pending; TThread*fUnzipThread[10]; Long64_tTTreeCache::fZipBytes! Total compressed size of branches in cache; static Int_tTTreeCache::fgLearnEntriesNumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:11681,learn,learning,11681,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,"TFileDrawMap.h. ◆ Paint(). void TFileDrawMap::Paint ; (; Option_t * ; option). overridevirtual . Paint this TFileDrawMap. ; Reimplemented from TObject.; Definition at line 489 of file TFileDrawMap.cxx. ◆ PaintBox(). void TFileDrawMap::PaintBox ; (; TBox & ; box, . Long64_t ; bseek, . Int_t ; nbytes . ). protectedvirtual . Paint the object at bseek with nbytes using the box object. ; Definition at line 512 of file TFileDrawMap.cxx. ◆ PaintDir(). void TFileDrawMap::PaintDir ; (; TDirectory * ; dir, . const char * ; keys . ). protectedvirtual . Paint keys in a directory. ; Definition at line 542 of file TFileDrawMap.cxx. ◆ Streamer(). void TFileDrawMap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileDrawMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TFileDrawMap.h. Member Data Documentation. ◆ fFile. TFile* TFileDrawMap::fFile. protected . Pointer to the file. ; Definition at line 35 of file TFileDrawMap.h. ◆ fFrame. TH1* TFileDrawMap::fFrame. protected . Histogram used to draw the map frame. ; Definition at line 36 of file TFileDrawMap.h. ◆ fKeys. TString TFileDrawMap::fKeys. protected . List of keys. ; Definition at line 37 of file TFileDrawMap.h. ◆ fOption. TString TFileDrawMap::fOption. protected . Drawing options. ; Definition at line 38 of file TFileDrawMap.h. ◆ fXsize. Int_t TFileDrawMap::fXsize. protected . Size in bytes of X axis. ; Definition at line 39 of file TFileDrawMap.h. ◆ fYsize. Int_t TFileDrawMap::fYsize. protected . Size in K/Mbytes of Y axis. ; Definition at line 40 of file TFileDrawMap.h. Libraries for TFileDrawMap:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TFileDrawMap.h; tree/treeplayer/src/TFileDrawMap.cxx. TFileDrawMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:20326,Guid,Guide,20326,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,1,['Guid'],['Guide']
Usability,TFileStat::GetElement ; (; ); const. inline . Definition at line 90 of file TPacketizerAdaptive.cxx. ◆ GetNextEntry(). Long64_t TPacketizerAdaptive::TFileStat::GetNextEntry ; (; ); const. inline . Definition at line 91 of file TPacketizerAdaptive.cxx. ◆ GetNode(). TFileNode * TPacketizerAdaptive::TFileStat::GetNode ; (; ); const. inline . Definition at line 89 of file TPacketizerAdaptive.cxx. ◆ IsDone(). Bool_t TPacketizerAdaptive::TFileStat::IsDone ; (; ); const. inline . Definition at line 86 of file TPacketizerAdaptive.cxx. ◆ IsSortable(). Bool_t TPacketizerAdaptive::TFileStat::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 87 of file TPacketizerAdaptive.cxx. ◆ MoveNextEntry(). void TPacketizerAdaptive::TFileStat::MoveNextEntry ; (; Long64_t ; step). inline . Definition at line 92 of file TPacketizerAdaptive.cxx. ◆ Print(). void TPacketizerAdaptive::TFileStat::Print ; (; Option_t * ; option = 0); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 116 of file TPacketizerAdaptive.cxx. ◆ SetDone(). void TPacketizerAdaptive::TFileStat::SetDone ; (; ). inline . Definition at line 88 of file TPacketizerAdaptive.cxx. Member Data Documentation. ◆ fElement. TDSetElement* TPacketizerAdaptive::TFileStat::fElement. private . Definition at line 80 of file TPacketizerAdaptive.cxx. ◆ fIsDone. Bool_t TPacketizerAdaptive::TFileStat::fIsDone. private . Definition at line 78 of file TPacketizerAdaptive.cxx. ◆ fNextEntry. Long64_t TPacketizerAdaptive::TFileStat::fNextEntry. private . Definition at line 81 of file TPacketizerAdaptive.cxx. ◆ fNode. TFileNode* TPacketizerAdaptive::TFileStat::fNode. private . Definition at line 79 of file TPacketizerAdaptive.cxx. proof/proofplayer/src/TPacketizerAdaptive.cxx. TPacketizerAdaptiveTFileStat. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:12675,Guid,Guide,12675,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,1,['Guid'],['Guide']
Usability,"TFormulavirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(const char *name, Double_t value)TFormula; SetParameter(Int_t param, Double_t value)TFormula; SetParameters(const Double_t *params)TFormula; SetParameters(Double_t arg1, Args &&... args)TFormula; SetParName(Int_t ipar, const char *name)TFormula; SetParNames(Args &&... args)TFormula; SetPredefinedParamNames()TFormulaprotected; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVariable(const TString &name, Double_t value)TFormula; SetVariables(const std::pair< TString, Double_t > *vars, const Int_t size)TFormula; SetVectorized(Bool_t vectorized)TFormula; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTFormulavirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFormulainline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TFormula()TFormula; TFormula(const char *name, const char *formula="""", bool addToGlobList=true, bool vectorize=false)TFormula; TFormula(const char *name, const char *formula, int ndim, int npar, bool addToGlobList=true)TFormula; TFormula(const TFormula &formula)TFormula; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TFormula() overrideTFormula; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula-members.html:11237,Guid,Guide,11237,doc/master/classTFormula-members.html,https://root.cern,https://root.cern/doc/master/classTFormula-members.html,1,['Guid'],['Guide']
Usability,"TGDMLParse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GDML; » TGDMLParse. class TGDMLParse: public TObject. Function Members (Methods); public:. virtual~TGDMLParse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGeoVolume*GDMLReadFile(const char* filename = ""test.gdml""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLParse.html:593,Clear,Clear,593,root/html602/TGDMLParse.html,https://root.cern,https://root.cern/root/html602/TGDMLParse.html,2,['Clear'],['Clear']
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHProgressBar.html:20511,Simpl,Simple,20511,root/html528/TGHProgressBar.html,https://root.cern,https://root.cern/root/html528/TGHProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGHProgressBar.html:20611,Simpl,Simple,20611,root/html530/TGHProgressBar.html,https://root.cern,https://root.cern/root/html530/TGHProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGHProgressBar.html:20611,Simpl,Simple,20611,root/html532/TGHProgressBar.html,https://root.cern,https://root.cern/root/html532/TGHProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"TGFrame::Activate(Bool_t); virtual voidAddEntry(TGString* s, Int_t id); virtual voidAddEntry(const char* s, Int_t id); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGComboBox.html:2384,Clear,Clear,2384,root/html528/TGComboBox.html,https://root.cern,https://root.cern/root/html528/TGComboBox.html,6,['Clear'],['Clear']
Usability,"TGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidBindKeys(Bool_t on = kTRUE); voidBindMenuKeys(Bool_t on = kTRUE); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidInit(); voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGSplitButton(const TGSplitButton&); voidCalcSize(); voidDrawTriangle(const GContext_t gc, Int_t x, Int_t y); Bool_tHandleSButton(Event_t* event); Bool_tHandleSCrossing(Event_t* event); Bool_tHandleSKey(Event_t* event); TGSplitButton&operator=(const TGSplitButton&); voidSetMenuState(Bool_t state). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSplitButton.html:19184,Clear,ClearFlags,19184,root/html528/TGSplitButton.html,https://root.cern,https://root.cern/root/html528/TGSplitButton.html,4,['Clear'],['ClearFlags']
Usability,"TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEdit(const TGWindow* parent = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. TGTextEdit(const TGWindow* parent, UInt_t w, UInt_t h, TGText* text, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. Initialize it with the specified text buffer. TGTextEdit(const TGWindow* parent, UInt_t w, UInt_t h, const char* string, Int_t id = -1, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create a text edit widget. Initialize it with the specified string. ~TGTextEdit(); Cleanup text edit widget. void Init(); Initiliaze a text edit widget. void SetMenuState(); Enable/disable menu items in function of what is possible. Long_t ReturnLongestLineWidth(); Return width of longest line in widget. void Clear(Option_t* = """"); Clear text edit widget. Bool_t SaveFile(const char* fname, Bool_t saveas = kFALSE); Save file. If filename==0 ask user via dialog for a filename, if in; addition saveas==kTRUE always ask for new filename. Returns; kTRUE if file was correctly saved, kFALSE otherwise. Bool_t Copy(); Copy text. Bool_t Cut(); Cut text. Bool_t Paste(); Paste text into widget. void Print(Option_t* = """") const; Send current buffer to printer. void Delete(Option_t* = """"); Delete selection. Bool_t Search(const char* string, Bool_t direction = kTRUE, Bool_t caseSensitive = kFALSE); Search for string in the specified direction. If direction is true; the search will be in forward direction. Bool_t Replace(TGLongPosition pos, const char* oldText, const char* newText, Bool_t direction, Bool_t caseSensitive); Replace text starting at textPos. Bool_t Goto(Long_t line, Long_t column = 0); Goto the specified line. void SetInsertMode(TGTextEdit::EInsertMode mode = kInsert); Sets the mode how characters are entered. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEdit.html:27966,Clear,Clear,27966,root/html528/TGTextEdit.html,https://root.cern,https://root.cern/root/html528/TGTextEdit.html,8,['Clear'],['Clear']
Usability,"TGFrameElement* el); virtual voidAddEntry(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBContainer.html:2242,Clear,Clear,2242,root/html528/TGLBContainer.html,https://root.cern,https://root.cern/root/html528/TGLBContainer.html,6,['Clear'],['Clear']
Usability,"TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionLogView.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionLogView.html:22254,Clear,ClearLogView,22254,root/html528/TSessionLogView.html,https://root.cern,https://root.cern/root/html528/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionLogView.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSessionLogView.html:22407,Clear,ClearLogView,22407,root/html530/TSessionLogView.html,https://root.cern,https://root.cern/root/html530/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionLogView.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionLogView.html:22407,Clear,ClearLogView,22407,root/html532/TSessionLogView.html,https://root.cern,https://root.cern/root/html532/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"TGLayoutHints* lhints); virtual voidAddEntrySort(TGString* s, Int_t id); virtual voidAddEntrySort(const char* s, Int_t id); virtual voidAddEntrySort(TGLBEntry* lbe, TGLayoutHints* lhints); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListBox.html:2337,Clear,Clear,2337,root/html528/TGListBox.html,https://root.cern,https://root.cern/root/html528/TGListBox.html,6,['Clear'],['Clear']
Usability,TGListView * ; lv). inlinevirtual . Reimplemented in TTVLVContainer.; Definition at line 211 of file TGListView.h. ◆ SetMultipleSelection(). void TGLVContainer::SetMultipleSelection ; (; Bool_t ; multi = kTRUE). inline . Definition at line 233 of file TGListView.h. ◆ SetViewMode(). void TGLVContainer::SetViewMode ; (; EListViewMode ; viewMode). virtual . Set list view mode for container. ; Definition at line 614 of file TGListView.cxx. ◆ Streamer(). void TGLVContainer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGContainer. ◆ StreamerNVirtual(). void TGLVContainer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 241 of file TGListView.h. Member Data Documentation. ◆ fCpos. Int_t* TGLVContainer::fCpos. protected . position of sub names ; Definition at line 187 of file TGListView.h. ◆ fItemLayout. TGLayoutHints* TGLVContainer::fItemLayout. protected . item layout hints ; Definition at line 185 of file TGListView.h. ◆ fJmode. Int_t* TGLVContainer::fJmode. protected . alignment of sub names ; Definition at line 188 of file TGListView.h. ◆ fLastActive. TGLVEntry* TGLVContainer::fLastActive. protected . last active item ; Definition at line 191 of file TGListView.h. ◆ fListView. TGListView* TGLVContainer::fListView. protected . listview which contains this container ; Definition at line 190 of file TGListView.h. ◆ fMultiSelect. Bool_t TGLVContainer::fMultiSelect. protected . true = multiple file selection ; Definition at line 189 of file TGListView.h. ◆ fViewMode. EListViewMode TGLVContainer::fViewMode. protected . list view viewing mode ; Definition at line 186 of file TGListView.h. Libraries for TGLVContainer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListView.h; gui/gui/src/TGListView.cxx. TGLVContainer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLVContainer.html:48699,Guid,Guide,48699,doc/master/classTGLVContainer.html,https://root.cern,https://root.cern/doc/master/classTGLVContainer.html,1,['Guid'],['Guide']
Usability,"TGMdiFrame(TGMdiMainFrame* main, Int_t w, Int_t h, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGMdiFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Bool_tCloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiFrame.html:1385,Clear,Clear,1385,root/html528/TGMdiFrame.html,https://root.cern,https://root.cern/root/html528/TGMdiFrame.html,4,['Clear'],['Clear']
Usability,"TGNumberEntry*fPointSizeScale; TGCheckButton*fPointSmooth; TGGroupFrame*fRefContainer; TGCheckButton*fReferenceOn; TGNumberEntry*fReferencePosX; TGNumberEntry*fReferencePosY; TGNumberEntry*fReferencePosZ; TGCheckButton*fResetCamerasOnUpdate; TGCheckButton*fRotateSceneOn; TGNumberEntry*fSceneRotDt; TGNumberEntry*fStereoEyeOffsetFac; TGCompositeFrame*fStereoFrame; TGNumberEntry*fStereoFrustumAsymFac; TGNumberEntry*fStereoZeroParallax; TGTextButton*fUpdateScene; TGLViewer*fViewer; TGNumberEntry*fWFLineWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGLViewerEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void ViewerRedraw(); Initiate redraw of the viewer. void SetModel(TObject* obj); Sets model or disables/hides viewer. void DoClearColor(Pixel_t color); Clear-color was changed. void DoIgnoreSizesOnUpdate(); ResetCamerasOnUpdate was toggled. void DoResetCamerasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewerEditor.html:22701,Clear,Clear-color,22701,root/html534/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html534/TGLViewerEditor.html,3,['Clear'],['Clear-color']
Usability,"TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:83144,simpl,simple,83144,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"TGProgressBar.cxx. ◆ SetBarType(). void TGProgressBar::SetBarType ; (; EBarType ; type). Set bar type. ; Definition at line 146 of file TGProgressBar.cxx. ◆ SetFillType(). void TGProgressBar::SetFillType ; (; EFillType ; type). Set fill type. ; Definition at line 136 of file TGProgressBar.cxx. ◆ SetForegroundColor(). void TGProgressBar::SetForegroundColor ; (; Pixel_t ; pixel). overridevirtual . Change text color drawing. ; Reimplemented from TGFrame.; Definition at line 207 of file TGProgressBar.cxx. ◆ SetMax(). void TGProgressBar::SetMax ; (; Float_t ; max). inline . Definition at line 82 of file TGProgressBar.h. ◆ SetMin(). void TGProgressBar::SetMin ; (; Float_t ; min). inline . Definition at line 81 of file TGProgressBar.h. ◆ SetPosition(). void TGProgressBar::SetPosition ; (; Float_t ; pos). Set progress position between [min,max]. ; Definition at line 92 of file TGProgressBar.cxx. ◆ SetRange(). void TGProgressBar::SetRange ; (; Float_t ; min, . Float_t ; max . ). Set min and max of progress bar. ; Definition at line 66 of file TGProgressBar.cxx. ◆ ShowPos(). virtual void TGProgressBar::ShowPos ; (; Bool_t ; on). inlinevirtual . Reimplemented in TGVProgressBar.; Definition at line 79 of file TGProgressBar.h. ◆ Streamer(). void TGProgressBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar. ◆ StreamerNVirtual(). void TGProgressBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TGProgressBar.h. ◆ UsePercent(). Bool_t TGProgressBar::UsePercent ; (; ); const. inline . Definition at line 68 of file TGProgressBar.h. Member Data Documentation. ◆ fBarColorGC. TGGC TGProgressBar::fBarColorGC. protected . progress bar drawing context ; Definition at line 39 of file TGProgressBar.h. ◆ fBarType. EBarType TGProgressBar::fBarType. protected . OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:36267,progress bar,progress bar,36267,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,"TGTextButton*fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoEltuEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoName(); Slot for name. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoA(); Slot for A. void DoB(); Slot for B. void DoDz(); Slot for Z. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltuEditor.html:21262,undo,undoing,21262,root/html534/TGeoEltuEditor.html,https://root.cern,https://root.cern/root/html534/TGeoEltuEditor.html,1,['undo'],['undoing']
Usability,"TGWin32VirtualXProxy.cxx:174; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245; double; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ToHumanReadableSizevoid ToHumanReadableSize(value_type bytes, Bool_t si, Double_t *coeff, const char **units)Return the size expressed in 'human readable' format.Definition StringConv.hxx:38; ROOT::FromHumanReadableSizeEFromHumanReadableSize FromHumanReadableSize(std::string_view str, T &value)Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB,...Definition StringConv.hxx:86; ROOT::EFromHumanReadableSizeEFromHumanReadableSizeDefinition StringConv.hxx:69; ROOT::EFromHumanReadableSize::kParseFail@ kParseFail; ROOT::EFromHumanReadableSize::kSuccess@ kSuccess; ROOT::EFromHumanReadableSize::kOverflow@ kOverflow; v@ vDefinition rootcling_impl.cxx:3699. corebaseincROOTStringConv.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/StringConv_8hxx_source.html:7815,Guid,Guide,7815,doc/master/StringConv_8hxx_source.html,https://root.cern,https://root.cern/doc/master/StringConv_8hxx_source.html,1,['Guid'],['Guide']
Usability,"TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGHeaderFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHeaderFrame.html:2473,Clear,Clear,2473,root/html528/TGHeaderFrame.html,https://root.cern,https://root.cern/root/html528/TGHeaderFrame.html,4,['Clear'],['Clear']
Usability,"TGWindow* p, const TGWindow* m, UInt_t w, UInt_t h, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGedPopup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedPopup.html:2068,Clear,Clear,2068,root/html528/TGedPopup.html,https://root.cern,https://root.cern/root/html528/TGedPopup.html,4,['Clear'],['Clear']
Usability,"TGeoCtub(); TGeoCtub(Double_t* params); TGeoCtub(const TGeoCtub&); TGeoCtub(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); TGeoCtub(const char* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual~TGeoCtub(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoTubeSeg::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidTGeoTubeSeg::ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:2030,Clear,Clear,2030,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,1,['Clear'],['Clear']
Usability,"TGraph *grmin = new TGraph(n,x,ymin);; TGraph *grmax = new TGraph(n,x,ymax);; TGraph *gr = new TGraph(n,x,y);; TGraph *grshade = new TGraph(2*n);; for (i=0;i<n;i++) {; grshade->SetPoint(i,x[i],ymax[i]);; grshade->SetPoint(n+i,x[n-i-1],ymin[n-i-1]);; }; grshade->SetFillStyle(3013);; grshade->SetFillColor(16);; grshade->Draw(""f"");; grmin->Draw(""l"");; grmax->Draw(""l"");; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""CP"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; yminfloat yminDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; AuthorRene Brun ; Definition in file graphShade.C. tutorialsgraphsgraphShade.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphShade_8C.html:2524,Guid,Guide,2524,doc/master/graphShade_8C.html,https://root.cern,https://root.cern/doc/master/graphShade_8C.html,1,['Guid'],['Guide']
Usability,"THbookBranch;  HBOOK Branch. More...;  ; class  THbookFile;  This class is an interface to the Hbook objects in Hbook files. More...;  ; class  THbookKey;  HBOOK Key. More...;  ; class  THbookTree;  A wrapper class supporting Hbook ntuples (CWN and RWN). More...;  ; class  THnBase;  Multidimensional histogram base. More...;  ; class  THnSparse;  Efficient multidimensional histogram. More...;  ; class  TKDE;  Kernel Density Estimation class. More...;  ; class  TLimit;   Legacy Code TLimit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLimit might still be a valid solution. Consider switching to RooStats.Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. More...;  ; class  TMultiDimFit;  Multidimensional Fits in ROOT. More...;  ; class  TPrincipal;  Principal Components Analysis (PCA) More...;  ; class  TProfile2PolyBin;  Helper class to represent a bin in the TProfile2Poly histogram. More...;  ; class  TSpline;  Base class for spline implementation containing the Draw/Paint methods. More...;  ; class  TSpline3;  Class to create third splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives at beginning and ending points. More...;  ; class  TSpline5;  Class to create quintic natural splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives using double knots (see BuildCoeff) for more on this. More...;  ; class  TSplinePoly;  Base class for TSpline knot. More...;  ; class  TSplinePoly3;  Class for TSpline3 knot. More...;  ; class  TSplinePoly5;  Class for TSpline5 knot. More...;  ; class  TSVDUnfold;  SVD Approach to Data Unfolding. More...;  ; class  TVirtualFitter;  Abstract Base Class for Fitting. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Hist.html:4823,Guid,Guide,4823,doc/master/group__Hist.html,https://root.cern,https://root.cern/doc/master/group__Hist.html,1,['Guid'],['Guide']
Usability,"TIME; 335 void AddAllocationTime(ULong64_t time) { fAllocationTime += time; }; 336#endif; 337 void AddAllocationCount(UInt_t count) { fAllocationCount += count; }; 338 virtual Long64_t AutoSave(Option_t* option = """");; 339 ; 340 /// Add a new branch, and infer the data type from the type of `obj` being passed.; 341 ///; 342 /// \note This and the next overload should cover most cases for creating a branch. Try to use these two whenever; 343 /// possible, unless e.g. type conversions are needed.; 344 ///; 345 /// \param[in] name Name of the branch to be created.; 346 /// \param[in] obj Address of the object to be added. Make sure to pass a pointer to the actual type/class that; 347 /// should be stored in the tree (no pointers to base classes). When calling Fill(), the current value of the type/object will be saved.; 348 /// \param[in] bufsize The buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; 349 /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; 350 /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; 351 /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; 352 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 353 template <class T> TBranch *Branch(const char* name, T* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); 354 {; 355 return BranchImpRef(name, TClass::GetClass<T>(), TDataType::GetType(typeid(T)), obj, bufsize, splitlevel);; 356 }; 357 ; 358 /// Add a new branch, and infer the data type from the array `addobj` being passed.; 359 ///; 360 /// \note This and the previous overload should cover most cases for creating a branch. Try to use these two whenever; 361 /// possible, unless e.g. type conversio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:16765,simpl,simple,16765,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simple']
Usability,"TInterpreter.h:468; TInterpreter::CallFunc_SetArgvirtual void CallFunc_SetArg(CallFunc_t *, ULong_t) const =0; TInterpreter::TypeInfo_FactoryCopyvirtual TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t *) constDefinition TInterpreter.h:527; TInterpreter::GenerateTClassvirtual TClass * GenerateTClass(ClassInfo_t *classinfo, Bool_t silent=kFALSE)=0; TInterpreter::ClassInfo_ClassPropertyvirtual Long_t ClassInfo_ClassProperty(ClassInfo_t *) constDefinition TInterpreter.h:400; TInterpreter::GetMorevirtual Int_t GetMore() const =0Returns whether the interpreter is waiting for more input, i.e.; TInterpreter::Instancestatic TInterpreter * Instance()returns gInterpreter globalDefinition TInterpreter.cxx:58; TInterpreter::CreateListOfBaseClassesvirtual void CreateListOfBaseClasses(TClass *cl) const =0; TInterpreter::ShutDownvirtual void ShutDown()=0; TInterpreter::FuncTempInfo_Deletevirtual void FuncTempInfo_Delete(FuncTempInfo_t *) const =0; TInterpreter::ClassInfo_Factoryvirtual ClassInfo_t * ClassInfo_Factory(DeclId_t declid) const =0; TInterpreter::ClearFileBusyvirtual void ClearFileBusy()=0; TInterpreter::GetRootMapFilesvirtual TObjArray * GetRootMapFiles() const =0; TInterpreter::BaseClassInfo_FullNamevirtual const char * BaseClassInfo_FullName(BaseClassInfo_t *) constDefinition TInterpreter.h:450; TInterpreter::GetSTLIncludePathvirtual const char * GetSTLIncludePath() constDefinition TInterpreter.h:163; TInterpreter::ClassInfo_IsEnumvirtual Bool_t ClassInfo_IsEnum(const char *) constDefinition TInterpreter.h:417; TInterpreter::CallFunc_SetArgvirtual void CallFunc_SetArg(CallFunc_t *, Float_t) const =0; TInterpreter::AddAvailableIndentifiersvirtual void AddAvailableIndentifiers(TSeqCollection &)=0; TInterpreter::TypedefInfo_Sizevirtual int TypedefInfo_Size(TypedefInfo_t *) constDefinition TInterpreter.h:547; TInterpreter::CallFunc_SetArgvirtual void CallFunc_SetArg(CallFunc_t *, ULong64_t) const =0; TInterpreter::CallFunc_SetFuncProtovirtual void CallFunc_SetFuncProto(CallFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:75609,Clear,ClearFileBusyvirtual,75609,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,2,['Clear'],"['ClearFileBusy', 'ClearFileBusyvirtual']"
Usability,TLTL(x-s*x0) ; Definition at line 195 of file TUnfold.h. ◆ fNdf. Int_t TUnfold::fNdf. private . number of degrees of freedom ; Definition at line 201 of file TUnfold.h. ◆ fRegMode. ERegMode TUnfold::fRegMode. protected . type of regularisation ; Definition at line 176 of file TUnfold.h. ◆ fRhoAvg. Double_t TUnfold::fRhoAvg. private . average global correlation coefficient ; Definition at line 199 of file TUnfold.h. ◆ fRhoMax. Double_t TUnfold::fRhoMax. private . maximum global correlation coefficient ; Definition at line 197 of file TUnfold.h. ◆ fSumOverY. TArrayD TUnfold::fSumOverY. protected . truth vector calculated from the non-normalized response matrix ; Definition at line 172 of file TUnfold.h. ◆ fTauSquared. Double_t TUnfold::fTauSquared. protected . regularisation parameter tau squared ; Definition at line 166 of file TUnfold.h. ◆ fVxx. TMatrixDSparse* TUnfold::fVxx. private . covariance matrix Vxx ; Definition at line 185 of file TUnfold.h. ◆ fVxxInv. TMatrixDSparse* TUnfold::fVxxInv. private . inverse of covariance matrix Vxx-1 ; Definition at line 187 of file TUnfold.h. ◆ fVyy. TMatrixDSparse* TUnfold::fVyy. protected . covariance matrix Vyy corresponding to y ; Definition at line 160 of file TUnfold.h. ◆ fVyyInv. TMatrixDSparse* TUnfold::fVyyInv. private . inverse of the input covariance matrix Vyy-1 ; Definition at line 189 of file TUnfold.h. ◆ fX. TMatrixD* TUnfold::fX. private . unfolding result x ; Definition at line 183 of file TUnfold.h. ◆ fX0. TMatrixD* TUnfold::fX0. protected . bias vector x0 ; Definition at line 164 of file TUnfold.h. ◆ fXToHist. TArrayI TUnfold::fXToHist. protected . mapping of matrix indices to histogram bins ; Definition at line 168 of file TUnfold.h. ◆ fY. TMatrixD* TUnfold::fY. protected . input (measured) data y ; Definition at line 158 of file TUnfold.h. hist/unfold/inc/TUnfold.h; hist/unfold/src/TUnfold.cxx. TUnfold. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:63145,Guid,Guide,63145,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['Guid'],['Guide']
Usability,"TLegend; 14 ; 15 ; 16#include ""TPave.h""; 17#include ""TAttText.h""; 18 ; 19class TObject;; 20class TList;; 21class TLegendEntry;; 22 ; 23class TLegend : public TPave , public TAttText {; 24 ; 25protected:; 26 TLegend& operator=(const TLegend&);; 27 ; 28public:; 29 TLegend();; 30 TLegend( Double_t x1, Double_t y1, Double_t x2, Double_t y2,; 31 const char* header = """", Option_t* option=""brNDC"" );; 32 TLegend( Double_t w, Double_t h, const char* header = """", Option_t* option=""brNDC"" );; 33 ~TLegend() override;; 34 TLegend(const TLegend &legend);; 35 ; 36 TLegendEntry *AddEntry(const TObject* obj, const char* label = """", Option_t* option = ""lpf"" );; 37 TLegendEntry *AddEntry(const char *name, const char* label = """", Option_t* option = ""lpf"" );; 38 void Clear( Option_t* option = """" ) override; // *MENU*; 39 void Copy( TObject &obj ) const override;; 40 virtual void DeleteEntry(); // *MENU*; 41 void Draw( Option_t* option = """" ) override;; 42 virtual void EditEntryAttFill();; 43 virtual void EditEntryAttLine();; 44 virtual void EditEntryAttMarker();; 45 virtual void EditEntryAttText();; 46 Float_t GetColumnSeparation() const { return fColumnSeparation; }; 47 TLegendEntry *GetEntry() const;; 48 Float_t GetEntrySeparation() const { return fEntrySeparation; }; 49 virtual const char *GetHeader() const;; 50 TList *GetListOfPrimitives() const {return fPrimitives;}; 51 Float_t GetMargin() const { return fMargin; }; 52 Int_t GetNColumns() const { return fNColumns; }; 53 Int_t GetNRows() const;; 54 virtual void InsertEntry( const char* objectName = """",const char* label = """",; 55 Option_t* option = ""lpf"" ); // *MENU*; 56 void Paint( Option_t* option = """" ) override;; 57 virtual void PaintPrimitives();; 58 void Print( Option_t* option = """" ) const override;; 59 void RecursiveRemove(TObject *obj) override;; 60 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 61 void SetDefaults() { fEntrySeparation = 0.1f; fMargin = 0.25f; fNColumns = 1; fColumnSeparation = 0.0f; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8h_source.html:1494,Clear,Clear,1494,doc/master/TLegend_8h_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8h_source.html,1,['Clear'],['Clear']
Usability,"TList *, const char *=0, Int_t=0, TList *=0);  *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ;  ; Int_t UploadDataSetFromFile (const char *, const char *, const char *=0, Int_t=0, TList *=0);  *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ;  ; Int_t UploadPackage (const char *par, EUploadPackageOpt opt=kUntar, TList *workers=0);  Upload a PROOF archive (PAR file). ;  ; Bool_t UseDynamicStartup () const;  ; virtual Int_t VerifyDataSet (const char *dataset, const char *optStr="""");  Verify if all files in the specified dataset are available. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:22587,Clear,Clear,22587,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['Clear'],['Clear']
Usability,"TList.; Reimplemented in TQUndoManager.; Definition at line 98 of file TQCommand.h. ◆ IsEqual(). Bool_t TQCommand::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Equal comparison. ; The commands are equal if they are applied to the same object and have the same Redo/Undo actions; More complicated commands might want to override this function. ; Reimplemented from TObject.; Definition at line 418 of file TQCommand.cxx. ◆ IsExecuting(). Bool_t TQCommand::IsExecuting ; (; ); const. Returns kTRUE if command execution is in progress. ; Definition at line 824 of file TQCommand.cxx. ◆ IsMacro(). Bool_t TQCommand::IsMacro ; (; ); const. Returns kTRUE if neither redo nor undo action specified. ; Definition at line 800 of file TQCommand.cxx. ◆ IsRedoing(). Bool_t TQCommand::IsRedoing ; (; ); const. Redo action is in progress. ; Definition at line 816 of file TQCommand.cxx. ◆ IsSetter(). Bool_t TQCommand::IsSetter ; (; ); const. virtual . Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ; By default, all functions with names like ""SetXXX"" or ""setXXX"" considered as setters. Another type of setters are Move, Resize operations; More complicated commands might want to override this function. ; Definition at line 440 of file TQCommand.cxx. ◆ IsUndoing(). Bool_t TQCommand::IsUndoing ; (; ); const. Undo action is in progress. ; Definition at line 808 of file TQCommand.cxx. ◆ ls(). void TQCommand::ls ; (; Option_t * ; option = """"); const. overridevirtual . ls this command and merged commands ; Reimplemented from TCollection.; Reimplemented in TQUndoManager.; Definition at line 848 of file TQCommand.cxx. ◆ Merge() [1/2]. Long64_t TQCommand::Merge ; (; TCollection * ; collection, . TFileMergeInfo * ;  . ). virtual . Merge a collection of TQCommand. ; Definition at line 337 of file TQCommand.cxx. ◆ Merge() [2/2]. void TQCommand::Merge ; (; TQCommand * ; c). virtual . Add command to the list of merged commands. ; This make it possible ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:40658,Undo,Undo,40658,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; UInt_tfLimitmaximum number of commands can be located in stack; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TList*fLogBooklisting of all actions during execution; Bool_tfLoggingkTRUE if logging is ON; Int_tTQCommand::fNRargsnumber of redo arguments; Int_tTQCommand::fNUargsnumber of undo arguments; TStringTQCommand::fNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tTQCommand::fNewDeletekTRUE if Redo/Undo methods are new/delete; void*TQCommand::fObjectobject to which undo/redo actions applied; TQConnection*TQCommand::fRedodo/redo action; Long_t*TQCommand::fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQCommand::fStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←; TQUndoManager. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:18520,Undo,Undo,18520,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,8,"['Undo', 'undo']","['Undo', 'undo', 'undoing']"
Usability,"TLmultiset:; 1105 case ROOT::kSTLunorderedmultiset:; 1106 case ROOT::kSTLmap:; 1107 case ROOT::kSTLunorderedmap:; 1108 case ROOT::kSTLmultimap:; 1109 case ROOT::kSTLunorderedmultimap:; 1110 if ( fEnv->fUseTemp ) {; 1111 return (((char*)fEnv->fTemp)+idx*fValDiff);; 1112 }; 1113 // Intentional fall through.; 1114 default:; 1115 switch( idx ) {; 1116 case 0:; 1117 fEnv->fIdx = idx;; 1118 return fEnv->fStart = fFirst.invoke(fEnv);; 1119 default: {; 1120 fEnv->fIdx = idx - fEnv->fIdx;; 1121 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 1122 void* result = fNext.invoke(fEnv);; 1123 fEnv->fIdx = idx;; 1124 return result;; 1125 }; 1126 }; 1127 }; 1128 }; 1129 Fatal(""TGenCollectionProxy"",""At> Logic error - no proxy object set."");; 1130 return 0;; 1131}; 1132 ; 1133////////////////////////////////////////////////////////////////////////////////; 1134/// Clear the emulated collection.; 1135 ; 1136void TGenCollectionProxy::Clear(const char* opt); 1137{; 1138 if ( fEnv && fEnv->fObject ) {; 1139 if ( (fProperties & kNeedDelete) && opt && *opt=='f' ) {; 1140 size_t i, n = *(size_t*)fSize.invoke(fEnv);; 1141 if ( n > 0 ) {; 1142 for (i=0; i<n; ++i); 1143 DeleteItem(true, TGenCollectionProxy::At(i));; 1144 }; 1145 }; 1146 fClear.invoke(fEnv);; 1147 }; 1148}; 1149 ; 1150////////////////////////////////////////////////////////////////////////////////; 1151/// Return the current size of the container; 1152 ; 1153UInt_t TGenCollectionProxy::Size() const; 1154{; 1155 if ( fEnv && fEnv->fObject ) {; 1156 if (fEnv->fUseTemp) {; 1157 return fEnv->fSize;; 1158 } else {; 1159 return *(size_t*)fSize.invoke(fEnv);; 1160 }; 1161 }; 1162 Fatal(""TGenCollectionProxy"",""Size> Logic error - no proxy object set."");; 1163 return 0;; 1164}; 1165 ; 1166////////////////////////////////////////////////////////////////////////////////; 1167/// Resize the container; 1168 ; 1169void TGenCollectionProxy::Resize(UInt_t n, Bool_t force); 1170{; 1171 if ( fEnv && fEnv->fObject ) {; 1172 if ( force && f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:36889,Clear,Clear,36889,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"TMVA are Multilayer Perceptrons; 436 if (Use[""MLP""]); 437 factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLP"", ""H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:!UseRegulator"" );; 438 ; 439 if (Use[""MLPBFGS""]); 440 factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLPBFGS"", ""H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:TrainingMethod=BFGS:!UseRegulator"" );; 441 ; 442 if (Use[""MLPBNN""]); 443 factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLPBNN"", ""H:!V:NeuronType=tanh:VarTransform=N:NCycles=60:HiddenLayers=N+5:TestRate=5:TrainingMethod=BFGS:UseRegulator"" ); // BFGS training with bayesian regulators; 444 ; 445 ; 446 // Multi-architecture DNN implementation.; 447 if (Use[""DNN_CPU""] or Use[""DNN_GPU""]) {; 448 // General layout.; 449 TString layoutString (""Layout=TANH|128,TANH|128,TANH|128,LINEAR"");; 450 ; 451 // Define Training strategy. One could define multiple strategy string separated by the ""|"" delimiter; 452 ; 453 TString trainingStrategyString = (""TrainingStrategy=LearningRate=1e-2,Momentum=0.9,""; 454 ""ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,""; 455 ""WeightDecay=1e-4,Regularization=None,""; 456 ""DropConfig=0.0+0.5+0.5+0.5"");; 457 ; 458 // General Options.; 459 TString dnnOptions (""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; 460 ""WeightInitialization=XAVIERUNIFORM"");; 461 dnnOptions.Append ("":""); dnnOptions.Append (layoutString);; 462 dnnOptions.Append ("":""); dnnOptions.Append (trainingStrategyString);; 463 ; 464 // Cuda implementation.; 465 if (Use[""DNN_GPU""]) {; 466 TString gpuOptions = dnnOptions + "":Architecture=GPU"";; 467 factory->BookMethod(dataloader, TMVA::Types::kDL, ""DNN_GPU"", gpuOptions);; 468 }; 469 // Multi-core CPU implementation.; 470 if (Use[""DNN_CPU""]) {; 471 TString cpuOptions = dnnOptions + "":Architecture=CPU"";; 472 factory->BookMethod(dataloader, TMVA::Types::kDL, ""DNN_CPU"", cpuOptions);; 473 }; 474 }; 475 ; 476 // CF(Clermont-Ferrand)ANN; 477 if (Use[""CFMlp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C_source.html:22903,Learn,LearningRate,22903,doc/master/TMVAClassification_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C_source.html,1,['Learn'],['LearningRate']
Usability,"TMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:15851,learn,learning,15851,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,1,['learn'],['learning']
Usability,"TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; const PDEFoamVect & ; vect). substitution operator ; Definition at line 99 of file PDEFoamVect.cxx. ◆ operator=() [2/3]. TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; Double_t ; x). Loading in double prec. number, sometimes can be useful. ; Definition at line 201 of file PDEFoamVect.cxx. ◆ operator=() [3/3]. TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; Double_t ; Vect[]). Loading in ordinary double prec. vector, sometimes can be useful. ; Definition at line 191 of file PDEFoamVect.cxx. ◆ operator[](). Double_t & TMVA::PDEFoamVect::operator[] ; (; Int_t ; n). [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ; Definition at line 120 of file PDEFoamVect.cxx. ◆ Print(). void TMVA::PDEFoamVect::Print ; (; Option_t * ; option); const. virtual . Printout of all vector components. ; Reimplemented from TObject.; Definition at line 217 of file PDEFoamVect.cxx. ◆ Streamer(). virtual void TMVA::PDEFoamVect::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::PDEFoamVect::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file PDEFoamVect.h. Member Data Documentation. ◆ fCoords. Double_t* TMVA::PDEFoamVect::fCoords. private . [fDim] Coordinates ; Definition at line 40 of file PDEFoamVect.h. ◆ fDim. Int_t TMVA::PDEFoamVect::fDim. private . Dimension. ; Definition at line 39 of file PDEFoamVect.h. Libraries for TMVA::PDEFoamVect:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamVect.h; tmva/tmva/src/PDEFoamVect.cxx. TMVAPDEFoamVect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html:16076,Guid,Guide,16076,doc/master/classTMVA_1_1PDEFoamVect.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html,1,['Guid'],['Guide']
Usability,"TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gToolsTools & gTools(). tutorialstmvaTMVARegressionApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html:12339,Guid,Guide,12339,doc/master/TMVARegressionApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html,1,['Guid'],['Guide']
Usability,"TMVA::RuleEnsemble::SetModelFull ; (; ). inline . Definition at line 96 of file RuleEnsemble.h. ◆ SetModelLinear(). void TMVA::RuleEnsemble::SetModelLinear ; (; ). inline . Definition at line 90 of file RuleEnsemble.h. ◆ SetModelRules(). void TMVA::RuleEnsemble::SetModelRules ; (; ). inline . Definition at line 93 of file RuleEnsemble.h. ◆ SetMsgType(). void TMVA::RuleEnsemble::SetMsgType ; (; EMsgType ; t). Definition at line 154 of file RuleEnsemble.cxx. ◆ SetOffset(). void TMVA::RuleEnsemble::SetOffset ; (; Double_t ; v = 0.0). inline . Definition at line 108 of file RuleEnsemble.h. ◆ SetRuleFit(). void TMVA::RuleEnsemble::SetRuleFit ; (; const RuleFit * ; rf). inline . Definition at line 102 of file RuleEnsemble.h. ◆ SetRuleMinDist(). void TMVA::RuleEnsemble::SetRuleMinDist ; (; Double_t ; d). inline . Definition at line 124 of file RuleEnsemble.h. ◆ SetRules(). void TMVA::RuleEnsemble::SetRules ; (; const std::vector< TMVA::Rule * > & ; rules). set rules ; first clear all ; Definition at line 531 of file RuleEnsemble.cxx. ◆ UpdateEventVal(). void TMVA::RuleEnsemble::UpdateEventVal ; (; ). inline . Definition at line 387 of file RuleEnsemble.h. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const RuleEnsemble & ; rules . ). friend . Member Data Documentation. ◆ fAverageRuleSigma. Double_t TMVA::RuleEnsemble::fAverageRuleSigma. private . average rule sigma ; Definition at line 353 of file RuleEnsemble.h. ◆ fAverageSupport. Double_t TMVA::RuleEnsemble::fAverageSupport. private . average support (over all rules) ; Definition at line 352 of file RuleEnsemble.h. ◆ fEvent. const Event* TMVA::RuleEnsemble::fEvent. private . current event. ; Definition at line 368 of file RuleEnsemble.h. ◆ fEventCacheOK. Bool_t TMVA::RuleEnsemble::fEventCacheOK. private . true if rule/linear respons are updated ; Definition at line 369 of file RuleEnsemble.h. ◆ fEventLinearVal. std::vector<Double_t> TMVA::RuleEnsemble::fEvent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:32333,clear,clear,32333,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['clear'],['clear']
Usability,"TMathBase.h:347; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; formula1Definition formula1.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::v5::TF1DataDefinition TF1Data.h:37; ROOT::v5::TF1Data::fParMinDouble_t * fParMinDefinition TF1Data.h:48; ROOT::v5::TF1Data::fNsaveInt_t fNsaveDefinition TF1Data.h:45; ROOT::v5::TF1Data::fSaveDouble_t * fSaveDefinition TF1Data.h:50; ROOT::v5::TF1Data::Streamervoid Streamer(TBuffer &b, Int_t version, UInt_t start, UInt_t count, const TClass *onfile_class=nullptr)specialized streamer function being able to read old TF1 versions as TF1Data in memoryDefinition TF1Data_v5.cxx:81; ROOT::v5::TF1Data::fNpxInt_t fNpxDefinition TF1Data.h:41; ROOT::v5::TF1Data::fXminDouble_t fXminDefinition TF1Data.h:39; ROOT::v5::TF1Data::fNpfitsInt_t fNpfitsDefinition TF1Data.h:43; ROOT::v5::TF1Data::fTypeInt_t fTypeDefinition TF1Data.h:42; ROOT::v5::TF1Data::fParMaxDouble_t * fParMaxDefinition TF1Data.h:49; ROOT::v5::TF1Data::fNDFInt_t fNDFDefinition TF1Data.h:44; ROOT::v5::TF1Data::fMaximumDouble_t fMaximumDefinition TF1Data.h:51; ROOT::v5::TF1Data::fChisquareDouble_t fChisquareDefinition TF1Data.h:46; ROOT::v5::TF1Data::fMinimumDouble_t fMinimumDefinition TF1Data.h:52; ROOT::v5::TF1Data::fParErrorsDouble_t * fParErrorsDefinition TF1Data.h:47; ROOT::v5::TF1Data::fXmaxDouble_t fXmaxDefinition TF1Data.h:40; TF1::TF1FunctorPointerImplDefinition TF1.h:313; TF1::TF1FunctorPointerDefinition TF1.h:247; TF1::TF1FunctorPointer::Clonevirtual TF1FunctorPointer * Clone() const =0; Drawth1 Draw(); mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. histhistsrcTF1.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:203878,Guid,Guide,203878,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TMatrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2010-10-01 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixT_float_.html:26200,Clear,Clear,26200,root/html528/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,"TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelMergingFile.html:3199,Simpl,Simply,3199,doc/master/classTParallelMergingFile.html,https://root.cern,https://root.cern/doc/master/classTParallelMergingFile.html,1,['Simpl'],['Simply']
Usability,"TMemFile::SysWrite ; (; Int_t ; fd, . const void * ; buf, . Int_t ; len . ). overrideprotectedvirtual . Write a buffer into the file. ; Reimplemented from TFile.; Definition at line 662 of file TMemFile.cxx. ◆ SysWriteImpl(). Int_t TMemFile::SysWriteImpl ; (; Int_t ; fd, . const void * ; buf, . Long64_t ; len . ). protected . Write a buffer into the file. ; Definition at line 598 of file TMemFile.cxx. Member Data Documentation. ◆ fBlockList. TMemBlock TMemFile::fBlockList. protected . Collection of memory blocks of size fgDefaultBlockSize. ; Definition at line 47 of file TMemFile.h. ◆ fBlockOffset. Long64_t TMemFile::fBlockOffset {0}. protected . Seek offset within the block. ; Definition at line 53 of file TMemFile.h. ◆ fBlockSeek. TMemBlock* TMemFile::fBlockSeek {nullptr}. protected . Pointer to the block we seeked to. ; Definition at line 52 of file TMemFile.h. ◆ fDefaultBlockSize. Long64_t TMemFile::fDefaultBlockSize = fgDefaultBlockSize. protected . Definition at line 56 of file TMemFile.h. ◆ fExternalData. ExternalDataPtr_t TMemFile::fExternalData. protected . shared file data / content ; Definition at line 48 of file TMemFile.h. ◆ fgDefaultBlockSize. constexpr Long64_t TMemFile::fgDefaultBlockSize = 2 * 1024 * 1024. staticconstexprprotected . Definition at line 55 of file TMemFile.h. ◆ fIsOwnedByROOT. Bool_t TMemFile::fIsOwnedByROOT {kFALSE}. protected . if this is a C-style memory region ; Definition at line 49 of file TMemFile.h. ◆ fSize. Long64_t TMemFile::fSize {0}. protected . Total file size (sum of the size of the chunks) ; Definition at line 50 of file TMemFile.h. ◆ fSysOffset. Long64_t TMemFile::fSysOffset {0}. protected . Seek offset in file. ; Definition at line 51 of file TMemFile.h. Libraries for TMemFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TMemFile.h; io/io/src/TMemFile.cxx. TMemFile. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:12:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemFile.html:53262,Guid,Guide,53262,doc/v632/classTMemFile.html,https://root.cern,https://root.cern/doc/v632/classTMemFile.html,1,['Guid'],['Guide']
Usability,"TNet< Architecture_t, Layer_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TNet< Architecture_t, Layer_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = TLayer<Architecture_t>>; class TMVA::DNN::TNet< Architecture_t, Layer_t >Generic neural network class. ; This generic neural network class represents a concrete neural network through a vector of layers and coordinates the forward and backward propagation through the net.; The net takes as input a batch from the training data given in matrix form, with each row corresponding to a certain training event.; On construction, the neural network allocates all the memory required for the training of the neural net and keeps it until its destruction.; The Architecture type argument simply holds the architecture-specific data types, which are just the matrix type Matrix_t and the used scalar type Scalar_t.; Template Parameters. ArchitectureThe Architecture type that holds the ; Layer_tThe type used for the layers. Can be either Layer<Architecture> or SharedWeightLayer<Architecture>. datatypes for a given architecture. . Definition at line 49 of file Net.h. Public Types; using LayerIterator_t = typename std::vector< Layer_t >::iterator;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TNet ();  ;  TNet (const TNet &other);  ; template<typename OtherArchitecture_t > ;  TNet (size_t batchSize, const TNet< OtherArchitecture_t > &);  ;  TNet (size_t batchSize, size_t inputWidth, ELossFunction fJ, ERegularization fR=ERegularization::kNone, Scalar_t fWeightDecay=0.0);  Construct a neural net for a given batch size with given output function * and regularization. ;  ; template<typename SharedLayer > ; void AddLayer (SharedLayer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:973,simpl,simply,973,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['simpl'],['simply']
Usability,"TObjArray * GetSteps () const;  ; Bool_t HandleTimer (TTimer *) override;  Method used for implementing animation of TGraphTime. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *chopt="""") override;  Paint all objects added to each time step. ;  ; virtual void SaveAnimatedGif (const char *filename="""") const;  Save this object to filename as an animated gif file if filename is specified it must be of the form xxx.gif otherwise a file yyy.gif is produced where yyy is the object name. ;  ; virtual void SetSleepTime (Int_t stime=0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphTime.html:2253,Clear,Clear,2253,doc/master/classTGraphTime.html,https://root.cern,https://root.cern/doc/master/classTGraphTime.html,1,['Clear'],['Clear']
Usability,"TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:17016,undo,undo,17016,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,1,['undo'],['undo']
Usability,"TObject * ; obj, . Bool_t ; check . ). virtual . Emits signal when double clicking on icon. ; Definition at line 2562 of file TRootBrowserLite.cxx. ◆ CheckObjectItem(). void TRootBrowserLite::CheckObjectItem ; (; TObject * ; obj, . Bool_t ; check = kFALSE . ). overridevirtual . Check / uncheck the TGListTreeItem corresponding to this object and add a checkmark on TGLVEntry if check = kTRUE. ; Reimplemented from TBrowserImp.; Definition at line 1347 of file TRootBrowserLite.cxx. ◆ Class(). static TClass * TRootBrowserLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootBrowserLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootBrowserLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 165 of file TRootBrowserLite.h. ◆ ClearHistory(). void TRootBrowserLite::ClearHistory ; (; ). private . clear navigation history ; Definition at line 2301 of file TRootBrowserLite.cxx. ◆ CloseTabs(). void TRootBrowserLite::CloseTabs ; (; ). inlineoverridevirtual . Reimplemented from TBrowserImp.; Definition at line 131 of file TRootBrowserLite.h. ◆ CloseWindow(). void TRootBrowserLite::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 1578 of file TRootBrowserLite.cxx. ◆ CreateBrowser(). void TRootBrowserLite::CreateBrowser ; (; const char * ; name). private . Create the actual browser. ; Definition at line 977 of file TRootBrowserLite.cxx. ◆ DeclFileName(). static const char * TRootBrowserLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 165 of file TRootBrowserLite.h. ◆ DeleteListTreeItem(). void TRootBrowserLite::DeleteListTreeItem ; (; TGListTreeItem * ; item). private . delete list tree item, remove it from history ; Definition at line 2385 of file TRootBrowserLite.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:46674,clear,clear,46674,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['clear'],['clear']
Usability,"TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelectorList.html:1825,Clear,Clear,1825,root/html534/TSelectorList.html,https://root.cern,https://root.cern/root/html534/TSelectorList.html,1,['Clear'],['Clear']
Usability,"TObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::Deactiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2395,Clear,ClearInputData,2395,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearInputData']
Usability,"TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. boolIncludeStatErrorFlag to implement Statistical errors for this sample; Double_tRelErrorThresholdThe minimum relative uncertainty for a bin to use stat errors; RooStats::HistFactory::EstimateSummary::ConstraintTypeStatConstraintTypeThe type of constraint binwise stat errors; stringchannel; pair<double,double>dummyForRoot; vector<TH1*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<ShapeSys>shapeSysts; vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html:6842,simpl,simple,6842,root/html532/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. boolIncludeStatErrorFlag to implement Statistical errors for this sample; Double_tRelErrorThresholdThe minimum relative uncertainty for a bin to use stat errors; RooStats::HistFactory::EstimateSummary::ConstraintTypeStatConstraintTypeThe type of constraint binwise stat errors; stringchannel; pair<double,double>dummyForRoot; vector<TH1*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<ShapeSys>shapeSysts; vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__EstimateSummary.html:6861,simpl,simple,6861,root/html534/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"TObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:7183,Simpl,SimpleInterval,7183,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"TObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawTriangle(GContext_t gc, Int_t x, Int_t y); virtual voidTGCheckButton::EmitSignals(Bool_t wasUp = kTRUE); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTGCheckButton::Init(); voidTObject::MakeZombie(); voidTGCheckButton::PSetState(EButtonState state, Bool_t emit); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGColorSelect(const TGColorSelect&); TGColorSelect&operator=(const TGColorSelect&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorSelect.html:17133,Clear,ClearFlags,17133,root/html528/TGColorSelect.html,https://root.cern,https://root.cern/root/html528/TGColorSelect.html,4,['Clear'],['ClearFlags']
Usability,"TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SimpleInterval.html:7586,Simpl,SimpleInterval,7586,root/html604/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html604/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7586,Simpl,SimpleInterval,7586,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"TObjectTable::PtrIsValid ; (; TObject * ; obj). inline . Definition at line 78 of file TObjectTable.h. ◆ Remove(). void TObjectTable::Remove ; (; TObject * ; obj). Remove an object from the object table. ; Definition at line 209 of file TObjectTable.cxx. ◆ RemoveQuietly(). void TObjectTable::RemoveQuietly ; (; TObject * ; op). Remove an object from the object table. ; If op is 0 or not in the table don't complain. Currently only used by the TClonesArray dtor. Should not be used anywhere else, except in places where ""special"" allocation and de-allocation tricks are performed. ; Definition at line 243 of file TObjectTable.cxx. ◆ Statistics(). void TObjectTable::Statistics ; (; ). inline . Definition at line 65 of file TObjectTable.h. ◆ Streamer(). void TObjectTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TObjectTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TObjectTable.h. ◆ Terminate(). void TObjectTable::Terminate ; (; ). Deletes the object table (this static class function calls the dtor). ; Definition at line 264 of file TObjectTable.cxx. ◆ UpdateInstCount(). void TObjectTable::UpdateInstCount ; (; ); const. Histogram all objects according to their classes. ; Definition at line 375 of file TObjectTable.cxx. Member Data Documentation. ◆ fSize. Int_t TObjectTable::fSize. private . Definition at line 39 of file TObjectTable.h. ◆ fTable. TObject** TObjectTable::fTable. private . Definition at line 38 of file TObjectTable.h. ◆ fTally. Int_t TObjectTable::fTally. private . Definition at line 40 of file TObjectTable.h. Libraries for TObjectTable:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TObjectTable.h; core/cont/src/TObjectTable.cxx. TObjectTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:23523,Guid,Guide,23523,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['Guid'],['Guide']
Usability,"TPad *prevSelPad, TObject *prevSelObj)Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the curre...Definition TCanvas.cxx:1074; TCanvas::fYsizeRealSize_t fYsizeRealCurrent size of canvas along Y in CM.Definition TCanvas.h:36; TCanvas::Constructorvoid Constructor()Canvas default constructor.Definition TCanvas.cxx:191; TCanvas::ToggleAutoExecvirtual void ToggleAutoExec()Toggle pad auto execution of list of TExecs.Definition TCanvas.cxx:2422; TCanvas::TCanvasTCanvas(const TCanvas &canvas)=delete; TCanvas::fWindowTopXInt_t fWindowTopXTop X position of window (in pixels)Definition TCanvas.h:39; TCanvas::Drawvoid Draw(Option_t *option="""") overrideDraw a canvas.Definition TCanvas.cxx:854; TCanvas::SetDoubleBuffervoid SetDoubleBuffer(Int_t mode=1) overrideSet Double Buffer On/Off.Definition TCanvas.cxx:1998; TCanvas::ToggleToolTipsvirtual void ToggleToolTips()Toggle tooltip display.Definition TCanvas.cxx:2464; TCanvas::Clearvoid Clear(Option_t *option="""") overrideRemove all primitives from the canvas.Definition TCanvas.cxx:737; TCanvas::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in canvas.Definition TCanvas.cxx:1185; TCanvas::Iconifyvoid Iconify()Iconify canvas.Definition TCanvas.cxx:1479; TCanvas::GetWindowTopXInt_t GetWindowTopX()Returns current top x position of window on screen.Definition TCanvas.cxx:1210; TCanvas::ToggleEventStatusvirtual void ToggleEventStatus()Toggle event statusbar.Definition TCanvas.cxx:2431; TCanvas::Destructorvoid Destructor()Actual canvas destructor.Definition TCanvas.cxx:695; TCanvas::fUpdatedBool_t fUpdated! Set to True when Update method was calledDefinition TCanvas.h:64; TCanvas::DeleteCanvasPaintervoid DeleteCanvasPainter()assert on IsBatch() == false?Definition TCanvas.cxx:2626; TCanvas::fPadSaveTPad * fPadSave! Pointer to saved pad in HandleInputDefinition TCanvas.h:56; TCanvas::SupportAlphastatic Bool_t SupportAlpha()Static function returning ""tru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:103583,Clear,Clearvoid,103583,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"TPaletteEditor::TPaletteEditor ; (; TAttImage * ; attImage, . UInt_t ; w, . UInt_t ; h . ). Constructor. ; Definition at line 257 of file TAttImage.cxx. ◆ ~TPaletteEditor(). virtual TPaletteEditor::~TPaletteEditor ; (; ). inlinevirtual . Definition at line 26 of file TAttImage.h. Member Function Documentation. ◆ Class(). static TClass * TPaletteEditor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPaletteEditor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPaletteEditor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file TAttImage.h. ◆ CloseWindow(). void TPaletteEditor::CloseWindow ; (; ). virtual . Closes the window and deletes itself. ; Reimplemented in TASPaletteEditor.; Definition at line 265 of file TAttImage.cxx. ◆ DeclFileName(). static const char * TPaletteEditor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 30 of file TAttImage.h. ◆ IsA(). virtual TClass * TPaletteEditor::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TASPaletteEditor.; Definition at line 30 of file TAttImage.h. ◆ Streamer(). virtual void TPaletteEditor::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TASPaletteEditor. ◆ StreamerNVirtual(). void TPaletteEditor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 30 of file TAttImage.h. Member Data Documentation. ◆ fAttImage. TAttImage* TPaletteEditor::fAttImage {nullptr}. protected . Definition at line 22 of file TAttImage.h. Libraries for TPaletteEditor:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TAttImage.h; graf2d/graf/src/TAttImage.cxx. TPaletteEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteEditor.html:3186,Guid,Guide,3186,doc/master/classTPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTPaletteEditor.html,1,['Guid'],['Guide']
Usability,"TPaveLabel.h. ◆ IsA(). TClass * TPaveLabel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TPave.; Definition at line 44 of file TPaveLabel.h. ◆ operator=(). TPaveLabel & TPaveLabel::operator= ; (; const TPaveLabel & ; pavelabel). TPaveLabel assign operator. ; Definition at line 68 of file TPaveLabel.cxx. ◆ Paint(). void TPaveLabel::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this pavelabel with its current attributes. ; Reimplemented from TPave.; Definition at line 111 of file TPaveLabel.cxx. ◆ PaintPaveLabel(). void TPaveLabel::PaintPaveLabel ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . const char * ; label, . Option_t * ; option = """" . ). virtual . Draw this pavelabel with new coordinates. ; Definition at line 122 of file TPaveLabel.cxx. ◆ SavePrimitive(). void TPaveLabel::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TPave.; Definition at line 201 of file TPaveLabel.cxx. ◆ SetLabel(). virtual void TPaveLabel::SetLabel ; (; const char * ; label). inlinevirtual . Definition at line 42 of file TPaveLabel.h. ◆ Streamer(). void TPaveLabel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPave. ; Reimplemented from TPave. ◆ StreamerNVirtual(). void TPaveLabel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TPaveLabel.h. Member Data Documentation. ◆ fLabel. TString TPaveLabel::fLabel. protected . Label written at the center of Pave. ; Definition at line 23 of file TPaveLabel.h. Libraries for TPaveLabel:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPaveLabel.h; graf2d/graf/src/TPaveLabel.cxx. TPaveLabel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveLabel.html:27108,Guid,Guide,27108,doc/master/classTPaveLabel.html,https://root.cern,https://root.cern/doc/master/classTPaveLabel.html,1,['Guid'],['Guide']
Usability,"TPluginManager.h. Member Data Documentation. ◆ fArgTupleTypeInfo. std::vector<std::string> TPluginHandler::fArgTupleTypeInfo. private . ctor method or global function ; Definition at line 118 of file TPluginManager.h. ◆ fBase. TString TPluginHandler::fBase. private . Definition at line 110 of file TPluginManager.h. ◆ fCallEnv. TMethodCall* TPluginHandler::fCallEnv. private . Definition at line 116 of file TPluginManager.h. ◆ fCanCall. AtomicInt_t TPluginHandler::fCanCall. private . Definition at line 119 of file TPluginManager.h. ◆ fClass. TString TPluginHandler::fClass. private . Definition at line 112 of file TPluginManager.h. ◆ fCtor. TString TPluginHandler::fCtor. private . Definition at line 114 of file TPluginManager.h. ◆ fIsGlobal. Bool_t TPluginHandler::fIsGlobal. private . Definition at line 121 of file TPluginManager.h. ◆ fIsMacro. Bool_t TPluginHandler::fIsMacro. private . if 1 fCallEnv is ok, -1 fCallEnv is not ok, 0 fCallEnv not setup yet. ; Definition at line 120 of file TPluginManager.h. ◆ fLoadStatus. Int_t TPluginHandler::fLoadStatus. private . Definition at line 123 of file TPluginManager.h. ◆ fLoadStatusFlag. std::once_flag TPluginHandler::fLoadStatusFlag. private . Definition at line 122 of file TPluginManager.h. ◆ fMethod. TFunction* TPluginHandler::fMethod. private . ctor method call environment ; Definition at line 117 of file TPluginManager.h. ◆ fOrigin. TString TPluginHandler::fOrigin. private . Definition at line 115 of file TPluginManager.h. ◆ fPlugin. TString TPluginHandler::fPlugin. private . Definition at line 113 of file TPluginManager.h. ◆ fRegexp. TString TPluginHandler::fRegexp. private . Definition at line 111 of file TPluginManager.h. Libraries for TPluginHandler:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TPluginManager.h; core/base/src/TPluginManager.cxx. TPluginHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPluginHandler.html:20462,Guid,Guide,20462,doc/master/classTPluginHandler.html,https://root.cern,https://root.cern/doc/master/classTPluginHandler.html,1,['Guid'],['Guide']
Usability,"TProfile.cxx:324; TProfile::fScalingBool_t fScaling! True when TProfile::Scale is calledDefinition TProfile.h:43; TProfile::GetStatsvoid GetStats(Double_t *stats) const overridefill the array stats from the contents of this profile.Definition TProfile.cxx:921; TProfile::IsATClass * IsA() const overrideDefinition TProfile.h:138; TProfile::GetErrorOptionOption_t * GetErrorOption() constReturn option to compute profile errors.Definition TProfile.cxx:896; TProfile::LabelsOptionvoid LabelsOption(Option_t *option=""h"", Option_t *axis=""X"") overrideSet option(s) to draw axis with labels.Definition TProfile.cxx:1001; TProfile::GetW2Double_t * GetW2()Definition TProfile.h:67; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. histhistsrcTProfile.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:87084,Guid,Guide,87084,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TProofDrawEventList::DoFill ; (; Long64_t ; entry, . Double_t ; w, . const Double_t * ; v . ). overrideprotectedvirtual . Fills the eventlist with given values. ; Implements TProofDraw.; Definition at line 959 of file TProofDraw.cxx. ◆ Init(). void TProofDrawEventList::Init ; (; TTree * ; tree). overridevirtual . See TProofDraw::Init(). ; Reimplemented from TProofDraw.; Definition at line 908 of file TProofDraw.cxx. ◆ IsA(). TClass * TProofDrawEventList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofDraw.; Definition at line 142 of file TProofDraw.h. ◆ SlaveBegin(). void TProofDrawEventList::SlaveBegin ; (; TTree * ; tree). overridevirtual . See TProofDraw::SlaveBegin(). ; Reimplemented from TProofDraw.; Definition at line 926 of file TProofDraw.cxx. ◆ SlaveTerminate(). void TProofDrawEventList::SlaveTerminate ; (; void ; ). overridevirtual . See TProofDraw::SlaveTerminate(). ; Reimplemented from TProofDraw.; Definition at line 968 of file TProofDraw.cxx. ◆ Streamer(). void TProofDrawEventList::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofDraw. ◆ StreamerNVirtual(). void TProofDrawEventList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file TProofDraw.h. ◆ Terminate(). void TProofDrawEventList::Terminate ; (; void ; ). overridevirtual . See TProofDraw::Terminate(). ; Reimplemented from TProofDraw.; Definition at line 978 of file TProofDraw.cxx. Member Data Documentation. ◆ fElist. TEventList* TProofDrawEventList::fElist. protected . Definition at line 127 of file TProofDraw.h. ◆ fEventLists. TList* TProofDrawEventList::fEventLists. protected . Definition at line 128 of file TProofDraw.h. proof/proofplayer/inc/TProofDraw.h; proof/proofplayer/src/TProofDraw.cxx. TProofDrawEventList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEventList.html:17557,Guid,Guide,17557,doc/master/classTProofDrawEventList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEventList.html,1,['Guid'],['Guide']
Usability,"TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TRFIOFile A ROOT file that reads/writes via a rfiod server; TRFIOSystem Directory handler for RFIO; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twistor; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:118981,undo,undo,118981,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,"['Simpl', 'undo']","['Simple', 'undo']"
Usability,"TQObject::fSignalsBlocked! flag used for suppression of signals; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element.; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveSelection(const char* n = ""TEveSelection"", const char* t = """"); Constructor. void SetHighlightMode(); Set to 'highlight' mode. void DoElementSelect(TEveSelection::SelMap_i entry); Select element indicated by the entry and fill its; implied-selected set. void DoElementUnselect(TEveSelection::SelMap_i entry); Deselect element indicated by the entry and clear its; implied-selected set. Bool_t AcceptElement(TEveElement* el); Pre-addition check. Deny addition if el is already selected.; Virtual from TEveElement. void AddElement(TEveElement* el); Add an element into selection, virtual from TEveElement. void RemoveElement(TEveElement* el); Add an element into selection, virtual from TEveElement.; Overriden here just so that a signal can be emitted. void RemoveElementLocal(TEveElement* el); Virtual from TEveElement. void RemoveElements(); Add an element into selection, virtual from TEveElement.; Overriden here just so that a signal can be emitted. void RemoveElementsLocal(); Virtual from TEveElement. void RemoveImpliedSelected(TEveElement* el); Remove element from all implied-selected sets. This is called as part of the element destruction from; TEveManager::PreDeleteElement() and should not be called; directly. void RecheckImpliedSet(TEveSelection::SelMap_i smi); Recalculate implied-selected state for giv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelection.html:24313,clear,clear,24313,root/html528/TEveSelection.html,https://root.cern,https://root.cern/root/html528/TEveSelection.html,4,['clear'],['clear']
Usability,TRD2.cxx. ◆ ~TTRD2(). TTRD2::~TTRD2 ; (; ). override . TRD2 shape default destructor. ; Definition at line 56 of file TTRD2.cxx. Member Function Documentation. ◆ Class(). static TClass * TTRD2::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTRD2::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTRD2::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TTRD2.h. ◆ DeclFileName(). static const char * TTRD2::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TTRD2.h. ◆ GetDx2(). Float_t TTRD2::GetDx2 ; (; ); const. inline . Definition at line 42 of file TTRD2.h. ◆ GetDy2(). Float_t TTRD2::GetDy2 ; (; ); const. inline . Definition at line 43 of file TTRD2.h. ◆ IsA(). TClass * TTRD2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBRIK.; Definition at line 45 of file TTRD2.h. ◆ SetPoints(). void TTRD2::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create TRD2 points. ; Reimplemented from TBRIK.; Definition at line 63 of file TTRD2.cxx. ◆ Streamer(). void TTRD2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBRIK. ◆ StreamerNVirtual(). void TTRD2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TTRD2.h. Member Data Documentation. ◆ fDx2. Float_t TTRD2::fDx2. protected . Definition at line 31 of file TTRD2.h. ◆ fDy2. Float_t TTRD2::fDy2. protected . Definition at line 32 of file TTRD2.h. Libraries for TTRD2:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TTRD2.h; graf3d/g3d/src/TTRD2.cxx. TTRD2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTRD2.html:20494,Guid,Guide,20494,doc/master/classTTRD2.html,https://root.cern,https://root.cern/doc/master/classTTRD2.html,1,['Guid'],['Guide']
Usability,"TRUE)Set highlight (enable/disable) mode for the histogram by default highlight mode is disable.Definition TH1.cxx:4482; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::GetPadTVirtualPad * GetPad(Int_t subpadnumber) const overrideGet a pointer to subpadnumber of this pad.Definition TPad.cxx:3000; TProfileProfile Histogram.Definition TProfile.h:32; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TText::SetTextvirtual void SetText(Double_t x, Double_t y, const char *text)Definition TText.h:74; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::Modifiedvirtual void Modified(Bool_t flag=1)=0; TVirtualPad::Drawvoid Draw(Option_t *option="""") override=0Default Draw method for all objects.; TVirtualPad::SetGridxvirtual void SetGridx(Int_t value=1)=0; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; mTMarker mDefinition textangle.C:8; DateMarch 2018 ; AuthorJan Musinsky ; Definition in file temperature.C. tutorialstreetemperature.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/temperature_8C.html:9061,Guid,Guide,9061,doc/master/temperature_8C.html,https://root.cern,https://root.cern/doc/master/temperature_8C.html,1,['Guid'],['Guide']
Usability,TRatioPlot::fShowGridlines = kTRUE. protected . Stores whether to show the gridlines at all. ; Definition at line 125 of file TRatioPlot.h. ◆ fSplitFraction. Float_t TRatioPlot::fSplitFraction = 0.3. protected . Stores the fraction at which the upper and lower pads meet. ; Definition at line 92 of file TRatioPlot.h. ◆ fTopPad. TPad* TRatioPlot::fTopPad = nullptr. protected . The Pad that drawn on top on the others to have consistent coordinates. ; Definition at line 77 of file TRatioPlot.h. ◆ fUpBottomMargin. Float_t TRatioPlot::fUpBottomMargin = 0.05. protected . Stores the bottom margin of the upper pad. ; Definition at line 131 of file TRatioPlot.h. ◆ fUpperGXaxis. TGaxis* TRatioPlot::fUpperGXaxis = nullptr. protected . Upper graphical x axis. ; Definition at line 111 of file TRatioPlot.h. ◆ fUpperGXaxisMirror. TGaxis* TRatioPlot::fUpperGXaxisMirror = nullptr. protected . Upper mirror of the x axis. ; Definition at line 115 of file TRatioPlot.h. ◆ fUpperGYaxis. TGaxis* TRatioPlot::fUpperGYaxis = nullptr. protected . Upper graphical y axis. ; Definition at line 113 of file TRatioPlot.h. ◆ fUpperGYaxisMirror. TGaxis* TRatioPlot::fUpperGYaxisMirror = nullptr. protected . Upper mirror of the y axis. ; Definition at line 117 of file TRatioPlot.h. ◆ fUpperPad. TPad* TRatioPlot::fUpperPad = nullptr. protected . The pad which contains the upper plot part. ; Definition at line 75 of file TRatioPlot.h. ◆ fUpTopMargin. Float_t TRatioPlot::fUpTopMargin = 0.1. protected . Stores the top margin of the upper pad. ; Definition at line 130 of file TRatioPlot.h. ◆ fUpYaxis. TAxis* TRatioPlot::fUpYaxis = nullptr. protected . Clone of the upper y axis. ; Definition at line 120 of file TRatioPlot.h. Libraries for TRatioPlot:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TRatioPlot.h; graf2d/gpad/src/TRatioPlot.cxx. TRatioPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:53003,Guid,Guide,53003,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['Guid'],['Guide']
Usability,"TRecorder::ListGui ; (; const char * ; filename). Prints out recorded GUI events. ; Definition at line 279 of file TRecorder.cxx. ◆ operator=(). TRecorder & TRecorder::operator= ; (; const TRecorder & ; ). private . ◆ Pause(). void TRecorder::Pause ; (; ). Pauses replaying. ; Definition at line 247 of file TRecorder.cxx. ◆ PrevCanvases(). void TRecorder::PrevCanvases ; (; const char * ; filename, . Option_t * ; option . ). Save previous canvases in a .root file. ; Definition at line 308 of file TRecorder.cxx. ◆ Replay() [1/2]. void TRecorder::Replay ; (; ). inline . Definition at line 318 of file TRecorder.h. ◆ Replay() [2/2]. Bool_t TRecorder::Replay ; (; const char * ; filename, . Bool_t ; showMouseCursor = kTRUE, . TRecorder::EReplayModes ; mode = kRealtime . ). Replays events from 'filename'. ; Definition at line 238 of file TRecorder.cxx. ◆ ReplayStop(). void TRecorder::ReplayStop ; (; ). Cancels replaying. ; Definition at line 263 of file TRecorder.cxx. ◆ Resume(). void TRecorder::Resume ; (; ). Resumes replaying. ; Definition at line 255 of file TRecorder.cxx. ◆ Start(). void TRecorder::Start ; (; const char * ; filename, . Option_t * ; option = ""RECREATE"", . Window_t * ; w = nullptr, . Int_t ; winCount = 0 . ). Starts recording events. ; Definition at line 221 of file TRecorder.cxx. ◆ Stop(). void TRecorder::Stop ; (; Bool_t ; guiCommand = kFALSE). Stopps recording events. ; Definition at line 230 of file TRecorder.cxx. ◆ Streamer(). void TRecorder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRecorder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 341 of file TRecorder.h. Friends And Related Symbol Documentation. ◆ TRecorderInactive. friend class TRecorderInactive. friend . Definition at line 275 of file TRecorder.h. ◆ TRecorderPaused. friend class TRecorderPaused. friend . Definition at line 276 of file TRecorder.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:17388,Resume,Resume,17388,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Resume'],['Resume']
Usability,"TRint::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TApplication. ◆ StreamerNVirtual(). void TRint::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TRint.h. ◆ TabCompletionHook(). Int_t TRint::TabCompletionHook ; (; char * ; buf, . int * ; pLoc, . std::ostream & ; out . ). overridevirtual . Forward tab completion request to our TTabCom::Hook(). ; Reimplemented from TApplication.; Definition at line 827 of file TRint.cxx. ◆ Terminate(). void TRint::Terminate ; (; int ; status). overridevirtual . Terminate the application. ; Reset the terminal to sane mode and call the logoff macro defined via Rint.Logoff environment variable. NoteThe function does not return, unless the class has been told to return from Run(), by a call to SetReturnFromRun(). ; Reimplemented from TApplication.; Definition at line 722 of file TRint.cxx. Member Data Documentation. ◆ fBackslashContinue. Bool_t TRint::fBackslashContinue {}. private . Definition at line 41 of file TRint.h. ◆ fCaughtSignal. Int_t TRint::fCaughtSignal. private . Definition at line 39 of file TRint.h. ◆ fDefaultPrompt. TString TRint::fDefaultPrompt. private . Definition at line 35 of file TRint.h. ◆ fInputHandler. TFileHandler* TRint::fInputHandler. private . Definition at line 40 of file TRint.h. ◆ fInterrupt. Bool_t TRint::fInterrupt. private . Definition at line 38 of file TRint.h. ◆ fNcmd. Int_t TRint::fNcmd. private . Definition at line 34 of file TRint.h. ◆ fNonContinuePrompt. TString TRint::fNonContinuePrompt. private . Definition at line 36 of file TRint.h. ◆ fPrompt. char TRint::fPrompt[64]. private . Definition at line 37 of file TRint.h. Libraries for TRint:. [legend]; The documentation for this class was generated from the following files:; core/rint/inc/TRint.h; core/rint/src/TRint.cxx. TRint. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:29551,Guid,Guide,29551,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['Guid'],['Guide']
Usability,"TSGD< Architecture_t, Layer_t, DeepNet_t >Stochastic Batch Gradient Descent Optimizer class. ; This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum and nesterov momentum. ; Definition at line 46 of file SGD.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:1727,learn,learningRate,1727,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"TSYS/etc/system.rootrc; Root.TMemStat.system gnubuiltin; Root.TMemStat.buffersize 100000; Root.TMemStat.maxcalls 5000000. TMemStat::Show creates 3 canvases.; -In canvas1 it displays a dynamic histogram showing for pages (10 kbytes by default); the percentage of the page used.; A summary pave shows the total memory still in use when the TMemStat object; goes out of scope and the average occupancy of the pages.; The average occupancy gives a good indication of the memory fragmentation.; When moving the mouse on this canvas, a tooltip shows the backtrace for the allocations; at the address at the mouse position. -In canvas2 it displays the histogram of memory leaks in decreasing order.; when moving the mouse on this canvas, a tooltip shows the backtrace for the leak; in the bin below the mouse. -In canvas3 it displays the histogram of the nbigleaks largest leaks (default is 20); for each leak, the number of allocs and average alloc size is shown. Simply do:; root > TMemStat::Show(); or specifying arguments; root > TMemStat::Show(0.1,20,""mydir/mymemstat.root"");. The first argument to Show is the percentage of the time of the original job; that produced the file after which the display is updated. By default update=0.1,; ie 10 time intervals will be shown.; The second argument is nbigleaks. if <=0 canvas2 and canvas3 are not shown; The third argument is the imput file name (result of TMemStat).; If this argument is omitted, Show will take the most recent file; generated by TMemStat. You can restrict the address range to be analyzed via TMemStatShow::SetAddressRange; You can restrict the entry range to be analyzed via TMemStatShow::SetEntryRange. Author: Rene Brun 7 July 2010. Function Members (Methods); public:. virtual~TMemStatShow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemStatShow.html:3026,Simpl,Simply,3026,root/html602/TMemStatShow.html,https://root.cern,https://root.cern/root/html602/TMemStatShow.html,2,['Simpl'],['Simply']
Usability,TStreamerElement.; Definition at line 1454 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerObjectPointer::GetSize ; (; ); const. overridevirtual . Returns size of objectpointer in bytes. ; Reimplemented from TStreamerElement.; Definition at line 1470 of file TStreamerElement.cxx. ◆ Init(). void TStreamerObjectPointer::Init ; (; TVirtualStreamerInfo * ; obj = nullptr). overridevirtual . Setup the element. ; Reimplemented from TStreamerElement.; Definition at line 1443 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerObjectPointer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TStreamerElement.; Definition at line 348 of file TStreamerElement.h. ◆ IsaPointer(). Bool_t TStreamerObjectPointer::IsaPointer ; (; ); const. inlineoverridevirtual . Reimplemented from TStreamerElement.; Definition at line 345 of file TStreamerElement.h. ◆ operator=(). TStreamerObjectPointer & TStreamerObjectPointer::operator= ; (; const TStreamerObjectPointer & ; ). privatedelete . ◆ SetArrayDim(). void TStreamerObjectPointer::SetArrayDim ; (; Int_t ; dim). overridevirtual . Set number of array dimensions. ; Reimplemented from TStreamerElement.; Definition at line 1479 of file TStreamerElement.cxx. ◆ Streamer(). void TStreamerObjectPointer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerObjectPointer. ; Reimplemented from TStreamerElement.; Definition at line 1489 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerObjectPointer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 348 of file TStreamerElement.h. Libraries for TStreamerObjectPointer:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerObjectPointer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectPointer.html:20498,Guid,Guide,20498,doc/master/classTStreamerObjectPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html,1,['Guid'],['Guide']
Usability,"TString& ) const; check if verbosity ""V"" set in option. void UsefulSortDescending(vector<Double_t>& ); sort vector. void UsefulSortAscending(vector<Double_t>& ); sort vector. Int_t GetIndexMaxElement(vector<Double_t>& ); find index of maximum entry in vector. Int_t GetIndexMinElement(vector<Double_t>& ); find index of minimum entry in vector. Bool_t ContainsRegularExpression(const TString& s); check if regular expression; helper function to search for ""$!%^&()'<>?= "" in a string. TString ReplaceRegularExpressions(const TString& s, const TString& replace = ""+""); replace regular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:9339,simpl,simple,9339,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,6,['simpl'],['simple']
Usability,"TString(""CUDNN"")); // not needed (by default GPU is now CUDNN if available); 203 ; 204 // define training strategy separated by a separator ""|""; 205 DeclareOptionRef(fTrainingStrategyString = ""LearningRate=1e-3,""; 206 ""Momentum=0.0,""; 207 ""ConvergenceSteps=100,""; 208 ""MaxEpochs=2000,""; 209 ""Optimizer=ADAM,""; 210 ""BatchSize=30,""; 211 ""TestRepetitions=1,""; 212 ""WeightDecay=0.0,""; 213 ""Regularization=None,""; 214 ""DropConfig=0.0"",; 215 ""TrainingStrategy"", ""Defines the training strategies."");; 216}; 217 ; 218////////////////////////////////////////////////////////////////////////////////; 219void MethodDL::ProcessOptions(); 220{; 221 ; 222 if (IgnoreEventsWithNegWeightsInTraining()) {; 223 Log() << kINFO << ""Will ignore negative events in training!"" << Endl;; 224 }; 225 ; 226 if (fArchitectureString == ""STANDARD"") {; 227 Log() << kWARNING << ""The STANDARD architecture is not supported anymore. ""; 228 ""Please use Architecture=CPU or Architecture=CPU.""; 229 ""See the TMVA Users' Guide for instructions if you ""; 230 ""encounter problems.""; 231 << Endl;; 232 Log() << kINFO << ""We will use instead the CPU architecture"" << Endl;; 233 fArchitectureString = ""CPU"";; 234 }; 235 if (fArchitectureString == ""OPENCL"") {; 236 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 237 ""Please use Architecture=CPU or Architecture=CPU for the ""; 238 ""time being. See the TMVA Users' Guide for instructions ""; 239 ""if you encounter problems.""; 240 << Endl;; 241 // use instead GPU; 242 Log() << kINFO << ""We will try using the GPU-CUDA architecture if available"" << Endl;; 243 fArchitectureString = ""GPU"";; 244 }; 245 ; 246 // the architecture can now be set at runtime as an option; 247 ; 248 ; 249 if (fArchitectureString == ""GPU"" || fArchitectureString == ""CUDNN"") {; 250#ifdef R__HAS_TMVAGPU; 251 Log() << kINFO << ""Will now use the GPU architecture !"" << Endl;; 252#else // case TMVA does not support GPU; 253 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 25",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:8347,Guid,Guide,8347,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TString() : gTools().Color(""reset"");; 1485 ; 1486 Log() << Endl;; 1487 Log() << col << ""--- Short description:"" << colres << Endl;; 1488 Log() << Endl;; 1489 Log() << ""The DNN neural network is a feedforward"" << Endl;; 1490 Log() << ""multilayer perceptron implementation. The DNN has a user-"" << Endl;; 1491 Log() << ""defined hidden layer architecture, where the number of input (output)"" << Endl;; 1492 Log() << ""nodes is determined by the input variables (output classes, i.e., "" << Endl;; 1493 Log() << ""signal and one background, regression or multiclass). "" << Endl;; 1494 Log() << Endl;; 1495 Log() << col << ""--- Performance optimisation:"" << colres << Endl;; 1496 Log() << Endl;; 1497 ; 1498 const char* txt = ""The DNN supports various options to improve performance in terms of training speed and \n \; 1499reduction of overfitting: \n \; 1500\n \; 1501 - different training settings can be stacked. Such that the initial training \n\; 1502 is done with a large learning rate and a large drop out fraction whilst \n \; 1503 in a later stage learning rate and drop out can be reduced. \n \; 1504 - drop out \n \; 1505 [recommended: \n \; 1506 initial training stage: 0.0 for the first layer, 0.5 for later layers. \n \; 1507 later training stage: 0.1 or 0.0 for all layers \n \; 1508 final training stage: 0.0] \n \; 1509 Drop out is a technique where a at each training cycle a fraction of arbitrary \n \; 1510 nodes is disabled. This reduces co-adaptation of weights and thus reduces overfitting. \n \; 1511 - L1 and L2 regularization are available \n \; 1512 - Minibatches \n \; 1513 [recommended 10 - 150] \n \; 1514 Arbitrary mini-batch sizes can be chosen. \n \; 1515 - Multithreading \n \; 1516 [recommended: True] \n \; 1517 Multithreading can be turned on. The minibatches are distributed to the available \n \; 1518 cores. The algorithm is lock-free (\""Hogwild!\""-style) for each cycle. \n \; 1519 \n \; 1520 Options: \n \; 1521 \""Layout\"": \n \; 1522 - example: \""TANH|(N+30)*2,TAN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:54668,learn,learning,54668,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['learn'],['learning']
Usability,"TString.h. ◆ operator+ [9/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsFloatNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; f . ). friend . Definition at line 529 of file TString.h. ◆ operator+ [10/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsSignedNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; i . ). friend . Definition at line 529 of file TString.h. ◆ operator+ [11/11]. template<class T > . std::enable_if< ROOT::TypeTraits::IsUnsignedNumeral< T >::value, TString >::type operator+ ; (; TString ; s, . T ; u . ). friend . Definition at line 529 of file TString.h. ◆ operator<<. TBuffer & operator<< ; (; TBuffer & ; b, . const TString * ; obj . ). friend . Write TString or derived to TBuffer. ; Definition at line 1470 of file TString.cxx. ◆ operator== [1/2]. Bool_t operator== ; (; const TString & ; s1, . const char * ; s2 . ). friend . Compare TString with a char *. ; Definition at line 1482 of file TString.cxx. ◆ operator== [2/2]. Bool_t operator== ; (; const TString & ; s1, . const TString & ; s2 . ). friend . Definition at line 767 of file TString.h. ◆ TBufferFile. friend class TBufferFile. friend . Definition at line 143 of file TString.h. ◆ TStringLong. friend class TStringLong. friend . Definition at line 141 of file TString.h. ◆ TSubString. friend class TSubString. friend . Definition at line 142 of file TString.h. Member Data Documentation. ◆ fRep. Rep_t TString::fRep. protected . Definition at line 224 of file TString.h. ◆ kNPOS. constexpr Ssiz_t TString::kNPOS = ::kNPOS. staticconstexpr . Definition at line 278 of file TString.h. Libraries for TString:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TString.h; core/base/src/Stringio.cxx; core/base/src/TPRegexp.cxx; core/base/src/TRegexp.cxx; core/base/src/TString.cxx. TString. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTString.html:61204,Guid,Guide,61204,doc/master/classTString.html,https://root.cern,https://root.cern/doc/master/classTString.html,1,['Guid'],['Guide']
Usability,"TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetTitleXOffsetvoid SetTitleXOffset(Float_t offset=1)Definition TStyle.h:409; TSystem::MakeDirectoryvirtual int MakeDirectory(const char *name)Make a directory.Definition TSystem.cxx:827; TTree::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite this object to the current directory.Definition TTree.cxx:9753; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMVA::DataLoaderCopyvoid DataLoaderCopy(TMVA::DataLoader *des, TMVA::DataLoader *src); TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::CreateVariableTransformsvoid CreateVariableTransforms(const TString &trafoDefinition, TMVA::DataSetInfo &dataInfo, TMVA::TransformationHandler &transformationHandler, TMVA::MsgLogger &log)Definition VariableTransform.cxx:59; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; graphDefinition graph.py:1; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; Config.h; Factory.h; Types.h; VIBITS#define VIBITSDefinition Factory.cxx:103; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; MinNoTrainingEventsconst Int_t MinNoTrainingEventsDefinition Factory.cxx:95; READXML#define READXMLDefinition Factory.cxx:100. tmvatmvasrcFactory.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:141422,Guid,Guide,141422,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TStyle.h:203; TStyle::GetTitleFontSizeFloat_t GetTitleFontSize() constDefinition TStyle.h:274; TStyle::SetFrameLineStylevoid SetFrameLineStyle(Style_t styl=0)Definition TStyle.h:375; TStyle::GetHatchesLineWidthInt_t GetHatchesLineWidth() constDefinition TStyle.h:200; TStyle::fDateYFloat_t fDateYY position of the date in the canvas (in NDC)Definition TStyle.h:54; TStyle::ToggleEventStatusvoid ToggleEventStatus()Definition TStyle.h:417; TStyle::GetExponentOffsetvoid GetExponentOffset(Float_t &xoff, Float_t &yoff, Option_t *axis=""X"") constMethod returns X and Y offset of the axis 10^n notation.Definition TStyle.cxx:1855; TStyle::GetTitleAlignInt_t GetTitleAlign() constDefinition TStyle.h:270; TStyle::GetAxisColorColor_t GetAxisColor(Option_t *axis=""X"") constReturn the axis color number in the axis.Definition TStyle.cxx:1089; TStyle::GetFrameBorderModeInt_t GetFrameBorderMode() constDefinition TStyle.h:231; TStyle::fStatFormatTString fStatFormatPrinting format for stats.Definition TStyle.h:112; TStyle::GetPadTopMarginFloat_t GetPadTopMargin() constDefinition TStyle.h:212; TStyle::fColorModelPSInt_t fColorModelPSPostScript color model: 0 = RGB, 1 = CMYK.Definition TStyle.h:37; TStyle::SetLineScalePSvoid SetLineScalePS(Float_t scale=3)Definition TStyle.h:308; TStyle::GetFrameLineWidthWidth_t GetFrameLineWidth() constDefinition TStyle.h:229; TStyle::GetFrameFillColorColor_t GetFrameFillColor() constDefinition TStyle.h:225; TStyle::fStatStyleStyle_t fStatStyleFill area style of Stats PaveLabel.Definition TStyle.h:111; TStyle::GetTitleWFloat_t GetTitleW() constDefinition TStyle.h:282; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; lTLine lDefinition textangle.C:4. corebaseincTStyle.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:68752,Guid,Guide,68752,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,1,['Guid'],['Guide']
Usability,TSystem.h:151; SysInfo_t::fCpusInt_t fCpusDefinition TSystem.h:152; SysInfo_t::fPhysRamInt_t fPhysRamDefinition TSystem.h:156; SysInfo_t::fOSTString fOSDefinition TSystem.h:149; SysInfo_t::fModelTString fModelDefinition TSystem.h:150; TUtmpContentDefinition TUnixSystem.cxx:282; TUtmpContent::TUtmpContentTUtmpContent()Definition TUnixSystem.cxx:286; TUtmpContent::fUtmpContentsstruct utmp * fUtmpContentsDefinition TUnixSystem.cxx:283; TUtmpContent::SearchUtmpEntrystruct utmp * SearchUtmpEntry(const char *tty)Definition TUnixSystem.cxx:289; TUtmpContent::fEntriesUInt_t fEntriesDefinition TUnixSystem.cxx:284; TUtmpContent::~TUtmpContent~TUtmpContent()Definition TUnixSystem.cxx:287; TUtmpContent::ReadUtmpFileint ReadUtmpFile()Definition TUnixSystem.cxx:304; UserGroup_tDefinition TSystem.h:136; UserGroup_t::fGidInt_t fGidDefinition TSystem.h:138; UserGroup_t::fRealNameTString fRealNameDefinition TSystem.h:142; UserGroup_t::fShellTString fShellDefinition TSystem.h:143; UserGroup_t::fPasswdTString fPasswdDefinition TSystem.h:141; UserGroup_t::fUserTString fUserDefinition TSystem.h:139; UserGroup_t::fGroupTString fGroupDefinition TSystem.h:140; UserGroup_t::fUidInt_t fUidDefinition TSystem.h:137; groupDefinition TWinNTSystem.h:50; group::gr_gidint gr_gidDefinition TWinNTSystem.h:53; group::gr_namechar * gr_nameDefinition TWinNTSystem.h:51; passwdDefinition TWinNTSystem.h:38; passwd::pw_gidint pw_gidDefinition TWinNTSystem.h:42; passwd::pw_uidint pw_uidDefinition TWinNTSystem.h:41; passwd::pw_namechar * pw_nameDefinition TWinNTSystem.h:39; passwd::pw_gecoschar * pw_gecosDefinition TWinNTSystem.h:44; passwd::pw_passwdchar * pw_passwdDefinition TWinNTSystem.h:40; passwd::pw_shellchar * pw_shellDefinition TWinNTSystem.h:46; passwd::pw_dirchar * pw_dirDefinition TWinNTSystem.h:45; socketDefinition civetweb.c:1893; mTMarker mDefinition textangle.C:8. coreunixsrcTUnixSystem.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:227455,Guid,Guide,227455,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TTree::CopyEntriesvirtual Long64_t CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)Copy nentries from given tree to this tree.Definition TTree.cxx:3534; TTree::fMakeClassInt_t fMakeClass! not zero when processing code generated by MakeClassDefinition TTree.h:115; TTree::kMaxEntriesstatic constexpr Long64_t kMaxEntriesDefinition TTree.h:229; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetAnchorconst char * GetAnchor() constDefinition TUrl.h:70; TUrl::GetUrlconst char * GetUrl(Bool_t withDeflt=kFALSE) constReturn full URL.Definition TUrl.cxx:390; TUrl::SetAnchorvoid SetAnchor(const char *anchor)Definition TUrl.h:86; TUrl::GetFileAndOptionsconst char * GetFileAndOptions() constReturn the file and its options (the string specified behind the ?).Definition TUrl.cxx:504; TUrl::GetFileconst char * GetFile() constDefinition TUrl.h:69; TUrl::SetUrlvoid SetUrl(const char *url, Bool_t defaultIsFile=kFALSE)Parse url character string and split in its different subcomponents.Definition TUrl.cxx:110; TUrl::SetOptionsvoid SetOptions(const char *opt)Definition TUrl.h:87; TUrl::GetOptionsconst char * GetOptions() constDefinition TUrl.h:71; TUrl::GetProtocolconst char * GetProtocol() constDefinition TUrl.h:64; TVirtualIndex::UpdateFormulaLeavesvirtual void UpdateFormulaLeaves(const TTree *parent)=0; TVirtualPerfStats::SetFilevirtual void SetFile(TFile *)=0; TVirtualTreePlayer::UpdateFormulaLeavesvirtual void UpdateFormulaLeaves()=0; double; int; unsigned int; ROOT::Internal::TreeUtils::ExpandGlobstd::vector< std::string > ExpandGlob(const std::string &glob)Expands input glob into a collection of full paths to files.Definition InternalTreeUtils.cxx:512; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; slashTCanvas * slash()Definition slash.C:1. treetreesrcTChain.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:155424,Guid,Guide,155424,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['Guid'],['Guide']
Usability,"TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1782,learn,learning,1782,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,['learn'],['learning']
Usability,TTreeViewer::fDimension. private . Histogram dimension. ; Definition at line 83 of file TTreeViewer.h. ◆ fDRAW. TGPictureButton* TTreeViewer::fDRAW. private . DRAW button. ; Definition at line 157 of file TTreeViewer.h. ◆ fEditMenu. TGPopupMenu* TTreeViewer::fEditMenu. private . Definition at line 112 of file TTreeViewer.h. ◆ fEnableCut. bool TTreeViewer::fEnableCut. private . True if cuts are enabled. ; Definition at line 101 of file TTreeViewer.h. ◆ fFileMenu. TGPopupMenu* TTreeViewer::fFileMenu. private . Definition at line 111 of file TTreeViewer.h. ◆ fFilename. const char* TTreeViewer::fFilename. private . Name of the file containing the tree. ; Definition at line 78 of file TTreeViewer.h. ◆ fHelpMenu. TGPopupMenu* TTreeViewer::fHelpMenu. private . Definition at line 118 of file TTreeViewer.h. ◆ fHf. TGHorizontalFrame* TTreeViewer::fHf. private . Main horizontal frame. ; Definition at line 142 of file TTreeViewer.h. ◆ fHpb. TGHorizontalFrame* TTreeViewer::fHpb. private . Progress bar frame. ; Definition at line 151 of file TTreeViewer.h. ◆ fLastOption. TString TTreeViewer::fLastOption. private . Last graphic option. ; Definition at line 80 of file TTreeViewer.h. ◆ fLbl1. TGLabel* TTreeViewer::fLbl1. private . Label for list tree. ; Definition at line 148 of file TTreeViewer.h. ◆ fLbl2. TGLabel* TTreeViewer::fLbl2. private . Label for list view. ; Definition at line 149 of file TTreeViewer.h. ◆ fListHdr. TGCompositeFrame* TTreeViewer::fListHdr. private . Header for list view. ; Definition at line 147 of file TTreeViewer.h. ◆ fListView. TGListView* TTreeViewer::fListView. private . ListView with branches and leaves. ; Definition at line 179 of file TTreeViewer.h. ◆ fLt. TGListTree* TTreeViewer::fLt. private . ListTree with file and tree items. ; Definition at line 174 of file TTreeViewer.h. ◆ fLVContainer. TTVLVContainer* TTreeViewer::fLVContainer. private . Container for listview. ; Definition at line 180 of file TTreeViewer.h. ◆ fMappedBranch. TBranch* TTreeVie,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:61264,Progress bar,Progress bar,61264,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Progress bar'],['Progress bar']
Usability,"TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165268,learn,learn,165268,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['learn'],['learn']
Usability,TViewPubDataMembers::LastLink ; (; ); const. overrideprotectedvirtual . LastLink is not allowed in this class. ; See TList::LastLink for the intended behavior. ; Reimplemented from TList.; Definition at line 320 of file TViewPubDataMembers.cxx. ◆ Load(). void TViewPubDataMembers::Load ; (; ). Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ; Definition at line 298 of file TViewPubDataMembers.cxx. ◆ MakeIterator(). TIterator * TViewPubDataMembers::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a list iterator. ; Reimplemented from TList.; Definition at line 122 of file TViewPubDataMembers.cxx. ◆ operator=(). TViewPubDataMembers & TViewPubDataMembers::operator= ; (; const TViewPubDataMembers & ; ). privatedelete . ◆ RecursiveRemove(). void TViewPubDataMembers::RecursiveRemove ; (; TObject * ; obj). overrideprotectedvirtual . RecursiveRemove is not allowed in this class. ; See TList::RecursiveRemove for the intended behavior. ; Reimplemented from TList.; Definition at line 330 of file TViewPubDataMembers.cxx. ◆ Remove() [1/2]. TObject * TViewPubDataMembers::Remove ; (; TObject * ; obj). overrideprotectedvirtual . Remove is not allowed in this class. ; See TList::Remove for the intended behavior. ; Reimplemented from TList.; Definition at line 339 of file TViewPubDataMembers.cxx. ◆ Remove() [2/2]. TObject * TViewPubDataMembers::Remove ; (; TObjLink * ; lnk). overrideprotectedvirtual . Remove is not allowed in this class. ; See TList::Remove for the intended behavior. ; Reimplemented from TList.; Definition at line 349 of file TViewPubDataMembers.cxx. Member Data Documentation. ◆ fClasses. TList TViewPubDataMembers::fClasses. protected . Definition at line 31 of file TViewPubDataMembers.h. core/meta/src/TViewPubDataMembers.h; core/meta/src/TViewPubDataMembers.cxx. TViewPubDataMembers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubDataMembers.html:29020,Guid,Guide,29020,doc/master/classTViewPubDataMembers.html,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html,1,['Guid'],['Guide']
Usability,"TVirtualMonitoring.h. ◆ SendProcessingProgress(). virtual Bool_t TVirtualMonitoringWriter::SendProcessingProgress ; (; Double_t ; , . Double_t ; , . Bool_t ; = kFALSE . ). inlinevirtual . Reimplemented in ROOT::RTreeDrawMonitoring, and TTreeDrawMonitoring.; Definition at line 79 of file TVirtualMonitoring.h. ◆ SendProcessingStatus(). virtual Bool_t TVirtualMonitoringWriter::SendProcessingStatus ; (; const char * ; , . Bool_t ; = kFALSE . ). inlinevirtual . Reimplemented in ROOT::RTreeDrawMonitoring, and TTreeDrawMonitoring.; Definition at line 77 of file TVirtualMonitoring.h. ◆ SetLogLevel(). virtual void TVirtualMonitoringWriter::SetLogLevel ; (; const char * ; = ""WARNING""). inlinevirtual . Reimplemented in TTreeDrawMonitoring, and ROOT::RTreeDrawMonitoring.; Definition at line 81 of file TVirtualMonitoring.h. ◆ Streamer(). void TVirtualMonitoringWriter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TVirtualMonitoringWriter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TVirtualMonitoring.h. ◆ Verbose(). virtual void TVirtualMonitoringWriter::Verbose ; (; Bool_t ; ). inlinevirtual . Reimplemented in ROOT::RTreeDrawMonitoring, TSQLMonitoringWriter, and TTreeDrawMonitoring.; Definition at line 83 of file TVirtualMonitoring.h. Member Data Documentation. ◆ fTmpOpenPhases. TList* TVirtualMonitoringWriter::fTmpOpenPhases. protected . Definition at line 45 of file TVirtualMonitoring.h. ◆ fValue. Double_t TVirtualMonitoringWriter::fValue. private . Definition at line 42 of file TVirtualMonitoring.h. Libraries for TVirtualMonitoringWriter:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TVirtualMonitoring.h; core/base/src/TVirtualMonitoring.cxx. TVirtualMonitoringWriter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMonitoringWriter.html:18191,Guid,Guide,18191,doc/master/classTVirtualMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html,1,['Guid'],['Guide']
Usability,"TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kInt@ kIntDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kULong@ kULongDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kTObject@ kTObjectDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kLong64@ kLong64Definition TVirtualStreamerInfo.h:122; TVirtualStreamerInfo::kCounter@ kCounterDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kTNamed@ kTNamedDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::GetElementvirtual TStreamerElement * GetElement(Int_t id) const =0; TVirtualStreamerInfo::GetElementsvirtual TObjArray * GetElements() const =0; TVirtualStreamerInfo::GetClassvirtual TClass * GetClass() const =0; bool; double; int; object; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::kSTLmap@ kSTLmapDefinition ESTLType.h:33; ROOT::kSTLunorderedmultiset@ kSTLunorderedmultisetDefinition ESTLType.h:43; ROOT::kSTLend@ kSTLendDefinition ESTLType.h:47; ROOT::kSTLset@ kSTLsetDefinition ESTLType.h:35; ROOT::kSTLmultiset@ kSTLmultisetDefinition ESTLType.h:36; ROOT::kSTLvector@ kSTLvectorDefinition ESTLType.h:30; ROOT::kSTLunorderedmultimap@ kSTLunorderedmultimapDefinition ESTLType.h:45; ROOT::kSTLunorderedset@ kSTLunorderedsetDefinition ESTLType.h:42; ROOT::kSTLunorderedmap@ kSTLunorderedmapDefinition ESTLType.h:44; ROOT::kNotSTL@ kNotSTLDefinition ESTLType.h:29; ROOT::kSTLmultimap@ kSTLmultimapDefinition ESTLType.h:34; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TStreamerInfoActions::TIDsstd::vector< TIDNode > TIDsDefinition TStreamerInfoActions.h:138; slashTCanvas * slash()Definition slash.C:1; mTMarker mDefinition textangle.C:8. treetreesrcTBranchElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:312128,Guid,Guide,312128,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Guid'],['Guide']
Usability,TXMLAttr::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TXMLAttr::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 35 of file TXMLAttr.h. ◆ DeclFileName(). static const char * TXMLAttr::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 35 of file TXMLAttr.h. ◆ GetName(). const char * TXMLAttr::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 31 of file TXMLAttr.h. ◆ GetValue(). const char * TXMLAttr::GetValue ; (; ); const. inline . Definition at line 33 of file TXMLAttr.h. ◆ IsA(). TClass * TXMLAttr::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 35 of file TXMLAttr.h. ◆ Key(). const char * TXMLAttr::Key ; (; ); const. inline . Definition at line 32 of file TXMLAttr.h. ◆ operator=(). TXMLAttr & TXMLAttr::operator= ; (; const TXMLAttr & ; ). privatedelete . ◆ Streamer(). void TXMLAttr::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TXMLAttr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 35 of file TXMLAttr.h. Member Data Documentation. ◆ fKey. const char* TXMLAttr::fKey. private . XML attribute key. ; Definition at line 24 of file TXMLAttr.h. ◆ fValue. const char* TXMLAttr::fValue. private . XML attribute value. ; Definition at line 25 of file TXMLAttr.h. Libraries for TXMLAttr:. [legend]; The documentation for this class was generated from the following file:; io/xmlparser/inc/TXMLAttr.h. TXMLAttr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLAttr.html:12869,Guid,Guide,12869,doc/master/classTXMLAttr.html,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html,1,['Guid'],['Guide']
Usability,"T_CELLSPACING_FLAT   0;  ; #define DFLT_HSPACE   0;  ; #define DFLT_VSPACE   0;  ; #define MAX(A, B)   ((A) < (B) ? (B) : (A));  ; #define N   (HTML_MAX_COLUMNS+1);  ; #define SETMAX(A, B)   if ((A) < (B)) { (A) = (B); };  ; #define VAlign_Baseline   4;  ; #define VAlign_Bottom   2;  ; #define VAlign_Center   3;  ; #define VAlign_Top   1;  ; #define VAlign_Unknown   0;  . Macro Definition Documentation. ◆ ColMin. #define ColMin; (;  ; A, .  ; B . );    colMin[(A)-1][(B)-1]. ◆ ColReq. #define ColReq; (;  ; A, .  ; B . );    colMin[(B)-1][(A)-1]. ◆ DFLT_BORDER. #define DFLT_BORDER   0. Definition at line 38 of file TGHtmlTable.cxx. ◆ DFLT_CELLPADDING. #define DFLT_CELLPADDING   2. Definition at line 41 of file TGHtmlTable.cxx. ◆ DFLT_CELLSPACING_3D. #define DFLT_CELLSPACING_3D   5. Definition at line 39 of file TGHtmlTable.cxx. ◆ DFLT_CELLSPACING_FLAT. #define DFLT_CELLSPACING_FLAT   0. Definition at line 40 of file TGHtmlTable.cxx. ◆ DFLT_HSPACE. #define DFLT_HSPACE   0. Definition at line 42 of file TGHtmlTable.cxx. ◆ DFLT_VSPACE. #define DFLT_VSPACE   0. Definition at line 43 of file TGHtmlTable.cxx. ◆ MAX. #define MAX; (;  ; A, .  ; B . );    ((A) < (B) ? (B) : (A)). Definition at line 47 of file TGHtmlTable.cxx. ◆ N. #define N   (HTML_MAX_COLUMNS+1). ◆ SETMAX. #define SETMAX; (;  ; A, .  ; B . );    if ((A) < (B)) { (A) = (B); }. Definition at line 46 of file TGHtmlTable.cxx. ◆ VAlign_Baseline. #define VAlign_Baseline   4. Definition at line 1085 of file TGHtmlTable.cxx. ◆ VAlign_Bottom. #define VAlign_Bottom   2. Definition at line 1083 of file TGHtmlTable.cxx. ◆ VAlign_Center. #define VAlign_Center   3. Definition at line 1084 of file TGHtmlTable.cxx. ◆ VAlign_Top. #define VAlign_Top   1. Definition at line 1082 of file TGHtmlTable.cxx. ◆ VAlign_Unknown. #define VAlign_Unknown   0. Definition at line 1081 of file TGHtmlTable.cxx. guiguihtmlsrcTGHtmlTable.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TGHtmlTable_8cxx.html:2562,Guid,Guide,2562,doc/v632/TGHtmlTable_8cxx.html,https://root.cern,https://root.cern/doc/v632/TGHtmlTable_8cxx.html,1,['Guid'],['Guide']
Usability,T_Load; static TTabCom::EContext_tkSYS_EnvVar; static TTabCom::EContext_tkSYS_FileName; static TTabCom::EContext_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7726,Clear,ClearEnvVars,7726,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearEnvVars']
Usability,"T_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14054,learn,learning,14054,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['learn'],['learning']
Usability,"TabCom.cxx. ◆ AppendListOfFilesInDirectory(). void TTabCom::AppendListOfFilesInDirectory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9440,Clear,Clear,9440,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['Clear']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoConeSegEditor.html:22143,undo,undoing,22143,root/html528/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html528/TGeoConeSegEditor.html,1,['undo'],['undoing']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoConeSegEditor.html:22243,undo,undoing,22243,root/html530/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html530/TGeoConeSegEditor.html,1,['undo'],['undoing']
Usability,"TabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoConeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoConeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for cone segment editor. ~TGeoConeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for Phi1. void DoPhi2(); Slot for Phi2. void DoPhi(); Slot for Phi. void DoApply(); Slot for applying current parameters. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoConeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoConeSegEditor.html:22243,undo,undoing,22243,root/html532/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html532/TGeoConeSegEditor.html,1,['undo'],['undoing']
Usability,"Table objects are the category equivalent of RooPlot objects; (which are used for real-valued objects); . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTable.html:904,Clear,Clear,904,root/html602/RooTable.html,https://root.cern,https://root.cern/root/html602/RooTable.html,2,['Clear'],['Clear']
Usability,"Table objects are the category equivalent of RooPlot objects; (which are used for real-valued objects); . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTable.html:904,Clear,Clear,904,root/html526/RooTable.html,https://root.cern,https://root.cern/root/html526/RooTable.html,5,['Clear'],['Clear']
Usability,TableHDU). ; Cells are ordered in the following way: fCells[0..fNRows-1] -> cells of column 0 fCells[fNRows..2*fNRows-1] -> cells of column 1 fCells[2*fNRows..3*fNRows-1] -> cells of column 2 fCells[(fNColumns-1)*fNRows..fNColumns*fNRows-1] -> cells of column fNColumns-1 ; Definition at line 90 of file TFITS.h. ◆ fColumnsInfo. struct Column* TFITSHDU::fColumnsInfo. protected . Information about columns (when fType == kTableHDU) ; Definition at line 87 of file TFITS.h. ◆ fExtensionName. TString TFITSHDU::fExtensionName. protected . Extension Name. ; Definition at line 83 of file TFITS.h. ◆ fFilePath. TString TFITSHDU::fFilePath. protected . Path to HDU's file including filter. ; Definition at line 78 of file TFITS.h. ◆ fNColumns. Int_t TFITSHDU::fNColumns. protected . Number of columns (when fType == kTableHDU) ; Definition at line 88 of file TFITS.h. ◆ fNRecords. Int_t TFITSHDU::fNRecords. protected . Number of records. ; Definition at line 81 of file TFITS.h. ◆ fNRows. Int_t TFITSHDU::fNRows. protected . Number of rows (when fType == kTableHDU) ; Definition at line 89 of file TFITS.h. ◆ fNumber. Int_t TFITSHDU::fNumber. protected . HDU number (1=PRIMARY) ; Definition at line 84 of file TFITS.h. ◆ fPixels. TArrayD* TFITSHDU::fPixels. protected . Image pixels (when fType == kImageHDU) ; Definition at line 86 of file TFITS.h. ◆ fRecords. struct HDURecord* TFITSHDU::fRecords. protected . HDU metadata records. ; Definition at line 80 of file TFITS.h. ◆ fSizes. TArrayI* TFITSHDU::fSizes. protected . Image sizes in each dimension (when fType == kImageHDU) ; Definition at line 85 of file TFITS.h. ◆ fType. enum EHDUTypes TFITSHDU::fType. protected . HDU type. ; Definition at line 82 of file TFITS.h. Libraries for TFITSHDU:. [legend]; The documentation for this class was generated from the following files:; graf2d/fitsio/inc/TFITS.h; graf2d/fitsio/src/TFITS.cxx. TFITSHDU. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:51 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFITSHDU.html:28962,Guid,Guide,28962,doc/master/classTFITSHDU.html,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html,1,['Guid'],['Guide']
Usability,"Tag >; ROOT::Math::DisplacementVector3D::XScalar X() constCartesian X, converting if necessary from internal coordinate system.Definition DisplacementVector3D.h:281; ROOT::Math::DisplacementVector3D::YScalar Y() constCartesian Y, converting if necessary from internal coordinate system.Definition DisplacementVector3D.h:286; ROOT::Math::DisplacementVector3D::SetCoordinatesDisplacementVector3D< CoordSystem, Tag > & SetCoordinates(const Scalar src[])Set internal data based on a C-style array of 3 Scalar numbers.Definition DisplacementVector3D.h:189; ROOT::Math::DisplacementVector3D::Mag2Scalar Mag2() constMagnitute squared ( r^2 in spherical coordinate)Definition DisplacementVector3D.h:323; ROOT::Math::DisplacementVector3D::ZScalar Z() constCartesian Z, converting if necessary from internal coordinate system.Definition DisplacementVector3D.h:291; ROOT::Math::DisplacementVector3D::DotScalar Dot(const DisplacementVector3D< OtherCoords, Tag > &v) constReturn the scalar (dot) product of two displacement vectors.Definition DisplacementVector3D.h:403; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::ERotation3DMatrixIndexERotation3DMatrixIndexDefinition AxisAngle.cxx:64; ROOT::Math::kYY@ kYYDefinition AxisAngle.cxx:66; ROOT::Math::kYX@ kYXDefinition AxisAngle.cxx:66; ROOT::Math::kZX@ kZXDefinition AxisAngle.cxx:67; ROOT::Math::kXX@ kXXDefinition AxisAngle.cxx:65; ROOT::Math::kXZ@ kXZDefinition AxisAngle.cxx:65; ROOT::Math::kZZ@ kZZDefinition AxisAngle.cxx:67; ROOT::Math::kYZ@ kYZDefinition AxisAngle.cxx:66; ROOT::Math::kZY@ kZYDefinition AxisAngle.cxx:67; ROOT::Math::kXY@ kXYDefinition AxisAngle.cxx:65; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorsrcAxisAngle.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/AxisAngle_8cxx_source.html:5995,Guid,Guide,5995,doc/master/AxisAngle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/AxisAngle_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Tag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveShape.html:2682,Clear,ClearProjectedList,2682,root/html528/TEveShape.html,https://root.cern,https://root.cern/root/html528/TEveShape.html,4,['Clear'],['ClearProjectedList']
Usability,"TargetFile : output ROOT file; the test tree and all evaluation plots; 110/// will be stored here; 111/// - theOption : option string; currently: ""V"" for verbose; 112 ; 113TMVA::Factory::Factory(TString jobName, TFile *theTargetFile, TString theOption); 114 : Configurable(theOption), fTransformations(""I""), fVerbose(kFALSE), fVerboseLevel(kINFO), fCorrelations(kFALSE),; 115 fROC(kTRUE), fSilentFile(theTargetFile == nullptr), fJobName(jobName), fAnalysisType(Types::kClassification),; 116 fModelPersistence(kTRUE); 117{; 118 fName = ""Factory"";; 119 fgTargetFile = theTargetFile;; 120 fLogger->SetSource(fName.Data());; 121 ; 122 // render silent; 123 if (gTools().CheckForSilentOption(GetOptions())); 124 Log().InhibitOutput(); // make sure is silent if wanted to; 125 ; 126 // init configurable; 127 SetConfigDescription(""Configuration options for Factory running"");; 128 SetConfigName(GetName());; 129 ; 130 // histograms are not automatically associated with the current; 131 // directory and hence don't go out of scope when closing the file; 132 // TH1::AddDirectory(kFALSE);; 133 Bool_t silent = kFALSE;; 134#ifdef WIN32; 135 // under Windows, switch progress bar and color off by default, as the typical windows shell doesn't handle these; 136 // (would need different sequences..); 137 Bool_t color = kFALSE;; 138 Bool_t drawProgressBar = kFALSE;; 139#else; 140 Bool_t color = !gROOT->IsBatch();; 141 Bool_t drawProgressBar = kTRUE;; 142#endif; 143 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 144 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 145 AddPreDefVal(TString(""Debug""));; 146 AddPreDefVal(TString(""Verbose""));; 147 AddPreDefVal(TString(""Info""));; 148 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 149 DeclareOptionRef(; 150 fTransformations, ""Transformations"",; 151 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:4950,progress bar,progress bar,4950,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"Terminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawGraph(); TProofDrawGraph(TProofDrawGraph&&); TProofDrawGraph(const TProofDrawGraph&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawGraph.html:5918,Clear,ClearFormula,5918,root/html602/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html602/TProofDrawGraph.html,2,['Clear'],['ClearFormula']
Usability,"Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165060,simpl,simple,165060,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"TextAlign (12);  ; tv3 SetTextAlign (13);  ; th2 SetTextAlign (21);  ; th3 SetTextAlign (31);  ; th1 SetTextSize (0.12);  . Variables; TLine lv;  ; auto * th1 = new TText(0.33,0.165,""Left adjusted"");  ; auto * th2 = new TText(0.33,0.493,""Center adjusted"");  ; auto * th3 = new TText(0.33,0.823,""Right adjusted"");  ; auto * tv1 = new TText(0.66,0.165,""Bottom adjusted"");  ; auto * tv2 = new TText(0.66,0.493,""Center adjusted"");  ; auto * tv3 = new TText(0.66,0.823,""Top adjusted"");  . Function Documentation. ◆ Draw(). line Draw ; (; ). ◆ DrawLine() [1/2]. lv DrawLine ; (; 0. ; 33, . 0. ; 0, . 0. ; 33, . 1. ; 0 . ). ◆ DrawLine() [2/2]. lv DrawLine ; (; 0. ; 6, . 0. ; 165, . 1. ; , . 0. ; 165 . ). ◆ Range(). Ta Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetLineColor(). lv SetLineColor ; (; kBlue ; ). ◆ SetLineStyle(). lv SetLineStyle ; (; 3 ; ). ◆ SetTextAlign() [1/5]. tv1 SetTextAlign ; (; 11 ; ). ◆ SetTextAlign() [2/5]. tv2 SetTextAlign ; (; 12 ; ). ◆ SetTextAlign() [3/5]. tv3 SetTextAlign ; (; 13 ; ). ◆ SetTextAlign() [4/5]. th2 SetTextAlign ; (; 21 ; ). ◆ SetTextAlign() [5/5]. th3 SetTextAlign ; (; 31 ; ). ◆ SetTextSize(). th1 SetTextSize ; (; 0. ; 12). Variable Documentation. ◆ lv. TLine lv. Definition at line 5 of file textalign.C. ◆ th1. auto* th1 = new TText(0.33,0.165,""Left adjusted""). Definition at line 14 of file textalign.C. ◆ th2. auto* th2 = new TText(0.33,0.493,""Center adjusted""). Definition at line 18 of file textalign.C. ◆ th3. auto* th3 = new TText(0.33,0.823,""Right adjusted""). Definition at line 22 of file textalign.C. ◆ tv1. auto* tv1 = new TText(0.66,0.165,""Bottom adjusted""). Definition at line 27 of file textalign.C. ◆ tv2. auto* tv2 = new TText(0.66,0.493,""Center adjusted""). Definition at line 31 of file textalign.C. ◆ tv3. auto* tv3 = new TText(0.66,0.823,""Top adjusted""). Definition at line 35 of file textalign.C. corebasedocmacrostextalign.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textalign_8C.html:2328,Guid,Guide,2328,doc/master/textalign_8C.html,https://root.cern,https://root.cern/doc/master/textalign_8C.html,1,['Guid'],['Guide']
Usability,"The algorithm is modified/protected for the case; when a TProfile3D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile3D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumwyz; stats[11]= sumwt; stats[12]= sumwt2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. Bool_t Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:37899,simpl,simply,37899,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,3,['simpl'],['simply']
Usability,"The algorithm is modified/protected for the case; when a TProfile3D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile3D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumwyz; stats[11]= sumwt; stats[12]= sumwt2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. Long64_t Merge(TCollection* list); Merge all histograms in the collection in this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. void Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. void Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-* ===",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:36799,simpl,simply,36799,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,3,['simpl'],['simply']
Usability,"The classifier is trained to discriminate between the reference and target distribution. We see how the neural networks generalize to unknown mean values.; We compare the approach of using the likelihood ratio trick to morphing.; An introduction of SBI can be found in https://arxiv.org/pdf/2010.06439.; A short recap: The idea of SBI is to fit a surrogate model to the data, in order to really learn the likelihood function instead of calculating it. Therefore, a classifier is trained to discriminate between samples from a target distribution (here the Gaussian) $$x\sim p(x|\theta)$$ and a reference distribution (here the Uniform) $$x\sim p_{ref}(x|\theta)$$.; The output of the classifier $$\hat{s}(\theta)$$ is a monotonic function of the likelihood ration and can be turned into an estimate of the likelihood ratio via $$\hat{r}(\theta)=\frac{1-\hat{s}(\theta)}{\hat{s}(\theta)}.$$ This is called the likelihood ratio trick.; In the end we compare the negative logarithmic likelihoods of the learned, morphed and analytical likelihood with minuit and as a plot. ; import ROOT; import numpy as np; from sklearn.neural_network import MLPClassifier; ; # The samples used for training the classifier in this tutorial / rescale for more accuracy; n_samples = 10000; ; # Kills warning messages; ROOT.RooMsgService.instance().setGlobalKillBelow(ROOT.RooFit.WARNING); ; ; # Morphing as a baseline; def morphing(setting):; ; # Define binning for morphing; grid = ROOT.RooMomentMorphFuncND.Grid(ROOT.RooBinning(4, 0.0, 4.0)); x_var.setBins(50); ; # Number of 'sampled' gaussians, if you change it, adjust the binning properly; n_grid = 5; ; for i in range(n_grid):; # Define the sampled gausians; mu_help = ROOT.RooRealVar(f""mu{i}"", f""mu{i}"", i); help = ROOT.RooGaussian(f""g{i}"", f""g{i}"", x_var, mu_help, sigma); workspace.Import(help, Silence=True); ; # Fill the histograms; hist = workspace[f""g{i}""].generateBinned([x_var], n_samples); ; # Make sure that every bin is filled and we don't get zero prob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:1511,learn,learned,1511,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['learn'],['learned']
Usability,"The documentation is; parsed by TDocParser and then passed to TClassDocOutput to generate; the class doc header, the class description, members overview, and method; documentation. All generic output functionality is in TDocOutput; it is; re-used in this derived class. You usually do not use this class yourself; it is invoked indirectly by; THtml. Customization of the output should happen via the interfaces defined; by THtml. Function Members (Methods); public:. TClassDocOutput(const TClassDocOutput&); TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); virtual~TClassDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDocOutput::AdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); voidClass2Html(Bool_t force = kFALSE); Bool_tClassDotCharts(ostream& out); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTDocOutput::Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassDocOutput.html:1349,Clear,Clear,1349,root/html526/TClassDocOutput.html,https://root.cern,https://root.cern/root/html526/TClassDocOutput.html,5,['Clear'],['Clear']
Usability,"The result of the minimization is transformed into the user representable format by M . For more explanations see [api:state].; 4.3 Input to M; The following input combinations to M are possible:. \(\mbox{FCN}\) + parameters + uncertainties; \(\mbox{FCN}\) with gradient + parameters + uncertainties; \(\mbox{FCN}\) + parameters + covariance; \(\mbox{FCN}\) with gradient + parameters + covariance. For each of these combinations the user can chose between a minimal required interface (using std::vector containers) for the parameters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:37818,simpl,simply,37818,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['simpl'],['simply']
Usability,"The result of the minimization is transformed into the user representable format by M . For more explanations see [api:state].; 4.3 Input to M; The following input combinations to M are possible:. \(\mbox{FCN}\) + parameters + uncertainties; \(\mbox{FCN}\) with gradient + parameters + uncertainties; \(\mbox{FCN}\) + parameters + covariance; \(\mbox{FCN}\) with gradient + parameters + covariance. For each of these combinations the user can chose between a minimal required interface (using std::vector containers) for the parameters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, they have to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, they can fix a parameter or put limits on another one before handing them over to Minuit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply their own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:33802,simpl,simply,33802,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['simpl'],['simply']
Usability,"The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector (.C) file; or TSelector object.; The default tree is analyzed (i.e. the first one found). To speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:51188,Feedback,Feedback,51188,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['Feedback'],['Feedback']
Usability,"The underlying architecture.; 51 */; 52//______________________________________________________________________________; 53template <typename AArchitecture>; 54class TBatch; 55{; 56private:; 57 ; 58 using Matrix_t = typename AArchitecture::Matrix_t;; 59 ; 60 Matrix_t fInputMatrix;; 61 Matrix_t fOutputMatrix;; 62 Matrix_t fWeightMatrix;; 63 ; 64public:; 65 TBatch(Matrix_t &, Matrix_t &, Matrix_t &);; 66 TBatch(const TBatch &) = default;; 67 TBatch( TBatch &&) = default;; 68 TBatch & operator=(const TBatch &) = default;; 69 TBatch & operator=( TBatch &&) = default;; 70 ; 71 /** Return the matrix representing the input data. */; 72 Matrix_t &GetInput() { return fInputMatrix; }; 73 /** Return the matrix representing the output data. */; 74 Matrix_t &GetOutput() { return fOutputMatrix; }; 75 /** Return the matrix holding the event weights. */; 76 Matrix_t &GetWeights() { return fWeightMatrix; }; 77};; 78 ; 79template<typename Data_t, typename AArchitecture> class TDataLoader;; 80 ; 81/** TBatchIterator; 82 *; 83 * Simple iterator class for the iterations over the training batches in; 84 * a given data set represented by a TDataLoader object.; 85 *; 86 * \tparam AData The input data type.; 87 * \tparam AArchitecture The underlying architecture type.; 88 */; 89template<typename Data_t, typename AArchitecture>; 90class TBatchIterator; 91{; 92private:; 93 ; 94 TDataLoader<Data_t, AArchitecture> & fDataLoader;; 95 size_t fBatchIndex;; 96 ; 97public:; 98 ; 99TBatchIterator(TDataLoader<Data_t, AArchitecture> & dataLoader, size_t index = 0); 100: fDataLoader(dataLoader), fBatchIndex(index); 101{; 102 // Nothing to do here.; 103}; 104 ; 105 TBatch<AArchitecture> operator*() {return fDataLoader.GetBatch();}; 106 TBatchIterator operator++() {fBatchIndex++; return *this;}; 107 bool operator!=(const TBatchIterator & other) {; 108 return fBatchIndex != other.fBatchIndex;; 109 }; 110};; 111 ; 112/** TDataLoader; 113 *; 114 * Service class managing the streaming of the training data fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html:2928,Simpl,Simple,2928,doc/master/DNN_2DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html,1,['Simpl'],['Simple']
Usability,"This allows to; set and fix parameter values, and set step sizes directly. Restricting the fit range. The fit range can be restricted through; fit->SetRangeX(first bin #, last bin #);; and freed using; fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();. Weights histograms. Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through; fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results. The fit is carried out through; Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through; fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by; TH1* result = fit->GetPlot();. Using different histograms. It is possible to change the histogram being fitted through; fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through; fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). Errors. Any serious inconsistency results in an error. Function Members (Methods); public:. TFractionFitter(); TFractionFitter(TH1* data, TObjArray* MCs); virtual~TFractionFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:4375,simpl,simple,4375,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['simpl'],['simple']
Usability,"This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRecWinPair(). TRecWinPair::TRecWinPair ; (; Window_t ; key, . Window_t ; value . ). inline . Definition at line 259 of file TRecorder.h. Member Function Documentation. ◆ Class(). static TClass * TRecWinPair::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRecWinPair::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRecWinPair::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 261 of file TRecorder.h. ◆ DeclFileName(). static const char * TRecWinPair::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 261 of file TRecorder.h. ◆ IsA(). TClass * TRecWinPair::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 261 of file TRecorder.h. ◆ Streamer(). void TRecWinPair::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRecWinPair::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 261 of file TRecorder.h. Friends And Related Symbol Documentation. ◆ TRecorderReplaying. friend class TRecorderReplaying. friend . Definition at line 252 of file TRecorder.h. Member Data Documentation. ◆ fKey. Window_t TRecWinPair::fKey. protected . Definition at line 254 of file TRecorder.h. ◆ fValue. Window_t TRecWinPair::fValue. protected . Definition at line 255 of file TRecorder.h. Libraries for TRecWinPair:. [legend]; The documentation for this class was generated from the following file:; gui/recorder/inc/TRecorder.h. TRecWinPair. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecWinPair.html:12230,Guid,Guide,12230,doc/master/classTRecWinPair.html,https://root.cern,https://root.cern/doc/master/classTRecWinPair.html,1,['Guid'],['Guide']
Usability,"This is accomplished by ""positioning"" some volumes ""inside"" others. Any volume is an un-positioned object in the sense that it defines only a ""local frame"" (matching the one of its ""shape""). In order to fully define the mother-daughter relationship between two volumes one has to specify how the daughter will be positioned inside. This is accomplished by defining a ""local geometrical transformation"" of the daughter with respect to the mother coordinate system. These transformations will be subsequently used in the example.; Q: ""I see the lines defining the top level volume as in the previous example,; but what about the other volumes named REPLICA and ROOT?""; A: You will also notice that several other volumes are created by using lines like:; TGeoVolume *someVolume = gGeoManager->MakeXXX(""someName"",; ptrMedium, /* parameters coresponding to XXX ...*/); In the method above XXX represent some shape name (Box, Tube, etc.). This is just a simple way of creating a volume having a given shape in one-step (see also section: ""Creating and Positioning; Volumes""). As for REPLICA and ROOT volumes, they are just some ""virtual volumes"" used for grouping and positioning together other ""real volumes"". See ""Positioned Volumes (Nodes)"". The same structure represented by (a real or) a virtual volume can be ""replicated"" several times in the geometry.; Q: ""Fine, so probably the real volumes are the ones composing the letters R,; O and T. Why one have to define so many volumes to make an R?""; A: Well, in real life some objects have much more complex shapes that an ""R"". The modeller cannot just know all of them; the idea is to make a complex object by using elementary building blocks that have known shapes (called ""primitive shapes""). Gluing these together in the appropriate way is the user responsibility.; Q: ""I am getting the global picture but not making much out of it... There; are also a lot of calls to TGeoVolume::AddNode() that I do not understand.""; A: A volume is positioned inside",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:9457,simpl,simple,9457,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
